
usbconnect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007468  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080075f0  080075f0  000175f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007678  08007678  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007678  08007678  00017678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007680  08007680  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007680  08007680  00017680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007684  08007684  00017684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001cbc  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001db8  20001db8  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013083  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ec5  00000000  00000000  000331af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00036078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f40  00000000  00000000  00037110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a7c  00000000  00000000  00038050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014193  00000000  00000000  0005bacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc679  00000000  00000000  0006fc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c2d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004558  00000000  00000000  0013c328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080075d8 	.word	0x080075d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	080075d8 	.word	0x080075d8

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fa74 	bl	80009e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f856 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f8f4 	bl	80006e8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000500:	f006 fafc 	bl	8006afc <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8000504:	f000 f8ba 	bl	800067c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  CDC_Transmit_FS("hello", strlen("hello"));
 8000508:	2105      	movs	r1, #5
 800050a:	481f      	ldr	r0, [pc, #124]	; (8000588 <main+0x98>)
 800050c:	f006 fbce 	bl	8006cac <CDC_Transmit_FS>
	  //CDC_Transmit_FS("Don't set aslı's pin", strlen("Don't set aslı's pin"));
	 // HAL_Delay(100);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (flag==1)
 8000510:	4b1e      	ldr	r3, [pc, #120]	; (800058c <main+0x9c>)
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d1fb      	bne.n	8000510 <main+0x20>
	  {
		  flag=0;
 8000518:	4b1c      	ldr	r3, [pc, #112]	; (800058c <main+0x9c>)
 800051a:	2200      	movs	r2, #0
 800051c:	801a      	strh	r2, [r3, #0]
		  if (!strcmp(externbuffer,"orangeon"))
 800051e:	491c      	ldr	r1, [pc, #112]	; (8000590 <main+0xa0>)
 8000520:	481c      	ldr	r0, [pc, #112]	; (8000594 <main+0xa4>)
 8000522:	f7ff fe51 	bl	80001c8 <strcmp>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d105      	bne.n	8000538 <main+0x48>
		  {
			HAL_GPIO_WritePin(orangeled_GPIO_Port, orangeled_Pin, 1   );
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000532:	4819      	ldr	r0, [pc, #100]	; (8000598 <main+0xa8>)
 8000534:	f000 fdb0 	bl	8001098 <HAL_GPIO_WritePin>

		  }
		  if (!strcmp(externbuffer,"orangeof"))
 8000538:	4918      	ldr	r1, [pc, #96]	; (800059c <main+0xac>)
 800053a:	4816      	ldr	r0, [pc, #88]	; (8000594 <main+0xa4>)
 800053c:	f7ff fe44 	bl	80001c8 <strcmp>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d105      	bne.n	8000552 <main+0x62>
		  		  {
		  			HAL_GPIO_WritePin(orangeled_GPIO_Port, orangeled_Pin, 0  );
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054c:	4812      	ldr	r0, [pc, #72]	; (8000598 <main+0xa8>)
 800054e:	f000 fda3 	bl	8001098 <HAL_GPIO_WritePin>

		  		  }
		  if (!strcmp(externbuffer,"redof"))
 8000552:	4913      	ldr	r1, [pc, #76]	; (80005a0 <main+0xb0>)
 8000554:	480f      	ldr	r0, [pc, #60]	; (8000594 <main+0xa4>)
 8000556:	f7ff fe37 	bl	80001c8 <strcmp>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d105      	bne.n	800056c <main+0x7c>
		 		  		  {
		 		  			HAL_GPIO_WritePin(redled_GPIO_Port, redled_Pin, 0  );
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000566:	480c      	ldr	r0, [pc, #48]	; (8000598 <main+0xa8>)
 8000568:	f000 fd96 	bl	8001098 <HAL_GPIO_WritePin>

		 		  		  }
		  if (!strcmp(externbuffer,"redon"))
 800056c:	490d      	ldr	r1, [pc, #52]	; (80005a4 <main+0xb4>)
 800056e:	4809      	ldr	r0, [pc, #36]	; (8000594 <main+0xa4>)
 8000570:	f7ff fe2a 	bl	80001c8 <strcmp>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1ca      	bne.n	8000510 <main+0x20>
		  		 		  		  {
		  		 		  			HAL_GPIO_WritePin(redled_GPIO_Port, redled_Pin, 1  );
 800057a:	2201      	movs	r2, #1
 800057c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000580:	4805      	ldr	r0, [pc, #20]	; (8000598 <main+0xa8>)
 8000582:	f000 fd89 	bl	8001098 <HAL_GPIO_WritePin>
	  if (flag==1)
 8000586:	e7c3      	b.n	8000510 <main+0x20>
 8000588:	080075f0 	.word	0x080075f0
 800058c:	20000158 	.word	0x20000158
 8000590:	080075f8 	.word	0x080075f8
 8000594:	20000118 	.word	0x20000118
 8000598:	40020c00 	.word	0x40020c00
 800059c:	08007604 	.word	0x08007604
 80005a0:	08007610 	.word	0x08007610
 80005a4:	08007618 	.word	0x08007618

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	; 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f007 f806 	bl	80075c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	4b28      	ldr	r3, [pc, #160]	; (8000674 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a27      	ldr	r2, [pc, #156]	; (8000674 <SystemClock_Config+0xcc>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b25      	ldr	r3, [pc, #148]	; (8000674 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b22      	ldr	r3, [pc, #136]	; (8000678 <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <SystemClock_Config+0xd0>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800061c:	23a8      	movs	r3, #168	; 0xa8
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000624:	2307      	movs	r3, #7
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f001 ffe3 	bl	80025f8 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000638:	f000 f90a 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000648:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2105      	movs	r1, #5
 800065a:	4618      	mov	r0, r3
 800065c:	f002 fa44 	bl	8002ae8 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000666:	f000 f8f3 	bl	8000850 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	; 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000682:	463b      	mov	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_TIM6_Init+0x64>)
 800068c:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <MX_TIM6_Init+0x68>)
 800068e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_TIM6_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_TIM6_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800069c:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_TIM6_Init+0x64>)
 800069e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_TIM6_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006aa:	480d      	ldr	r0, [pc, #52]	; (80006e0 <MX_TIM6_Init+0x64>)
 80006ac:	f002 fc14 	bl	8002ed8 <HAL_TIM_Base_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80006b6:	f000 f8cb 	bl	8000850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006c2:	463b      	mov	r3, r7
 80006c4:	4619      	mov	r1, r3
 80006c6:	4806      	ldr	r0, [pc, #24]	; (80006e0 <MX_TIM6_Init+0x64>)
 80006c8:	f002 fd86 	bl	80031d8 <HAL_TIMEx_MasterConfigSynchronization>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80006d2:	f000 f8bd 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000015c 	.word	0x2000015c
 80006e4:	40001000 	.word	0x40001000

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	4b32      	ldr	r3, [pc, #200]	; (80007cc <MX_GPIO_Init+0xe4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a31      	ldr	r2, [pc, #196]	; (80007cc <MX_GPIO_Init+0xe4>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <MX_GPIO_Init+0xe4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <MX_GPIO_Init+0xe4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <MX_GPIO_Init+0xe4>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_GPIO_Init+0xe4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	4b24      	ldr	r3, [pc, #144]	; (80007cc <MX_GPIO_Init+0xe4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a23      	ldr	r2, [pc, #140]	; (80007cc <MX_GPIO_Init+0xe4>)
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_GPIO_Init+0xe4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0308 	and.w	r3, r3, #8
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_GPIO_Init+0xe4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <MX_GPIO_Init+0xe4>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_GPIO_Init+0xe4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, orangeled_Pin|redled_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000774:	4816      	ldr	r0, [pc, #88]	; (80007d0 <MX_GPIO_Init+0xe8>)
 8000776:	f000 fc8f 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800077a:	2301      	movs	r3, #1
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800077e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	4811      	ldr	r0, [pc, #68]	; (80007d4 <MX_GPIO_Init+0xec>)
 8000790:	f000 face 	bl	8000d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : orangeled_Pin redled_Pin */
  GPIO_InitStruct.Pin = orangeled_Pin|redled_Pin;
 8000794:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4808      	ldr	r0, [pc, #32]	; (80007d0 <MX_GPIO_Init+0xe8>)
 80007ae:	f000 fabf 	bl	8000d30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	2006      	movs	r0, #6
 80007b8:	f000 fa83 	bl	8000cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007bc:	2006      	movs	r0, #6
 80007be:	f000 fa9c 	bl	8000cfa <HAL_NVIC_EnableIRQ>

}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	; 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020c00 	.word	0x40020c00
 80007d4:	40020000 	.word	0x40020000

080007d8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]
	inerruptcount ++;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <HAL_GPIO_EXTI_Callback+0x68>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	4a15      	ldr	r2, [pc, #84]	; (8000840 <HAL_GPIO_EXTI_Callback+0x68>)
 80007ea:	6013      	str	r3, [r2, #0]
 if (GPIO_Pin==GPIO_PIN_0)
 80007ec:	88fb      	ldrh	r3, [r7, #6]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d121      	bne.n	8000836 <HAL_GPIO_EXTI_Callback+0x5e>
 {
	 if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0 )== 1)
 80007f2:	2101      	movs	r1, #1
 80007f4:	4813      	ldr	r0, [pc, #76]	; (8000844 <HAL_GPIO_EXTI_Callback+0x6c>)
 80007f6:	f000 fc37 	bl	8001068 <HAL_GPIO_ReadPin>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d102      	bne.n	8000806 <HAL_GPIO_EXTI_Callback+0x2e>
	 {
		HAL_TIM_Base_Start(&htim6);
 8000800:	4811      	ldr	r0, [pc, #68]	; (8000848 <HAL_GPIO_EXTI_Callback+0x70>)
 8000802:	f002 fbb9 	bl	8002f78 <HAL_TIM_Base_Start>

	 }// button pres
	 if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0 )== 0)
 8000806:	2101      	movs	r1, #1
 8000808:	480e      	ldr	r0, [pc, #56]	; (8000844 <HAL_GPIO_EXTI_Callback+0x6c>)
 800080a:	f000 fc2d 	bl	8001068 <HAL_GPIO_ReadPin>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d110      	bne.n	8000836 <HAL_GPIO_EXTI_Callback+0x5e>
	 	 {
		 HAL_TIM_Base_Stop(&htim6);
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <HAL_GPIO_EXTI_Callback+0x70>)
 8000816:	f002 fc17 	bl	8003048 <HAL_TIM_Base_Stop>

		 int count= TIM6->CNT;
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <HAL_GPIO_EXTI_Callback+0x74>)
 800081c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081e:	60fb      	str	r3, [r7, #12]


		 CDC_Transmit_FS(count, strlen(count));
 8000820:	68fc      	ldr	r4, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fcd9 	bl	80001dc <strlen>
 800082a:	4603      	mov	r3, r0
 800082c:	b29b      	uxth	r3, r3
 800082e:	4619      	mov	r1, r3
 8000830:	4620      	mov	r0, r4
 8000832:	f006 fa3b 	bl	8006cac <CDC_Transmit_FS>


	 	 }// button up
 }//if pin 0
}
 8000836:	bf00      	nop
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	bd90      	pop	{r4, r7, pc}
 800083e:	bf00      	nop
 8000840:	200001a4 	.word	0x200001a4
 8000844:	40020000 	.word	0x40020000
 8000848:	2000015c 	.word	0x2000015c
 800084c:	40001000 	.word	0x40001000

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <HAL_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <HAL_MspInit+0x4c>)
 800086c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000870:	6453      	str	r3, [r2, #68]	; 0x44
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <HAL_MspInit+0x4c>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_MspInit+0x4c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <HAL_MspInit+0x4c>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	6413      	str	r3, [r2, #64]	; 0x40
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_MspInit+0x4c>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800089a:	2007      	movs	r0, #7
 800089c:	f000 fa06 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800

080008ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <HAL_TIM_Base_MspInit+0x3c>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d10d      	bne.n	80008da <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <HAL_TIM_Base_MspInit+0x40>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	4a09      	ldr	r2, [pc, #36]	; (80008ec <HAL_TIM_Base_MspInit+0x40>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	6413      	str	r3, [r2, #64]	; 0x40
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <HAL_TIM_Base_MspInit+0x40>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40001000 	.word	0x40001000
 80008ec:	40023800 	.word	0x40023800

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 f8a2 	bl	8000a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000948:	2001      	movs	r0, #1
 800094a:	f000 fbbf 	bl	80010cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <OTG_FS_IRQHandler+0x10>)
 800095a:	f000 fd1f 	bl	800139c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000168c 	.word	0x2000168c

08000968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <SystemInit+0x20>)
 800096e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <SystemInit+0x20>)
 8000974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800098c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000992:	490e      	ldr	r1, [pc, #56]	; (80009cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000998:	e002      	b.n	80009a0 <LoopCopyDataInit>

0800099a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800099c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099e:	3304      	adds	r3, #4

080009a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a4:	d3f9      	bcc.n	800099a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a6:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009a8:	4c0b      	ldr	r4, [pc, #44]	; (80009d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ac:	e001      	b.n	80009b2 <LoopFillZerobss>

080009ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b0:	3204      	adds	r2, #4

080009b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b4:	d3fb      	bcc.n	80009ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009b6:	f7ff ffd7 	bl	8000968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ba:	f006 fdd3 	bl	8007564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009be:	f7ff fd97 	bl	80004f0 <main>
  bx  lr    
 80009c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009cc:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80009d0:	08007688 	.word	0x08007688
  ldr r2, =_sbss
 80009d4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80009d8:	20001db8 	.word	0x20001db8

080009dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC_IRQHandler>
	...

080009e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_Init+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <HAL_Init+0x40>)
 80009ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_Init+0x40>)
 80009f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_Init+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_Init+0x40>)
 8000a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f000 f94f 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f000 f808 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a14:	f7ff ff22 	bl	800085c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023c00 	.word	0x40023c00

08000a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_InitTick+0x54>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_InitTick+0x58>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f967 	bl	8000d16 <HAL_SYSTICK_Config>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00e      	b.n	8000a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d80a      	bhi.n	8000a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f000 f92f 	bl	8000cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a64:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <HAL_InitTick+0x5c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e000      	b.n	8000a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000004 	.word	0x20000004

08000a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x20>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a96:	6013      	str	r3, [r2, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	200001a8 	.word	0x200001a8

08000aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_GetTick+0x14>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	200001a8 	.word	0x200001a8

08000ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000acc:	f7ff ffee 	bl	8000aac <HAL_GetTick>
 8000ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000adc:	d005      	beq.n	8000aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_Delay+0x44>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aea:	bf00      	nop
 8000aec:	f7ff ffde 	bl	8000aac <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d8f7      	bhi.n	8000aec <HAL_Delay+0x28>
  {
  }
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4907      	ldr	r1, [pc, #28]	; (8000ba8 <__NVIC_EnableIRQ+0x38>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0a      	blt.n	8000bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	490c      	ldr	r1, [pc, #48]	; (8000bf8 <__NVIC_SetPriority+0x4c>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd4:	e00a      	b.n	8000bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4908      	ldr	r1, [pc, #32]	; (8000bfc <__NVIC_SetPriority+0x50>)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	3b04      	subs	r3, #4
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	440b      	add	r3, r1
 8000bea:	761a      	strb	r2, [r3, #24]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	43d9      	mvns	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	4313      	orrs	r3, r2
         );
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3724      	adds	r7, #36	; 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c78:	d301      	bcc.n	8000c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00f      	b.n	8000c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <SysTick_Config+0x40>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c86:	210f      	movs	r1, #15
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f7ff ff8e 	bl	8000bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <SysTick_Config+0x40>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <SysTick_Config+0x40>)
 8000c98:	2207      	movs	r2, #7
 8000c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	e000e010 	.word	0xe000e010

08000cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff29 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd4:	f7ff ff3e 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	f7ff ff8e 	bl	8000c00 <NVIC_EncodePriority>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff5d 	bl	8000bac <__NVIC_SetPriority>
}
 8000cf2:	bf00      	nop
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff31 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ffa2 	bl	8000c68 <SysTick_Config>
 8000d24:	4603      	mov	r3, r0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	; 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	e16b      	b.n	8001024 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f040 815a 	bne.w	800101e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d005      	beq.n	8000d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d130      	bne.n	8000de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	091b      	lsrs	r3, r3, #4
 8000dce:	f003 0201 	and.w	r2, r3, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d017      	beq.n	8000e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d123      	bne.n	8000e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	08da      	lsrs	r2, r3, #3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3208      	adds	r2, #8
 8000e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3208      	adds	r2, #8
 8000e6e:	69b9      	ldr	r1, [r7, #24]
 8000e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0203 	and.w	r2, r3, #3
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 80b4 	beq.w	800101e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b60      	ldr	r3, [pc, #384]	; (800103c <HAL_GPIO_Init+0x30c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a5f      	ldr	r2, [pc, #380]	; (800103c <HAL_GPIO_Init+0x30c>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b5d      	ldr	r3, [pc, #372]	; (800103c <HAL_GPIO_Init+0x30c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed2:	4a5b      	ldr	r2, [pc, #364]	; (8001040 <HAL_GPIO_Init+0x310>)
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	3302      	adds	r3, #2
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	220f      	movs	r2, #15
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a52      	ldr	r2, [pc, #328]	; (8001044 <HAL_GPIO_Init+0x314>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d02b      	beq.n	8000f56 <HAL_GPIO_Init+0x226>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a51      	ldr	r2, [pc, #324]	; (8001048 <HAL_GPIO_Init+0x318>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d025      	beq.n	8000f52 <HAL_GPIO_Init+0x222>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a50      	ldr	r2, [pc, #320]	; (800104c <HAL_GPIO_Init+0x31c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d01f      	beq.n	8000f4e <HAL_GPIO_Init+0x21e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4f      	ldr	r2, [pc, #316]	; (8001050 <HAL_GPIO_Init+0x320>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d019      	beq.n	8000f4a <HAL_GPIO_Init+0x21a>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4e      	ldr	r2, [pc, #312]	; (8001054 <HAL_GPIO_Init+0x324>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0x216>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4d      	ldr	r2, [pc, #308]	; (8001058 <HAL_GPIO_Init+0x328>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00d      	beq.n	8000f42 <HAL_GPIO_Init+0x212>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4c      	ldr	r2, [pc, #304]	; (800105c <HAL_GPIO_Init+0x32c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d007      	beq.n	8000f3e <HAL_GPIO_Init+0x20e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4b      	ldr	r2, [pc, #300]	; (8001060 <HAL_GPIO_Init+0x330>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_GPIO_Init+0x20a>
 8000f36:	2307      	movs	r3, #7
 8000f38:	e00e      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	e00c      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f3e:	2306      	movs	r3, #6
 8000f40:	e00a      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f42:	2305      	movs	r3, #5
 8000f44:	e008      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f46:	2304      	movs	r3, #4
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e004      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e002      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f56:	2300      	movs	r3, #0
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	f002 0203 	and.w	r2, r2, #3
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	4093      	lsls	r3, r2
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f68:	4935      	ldr	r1, [pc, #212]	; (8001040 <HAL_GPIO_Init+0x310>)
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	089b      	lsrs	r3, r3, #2
 8000f6e:	3302      	adds	r3, #2
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f76:	4b3b      	ldr	r3, [pc, #236]	; (8001064 <HAL_GPIO_Init+0x334>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f9a:	4a32      	ldr	r2, [pc, #200]	; (8001064 <HAL_GPIO_Init+0x334>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa0:	4b30      	ldr	r3, [pc, #192]	; (8001064 <HAL_GPIO_Init+0x334>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc4:	4a27      	ldr	r2, [pc, #156]	; (8001064 <HAL_GPIO_Init+0x334>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fca:	4b26      	ldr	r3, [pc, #152]	; (8001064 <HAL_GPIO_Init+0x334>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fee:	4a1d      	ldr	r2, [pc, #116]	; (8001064 <HAL_GPIO_Init+0x334>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <HAL_GPIO_Init+0x334>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001018:	4a12      	ldr	r2, [pc, #72]	; (8001064 <HAL_GPIO_Init+0x334>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3301      	adds	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	f67f ae90 	bls.w	8000d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40013800 	.word	0x40013800
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400
 800104c:	40020800 	.word	0x40020800
 8001050:	40020c00 	.word	0x40020c00
 8001054:	40021000 	.word	0x40021000
 8001058:	40021400 	.word	0x40021400
 800105c:	40021800 	.word	0x40021800
 8001060:	40021c00 	.word	0x40021c00
 8001064:	40013c00 	.word	0x40013c00

08001068 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	887b      	ldrh	r3, [r7, #2]
 800107a:	4013      	ands	r3, r2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e001      	b.n	800108a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
 80010a4:	4613      	mov	r3, r2
 80010a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010b4:	e003      	b.n	80010be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	041a      	lsls	r2, r3, #16
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	619a      	str	r2, [r3, #24]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010d8:	695a      	ldr	r2, [r3, #20]
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	4013      	ands	r3, r2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d006      	beq.n	80010f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fb74 	bl	80007d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40013c00 	.word	0x40013c00

080010fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010fe:	b08f      	sub	sp, #60	; 0x3c
 8001100:	af0a      	add	r7, sp, #40	; 0x28
 8001102:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e10f      	b.n	800132e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d106      	bne.n	800112e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f005 ff07 	bl	8006f3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2203      	movs	r2, #3
 8001132:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113e:	2b00      	cmp	r3, #0
 8001140:	d102      	bne.n	8001148 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f002 f9d4 	bl	80034fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	687e      	ldr	r6, [r7, #4]
 800115a:	466d      	mov	r5, sp
 800115c:	f106 0410 	add.w	r4, r6, #16
 8001160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001168:	e894 0003 	ldmia.w	r4, {r0, r1}
 800116c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001170:	1d33      	adds	r3, r6, #4
 8001172:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001174:	6838      	ldr	r0, [r7, #0]
 8001176:	f002 f8ab 	bl	80032d0 <USB_CoreInit>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d005      	beq.n	800118c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2202      	movs	r2, #2
 8001184:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e0d0      	b.n	800132e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f002 f9c2 	bl	800351c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e04a      	b.n	8001234 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	4413      	add	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	440b      	add	r3, r1
 80011ac:	333d      	adds	r3, #61	; 0x3d
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011b2:	7bfa      	ldrb	r2, [r7, #15]
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	4413      	add	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	333c      	adds	r3, #60	; 0x3c
 80011c2:	7bfa      	ldrb	r2, [r7, #15]
 80011c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011c6:	7bfa      	ldrb	r2, [r7, #15]
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	b298      	uxth	r0, r3
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4413      	add	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	440b      	add	r3, r1
 80011d8:	3344      	adds	r3, #68	; 0x44
 80011da:	4602      	mov	r2, r0
 80011dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	3340      	adds	r3, #64	; 0x40
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011f2:	7bfa      	ldrb	r2, [r7, #15]
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	4413      	add	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	3348      	adds	r3, #72	; 0x48
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	4413      	add	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	440b      	add	r3, r1
 8001214:	334c      	adds	r3, #76	; 0x4c
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800121a:	7bfa      	ldrb	r2, [r7, #15]
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4413      	add	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	440b      	add	r3, r1
 8001228:	3354      	adds	r3, #84	; 0x54
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	3301      	adds	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	7bfa      	ldrb	r2, [r7, #15]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	429a      	cmp	r2, r3
 800123c:	d3af      	bcc.n	800119e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]
 8001242:	e044      	b.n	80012ce <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	4413      	add	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	440b      	add	r3, r1
 8001268:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	4413      	add	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	4413      	add	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	440b      	add	r3, r1
 8001294:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012b2:	7bfa      	ldrb	r2, [r7, #15]
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4413      	add	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	440b      	add	r3, r1
 80012c0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	3301      	adds	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d3b5      	bcc.n	8001244 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	687e      	ldr	r6, [r7, #4]
 80012e0:	466d      	mov	r5, sp
 80012e2:	f106 0410 	add.w	r4, r6, #16
 80012e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80012f6:	1d33      	adds	r3, r6, #4
 80012f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012fa:	6838      	ldr	r0, [r7, #0]
 80012fc:	f002 f95a 	bl	80035b4 <USB_DevInit>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d005      	beq.n	8001312 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2202      	movs	r2, #2
 800130a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00d      	b.n	800132e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f003 faa9 	bl	800487e <USB_DevDisconnect>

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001336 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800134a:	2b01      	cmp	r3, #1
 800134c:	d101      	bne.n	8001352 <HAL_PCD_Start+0x1c>
 800134e:	2302      	movs	r3, #2
 8001350:	e020      	b.n	8001394 <HAL_PCD_Start+0x5e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135e:	2b01      	cmp	r3, #1
 8001360:	d109      	bne.n	8001376 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001366:	2b01      	cmp	r3, #1
 8001368:	d005      	beq.n	8001376 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f002 f8ac 	bl	80034d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f003 fa59 	bl	800483c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b08d      	sub	sp, #52	; 0x34
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fb17 	bl	80049e6 <USB_GetMode>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f040 848a 	bne.w	8001cd4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f003 fa7b 	bl	80048c0 <USB_ReadInterrupts>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 8480 	beq.w	8001cd2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	0a1b      	lsrs	r3, r3, #8
 80013dc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 fa68 	bl	80048c0 <USB_ReadInterrupts>
 80013f0:	4603      	mov	r3, r0
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d107      	bne.n	800140a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	695a      	ldr	r2, [r3, #20]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f002 0202 	and.w	r2, r2, #2
 8001408:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f003 fa56 	bl	80048c0 <USB_ReadInterrupts>
 8001414:	4603      	mov	r3, r0
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	2b10      	cmp	r3, #16
 800141c:	d161      	bne.n	80014e2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	699a      	ldr	r2, [r3, #24]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0210 	bic.w	r2, r2, #16
 800142c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	f003 020f 	and.w	r2, r3, #15
 800143a:	4613      	mov	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	3304      	adds	r3, #4
 800144c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	0c5b      	lsrs	r3, r3, #17
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	2b02      	cmp	r3, #2
 8001458:	d124      	bne.n	80014a4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d035      	beq.n	80014d2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001470:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001474:	b29b      	uxth	r3, r3
 8001476:	461a      	mov	r2, r3
 8001478:	6a38      	ldr	r0, [r7, #32]
 800147a:	f003 f88d 	bl	8004598 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	091b      	lsrs	r3, r3, #4
 8001486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800148a:	441a      	add	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	6a1a      	ldr	r2, [r3, #32]
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	091b      	lsrs	r3, r3, #4
 8001498:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800149c:	441a      	add	r2, r3
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	621a      	str	r2, [r3, #32]
 80014a2:	e016      	b.n	80014d2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	0c5b      	lsrs	r3, r3, #17
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	2b06      	cmp	r3, #6
 80014ae:	d110      	bne.n	80014d2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014b6:	2208      	movs	r2, #8
 80014b8:	4619      	mov	r1, r3
 80014ba:	6a38      	ldr	r0, [r7, #32]
 80014bc:	f003 f86c 	bl	8004598 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	6a1a      	ldr	r2, [r3, #32]
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014cc:	441a      	add	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	699a      	ldr	r2, [r3, #24]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f042 0210 	orr.w	r2, r2, #16
 80014e0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 f9ea 	bl	80048c0 <USB_ReadInterrupts>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014f6:	f040 80a7 	bne.w	8001648 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f003 f9ef 	bl	80048e6 <USB_ReadDevAllOutEpInterrupt>
 8001508:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800150a:	e099      	b.n	8001640 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800150c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 808e 	beq.w	8001634 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	4611      	mov	r1, r2
 8001522:	4618      	mov	r0, r3
 8001524:	f003 fa13 	bl	800494e <USB_ReadDevOutEPInterrupt>
 8001528:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00c      	beq.n	800154e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	015a      	lsls	r2, r3, #5
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	4413      	add	r3, r2
 800153c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001540:	461a      	mov	r2, r3
 8001542:	2301      	movs	r3, #1
 8001544:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fec3 	bl	80022d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00c      	beq.n	8001572 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	015a      	lsls	r2, r3, #5
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	4413      	add	r3, r2
 8001560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001564:	461a      	mov	r2, r3
 8001566:	2308      	movs	r3, #8
 8001568:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800156a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 ff99 	bl	80024a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	f003 0310 	and.w	r3, r3, #16
 8001578:	2b00      	cmp	r3, #0
 800157a:	d008      	beq.n	800158e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	015a      	lsls	r2, r3, #5
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	4413      	add	r3, r2
 8001584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001588:	461a      	mov	r2, r3
 800158a:	2310      	movs	r3, #16
 800158c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d030      	beq.n	80015fa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a0:	2b80      	cmp	r3, #128	; 0x80
 80015a2:	d109      	bne.n	80015b8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80015b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ba:	4613      	mov	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4413      	add	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	3304      	adds	r3, #4
 80015cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	78db      	ldrb	r3, [r3, #3]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d108      	bne.n	80015e8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	2200      	movs	r2, #0
 80015da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	4619      	mov	r1, r3
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f005 fdb0 	bl	8007148 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	015a      	lsls	r2, r3, #5
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	4413      	add	r3, r2
 80015f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015f4:	461a      	mov	r2, r3
 80015f6:	2302      	movs	r3, #2
 80015f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	f003 0320 	and.w	r3, r3, #32
 8001600:	2b00      	cmp	r3, #0
 8001602:	d008      	beq.n	8001616 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	015a      	lsls	r2, r3, #5
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	4413      	add	r3, r2
 800160c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001610:	461a      	mov	r2, r3
 8001612:	2320      	movs	r3, #32
 8001614:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d009      	beq.n	8001634 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	015a      	lsls	r2, r3, #5
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	4413      	add	r3, r2
 8001628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800162c:	461a      	mov	r2, r3
 800162e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001632:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	3301      	adds	r3, #1
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163c:	085b      	lsrs	r3, r3, #1
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001642:	2b00      	cmp	r3, #0
 8001644:	f47f af62 	bne.w	800150c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f003 f937 	bl	80048c0 <USB_ReadInterrupts>
 8001652:	4603      	mov	r3, r0
 8001654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001658:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800165c:	f040 80db 	bne.w	8001816 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f003 f958 	bl	800491a <USB_ReadDevAllInEpInterrupt>
 800166a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001670:	e0cd      	b.n	800180e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80c2 	beq.w	8001802 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f003 f97e 	bl	800498a <USB_ReadDevInEPInterrupt>
 800168e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d057      	beq.n	800174a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	2201      	movs	r2, #1
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69f9      	ldr	r1, [r7, #28]
 80016b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80016ba:	4013      	ands	r3, r2
 80016bc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	015a      	lsls	r2, r3, #5
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	4413      	add	r3, r2
 80016c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ca:	461a      	mov	r2, r3
 80016cc:	2301      	movs	r3, #1
 80016ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d132      	bne.n	800173e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016dc:	4613      	mov	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4413      	add	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	334c      	adds	r3, #76	; 0x4c
 80016e8:	6819      	ldr	r1, [r3, #0]
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ee:	4613      	mov	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4403      	add	r3, r0
 80016f8:	3348      	adds	r3, #72	; 0x48
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4419      	add	r1, r3
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001702:	4613      	mov	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4403      	add	r3, r0
 800170c:	334c      	adds	r3, #76	; 0x4c
 800170e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	2b00      	cmp	r3, #0
 8001714:	d113      	bne.n	800173e <HAL_PCD_IRQHandler+0x3a2>
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171a:	4613      	mov	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4413      	add	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	3354      	adds	r3, #84	; 0x54
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d108      	bne.n	800173e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6818      	ldr	r0, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001736:	461a      	mov	r2, r3
 8001738:	2101      	movs	r1, #1
 800173a:	f003 f985 	bl	8004a48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	b2db      	uxtb	r3, r3
 8001742:	4619      	mov	r1, r3
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f005 fc7a 	bl	800703e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d008      	beq.n	8001766 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	015a      	lsls	r2, r3, #5
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	4413      	add	r3, r2
 800175c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001760:	461a      	mov	r2, r3
 8001762:	2308      	movs	r3, #8
 8001764:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	2b00      	cmp	r3, #0
 800176e:	d008      	beq.n	8001782 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	015a      	lsls	r2, r3, #5
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	4413      	add	r3, r2
 8001778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800177c:	461a      	mov	r2, r3
 800177e:	2310      	movs	r3, #16
 8001780:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	015a      	lsls	r2, r3, #5
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	4413      	add	r3, r2
 8001794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001798:	461a      	mov	r2, r3
 800179a:	2340      	movs	r3, #64	; 0x40
 800179c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d023      	beq.n	80017f0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80017a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017aa:	6a38      	ldr	r0, [r7, #32]
 80017ac:	f002 f866 	bl	800387c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80017b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b2:	4613      	mov	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4413      	add	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	3338      	adds	r3, #56	; 0x38
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	4413      	add	r3, r2
 80017c0:	3304      	adds	r3, #4
 80017c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	78db      	ldrb	r3, [r3, #3]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d108      	bne.n	80017de <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2200      	movs	r2, #0
 80017d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	4619      	mov	r1, r3
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f005 fcc7 	bl	800716c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	015a      	lsls	r2, r3, #5
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	4413      	add	r3, r2
 80017e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ea:	461a      	mov	r2, r3
 80017ec:	2302      	movs	r3, #2
 80017ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fcdb 	bl	80021b8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	3301      	adds	r3, #1
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180a:	085b      	lsrs	r3, r3, #1
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800180e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001810:	2b00      	cmp	r3, #0
 8001812:	f47f af2e 	bne.w	8001672 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f003 f850 	bl	80048c0 <USB_ReadInterrupts>
 8001820:	4603      	mov	r3, r0
 8001822:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001826:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800182a:	d122      	bne.n	8001872 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800183a:	f023 0301 	bic.w	r3, r3, #1
 800183e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001846:	2b01      	cmp	r3, #1
 8001848:	d108      	bne.n	800185c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001852:	2100      	movs	r1, #0
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 fec3 	bl	80025e0 <HAL_PCDEx_LPM_Callback>
 800185a:	e002      	b.n	8001862 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f005 fc65 	bl	800712c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001870:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f003 f822 	bl	80048c0 <USB_ReadInterrupts>
 800187c:	4603      	mov	r3, r0
 800187e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001886:	d112      	bne.n	80018ae <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b01      	cmp	r3, #1
 8001896:	d102      	bne.n	800189e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f005 fc21 	bl	80070e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	695a      	ldr	r2, [r3, #20]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80018ac:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f003 f804 	bl	80048c0 <USB_ReadInterrupts>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018c2:	f040 80b7 	bne.w	8001a34 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2110      	movs	r1, #16
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 ffcb 	bl	800387c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ea:	e046      	b.n	800197a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ee:	015a      	lsls	r2, r3, #5
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	4413      	add	r3, r2
 80018f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018f8:	461a      	mov	r2, r3
 80018fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001902:	015a      	lsls	r2, r3, #5
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	4413      	add	r3, r2
 8001908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001910:	0151      	lsls	r1, r2, #5
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	440a      	add	r2, r1
 8001916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800191a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800191e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001922:	015a      	lsls	r2, r3, #5
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	4413      	add	r3, r2
 8001928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800192c:	461a      	mov	r2, r3
 800192e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001932:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	4413      	add	r3, r2
 800193c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001944:	0151      	lsls	r1, r2, #5
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	440a      	add	r2, r1
 800194a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800194e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001952:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001956:	015a      	lsls	r2, r3, #5
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	4413      	add	r3, r2
 800195c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001964:	0151      	lsls	r1, r2, #5
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	440a      	add	r2, r1
 800196a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800196e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001972:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001976:	3301      	adds	r3, #1
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001980:	429a      	cmp	r2, r3
 8001982:	d3b3      	bcc.n	80018ec <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001992:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001996:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	2b00      	cmp	r3, #0
 800199e:	d016      	beq.n	80019ce <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b0:	f043 030b 	orr.w	r3, r3, #11
 80019b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019c6:	f043 030b 	orr.w	r3, r3, #11
 80019ca:	6453      	str	r3, [r2, #68]	; 0x44
 80019cc:	e015      	b.n	80019fa <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019e0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019e4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019f4:	f043 030b 	orr.w	r3, r3, #11
 80019f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a08:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a0c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f003 f812 	bl	8004a48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f002 ff41 	bl	80048c0 <USB_ReadInterrupts>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a48:	d124      	bne.n	8001a94 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f002 ffd7 	bl	8004a02 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f001 ff8c 	bl	8003976 <USB_GetDevSpeed>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681c      	ldr	r4, [r3, #0]
 8001a6a:	f001 fa29 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8001a6e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f001 fc8b 	bl	8003394 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f005 fb05 	bl	800708e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a92:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f002 ff11 	bl	80048c0 <USB_ReadInterrupts>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d10a      	bne.n	8001abe <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f005 fae2 	bl	8007072 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f002 0208 	and.w	r2, r2, #8
 8001abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 fefc 	bl	80048c0 <USB_ReadInterrupts>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ace:	2b80      	cmp	r3, #128	; 0x80
 8001ad0:	d122      	bne.n	8001b18 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ade:	2301      	movs	r3, #1
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae2:	e014      	b.n	8001b0e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d105      	bne.n	8001b08 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	4619      	mov	r1, r3
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 fb27 	bl	8002156 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d3e5      	bcc.n	8001ae4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f002 fecf 	bl	80048c0 <USB_ReadInterrupts>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b2c:	d13b      	bne.n	8001ba6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b2e:	2301      	movs	r3, #1
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
 8001b32:	e02b      	b.n	8001b8c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	015a      	lsls	r2, r3, #5
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b48:	4613      	mov	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	3340      	adds	r3, #64	; 0x40
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d115      	bne.n	8001b86 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b5a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	da12      	bge.n	8001b86 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b64:	4613      	mov	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	333f      	adds	r3, #63	; 0x3f
 8001b70:	2201      	movs	r2, #1
 8001b72:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	4619      	mov	r1, r3
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 fae8 	bl	8002156 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	3301      	adds	r3, #1
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d3ce      	bcc.n	8001b34 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	695a      	ldr	r2, [r3, #20]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f002 fe88 	bl	80048c0 <USB_ReadInterrupts>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bba:	d155      	bne.n	8001c68 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc0:	e045      	b.n	8001c4e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	015a      	lsls	r2, r3, #5
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	4413      	add	r3, r2
 8001bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d12e      	bne.n	8001c48 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	da2b      	bge.n	8001c48 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001bfc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d121      	bne.n	8001c48 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10a      	bne.n	8001c48 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c44:	6053      	str	r3, [r2, #4]
            break;
 8001c46:	e007      	b.n	8001c58 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d3b4      	bcc.n	8001bc2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f002 fe27 	bl	80048c0 <USB_ReadInterrupts>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7c:	d10a      	bne.n	8001c94 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f005 fa86 	bl	8007190 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695a      	ldr	r2, [r3, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f002 fe11 	bl	80048c0 <USB_ReadInterrupts>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d115      	bne.n	8001cd4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f005 fa76 	bl	80071ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6859      	ldr	r1, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	e000      	b.n	8001cd4 <HAL_PCD_IRQHandler+0x938>
      return;
 8001cd2:	bf00      	nop
    }
  }
}
 8001cd4:	3734      	adds	r7, #52	; 0x34
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd90      	pop	{r4, r7, pc}

08001cda <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_PCD_SetAddress+0x1a>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e013      	b.n	8001d1c <HAL_PCD_SetAddress+0x42>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	78fa      	ldrb	r2, [r7, #3]
 8001d00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	78fa      	ldrb	r2, [r7, #3]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f002 fd6f 	bl	80047f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	4608      	mov	r0, r1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	4603      	mov	r3, r0
 8001d34:	70fb      	strb	r3, [r7, #3]
 8001d36:	460b      	mov	r3, r1
 8001d38:	803b      	strh	r3, [r7, #0]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	da0f      	bge.n	8001d6a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	f003 020f 	and.w	r2, r3, #15
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	3338      	adds	r3, #56	; 0x38
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3304      	adds	r3, #4
 8001d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	705a      	strb	r2, [r3, #1]
 8001d68:	e00f      	b.n	8001d8a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	f003 020f 	and.w	r2, r3, #15
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	4413      	add	r3, r2
 8001d80:	3304      	adds	r3, #4
 8001d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d96:	883a      	ldrh	r2, [r7, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	78ba      	ldrb	r2, [r7, #2]
 8001da0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	785b      	ldrb	r3, [r3, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d004      	beq.n	8001db4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001db4:	78bb      	ldrb	r3, [r7, #2]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d102      	bne.n	8001dc0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_PCD_EP_Open+0xaa>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e00e      	b.n	8001dec <HAL_PCD_EP_Open+0xc8>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68f9      	ldr	r1, [r7, #12]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f001 fdef 	bl	80039c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001dea:	7afb      	ldrb	r3, [r7, #11]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	da0f      	bge.n	8001e28 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	f003 020f 	and.w	r2, r3, #15
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4413      	add	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	3338      	adds	r3, #56	; 0x38
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2201      	movs	r2, #1
 8001e24:	705a      	strb	r2, [r3, #1]
 8001e26:	e00f      	b.n	8001e48 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f003 020f 	and.w	r2, r3, #15
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3304      	adds	r3, #4
 8001e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_PCD_EP_Close+0x6e>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e00e      	b.n	8001e80 <HAL_PCD_EP_Close+0x8c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68f9      	ldr	r1, [r7, #12]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f001 fe2d 	bl	8003ad0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	460b      	mov	r3, r1
 8001e96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e98:	7afb      	ldrb	r3, [r7, #11]
 8001e9a:	f003 020f 	and.w	r2, r3, #15
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4413      	add	r3, r2
 8001eae:	3304      	adds	r3, #4
 8001eb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eca:	7afb      	ldrb	r3, [r7, #11]
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d102      	bne.n	8001ee4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ee4:	7afb      	ldrb	r3, [r7, #11]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d109      	bne.n	8001f02 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	6979      	ldr	r1, [r7, #20]
 8001efc:	f002 f90c 	bl	8004118 <USB_EP0StartXfer>
 8001f00:	e008      	b.n	8001f14 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	6979      	ldr	r1, [r7, #20]
 8001f10:	f001 feba 	bl	8003c88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	f003 020f 	and.w	r2, r3, #15
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001f40:	681b      	ldr	r3, [r3, #0]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f5e:	7afb      	ldrb	r3, [r7, #11]
 8001f60:	f003 020f 	and.w	r2, r3, #15
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	3338      	adds	r3, #56	; 0x38
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4413      	add	r3, r2
 8001f72:	3304      	adds	r3, #4
 8001f74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2200      	movs	r2, #0
 8001f86:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d102      	bne.n	8001fa8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fa8:	7afb      	ldrb	r3, [r7, #11]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	6979      	ldr	r1, [r7, #20]
 8001fc0:	f002 f8aa 	bl	8004118 <USB_EP0StartXfer>
 8001fc4:	e008      	b.n	8001fd8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	6979      	ldr	r1, [r7, #20]
 8001fd4:	f001 fe58 	bl	8003c88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	460b      	mov	r3, r1
 8001fec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	f003 020f 	and.w	r2, r3, #15
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d901      	bls.n	8002000 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e050      	b.n	80020a2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002000:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002004:	2b00      	cmp	r3, #0
 8002006:	da0f      	bge.n	8002028 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	f003 020f 	and.w	r2, r3, #15
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	3338      	adds	r3, #56	; 0x38
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	4413      	add	r3, r2
 800201c:	3304      	adds	r3, #4
 800201e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	705a      	strb	r2, [r3, #1]
 8002026:	e00d      	b.n	8002044 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002028:	78fa      	ldrb	r2, [r7, #3]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2201      	movs	r2, #1
 8002048:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	b2da      	uxtb	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_PCD_EP_SetStall+0x82>
 8002060:	2302      	movs	r3, #2
 8002062:	e01e      	b.n	80020a2 <HAL_PCD_EP_SetStall+0xc0>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68f9      	ldr	r1, [r7, #12]
 8002072:	4618      	mov	r0, r3
 8002074:	f002 fae8 	bl	8004648 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10a      	bne.n	8002098 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	b2d9      	uxtb	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002092:	461a      	mov	r2, r3
 8002094:	f002 fcd8 	bl	8004a48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	f003 020f 	and.w	r2, r3, #15
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d901      	bls.n	80020c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e042      	b.n	800214e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	da0f      	bge.n	80020f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	f003 020f 	and.w	r2, r3, #15
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	3338      	adds	r3, #56	; 0x38
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	4413      	add	r3, r2
 80020e4:	3304      	adds	r3, #4
 80020e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2201      	movs	r2, #1
 80020ec:	705a      	strb	r2, [r3, #1]
 80020ee:	e00f      	b.n	8002110 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	f003 020f 	and.w	r2, r3, #15
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	3304      	adds	r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	b2da      	uxtb	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_PCD_EP_ClrStall+0x86>
 800212c:	2302      	movs	r3, #2
 800212e:	e00e      	b.n	800214e <HAL_PCD_EP_ClrStall+0xa4>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68f9      	ldr	r1, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f002 faf0 	bl	8004724 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	460b      	mov	r3, r1
 8002160:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002162:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002166:	2b00      	cmp	r3, #0
 8002168:	da0c      	bge.n	8002184 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	f003 020f 	and.w	r2, r3, #15
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	3338      	adds	r3, #56	; 0x38
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	3304      	adds	r3, #4
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e00c      	b.n	800219e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	f003 020f 	and.w	r2, r3, #15
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	3304      	adds	r3, #4
 800219c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68f9      	ldr	r1, [r7, #12]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f002 f90f 	bl	80043c8 <USB_EPStopXfer>
 80021aa:	4603      	mov	r3, r0
 80021ac:	72fb      	strb	r3, [r7, #11]

  return ret;
 80021ae:	7afb      	ldrb	r3, [r7, #11]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af02      	add	r7, sp, #8
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	3338      	adds	r3, #56	; 0x38
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	3304      	adds	r3, #4
 80021de:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a1a      	ldr	r2, [r3, #32]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d901      	bls.n	80021f0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e06c      	b.n	80022ca <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	699a      	ldr	r2, [r3, #24]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	429a      	cmp	r2, r3
 8002204:	d902      	bls.n	800220c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	3303      	adds	r3, #3
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002214:	e02b      	b.n	800226e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	429a      	cmp	r2, r3
 800222a:	d902      	bls.n	8002232 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3303      	adds	r3, #3
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6919      	ldr	r1, [r3, #16]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	b2da      	uxtb	r2, r3
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800224a:	b2db      	uxtb	r3, r3
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	4603      	mov	r3, r0
 8002250:	6978      	ldr	r0, [r7, #20]
 8002252:	f002 f963 	bl	800451c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	441a      	add	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a1a      	ldr	r2, [r3, #32]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	441a      	add	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	b29b      	uxth	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	429a      	cmp	r2, r3
 8002282:	d809      	bhi.n	8002298 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a1a      	ldr	r2, [r3, #32]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800228c:	429a      	cmp	r2, r3
 800228e:	d203      	bcs.n	8002298 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1be      	bne.n	8002216 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	699a      	ldr	r2, [r3, #24]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d811      	bhi.n	80022c8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	2201      	movs	r2, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	43db      	mvns	r3, r3
 80022be:	6939      	ldr	r1, [r7, #16]
 80022c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022c4:	4013      	ands	r3, r2
 80022c6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	333c      	adds	r3, #60	; 0x3c
 80022ec:	3304      	adds	r3, #4
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d17b      	bne.n	8002402 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d015      	beq.n	8002340 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	4a61      	ldr	r2, [pc, #388]	; (800249c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	f240 80b9 	bls.w	8002490 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80b3 	beq.w	8002490 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	4413      	add	r3, r2
 8002332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002336:	461a      	mov	r2, r3
 8002338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800233c:	6093      	str	r3, [r2, #8]
 800233e:	e0a7      	b.n	8002490 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b00      	cmp	r3, #0
 8002348:	d009      	beq.n	800235e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002356:	461a      	mov	r2, r3
 8002358:	2320      	movs	r3, #32
 800235a:	6093      	str	r3, [r2, #8]
 800235c:	e098      	b.n	8002490 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002364:	2b00      	cmp	r3, #0
 8002366:	f040 8093 	bne.w	8002490 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	4a4b      	ldr	r2, [pc, #300]	; (800249c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d90f      	bls.n	8002392 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	4413      	add	r3, r2
 8002384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002388:	461a      	mov	r2, r3
 800238a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800238e:	6093      	str	r3, [r2, #8]
 8002390:	e07e      	b.n	8002490 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	3304      	adds	r3, #4
 80023a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	69da      	ldr	r2, [r3, #28]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	0159      	lsls	r1, r3, #5
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	440b      	add	r3, r1
 80023b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023be:	1ad2      	subs	r2, r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d114      	bne.n	80023f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023dc:	461a      	mov	r2, r3
 80023de:	2101      	movs	r1, #1
 80023e0:	f002 fb32 	bl	8004a48 <USB_EP0_OutStart>
 80023e4:	e006      	b.n	80023f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	441a      	add	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	4619      	mov	r1, r3
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f004 fe04 	bl	8007008 <HAL_PCD_DataOutStageCallback>
 8002400:	e046      	b.n	8002490 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	4a26      	ldr	r2, [pc, #152]	; (80024a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d124      	bne.n	8002454 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	4413      	add	r3, r2
 800241c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002420:	461a      	mov	r2, r3
 8002422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002426:	6093      	str	r3, [r2, #8]
 8002428:	e032      	b.n	8002490 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	4413      	add	r3, r2
 800243c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002440:	461a      	mov	r2, r3
 8002442:	2320      	movs	r3, #32
 8002444:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	4619      	mov	r1, r3
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f004 fddb 	bl	8007008 <HAL_PCD_DataOutStageCallback>
 8002452:	e01d      	b.n	8002490 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d114      	bne.n	8002484 <PCD_EP_OutXfrComplete_int+0x1b0>
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d108      	bne.n	8002484 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800247c:	461a      	mov	r2, r3
 800247e:	2100      	movs	r1, #0
 8002480:	f002 fae2 	bl	8004a48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f004 fdbc 	bl	8007008 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3720      	adds	r7, #32
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	4f54300a 	.word	0x4f54300a
 80024a0:	4f54310a 	.word	0x4f54310a

080024a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	333c      	adds	r3, #60	; 0x3c
 80024bc:	3304      	adds	r3, #4
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4a15      	ldr	r2, [pc, #84]	; (800252c <PCD_EP_OutSetupPacket_int+0x88>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d90e      	bls.n	80024f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d009      	beq.n	80024f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f0:	461a      	mov	r2, r3
 80024f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f004 fd73 	bl	8006fe4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4a0a      	ldr	r2, [pc, #40]	; (800252c <PCD_EP_OutSetupPacket_int+0x88>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d90c      	bls.n	8002520 <PCD_EP_OutSetupPacket_int+0x7c>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d108      	bne.n	8002520 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002518:	461a      	mov	r2, r3
 800251a:	2101      	movs	r1, #1
 800251c:	f002 fa94 	bl	8004a48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	4f54300a 	.word	0x4f54300a

08002530 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
 800253c:	4613      	mov	r3, r2
 800253e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d107      	bne.n	800255e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800254e:	883b      	ldrh	r3, [r7, #0]
 8002550:	0419      	lsls	r1, r3, #16
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	430a      	orrs	r2, r1
 800255a:	629a      	str	r2, [r3, #40]	; 0x28
 800255c:	e028      	b.n	80025b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	4413      	add	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e00d      	b.n	800258e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	3340      	adds	r3, #64	; 0x40
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	0c1b      	lsrs	r3, r3, #16
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	4413      	add	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	3301      	adds	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	3b01      	subs	r3, #1
 8002594:	429a      	cmp	r2, r3
 8002596:	d3ec      	bcc.n	8002572 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002598:	883b      	ldrh	r3, [r7, #0]
 800259a:	0418      	lsls	r0, r3, #16
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6819      	ldr	r1, [r3, #0]
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	4302      	orrs	r2, r0
 80025a8:	3340      	adds	r3, #64	; 0x40
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	460b      	mov	r3, r1
 80025c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e267      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d075      	beq.n	8002702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002616:	4b88      	ldr	r3, [pc, #544]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b04      	cmp	r3, #4
 8002620:	d00c      	beq.n	800263c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002622:	4b85      	ldr	r3, [pc, #532]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262a:	2b08      	cmp	r3, #8
 800262c:	d112      	bne.n	8002654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262e:	4b82      	ldr	r3, [pc, #520]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800263a:	d10b      	bne.n	8002654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	4b7e      	ldr	r3, [pc, #504]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d05b      	beq.n	8002700 <HAL_RCC_OscConfig+0x108>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d157      	bne.n	8002700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e242      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265c:	d106      	bne.n	800266c <HAL_RCC_OscConfig+0x74>
 800265e:	4b76      	ldr	r3, [pc, #472]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a75      	ldr	r2, [pc, #468]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e01d      	b.n	80026a8 <HAL_RCC_OscConfig+0xb0>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0x98>
 8002676:	4b70      	ldr	r3, [pc, #448]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6f      	ldr	r2, [pc, #444]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800267c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b6d      	ldr	r3, [pc, #436]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a6c      	ldr	r2, [pc, #432]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_OscConfig+0xb0>
 8002690:	4b69      	ldr	r3, [pc, #420]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a68      	ldr	r2, [pc, #416]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b66      	ldr	r3, [pc, #408]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a65      	ldr	r2, [pc, #404]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80026a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7fe f9fc 	bl	8000aac <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b8:	f7fe f9f8 	bl	8000aac <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e207      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b5b      	ldr	r3, [pc, #364]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0xc0>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7fe f9e8 	bl	8000aac <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e0:	f7fe f9e4 	bl	8000aac <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	; 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e1f3      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	4b51      	ldr	r3, [pc, #324]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0xe8>
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d063      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800270e:	4b4a      	ldr	r3, [pc, #296]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271a:	4b47      	ldr	r3, [pc, #284]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002722:	2b08      	cmp	r3, #8
 8002724:	d11c      	bne.n	8002760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002726:	4b44      	ldr	r3, [pc, #272]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d116      	bne.n	8002760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	4b41      	ldr	r3, [pc, #260]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <HAL_RCC_OscConfig+0x152>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d001      	beq.n	800274a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e1c7      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274a:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4937      	ldr	r1, [pc, #220]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275e:	e03a      	b.n	80027d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002768:	4b34      	ldr	r3, [pc, #208]	; (800283c <HAL_RCC_OscConfig+0x244>)
 800276a:	2201      	movs	r2, #1
 800276c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7fe f99d 	bl	8000aac <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002776:	f7fe f999 	bl	8000aac <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e1a8      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	4b28      	ldr	r3, [pc, #160]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4925      	ldr	r1, [pc, #148]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
 80027a8:	e015      	b.n	80027d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_RCC_OscConfig+0x244>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fe f97c 	bl	8000aac <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b8:	f7fe f978 	bl	8000aac <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e187      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d036      	beq.n	8002850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <HAL_RCC_OscConfig+0x248>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7fe f95c 	bl	8000aac <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f8:	f7fe f958 	bl	8000aac <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e167      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800280c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x200>
 8002816:	e01b      	b.n	8002850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_RCC_OscConfig+0x248>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7fe f945 	bl	8000aac <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	e00e      	b.n	8002844 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002826:	f7fe f941 	bl	8000aac <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d907      	bls.n	8002844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e150      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
 8002838:	40023800 	.word	0x40023800
 800283c:	42470000 	.word	0x42470000
 8002840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	4b88      	ldr	r3, [pc, #544]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ea      	bne.n	8002826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8097 	beq.w	800298c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002862:	4b81      	ldr	r3, [pc, #516]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10f      	bne.n	800288e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	4b7d      	ldr	r3, [pc, #500]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a7c      	ldr	r2, [pc, #496]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b7a      	ldr	r3, [pc, #488]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288a:	2301      	movs	r3, #1
 800288c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	4b77      	ldr	r3, [pc, #476]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d118      	bne.n	80028cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800289a:	4b74      	ldr	r3, [pc, #464]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a73      	ldr	r2, [pc, #460]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a6:	f7fe f901 	bl	8000aac <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ae:	f7fe f8fd 	bl	8000aac <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e10c      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x2ea>
 80028d4:	4b64      	ldr	r3, [pc, #400]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	4a63      	ldr	r2, [pc, #396]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6713      	str	r3, [r2, #112]	; 0x70
 80028e0:	e01c      	b.n	800291c <HAL_RCC_OscConfig+0x324>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x30c>
 80028ea:	4b5f      	ldr	r3, [pc, #380]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	4a5e      	ldr	r2, [pc, #376]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	6713      	str	r3, [r2, #112]	; 0x70
 80028f6:	4b5c      	ldr	r3, [pc, #368]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	4a5b      	ldr	r2, [pc, #364]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6713      	str	r3, [r2, #112]	; 0x70
 8002902:	e00b      	b.n	800291c <HAL_RCC_OscConfig+0x324>
 8002904:	4b58      	ldr	r3, [pc, #352]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002908:	4a57      	ldr	r2, [pc, #348]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	6713      	str	r3, [r2, #112]	; 0x70
 8002910:	4b55      	ldr	r3, [pc, #340]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002914:	4a54      	ldr	r2, [pc, #336]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002916:	f023 0304 	bic.w	r3, r3, #4
 800291a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d015      	beq.n	8002950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7fe f8c2 	bl	8000aac <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292c:	f7fe f8be 	bl	8000aac <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	; 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e0cb      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002942:	4b49      	ldr	r3, [pc, #292]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0ee      	beq.n	800292c <HAL_RCC_OscConfig+0x334>
 800294e:	e014      	b.n	800297a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002950:	f7fe f8ac 	bl	8000aac <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002956:	e00a      	b.n	800296e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7fe f8a8 	bl	8000aac <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	; 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e0b5      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296e:	4b3e      	ldr	r3, [pc, #248]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1ee      	bne.n	8002958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800297a:	7dfb      	ldrb	r3, [r7, #23]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002980:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	4a38      	ldr	r2, [pc, #224]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800298a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a1 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002996:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d05c      	beq.n	8002a5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d141      	bne.n	8002a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	4b31      	ldr	r3, [pc, #196]	; (8002a70 <HAL_RCC_OscConfig+0x478>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7fe f87c 	bl	8000aac <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b8:	f7fe f878 	bl	8000aac <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e087      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	019b      	lsls	r3, r3, #6
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	085b      	lsrs	r3, r3, #1
 80029ee:	3b01      	subs	r3, #1
 80029f0:	041b      	lsls	r3, r3, #16
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	061b      	lsls	r3, r3, #24
 80029fa:	491b      	ldr	r1, [pc, #108]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <HAL_RCC_OscConfig+0x478>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7fe f851 	bl	8000aac <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7fe f84d 	bl	8000aac <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e05c      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x416>
 8002a2c:	e054      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <HAL_RCC_OscConfig+0x478>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7fe f83a 	bl	8000aac <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe f836 	bl	8000aac <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e045      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x444>
 8002a5a:	e03d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e038      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40007000 	.word	0x40007000
 8002a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_RCC_OscConfig+0x4ec>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d028      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d121      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d11a      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d111      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	3b01      	subs	r3, #1
 8002abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800

08002ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0cc      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002afc:	4b68      	ldr	r3, [pc, #416]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d90c      	bls.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b65      	ldr	r3, [pc, #404]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0b8      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b3c:	4b59      	ldr	r3, [pc, #356]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b54:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a52      	ldr	r2, [pc, #328]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b50      	ldr	r3, [pc, #320]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	494d      	ldr	r1, [pc, #308]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d044      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d119      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e07f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	4b3f      	ldr	r3, [pc, #252]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e067      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc6:	4b37      	ldr	r3, [pc, #220]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f023 0203 	bic.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4934      	ldr	r1, [pc, #208]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd8:	f7fd ff68 	bl	8000aac <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be0:	f7fd ff64 	bl	8000aac <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e04f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 020c 	and.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d1eb      	bne.n	8002be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d20c      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e032      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4916      	ldr	r1, [pc, #88]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c6e:	f000 f821 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	490a      	ldr	r1, [pc, #40]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	4a09      	ldr	r2, [pc, #36]	; (8002cac <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fd fec8 	bl	8000a24 <HAL_InitTick>

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023c00 	.word	0x40023c00
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	08007668 	.word	0x08007668
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000004 	.word	0x20000004

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb8:	b094      	sub	sp, #80	; 0x50
 8002cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ccc:	4b79      	ldr	r3, [pc, #484]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	f200 80e1 	bhi.w	8002ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ce6:	e0db      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b73      	ldr	r3, [pc, #460]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002cec:	e0db      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cee:	4b73      	ldr	r3, [pc, #460]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x208>)
 8002cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cf2:	e0d8      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf4:	4b6f      	ldr	r3, [pc, #444]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cfe:	4b6d      	ldr	r3, [pc, #436]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d063      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0a:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	099b      	lsrs	r3, r3, #6
 8002d10:	2200      	movs	r2, #0
 8002d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d1e:	2300      	movs	r3, #0
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
 8002d22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d26:	4622      	mov	r2, r4
 8002d28:	462b      	mov	r3, r5
 8002d2a:	f04f 0000 	mov.w	r0, #0
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	0159      	lsls	r1, r3, #5
 8002d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d38:	0150      	lsls	r0, r2, #5
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4621      	mov	r1, r4
 8002d40:	1a51      	subs	r1, r2, r1
 8002d42:	6139      	str	r1, [r7, #16]
 8002d44:	4629      	mov	r1, r5
 8002d46:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d58:	4659      	mov	r1, fp
 8002d5a:	018b      	lsls	r3, r1, #6
 8002d5c:	4651      	mov	r1, sl
 8002d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d62:	4651      	mov	r1, sl
 8002d64:	018a      	lsls	r2, r1, #6
 8002d66:	4651      	mov	r1, sl
 8002d68:	ebb2 0801 	subs.w	r8, r2, r1
 8002d6c:	4659      	mov	r1, fp
 8002d6e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d86:	4690      	mov	r8, r2
 8002d88:	4699      	mov	r9, r3
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	eb18 0303 	adds.w	r3, r8, r3
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	462b      	mov	r3, r5
 8002d94:	eb49 0303 	adc.w	r3, r9, r3
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002da6:	4629      	mov	r1, r5
 8002da8:	024b      	lsls	r3, r1, #9
 8002daa:	4621      	mov	r1, r4
 8002dac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002db0:	4621      	mov	r1, r4
 8002db2:	024a      	lsls	r2, r1, #9
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dba:	2200      	movs	r2, #0
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dc4:	f7fd fa12 	bl	80001ec <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dd0:	e058      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd2:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	099b      	lsrs	r3, r3, #6
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	4611      	mov	r1, r2
 8002dde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002de2:	623b      	str	r3, [r7, #32]
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
 8002de8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dec:	4642      	mov	r2, r8
 8002dee:	464b      	mov	r3, r9
 8002df0:	f04f 0000 	mov.w	r0, #0
 8002df4:	f04f 0100 	mov.w	r1, #0
 8002df8:	0159      	lsls	r1, r3, #5
 8002dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfe:	0150      	lsls	r0, r2, #5
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4641      	mov	r1, r8
 8002e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e24:	ebb2 040a 	subs.w	r4, r2, sl
 8002e28:	eb63 050b 	sbc.w	r5, r3, fp
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	00eb      	lsls	r3, r5, #3
 8002e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e3a:	00e2      	lsls	r2, r4, #3
 8002e3c:	4614      	mov	r4, r2
 8002e3e:	461d      	mov	r5, r3
 8002e40:	4643      	mov	r3, r8
 8002e42:	18e3      	adds	r3, r4, r3
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	464b      	mov	r3, r9
 8002e48:	eb45 0303 	adc.w	r3, r5, r3
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	028b      	lsls	r3, r1, #10
 8002e5e:	4621      	mov	r1, r4
 8002e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e64:	4621      	mov	r1, r4
 8002e66:	028a      	lsls	r2, r1, #10
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	61fa      	str	r2, [r7, #28]
 8002e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e78:	f7fd f9b8 	bl	80001ec <__aeabi_uldivmod>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4613      	mov	r3, r2
 8002e82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e9e:	e002      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ea2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3750      	adds	r7, #80	; 0x50
 8002eac:	46bd      	mov	sp, r7
 8002eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	007a1200 	.word	0x007a1200

08002ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000000 	.word	0x20000000

08002ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e041      	b.n	8002f6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fd fcd4 	bl	80008ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3304      	adds	r3, #4
 8002f14:	4619      	mov	r1, r3
 8002f16:	4610      	mov	r0, r2
 8002f18:	f000 f8be 	bl	8003098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d001      	beq.n	8002f90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e046      	b.n	800301e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a23      	ldr	r2, [pc, #140]	; (800302c <HAL_TIM_Base_Start+0xb4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d022      	beq.n	8002fe8 <HAL_TIM_Base_Start+0x70>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002faa:	d01d      	beq.n	8002fe8 <HAL_TIM_Base_Start+0x70>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1f      	ldr	r2, [pc, #124]	; (8003030 <HAL_TIM_Base_Start+0xb8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d018      	beq.n	8002fe8 <HAL_TIM_Base_Start+0x70>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1e      	ldr	r2, [pc, #120]	; (8003034 <HAL_TIM_Base_Start+0xbc>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d013      	beq.n	8002fe8 <HAL_TIM_Base_Start+0x70>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <HAL_TIM_Base_Start+0xc0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00e      	beq.n	8002fe8 <HAL_TIM_Base_Start+0x70>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1b      	ldr	r2, [pc, #108]	; (800303c <HAL_TIM_Base_Start+0xc4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d009      	beq.n	8002fe8 <HAL_TIM_Base_Start+0x70>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a19      	ldr	r2, [pc, #100]	; (8003040 <HAL_TIM_Base_Start+0xc8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d004      	beq.n	8002fe8 <HAL_TIM_Base_Start+0x70>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a18      	ldr	r2, [pc, #96]	; (8003044 <HAL_TIM_Base_Start+0xcc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d111      	bne.n	800300c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b06      	cmp	r3, #6
 8002ff8:	d010      	beq.n	800301c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0201 	orr.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800300a:	e007      	b.n	800301c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40010000 	.word	0x40010000
 8003030:	40000400 	.word	0x40000400
 8003034:	40000800 	.word	0x40000800
 8003038:	40000c00 	.word	0x40000c00
 800303c:	40010400 	.word	0x40010400
 8003040:	40014000 	.word	0x40014000
 8003044:	40001800 	.word	0x40001800

08003048 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6a1a      	ldr	r2, [r3, #32]
 8003056:	f241 1311 	movw	r3, #4369	; 0x1111
 800305a:	4013      	ands	r3, r2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10f      	bne.n	8003080 <HAL_TIM_Base_Stop+0x38>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6a1a      	ldr	r2, [r3, #32]
 8003066:	f240 4344 	movw	r3, #1092	; 0x444
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d107      	bne.n	8003080 <HAL_TIM_Base_Stop+0x38>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a40      	ldr	r2, [pc, #256]	; (80031ac <TIM_Base_SetConfig+0x114>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d013      	beq.n	80030d8 <TIM_Base_SetConfig+0x40>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b6:	d00f      	beq.n	80030d8 <TIM_Base_SetConfig+0x40>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a3d      	ldr	r2, [pc, #244]	; (80031b0 <TIM_Base_SetConfig+0x118>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d00b      	beq.n	80030d8 <TIM_Base_SetConfig+0x40>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a3c      	ldr	r2, [pc, #240]	; (80031b4 <TIM_Base_SetConfig+0x11c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d007      	beq.n	80030d8 <TIM_Base_SetConfig+0x40>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a3b      	ldr	r2, [pc, #236]	; (80031b8 <TIM_Base_SetConfig+0x120>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d003      	beq.n	80030d8 <TIM_Base_SetConfig+0x40>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a3a      	ldr	r2, [pc, #232]	; (80031bc <TIM_Base_SetConfig+0x124>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d108      	bne.n	80030ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a2f      	ldr	r2, [pc, #188]	; (80031ac <TIM_Base_SetConfig+0x114>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d02b      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f8:	d027      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a2c      	ldr	r2, [pc, #176]	; (80031b0 <TIM_Base_SetConfig+0x118>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d023      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a2b      	ldr	r2, [pc, #172]	; (80031b4 <TIM_Base_SetConfig+0x11c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d01f      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a2a      	ldr	r2, [pc, #168]	; (80031b8 <TIM_Base_SetConfig+0x120>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01b      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a29      	ldr	r2, [pc, #164]	; (80031bc <TIM_Base_SetConfig+0x124>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d017      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a28      	ldr	r2, [pc, #160]	; (80031c0 <TIM_Base_SetConfig+0x128>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a27      	ldr	r2, [pc, #156]	; (80031c4 <TIM_Base_SetConfig+0x12c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00f      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a26      	ldr	r2, [pc, #152]	; (80031c8 <TIM_Base_SetConfig+0x130>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00b      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a25      	ldr	r2, [pc, #148]	; (80031cc <TIM_Base_SetConfig+0x134>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d007      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a24      	ldr	r2, [pc, #144]	; (80031d0 <TIM_Base_SetConfig+0x138>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d003      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a23      	ldr	r2, [pc, #140]	; (80031d4 <TIM_Base_SetConfig+0x13c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d108      	bne.n	800315c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <TIM_Base_SetConfig+0x114>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d003      	beq.n	8003190 <TIM_Base_SetConfig+0xf8>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a0c      	ldr	r2, [pc, #48]	; (80031bc <TIM_Base_SetConfig+0x124>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d103      	bne.n	8003198 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	615a      	str	r2, [r3, #20]
}
 800319e:	bf00      	nop
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40010000 	.word	0x40010000
 80031b0:	40000400 	.word	0x40000400
 80031b4:	40000800 	.word	0x40000800
 80031b8:	40000c00 	.word	0x40000c00
 80031bc:	40010400 	.word	0x40010400
 80031c0:	40014000 	.word	0x40014000
 80031c4:	40014400 	.word	0x40014400
 80031c8:	40014800 	.word	0x40014800
 80031cc:	40001800 	.word	0x40001800
 80031d0:	40001c00 	.word	0x40001c00
 80031d4:	40002000 	.word	0x40002000

080031d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e05a      	b.n	80032a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003216:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a21      	ldr	r2, [pc, #132]	; (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d022      	beq.n	800327a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323c:	d01d      	beq.n	800327a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1d      	ldr	r2, [pc, #116]	; (80032b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d018      	beq.n	800327a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1b      	ldr	r2, [pc, #108]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1a      	ldr	r2, [pc, #104]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00e      	beq.n	800327a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a18      	ldr	r2, [pc, #96]	; (80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a17      	ldr	r2, [pc, #92]	; (80032c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a15      	ldr	r2, [pc, #84]	; (80032cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d10c      	bne.n	8003294 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003280:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	4313      	orrs	r3, r2
 800328a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40010000 	.word	0x40010000
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40000800 	.word	0x40000800
 80032c0:	40000c00 	.word	0x40000c00
 80032c4:	40010400 	.word	0x40010400
 80032c8:	40014000 	.word	0x40014000
 80032cc:	40001800 	.word	0x40001800

080032d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032d0:	b084      	sub	sp, #16
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	f107 001c 	add.w	r0, r7, #28
 80032de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d122      	bne.n	800332e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80032fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003312:	2b01      	cmp	r3, #1
 8003314:	d105      	bne.n	8003322 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f001 fbee 	bl	8004b04 <USB_CoreReset>
 8003328:	4603      	mov	r3, r0
 800332a:	73fb      	strb	r3, [r7, #15]
 800332c:	e01a      	b.n	8003364 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f001 fbe2 	bl	8004b04 <USB_CoreReset>
 8003340:	4603      	mov	r3, r0
 8003342:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
 8003356:	e005      	b.n	8003364 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	2b01      	cmp	r3, #1
 8003368:	d10b      	bne.n	8003382 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f043 0206 	orr.w	r2, r3, #6
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f043 0220 	orr.w	r2, r3, #32
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800338e:	b004      	add	sp, #16
 8003390:	4770      	bx	lr
	...

08003394 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	4613      	mov	r3, r2
 80033a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d165      	bne.n	8003474 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4a41      	ldr	r2, [pc, #260]	; (80034b0 <USB_SetTurnaroundTime+0x11c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d906      	bls.n	80033be <USB_SetTurnaroundTime+0x2a>
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4a40      	ldr	r2, [pc, #256]	; (80034b4 <USB_SetTurnaroundTime+0x120>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d202      	bcs.n	80033be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80033b8:	230f      	movs	r3, #15
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	e062      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4a3c      	ldr	r2, [pc, #240]	; (80034b4 <USB_SetTurnaroundTime+0x120>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d306      	bcc.n	80033d4 <USB_SetTurnaroundTime+0x40>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4a3b      	ldr	r2, [pc, #236]	; (80034b8 <USB_SetTurnaroundTime+0x124>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d202      	bcs.n	80033d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80033ce:	230e      	movs	r3, #14
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e057      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4a38      	ldr	r2, [pc, #224]	; (80034b8 <USB_SetTurnaroundTime+0x124>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d306      	bcc.n	80033ea <USB_SetTurnaroundTime+0x56>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4a37      	ldr	r2, [pc, #220]	; (80034bc <USB_SetTurnaroundTime+0x128>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d202      	bcs.n	80033ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80033e4:	230d      	movs	r3, #13
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	e04c      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4a33      	ldr	r2, [pc, #204]	; (80034bc <USB_SetTurnaroundTime+0x128>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d306      	bcc.n	8003400 <USB_SetTurnaroundTime+0x6c>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4a32      	ldr	r2, [pc, #200]	; (80034c0 <USB_SetTurnaroundTime+0x12c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d802      	bhi.n	8003400 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80033fa:	230c      	movs	r3, #12
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	e041      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4a2f      	ldr	r2, [pc, #188]	; (80034c0 <USB_SetTurnaroundTime+0x12c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d906      	bls.n	8003416 <USB_SetTurnaroundTime+0x82>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4a2e      	ldr	r2, [pc, #184]	; (80034c4 <USB_SetTurnaroundTime+0x130>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d802      	bhi.n	8003416 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003410:	230b      	movs	r3, #11
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	e036      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	4a2a      	ldr	r2, [pc, #168]	; (80034c4 <USB_SetTurnaroundTime+0x130>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d906      	bls.n	800342c <USB_SetTurnaroundTime+0x98>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4a29      	ldr	r2, [pc, #164]	; (80034c8 <USB_SetTurnaroundTime+0x134>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d802      	bhi.n	800342c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003426:	230a      	movs	r3, #10
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	e02b      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4a26      	ldr	r2, [pc, #152]	; (80034c8 <USB_SetTurnaroundTime+0x134>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d906      	bls.n	8003442 <USB_SetTurnaroundTime+0xae>
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4a25      	ldr	r2, [pc, #148]	; (80034cc <USB_SetTurnaroundTime+0x138>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d202      	bcs.n	8003442 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800343c:	2309      	movs	r3, #9
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	e020      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4a21      	ldr	r2, [pc, #132]	; (80034cc <USB_SetTurnaroundTime+0x138>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d306      	bcc.n	8003458 <USB_SetTurnaroundTime+0xc4>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4a20      	ldr	r2, [pc, #128]	; (80034d0 <USB_SetTurnaroundTime+0x13c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d802      	bhi.n	8003458 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003452:	2308      	movs	r3, #8
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	e015      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4a1d      	ldr	r2, [pc, #116]	; (80034d0 <USB_SetTurnaroundTime+0x13c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d906      	bls.n	800346e <USB_SetTurnaroundTime+0xda>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <USB_SetTurnaroundTime+0x140>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d202      	bcs.n	800346e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003468:	2307      	movs	r3, #7
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	e00a      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800346e:	2306      	movs	r3, #6
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	e007      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800347a:	2309      	movs	r3, #9
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	e001      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003480:	2309      	movs	r3, #9
 8003482:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	029b      	lsls	r3, r3, #10
 8003498:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800349c:	431a      	orrs	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	371c      	adds	r7, #28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	00d8acbf 	.word	0x00d8acbf
 80034b4:	00e4e1c0 	.word	0x00e4e1c0
 80034b8:	00f42400 	.word	0x00f42400
 80034bc:	01067380 	.word	0x01067380
 80034c0:	011a499f 	.word	0x011a499f
 80034c4:	01312cff 	.word	0x01312cff
 80034c8:	014ca43f 	.word	0x014ca43f
 80034cc:	016e3600 	.word	0x016e3600
 80034d0:	01a6ab1f 	.word	0x01a6ab1f
 80034d4:	01e84800 	.word	0x01e84800

080034d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f043 0201 	orr.w	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f023 0201 	bic.w	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d115      	bne.n	800356a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800354a:	2001      	movs	r0, #1
 800354c:	f7fd faba 	bl	8000ac4 <HAL_Delay>
      ms++;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	3301      	adds	r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f001 fa45 	bl	80049e6 <USB_GetMode>
 800355c:	4603      	mov	r3, r0
 800355e:	2b01      	cmp	r3, #1
 8003560:	d01e      	beq.n	80035a0 <USB_SetCurrentMode+0x84>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b31      	cmp	r3, #49	; 0x31
 8003566:	d9f0      	bls.n	800354a <USB_SetCurrentMode+0x2e>
 8003568:	e01a      	b.n	80035a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d115      	bne.n	800359c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800357c:	2001      	movs	r0, #1
 800357e:	f7fd faa1 	bl	8000ac4 <HAL_Delay>
      ms++;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3301      	adds	r3, #1
 8003586:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f001 fa2c 	bl	80049e6 <USB_GetMode>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <USB_SetCurrentMode+0x84>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b31      	cmp	r3, #49	; 0x31
 8003598:	d9f0      	bls.n	800357c <USB_SetCurrentMode+0x60>
 800359a:	e001      	b.n	80035a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e005      	b.n	80035ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b32      	cmp	r3, #50	; 0x32
 80035a4:	d101      	bne.n	80035aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035b4:	b084      	sub	sp, #16
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80035c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	e009      	b.n	80035e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	3340      	adds	r3, #64	; 0x40
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	2200      	movs	r2, #0
 80035e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	3301      	adds	r3, #1
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b0e      	cmp	r3, #14
 80035ec:	d9f2      	bls.n	80035d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80035ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11c      	bne.n	800362e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003602:	f043 0302 	orr.w	r3, r3, #2
 8003606:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003624:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	639a      	str	r2, [r3, #56]	; 0x38
 800362c:	e00b      	b.n	8003646 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003632:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800364c:	461a      	mov	r2, r3
 800364e:	2300      	movs	r3, #0
 8003650:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003658:	4619      	mov	r1, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003660:	461a      	mov	r2, r3
 8003662:	680b      	ldr	r3, [r1, #0]
 8003664:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	2b01      	cmp	r3, #1
 800366a:	d10c      	bne.n	8003686 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d104      	bne.n	800367c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003672:	2100      	movs	r1, #0
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f965 	bl	8003944 <USB_SetDevSpeed>
 800367a:	e008      	b.n	800368e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800367c:	2101      	movs	r1, #1
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f960 	bl	8003944 <USB_SetDevSpeed>
 8003684:	e003      	b.n	800368e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003686:	2103      	movs	r1, #3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f95b 	bl	8003944 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800368e:	2110      	movs	r1, #16
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f8f3 	bl	800387c <USB_FlushTxFifo>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f91f 	bl	80038e4 <USB_FlushRxFifo>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b6:	461a      	mov	r2, r3
 80036b8:	2300      	movs	r3, #0
 80036ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c2:	461a      	mov	r2, r3
 80036c4:	2300      	movs	r3, #0
 80036c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ce:	461a      	mov	r2, r3
 80036d0:	2300      	movs	r3, #0
 80036d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	e043      	b.n	8003762 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036f0:	d118      	bne.n	8003724 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003704:	461a      	mov	r2, r3
 8003706:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	e013      	b.n	8003736 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371a:	461a      	mov	r2, r3
 800371c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	e008      	b.n	8003736 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003730:	461a      	mov	r2, r3
 8003732:	2300      	movs	r3, #0
 8003734:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4413      	add	r3, r2
 800373e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003742:	461a      	mov	r2, r3
 8003744:	2300      	movs	r3, #0
 8003746:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003754:	461a      	mov	r2, r3
 8003756:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800375a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	3301      	adds	r3, #1
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	429a      	cmp	r2, r3
 8003768:	d3b7      	bcc.n	80036da <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	e043      	b.n	80037f8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003786:	d118      	bne.n	80037ba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10a      	bne.n	80037a4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379a:	461a      	mov	r2, r3
 800379c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e013      	b.n	80037cc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b0:	461a      	mov	r2, r3
 80037b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	e008      	b.n	80037cc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c6:	461a      	mov	r2, r3
 80037c8:	2300      	movs	r3, #0
 80037ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d8:	461a      	mov	r2, r3
 80037da:	2300      	movs	r3, #0
 80037dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ea:	461a      	mov	r2, r3
 80037ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	3301      	adds	r3, #1
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d3b7      	bcc.n	8003770 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800380e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003812:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003820:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	2b00      	cmp	r3, #0
 8003826:	d105      	bne.n	8003834 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	f043 0210 	orr.w	r2, r3, #16
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699a      	ldr	r2, [r3, #24]
 8003838:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <USB_DevInit+0x2c4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f043 0208 	orr.w	r2, r3, #8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003854:	2b01      	cmp	r3, #1
 8003856:	d107      	bne.n	8003868 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003860:	f043 0304 	orr.w	r3, r3, #4
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003868:	7dfb      	ldrb	r3, [r7, #23]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003874:	b004      	add	sp, #16
 8003876:	4770      	bx	lr
 8003878:	803c3800 	.word	0x803c3800

0800387c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3301      	adds	r3, #1
 800388e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <USB_FlushTxFifo+0x64>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d901      	bls.n	800389c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e01b      	b.n	80038d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	daf2      	bge.n	800388a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	019b      	lsls	r3, r3, #6
 80038ac:	f043 0220 	orr.w	r2, r3, #32
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3301      	adds	r3, #1
 80038b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4a08      	ldr	r2, [pc, #32]	; (80038e0 <USB_FlushTxFifo+0x64>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e006      	b.n	80038d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d0f0      	beq.n	80038b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	00030d40 	.word	0x00030d40

080038e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3301      	adds	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4a11      	ldr	r2, [pc, #68]	; (8003940 <USB_FlushRxFifo+0x5c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d901      	bls.n	8003902 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e018      	b.n	8003934 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	daf2      	bge.n	80038f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2210      	movs	r2, #16
 8003912:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3301      	adds	r3, #1
 8003918:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a08      	ldr	r2, [pc, #32]	; (8003940 <USB_FlushRxFifo+0x5c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e006      	b.n	8003934 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b10      	cmp	r3, #16
 8003930:	d0f0      	beq.n	8003914 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	00030d40 	.word	0x00030d40

08003944 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	68f9      	ldr	r1, [r7, #12]
 8003960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003964:	4313      	orrs	r3, r2
 8003966:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003976:	b480      	push	{r7}
 8003978:	b087      	sub	sp, #28
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0306 	and.w	r3, r3, #6
 800398e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d102      	bne.n	800399c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003996:	2300      	movs	r3, #0
 8003998:	75fb      	strb	r3, [r7, #23]
 800399a:	e00a      	b.n	80039b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d002      	beq.n	80039a8 <USB_GetDevSpeed+0x32>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b06      	cmp	r3, #6
 80039a6:	d102      	bne.n	80039ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80039a8:	2302      	movs	r3, #2
 80039aa:	75fb      	strb	r3, [r7, #23]
 80039ac:	e001      	b.n	80039b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80039ae:	230f      	movs	r3, #15
 80039b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	371c      	adds	r7, #28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	785b      	ldrb	r3, [r3, #1]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d13a      	bne.n	8003a52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	2101      	movs	r1, #1
 80039ee:	fa01 f303 	lsl.w	r3, r1, r3
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	68f9      	ldr	r1, [r7, #12]
 80039f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d155      	bne.n	8003ac0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	791b      	ldrb	r3, [r3, #4]
 8003a2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	059b      	lsls	r3, r3, #22
 8003a36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	0151      	lsls	r1, r2, #5
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	440a      	add	r2, r1
 8003a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	e036      	b.n	8003ac0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a58:	69da      	ldr	r2, [r3, #28]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	2101      	movs	r1, #1
 8003a64:	fa01 f303 	lsl.w	r3, r1, r3
 8003a68:	041b      	lsls	r3, r3, #16
 8003a6a:	68f9      	ldr	r1, [r7, #12]
 8003a6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d11a      	bne.n	8003ac0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	791b      	ldrb	r3, [r3, #4]
 8003aa4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	0151      	lsls	r1, r2, #5
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	440a      	add	r2, r1
 8003ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003abe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	785b      	ldrb	r3, [r3, #1]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d161      	bne.n	8003bb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003afe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b02:	d11f      	bne.n	8003b44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	0151      	lsls	r1, r2, #5
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	440a      	add	r2, r1
 8003b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	0151      	lsls	r1, r2, #5
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	440a      	add	r2, r1
 8003b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	2101      	movs	r1, #1
 8003b56:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	68f9      	ldr	r1, [r7, #12]
 8003b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b64:	4013      	ands	r3, r2
 8003b66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	2101      	movs	r1, #1
 8003b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	68f9      	ldr	r1, [r7, #12]
 8003b84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	0159      	lsls	r1, r3, #5
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	440b      	add	r3, r1
 8003ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4b35      	ldr	r3, [pc, #212]	; (8003c80 <USB_DeactivateEndpoint+0x1b0>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]
 8003bae:	e060      	b.n	8003c72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bc6:	d11f      	bne.n	8003c08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	0151      	lsls	r1, r2, #5
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	440a      	add	r2, r1
 8003bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003be2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003be6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	0151      	lsls	r1, r2, #5
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	440a      	add	r2, r1
 8003bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	2101      	movs	r1, #1
 8003c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1e:	041b      	lsls	r3, r3, #16
 8003c20:	43db      	mvns	r3, r3
 8003c22:	68f9      	ldr	r1, [r7, #12]
 8003c24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c28:	4013      	ands	r3, r2
 8003c2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c32:	69da      	ldr	r2, [r3, #28]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	43db      	mvns	r3, r3
 8003c46:	68f9      	ldr	r1, [r7, #12]
 8003c48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	0159      	lsls	r1, r3, #5
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	440b      	add	r3, r1
 8003c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <USB_DeactivateEndpoint+0x1b4>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	ec337800 	.word	0xec337800
 8003c84:	eff37800 	.word	0xeff37800

08003c88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08a      	sub	sp, #40	; 0x28
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	785b      	ldrb	r3, [r3, #1]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	f040 815c 	bne.w	8003f62 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d132      	bne.n	8003d18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ccc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	0151      	lsls	r1, r2, #5
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	440a      	add	r2, r1
 8003cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	0151      	lsls	r1, r2, #5
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	440a      	add	r2, r1
 8003d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d10:	0cdb      	lsrs	r3, r3, #19
 8003d12:	04db      	lsls	r3, r3, #19
 8003d14:	6113      	str	r3, [r2, #16]
 8003d16:	e074      	b.n	8003e02 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	0151      	lsls	r1, r2, #5
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	440a      	add	r2, r1
 8003d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d32:	0cdb      	lsrs	r3, r3, #19
 8003d34:	04db      	lsls	r3, r3, #19
 8003d36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	0151      	lsls	r1, r2, #5
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	440a      	add	r2, r1
 8003d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d68:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	6999      	ldr	r1, [r3, #24]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	440b      	add	r3, r1
 8003d74:	1e59      	subs	r1, r3, #1
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d7e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003d80:	4b9d      	ldr	r3, [pc, #628]	; (8003ff8 <USB_EPStartXfer+0x370>)
 8003d82:	400b      	ands	r3, r1
 8003d84:	69b9      	ldr	r1, [r7, #24]
 8003d86:	0148      	lsls	r0, r1, #5
 8003d88:	69f9      	ldr	r1, [r7, #28]
 8003d8a:	4401      	add	r1, r0
 8003d8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d90:	4313      	orrs	r3, r2
 8003d92:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003daa:	69b9      	ldr	r1, [r7, #24]
 8003dac:	0148      	lsls	r0, r1, #5
 8003dae:	69f9      	ldr	r1, [r7, #28]
 8003db0:	4401      	add	r1, r0
 8003db2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003db6:	4313      	orrs	r3, r2
 8003db8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	791b      	ldrb	r3, [r3, #4]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d11f      	bne.n	8003e02 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	0151      	lsls	r1, r2, #5
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	440a      	add	r2, r1
 8003dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ddc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003de0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	0151      	lsls	r1, r2, #5
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	440a      	add	r2, r1
 8003df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d14b      	bne.n	8003ea0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d009      	beq.n	8003e24 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	791b      	ldrb	r3, [r3, #4]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d128      	bne.n	8003e7e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d110      	bne.n	8003e5e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	0151      	lsls	r1, r2, #5
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	440a      	add	r2, r1
 8003e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	e00f      	b.n	8003e7e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	0151      	lsls	r1, r2, #5
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	440a      	add	r2, r1
 8003e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	0151      	lsls	r1, r2, #5
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	440a      	add	r2, r1
 8003e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	e133      	b.n	8004108 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	0151      	lsls	r1, r2, #5
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ebe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	791b      	ldrb	r3, [r3, #4]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d015      	beq.n	8003ef4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 811b 	beq.w	8004108 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee8:	69f9      	ldr	r1, [r7, #28]
 8003eea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	634b      	str	r3, [r1, #52]	; 0x34
 8003ef2:	e109      	b.n	8004108 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d110      	bne.n	8003f26 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	0151      	lsls	r1, r2, #5
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	440a      	add	r2, r1
 8003f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	e00f      	b.n	8003f46 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	0151      	lsls	r1, r2, #5
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	440a      	add	r2, r1
 8003f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f44:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	6919      	ldr	r1, [r3, #16]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	781a      	ldrb	r2, [r3, #0]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	b298      	uxth	r0, r3
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	4603      	mov	r3, r0
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fade 	bl	800451c <USB_WritePacket>
 8003f60:	e0d2      	b.n	8004108 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	0151      	lsls	r1, r2, #5
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	440a      	add	r2, r1
 8003f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f7c:	0cdb      	lsrs	r3, r3, #19
 8003f7e:	04db      	lsls	r3, r3, #19
 8003f80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	0151      	lsls	r1, r2, #5
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	440a      	add	r2, r1
 8003f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fa0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fa4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d126      	bne.n	8003ffc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc4:	69b9      	ldr	r1, [r7, #24]
 8003fc6:	0148      	lsls	r0, r1, #5
 8003fc8:	69f9      	ldr	r1, [r7, #28]
 8003fca:	4401      	add	r1, r0
 8003fcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	0151      	lsls	r1, r2, #5
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	440a      	add	r2, r1
 8003fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ff2:	6113      	str	r3, [r2, #16]
 8003ff4:	e03a      	b.n	800406c <USB_EPStartXfer+0x3e4>
 8003ff6:	bf00      	nop
 8003ff8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	699a      	ldr	r2, [r3, #24]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4413      	add	r3, r2
 8004006:	1e5a      	subs	r2, r3, #1
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004010:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	8afa      	ldrh	r2, [r7, #22]
 8004018:	fb03 f202 	mul.w	r2, r3, r2
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	8afb      	ldrh	r3, [r7, #22]
 8004030:	04d9      	lsls	r1, r3, #19
 8004032:	4b38      	ldr	r3, [pc, #224]	; (8004114 <USB_EPStartXfer+0x48c>)
 8004034:	400b      	ands	r3, r1
 8004036:	69b9      	ldr	r1, [r7, #24]
 8004038:	0148      	lsls	r0, r1, #5
 800403a:	69f9      	ldr	r1, [r7, #28]
 800403c:	4401      	add	r1, r0
 800403e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004042:	4313      	orrs	r3, r2
 8004044:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4413      	add	r3, r2
 800404e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	0148      	lsls	r0, r1, #5
 8004060:	69f9      	ldr	r1, [r7, #28]
 8004062:	4401      	add	r1, r0
 8004064:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004068:	4313      	orrs	r3, r2
 800406a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d10d      	bne.n	800408e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d009      	beq.n	800408e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	6919      	ldr	r1, [r3, #16]
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408a:	460a      	mov	r2, r1
 800408c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	791b      	ldrb	r3, [r3, #4]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d128      	bne.n	80040e8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d110      	bne.n	80040c8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	0151      	lsls	r1, r2, #5
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	440a      	add	r2, r1
 80040bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	e00f      	b.n	80040e8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	0151      	lsls	r1, r2, #5
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	440a      	add	r2, r1
 80040de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	0151      	lsls	r1, r2, #5
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	440a      	add	r2, r1
 80040fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004102:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004106:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3720      	adds	r7, #32
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	1ff80000 	.word	0x1ff80000

08004118 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	2b01      	cmp	r3, #1
 8004136:	f040 80ce 	bne.w	80042d6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d132      	bne.n	80041a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	0151      	lsls	r1, r2, #5
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	440a      	add	r2, r1
 8004158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004160:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004164:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	0151      	lsls	r1, r2, #5
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	440a      	add	r2, r1
 800417c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004180:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004184:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	0151      	lsls	r1, r2, #5
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	440a      	add	r2, r1
 800419c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a0:	0cdb      	lsrs	r3, r3, #19
 80041a2:	04db      	lsls	r3, r3, #19
 80041a4:	6113      	str	r3, [r2, #16]
 80041a6:	e04e      	b.n	8004246 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	0151      	lsls	r1, r2, #5
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	440a      	add	r2, r1
 80041be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c2:	0cdb      	lsrs	r3, r3, #19
 80041c4:	04db      	lsls	r3, r3, #19
 80041c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	0151      	lsls	r1, r2, #5
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	440a      	add	r2, r1
 80041de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d903      	bls.n	8004200 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	0151      	lsls	r1, r2, #5
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	440a      	add	r2, r1
 8004216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800421a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800421e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004236:	6939      	ldr	r1, [r7, #16]
 8004238:	0148      	lsls	r0, r1, #5
 800423a:	6979      	ldr	r1, [r7, #20]
 800423c:	4401      	add	r1, r0
 800423e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004242:	4313      	orrs	r3, r2
 8004244:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d11e      	bne.n	800428a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004260:	461a      	mov	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	0151      	lsls	r1, r2, #5
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	440a      	add	r2, r1
 800427e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004282:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	e097      	b.n	80043ba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	0151      	lsls	r1, r2, #5
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	440a      	add	r2, r1
 80042a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 8083 	beq.w	80043ba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	2101      	movs	r1, #1
 80042c6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ca:	6979      	ldr	r1, [r7, #20]
 80042cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042d0:	4313      	orrs	r3, r2
 80042d2:	634b      	str	r3, [r1, #52]	; 0x34
 80042d4:	e071      	b.n	80043ba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	0151      	lsls	r1, r2, #5
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	440a      	add	r2, r1
 80042ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042f0:	0cdb      	lsrs	r3, r3, #19
 80042f2:	04db      	lsls	r3, r3, #19
 80042f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	0151      	lsls	r1, r2, #5
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	440a      	add	r2, r1
 800430c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004310:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004314:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004318:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	0151      	lsls	r1, r2, #5
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	440a      	add	r2, r1
 8004348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800434c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004350:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004368:	6939      	ldr	r1, [r7, #16]
 800436a:	0148      	lsls	r0, r1, #5
 800436c:	6979      	ldr	r1, [r7, #20]
 800436e:	4401      	add	r1, r0
 8004370:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004374:	4313      	orrs	r3, r2
 8004376:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d10d      	bne.n	800439a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6919      	ldr	r1, [r3, #16]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004396:	460a      	mov	r2, r1
 8004398:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	0151      	lsls	r1, r2, #5
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	440a      	add	r2, r1
 80043b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	785b      	ldrb	r3, [r3, #1]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d14a      	bne.n	800447c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043fe:	f040 8086 	bne.w	800450e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	7812      	ldrb	r2, [r2, #0]
 8004416:	0151      	lsls	r1, r2, #5
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	440a      	add	r2, r1
 800441c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004420:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004424:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	7812      	ldrb	r2, [r2, #0]
 800443a:	0151      	lsls	r1, r2, #5
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	440a      	add	r2, r1
 8004440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004444:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004448:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3301      	adds	r3, #1
 800444e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f242 7210 	movw	r2, #10000	; 0x2710
 8004456:	4293      	cmp	r3, r2
 8004458:	d902      	bls.n	8004460 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	75fb      	strb	r3, [r7, #23]
          break;
 800445e:	e056      	b.n	800450e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004474:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004478:	d0e7      	beq.n	800444a <USB_EPStopXfer+0x82>
 800447a:	e048      	b.n	800450e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004490:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004494:	d13b      	bne.n	800450e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	7812      	ldrb	r2, [r2, #0]
 80044aa:	0151      	lsls	r1, r2, #5
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	440a      	add	r2, r1
 80044b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	7812      	ldrb	r2, [r2, #0]
 80044ce:	0151      	lsls	r1, r2, #5
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	440a      	add	r2, r1
 80044d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3301      	adds	r3, #1
 80044e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d902      	bls.n	80044f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	75fb      	strb	r3, [r7, #23]
          break;
 80044f2:	e00c      	b.n	800450e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004508:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800450c:	d0e7      	beq.n	80044de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800450e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004510:	4618      	mov	r0, r3
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800451c:	b480      	push	{r7}
 800451e:	b089      	sub	sp, #36	; 0x24
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	4611      	mov	r1, r2
 8004528:	461a      	mov	r2, r3
 800452a:	460b      	mov	r3, r1
 800452c:	71fb      	strb	r3, [r7, #7]
 800452e:	4613      	mov	r3, r2
 8004530:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800453a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800453e:	2b00      	cmp	r3, #0
 8004540:	d123      	bne.n	800458a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004542:	88bb      	ldrh	r3, [r7, #4]
 8004544:	3303      	adds	r3, #3
 8004546:	089b      	lsrs	r3, r3, #2
 8004548:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800454a:	2300      	movs	r3, #0
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	e018      	b.n	8004582 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004550:	79fb      	ldrb	r3, [r7, #7]
 8004552:	031a      	lsls	r2, r3, #12
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	4413      	add	r3, r2
 8004558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800455c:	461a      	mov	r2, r3
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	3301      	adds	r3, #1
 8004568:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	3301      	adds	r3, #1
 800456e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	3301      	adds	r3, #1
 8004574:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	3301      	adds	r3, #1
 800457a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	3301      	adds	r3, #1
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	429a      	cmp	r2, r3
 8004588:	d3e2      	bcc.n	8004550 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3724      	adds	r7, #36	; 0x24
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004598:	b480      	push	{r7}
 800459a:	b08b      	sub	sp, #44	; 0x2c
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	4613      	mov	r3, r2
 80045a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	089b      	lsrs	r3, r3, #2
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80045be:	2300      	movs	r3, #0
 80045c0:	623b      	str	r3, [r7, #32]
 80045c2:	e014      	b.n	80045ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	3301      	adds	r3, #1
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	3301      	adds	r3, #1
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	3301      	adds	r3, #1
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	3301      	adds	r3, #1
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	3301      	adds	r3, #1
 80045ec:	623b      	str	r3, [r7, #32]
 80045ee:	6a3a      	ldr	r2, [r7, #32]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d3e6      	bcc.n	80045c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80045f6:	8bfb      	ldrh	r3, [r7, #30]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01e      	beq.n	800463a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004606:	461a      	mov	r2, r3
 8004608:	f107 0310 	add.w	r3, r7, #16
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
 800461c:	b2da      	uxtb	r2, r3
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	701a      	strb	r2, [r3, #0]
      i++;
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	3301      	adds	r3, #1
 8004626:	623b      	str	r3, [r7, #32]
      pDest++;
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	3301      	adds	r3, #1
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800462e:	8bfb      	ldrh	r3, [r7, #30]
 8004630:	3b01      	subs	r3, #1
 8004632:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004634:	8bfb      	ldrh	r3, [r7, #30]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1ea      	bne.n	8004610 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800463c:	4618      	mov	r0, r3
 800463e:	372c      	adds	r7, #44	; 0x2c
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	785b      	ldrb	r3, [r3, #1]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d12c      	bne.n	80046be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	db12      	blt.n	800469c <USB_EPSetStall+0x54>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00f      	beq.n	800469c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	440a      	add	r2, r1
 8004692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004696:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800469a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	0151      	lsls	r1, r2, #5
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	440a      	add	r2, r1
 80046b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	e02b      	b.n	8004716 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	db12      	blt.n	80046f6 <USB_EPSetStall+0xae>
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00f      	beq.n	80046f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	0151      	lsls	r1, r2, #5
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	440a      	add	r2, r1
 80046ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004714:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	785b      	ldrb	r3, [r3, #1]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d128      	bne.n	8004792 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	0151      	lsls	r1, r2, #5
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	440a      	add	r2, r1
 8004756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800475a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800475e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	791b      	ldrb	r3, [r3, #4]
 8004764:	2b03      	cmp	r3, #3
 8004766:	d003      	beq.n	8004770 <USB_EPClearStall+0x4c>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	791b      	ldrb	r3, [r3, #4]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d138      	bne.n	80047e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	0151      	lsls	r1, r2, #5
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	440a      	add	r2, r1
 8004786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800478a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	e027      	b.n	80047e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	791b      	ldrb	r3, [r3, #4]
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d003      	beq.n	80047c2 <USB_EPClearStall+0x9e>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	791b      	ldrb	r3, [r3, #4]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d10f      	bne.n	80047e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	0151      	lsls	r1, r2, #5
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	440a      	add	r2, r1
 80047d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800480e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004812:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004824:	68f9      	ldr	r1, [r7, #12]
 8004826:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800482a:	4313      	orrs	r3, r2
 800482c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004856:	f023 0303 	bic.w	r3, r3, #3
 800485a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800486a:	f023 0302 	bic.w	r3, r3, #2
 800486e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800487e:	b480      	push	{r7}
 8004880:	b085      	sub	sp, #20
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004898:	f023 0303 	bic.w	r3, r3, #3
 800489c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ac:	f043 0302 	orr.w	r3, r3, #2
 80048b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4013      	ands	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048d8:	68fb      	ldr	r3, [r7, #12]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	4013      	ands	r3, r2
 8004908:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	0c1b      	lsrs	r3, r3, #16
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	4013      	ands	r3, r2
 800493c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	b29b      	uxth	r3, r3
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	460b      	mov	r3, r1
 8004958:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	4013      	ands	r3, r2
 800497a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800497c:	68bb      	ldr	r3, [r7, #8]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800498a:	b480      	push	{r7}
 800498c:	b087      	sub	sp, #28
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	460b      	mov	r3, r1
 8004994:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80049ae:	78fb      	ldrb	r3, [r7, #3]
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ba:	01db      	lsls	r3, r3, #7
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4013      	ands	r3, r2
 80049d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049d8:	68bb      	ldr	r3, [r7, #8]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f003 0301 	and.w	r3, r3, #1
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a1c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a20:	f023 0307 	bic.w	r3, r3, #7
 8004a24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	460b      	mov	r3, r1
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	333c      	adds	r3, #60	; 0x3c
 8004a5e:	3304      	adds	r3, #4
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4a26      	ldr	r2, [pc, #152]	; (8004b00 <USB_EP0_OutStart+0xb8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d90a      	bls.n	8004a82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a7c:	d101      	bne.n	8004a82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e037      	b.n	8004af2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a88:	461a      	mov	r2, r3
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ab0:	f043 0318 	orr.w	r3, r3, #24
 8004ab4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ac8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004aca:	7afb      	ldrb	r3, [r7, #11]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d10f      	bne.n	8004af0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004aee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	4f54300a 	.word	0x4f54300a

08004b04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3301      	adds	r3, #1
 8004b14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4a13      	ldr	r2, [pc, #76]	; (8004b68 <USB_CoreReset+0x64>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d901      	bls.n	8004b22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e01b      	b.n	8004b5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	daf2      	bge.n	8004b10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f043 0201 	orr.w	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4a09      	ldr	r2, [pc, #36]	; (8004b68 <USB_CoreReset+0x64>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d901      	bls.n	8004b4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e006      	b.n	8004b5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d0f0      	beq.n	8004b3a <USB_CoreReset+0x36>

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	00030d40 	.word	0x00030d40

08004b6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004b78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004b7c:	f002 fcae 	bl	80074dc <USBD_static_malloc>
 8004b80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d109      	bne.n	8004b9c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	32b0      	adds	r2, #176	; 0xb0
 8004b92:	2100      	movs	r1, #0
 8004b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e0d4      	b.n	8004d46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004b9c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f002 fd10 	bl	80075c8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	32b0      	adds	r2, #176	; 0xb0
 8004bb2:	68f9      	ldr	r1, [r7, #12]
 8004bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	32b0      	adds	r2, #176	; 0xb0
 8004bc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	7c1b      	ldrb	r3, [r3, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d138      	bne.n	8004c46 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004bd4:	4b5e      	ldr	r3, [pc, #376]	; (8004d50 <USBD_CDC_Init+0x1e4>)
 8004bd6:	7819      	ldrb	r1, [r3, #0]
 8004bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bdc:	2202      	movs	r2, #2
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f002 fb59 	bl	8007296 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004be4:	4b5a      	ldr	r3, [pc, #360]	; (8004d50 <USBD_CDC_Init+0x1e4>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	f003 020f 	and.w	r2, r3, #15
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	3324      	adds	r3, #36	; 0x24
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004bfe:	4b55      	ldr	r3, [pc, #340]	; (8004d54 <USBD_CDC_Init+0x1e8>)
 8004c00:	7819      	ldrb	r1, [r3, #0]
 8004c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c06:	2202      	movs	r2, #2
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f002 fb44 	bl	8007296 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004c0e:	4b51      	ldr	r3, [pc, #324]	; (8004d54 <USBD_CDC_Init+0x1e8>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	f003 020f 	and.w	r2, r3, #15
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004c26:	2201      	movs	r2, #1
 8004c28:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004c2a:	4b4b      	ldr	r3, [pc, #300]	; (8004d58 <USBD_CDC_Init+0x1ec>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	f003 020f 	and.w	r2, r3, #15
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	3326      	adds	r3, #38	; 0x26
 8004c40:	2210      	movs	r2, #16
 8004c42:	801a      	strh	r2, [r3, #0]
 8004c44:	e035      	b.n	8004cb2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004c46:	4b42      	ldr	r3, [pc, #264]	; (8004d50 <USBD_CDC_Init+0x1e4>)
 8004c48:	7819      	ldrb	r1, [r3, #0]
 8004c4a:	2340      	movs	r3, #64	; 0x40
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f002 fb21 	bl	8007296 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004c54:	4b3e      	ldr	r3, [pc, #248]	; (8004d50 <USBD_CDC_Init+0x1e4>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	f003 020f 	and.w	r2, r3, #15
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	3324      	adds	r3, #36	; 0x24
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004c6e:	4b39      	ldr	r3, [pc, #228]	; (8004d54 <USBD_CDC_Init+0x1e8>)
 8004c70:	7819      	ldrb	r1, [r3, #0]
 8004c72:	2340      	movs	r3, #64	; 0x40
 8004c74:	2202      	movs	r2, #2
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f002 fb0d 	bl	8007296 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004c7c:	4b35      	ldr	r3, [pc, #212]	; (8004d54 <USBD_CDC_Init+0x1e8>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	f003 020f 	and.w	r2, r3, #15
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004c94:	2201      	movs	r2, #1
 8004c96:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004c98:	4b2f      	ldr	r3, [pc, #188]	; (8004d58 <USBD_CDC_Init+0x1ec>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	f003 020f 	and.w	r2, r3, #15
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	3326      	adds	r3, #38	; 0x26
 8004cae:	2210      	movs	r2, #16
 8004cb0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004cb2:	4b29      	ldr	r3, [pc, #164]	; (8004d58 <USBD_CDC_Init+0x1ec>)
 8004cb4:	7819      	ldrb	r1, [r3, #0]
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	2203      	movs	r2, #3
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f002 faeb 	bl	8007296 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004cc0:	4b25      	ldr	r3, [pc, #148]	; (8004d58 <USBD_CDC_Init+0x1ec>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	f003 020f 	and.w	r2, r3, #15
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3324      	adds	r3, #36	; 0x24
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	33b0      	adds	r3, #176	; 0xb0
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004d10:	2302      	movs	r3, #2
 8004d12:	e018      	b.n	8004d46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	7c1b      	ldrb	r3, [r3, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d1c:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <USBD_CDC_Init+0x1e8>)
 8004d1e:	7819      	ldrb	r1, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f002 fba2 	bl	8007474 <USBD_LL_PrepareReceive>
 8004d30:	e008      	b.n	8004d44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d32:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <USBD_CDC_Init+0x1e8>)
 8004d34:	7819      	ldrb	r1, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d3c:	2340      	movs	r3, #64	; 0x40
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f002 fb98 	bl	8007474 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000093 	.word	0x20000093
 8004d54:	20000094 	.word	0x20000094
 8004d58:	20000095 	.word	0x20000095

08004d5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004d68:	4b3a      	ldr	r3, [pc, #232]	; (8004e54 <USBD_CDC_DeInit+0xf8>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f002 fab7 	bl	80072e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004d74:	4b37      	ldr	r3, [pc, #220]	; (8004e54 <USBD_CDC_DeInit+0xf8>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	f003 020f 	and.w	r2, r3, #15
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	3324      	adds	r3, #36	; 0x24
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004d8e:	4b32      	ldr	r3, [pc, #200]	; (8004e58 <USBD_CDC_DeInit+0xfc>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	4619      	mov	r1, r3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f002 faa4 	bl	80072e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004d9a:	4b2f      	ldr	r3, [pc, #188]	; (8004e58 <USBD_CDC_DeInit+0xfc>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	f003 020f 	and.w	r2, r3, #15
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004db2:	2200      	movs	r2, #0
 8004db4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004db6:	4b29      	ldr	r3, [pc, #164]	; (8004e5c <USBD_CDC_DeInit+0x100>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f002 fa90 	bl	80072e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004dc2:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <USBD_CDC_DeInit+0x100>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	f003 020f 	and.w	r2, r3, #15
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	3324      	adds	r3, #36	; 0x24
 8004dd8:	2200      	movs	r2, #0
 8004dda:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004ddc:	4b1f      	ldr	r3, [pc, #124]	; (8004e5c <USBD_CDC_DeInit+0x100>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	f003 020f 	and.w	r2, r3, #15
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	3326      	adds	r3, #38	; 0x26
 8004df2:	2200      	movs	r2, #0
 8004df4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	32b0      	adds	r2, #176	; 0xb0
 8004e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01f      	beq.n	8004e48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	33b0      	adds	r3, #176	; 0xb0
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	32b0      	adds	r2, #176	; 0xb0
 8004e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f002 fb64 	bl	80074f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	32b0      	adds	r2, #176	; 0xb0
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000093 	.word	0x20000093
 8004e58:	20000094 	.word	0x20000094
 8004e5c:	20000095 	.word	0x20000095

08004e60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	32b0      	adds	r2, #176	; 0xb0
 8004e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e0bf      	b.n	8005010 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d050      	beq.n	8004f3e <USBD_CDC_Setup+0xde>
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	f040 80af 	bne.w	8005000 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	88db      	ldrh	r3, [r3, #6]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d03a      	beq.n	8004f20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	b25b      	sxtb	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	da1b      	bge.n	8004eec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	33b0      	adds	r3, #176	; 0xb0
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004eca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	88d2      	ldrh	r2, [r2, #6]
 8004ed0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	88db      	ldrh	r3, [r3, #6]
 8004ed6:	2b07      	cmp	r3, #7
 8004ed8:	bf28      	it	cs
 8004eda:	2307      	movcs	r3, #7
 8004edc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	89fa      	ldrh	r2, [r7, #14]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f001 fd89 	bl	80069fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004eea:	e090      	b.n	800500e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	785a      	ldrb	r2, [r3, #1]
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	88db      	ldrh	r3, [r3, #6]
 8004efa:	2b3f      	cmp	r3, #63	; 0x3f
 8004efc:	d803      	bhi.n	8004f06 <USBD_CDC_Setup+0xa6>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	88db      	ldrh	r3, [r3, #6]
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	e000      	b.n	8004f08 <USBD_CDC_Setup+0xa8>
 8004f06:	2240      	movs	r2, #64	; 0x40
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004f0e:	6939      	ldr	r1, [r7, #16]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004f16:	461a      	mov	r2, r3
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f001 fd9b 	bl	8006a54 <USBD_CtlPrepareRx>
      break;
 8004f1e:	e076      	b.n	800500e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	33b0      	adds	r3, #176	; 0xb0
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	7850      	ldrb	r0, [r2, #1]
 8004f36:	2200      	movs	r2, #0
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	4798      	blx	r3
      break;
 8004f3c:	e067      	b.n	800500e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	785b      	ldrb	r3, [r3, #1]
 8004f42:	2b0b      	cmp	r3, #11
 8004f44:	d851      	bhi.n	8004fea <USBD_CDC_Setup+0x18a>
 8004f46:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <USBD_CDC_Setup+0xec>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004f7d 	.word	0x08004f7d
 8004f50:	08004ff9 	.word	0x08004ff9
 8004f54:	08004feb 	.word	0x08004feb
 8004f58:	08004feb 	.word	0x08004feb
 8004f5c:	08004feb 	.word	0x08004feb
 8004f60:	08004feb 	.word	0x08004feb
 8004f64:	08004feb 	.word	0x08004feb
 8004f68:	08004feb 	.word	0x08004feb
 8004f6c:	08004feb 	.word	0x08004feb
 8004f70:	08004feb 	.word	0x08004feb
 8004f74:	08004fa7 	.word	0x08004fa7
 8004f78:	08004fd1 	.word	0x08004fd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d107      	bne.n	8004f98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004f88:	f107 030a 	add.w	r3, r7, #10
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f001 fd33 	bl	80069fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f96:	e032      	b.n	8004ffe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004f98:	6839      	ldr	r1, [r7, #0]
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f001 fcbd 	bl	800691a <USBD_CtlError>
            ret = USBD_FAIL;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	75fb      	strb	r3, [r7, #23]
          break;
 8004fa4:	e02b      	b.n	8004ffe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d107      	bne.n	8004fc2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004fb2:	f107 030d 	add.w	r3, r7, #13
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	4619      	mov	r1, r3
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f001 fd1e 	bl	80069fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fc0:	e01d      	b.n	8004ffe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004fc2:	6839      	ldr	r1, [r7, #0]
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f001 fca8 	bl	800691a <USBD_CtlError>
            ret = USBD_FAIL;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	75fb      	strb	r3, [r7, #23]
          break;
 8004fce:	e016      	b.n	8004ffe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d00f      	beq.n	8004ffc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004fdc:	6839      	ldr	r1, [r7, #0]
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f001 fc9b 	bl	800691a <USBD_CtlError>
            ret = USBD_FAIL;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004fe8:	e008      	b.n	8004ffc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004fea:	6839      	ldr	r1, [r7, #0]
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f001 fc94 	bl	800691a <USBD_CtlError>
          ret = USBD_FAIL;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ff6:	e002      	b.n	8004ffe <USBD_CDC_Setup+0x19e>
          break;
 8004ff8:	bf00      	nop
 8004ffa:	e008      	b.n	800500e <USBD_CDC_Setup+0x1ae>
          break;
 8004ffc:	bf00      	nop
      }
      break;
 8004ffe:	e006      	b.n	800500e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005000:	6839      	ldr	r1, [r7, #0]
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f001 fc89 	bl	800691a <USBD_CtlError>
      ret = USBD_FAIL;
 8005008:	2303      	movs	r3, #3
 800500a:	75fb      	strb	r3, [r7, #23]
      break;
 800500c:	bf00      	nop
  }

  return (uint8_t)ret;
 800500e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800502a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	32b0      	adds	r2, #176	; 0xb0
 8005036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800503e:	2303      	movs	r3, #3
 8005040:	e065      	b.n	800510e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	32b0      	adds	r2, #176	; 0xb0
 800504c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005050:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005052:	78fb      	ldrb	r3, [r7, #3]
 8005054:	f003 020f 	and.w	r2, r3, #15
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	3318      	adds	r3, #24
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d02f      	beq.n	80050cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	f003 020f 	and.w	r2, r3, #15
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	3318      	adds	r3, #24
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	f003 010f 	and.w	r1, r3, #15
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	460b      	mov	r3, r1
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	440b      	add	r3, r1
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4403      	add	r3, r0
 8005094:	3348      	adds	r3, #72	; 0x48
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	fbb2 f1f3 	udiv	r1, r2, r3
 800509c:	fb01 f303 	mul.w	r3, r1, r3
 80050a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d112      	bne.n	80050cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80050a6:	78fb      	ldrb	r3, [r7, #3]
 80050a8:	f003 020f 	and.w	r2, r3, #15
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	3318      	adds	r3, #24
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80050be:	78f9      	ldrb	r1, [r7, #3]
 80050c0:	2300      	movs	r3, #0
 80050c2:	2200      	movs	r2, #0
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f002 f9b4 	bl	8007432 <USBD_LL_Transmit>
 80050ca:	e01f      	b.n	800510c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	33b0      	adds	r3, #176	; 0xb0
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d010      	beq.n	800510c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	33b0      	adds	r3, #176	; 0xb0
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005108:	78fa      	ldrb	r2, [r7, #3]
 800510a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	460b      	mov	r3, r1
 8005120:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	32b0      	adds	r2, #176	; 0xb0
 800512c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005130:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	32b0      	adds	r2, #176	; 0xb0
 800513c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005144:	2303      	movs	r3, #3
 8005146:	e01a      	b.n	800517e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	4619      	mov	r1, r3
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f002 f9b2 	bl	80074b6 <USBD_LL_GetRxDataSize>
 8005152:	4602      	mov	r2, r0
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	33b0      	adds	r3, #176	; 0xb0
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005178:	4611      	mov	r1, r2
 800517a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	32b0      	adds	r2, #176	; 0xb0
 8005198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800519c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e025      	b.n	80051f4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	33b0      	adds	r3, #176	; 0xb0
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01a      	beq.n	80051f2 <USBD_CDC_EP0_RxReady+0x6c>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80051c2:	2bff      	cmp	r3, #255	; 0xff
 80051c4:	d015      	beq.n	80051f2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	33b0      	adds	r3, #176	; 0xb0
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80051de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80051e6:	b292      	uxth	r2, r2
 80051e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	22ff      	movs	r2, #255	; 0xff
 80051ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005204:	2182      	movs	r1, #130	; 0x82
 8005206:	4818      	ldr	r0, [pc, #96]	; (8005268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005208:	f000 fd4f 	bl	8005caa <USBD_GetEpDesc>
 800520c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800520e:	2101      	movs	r1, #1
 8005210:	4815      	ldr	r0, [pc, #84]	; (8005268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005212:	f000 fd4a 	bl	8005caa <USBD_GetEpDesc>
 8005216:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005218:	2181      	movs	r1, #129	; 0x81
 800521a:	4813      	ldr	r0, [pc, #76]	; (8005268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800521c:	f000 fd45 	bl	8005caa <USBD_GetEpDesc>
 8005220:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2210      	movs	r2, #16
 800522c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d006      	beq.n	8005242 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2200      	movs	r2, #0
 8005238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800523c:	711a      	strb	r2, [r3, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d006      	beq.n	8005256 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005250:	711a      	strb	r2, [r3, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2243      	movs	r2, #67	; 0x43
 800525a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800525c:	4b02      	ldr	r3, [pc, #8]	; (8005268 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000050 	.word	0x20000050

0800526c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005274:	2182      	movs	r1, #130	; 0x82
 8005276:	4818      	ldr	r0, [pc, #96]	; (80052d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005278:	f000 fd17 	bl	8005caa <USBD_GetEpDesc>
 800527c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800527e:	2101      	movs	r1, #1
 8005280:	4815      	ldr	r0, [pc, #84]	; (80052d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005282:	f000 fd12 	bl	8005caa <USBD_GetEpDesc>
 8005286:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005288:	2181      	movs	r1, #129	; 0x81
 800528a:	4813      	ldr	r0, [pc, #76]	; (80052d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800528c:	f000 fd0d 	bl	8005caa <USBD_GetEpDesc>
 8005290:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2210      	movs	r2, #16
 800529c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d006      	beq.n	80052b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2200      	movs	r2, #0
 80052a8:	711a      	strb	r2, [r3, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f042 0202 	orr.w	r2, r2, #2
 80052b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d006      	beq.n	80052c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	711a      	strb	r2, [r3, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f042 0202 	orr.w	r2, r2, #2
 80052c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2243      	movs	r2, #67	; 0x43
 80052ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80052cc:	4b02      	ldr	r3, [pc, #8]	; (80052d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000050 	.word	0x20000050

080052dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80052e4:	2182      	movs	r1, #130	; 0x82
 80052e6:	4818      	ldr	r0, [pc, #96]	; (8005348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80052e8:	f000 fcdf 	bl	8005caa <USBD_GetEpDesc>
 80052ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80052ee:	2101      	movs	r1, #1
 80052f0:	4815      	ldr	r0, [pc, #84]	; (8005348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80052f2:	f000 fcda 	bl	8005caa <USBD_GetEpDesc>
 80052f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80052f8:	2181      	movs	r1, #129	; 0x81
 80052fa:	4813      	ldr	r0, [pc, #76]	; (8005348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80052fc:	f000 fcd5 	bl	8005caa <USBD_GetEpDesc>
 8005300:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2210      	movs	r2, #16
 800530c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d006      	beq.n	8005322 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2200      	movs	r2, #0
 8005318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800531c:	711a      	strb	r2, [r3, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d006      	beq.n	8005336 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005330:	711a      	strb	r2, [r3, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2243      	movs	r2, #67	; 0x43
 800533a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800533c:	4b02      	ldr	r3, [pc, #8]	; (8005348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20000050 	.word	0x20000050

0800534c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	220a      	movs	r2, #10
 8005358:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800535a:	4b03      	ldr	r3, [pc, #12]	; (8005368 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800535c:	4618      	mov	r0, r3
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	2000000c 	.word	0x2000000c

0800536c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800537c:	2303      	movs	r3, #3
 800537e:	e009      	b.n	8005394 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	33b0      	adds	r3, #176	; 0xb0
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	32b0      	adds	r2, #176	; 0xb0
 80053b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e008      	b.n	80053d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	32b0      	adds	r2, #176	; 0xb0
 80053f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005404:	2303      	movs	r3, #3
 8005406:	e004      	b.n	8005412 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
	...

08005420 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	32b0      	adds	r2, #176	; 0xb0
 8005432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005436:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005438:	2301      	movs	r3, #1
 800543a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	32b0      	adds	r2, #176	; 0xb0
 8005446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800544e:	2303      	movs	r3, #3
 8005450:	e025      	b.n	800549e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005458:	2b00      	cmp	r3, #0
 800545a:	d11f      	bne.n	800549c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2201      	movs	r2, #1
 8005460:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005464:	4b10      	ldr	r3, [pc, #64]	; (80054a8 <USBD_CDC_TransmitPacket+0x88>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	f003 020f 	and.w	r2, r3, #15
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4403      	add	r3, r0
 800547e:	3318      	adds	r3, #24
 8005480:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005482:	4b09      	ldr	r3, [pc, #36]	; (80054a8 <USBD_CDC_TransmitPacket+0x88>)
 8005484:	7819      	ldrb	r1, [r3, #0]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f001 ffcd 	bl	8007432 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20000093 	.word	0x20000093

080054ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	32b0      	adds	r2, #176	; 0xb0
 80054be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	32b0      	adds	r2, #176	; 0xb0
 80054ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e018      	b.n	800550c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	7c1b      	ldrb	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10a      	bne.n	80054f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054e2:	4b0c      	ldr	r3, [pc, #48]	; (8005514 <USBD_CDC_ReceivePacket+0x68>)
 80054e4:	7819      	ldrb	r1, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f001 ffbf 	bl	8007474 <USBD_LL_PrepareReceive>
 80054f6:	e008      	b.n	800550a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054f8:	4b06      	ldr	r3, [pc, #24]	; (8005514 <USBD_CDC_ReceivePacket+0x68>)
 80054fa:	7819      	ldrb	r1, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005502:	2340      	movs	r3, #64	; 0x40
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f001 ffb5 	bl	8007474 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	20000094 	.word	0x20000094

08005518 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	4613      	mov	r3, r2
 8005524:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800552c:	2303      	movs	r3, #3
 800552e:	e01f      	b.n	8005570 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	79fa      	ldrb	r2, [r7, #7]
 8005562:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f001 fe2f 	bl	80071c8 <USBD_LL_Init>
 800556a:	4603      	mov	r3, r0
 800556c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800556e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800558c:	2303      	movs	r3, #3
 800558e:	e025      	b.n	80055dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	32ae      	adds	r2, #174	; 0xae
 80055a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00f      	beq.n	80055cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	32ae      	adds	r2, #174	; 0xae
 80055b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	f107 020e 	add.w	r2, r7, #14
 80055c0:	4610      	mov	r0, r2
 80055c2:	4798      	blx	r3
 80055c4:	4602      	mov	r2, r0
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f001 fe37 	bl	8007260 <USBD_LL_Start>
 80055f2:	4603      	mov	r3, r0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005604:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005606:	4618      	mov	r0, r3
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b084      	sub	sp, #16
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	460b      	mov	r3, r1
 800561c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005628:	2b00      	cmp	r3, #0
 800562a:	d009      	beq.n	8005640 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	78fa      	ldrb	r2, [r7, #3]
 8005636:	4611      	mov	r1, r2
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	4798      	blx	r3
 800563c:	4603      	mov	r3, r0
 800563e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005640:	7bfb      	ldrb	r3, [r7, #15]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	460b      	mov	r3, r1
 8005654:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	78fa      	ldrb	r2, [r7, #3]
 8005664:	4611      	mov	r1, r2
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	4798      	blx	r3
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005670:	2303      	movs	r3, #3
 8005672:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b084      	sub	sp, #16
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	4618      	mov	r0, r3
 8005692:	f001 f908 	bl	80068a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80056a4:	461a      	mov	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056b2:	f003 031f 	and.w	r3, r3, #31
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d01a      	beq.n	80056f0 <USBD_LL_SetupStage+0x72>
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d822      	bhi.n	8005704 <USBD_LL_SetupStage+0x86>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <USBD_LL_SetupStage+0x4a>
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d00a      	beq.n	80056dc <USBD_LL_SetupStage+0x5e>
 80056c6:	e01d      	b.n	8005704 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fb5f 	bl	8005d94 <USBD_StdDevReq>
 80056d6:	4603      	mov	r3, r0
 80056d8:	73fb      	strb	r3, [r7, #15]
      break;
 80056da:	e020      	b.n	800571e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056e2:	4619      	mov	r1, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fbc7 	bl	8005e78 <USBD_StdItfReq>
 80056ea:	4603      	mov	r3, r0
 80056ec:	73fb      	strb	r3, [r7, #15]
      break;
 80056ee:	e016      	b.n	800571e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fc29 	bl	8005f50 <USBD_StdEPReq>
 80056fe:	4603      	mov	r3, r0
 8005700:	73fb      	strb	r3, [r7, #15]
      break;
 8005702:	e00c      	b.n	800571e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800570a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800570e:	b2db      	uxtb	r3, r3
 8005710:	4619      	mov	r1, r3
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f001 fe04 	bl	8007320 <USBD_LL_StallEP>
 8005718:	4603      	mov	r3, r0
 800571a:	73fb      	strb	r3, [r7, #15]
      break;
 800571c:	bf00      	nop
  }

  return ret;
 800571e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	460b      	mov	r3, r1
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800573a:	7afb      	ldrb	r3, [r7, #11]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d16e      	bne.n	800581e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005746:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800574e:	2b03      	cmp	r3, #3
 8005750:	f040 8098 	bne.w	8005884 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	429a      	cmp	r2, r3
 800575e:	d913      	bls.n	8005788 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	1ad2      	subs	r2, r2, r3
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	4293      	cmp	r3, r2
 8005778:	bf28      	it	cs
 800577a:	4613      	movcs	r3, r2
 800577c:	461a      	mov	r2, r3
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f001 f984 	bl	8006a8e <USBD_CtlContinueRx>
 8005786:	e07d      	b.n	8005884 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	2b02      	cmp	r3, #2
 8005794:	d014      	beq.n	80057c0 <USBD_LL_DataOutStage+0x98>
 8005796:	2b02      	cmp	r3, #2
 8005798:	d81d      	bhi.n	80057d6 <USBD_LL_DataOutStage+0xae>
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <USBD_LL_DataOutStage+0x7c>
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d003      	beq.n	80057aa <USBD_LL_DataOutStage+0x82>
 80057a2:	e018      	b.n	80057d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	75bb      	strb	r3, [r7, #22]
            break;
 80057a8:	e018      	b.n	80057dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	4619      	mov	r1, r3
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 fa5e 	bl	8005c76 <USBD_CoreFindIF>
 80057ba:	4603      	mov	r3, r0
 80057bc:	75bb      	strb	r3, [r7, #22]
            break;
 80057be:	e00d      	b.n	80057dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	4619      	mov	r1, r3
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 fa60 	bl	8005c90 <USBD_CoreFindEP>
 80057d0:	4603      	mov	r3, r0
 80057d2:	75bb      	strb	r3, [r7, #22]
            break;
 80057d4:	e002      	b.n	80057dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	75bb      	strb	r3, [r7, #22]
            break;
 80057da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80057dc:	7dbb      	ldrb	r3, [r7, #22]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d119      	bne.n	8005816 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d113      	bne.n	8005816 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80057ee:	7dba      	ldrb	r2, [r7, #22]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	32ae      	adds	r2, #174	; 0xae
 80057f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80057fe:	7dba      	ldrb	r2, [r7, #22]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005806:	7dba      	ldrb	r2, [r7, #22]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	32ae      	adds	r2, #174	; 0xae
 800580c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f001 f94a 	bl	8006ab0 <USBD_CtlSendStatus>
 800581c:	e032      	b.n	8005884 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800581e:	7afb      	ldrb	r3, [r7, #11]
 8005820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005824:	b2db      	uxtb	r3, r3
 8005826:	4619      	mov	r1, r3
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 fa31 	bl	8005c90 <USBD_CoreFindEP>
 800582e:	4603      	mov	r3, r0
 8005830:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005832:	7dbb      	ldrb	r3, [r7, #22]
 8005834:	2bff      	cmp	r3, #255	; 0xff
 8005836:	d025      	beq.n	8005884 <USBD_LL_DataOutStage+0x15c>
 8005838:	7dbb      	ldrb	r3, [r7, #22]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d122      	bne.n	8005884 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b03      	cmp	r3, #3
 8005848:	d117      	bne.n	800587a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800584a:	7dba      	ldrb	r2, [r7, #22]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	32ae      	adds	r2, #174	; 0xae
 8005850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00f      	beq.n	800587a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800585a:	7dba      	ldrb	r2, [r7, #22]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005862:	7dba      	ldrb	r2, [r7, #22]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	32ae      	adds	r2, #174	; 0xae
 8005868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	7afa      	ldrb	r2, [r7, #11]
 8005870:	4611      	mov	r1, r2
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	4798      	blx	r3
 8005876:	4603      	mov	r3, r0
 8005878:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800587a:	7dfb      	ldrb	r3, [r7, #23]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005880:	7dfb      	ldrb	r3, [r7, #23]
 8005882:	e000      	b.n	8005886 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b086      	sub	sp, #24
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	460b      	mov	r3, r1
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800589c:	7afb      	ldrb	r3, [r7, #11]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d16f      	bne.n	8005982 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3314      	adds	r3, #20
 80058a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d15a      	bne.n	8005968 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d914      	bls.n	80058e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	1ad2      	subs	r2, r2, r3
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	461a      	mov	r2, r3
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f001 f8ac 	bl	8006a32 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058da:	2300      	movs	r3, #0
 80058dc:	2200      	movs	r2, #0
 80058de:	2100      	movs	r1, #0
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f001 fdc7 	bl	8007474 <USBD_LL_PrepareReceive>
 80058e6:	e03f      	b.n	8005968 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d11c      	bne.n	800592e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d316      	bcc.n	800592e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800590a:	429a      	cmp	r2, r3
 800590c:	d20f      	bcs.n	800592e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800590e:	2200      	movs	r2, #0
 8005910:	2100      	movs	r1, #0
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f001 f88d 	bl	8006a32 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005920:	2300      	movs	r3, #0
 8005922:	2200      	movs	r2, #0
 8005924:	2100      	movs	r1, #0
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f001 fda4 	bl	8007474 <USBD_LL_PrepareReceive>
 800592c:	e01c      	b.n	8005968 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b03      	cmp	r3, #3
 8005938:	d10f      	bne.n	800595a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d009      	beq.n	800595a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800595a:	2180      	movs	r1, #128	; 0x80
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f001 fcdf 	bl	8007320 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f001 f8b7 	bl	8006ad6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d03a      	beq.n	80059e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f7ff fe42 	bl	80055fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005980:	e032      	b.n	80059e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005982:	7afb      	ldrb	r3, [r7, #11]
 8005984:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005988:	b2db      	uxtb	r3, r3
 800598a:	4619      	mov	r1, r3
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f97f 	bl	8005c90 <USBD_CoreFindEP>
 8005992:	4603      	mov	r3, r0
 8005994:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005996:	7dfb      	ldrb	r3, [r7, #23]
 8005998:	2bff      	cmp	r3, #255	; 0xff
 800599a:	d025      	beq.n	80059e8 <USBD_LL_DataInStage+0x15a>
 800599c:	7dfb      	ldrb	r3, [r7, #23]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d122      	bne.n	80059e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d11c      	bne.n	80059e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80059ae:	7dfa      	ldrb	r2, [r7, #23]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	32ae      	adds	r2, #174	; 0xae
 80059b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d014      	beq.n	80059e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80059be:	7dfa      	ldrb	r2, [r7, #23]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80059c6:	7dfa      	ldrb	r2, [r7, #23]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	32ae      	adds	r2, #174	; 0xae
 80059cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	7afa      	ldrb	r2, [r7, #11]
 80059d4:	4611      	mov	r1, r2
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	4798      	blx	r3
 80059da:	4603      	mov	r3, r0
 80059dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80059de:	7dbb      	ldrb	r3, [r7, #22]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80059e4:	7dbb      	ldrb	r3, [r7, #22]
 80059e6:	e000      	b.n	80059ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d014      	beq.n	8005a58 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00e      	beq.n	8005a58 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6852      	ldr	r2, [r2, #4]
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	4611      	mov	r1, r2
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005a54:	2303      	movs	r3, #3
 8005a56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a58:	2340      	movs	r3, #64	; 0x40
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f001 fc19 	bl	8007296 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2240      	movs	r2, #64	; 0x40
 8005a70:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a74:	2340      	movs	r3, #64	; 0x40
 8005a76:	2200      	movs	r2, #0
 8005a78:	2180      	movs	r1, #128	; 0x80
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f001 fc0b 	bl	8007296 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2240      	movs	r2, #64	; 0x40
 8005a8a:	621a      	str	r2, [r3, #32]

  return ret;
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	78fa      	ldrb	r2, [r7, #3]
 8005aa6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2204      	movs	r2, #4
 8005ad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d106      	bne.n	8005b04 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	d110      	bne.n	8005b48 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00b      	beq.n	8005b48 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	32ae      	adds	r2, #174	; 0xae
 8005b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e01c      	b.n	8005bae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d115      	bne.n	8005bac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	32ae      	adds	r2, #174	; 0xae
 8005b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00b      	beq.n	8005bac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	32ae      	adds	r2, #174	; 0xae
 8005b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	78fa      	ldrb	r2, [r7, #3]
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b082      	sub	sp, #8
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	32ae      	adds	r2, #174	; 0xae
 8005bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e01c      	b.n	8005c12 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d115      	bne.n	8005c10 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	32ae      	adds	r2, #174	; 0xae
 8005bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00b      	beq.n	8005c10 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	32ae      	adds	r2, #174	; 0xae
 8005c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	78fa      	ldrb	r2, [r7, #3]
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00e      	beq.n	8005c6c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6852      	ldr	r2, [r2, #4]
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	4798      	blx	r3
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b083      	sub	sp, #12
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b086      	sub	sp, #24
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	885b      	ldrh	r3, [r3, #2]
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d920      	bls.n	8005d14 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005cda:	e013      	b.n	8005d04 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005cdc:	f107 030a 	add.w	r3, r7, #10
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	6978      	ldr	r0, [r7, #20]
 8005ce4:	f000 f81b 	bl	8005d1e <USBD_GetNextDesc>
 8005ce8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	785b      	ldrb	r3, [r3, #1]
 8005cee:	2b05      	cmp	r3, #5
 8005cf0:	d108      	bne.n	8005d04 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	789b      	ldrb	r3, [r3, #2]
 8005cfa:	78fa      	ldrb	r2, [r7, #3]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d008      	beq.n	8005d12 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005d00:	2300      	movs	r3, #0
 8005d02:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	885b      	ldrh	r3, [r3, #2]
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	897b      	ldrh	r3, [r7, #10]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d8e5      	bhi.n	8005cdc <USBD_GetEpDesc+0x32>
 8005d10:	e000      	b.n	8005d14 <USBD_GetEpDesc+0x6a>
          break;
 8005d12:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005d14:	693b      	ldr	r3, [r7, #16]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b085      	sub	sp, #20
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	881a      	ldrh	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	4413      	add	r3, r2
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4413      	add	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005d76:	8a3b      	ldrh	r3, [r7, #16]
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	b21a      	sxth	r2, r3
 8005d7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	b21b      	sxth	r3, r3
 8005d84:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005d86:	89fb      	ldrh	r3, [r7, #14]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	371c      	adds	r7, #28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005daa:	2b40      	cmp	r3, #64	; 0x40
 8005dac:	d005      	beq.n	8005dba <USBD_StdDevReq+0x26>
 8005dae:	2b40      	cmp	r3, #64	; 0x40
 8005db0:	d857      	bhi.n	8005e62 <USBD_StdDevReq+0xce>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00f      	beq.n	8005dd6 <USBD_StdDevReq+0x42>
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d153      	bne.n	8005e62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	32ae      	adds	r2, #174	; 0xae
 8005dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	4798      	blx	r3
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd4:	e04a      	b.n	8005e6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	785b      	ldrb	r3, [r3, #1]
 8005dda:	2b09      	cmp	r3, #9
 8005ddc:	d83b      	bhi.n	8005e56 <USBD_StdDevReq+0xc2>
 8005dde:	a201      	add	r2, pc, #4	; (adr r2, 8005de4 <USBD_StdDevReq+0x50>)
 8005de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de4:	08005e39 	.word	0x08005e39
 8005de8:	08005e4d 	.word	0x08005e4d
 8005dec:	08005e57 	.word	0x08005e57
 8005df0:	08005e43 	.word	0x08005e43
 8005df4:	08005e57 	.word	0x08005e57
 8005df8:	08005e17 	.word	0x08005e17
 8005dfc:	08005e0d 	.word	0x08005e0d
 8005e00:	08005e57 	.word	0x08005e57
 8005e04:	08005e2f 	.word	0x08005e2f
 8005e08:	08005e21 	.word	0x08005e21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fa3c 	bl	800628c <USBD_GetDescriptor>
          break;
 8005e14:	e024      	b.n	8005e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fba1 	bl	8006560 <USBD_SetAddress>
          break;
 8005e1e:	e01f      	b.n	8005e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fbe0 	bl	80065e8 <USBD_SetConfig>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	73fb      	strb	r3, [r7, #15]
          break;
 8005e2c:	e018      	b.n	8005e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e2e:	6839      	ldr	r1, [r7, #0]
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fc83 	bl	800673c <USBD_GetConfig>
          break;
 8005e36:	e013      	b.n	8005e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fcb4 	bl	80067a8 <USBD_GetStatus>
          break;
 8005e40:	e00e      	b.n	8005e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fce3 	bl	8006810 <USBD_SetFeature>
          break;
 8005e4a:	e009      	b.n	8005e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fd07 	bl	8006862 <USBD_ClrFeature>
          break;
 8005e54:	e004      	b.n	8005e60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fd5e 	bl	800691a <USBD_CtlError>
          break;
 8005e5e:	bf00      	nop
      }
      break;
 8005e60:	e004      	b.n	8005e6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005e62:	6839      	ldr	r1, [r7, #0]
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fd58 	bl	800691a <USBD_CtlError>
      break;
 8005e6a:	bf00      	nop
  }

  return ret;
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop

08005e78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e8e:	2b40      	cmp	r3, #64	; 0x40
 8005e90:	d005      	beq.n	8005e9e <USBD_StdItfReq+0x26>
 8005e92:	2b40      	cmp	r3, #64	; 0x40
 8005e94:	d852      	bhi.n	8005f3c <USBD_StdItfReq+0xc4>
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <USBD_StdItfReq+0x26>
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	d14e      	bne.n	8005f3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d840      	bhi.n	8005f2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	889b      	ldrh	r3, [r3, #4]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d836      	bhi.n	8005f24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	889b      	ldrh	r3, [r3, #4]
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff fed9 	bl	8005c76 <USBD_CoreFindIF>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ec8:	7bbb      	ldrb	r3, [r7, #14]
 8005eca:	2bff      	cmp	r3, #255	; 0xff
 8005ecc:	d01d      	beq.n	8005f0a <USBD_StdItfReq+0x92>
 8005ece:	7bbb      	ldrb	r3, [r7, #14]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d11a      	bne.n	8005f0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005ed4:	7bba      	ldrb	r2, [r7, #14]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	32ae      	adds	r2, #174	; 0xae
 8005eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00f      	beq.n	8005f04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005ee4:	7bba      	ldrb	r2, [r7, #14]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005eec:	7bba      	ldrb	r2, [r7, #14]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	32ae      	adds	r2, #174	; 0xae
 8005ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	4798      	blx	r3
 8005efe:	4603      	mov	r3, r0
 8005f00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f02:	e004      	b.n	8005f0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005f04:	2303      	movs	r3, #3
 8005f06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f08:	e001      	b.n	8005f0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	88db      	ldrh	r3, [r3, #6]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d110      	bne.n	8005f38 <USBD_StdItfReq+0xc0>
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10d      	bne.n	8005f38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fdc7 	bl	8006ab0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f22:	e009      	b.n	8005f38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fcf7 	bl	800691a <USBD_CtlError>
          break;
 8005f2c:	e004      	b.n	8005f38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fcf2 	bl	800691a <USBD_CtlError>
          break;
 8005f36:	e000      	b.n	8005f3a <USBD_StdItfReq+0xc2>
          break;
 8005f38:	bf00      	nop
      }
      break;
 8005f3a:	e004      	b.n	8005f46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fceb 	bl	800691a <USBD_CtlError>
      break;
 8005f44:	bf00      	nop
  }

  return ret;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	889b      	ldrh	r3, [r3, #4]
 8005f62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f6c:	2b40      	cmp	r3, #64	; 0x40
 8005f6e:	d007      	beq.n	8005f80 <USBD_StdEPReq+0x30>
 8005f70:	2b40      	cmp	r3, #64	; 0x40
 8005f72:	f200 817f 	bhi.w	8006274 <USBD_StdEPReq+0x324>
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d02a      	beq.n	8005fd0 <USBD_StdEPReq+0x80>
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	f040 817a 	bne.w	8006274 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005f80:	7bbb      	ldrb	r3, [r7, #14]
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff fe83 	bl	8005c90 <USBD_CoreFindEP>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f8e:	7b7b      	ldrb	r3, [r7, #13]
 8005f90:	2bff      	cmp	r3, #255	; 0xff
 8005f92:	f000 8174 	beq.w	800627e <USBD_StdEPReq+0x32e>
 8005f96:	7b7b      	ldrb	r3, [r7, #13]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f040 8170 	bne.w	800627e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005f9e:	7b7a      	ldrb	r2, [r7, #13]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005fa6:	7b7a      	ldrb	r2, [r7, #13]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	32ae      	adds	r2, #174	; 0xae
 8005fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 8163 	beq.w	800627e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005fb8:	7b7a      	ldrb	r2, [r7, #13]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	32ae      	adds	r2, #174	; 0xae
 8005fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	4798      	blx	r3
 8005fca:	4603      	mov	r3, r0
 8005fcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fce:	e156      	b.n	800627e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d008      	beq.n	8005fea <USBD_StdEPReq+0x9a>
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	f300 8145 	bgt.w	8006268 <USBD_StdEPReq+0x318>
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 809b 	beq.w	800611a <USBD_StdEPReq+0x1ca>
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d03c      	beq.n	8006062 <USBD_StdEPReq+0x112>
 8005fe8:	e13e      	b.n	8006268 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d002      	beq.n	8005ffc <USBD_StdEPReq+0xac>
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d016      	beq.n	8006028 <USBD_StdEPReq+0xd8>
 8005ffa:	e02c      	b.n	8006056 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ffc:	7bbb      	ldrb	r3, [r7, #14]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00d      	beq.n	800601e <USBD_StdEPReq+0xce>
 8006002:	7bbb      	ldrb	r3, [r7, #14]
 8006004:	2b80      	cmp	r3, #128	; 0x80
 8006006:	d00a      	beq.n	800601e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006008:	7bbb      	ldrb	r3, [r7, #14]
 800600a:	4619      	mov	r1, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f001 f987 	bl	8007320 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006012:	2180      	movs	r1, #128	; 0x80
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f001 f983 	bl	8007320 <USBD_LL_StallEP>
 800601a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800601c:	e020      	b.n	8006060 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800601e:	6839      	ldr	r1, [r7, #0]
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fc7a 	bl	800691a <USBD_CtlError>
              break;
 8006026:	e01b      	b.n	8006060 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	885b      	ldrh	r3, [r3, #2]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10e      	bne.n	800604e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00b      	beq.n	800604e <USBD_StdEPReq+0xfe>
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	2b80      	cmp	r3, #128	; 0x80
 800603a:	d008      	beq.n	800604e <USBD_StdEPReq+0xfe>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	88db      	ldrh	r3, [r3, #6]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d104      	bne.n	800604e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006044:	7bbb      	ldrb	r3, [r7, #14]
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 f969 	bl	8007320 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fd2e 	bl	8006ab0 <USBD_CtlSendStatus>

              break;
 8006054:	e004      	b.n	8006060 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fc5e 	bl	800691a <USBD_CtlError>
              break;
 800605e:	bf00      	nop
          }
          break;
 8006060:	e107      	b.n	8006272 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d002      	beq.n	8006074 <USBD_StdEPReq+0x124>
 800606e:	2b03      	cmp	r3, #3
 8006070:	d016      	beq.n	80060a0 <USBD_StdEPReq+0x150>
 8006072:	e04b      	b.n	800610c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00d      	beq.n	8006096 <USBD_StdEPReq+0x146>
 800607a:	7bbb      	ldrb	r3, [r7, #14]
 800607c:	2b80      	cmp	r3, #128	; 0x80
 800607e:	d00a      	beq.n	8006096 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006080:	7bbb      	ldrb	r3, [r7, #14]
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 f94b 	bl	8007320 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800608a:	2180      	movs	r1, #128	; 0x80
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f001 f947 	bl	8007320 <USBD_LL_StallEP>
 8006092:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006094:	e040      	b.n	8006118 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006096:	6839      	ldr	r1, [r7, #0]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fc3e 	bl	800691a <USBD_CtlError>
              break;
 800609e:	e03b      	b.n	8006118 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	885b      	ldrh	r3, [r3, #2]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d136      	bne.n	8006116 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80060a8:	7bbb      	ldrb	r3, [r7, #14]
 80060aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d004      	beq.n	80060bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80060b2:	7bbb      	ldrb	r3, [r7, #14]
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f001 f951 	bl	800735e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fcf7 	bl	8006ab0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80060c2:	7bbb      	ldrb	r3, [r7, #14]
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff fde2 	bl	8005c90 <USBD_CoreFindEP>
 80060cc:	4603      	mov	r3, r0
 80060ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060d0:	7b7b      	ldrb	r3, [r7, #13]
 80060d2:	2bff      	cmp	r3, #255	; 0xff
 80060d4:	d01f      	beq.n	8006116 <USBD_StdEPReq+0x1c6>
 80060d6:	7b7b      	ldrb	r3, [r7, #13]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d11c      	bne.n	8006116 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80060dc:	7b7a      	ldrb	r2, [r7, #13]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80060e4:	7b7a      	ldrb	r2, [r7, #13]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	32ae      	adds	r2, #174	; 0xae
 80060ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d010      	beq.n	8006116 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80060f4:	7b7a      	ldrb	r2, [r7, #13]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	32ae      	adds	r2, #174	; 0xae
 80060fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	4798      	blx	r3
 8006106:	4603      	mov	r3, r0
 8006108:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800610a:	e004      	b.n	8006116 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fc03 	bl	800691a <USBD_CtlError>
              break;
 8006114:	e000      	b.n	8006118 <USBD_StdEPReq+0x1c8>
              break;
 8006116:	bf00      	nop
          }
          break;
 8006118:	e0ab      	b.n	8006272 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d002      	beq.n	800612c <USBD_StdEPReq+0x1dc>
 8006126:	2b03      	cmp	r3, #3
 8006128:	d032      	beq.n	8006190 <USBD_StdEPReq+0x240>
 800612a:	e097      	b.n	800625c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800612c:	7bbb      	ldrb	r3, [r7, #14]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d007      	beq.n	8006142 <USBD_StdEPReq+0x1f2>
 8006132:	7bbb      	ldrb	r3, [r7, #14]
 8006134:	2b80      	cmp	r3, #128	; 0x80
 8006136:	d004      	beq.n	8006142 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fbed 	bl	800691a <USBD_CtlError>
                break;
 8006140:	e091      	b.n	8006266 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006142:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006146:	2b00      	cmp	r3, #0
 8006148:	da0b      	bge.n	8006162 <USBD_StdEPReq+0x212>
 800614a:	7bbb      	ldrb	r3, [r7, #14]
 800614c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	3310      	adds	r3, #16
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4413      	add	r3, r2
 800615e:	3304      	adds	r3, #4
 8006160:	e00b      	b.n	800617a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006162:	7bbb      	ldrb	r3, [r7, #14]
 8006164:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	4413      	add	r3, r2
 8006178:	3304      	adds	r3, #4
 800617a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2202      	movs	r2, #2
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fc37 	bl	80069fc <USBD_CtlSendData>
              break;
 800618e:	e06a      	b.n	8006266 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006194:	2b00      	cmp	r3, #0
 8006196:	da11      	bge.n	80061bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006198:	7bbb      	ldrb	r3, [r7, #14]
 800619a:	f003 020f 	and.w	r2, r3, #15
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	3324      	adds	r3, #36	; 0x24
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d117      	bne.n	80061e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fbb0 	bl	800691a <USBD_CtlError>
                  break;
 80061ba:	e054      	b.n	8006266 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80061bc:	7bbb      	ldrb	r3, [r7, #14]
 80061be:	f003 020f 	and.w	r2, r3, #15
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d104      	bne.n	80061e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fb9d 	bl	800691a <USBD_CtlError>
                  break;
 80061e0:	e041      	b.n	8006266 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da0b      	bge.n	8006202 <USBD_StdEPReq+0x2b2>
 80061ea:	7bbb      	ldrb	r3, [r7, #14]
 80061ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061f0:	4613      	mov	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	3310      	adds	r3, #16
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	4413      	add	r3, r2
 80061fe:	3304      	adds	r3, #4
 8006200:	e00b      	b.n	800621a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006202:	7bbb      	ldrb	r3, [r7, #14]
 8006204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006208:	4613      	mov	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	4413      	add	r3, r2
 8006218:	3304      	adds	r3, #4
 800621a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800621c:	7bbb      	ldrb	r3, [r7, #14]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <USBD_StdEPReq+0x2d8>
 8006222:	7bbb      	ldrb	r3, [r7, #14]
 8006224:	2b80      	cmp	r3, #128	; 0x80
 8006226:	d103      	bne.n	8006230 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	e00e      	b.n	800624e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006230:	7bbb      	ldrb	r3, [r7, #14]
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f001 f8b1 	bl	800739c <USBD_LL_IsStallEP>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2201      	movs	r2, #1
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e002      	b.n	800624e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2202      	movs	r2, #2
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fbd1 	bl	80069fc <USBD_CtlSendData>
              break;
 800625a:	e004      	b.n	8006266 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fb5b 	bl	800691a <USBD_CtlError>
              break;
 8006264:	bf00      	nop
          }
          break;
 8006266:	e004      	b.n	8006272 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fb55 	bl	800691a <USBD_CtlError>
          break;
 8006270:	bf00      	nop
      }
      break;
 8006272:	e005      	b.n	8006280 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fb4f 	bl	800691a <USBD_CtlError>
      break;
 800627c:	e000      	b.n	8006280 <USBD_StdEPReq+0x330>
      break;
 800627e:	bf00      	nop
  }

  return ret;
 8006280:	7bfb      	ldrb	r3, [r7, #15]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	885b      	ldrh	r3, [r3, #2]
 80062a6:	0a1b      	lsrs	r3, r3, #8
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	3b01      	subs	r3, #1
 80062ac:	2b06      	cmp	r3, #6
 80062ae:	f200 8128 	bhi.w	8006502 <USBD_GetDescriptor+0x276>
 80062b2:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <USBD_GetDescriptor+0x2c>)
 80062b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b8:	080062d5 	.word	0x080062d5
 80062bc:	080062ed 	.word	0x080062ed
 80062c0:	0800632d 	.word	0x0800632d
 80062c4:	08006503 	.word	0x08006503
 80062c8:	08006503 	.word	0x08006503
 80062cc:	080064a3 	.word	0x080064a3
 80062d0:	080064cf 	.word	0x080064cf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	7c12      	ldrb	r2, [r2, #16]
 80062e0:	f107 0108 	add.w	r1, r7, #8
 80062e4:	4610      	mov	r0, r2
 80062e6:	4798      	blx	r3
 80062e8:	60f8      	str	r0, [r7, #12]
      break;
 80062ea:	e112      	b.n	8006512 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	7c1b      	ldrb	r3, [r3, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10d      	bne.n	8006310 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fc:	f107 0208 	add.w	r2, r7, #8
 8006300:	4610      	mov	r0, r2
 8006302:	4798      	blx	r3
 8006304:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3301      	adds	r3, #1
 800630a:	2202      	movs	r2, #2
 800630c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800630e:	e100      	b.n	8006512 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	f107 0208 	add.w	r2, r7, #8
 800631c:	4610      	mov	r0, r2
 800631e:	4798      	blx	r3
 8006320:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3301      	adds	r3, #1
 8006326:	2202      	movs	r2, #2
 8006328:	701a      	strb	r2, [r3, #0]
      break;
 800632a:	e0f2      	b.n	8006512 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	885b      	ldrh	r3, [r3, #2]
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b05      	cmp	r3, #5
 8006334:	f200 80ac 	bhi.w	8006490 <USBD_GetDescriptor+0x204>
 8006338:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <USBD_GetDescriptor+0xb4>)
 800633a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633e:	bf00      	nop
 8006340:	08006359 	.word	0x08006359
 8006344:	0800638d 	.word	0x0800638d
 8006348:	080063c1 	.word	0x080063c1
 800634c:	080063f5 	.word	0x080063f5
 8006350:	08006429 	.word	0x08006429
 8006354:	0800645d 	.word	0x0800645d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00b      	beq.n	800637c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	7c12      	ldrb	r2, [r2, #16]
 8006370:	f107 0108 	add.w	r1, r7, #8
 8006374:	4610      	mov	r0, r2
 8006376:	4798      	blx	r3
 8006378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800637a:	e091      	b.n	80064a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 facb 	bl	800691a <USBD_CtlError>
            err++;
 8006384:	7afb      	ldrb	r3, [r7, #11]
 8006386:	3301      	adds	r3, #1
 8006388:	72fb      	strb	r3, [r7, #11]
          break;
 800638a:	e089      	b.n	80064a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00b      	beq.n	80063b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	7c12      	ldrb	r2, [r2, #16]
 80063a4:	f107 0108 	add.w	r1, r7, #8
 80063a8:	4610      	mov	r0, r2
 80063aa:	4798      	blx	r3
 80063ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063ae:	e077      	b.n	80064a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fab1 	bl	800691a <USBD_CtlError>
            err++;
 80063b8:	7afb      	ldrb	r3, [r7, #11]
 80063ba:	3301      	adds	r3, #1
 80063bc:	72fb      	strb	r3, [r7, #11]
          break;
 80063be:	e06f      	b.n	80064a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00b      	beq.n	80063e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	7c12      	ldrb	r2, [r2, #16]
 80063d8:	f107 0108 	add.w	r1, r7, #8
 80063dc:	4610      	mov	r0, r2
 80063de:	4798      	blx	r3
 80063e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063e2:	e05d      	b.n	80064a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fa97 	bl	800691a <USBD_CtlError>
            err++;
 80063ec:	7afb      	ldrb	r3, [r7, #11]
 80063ee:	3301      	adds	r3, #1
 80063f0:	72fb      	strb	r3, [r7, #11]
          break;
 80063f2:	e055      	b.n	80064a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00b      	beq.n	8006418 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	7c12      	ldrb	r2, [r2, #16]
 800640c:	f107 0108 	add.w	r1, r7, #8
 8006410:	4610      	mov	r0, r2
 8006412:	4798      	blx	r3
 8006414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006416:	e043      	b.n	80064a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fa7d 	bl	800691a <USBD_CtlError>
            err++;
 8006420:	7afb      	ldrb	r3, [r7, #11]
 8006422:	3301      	adds	r3, #1
 8006424:	72fb      	strb	r3, [r7, #11]
          break;
 8006426:	e03b      	b.n	80064a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00b      	beq.n	800644c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	7c12      	ldrb	r2, [r2, #16]
 8006440:	f107 0108 	add.w	r1, r7, #8
 8006444:	4610      	mov	r0, r2
 8006446:	4798      	blx	r3
 8006448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800644a:	e029      	b.n	80064a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fa63 	bl	800691a <USBD_CtlError>
            err++;
 8006454:	7afb      	ldrb	r3, [r7, #11]
 8006456:	3301      	adds	r3, #1
 8006458:	72fb      	strb	r3, [r7, #11]
          break;
 800645a:	e021      	b.n	80064a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00b      	beq.n	8006480 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	7c12      	ldrb	r2, [r2, #16]
 8006474:	f107 0108 	add.w	r1, r7, #8
 8006478:	4610      	mov	r0, r2
 800647a:	4798      	blx	r3
 800647c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800647e:	e00f      	b.n	80064a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fa49 	bl	800691a <USBD_CtlError>
            err++;
 8006488:	7afb      	ldrb	r3, [r7, #11]
 800648a:	3301      	adds	r3, #1
 800648c:	72fb      	strb	r3, [r7, #11]
          break;
 800648e:	e007      	b.n	80064a0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fa41 	bl	800691a <USBD_CtlError>
          err++;
 8006498:	7afb      	ldrb	r3, [r7, #11]
 800649a:	3301      	adds	r3, #1
 800649c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800649e:	bf00      	nop
      }
      break;
 80064a0:	e037      	b.n	8006512 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	7c1b      	ldrb	r3, [r3, #16]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d109      	bne.n	80064be <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b2:	f107 0208 	add.w	r2, r7, #8
 80064b6:	4610      	mov	r0, r2
 80064b8:	4798      	blx	r3
 80064ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064bc:	e029      	b.n	8006512 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fa2a 	bl	800691a <USBD_CtlError>
        err++;
 80064c6:	7afb      	ldrb	r3, [r7, #11]
 80064c8:	3301      	adds	r3, #1
 80064ca:	72fb      	strb	r3, [r7, #11]
      break;
 80064cc:	e021      	b.n	8006512 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	7c1b      	ldrb	r3, [r3, #16]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10d      	bne.n	80064f2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064de:	f107 0208 	add.w	r2, r7, #8
 80064e2:	4610      	mov	r0, r2
 80064e4:	4798      	blx	r3
 80064e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3301      	adds	r3, #1
 80064ec:	2207      	movs	r2, #7
 80064ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064f0:	e00f      	b.n	8006512 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fa10 	bl	800691a <USBD_CtlError>
        err++;
 80064fa:	7afb      	ldrb	r3, [r7, #11]
 80064fc:	3301      	adds	r3, #1
 80064fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006500:	e007      	b.n	8006512 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006502:	6839      	ldr	r1, [r7, #0]
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fa08 	bl	800691a <USBD_CtlError>
      err++;
 800650a:	7afb      	ldrb	r3, [r7, #11]
 800650c:	3301      	adds	r3, #1
 800650e:	72fb      	strb	r3, [r7, #11]
      break;
 8006510:	bf00      	nop
  }

  if (err != 0U)
 8006512:	7afb      	ldrb	r3, [r7, #11]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d11e      	bne.n	8006556 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	88db      	ldrh	r3, [r3, #6]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d016      	beq.n	800654e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006520:	893b      	ldrh	r3, [r7, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00e      	beq.n	8006544 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	88da      	ldrh	r2, [r3, #6]
 800652a:	893b      	ldrh	r3, [r7, #8]
 800652c:	4293      	cmp	r3, r2
 800652e:	bf28      	it	cs
 8006530:	4613      	movcs	r3, r2
 8006532:	b29b      	uxth	r3, r3
 8006534:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006536:	893b      	ldrh	r3, [r7, #8]
 8006538:	461a      	mov	r2, r3
 800653a:	68f9      	ldr	r1, [r7, #12]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fa5d 	bl	80069fc <USBD_CtlSendData>
 8006542:	e009      	b.n	8006558 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f9e7 	bl	800691a <USBD_CtlError>
 800654c:	e004      	b.n	8006558 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 faae 	bl	8006ab0 <USBD_CtlSendStatus>
 8006554:	e000      	b.n	8006558 <USBD_GetDescriptor+0x2cc>
    return;
 8006556:	bf00      	nop
  }
}
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop

08006560 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	889b      	ldrh	r3, [r3, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d131      	bne.n	80065d6 <USBD_SetAddress+0x76>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	88db      	ldrh	r3, [r3, #6]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d12d      	bne.n	80065d6 <USBD_SetAddress+0x76>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	885b      	ldrh	r3, [r3, #2]
 800657e:	2b7f      	cmp	r3, #127	; 0x7f
 8006580:	d829      	bhi.n	80065d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	885b      	ldrh	r3, [r3, #2]
 8006586:	b2db      	uxtb	r3, r3
 8006588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800658c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b03      	cmp	r3, #3
 8006598:	d104      	bne.n	80065a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f9bc 	bl	800691a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a2:	e01d      	b.n	80065e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	7bfa      	ldrb	r2, [r7, #15]
 80065a8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 ff1f 	bl	80073f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fa7a 	bl	8006ab0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d004      	beq.n	80065cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2202      	movs	r2, #2
 80065c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ca:	e009      	b.n	80065e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d4:	e004      	b.n	80065e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f99e 	bl	800691a <USBD_CtlError>
  }
}
 80065de:	bf00      	nop
 80065e0:	bf00      	nop
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	885b      	ldrh	r3, [r3, #2]
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	4b4e      	ldr	r3, [pc, #312]	; (8006738 <USBD_SetConfig+0x150>)
 80065fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006600:	4b4d      	ldr	r3, [pc, #308]	; (8006738 <USBD_SetConfig+0x150>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d905      	bls.n	8006614 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f985 	bl	800691a <USBD_CtlError>
    return USBD_FAIL;
 8006610:	2303      	movs	r3, #3
 8006612:	e08c      	b.n	800672e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d002      	beq.n	8006626 <USBD_SetConfig+0x3e>
 8006620:	2b03      	cmp	r3, #3
 8006622:	d029      	beq.n	8006678 <USBD_SetConfig+0x90>
 8006624:	e075      	b.n	8006712 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006626:	4b44      	ldr	r3, [pc, #272]	; (8006738 <USBD_SetConfig+0x150>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d020      	beq.n	8006670 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800662e:	4b42      	ldr	r3, [pc, #264]	; (8006738 <USBD_SetConfig+0x150>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006638:	4b3f      	ldr	r3, [pc, #252]	; (8006738 <USBD_SetConfig+0x150>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	4619      	mov	r1, r3
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fe ffe7 	bl	8005612 <USBD_SetClassConfig>
 8006644:	4603      	mov	r3, r0
 8006646:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d008      	beq.n	8006660 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f962 	bl	800691a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2202      	movs	r2, #2
 800665a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800665e:	e065      	b.n	800672c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fa25 	bl	8006ab0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2203      	movs	r2, #3
 800666a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800666e:	e05d      	b.n	800672c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fa1d 	bl	8006ab0 <USBD_CtlSendStatus>
      break;
 8006676:	e059      	b.n	800672c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006678:	4b2f      	ldr	r3, [pc, #188]	; (8006738 <USBD_SetConfig+0x150>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d112      	bne.n	80066a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006688:	4b2b      	ldr	r3, [pc, #172]	; (8006738 <USBD_SetConfig+0x150>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006692:	4b29      	ldr	r3, [pc, #164]	; (8006738 <USBD_SetConfig+0x150>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7fe ffd6 	bl	800564a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fa06 	bl	8006ab0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80066a4:	e042      	b.n	800672c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80066a6:	4b24      	ldr	r3, [pc, #144]	; (8006738 <USBD_SetConfig+0x150>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d02a      	beq.n	800670a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	4619      	mov	r1, r3
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7fe ffc4 	bl	800564a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80066c2:	4b1d      	ldr	r3, [pc, #116]	; (8006738 <USBD_SetConfig+0x150>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066cc:	4b1a      	ldr	r3, [pc, #104]	; (8006738 <USBD_SetConfig+0x150>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7fe ff9d 	bl	8005612 <USBD_SetClassConfig>
 80066d8:	4603      	mov	r3, r0
 80066da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00f      	beq.n	8006702 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f918 	bl	800691a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	4619      	mov	r1, r3
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fe ffa9 	bl	800564a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006700:	e014      	b.n	800672c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f9d4 	bl	8006ab0 <USBD_CtlSendStatus>
      break;
 8006708:	e010      	b.n	800672c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f9d0 	bl	8006ab0 <USBD_CtlSendStatus>
      break;
 8006710:	e00c      	b.n	800672c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f900 	bl	800691a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800671a:	4b07      	ldr	r3, [pc, #28]	; (8006738 <USBD_SetConfig+0x150>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7fe ff92 	bl	800564a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006726:	2303      	movs	r3, #3
 8006728:	73fb      	strb	r3, [r7, #15]
      break;
 800672a:	bf00      	nop
  }

  return ret;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	200001ac 	.word	0x200001ac

0800673c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	88db      	ldrh	r3, [r3, #6]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d004      	beq.n	8006758 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f8e2 	bl	800691a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006756:	e023      	b.n	80067a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	dc02      	bgt.n	800676a <USBD_GetConfig+0x2e>
 8006764:	2b00      	cmp	r3, #0
 8006766:	dc03      	bgt.n	8006770 <USBD_GetConfig+0x34>
 8006768:	e015      	b.n	8006796 <USBD_GetConfig+0x5a>
 800676a:	2b03      	cmp	r3, #3
 800676c:	d00b      	beq.n	8006786 <USBD_GetConfig+0x4a>
 800676e:	e012      	b.n	8006796 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3308      	adds	r3, #8
 800677a:	2201      	movs	r2, #1
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f93c 	bl	80069fc <USBD_CtlSendData>
        break;
 8006784:	e00c      	b.n	80067a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	3304      	adds	r3, #4
 800678a:	2201      	movs	r2, #1
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f934 	bl	80069fc <USBD_CtlSendData>
        break;
 8006794:	e004      	b.n	80067a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f8be 	bl	800691a <USBD_CtlError>
        break;
 800679e:	bf00      	nop
}
 80067a0:	bf00      	nop
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	3b01      	subs	r3, #1
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d81e      	bhi.n	80067fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	88db      	ldrh	r3, [r3, #6]
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d004      	beq.n	80067d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f8a5 	bl	800691a <USBD_CtlError>
        break;
 80067d0:	e01a      	b.n	8006808 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d005      	beq.n	80067ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f043 0202 	orr.w	r2, r3, #2
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	330c      	adds	r3, #12
 80067f2:	2202      	movs	r2, #2
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f900 	bl	80069fc <USBD_CtlSendData>
      break;
 80067fc:	e004      	b.n	8006808 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f88a 	bl	800691a <USBD_CtlError>
      break;
 8006806:	bf00      	nop
  }
}
 8006808:	bf00      	nop
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	885b      	ldrh	r3, [r3, #2]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d107      	bne.n	8006832 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f940 	bl	8006ab0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006830:	e013      	b.n	800685a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	885b      	ldrh	r3, [r3, #2]
 8006836:	2b02      	cmp	r3, #2
 8006838:	d10b      	bne.n	8006852 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	889b      	ldrh	r3, [r3, #4]
 800683e:	0a1b      	lsrs	r3, r3, #8
 8006840:	b29b      	uxth	r3, r3
 8006842:	b2da      	uxtb	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f930 	bl	8006ab0 <USBD_CtlSendStatus>
}
 8006850:	e003      	b.n	800685a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f860 	bl	800691a <USBD_CtlError>
}
 800685a:	bf00      	nop
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006872:	b2db      	uxtb	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	2b02      	cmp	r3, #2
 8006878:	d80b      	bhi.n	8006892 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	885b      	ldrh	r3, [r3, #2]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d10c      	bne.n	800689c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f910 	bl	8006ab0 <USBD_CtlSendStatus>
      }
      break;
 8006890:	e004      	b.n	800689c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f840 	bl	800691a <USBD_CtlError>
      break;
 800689a:	e000      	b.n	800689e <USBD_ClrFeature+0x3c>
      break;
 800689c:	bf00      	nop
  }
}
 800689e:	bf00      	nop
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3301      	adds	r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	781a      	ldrb	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3301      	adds	r3, #1
 80068ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7ff fa41 	bl	8005d58 <SWAPBYTE>
 80068d6:	4603      	mov	r3, r0
 80068d8:	461a      	mov	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3301      	adds	r3, #1
 80068e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3301      	adds	r3, #1
 80068e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7ff fa34 	bl	8005d58 <SWAPBYTE>
 80068f0:	4603      	mov	r3, r0
 80068f2:	461a      	mov	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3301      	adds	r3, #1
 80068fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3301      	adds	r3, #1
 8006902:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f7ff fa27 	bl	8005d58 <SWAPBYTE>
 800690a:	4603      	mov	r3, r0
 800690c:	461a      	mov	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	80da      	strh	r2, [r3, #6]
}
 8006912:	bf00      	nop
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b082      	sub	sp, #8
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006924:	2180      	movs	r1, #128	; 0x80
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fcfa 	bl	8007320 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800692c:	2100      	movs	r1, #0
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fcf6 	bl	8007320 <USBD_LL_StallEP>
}
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d036      	beq.n	80069c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006956:	6938      	ldr	r0, [r7, #16]
 8006958:	f000 f836 	bl	80069c8 <USBD_GetLen>
 800695c:	4603      	mov	r3, r0
 800695e:	3301      	adds	r3, #1
 8006960:	b29b      	uxth	r3, r3
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800696a:	7dfb      	ldrb	r3, [r7, #23]
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	4413      	add	r3, r2
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	7812      	ldrb	r2, [r2, #0]
 8006974:	701a      	strb	r2, [r3, #0]
  idx++;
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	3301      	adds	r3, #1
 800697a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800697c:	7dfb      	ldrb	r3, [r7, #23]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	4413      	add	r3, r2
 8006982:	2203      	movs	r2, #3
 8006984:	701a      	strb	r2, [r3, #0]
  idx++;
 8006986:	7dfb      	ldrb	r3, [r7, #23]
 8006988:	3301      	adds	r3, #1
 800698a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800698c:	e013      	b.n	80069b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800698e:	7dfb      	ldrb	r3, [r7, #23]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	4413      	add	r3, r2
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	7812      	ldrb	r2, [r2, #0]
 8006998:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	3301      	adds	r3, #1
 800699e:	613b      	str	r3, [r7, #16]
    idx++;
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
 80069a2:	3301      	adds	r3, #1
 80069a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	4413      	add	r3, r2
 80069ac:	2200      	movs	r2, #0
 80069ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
 80069b2:	3301      	adds	r3, #1
 80069b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e7      	bne.n	800698e <USBD_GetString+0x52>
 80069be:	e000      	b.n	80069c2 <USBD_GetString+0x86>
    return;
 80069c0:	bf00      	nop
  }
}
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80069d8:	e005      	b.n	80069e6 <USBD_GetLen+0x1e>
  {
    len++;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	3301      	adds	r3, #1
 80069de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	3301      	adds	r3, #1
 80069e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1f5      	bne.n	80069da <USBD_GetLen+0x12>
  }

  return len;
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	2100      	movs	r1, #0
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 fd05 	bl	8007432 <USBD_LL_Transmit>

  return USBD_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	2100      	movs	r1, #0
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 fcf4 	bl	8007432 <USBD_LL_Transmit>

  return USBD_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2203      	movs	r2, #3
 8006a64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 fcf8 	bl	8007474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b084      	sub	sp, #16
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 fce7 	bl	8007474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2204      	movs	r2, #4
 8006abc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fcb3 	bl	8007432 <USBD_LL_Transmit>

  return USBD_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2205      	movs	r2, #5
 8006ae2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2200      	movs	r2, #0
 8006aea:	2100      	movs	r1, #0
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fcc1 	bl	8007474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b00:	2200      	movs	r2, #0
 8006b02:	4912      	ldr	r1, [pc, #72]	; (8006b4c <MX_USB_DEVICE_Init+0x50>)
 8006b04:	4812      	ldr	r0, [pc, #72]	; (8006b50 <MX_USB_DEVICE_Init+0x54>)
 8006b06:	f7fe fd07 	bl	8005518 <USBD_Init>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b10:	f7f9 fe9e 	bl	8000850 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006b14:	490f      	ldr	r1, [pc, #60]	; (8006b54 <MX_USB_DEVICE_Init+0x58>)
 8006b16:	480e      	ldr	r0, [pc, #56]	; (8006b50 <MX_USB_DEVICE_Init+0x54>)
 8006b18:	f7fe fd2e 	bl	8005578 <USBD_RegisterClass>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b22:	f7f9 fe95 	bl	8000850 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006b26:	490c      	ldr	r1, [pc, #48]	; (8006b58 <MX_USB_DEVICE_Init+0x5c>)
 8006b28:	4809      	ldr	r0, [pc, #36]	; (8006b50 <MX_USB_DEVICE_Init+0x54>)
 8006b2a:	f7fe fc1f 	bl	800536c <USBD_CDC_RegisterInterface>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006b34:	f7f9 fe8c 	bl	8000850 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b38:	4805      	ldr	r0, [pc, #20]	; (8006b50 <MX_USB_DEVICE_Init+0x54>)
 8006b3a:	f7fe fd53 	bl	80055e4 <USBD_Start>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006b44:	f7f9 fe84 	bl	8000850 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b48:	bf00      	nop
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	200000ac 	.word	0x200000ac
 8006b50:	200001b0 	.word	0x200001b0
 8006b54:	20000018 	.word	0x20000018
 8006b58:	20000098 	.word	0x20000098

08006b5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006b60:	2200      	movs	r2, #0
 8006b62:	4905      	ldr	r1, [pc, #20]	; (8006b78 <CDC_Init_FS+0x1c>)
 8006b64:	4805      	ldr	r0, [pc, #20]	; (8006b7c <CDC_Init_FS+0x20>)
 8006b66:	f7fe fc1b 	bl	80053a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006b6a:	4905      	ldr	r1, [pc, #20]	; (8006b80 <CDC_Init_FS+0x24>)
 8006b6c:	4803      	ldr	r0, [pc, #12]	; (8006b7c <CDC_Init_FS+0x20>)
 8006b6e:	f7fe fc39 	bl	80053e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006b72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	20000c8c 	.word	0x20000c8c
 8006b7c:	200001b0 	.word	0x200001b0
 8006b80:	2000048c 	.word	0x2000048c

08006b84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006b88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	6039      	str	r1, [r7, #0]
 8006b9e:	71fb      	strb	r3, [r7, #7]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	2b23      	cmp	r3, #35	; 0x23
 8006ba8:	d84a      	bhi.n	8006c40 <CDC_Control_FS+0xac>
 8006baa:	a201      	add	r2, pc, #4	; (adr r2, 8006bb0 <CDC_Control_FS+0x1c>)
 8006bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb0:	08006c41 	.word	0x08006c41
 8006bb4:	08006c41 	.word	0x08006c41
 8006bb8:	08006c41 	.word	0x08006c41
 8006bbc:	08006c41 	.word	0x08006c41
 8006bc0:	08006c41 	.word	0x08006c41
 8006bc4:	08006c41 	.word	0x08006c41
 8006bc8:	08006c41 	.word	0x08006c41
 8006bcc:	08006c41 	.word	0x08006c41
 8006bd0:	08006c41 	.word	0x08006c41
 8006bd4:	08006c41 	.word	0x08006c41
 8006bd8:	08006c41 	.word	0x08006c41
 8006bdc:	08006c41 	.word	0x08006c41
 8006be0:	08006c41 	.word	0x08006c41
 8006be4:	08006c41 	.word	0x08006c41
 8006be8:	08006c41 	.word	0x08006c41
 8006bec:	08006c41 	.word	0x08006c41
 8006bf0:	08006c41 	.word	0x08006c41
 8006bf4:	08006c41 	.word	0x08006c41
 8006bf8:	08006c41 	.word	0x08006c41
 8006bfc:	08006c41 	.word	0x08006c41
 8006c00:	08006c41 	.word	0x08006c41
 8006c04:	08006c41 	.word	0x08006c41
 8006c08:	08006c41 	.word	0x08006c41
 8006c0c:	08006c41 	.word	0x08006c41
 8006c10:	08006c41 	.word	0x08006c41
 8006c14:	08006c41 	.word	0x08006c41
 8006c18:	08006c41 	.word	0x08006c41
 8006c1c:	08006c41 	.word	0x08006c41
 8006c20:	08006c41 	.word	0x08006c41
 8006c24:	08006c41 	.word	0x08006c41
 8006c28:	08006c41 	.word	0x08006c41
 8006c2c:	08006c41 	.word	0x08006c41
 8006c30:	08006c41 	.word	0x08006c41
 8006c34:	08006c41 	.word	0x08006c41
 8006c38:	08006c41 	.word	0x08006c41
 8006c3c:	08006c41 	.word	0x08006c41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006c40:	bf00      	nop
  }

  return (USBD_OK);
 8006c42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006c5a:	6879      	ldr	r1, [r7, #4]
 8006c5c:	4810      	ldr	r0, [pc, #64]	; (8006ca0 <CDC_Receive_FS+0x50>)
 8006c5e:	f7fe fbc1 	bl	80053e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006c62:	480f      	ldr	r0, [pc, #60]	; (8006ca0 <CDC_Receive_FS+0x50>)
 8006c64:	f7fe fc22 	bl	80054ac <USBD_CDC_ReceivePacket>
  memset (externbuffer, '\0', 64);  // clear the buffer
 8006c68:	2240      	movs	r2, #64	; 0x40
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	480d      	ldr	r0, [pc, #52]	; (8006ca4 <CDC_Receive_FS+0x54>)
 8006c6e:	f000 fcab 	bl	80075c8 <memset>
    //uint8_t len = (uint8_t)*Len;
    memcpy(externbuffer, Buf, *Len);  // copy the data to the buffer
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	6879      	ldr	r1, [r7, #4]
 8006c7a:	480a      	ldr	r0, [pc, #40]	; (8006ca4 <CDC_Receive_FS+0x54>)
 8006c7c:	f000 fc96 	bl	80075ac <memcpy>
    memset(Buf, '\0', *Len);   // clear the Buf also
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	461a      	mov	r2, r3
 8006c86:	2100      	movs	r1, #0
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fc9d 	bl	80075c8 <memset>
     flag=1;
 8006c8e:	4b06      	ldr	r3, [pc, #24]	; (8006ca8 <CDC_Receive_FS+0x58>)
 8006c90:	2201      	movs	r2, #1
 8006c92:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 8006c94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	200001b0 	.word	0x200001b0
 8006ca4:	20000118 	.word	0x20000118
 8006ca8:	20000158 	.word	0x20000158

08006cac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006cbc:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <CDC_Transmit_FS+0x48>)
 8006cbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cc2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e00b      	b.n	8006cea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006cd2:	887b      	ldrh	r3, [r7, #2]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	4806      	ldr	r0, [pc, #24]	; (8006cf4 <CDC_Transmit_FS+0x48>)
 8006cda:	f7fe fb61 	bl	80053a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006cde:	4805      	ldr	r0, [pc, #20]	; (8006cf4 <CDC_Transmit_FS+0x48>)
 8006ce0:	f7fe fb9e 	bl	8005420 <USBD_CDC_TransmitPacket>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	200001b0 	.word	0x200001b0

08006cf8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	4613      	mov	r3, r2
 8006d04:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	371c      	adds	r7, #28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
	...

08006d1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	6039      	str	r1, [r7, #0]
 8006d26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2212      	movs	r2, #18
 8006d2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006d2e:	4b03      	ldr	r3, [pc, #12]	; (8006d3c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	200000c8 	.word	0x200000c8

08006d40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	4603      	mov	r3, r0
 8006d48:	6039      	str	r1, [r7, #0]
 8006d4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2204      	movs	r2, #4
 8006d50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d52:	4b03      	ldr	r3, [pc, #12]	; (8006d60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	200000dc 	.word	0x200000dc

08006d64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	6039      	str	r1, [r7, #0]
 8006d6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d105      	bne.n	8006d82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	4907      	ldr	r1, [pc, #28]	; (8006d98 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d7a:	4808      	ldr	r0, [pc, #32]	; (8006d9c <USBD_FS_ProductStrDescriptor+0x38>)
 8006d7c:	f7ff fdde 	bl	800693c <USBD_GetString>
 8006d80:	e004      	b.n	8006d8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	4904      	ldr	r1, [pc, #16]	; (8006d98 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d86:	4805      	ldr	r0, [pc, #20]	; (8006d9c <USBD_FS_ProductStrDescriptor+0x38>)
 8006d88:	f7ff fdd8 	bl	800693c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d8c:	4b02      	ldr	r3, [pc, #8]	; (8006d98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	2000148c 	.word	0x2000148c
 8006d9c:	08007620 	.word	0x08007620

08006da0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	6039      	str	r1, [r7, #0]
 8006daa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	4904      	ldr	r1, [pc, #16]	; (8006dc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006db0:	4804      	ldr	r0, [pc, #16]	; (8006dc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006db2:	f7ff fdc3 	bl	800693c <USBD_GetString>
  return USBD_StrDesc;
 8006db6:	4b02      	ldr	r3, [pc, #8]	; (8006dc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	2000148c 	.word	0x2000148c
 8006dc4:	08007638 	.word	0x08007638

08006dc8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	6039      	str	r1, [r7, #0]
 8006dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	221a      	movs	r2, #26
 8006dd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006dda:	f000 f843 	bl	8006e64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006dde:	4b02      	ldr	r3, [pc, #8]	; (8006de8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	200000e0 	.word	0x200000e0

08006dec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	4603      	mov	r3, r0
 8006df4:	6039      	str	r1, [r7, #0]
 8006df6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006df8:	79fb      	ldrb	r3, [r7, #7]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d105      	bne.n	8006e0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	4907      	ldr	r1, [pc, #28]	; (8006e20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e02:	4808      	ldr	r0, [pc, #32]	; (8006e24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e04:	f7ff fd9a 	bl	800693c <USBD_GetString>
 8006e08:	e004      	b.n	8006e14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	4904      	ldr	r1, [pc, #16]	; (8006e20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e0e:	4805      	ldr	r0, [pc, #20]	; (8006e24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e10:	f7ff fd94 	bl	800693c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e14:	4b02      	ldr	r3, [pc, #8]	; (8006e20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	2000148c 	.word	0x2000148c
 8006e24:	0800764c 	.word	0x0800764c

08006e28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	4603      	mov	r3, r0
 8006e30:	6039      	str	r1, [r7, #0]
 8006e32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e34:	79fb      	ldrb	r3, [r7, #7]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d105      	bne.n	8006e46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	4907      	ldr	r1, [pc, #28]	; (8006e5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e3e:	4808      	ldr	r0, [pc, #32]	; (8006e60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e40:	f7ff fd7c 	bl	800693c <USBD_GetString>
 8006e44:	e004      	b.n	8006e50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	4904      	ldr	r1, [pc, #16]	; (8006e5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e4a:	4805      	ldr	r0, [pc, #20]	; (8006e60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e4c:	f7ff fd76 	bl	800693c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e50:	4b02      	ldr	r3, [pc, #8]	; (8006e5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	2000148c 	.word	0x2000148c
 8006e60:	08007658 	.word	0x08007658

08006e64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e6a:	4b0f      	ldr	r3, [pc, #60]	; (8006ea8 <Get_SerialNum+0x44>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e70:	4b0e      	ldr	r3, [pc, #56]	; (8006eac <Get_SerialNum+0x48>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e76:	4b0e      	ldr	r3, [pc, #56]	; (8006eb0 <Get_SerialNum+0x4c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4413      	add	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d009      	beq.n	8006e9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e8a:	2208      	movs	r2, #8
 8006e8c:	4909      	ldr	r1, [pc, #36]	; (8006eb4 <Get_SerialNum+0x50>)
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 f814 	bl	8006ebc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e94:	2204      	movs	r2, #4
 8006e96:	4908      	ldr	r1, [pc, #32]	; (8006eb8 <Get_SerialNum+0x54>)
 8006e98:	68b8      	ldr	r0, [r7, #8]
 8006e9a:	f000 f80f 	bl	8006ebc <IntToUnicode>
  }
}
 8006e9e:	bf00      	nop
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	1fff7a10 	.word	0x1fff7a10
 8006eac:	1fff7a14 	.word	0x1fff7a14
 8006eb0:	1fff7a18 	.word	0x1fff7a18
 8006eb4:	200000e2 	.word	0x200000e2
 8006eb8:	200000f2 	.word	0x200000f2

08006ebc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006ece:	2300      	movs	r3, #0
 8006ed0:	75fb      	strb	r3, [r7, #23]
 8006ed2:	e027      	b.n	8006f24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	0f1b      	lsrs	r3, r3, #28
 8006ed8:	2b09      	cmp	r3, #9
 8006eda:	d80b      	bhi.n	8006ef4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	0f1b      	lsrs	r3, r3, #28
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	440b      	add	r3, r1
 8006eec:	3230      	adds	r2, #48	; 0x30
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	e00a      	b.n	8006f0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	0f1b      	lsrs	r3, r3, #28
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	4619      	mov	r1, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	440b      	add	r3, r1
 8006f04:	3237      	adds	r2, #55	; 0x37
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	011b      	lsls	r3, r3, #4
 8006f0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	3301      	adds	r3, #1
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	4413      	add	r3, r2
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
 8006f20:	3301      	adds	r3, #1
 8006f22:	75fb      	strb	r3, [r7, #23]
 8006f24:	7dfa      	ldrb	r2, [r7, #23]
 8006f26:	79fb      	ldrb	r3, [r7, #7]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d3d3      	bcc.n	8006ed4 <IntToUnicode+0x18>
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	bf00      	nop
 8006f30:	371c      	adds	r7, #28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
	...

08006f3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b08a      	sub	sp, #40	; 0x28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f44:	f107 0314 	add.w	r3, r7, #20
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	605a      	str	r2, [r3, #4]
 8006f4e:	609a      	str	r2, [r3, #8]
 8006f50:	60da      	str	r2, [r3, #12]
 8006f52:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f5c:	d13a      	bne.n	8006fd4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f5e:	2300      	movs	r3, #0
 8006f60:	613b      	str	r3, [r7, #16]
 8006f62:	4b1e      	ldr	r3, [pc, #120]	; (8006fdc <HAL_PCD_MspInit+0xa0>)
 8006f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f66:	4a1d      	ldr	r2, [pc, #116]	; (8006fdc <HAL_PCD_MspInit+0xa0>)
 8006f68:	f043 0301 	orr.w	r3, r3, #1
 8006f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f6e:	4b1b      	ldr	r3, [pc, #108]	; (8006fdc <HAL_PCD_MspInit+0xa0>)
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	613b      	str	r3, [r7, #16]
 8006f78:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006f7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f80:	2302      	movs	r3, #2
 8006f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f84:	2300      	movs	r3, #0
 8006f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f8c:	230a      	movs	r3, #10
 8006f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f90:	f107 0314 	add.w	r3, r7, #20
 8006f94:	4619      	mov	r1, r3
 8006f96:	4812      	ldr	r0, [pc, #72]	; (8006fe0 <HAL_PCD_MspInit+0xa4>)
 8006f98:	f7f9 feca 	bl	8000d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f9c:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <HAL_PCD_MspInit+0xa0>)
 8006f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa0:	4a0e      	ldr	r2, [pc, #56]	; (8006fdc <HAL_PCD_MspInit+0xa0>)
 8006fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa6:	6353      	str	r3, [r2, #52]	; 0x34
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <HAL_PCD_MspInit+0xa0>)
 8006fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb0:	4a0a      	ldr	r2, [pc, #40]	; (8006fdc <HAL_PCD_MspInit+0xa0>)
 8006fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fb6:	6453      	str	r3, [r2, #68]	; 0x44
 8006fb8:	4b08      	ldr	r3, [pc, #32]	; (8006fdc <HAL_PCD_MspInit+0xa0>)
 8006fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	2043      	movs	r0, #67	; 0x43
 8006fca:	f7f9 fe7a 	bl	8000cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006fce:	2043      	movs	r0, #67	; 0x43
 8006fd0:	f7f9 fe93 	bl	8000cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006fd4:	bf00      	nop
 8006fd6:	3728      	adds	r7, #40	; 0x28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	40023800 	.word	0x40023800
 8006fe0:	40020000 	.word	0x40020000

08006fe4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	f7fe fb3f 	bl	800567e <USBD_LL_SetupStage>
}
 8007000:	bf00      	nop
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	460b      	mov	r3, r1
 8007012:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800701a:	78fa      	ldrb	r2, [r7, #3]
 800701c:	6879      	ldr	r1, [r7, #4]
 800701e:	4613      	mov	r3, r2
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	440b      	add	r3, r1
 8007028:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	78fb      	ldrb	r3, [r7, #3]
 8007030:	4619      	mov	r1, r3
 8007032:	f7fe fb79 	bl	8005728 <USBD_LL_DataOutStage>
}
 8007036:	bf00      	nop
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b082      	sub	sp, #8
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007050:	78fa      	ldrb	r2, [r7, #3]
 8007052:	6879      	ldr	r1, [r7, #4]
 8007054:	4613      	mov	r3, r2
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	4413      	add	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	440b      	add	r3, r1
 800705e:	334c      	adds	r3, #76	; 0x4c
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	78fb      	ldrb	r3, [r7, #3]
 8007064:	4619      	mov	r1, r3
 8007066:	f7fe fc12 	bl	800588e <USBD_LL_DataInStage>
}
 800706a:	bf00      	nop
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b082      	sub	sp, #8
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007080:	4618      	mov	r0, r3
 8007082:	f7fe fd46 	bl	8005b12 <USBD_LL_SOF>
}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b084      	sub	sp, #16
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007096:	2301      	movs	r3, #1
 8007098:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d102      	bne.n	80070a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80070a2:	2300      	movs	r3, #0
 80070a4:	73fb      	strb	r3, [r7, #15]
 80070a6:	e008      	b.n	80070ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d102      	bne.n	80070b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80070b0:	2301      	movs	r3, #1
 80070b2:	73fb      	strb	r3, [r7, #15]
 80070b4:	e001      	b.n	80070ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80070b6:	f7f9 fbcb 	bl	8000850 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070c0:	7bfa      	ldrb	r2, [r7, #15]
 80070c2:	4611      	mov	r1, r2
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fe fce6 	bl	8005a96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fe fc8e 	bl	80059f2 <USBD_LL_Reset>
}
 80070d6:	bf00      	nop
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
	...

080070e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe fce1 	bl	8005ab6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	6812      	ldr	r2, [r2, #0]
 8007102:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007106:	f043 0301 	orr.w	r3, r3, #1
 800710a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007114:	4b04      	ldr	r3, [pc, #16]	; (8007128 <HAL_PCD_SuspendCallback+0x48>)
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	4a03      	ldr	r2, [pc, #12]	; (8007128 <HAL_PCD_SuspendCallback+0x48>)
 800711a:	f043 0306 	orr.w	r3, r3, #6
 800711e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007120:	bf00      	nop
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	e000ed00 	.word	0xe000ed00

0800712c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe fcd1 	bl	8005ae2 <USBD_LL_Resume>
}
 8007140:	bf00      	nop
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	460b      	mov	r3, r1
 8007152:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800715a:	78fa      	ldrb	r2, [r7, #3]
 800715c:	4611      	mov	r1, r2
 800715e:	4618      	mov	r0, r3
 8007160:	f7fe fd29 	bl	8005bb6 <USBD_LL_IsoOUTIncomplete>
}
 8007164:	bf00      	nop
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800717e:	78fa      	ldrb	r2, [r7, #3]
 8007180:	4611      	mov	r1, r2
 8007182:	4618      	mov	r0, r3
 8007184:	f7fe fce5 	bl	8005b52 <USBD_LL_IsoINIncomplete>
}
 8007188:	bf00      	nop
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe fd3b 	bl	8005c1a <USBD_LL_DevConnected>
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fe fd38 	bl	8005c30 <USBD_LL_DevDisconnected>
}
 80071c0:	bf00      	nop
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d13c      	bne.n	8007252 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80071d8:	4a20      	ldr	r2, [pc, #128]	; (800725c <USBD_LL_Init+0x94>)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a1e      	ldr	r2, [pc, #120]	; (800725c <USBD_LL_Init+0x94>)
 80071e4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80071e8:	4b1c      	ldr	r3, [pc, #112]	; (800725c <USBD_LL_Init+0x94>)
 80071ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80071ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80071f0:	4b1a      	ldr	r3, [pc, #104]	; (800725c <USBD_LL_Init+0x94>)
 80071f2:	2204      	movs	r2, #4
 80071f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80071f6:	4b19      	ldr	r3, [pc, #100]	; (800725c <USBD_LL_Init+0x94>)
 80071f8:	2202      	movs	r2, #2
 80071fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80071fc:	4b17      	ldr	r3, [pc, #92]	; (800725c <USBD_LL_Init+0x94>)
 80071fe:	2200      	movs	r2, #0
 8007200:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007202:	4b16      	ldr	r3, [pc, #88]	; (800725c <USBD_LL_Init+0x94>)
 8007204:	2202      	movs	r2, #2
 8007206:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007208:	4b14      	ldr	r3, [pc, #80]	; (800725c <USBD_LL_Init+0x94>)
 800720a:	2200      	movs	r2, #0
 800720c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800720e:	4b13      	ldr	r3, [pc, #76]	; (800725c <USBD_LL_Init+0x94>)
 8007210:	2200      	movs	r2, #0
 8007212:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007214:	4b11      	ldr	r3, [pc, #68]	; (800725c <USBD_LL_Init+0x94>)
 8007216:	2200      	movs	r2, #0
 8007218:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800721a:	4b10      	ldr	r3, [pc, #64]	; (800725c <USBD_LL_Init+0x94>)
 800721c:	2200      	movs	r2, #0
 800721e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007220:	4b0e      	ldr	r3, [pc, #56]	; (800725c <USBD_LL_Init+0x94>)
 8007222:	2200      	movs	r2, #0
 8007224:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007226:	480d      	ldr	r0, [pc, #52]	; (800725c <USBD_LL_Init+0x94>)
 8007228:	f7f9 ff68 	bl	80010fc <HAL_PCD_Init>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007232:	f7f9 fb0d 	bl	8000850 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007236:	2180      	movs	r1, #128	; 0x80
 8007238:	4808      	ldr	r0, [pc, #32]	; (800725c <USBD_LL_Init+0x94>)
 800723a:	f7fb f9c0 	bl	80025be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800723e:	2240      	movs	r2, #64	; 0x40
 8007240:	2100      	movs	r1, #0
 8007242:	4806      	ldr	r0, [pc, #24]	; (800725c <USBD_LL_Init+0x94>)
 8007244:	f7fb f974 	bl	8002530 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007248:	2280      	movs	r2, #128	; 0x80
 800724a:	2101      	movs	r1, #1
 800724c:	4803      	ldr	r0, [pc, #12]	; (800725c <USBD_LL_Init+0x94>)
 800724e:	f7fb f96f 	bl	8002530 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	2000168c 	.word	0x2000168c

08007260 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007276:	4618      	mov	r0, r3
 8007278:	f7fa f85d 	bl	8001336 <HAL_PCD_Start>
 800727c:	4603      	mov	r3, r0
 800727e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007280:	7bfb      	ldrb	r3, [r7, #15]
 8007282:	4618      	mov	r0, r3
 8007284:	f000 f942 	bl	800750c <USBD_Get_USB_Status>
 8007288:	4603      	mov	r3, r0
 800728a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800728c:	7bbb      	ldrb	r3, [r7, #14]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	4608      	mov	r0, r1
 80072a0:	4611      	mov	r1, r2
 80072a2:	461a      	mov	r2, r3
 80072a4:	4603      	mov	r3, r0
 80072a6:	70fb      	strb	r3, [r7, #3]
 80072a8:	460b      	mov	r3, r1
 80072aa:	70bb      	strb	r3, [r7, #2]
 80072ac:	4613      	mov	r3, r2
 80072ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072b0:	2300      	movs	r3, #0
 80072b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80072be:	78bb      	ldrb	r3, [r7, #2]
 80072c0:	883a      	ldrh	r2, [r7, #0]
 80072c2:	78f9      	ldrb	r1, [r7, #3]
 80072c4:	f7fa fd2e 	bl	8001d24 <HAL_PCD_EP_Open>
 80072c8:	4603      	mov	r3, r0
 80072ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 f91c 	bl	800750c <USBD_Get_USB_Status>
 80072d4:	4603      	mov	r3, r0
 80072d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b084      	sub	sp, #16
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	460b      	mov	r3, r1
 80072ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072ee:	2300      	movs	r3, #0
 80072f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072fc:	78fa      	ldrb	r2, [r7, #3]
 80072fe:	4611      	mov	r1, r2
 8007300:	4618      	mov	r0, r3
 8007302:	f7fa fd77 	bl	8001df4 <HAL_PCD_EP_Close>
 8007306:	4603      	mov	r3, r0
 8007308:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800730a:	7bfb      	ldrb	r3, [r7, #15]
 800730c:	4618      	mov	r0, r3
 800730e:	f000 f8fd 	bl	800750c <USBD_Get_USB_Status>
 8007312:	4603      	mov	r3, r0
 8007314:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007316:	7bbb      	ldrb	r3, [r7, #14]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007330:	2300      	movs	r3, #0
 8007332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800733a:	78fa      	ldrb	r2, [r7, #3]
 800733c:	4611      	mov	r1, r2
 800733e:	4618      	mov	r0, r3
 8007340:	f7fa fe4f 	bl	8001fe2 <HAL_PCD_EP_SetStall>
 8007344:	4603      	mov	r3, r0
 8007346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	4618      	mov	r0, r3
 800734c:	f000 f8de 	bl	800750c <USBD_Get_USB_Status>
 8007350:	4603      	mov	r3, r0
 8007352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007354:	7bbb      	ldrb	r3, [r7, #14]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	460b      	mov	r3, r1
 8007368:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007378:	78fa      	ldrb	r2, [r7, #3]
 800737a:	4611      	mov	r1, r2
 800737c:	4618      	mov	r0, r3
 800737e:	f7fa fe94 	bl	80020aa <HAL_PCD_EP_ClrStall>
 8007382:	4603      	mov	r3, r0
 8007384:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	4618      	mov	r0, r3
 800738a:	f000 f8bf 	bl	800750c <USBD_Get_USB_Status>
 800738e:	4603      	mov	r3, r0
 8007390:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007392:	7bbb      	ldrb	r3, [r7, #14]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80073b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	da0b      	bge.n	80073d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073be:	68f9      	ldr	r1, [r7, #12]
 80073c0:	4613      	mov	r3, r2
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	4413      	add	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	440b      	add	r3, r1
 80073ca:	333e      	adds	r3, #62	; 0x3e
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	e00b      	b.n	80073e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80073d0:	78fb      	ldrb	r3, [r7, #3]
 80073d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073d6:	68f9      	ldr	r1, [r7, #12]
 80073d8:	4613      	mov	r3, r2
 80073da:	00db      	lsls	r3, r3, #3
 80073dc:	4413      	add	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	440b      	add	r3, r1
 80073e2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80073e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	460b      	mov	r3, r1
 80073fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800740e:	78fa      	ldrb	r2, [r7, #3]
 8007410:	4611      	mov	r1, r2
 8007412:	4618      	mov	r0, r3
 8007414:	f7fa fc61 	bl	8001cda <HAL_PCD_SetAddress>
 8007418:	4603      	mov	r3, r0
 800741a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	4618      	mov	r0, r3
 8007420:	f000 f874 	bl	800750c <USBD_Get_USB_Status>
 8007424:	4603      	mov	r3, r0
 8007426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007428:	7bbb      	ldrb	r3, [r7, #14]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b086      	sub	sp, #24
 8007436:	af00      	add	r7, sp, #0
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	603b      	str	r3, [r7, #0]
 800743e:	460b      	mov	r3, r1
 8007440:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007450:	7af9      	ldrb	r1, [r7, #11]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	f7fa fd7a 	bl	8001f4e <HAL_PCD_EP_Transmit>
 800745a:	4603      	mov	r3, r0
 800745c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800745e:	7dfb      	ldrb	r3, [r7, #23]
 8007460:	4618      	mov	r0, r3
 8007462:	f000 f853 	bl	800750c <USBD_Get_USB_Status>
 8007466:	4603      	mov	r3, r0
 8007468:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800746a:	7dbb      	ldrb	r3, [r7, #22]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	607a      	str	r2, [r7, #4]
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	460b      	mov	r3, r1
 8007482:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007492:	7af9      	ldrb	r1, [r7, #11]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	f7fa fcf6 	bl	8001e88 <HAL_PCD_EP_Receive>
 800749c:	4603      	mov	r3, r0
 800749e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 f832 	bl	800750c <USBD_Get_USB_Status>
 80074a8:	4603      	mov	r3, r0
 80074aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80074ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3718      	adds	r7, #24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b082      	sub	sp, #8
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	460b      	mov	r3, r1
 80074c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074c8:	78fa      	ldrb	r2, [r7, #3]
 80074ca:	4611      	mov	r1, r2
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7fa fd26 	bl	8001f1e <HAL_PCD_EP_GetRxCount>
 80074d2:	4603      	mov	r3, r0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80074e4:	4b03      	ldr	r3, [pc, #12]	; (80074f4 <USBD_static_malloc+0x18>)
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	20001b98 	.word	0x20001b98

080074f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]

}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	4603      	mov	r3, r0
 8007514:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800751a:	79fb      	ldrb	r3, [r7, #7]
 800751c:	2b03      	cmp	r3, #3
 800751e:	d817      	bhi.n	8007550 <USBD_Get_USB_Status+0x44>
 8007520:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <USBD_Get_USB_Status+0x1c>)
 8007522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007526:	bf00      	nop
 8007528:	08007539 	.word	0x08007539
 800752c:	0800753f 	.word	0x0800753f
 8007530:	08007545 	.word	0x08007545
 8007534:	0800754b 	.word	0x0800754b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	73fb      	strb	r3, [r7, #15]
    break;
 800753c:	e00b      	b.n	8007556 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800753e:	2303      	movs	r3, #3
 8007540:	73fb      	strb	r3, [r7, #15]
    break;
 8007542:	e008      	b.n	8007556 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007544:	2301      	movs	r3, #1
 8007546:	73fb      	strb	r3, [r7, #15]
    break;
 8007548:	e005      	b.n	8007556 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800754a:	2303      	movs	r3, #3
 800754c:	73fb      	strb	r3, [r7, #15]
    break;
 800754e:	e002      	b.n	8007556 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007550:	2303      	movs	r3, #3
 8007552:	73fb      	strb	r3, [r7, #15]
    break;
 8007554:	bf00      	nop
  }
  return usb_status;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <__libc_init_array>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	4d0d      	ldr	r5, [pc, #52]	; (800759c <__libc_init_array+0x38>)
 8007568:	4c0d      	ldr	r4, [pc, #52]	; (80075a0 <__libc_init_array+0x3c>)
 800756a:	1b64      	subs	r4, r4, r5
 800756c:	10a4      	asrs	r4, r4, #2
 800756e:	2600      	movs	r6, #0
 8007570:	42a6      	cmp	r6, r4
 8007572:	d109      	bne.n	8007588 <__libc_init_array+0x24>
 8007574:	4d0b      	ldr	r5, [pc, #44]	; (80075a4 <__libc_init_array+0x40>)
 8007576:	4c0c      	ldr	r4, [pc, #48]	; (80075a8 <__libc_init_array+0x44>)
 8007578:	f000 f82e 	bl	80075d8 <_init>
 800757c:	1b64      	subs	r4, r4, r5
 800757e:	10a4      	asrs	r4, r4, #2
 8007580:	2600      	movs	r6, #0
 8007582:	42a6      	cmp	r6, r4
 8007584:	d105      	bne.n	8007592 <__libc_init_array+0x2e>
 8007586:	bd70      	pop	{r4, r5, r6, pc}
 8007588:	f855 3b04 	ldr.w	r3, [r5], #4
 800758c:	4798      	blx	r3
 800758e:	3601      	adds	r6, #1
 8007590:	e7ee      	b.n	8007570 <__libc_init_array+0xc>
 8007592:	f855 3b04 	ldr.w	r3, [r5], #4
 8007596:	4798      	blx	r3
 8007598:	3601      	adds	r6, #1
 800759a:	e7f2      	b.n	8007582 <__libc_init_array+0x1e>
 800759c:	08007680 	.word	0x08007680
 80075a0:	08007680 	.word	0x08007680
 80075a4:	08007680 	.word	0x08007680
 80075a8:	08007684 	.word	0x08007684

080075ac <memcpy>:
 80075ac:	440a      	add	r2, r1
 80075ae:	4291      	cmp	r1, r2
 80075b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80075b4:	d100      	bne.n	80075b8 <memcpy+0xc>
 80075b6:	4770      	bx	lr
 80075b8:	b510      	push	{r4, lr}
 80075ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075c2:	4291      	cmp	r1, r2
 80075c4:	d1f9      	bne.n	80075ba <memcpy+0xe>
 80075c6:	bd10      	pop	{r4, pc}

080075c8 <memset>:
 80075c8:	4402      	add	r2, r0
 80075ca:	4603      	mov	r3, r0
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d100      	bne.n	80075d2 <memset+0xa>
 80075d0:	4770      	bx	lr
 80075d2:	f803 1b01 	strb.w	r1, [r3], #1
 80075d6:	e7f9      	b.n	80075cc <memset+0x4>

080075d8 <_init>:
 80075d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075da:	bf00      	nop
 80075dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075de:	bc08      	pop	{r3}
 80075e0:	469e      	mov	lr, r3
 80075e2:	4770      	bx	lr

080075e4 <_fini>:
 80075e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e6:	bf00      	nop
 80075e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ea:	bc08      	pop	{r3}
 80075ec:	469e      	mov	lr, r3
 80075ee:	4770      	bx	lr
