
usbbuttoncountinclass2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800b938  0800b938  0001b938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd94  0800bd94  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd94  0800bd94  0001bd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd9c  0800bd9c  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd9c  0800bd9c  0001bd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bda0  0800bda0  0001bda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800bda4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202cc  2**0
                  CONTENTS
 10 .bss          00001d74  200002cc  200002cc  000202cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002040  20002040  000202cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001439b  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031b9  00000000  00000000  00034697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00037850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001018  00000000  00000000  000389e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002476a  00000000  00000000  000399f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014fd5  00000000  00000000  0005e162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cde0d  00000000  00000000  00073137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140f44  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005aa8  00000000  00000000  00140f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002cc 	.word	0x200002cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b920 	.word	0x0800b920

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d0 	.word	0x200002d0
 80001cc:	0800b920 	.word	0x0800b920

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	datastate=dataforward;
 8000ed2:	4b3a      	ldr	r3, [pc, #232]	; (8000fbc <main+0xf0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed8:	f000 fcd6 	bl	8001888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000edc:	f000 f884 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee0:	f000 f9f4 	bl	80012cc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000ee4:	f007 f8d4 	bl	8008090 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000ee8:	f000 f8e8 	bl	80010bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eec:	f000 f934 	bl	8001158 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000ef0:	f000 f980 	bl	80011f4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000ef4:	f000 f9b4 	bl	8001260 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  CDC_Transmit_FS("Hello\n",strlen("Hello\n"));
 8000ef8:	2106      	movs	r1, #6
 8000efa:	4831      	ldr	r0, [pc, #196]	; (8000fc0 <main+0xf4>)
 8000efc:	f007 f9a0 	bl	8008240 <CDC_Transmit_FS>
 		  HAL_Delay(1000);
 8000f00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f04:	f000 fd32 	bl	800196c <HAL_Delay>
 		 HAL_TIM_Base_Start_IT(&htim7) ;
 8000f08:	482e      	ldr	r0, [pc, #184]	; (8000fc4 <main+0xf8>)
 8000f0a:	f003 f84b 	bl	8003fa4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timer2count=TIM2->CNT;
 8000f0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	4a2c      	ldr	r2, [pc, #176]	; (8000fc8 <main+0xfc>)
 8000f16:	6013      	str	r3, [r2, #0]
	  if (flag==2)
 8000f18:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <main+0x100>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d121      	bne.n	8000f64 <main+0x98>
	  {
		  uint8_t buffer[20]="";
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
		 	 sprintf(buffer,"%u,%u\n",(unsigned int) TIM2->CNT,(unsigned int) TIM6->CNT);
 8000f32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f38:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <main+0x104>)
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	1d38      	adds	r0, r7, #4
 8000f3e:	4925      	ldr	r1, [pc, #148]	; (8000fd4 <main+0x108>)
 8000f40:	f008 fa76 	bl	8009430 <siprintf>
		 	 result=CDC_Transmit_FS(buffer,(uint16_t)strlen(buffer));
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff f94c 	bl	80001e4 <strlen>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	461a      	mov	r2, r3
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f007 f972 	bl	8008240 <CDC_Transmit_FS>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <main+0x10c>)
 8000f62:	701a      	strb	r2, [r3, #0]

	  }
	  if (flag==0)
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <main+0x100>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d10b      	bne.n	8000f84 <main+0xb8>
	  {
		  HAL_GPIO_WritePin(dataled_GPIO_Port, dataled_Pin, 1);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f72:	481a      	ldr	r0, [pc, #104]	; (8000fdc <main+0x110>)
 8000f74:	f001 f816 	bl	8001fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(infereled_GPIO_Port, infereled_Pin, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7e:	4817      	ldr	r0, [pc, #92]	; (8000fdc <main+0x110>)
 8000f80:	f001 f810 	bl	8001fa4 <HAL_GPIO_WritePin>

	  }
	  if (flag==1)
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <main+0x100>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d10b      	bne.n	8000fa4 <main+0xd8>
		  {
			  HAL_GPIO_WritePin(dataled_GPIO_Port, dataled_Pin, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f92:	4812      	ldr	r0, [pc, #72]	; (8000fdc <main+0x110>)
 8000f94:	f001 f806 	bl	8001fa4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(infereled_GPIO_Port, infereled_Pin, 1);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9e:	480f      	ldr	r0, [pc, #60]	; (8000fdc <main+0x110>)
 8000fa0:	f001 f800 	bl	8001fa4 <HAL_GPIO_WritePin>

		  }
	  if (state==idle)
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <main+0x114>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1b0      	bne.n	8000f0e <main+0x42>
	  {   TIM6->CNT=0;
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <main+0x104>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
		  HAL_TIM_Base_Start(&htim6) ;
 8000fb2:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <main+0x118>)
 8000fb4:	f002 ff66 	bl	8003e84 <HAL_TIM_Base_Start>
	  timer2count=TIM2->CNT;
 8000fb8:	e7a9      	b.n	8000f0e <main+0x42>
 8000fba:	bf00      	nop
 8000fbc:	200002e9 	.word	0x200002e9
 8000fc0:	0800b938 	.word	0x0800b938
 8000fc4:	200003d4 	.word	0x200003d4
 8000fc8:	200002f4 	.word	0x200002f4
 8000fcc:	200002eb 	.word	0x200002eb
 8000fd0:	40001000 	.word	0x40001000
 8000fd4:	0800b940 	.word	0x0800b940
 8000fd8:	200002ea 	.word	0x200002ea
 8000fdc:	40020c00 	.word	0x40020c00
 8000fe0:	200002e8 	.word	0x200002e8
 8000fe4:	2000038c 	.word	0x2000038c

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b094      	sub	sp, #80	; 0x50
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	2230      	movs	r2, #48	; 0x30
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f007 fda8 	bl	8008b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <SystemClock_Config+0xcc>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <SystemClock_Config+0xcc>)
 8001016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101a:	6413      	str	r3, [r2, #64]	; 0x40
 800101c:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <SystemClock_Config+0xcc>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <SystemClock_Config+0xd0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <SystemClock_Config+0xd0>)
 8001032:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <SystemClock_Config+0xd0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001044:	2301      	movs	r3, #1
 8001046:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001052:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001058:	2304      	movs	r3, #4
 800105a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800105c:	23a8      	movs	r3, #168	; 0xa8
 800105e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001060:	2302      	movs	r3, #2
 8001062:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001064:	2307      	movs	r3, #7
 8001066:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001068:	f107 0320 	add.w	r3, r7, #32
 800106c:	4618      	mov	r0, r3
 800106e:	f002 fa49 	bl	8003504 <HAL_RCC_OscConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001078:	f000 fa16 	bl	80014a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	230f      	movs	r3, #15
 800107e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001080:	2302      	movs	r3, #2
 8001082:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001088:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800108c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800108e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001092:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2105      	movs	r1, #5
 800109a:	4618      	mov	r0, r3
 800109c:	f002 fcaa 	bl	80039f4 <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010a6:	f000 f9ff 	bl	80014a8 <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3750      	adds	r7, #80	; 0x50
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40007000 	.word	0x40007000

080010bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d0:	463b      	mov	r3, r7
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <MX_TIM2_Init+0x98>)
 80010da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000-1;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_TIM2_Init+0x98>)
 80010e2:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80010e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_TIM2_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_TIM2_Init+0x98>)
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_TIM2_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_TIM2_Init+0x98>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001102:	4814      	ldr	r0, [pc, #80]	; (8001154 <MX_TIM2_Init+0x98>)
 8001104:	f002 fe6e 	bl	8003de4 <HAL_TIM_Base_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800110e:	f000 f9cb 	bl	80014a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001116:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	4619      	mov	r1, r3
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_TIM2_Init+0x98>)
 8001120:	f003 f8e7 	bl	80042f2 <HAL_TIM_ConfigClockSource>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800112a:	f000 f9bd 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001136:	463b      	mov	r3, r7
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_TIM2_Init+0x98>)
 800113c:	f003 fb02 	bl	8004744 <HAL_TIMEx_MasterConfigSynchronization>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001146:	f000 f9af 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200002fc 	.word	0x200002fc

08001158 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	463b      	mov	r3, r7
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001174:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_TIM3_Init+0x94>)
 8001176:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <MX_TIM3_Init+0x98>)
 8001178:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <MX_TIM3_Init+0x94>)
 800117c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001180:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_TIM3_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 800-1;
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_TIM3_Init+0x94>)
 800118a:	f240 321f 	movw	r2, #799	; 0x31f
 800118e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_TIM3_Init+0x94>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <MX_TIM3_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800119c:	4813      	ldr	r0, [pc, #76]	; (80011ec <MX_TIM3_Init+0x94>)
 800119e:	f002 fe21 	bl	8003de4 <HAL_TIM_Base_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011a8:	f000 f97e 	bl	80014a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	4619      	mov	r1, r3
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <MX_TIM3_Init+0x94>)
 80011ba:	f003 f89a 	bl	80042f2 <HAL_TIM_ConfigClockSource>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011c4:	f000 f970 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d0:	463b      	mov	r3, r7
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_TIM3_Init+0x94>)
 80011d6:	f003 fab5 	bl	8004744 <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011e0:	f000 f962 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000344 	.word	0x20000344
 80011f0:	40000400 	.word	0x40000400

080011f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <MX_TIM6_Init+0x64>)
 8001204:	4a15      	ldr	r2, [pc, #84]	; (800125c <MX_TIM6_Init+0x68>)
 8001206:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <MX_TIM6_Init+0x64>)
 800120a:	2201      	movs	r2, #1
 800120c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_TIM6_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_TIM6_Init+0x64>)
 8001216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_TIM6_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_TIM6_Init+0x64>)
 8001224:	f002 fdde 	bl	8003de4 <HAL_TIM_Base_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800122e:	f000 f93b 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800123a:	463b      	mov	r3, r7
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <MX_TIM6_Init+0x64>)
 8001240:	f003 fa80 	bl	8004744 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800124a:	f000 f92d 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2000038c 	.word	0x2000038c
 800125c:	40001000 	.word	0x40001000

08001260 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001266:	463b      	mov	r3, r7
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <MX_TIM7_Init+0x64>)
 8001270:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <MX_TIM7_Init+0x68>)
 8001272:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1;
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_TIM7_Init+0x64>)
 8001276:	2201      	movs	r2, #1
 8001278:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_TIM7_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 400-1;
 8001280:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <MX_TIM7_Init+0x64>)
 8001282:	f240 128f 	movw	r2, #399	; 0x18f
 8001286:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_TIM7_Init+0x64>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <MX_TIM7_Init+0x64>)
 8001290:	f002 fda8 	bl	8003de4 <HAL_TIM_Base_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800129a:	f000 f905 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012a6:	463b      	mov	r3, r7
 80012a8:	4619      	mov	r1, r3
 80012aa:	4806      	ldr	r0, [pc, #24]	; (80012c4 <MX_TIM7_Init+0x64>)
 80012ac:	f003 fa4a 	bl	8004744 <HAL_TIMEx_MasterConfigSynchronization>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80012b6:	f000 f8f7 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200003d4 	.word	0x200003d4
 80012c8:	40001400 	.word	0x40001400

080012cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <MX_GPIO_Init+0xe4>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a31      	ldr	r2, [pc, #196]	; (80013b0 <MX_GPIO_Init+0xe4>)
 80012ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b2f      	ldr	r3, [pc, #188]	; (80013b0 <MX_GPIO_Init+0xe4>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <MX_GPIO_Init+0xe4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a2a      	ldr	r2, [pc, #168]	; (80013b0 <MX_GPIO_Init+0xe4>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <MX_GPIO_Init+0xe4>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <MX_GPIO_Init+0xe4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a23      	ldr	r2, [pc, #140]	; (80013b0 <MX_GPIO_Init+0xe4>)
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <MX_GPIO_Init+0xe4>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_GPIO_Init+0xe4>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <MX_GPIO_Init+0xe4>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <MX_GPIO_Init+0xe4>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, dataled_Pin|infereled_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001358:	4816      	ldr	r0, [pc, #88]	; (80013b4 <MX_GPIO_Init+0xe8>)
 800135a:	f000 fe23 	bl	8001fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800135e:	2301      	movs	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001362:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	4811      	ldr	r0, [pc, #68]	; (80013b8 <MX_GPIO_Init+0xec>)
 8001374:	f000 fc62 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : dataled_Pin infereled_Pin */
  GPIO_InitStruct.Pin = dataled_Pin|infereled_Pin;
 8001378:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4808      	ldr	r0, [pc, #32]	; (80013b4 <MX_GPIO_Init+0xe8>)
 8001392:	f000 fc53 	bl	8001c3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	2006      	movs	r0, #6
 800139c:	f000 fc09 	bl	8001bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013a0:	2006      	movs	r0, #6
 80013a2:	f000 fc22 	bl	8001bea <HAL_NVIC_EnableIRQ>

}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40020000 	.word	0x40020000

080013bc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==GPIO_PIN_0)
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d132      	bne.n	8001432 <HAL_GPIO_EXTI_Callback+0x76>
	{
		switch (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80013cc:	2101      	movs	r1, #1
 80013ce:	481b      	ldr	r0, [pc, #108]	; (800143c <HAL_GPIO_EXTI_Callback+0x80>)
 80013d0:	f000 fdd0 	bl	8001f74 <HAL_GPIO_ReadPin>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d002      	beq.n	80013e0 <HAL_GPIO_EXTI_Callback+0x24>
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d012      	beq.n	8001404 <HAL_GPIO_EXTI_Callback+0x48>

		}
		//HAL_NVIC_DisableIRQ(EXTI0_IRQn);

	}// if button
}//exti callback
 80013de:	e029      	b.n	8001434 <HAL_GPIO_EXTI_Callback+0x78>
			 HAL_TIM_Base_Stop(&htim2);
 80013e0:	4817      	ldr	r0, [pc, #92]	; (8001440 <HAL_GPIO_EXTI_Callback+0x84>)
 80013e2:	f002 fdb7 	bl	8003f54 <HAL_TIM_Base_Stop>
			HAL_TIM_Base_Start_IT(&htim3);
 80013e6:	4817      	ldr	r0, [pc, #92]	; (8001444 <HAL_GPIO_EXTI_Callback+0x88>)
 80013e8:	f002 fddc 	bl	8003fa4 <HAL_TIM_Base_Start_IT>
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80013ec:	2006      	movs	r0, #6
 80013ee:	f000 fc0a 	bl	8001c06 <HAL_NVIC_DisableIRQ>
			state=bup;
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_GPIO_EXTI_Callback+0x8c>)
 80013f4:	2202      	movs	r2, #2
 80013f6:	701a      	strb	r2, [r3, #0]
			buttonupcount++;
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_GPIO_EXTI_Callback+0x90>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	4a13      	ldr	r2, [pc, #76]	; (800144c <HAL_GPIO_EXTI_Callback+0x90>)
 8001400:	6013      	str	r3, [r2, #0]
			break;
 8001402:	e017      	b.n	8001434 <HAL_GPIO_EXTI_Callback+0x78>
			TIM2->CNT=0;
 8001404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	; 0x24
			 HAL_TIM_Base_Stop(&htim6) ;
 800140c:	4810      	ldr	r0, [pc, #64]	; (8001450 <HAL_GPIO_EXTI_Callback+0x94>)
 800140e:	f002 fda1 	bl	8003f54 <HAL_TIM_Base_Stop>
              HAL_TIM_Base_Start(&htim2);
 8001412:	480b      	ldr	r0, [pc, #44]	; (8001440 <HAL_GPIO_EXTI_Callback+0x84>)
 8001414:	f002 fd36 	bl	8003e84 <HAL_TIM_Base_Start>
			state=bdown;
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_GPIO_EXTI_Callback+0x8c>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
			buttondowncount++;
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_GPIO_EXTI_Callback+0x98>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <HAL_GPIO_EXTI_Callback+0x98>)
 8001426:	6013      	str	r3, [r2, #0]
			tim6count=TIM6->CNT;
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_GPIO_EXTI_Callback+0x9c>)
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	4a0b      	ldr	r2, [pc, #44]	; (800145c <HAL_GPIO_EXTI_Callback+0xa0>)
 800142e:	6013      	str	r3, [r2, #0]
			break;
 8001430:	e000      	b.n	8001434 <HAL_GPIO_EXTI_Callback+0x78>
	}// if button
 8001432:	bf00      	nop
}//exti callback
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40020000 	.word	0x40020000
 8001440:	200002fc 	.word	0x200002fc
 8001444:	20000344 	.word	0x20000344
 8001448:	200002e8 	.word	0x200002e8
 800144c:	200002ec 	.word	0x200002ec
 8001450:	2000038c 	.word	0x2000038c
 8001454:	200002f0 	.word	0x200002f0
 8001458:	40001000 	.word	0x40001000
 800145c:	200002f8 	.word	0x200002f8

08001460 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

	if (htim==&htim3)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d108      	bne.n	8001482 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
	 HAL_TIM_Base_Stop_IT(&htim3);
 8001470:	4809      	ldr	r0, [pc, #36]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001472:	f002 fe07 	bl	8004084 <HAL_TIM_Base_Stop_IT>
	 //uint8_t buffer[20]="";
	 //sprintf(buffer,"%u,%u\n",(unsigned int) TIM2->CNT,(unsigned int) TIM3->CNT);
	  //result=CDC_Transmit_FS(buffer,(uint16_t)strlen(buffer));

	 HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001476:	2006      	movs	r0, #6
 8001478:	f000 fbb7 	bl	8001bea <HAL_NVIC_EnableIRQ>

	 state=idle;
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
	}//htim3
 if (htim==&htim7)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d102      	bne.n	8001490 <HAL_TIM_PeriodElapsedCallback+0x30>
 {
	flag=2;
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800148c:	2202      	movs	r2, #2
 800148e:	701a      	strb	r2, [r3, #0]
 }
}//period callback
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000344 	.word	0x20000344
 800149c:	200002e8 	.word	0x200002e8
 80014a0:	200003d4 	.word	0x200003d4
 80014a4:	200002eb 	.word	0x200002eb

080014a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ac:	b672      	cpsid	i
}
 80014ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <Error_Handler+0x8>
	...

080014b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <HAL_MspInit+0x4c>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <HAL_MspInit+0x4c>)
 80014c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <HAL_MspInit+0x4c>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_MspInit+0x4c>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a08      	ldr	r2, [pc, #32]	; (8001500 <HAL_MspInit+0x4c>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_MspInit+0x4c>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014f2:	2007      	movs	r0, #7
 80014f4:	f000 fb52 	bl	8001b9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40023800 	.word	0x40023800

08001504 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001514:	d10e      	bne.n	8001534 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <HAL_TIM_Base_MspInit+0xd0>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a2d      	ldr	r2, [pc, #180]	; (80015d4 <HAL_TIM_Base_MspInit+0xd0>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <HAL_TIM_Base_MspInit+0xd0>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001532:	e04a      	b.n	80015ca <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a27      	ldr	r2, [pc, #156]	; (80015d8 <HAL_TIM_Base_MspInit+0xd4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d116      	bne.n	800156c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <HAL_TIM_Base_MspInit+0xd0>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a23      	ldr	r2, [pc, #140]	; (80015d4 <HAL_TIM_Base_MspInit+0xd0>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <HAL_TIM_Base_MspInit+0xd0>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	201d      	movs	r0, #29
 8001560:	f000 fb27 	bl	8001bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001564:	201d      	movs	r0, #29
 8001566:	f000 fb40 	bl	8001bea <HAL_NVIC_EnableIRQ>
}
 800156a:	e02e      	b.n	80015ca <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a1a      	ldr	r2, [pc, #104]	; (80015dc <HAL_TIM_Base_MspInit+0xd8>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d10e      	bne.n	8001594 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <HAL_TIM_Base_MspInit+0xd0>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <HAL_TIM_Base_MspInit+0xd0>)
 8001580:	f043 0310 	orr.w	r3, r3, #16
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <HAL_TIM_Base_MspInit+0xd0>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
}
 8001592:	e01a      	b.n	80015ca <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM7)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <HAL_TIM_Base_MspInit+0xdc>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d115      	bne.n	80015ca <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_TIM_Base_MspInit+0xd0>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <HAL_TIM_Base_MspInit+0xd0>)
 80015a8:	f043 0320 	orr.w	r3, r3, #32
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_TIM_Base_MspInit+0xd0>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 0320 	and.w	r3, r3, #32
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2037      	movs	r0, #55	; 0x37
 80015c0:	f000 faf7 	bl	8001bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80015c4:	2037      	movs	r0, #55	; 0x37
 80015c6:	f000 fb10 	bl	8001bea <HAL_NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40000400 	.word	0x40000400
 80015dc:	40001000 	.word	0x40001000
 80015e0:	40001400 	.word	0x40001400

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <NMI_Handler+0x4>

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MemManage_Handler+0x4>

080015f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler+0x4>

08001602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001630:	f000 f97c 	bl	800192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800163c:	2001      	movs	r0, #1
 800163e:	f000 fccb 	bl	8001fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <TIM3_IRQHandler+0x10>)
 800164e:	f002 fd48 	bl	80040e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000344 	.word	0x20000344

0800165c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <TIM7_IRQHandler+0x10>)
 8001662:	f002 fd3e 	bl	80040e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200003d4 	.word	0x200003d4

08001670 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <OTG_FS_IRQHandler+0x10>)
 8001676:	f000 fe17 	bl	80022a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20001904 	.word	0x20001904

08001684 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return 1;
 8001688:	2301      	movs	r3, #1
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_kill>:

int _kill(int pid, int sig)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800169e:	f007 fa2b 	bl	8008af8 <__errno>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2216      	movs	r2, #22
 80016a6:	601a      	str	r2, [r3, #0]
  return -1;
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_exit>:

void _exit (int status)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ffe7 	bl	8001694 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016c6:	e7fe      	b.n	80016c6 <_exit+0x12>

080016c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e00a      	b.n	80016f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016da:	f3af 8000 	nop.w
 80016de:	4601      	mov	r1, r0
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	60ba      	str	r2, [r7, #8]
 80016e6:	b2ca      	uxtb	r2, r1
 80016e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	dbf0      	blt.n	80016da <_read+0x12>
  }

  return len;
 80016f8:	687b      	ldr	r3, [r7, #4]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	e009      	b.n	8001728 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	60ba      	str	r2, [r7, #8]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	dbf1      	blt.n	8001714 <_write+0x12>
  }
  return len;
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_close>:

int _close(int file)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001762:	605a      	str	r2, [r3, #4]
  return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_isatty>:

int _isatty(int file)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	; (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f007 f990 	bl	8008af8 <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20020000 	.word	0x20020000
 8001804:	00000400 	.word	0x00000400
 8001808:	2000041c 	.word	0x2000041c
 800180c:	20002040 	.word	0x20002040

08001810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <SystemInit+0x20>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <SystemInit+0x20>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800186c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001838:	480d      	ldr	r0, [pc, #52]	; (8001870 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800183a:	490e      	ldr	r1, [pc, #56]	; (8001874 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800183c:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001840:	e002      	b.n	8001848 <LoopCopyDataInit>

08001842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001846:	3304      	adds	r3, #4

08001848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800184c:	d3f9      	bcc.n	8001842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184e:	4a0b      	ldr	r2, [pc, #44]	; (800187c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001850:	4c0b      	ldr	r4, [pc, #44]	; (8001880 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001854:	e001      	b.n	800185a <LoopFillZerobss>

08001856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001858:	3204      	adds	r2, #4

0800185a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800185c:	d3fb      	bcc.n	8001856 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800185e:	f7ff ffd7 	bl	8001810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001862:	f007 f94f 	bl	8008b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001866:	f7ff fb31 	bl	8000ecc <main>
  bx  lr    
 800186a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800186c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001874:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001878:	0800bda4 	.word	0x0800bda4
  ldr r2, =_sbss
 800187c:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8001880:	20002040 	.word	0x20002040

08001884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC_IRQHandler>
	...

08001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_Init+0x40>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_Init+0x40>)
 8001892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_Init+0x40>)
 800189e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_Init+0x40>)
 80018aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b0:	2003      	movs	r0, #3
 80018b2:	f000 f973 	bl	8001b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 f808 	bl	80018cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018bc:	f7ff fdfa 	bl	80014b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00

080018cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_InitTick+0x54>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_InitTick+0x58>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f999 	bl	8001c22 <HAL_SYSTICK_Config>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00e      	b.n	8001918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d80a      	bhi.n	8001916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f000 f953 	bl	8001bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800190c:	4a06      	ldr	r2, [pc, #24]	; (8001928 <HAL_InitTick+0x5c>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000000 	.word	0x20000000
 8001924:	20000008 	.word	0x20000008
 8001928:	20000004 	.word	0x20000004

0800192c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_IncTick+0x20>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_IncTick+0x24>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4413      	add	r3, r2
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <HAL_IncTick+0x24>)
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000008 	.word	0x20000008
 8001950:	20000420 	.word	0x20000420

08001954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_GetTick+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000420 	.word	0x20000420

0800196c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff ffee 	bl	8001954 <HAL_GetTick>
 8001978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001984:	d005      	beq.n	8001992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_Delay+0x44>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001992:	bf00      	nop
 8001994:	f7ff ffde 	bl	8001954 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d8f7      	bhi.n	8001994 <HAL_Delay+0x28>
  {
  }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000008 	.word	0x20000008

080019b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d0:	4013      	ands	r3, r2
 80019d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	60d3      	str	r3, [r2, #12]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <__NVIC_GetPriorityGrouping+0x18>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	f003 0307 	and.w	r3, r3, #7
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	db0b      	blt.n	8001a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	f003 021f 	and.w	r2, r3, #31
 8001a30:	4907      	ldr	r1, [pc, #28]	; (8001a50 <__NVIC_EnableIRQ+0x38>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	095b      	lsrs	r3, r3, #5
 8001a38:	2001      	movs	r0, #1
 8001a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db12      	blt.n	8001a8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	490a      	ldr	r1, [pc, #40]	; (8001a98 <__NVIC_DisableIRQ+0x44>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2001      	movs	r0, #1
 8001a76:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7a:	3320      	adds	r3, #32
 8001a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a80:	f3bf 8f4f 	dsb	sy
}
 8001a84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a86:	f3bf 8f6f 	isb	sy
}
 8001a8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100

08001a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	6039      	str	r1, [r7, #0]
 8001aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	db0a      	blt.n	8001ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	490c      	ldr	r1, [pc, #48]	; (8001ae8 <__NVIC_SetPriority+0x4c>)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	0112      	lsls	r2, r2, #4
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	440b      	add	r3, r1
 8001ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac4:	e00a      	b.n	8001adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4908      	ldr	r1, [pc, #32]	; (8001aec <__NVIC_SetPriority+0x50>)
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	3b04      	subs	r3, #4
 8001ad4:	0112      	lsls	r2, r2, #4
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	440b      	add	r3, r1
 8001ada:	761a      	strb	r2, [r3, #24]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000e100 	.word	0xe000e100
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f1c3 0307 	rsb	r3, r3, #7
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	bf28      	it	cs
 8001b0e:	2304      	movcs	r3, #4
 8001b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3304      	adds	r3, #4
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d902      	bls.n	8001b20 <NVIC_EncodePriority+0x30>
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3b03      	subs	r3, #3
 8001b1e:	e000      	b.n	8001b22 <NVIC_EncodePriority+0x32>
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	f04f 32ff 	mov.w	r2, #4294967295
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	401a      	ands	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b38:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	43d9      	mvns	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	4313      	orrs	r3, r2
         );
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3724      	adds	r7, #36	; 0x24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b68:	d301      	bcc.n	8001b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e00f      	b.n	8001b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <SysTick_Config+0x40>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b76:	210f      	movs	r1, #15
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	f7ff ff8e 	bl	8001a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <SysTick_Config+0x40>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <SysTick_Config+0x40>)
 8001b88:	2207      	movs	r2, #7
 8001b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	e000e010 	.word	0xe000e010

08001b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ff05 	bl	80019b4 <__NVIC_SetPriorityGrouping>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc4:	f7ff ff1a 	bl	80019fc <__NVIC_GetPriorityGrouping>
 8001bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	6978      	ldr	r0, [r7, #20]
 8001bd0:	f7ff ff8e 	bl	8001af0 <NVIC_EncodePriority>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff5d 	bl	8001a9c <__NVIC_SetPriority>
}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff0d 	bl	8001a18 <__NVIC_EnableIRQ>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff1d 	bl	8001a54 <__NVIC_DisableIRQ>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ff94 	bl	8001b58 <SysTick_Config>
 8001c30:	4603      	mov	r3, r0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	e16b      	b.n	8001f30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c58:	2201      	movs	r2, #1
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	f040 815a 	bne.w	8001f2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d005      	beq.n	8001c8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d130      	bne.n	8001cf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	2203      	movs	r2, #3
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 0201 	and.w	r2, r3, #1
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d017      	beq.n	8001d2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2203      	movs	r2, #3
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d123      	bne.n	8001d80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	08da      	lsrs	r2, r3, #3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3208      	adds	r2, #8
 8001d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	220f      	movs	r2, #15
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	08da      	lsrs	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3208      	adds	r2, #8
 8001d7a:	69b9      	ldr	r1, [r7, #24]
 8001d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0203 	and.w	r2, r3, #3
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80b4 	beq.w	8001f2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b60      	ldr	r3, [pc, #384]	; (8001f48 <HAL_GPIO_Init+0x30c>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	4a5f      	ldr	r2, [pc, #380]	; (8001f48 <HAL_GPIO_Init+0x30c>)
 8001dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd2:	4b5d      	ldr	r3, [pc, #372]	; (8001f48 <HAL_GPIO_Init+0x30c>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dde:	4a5b      	ldr	r2, [pc, #364]	; (8001f4c <HAL_GPIO_Init+0x310>)
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	089b      	lsrs	r3, r3, #2
 8001de4:	3302      	adds	r3, #2
 8001de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	220f      	movs	r2, #15
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a52      	ldr	r2, [pc, #328]	; (8001f50 <HAL_GPIO_Init+0x314>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d02b      	beq.n	8001e62 <HAL_GPIO_Init+0x226>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a51      	ldr	r2, [pc, #324]	; (8001f54 <HAL_GPIO_Init+0x318>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d025      	beq.n	8001e5e <HAL_GPIO_Init+0x222>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a50      	ldr	r2, [pc, #320]	; (8001f58 <HAL_GPIO_Init+0x31c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d01f      	beq.n	8001e5a <HAL_GPIO_Init+0x21e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4f      	ldr	r2, [pc, #316]	; (8001f5c <HAL_GPIO_Init+0x320>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d019      	beq.n	8001e56 <HAL_GPIO_Init+0x21a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4e      	ldr	r2, [pc, #312]	; (8001f60 <HAL_GPIO_Init+0x324>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d013      	beq.n	8001e52 <HAL_GPIO_Init+0x216>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4d      	ldr	r2, [pc, #308]	; (8001f64 <HAL_GPIO_Init+0x328>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00d      	beq.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4c      	ldr	r2, [pc, #304]	; (8001f68 <HAL_GPIO_Init+0x32c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d007      	beq.n	8001e4a <HAL_GPIO_Init+0x20e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4b      	ldr	r2, [pc, #300]	; (8001f6c <HAL_GPIO_Init+0x330>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d101      	bne.n	8001e46 <HAL_GPIO_Init+0x20a>
 8001e42:	2307      	movs	r3, #7
 8001e44:	e00e      	b.n	8001e64 <HAL_GPIO_Init+0x228>
 8001e46:	2308      	movs	r3, #8
 8001e48:	e00c      	b.n	8001e64 <HAL_GPIO_Init+0x228>
 8001e4a:	2306      	movs	r3, #6
 8001e4c:	e00a      	b.n	8001e64 <HAL_GPIO_Init+0x228>
 8001e4e:	2305      	movs	r3, #5
 8001e50:	e008      	b.n	8001e64 <HAL_GPIO_Init+0x228>
 8001e52:	2304      	movs	r3, #4
 8001e54:	e006      	b.n	8001e64 <HAL_GPIO_Init+0x228>
 8001e56:	2303      	movs	r3, #3
 8001e58:	e004      	b.n	8001e64 <HAL_GPIO_Init+0x228>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e002      	b.n	8001e64 <HAL_GPIO_Init+0x228>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_GPIO_Init+0x228>
 8001e62:	2300      	movs	r3, #0
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	f002 0203 	and.w	r2, r2, #3
 8001e6a:	0092      	lsls	r2, r2, #2
 8001e6c:	4093      	lsls	r3, r2
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e74:	4935      	ldr	r1, [pc, #212]	; (8001f4c <HAL_GPIO_Init+0x310>)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e82:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <HAL_GPIO_Init+0x334>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ea6:	4a32      	ldr	r2, [pc, #200]	; (8001f70 <HAL_GPIO_Init+0x334>)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eac:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <HAL_GPIO_Init+0x334>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed0:	4a27      	ldr	r2, [pc, #156]	; (8001f70 <HAL_GPIO_Init+0x334>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ed6:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <HAL_GPIO_Init+0x334>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001efa:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <HAL_GPIO_Init+0x334>)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f00:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <HAL_GPIO_Init+0x334>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f24:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <HAL_GPIO_Init+0x334>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	2b0f      	cmp	r3, #15
 8001f34:	f67f ae90 	bls.w	8001c58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3724      	adds	r7, #36	; 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40013800 	.word	0x40013800
 8001f50:	40020000 	.word	0x40020000
 8001f54:	40020400 	.word	0x40020400
 8001f58:	40020800 	.word	0x40020800
 8001f5c:	40020c00 	.word	0x40020c00
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40021400 	.word	0x40021400
 8001f68:	40021800 	.word	0x40021800
 8001f6c:	40021c00 	.word	0x40021c00
 8001f70:	40013c00 	.word	0x40013c00

08001f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	887b      	ldrh	r3, [r7, #2]
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
 8001f90:	e001      	b.n	8001f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	807b      	strh	r3, [r7, #2]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb4:	787b      	ldrb	r3, [r7, #1]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fba:	887a      	ldrh	r2, [r7, #2]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc0:	e003      	b.n	8001fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fc2:	887b      	ldrh	r3, [r7, #2]
 8001fc4:	041a      	lsls	r2, r3, #16
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	619a      	str	r2, [r3, #24]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d006      	beq.n	8001ffc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff f9e0 	bl	80013bc <HAL_GPIO_EXTI_Callback>
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40013c00 	.word	0x40013c00

08002008 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800200a:	b08f      	sub	sp, #60	; 0x3c
 800200c:	af0a      	add	r7, sp, #40	; 0x28
 800200e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e10f      	b.n	800223a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d106      	bne.n	800203a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f006 fa4b 	bl	80084d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2203      	movs	r2, #3
 800203e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	d102      	bne.n	8002054 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f002 fd18 	bl	8004a8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	687e      	ldr	r6, [r7, #4]
 8002066:	466d      	mov	r5, sp
 8002068:	f106 0410 	add.w	r4, r6, #16
 800206c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002074:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002078:	e885 0003 	stmia.w	r5, {r0, r1}
 800207c:	1d33      	adds	r3, r6, #4
 800207e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002080:	6838      	ldr	r0, [r7, #0]
 8002082:	f002 fbef 	bl	8004864 <USB_CoreInit>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0d0      	b.n	800223a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 fd06 	bl	8004ab0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a4:	2300      	movs	r3, #0
 80020a6:	73fb      	strb	r3, [r7, #15]
 80020a8:	e04a      	b.n	8002140 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	333d      	adds	r3, #61	; 0x3d
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	333c      	adds	r3, #60	; 0x3c
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	b298      	uxth	r0, r3
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	3344      	adds	r3, #68	; 0x44
 80020e6:	4602      	mov	r2, r0
 80020e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	3340      	adds	r3, #64	; 0x40
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	3348      	adds	r3, #72	; 0x48
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	334c      	adds	r3, #76	; 0x4c
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	3354      	adds	r3, #84	; 0x54
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	3301      	adds	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	429a      	cmp	r2, r3
 8002148:	d3af      	bcc.n	80020aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
 800214e:	e044      	b.n	80021da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002166:	7bfa      	ldrb	r2, [r7, #15]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	3301      	adds	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d3b5      	bcc.n	8002150 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	603b      	str	r3, [r7, #0]
 80021ea:	687e      	ldr	r6, [r7, #4]
 80021ec:	466d      	mov	r5, sp
 80021ee:	f106 0410 	add.w	r4, r6, #16
 80021f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002202:	1d33      	adds	r3, r6, #4
 8002204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002206:	6838      	ldr	r0, [r7, #0]
 8002208:	f002 fc9e 	bl	8004b48 <USB_DevInit>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2202      	movs	r2, #2
 8002216:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e00d      	b.n	800223a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fded 	bl	8005e12 <USB_DevDisconnect>

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002242 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_PCD_Start+0x1c>
 800225a:	2302      	movs	r3, #2
 800225c:	e020      	b.n	80022a0 <HAL_PCD_Start+0x5e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	2b01      	cmp	r3, #1
 800226c:	d109      	bne.n	8002282 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002272:	2b01      	cmp	r3, #1
 8002274:	d005      	beq.n	8002282 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f002 fbf0 	bl	8004a6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f003 fd9d 	bl	8005dd0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b08d      	sub	sp, #52	; 0x34
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f003 fe5b 	bl	8005f7a <USB_GetMode>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f040 848a 	bne.w	8002be0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f003 fdbf 	bl	8005e54 <USB_ReadInterrupts>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 8480 	beq.w	8002bde <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	0a1b      	lsrs	r3, r3, #8
 80022e8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 fdac 	bl	8005e54 <USB_ReadInterrupts>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b02      	cmp	r3, #2
 8002304:	d107      	bne.n	8002316 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f002 0202 	and.w	r2, r2, #2
 8002314:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f003 fd9a 	bl	8005e54 <USB_ReadInterrupts>
 8002320:	4603      	mov	r3, r0
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b10      	cmp	r3, #16
 8002328:	d161      	bne.n	80023ee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	699a      	ldr	r2, [r3, #24]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0210 	bic.w	r2, r2, #16
 8002338:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f003 020f 	and.w	r2, r3, #15
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	3304      	adds	r3, #4
 8002358:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	0c5b      	lsrs	r3, r3, #17
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	2b02      	cmp	r3, #2
 8002364:	d124      	bne.n	80023b0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800236c:	4013      	ands	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d035      	beq.n	80023de <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800237c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002380:	b29b      	uxth	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	6a38      	ldr	r0, [r7, #32]
 8002386:	f003 fbd1 	bl	8005b2c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002396:	441a      	add	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	6a1a      	ldr	r2, [r3, #32]
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023a8:	441a      	add	r2, r3
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	621a      	str	r2, [r3, #32]
 80023ae:	e016      	b.n	80023de <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	0c5b      	lsrs	r3, r3, #17
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	2b06      	cmp	r3, #6
 80023ba:	d110      	bne.n	80023de <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023c2:	2208      	movs	r2, #8
 80023c4:	4619      	mov	r1, r3
 80023c6:	6a38      	ldr	r0, [r7, #32]
 80023c8:	f003 fbb0 	bl	8005b2c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	6a1a      	ldr	r2, [r3, #32]
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	091b      	lsrs	r3, r3, #4
 80023d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023d8:	441a      	add	r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699a      	ldr	r2, [r3, #24]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0210 	orr.w	r2, r2, #16
 80023ec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 fd2e 	bl	8005e54 <USB_ReadInterrupts>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002402:	f040 80a7 	bne.w	8002554 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f003 fd33 	bl	8005e7a <USB_ReadDevAllOutEpInterrupt>
 8002414:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002416:	e099      	b.n	800254c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 808e 	beq.w	8002540 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f003 fd57 	bl	8005ee2 <USB_ReadDevOutEPInterrupt>
 8002434:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00c      	beq.n	800245a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	4413      	add	r3, r2
 8002448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800244c:	461a      	mov	r2, r3
 800244e:	2301      	movs	r3, #1
 8002450:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002452:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 fec3 	bl	80031e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00c      	beq.n	800247e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	4413      	add	r3, r2
 800246c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002470:	461a      	mov	r2, r3
 8002472:	2308      	movs	r3, #8
 8002474:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002476:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 ff99 	bl	80033b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	4413      	add	r3, r2
 8002490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002494:	461a      	mov	r2, r3
 8002496:	2310      	movs	r3, #16
 8002498:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d030      	beq.n	8002506 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ac:	2b80      	cmp	r3, #128	; 0x80
 80024ae:	d109      	bne.n	80024c4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024c2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	3304      	adds	r3, #4
 80024d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	78db      	ldrb	r3, [r3, #3]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d108      	bne.n	80024f4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2200      	movs	r2, #0
 80024e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	4619      	mov	r1, r3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f006 f8f4 	bl	80086dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002500:	461a      	mov	r2, r3
 8002502:	2302      	movs	r3, #2
 8002504:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	4413      	add	r3, r2
 8002518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800251c:	461a      	mov	r2, r3
 800251e:	2320      	movs	r3, #32
 8002520:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d009      	beq.n	8002540 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002538:	461a      	mov	r2, r3
 800253a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800253e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	3301      	adds	r3, #1
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	085b      	lsrs	r3, r3, #1
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	2b00      	cmp	r3, #0
 8002550:	f47f af62 	bne.w	8002418 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f003 fc7b 	bl	8005e54 <USB_ReadInterrupts>
 800255e:	4603      	mov	r3, r0
 8002560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002564:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002568:	f040 80db 	bne.w	8002722 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f003 fc9c 	bl	8005eae <USB_ReadDevAllInEpInterrupt>
 8002576:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800257c:	e0cd      	b.n	800271a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80c2 	beq.w	800270e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f003 fcc2 	bl	8005f1e <USB_ReadDevInEPInterrupt>
 800259a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d057      	beq.n	8002656 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	2201      	movs	r2, #1
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	43db      	mvns	r3, r3
 80025c0:	69f9      	ldr	r1, [r7, #28]
 80025c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025c6:	4013      	ands	r3, r2
 80025c8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025d6:	461a      	mov	r2, r3
 80025d8:	2301      	movs	r3, #1
 80025da:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d132      	bne.n	800264a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	334c      	adds	r3, #76	; 0x4c
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4403      	add	r3, r0
 8002604:	3348      	adds	r3, #72	; 0x48
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4419      	add	r1, r3
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4403      	add	r3, r0
 8002618:	334c      	adds	r3, #76	; 0x4c
 800261a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	2b00      	cmp	r3, #0
 8002620:	d113      	bne.n	800264a <HAL_PCD_IRQHandler+0x3a2>
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002626:	4613      	mov	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	3354      	adds	r3, #84	; 0x54
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d108      	bne.n	800264a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002642:	461a      	mov	r2, r3
 8002644:	2101      	movs	r1, #1
 8002646:	f003 fcc9 	bl	8005fdc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	b2db      	uxtb	r3, r3
 800264e:	4619      	mov	r1, r3
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f005 ffbe 	bl	80085d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	4413      	add	r3, r2
 8002668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800266c:	461a      	mov	r2, r3
 800266e:	2308      	movs	r3, #8
 8002670:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002688:	461a      	mov	r2, r3
 800268a:	2310      	movs	r3, #16
 800268c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a4:	461a      	mov	r2, r3
 80026a6:	2340      	movs	r3, #64	; 0x40
 80026a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d023      	beq.n	80026fc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b6:	6a38      	ldr	r0, [r7, #32]
 80026b8:	f002 fbaa 	bl	8004e10 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	3338      	adds	r3, #56	; 0x38
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	4413      	add	r3, r2
 80026cc:	3304      	adds	r3, #4
 80026ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	78db      	ldrb	r3, [r3, #3]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d108      	bne.n	80026ea <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2200      	movs	r2, #0
 80026dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	4619      	mov	r1, r3
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f006 f80b 	bl	8008700 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f6:	461a      	mov	r2, r3
 80026f8:	2302      	movs	r3, #2
 80026fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 fcdb 	bl	80030c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	3301      	adds	r3, #1
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002716:	085b      	lsrs	r3, r3, #1
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	f47f af2e 	bne.w	800257e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f003 fb94 	bl	8005e54 <USB_ReadInterrupts>
 800272c:	4603      	mov	r3, r0
 800272e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002736:	d122      	bne.n	800277e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	69fa      	ldr	r2, [r7, #28]
 8002742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002752:	2b01      	cmp	r3, #1
 8002754:	d108      	bne.n	8002768 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800275e:	2100      	movs	r1, #0
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fec3 	bl	80034ec <HAL_PCDEx_LPM_Callback>
 8002766:	e002      	b.n	800276e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f005 ffa9 	bl	80086c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800277c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f003 fb66 	bl	8005e54 <USB_ReadInterrupts>
 8002788:	4603      	mov	r3, r0
 800278a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800278e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002792:	d112      	bne.n	80027ba <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d102      	bne.n	80027aa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f005 ff65 	bl	8008674 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80027b8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 fb48 	bl	8005e54 <USB_ReadInterrupts>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ce:	f040 80b7 	bne.w	8002940 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2110      	movs	r1, #16
 80027ec:	4618      	mov	r0, r3
 80027ee:	f002 fb0f 	bl	8004e10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f2:	2300      	movs	r3, #0
 80027f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f6:	e046      	b.n	8002886 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002804:	461a      	mov	r2, r3
 8002806:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800280a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	4413      	add	r3, r2
 8002814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800281c:	0151      	lsls	r1, r2, #5
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	440a      	add	r2, r1
 8002822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002826:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800282a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	4413      	add	r3, r2
 8002834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002838:	461a      	mov	r2, r3
 800283a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800283e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	4413      	add	r3, r2
 8002848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002850:	0151      	lsls	r1, r2, #5
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	440a      	add	r2, r1
 8002856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800285a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800285e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	4413      	add	r3, r2
 8002868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002870:	0151      	lsls	r1, r2, #5
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	440a      	add	r2, r1
 8002876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800287a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800287e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002882:	3301      	adds	r3, #1
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800288c:	429a      	cmp	r2, r3
 800288e:	d3b3      	bcc.n	80027f8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800289e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80028a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d016      	beq.n	80028da <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028bc:	f043 030b 	orr.w	r3, r3, #11
 80028c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d2:	f043 030b 	orr.w	r3, r3, #11
 80028d6:	6453      	str	r3, [r2, #68]	; 0x44
 80028d8:	e015      	b.n	8002906 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028ec:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80028f0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002900:	f043 030b 	orr.w	r3, r3, #11
 8002904:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002914:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002918:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800292a:	461a      	mov	r2, r3
 800292c:	f003 fb56 	bl	8005fdc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800293e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f003 fa85 	bl	8005e54 <USB_ReadInterrupts>
 800294a:	4603      	mov	r3, r0
 800294c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002954:	d124      	bne.n	80029a0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f003 fb1b 	bl	8005f96 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f002 fad0 	bl	8004f0a <USB_GetDevSpeed>
 800296a:	4603      	mov	r3, r0
 800296c:	461a      	mov	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681c      	ldr	r4, [r3, #0]
 8002976:	f001 fa29 	bl	8003dcc <HAL_RCC_GetHCLKFreq>
 800297a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002980:	b2db      	uxtb	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	4620      	mov	r0, r4
 8002986:	f001 ffcf 	bl	8004928 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f005 fe49 	bl	8008622 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800299e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f003 fa55 	bl	8005e54 <USB_ReadInterrupts>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d10a      	bne.n	80029ca <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f005 fe26 	bl	8008606 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f002 0208 	and.w	r2, r2, #8
 80029c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f003 fa40 	bl	8005e54 <USB_ReadInterrupts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029da:	2b80      	cmp	r3, #128	; 0x80
 80029dc:	d122      	bne.n	8002a24 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029ea:	2301      	movs	r3, #1
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
 80029ee:	e014      	b.n	8002a1a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fb27 	bl	8003062 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	3301      	adds	r3, #1
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d3e5      	bcc.n	80029f0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f003 fa13 	bl	8005e54 <USB_ReadInterrupts>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a38:	d13b      	bne.n	8002ab2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3e:	e02b      	b.n	8002a98 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3340      	adds	r3, #64	; 0x40
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d115      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a66:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	da12      	bge.n	8002a92 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	333f      	adds	r3, #63	; 0x3f
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 fae8 	bl	8003062 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	3301      	adds	r3, #1
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d3ce      	bcc.n	8002a40 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f003 f9cc 	bl	8005e54 <USB_ReadInterrupts>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ac6:	d155      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ac8:	2301      	movs	r3, #1
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
 8002acc:	e045      	b.n	8002b5a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d12e      	bne.n	8002b54 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002af6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	da2b      	bge.n	8002b54 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b08:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d121      	bne.n	8002b54 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b22:	2201      	movs	r2, #1
 8002b24:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10a      	bne.n	8002b54 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b50:	6053      	str	r3, [r2, #4]
            break;
 8002b52:	e007      	b.n	8002b64 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	3301      	adds	r3, #1
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d3b4      	bcc.n	8002ace <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f003 f96b 	bl	8005e54 <USB_ReadInterrupts>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b88:	d10a      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f005 fdca 	bl	8008724 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 f955 	bl	8005e54 <USB_ReadInterrupts>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d115      	bne.n	8002be0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f005 fdba 	bl	8008740 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6859      	ldr	r1, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	e000      	b.n	8002be0 <HAL_PCD_IRQHandler+0x938>
      return;
 8002bde:	bf00      	nop
    }
  }
}
 8002be0:	3734      	adds	r7, #52	; 0x34
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd90      	pop	{r4, r7, pc}

08002be6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_PCD_SetAddress+0x1a>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e013      	b.n	8002c28 <HAL_PCD_SetAddress+0x42>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f003 f8b3 	bl	8005d84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	4608      	mov	r0, r1
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4603      	mov	r3, r0
 8002c40:	70fb      	strb	r3, [r7, #3]
 8002c42:	460b      	mov	r3, r1
 8002c44:	803b      	strh	r3, [r7, #0]
 8002c46:	4613      	mov	r3, r2
 8002c48:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	da0f      	bge.n	8002c76 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	f003 020f 	and.w	r2, r3, #15
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	3338      	adds	r3, #56	; 0x38
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	705a      	strb	r2, [r3, #1]
 8002c74:	e00f      	b.n	8002c96 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	f003 020f 	and.w	r2, r3, #15
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ca2:	883a      	ldrh	r2, [r7, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	78ba      	ldrb	r2, [r7, #2]
 8002cac:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	785b      	ldrb	r3, [r3, #1]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d004      	beq.n	8002cc0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cc0:	78bb      	ldrb	r3, [r7, #2]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d102      	bne.n	8002ccc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_PCD_EP_Open+0xaa>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e00e      	b.n	8002cf8 <HAL_PCD_EP_Open+0xc8>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68f9      	ldr	r1, [r7, #12]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f002 f933 	bl	8004f54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002cf6:	7afb      	ldrb	r3, [r7, #11]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	da0f      	bge.n	8002d34 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	f003 020f 	and.w	r2, r3, #15
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	3338      	adds	r3, #56	; 0x38
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	4413      	add	r3, r2
 8002d28:	3304      	adds	r3, #4
 8002d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	705a      	strb	r2, [r3, #1]
 8002d32:	e00f      	b.n	8002d54 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	f003 020f 	and.w	r2, r3, #15
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_PCD_EP_Close+0x6e>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e00e      	b.n	8002d8c <HAL_PCD_EP_Close+0x8c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68f9      	ldr	r1, [r7, #12]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f002 f971 	bl	8005064 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	460b      	mov	r3, r1
 8002da2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002da4:	7afb      	ldrb	r3, [r7, #11]
 8002da6:	f003 020f 	and.w	r2, r3, #15
 8002daa:	4613      	mov	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4413      	add	r3, r2
 8002dba:	3304      	adds	r3, #4
 8002dbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd6:	7afb      	ldrb	r3, [r7, #11]
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d102      	bne.n	8002df0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002df0:	7afb      	ldrb	r3, [r7, #11]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	6979      	ldr	r1, [r7, #20]
 8002e08:	f002 fc50 	bl	80056ac <USB_EP0StartXfer>
 8002e0c:	e008      	b.n	8002e20 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	461a      	mov	r2, r3
 8002e1a:	6979      	ldr	r1, [r7, #20]
 8002e1c:	f002 f9fe 	bl	800521c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	460b      	mov	r3, r1
 8002e34:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	f003 020f 	and.w	r2, r3, #15
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002e4c:	681b      	ldr	r3, [r3, #0]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	460b      	mov	r3, r1
 8002e68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e6a:	7afb      	ldrb	r3, [r7, #11]
 8002e6c:	f003 020f 	and.w	r2, r3, #15
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	3338      	adds	r3, #56	; 0x38
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3304      	adds	r3, #4
 8002e80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2200      	movs	r2, #0
 8002e92:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2201      	movs	r2, #1
 8002e98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e9a:	7afb      	ldrb	r3, [r7, #11]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d102      	bne.n	8002eb4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d109      	bne.n	8002ed2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	6979      	ldr	r1, [r7, #20]
 8002ecc:	f002 fbee 	bl	80056ac <USB_EP0StartXfer>
 8002ed0:	e008      	b.n	8002ee4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	6979      	ldr	r1, [r7, #20]
 8002ee0:	f002 f99c 	bl	800521c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	f003 020f 	and.w	r2, r3, #15
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d901      	bls.n	8002f0c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e050      	b.n	8002fae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	da0f      	bge.n	8002f34 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 020f 	and.w	r2, r3, #15
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	3338      	adds	r3, #56	; 0x38
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	3304      	adds	r3, #4
 8002f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	705a      	strb	r2, [r3, #1]
 8002f32:	e00d      	b.n	8002f50 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f34:	78fa      	ldrb	r2, [r7, #3]
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	3304      	adds	r3, #4
 8002f48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_PCD_EP_SetStall+0x82>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e01e      	b.n	8002fae <HAL_PCD_EP_SetStall+0xc0>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68f9      	ldr	r1, [r7, #12]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f002 fe2c 	bl	8005bdc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	b2d9      	uxtb	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f003 f81c 	bl	8005fdc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b084      	sub	sp, #16
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	f003 020f 	and.w	r2, r3, #15
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d901      	bls.n	8002fd4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e042      	b.n	800305a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	da0f      	bge.n	8002ffc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	f003 020f 	and.w	r2, r3, #15
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	3338      	adds	r3, #56	; 0x38
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	4413      	add	r3, r2
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	705a      	strb	r2, [r3, #1]
 8002ffa:	e00f      	b.n	800301c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	f003 020f 	and.w	r2, r3, #15
 8003002:	4613      	mov	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	3304      	adds	r3, #4
 8003014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003022:	78fb      	ldrb	r3, [r7, #3]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	b2da      	uxtb	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_PCD_EP_ClrStall+0x86>
 8003038:	2302      	movs	r3, #2
 800303a:	e00e      	b.n	800305a <HAL_PCD_EP_ClrStall+0xa4>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68f9      	ldr	r1, [r7, #12]
 800304a:	4618      	mov	r0, r3
 800304c:	f002 fe34 	bl	8005cb8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	460b      	mov	r3, r1
 800306c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800306e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003072:	2b00      	cmp	r3, #0
 8003074:	da0c      	bge.n	8003090 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	f003 020f 	and.w	r2, r3, #15
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	3338      	adds	r3, #56	; 0x38
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	4413      	add	r3, r2
 800308a:	3304      	adds	r3, #4
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	e00c      	b.n	80030aa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	f003 020f 	and.w	r2, r3, #15
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	4413      	add	r3, r2
 80030a6:	3304      	adds	r3, #4
 80030a8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68f9      	ldr	r1, [r7, #12]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f002 fc53 	bl	800595c <USB_EPStopXfer>
 80030b6:	4603      	mov	r3, r0
 80030b8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030ba:	7afb      	ldrb	r3, [r7, #11]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	; 0x28
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	4613      	mov	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	3338      	adds	r3, #56	; 0x38
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4413      	add	r3, r2
 80030e8:	3304      	adds	r3, #4
 80030ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a1a      	ldr	r2, [r3, #32]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d901      	bls.n	80030fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e06c      	b.n	80031d6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	699a      	ldr	r2, [r3, #24]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	69fa      	ldr	r2, [r7, #28]
 800310e:	429a      	cmp	r2, r3
 8003110:	d902      	bls.n	8003118 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	3303      	adds	r3, #3
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003120:	e02b      	b.n	800317a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	429a      	cmp	r2, r3
 8003136:	d902      	bls.n	800313e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3303      	adds	r3, #3
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6919      	ldr	r1, [r3, #16]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003156:	b2db      	uxtb	r3, r3
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	4603      	mov	r3, r0
 800315c:	6978      	ldr	r0, [r7, #20]
 800315e:	f002 fca7 	bl	8005ab0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	441a      	add	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a1a      	ldr	r2, [r3, #32]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	441a      	add	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	b29b      	uxth	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	429a      	cmp	r2, r3
 800318e:	d809      	bhi.n	80031a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a1a      	ldr	r2, [r3, #32]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003198:	429a      	cmp	r2, r3
 800319a:	d203      	bcs.n	80031a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1be      	bne.n	8003122 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	699a      	ldr	r2, [r3, #24]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d811      	bhi.n	80031d4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	2201      	movs	r2, #1
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	6939      	ldr	r1, [r7, #16]
 80031cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031d0:	4013      	ands	r3, r2
 80031d2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	333c      	adds	r3, #60	; 0x3c
 80031f8:	3304      	adds	r3, #4
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	4413      	add	r3, r2
 8003206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d17b      	bne.n	800330e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d015      	beq.n	800324c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	4a61      	ldr	r2, [pc, #388]	; (80033a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	f240 80b9 	bls.w	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80b3 	beq.w	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	4413      	add	r3, r2
 800323e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003242:	461a      	mov	r2, r3
 8003244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003248:	6093      	str	r3, [r2, #8]
 800324a:	e0a7      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003262:	461a      	mov	r2, r3
 8003264:	2320      	movs	r3, #32
 8003266:	6093      	str	r3, [r2, #8]
 8003268:	e098      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	f040 8093 	bne.w	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	4a4b      	ldr	r2, [pc, #300]	; (80033a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d90f      	bls.n	800329e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003294:	461a      	mov	r2, r3
 8003296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800329a:	6093      	str	r3, [r2, #8]
 800329c:	e07e      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	3304      	adds	r3, #4
 80032b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	0159      	lsls	r1, r3, #5
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	440b      	add	r3, r1
 80032c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ca:	1ad2      	subs	r2, r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d114      	bne.n	8003300 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032e8:	461a      	mov	r2, r3
 80032ea:	2101      	movs	r1, #1
 80032ec:	f002 fe76 	bl	8005fdc <USB_EP0_OutStart>
 80032f0:	e006      	b.n	8003300 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	441a      	add	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f005 f948 	bl	800859c <HAL_PCD_DataOutStageCallback>
 800330c:	e046      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	4a26      	ldr	r2, [pc, #152]	; (80033ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d124      	bne.n	8003360 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	4413      	add	r3, r2
 8003328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332c:	461a      	mov	r2, r3
 800332e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003332:	6093      	str	r3, [r2, #8]
 8003334:	e032      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334c:	461a      	mov	r2, r3
 800334e:	2320      	movs	r3, #32
 8003350:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	4619      	mov	r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f005 f91f 	bl	800859c <HAL_PCD_DataOutStageCallback>
 800335e:	e01d      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d114      	bne.n	8003390 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d108      	bne.n	8003390 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003388:	461a      	mov	r2, r3
 800338a:	2100      	movs	r1, #0
 800338c:	f002 fe26 	bl	8005fdc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	4619      	mov	r1, r3
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f005 f900 	bl	800859c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	4f54300a 	.word	0x4f54300a
 80033ac:	4f54310a 	.word	0x4f54310a

080033b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	333c      	adds	r3, #60	; 0x3c
 80033c8:	3304      	adds	r3, #4
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4a15      	ldr	r2, [pc, #84]	; (8003438 <PCD_EP_OutSetupPacket_int+0x88>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d90e      	bls.n	8003404 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d009      	beq.n	8003404 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fc:	461a      	mov	r2, r3
 80033fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003402:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f005 f8b7 	bl	8008578 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <PCD_EP_OutSetupPacket_int+0x88>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d90c      	bls.n	800342c <PCD_EP_OutSetupPacket_int+0x7c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d108      	bne.n	800342c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003424:	461a      	mov	r2, r3
 8003426:	2101      	movs	r1, #1
 8003428:	f002 fdd8 	bl	8005fdc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	4f54300a 	.word	0x4f54300a

0800343c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	70fb      	strb	r3, [r7, #3]
 8003448:	4613      	mov	r3, r2
 800344a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d107      	bne.n	800346a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800345a:	883b      	ldrh	r3, [r7, #0]
 800345c:	0419      	lsls	r1, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	430a      	orrs	r2, r1
 8003466:	629a      	str	r2, [r3, #40]	; 0x28
 8003468:	e028      	b.n	80034bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	4413      	add	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003478:	2300      	movs	r3, #0
 800347a:	73fb      	strb	r3, [r7, #15]
 800347c:	e00d      	b.n	800349a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	3340      	adds	r3, #64	; 0x40
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	0c1b      	lsrs	r3, r3, #16
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	4413      	add	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	3301      	adds	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
 800349a:	7bfa      	ldrb	r2, [r7, #15]
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	3b01      	subs	r3, #1
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d3ec      	bcc.n	800347e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034a4:	883b      	ldrh	r3, [r7, #0]
 80034a6:	0418      	lsls	r0, r3, #16
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6819      	ldr	r1, [r3, #0]
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	4302      	orrs	r2, r0
 80034b4:	3340      	adds	r3, #64	; 0x40
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e267      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d075      	beq.n	800360e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003522:	4b88      	ldr	r3, [pc, #544]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	2b04      	cmp	r3, #4
 800352c:	d00c      	beq.n	8003548 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352e:	4b85      	ldr	r3, [pc, #532]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003536:	2b08      	cmp	r3, #8
 8003538:	d112      	bne.n	8003560 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353a:	4b82      	ldr	r3, [pc, #520]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003546:	d10b      	bne.n	8003560 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	4b7e      	ldr	r3, [pc, #504]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d05b      	beq.n	800360c <HAL_RCC_OscConfig+0x108>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d157      	bne.n	800360c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e242      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003568:	d106      	bne.n	8003578 <HAL_RCC_OscConfig+0x74>
 800356a:	4b76      	ldr	r3, [pc, #472]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a75      	ldr	r2, [pc, #468]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e01d      	b.n	80035b4 <HAL_RCC_OscConfig+0xb0>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003580:	d10c      	bne.n	800359c <HAL_RCC_OscConfig+0x98>
 8003582:	4b70      	ldr	r3, [pc, #448]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a6f      	ldr	r2, [pc, #444]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	4b6d      	ldr	r3, [pc, #436]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a6c      	ldr	r2, [pc, #432]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e00b      	b.n	80035b4 <HAL_RCC_OscConfig+0xb0>
 800359c:	4b69      	ldr	r3, [pc, #420]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a68      	ldr	r2, [pc, #416]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 80035a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	4b66      	ldr	r3, [pc, #408]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a65      	ldr	r2, [pc, #404]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 80035ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d013      	beq.n	80035e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fe f9ca 	bl	8001954 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c4:	f7fe f9c6 	bl	8001954 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e207      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b5b      	ldr	r3, [pc, #364]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0xc0>
 80035e2:	e014      	b.n	800360e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fe f9b6 	bl	8001954 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ec:	f7fe f9b2 	bl	8001954 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e1f3      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fe:	4b51      	ldr	r3, [pc, #324]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0xe8>
 800360a:	e000      	b.n	800360e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d063      	beq.n	80036e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800361a:	4b4a      	ldr	r3, [pc, #296]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00b      	beq.n	800363e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003626:	4b47      	ldr	r3, [pc, #284]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800362e:	2b08      	cmp	r3, #8
 8003630:	d11c      	bne.n	800366c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003632:	4b44      	ldr	r3, [pc, #272]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d116      	bne.n	800366c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363e:	4b41      	ldr	r3, [pc, #260]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <HAL_RCC_OscConfig+0x152>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d001      	beq.n	8003656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e1c7      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003656:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4937      	ldr	r1, [pc, #220]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003666:	4313      	orrs	r3, r2
 8003668:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366a:	e03a      	b.n	80036e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d020      	beq.n	80036b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003674:	4b34      	ldr	r3, [pc, #208]	; (8003748 <HAL_RCC_OscConfig+0x244>)
 8003676:	2201      	movs	r2, #1
 8003678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367a:	f7fe f96b 	bl	8001954 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003682:	f7fe f967 	bl	8001954 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e1a8      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003694:	4b2b      	ldr	r3, [pc, #172]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a0:	4b28      	ldr	r3, [pc, #160]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4925      	ldr	r1, [pc, #148]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	600b      	str	r3, [r1, #0]
 80036b4:	e015      	b.n	80036e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b6:	4b24      	ldr	r3, [pc, #144]	; (8003748 <HAL_RCC_OscConfig+0x244>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fe f94a 	bl	8001954 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c4:	f7fe f946 	bl	8001954 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e187      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d6:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d036      	beq.n	800375c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d016      	beq.n	8003724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036f6:	4b15      	ldr	r3, [pc, #84]	; (800374c <HAL_RCC_OscConfig+0x248>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7fe f92a 	bl	8001954 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003704:	f7fe f926 	bl	8001954 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e167      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003716:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0x200>
 8003722:	e01b      	b.n	800375c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003724:	4b09      	ldr	r3, [pc, #36]	; (800374c <HAL_RCC_OscConfig+0x248>)
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372a:	f7fe f913 	bl	8001954 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003730:	e00e      	b.n	8003750 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003732:	f7fe f90f 	bl	8001954 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d907      	bls.n	8003750 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e150      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
 8003744:	40023800 	.word	0x40023800
 8003748:	42470000 	.word	0x42470000
 800374c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003750:	4b88      	ldr	r3, [pc, #544]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1ea      	bne.n	8003732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8097 	beq.w	8003898 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800376a:	2300      	movs	r3, #0
 800376c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800376e:	4b81      	ldr	r3, [pc, #516]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10f      	bne.n	800379a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	4b7d      	ldr	r3, [pc, #500]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	4a7c      	ldr	r2, [pc, #496]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003788:	6413      	str	r3, [r2, #64]	; 0x40
 800378a:	4b7a      	ldr	r3, [pc, #488]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003796:	2301      	movs	r3, #1
 8003798:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379a:	4b77      	ldr	r3, [pc, #476]	; (8003978 <HAL_RCC_OscConfig+0x474>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d118      	bne.n	80037d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a6:	4b74      	ldr	r3, [pc, #464]	; (8003978 <HAL_RCC_OscConfig+0x474>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a73      	ldr	r2, [pc, #460]	; (8003978 <HAL_RCC_OscConfig+0x474>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b2:	f7fe f8cf 	bl	8001954 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ba:	f7fe f8cb 	bl	8001954 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e10c      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037cc:	4b6a      	ldr	r3, [pc, #424]	; (8003978 <HAL_RCC_OscConfig+0x474>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d106      	bne.n	80037ee <HAL_RCC_OscConfig+0x2ea>
 80037e0:	4b64      	ldr	r3, [pc, #400]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	4a63      	ldr	r2, [pc, #396]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	6713      	str	r3, [r2, #112]	; 0x70
 80037ec:	e01c      	b.n	8003828 <HAL_RCC_OscConfig+0x324>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b05      	cmp	r3, #5
 80037f4:	d10c      	bne.n	8003810 <HAL_RCC_OscConfig+0x30c>
 80037f6:	4b5f      	ldr	r3, [pc, #380]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	4a5e      	ldr	r2, [pc, #376]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 80037fc:	f043 0304 	orr.w	r3, r3, #4
 8003800:	6713      	str	r3, [r2, #112]	; 0x70
 8003802:	4b5c      	ldr	r3, [pc, #368]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	4a5b      	ldr	r2, [pc, #364]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	6713      	str	r3, [r2, #112]	; 0x70
 800380e:	e00b      	b.n	8003828 <HAL_RCC_OscConfig+0x324>
 8003810:	4b58      	ldr	r3, [pc, #352]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003814:	4a57      	ldr	r2, [pc, #348]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003816:	f023 0301 	bic.w	r3, r3, #1
 800381a:	6713      	str	r3, [r2, #112]	; 0x70
 800381c:	4b55      	ldr	r3, [pc, #340]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	4a54      	ldr	r2, [pc, #336]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003822:	f023 0304 	bic.w	r3, r3, #4
 8003826:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d015      	beq.n	800385c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fe f890 	bl	8001954 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003836:	e00a      	b.n	800384e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003838:	f7fe f88c 	bl	8001954 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f241 3288 	movw	r2, #5000	; 0x1388
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e0cb      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384e:	4b49      	ldr	r3, [pc, #292]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0ee      	beq.n	8003838 <HAL_RCC_OscConfig+0x334>
 800385a:	e014      	b.n	8003886 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385c:	f7fe f87a 	bl	8001954 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003862:	e00a      	b.n	800387a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003864:	f7fe f876 	bl	8001954 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e0b5      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387a:	4b3e      	ldr	r3, [pc, #248]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1ee      	bne.n	8003864 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003886:	7dfb      	ldrb	r3, [r7, #23]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d105      	bne.n	8003898 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800388c:	4b39      	ldr	r3, [pc, #228]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	4a38      	ldr	r2, [pc, #224]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003896:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 80a1 	beq.w	80039e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038a2:	4b34      	ldr	r3, [pc, #208]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d05c      	beq.n	8003968 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d141      	bne.n	800393a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b6:	4b31      	ldr	r3, [pc, #196]	; (800397c <HAL_RCC_OscConfig+0x478>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038bc:	f7fe f84a 	bl	8001954 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c4:	f7fe f846 	bl	8001954 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e087      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d6:	4b27      	ldr	r3, [pc, #156]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	019b      	lsls	r3, r3, #6
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	085b      	lsrs	r3, r3, #1
 80038fa:	3b01      	subs	r3, #1
 80038fc:	041b      	lsls	r3, r3, #16
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	061b      	lsls	r3, r3, #24
 8003906:	491b      	ldr	r1, [pc, #108]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800390c:	4b1b      	ldr	r3, [pc, #108]	; (800397c <HAL_RCC_OscConfig+0x478>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003912:	f7fe f81f 	bl	8001954 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391a:	f7fe f81b 	bl	8001954 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e05c      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x416>
 8003938:	e054      	b.n	80039e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	4b10      	ldr	r3, [pc, #64]	; (800397c <HAL_RCC_OscConfig+0x478>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fe f808 	bl	8001954 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003948:	f7fe f804 	bl	8001954 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e045      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x444>
 8003966:	e03d      	b.n	80039e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d107      	bne.n	8003980 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e038      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
 8003974:	40023800 	.word	0x40023800
 8003978:	40007000 	.word	0x40007000
 800397c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003980:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <HAL_RCC_OscConfig+0x4ec>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d028      	beq.n	80039e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d121      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d11a      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039b0:	4013      	ands	r3, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d111      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	085b      	lsrs	r3, r3, #1
 80039c8:	3b01      	subs	r3, #1
 80039ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d107      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800

080039f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0cc      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a08:	4b68      	ldr	r3, [pc, #416]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d90c      	bls.n	8003a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a16:	4b65      	ldr	r3, [pc, #404]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b63      	ldr	r3, [pc, #396]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0b8      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a48:	4b59      	ldr	r3, [pc, #356]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a58      	ldr	r2, [pc, #352]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a60:	4b53      	ldr	r3, [pc, #332]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	4a52      	ldr	r2, [pc, #328]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a6c:	4b50      	ldr	r3, [pc, #320]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	494d      	ldr	r1, [pc, #308]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d044      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	4b47      	ldr	r3, [pc, #284]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d119      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e07f      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d003      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	d107      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab2:	4b3f      	ldr	r3, [pc, #252]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e06f      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac2:	4b3b      	ldr	r3, [pc, #236]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e067      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ad2:	4b37      	ldr	r3, [pc, #220]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f023 0203 	bic.w	r2, r3, #3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4934      	ldr	r1, [pc, #208]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ae4:	f7fd ff36 	bl	8001954 <HAL_GetTick>
 8003ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aea:	e00a      	b.n	8003b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aec:	f7fd ff32 	bl	8001954 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e04f      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b02:	4b2b      	ldr	r3, [pc, #172]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 020c 	and.w	r2, r3, #12
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d1eb      	bne.n	8003aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b14:	4b25      	ldr	r3, [pc, #148]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d20c      	bcs.n	8003b3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b22      	ldr	r3, [pc, #136]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b20      	ldr	r3, [pc, #128]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e032      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b48:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4916      	ldr	r1, [pc, #88]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b66:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	490e      	ldr	r1, [pc, #56]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b7a:	f000 f821 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	490a      	ldr	r1, [pc, #40]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b8c:	5ccb      	ldrb	r3, [r1, r3]
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	4a09      	ldr	r2, [pc, #36]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fd fe96 	bl	80018cc <HAL_InitTick>

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40023c00 	.word	0x40023c00
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	0800b9a8 	.word	0x0800b9a8
 8003bb8:	20000000 	.word	0x20000000
 8003bbc:	20000004 	.word	0x20000004

08003bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bc4:	b094      	sub	sp, #80	; 0x50
 8003bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	647b      	str	r3, [r7, #68]	; 0x44
 8003bcc:	2300      	movs	r3, #0
 8003bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bd8:	4b79      	ldr	r3, [pc, #484]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d00d      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0x40>
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	f200 80e1 	bhi.w	8003dac <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d003      	beq.n	8003bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8003bf2:	e0db      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bf4:	4b73      	ldr	r3, [pc, #460]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bf6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003bf8:	e0db      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bfa:	4b73      	ldr	r3, [pc, #460]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bfe:	e0d8      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c00:	4b6f      	ldr	r3, [pc, #444]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c0a:	4b6d      	ldr	r3, [pc, #436]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d063      	beq.n	8003cde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c16:	4b6a      	ldr	r3, [pc, #424]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	099b      	lsrs	r3, r3, #6
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c28:	633b      	str	r3, [r7, #48]	; 0x30
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c32:	4622      	mov	r2, r4
 8003c34:	462b      	mov	r3, r5
 8003c36:	f04f 0000 	mov.w	r0, #0
 8003c3a:	f04f 0100 	mov.w	r1, #0
 8003c3e:	0159      	lsls	r1, r3, #5
 8003c40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c44:	0150      	lsls	r0, r2, #5
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	1a51      	subs	r1, r2, r1
 8003c4e:	6139      	str	r1, [r7, #16]
 8003c50:	4629      	mov	r1, r5
 8003c52:	eb63 0301 	sbc.w	r3, r3, r1
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c64:	4659      	mov	r1, fp
 8003c66:	018b      	lsls	r3, r1, #6
 8003c68:	4651      	mov	r1, sl
 8003c6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c6e:	4651      	mov	r1, sl
 8003c70:	018a      	lsls	r2, r1, #6
 8003c72:	4651      	mov	r1, sl
 8003c74:	ebb2 0801 	subs.w	r8, r2, r1
 8003c78:	4659      	mov	r1, fp
 8003c7a:	eb63 0901 	sbc.w	r9, r3, r1
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c92:	4690      	mov	r8, r2
 8003c94:	4699      	mov	r9, r3
 8003c96:	4623      	mov	r3, r4
 8003c98:	eb18 0303 	adds.w	r3, r8, r3
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	462b      	mov	r3, r5
 8003ca0:	eb49 0303 	adc.w	r3, r9, r3
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cb2:	4629      	mov	r1, r5
 8003cb4:	024b      	lsls	r3, r1, #9
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	024a      	lsls	r2, r1, #9
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ccc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cd0:	f7fc ff7a 	bl	8000bc8 <__aeabi_uldivmod>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4613      	mov	r3, r2
 8003cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cdc:	e058      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cde:	4b38      	ldr	r3, [pc, #224]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	099b      	lsrs	r3, r3, #6
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	4611      	mov	r1, r2
 8003cea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cee:	623b      	str	r3, [r7, #32]
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	f04f 0000 	mov.w	r0, #0
 8003d00:	f04f 0100 	mov.w	r1, #0
 8003d04:	0159      	lsls	r1, r3, #5
 8003d06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d0a:	0150      	lsls	r0, r2, #5
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4641      	mov	r1, r8
 8003d12:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d16:	4649      	mov	r1, r9
 8003d18:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d30:	ebb2 040a 	subs.w	r4, r2, sl
 8003d34:	eb63 050b 	sbc.w	r5, r3, fp
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	00eb      	lsls	r3, r5, #3
 8003d42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d46:	00e2      	lsls	r2, r4, #3
 8003d48:	4614      	mov	r4, r2
 8003d4a:	461d      	mov	r5, r3
 8003d4c:	4643      	mov	r3, r8
 8003d4e:	18e3      	adds	r3, r4, r3
 8003d50:	603b      	str	r3, [r7, #0]
 8003d52:	464b      	mov	r3, r9
 8003d54:	eb45 0303 	adc.w	r3, r5, r3
 8003d58:	607b      	str	r3, [r7, #4]
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d66:	4629      	mov	r1, r5
 8003d68:	028b      	lsls	r3, r1, #10
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d70:	4621      	mov	r1, r4
 8003d72:	028a      	lsls	r2, r1, #10
 8003d74:	4610      	mov	r0, r2
 8003d76:	4619      	mov	r1, r3
 8003d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	61bb      	str	r3, [r7, #24]
 8003d7e:	61fa      	str	r2, [r7, #28]
 8003d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d84:	f7fc ff20 	bl	8000bc8 <__aeabi_uldivmod>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	0c1b      	lsrs	r3, r3, #16
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003da0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003daa:	e002      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3750      	adds	r7, #80	; 0x50
 8003db8:	46bd      	mov	sp, r7
 8003dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	00f42400 	.word	0x00f42400
 8003dc8:	007a1200 	.word	0x007a1200

08003dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	20000000 	.word	0x20000000

08003de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e041      	b.n	8003e7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fd fb7a 	bl	8001504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	4619      	mov	r1, r3
 8003e22:	4610      	mov	r0, r2
 8003e24:	f000 fb54 	bl	80044d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d001      	beq.n	8003e9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e046      	b.n	8003f2a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a23      	ldr	r2, [pc, #140]	; (8003f38 <HAL_TIM_Base_Start+0xb4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d022      	beq.n	8003ef4 <HAL_TIM_Base_Start+0x70>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb6:	d01d      	beq.n	8003ef4 <HAL_TIM_Base_Start+0x70>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1f      	ldr	r2, [pc, #124]	; (8003f3c <HAL_TIM_Base_Start+0xb8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d018      	beq.n	8003ef4 <HAL_TIM_Base_Start+0x70>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1e      	ldr	r2, [pc, #120]	; (8003f40 <HAL_TIM_Base_Start+0xbc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d013      	beq.n	8003ef4 <HAL_TIM_Base_Start+0x70>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1c      	ldr	r2, [pc, #112]	; (8003f44 <HAL_TIM_Base_Start+0xc0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00e      	beq.n	8003ef4 <HAL_TIM_Base_Start+0x70>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <HAL_TIM_Base_Start+0xc4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d009      	beq.n	8003ef4 <HAL_TIM_Base_Start+0x70>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a19      	ldr	r2, [pc, #100]	; (8003f4c <HAL_TIM_Base_Start+0xc8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <HAL_TIM_Base_Start+0x70>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a18      	ldr	r2, [pc, #96]	; (8003f50 <HAL_TIM_Base_Start+0xcc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d111      	bne.n	8003f18 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b06      	cmp	r3, #6
 8003f04:	d010      	beq.n	8003f28 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f16:	e007      	b.n	8003f28 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40000800 	.word	0x40000800
 8003f44:	40000c00 	.word	0x40000c00
 8003f48:	40010400 	.word	0x40010400
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40001800 	.word	0x40001800

08003f54 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6a1a      	ldr	r2, [r3, #32]
 8003f62:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10f      	bne.n	8003f8c <HAL_TIM_Base_Stop+0x38>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6a1a      	ldr	r2, [r3, #32]
 8003f72:	f240 4344 	movw	r3, #1092	; 0x444
 8003f76:	4013      	ands	r3, r2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d107      	bne.n	8003f8c <HAL_TIM_Base_Stop+0x38>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0201 	bic.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d001      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e04e      	b.n	800405a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a23      	ldr	r2, [pc, #140]	; (8004068 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d022      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe6:	d01d      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1f      	ldr	r2, [pc, #124]	; (800406c <HAL_TIM_Base_Start_IT+0xc8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d018      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d013      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1c      	ldr	r2, [pc, #112]	; (8004074 <HAL_TIM_Base_Start_IT+0xd0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00e      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1b      	ldr	r2, [pc, #108]	; (8004078 <HAL_TIM_Base_Start_IT+0xd4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d009      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a19      	ldr	r2, [pc, #100]	; (800407c <HAL_TIM_Base_Start_IT+0xd8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d004      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a18      	ldr	r2, [pc, #96]	; (8004080 <HAL_TIM_Base_Start_IT+0xdc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d111      	bne.n	8004048 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b06      	cmp	r3, #6
 8004034:	d010      	beq.n	8004058 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0201 	orr.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004046:	e007      	b.n	8004058 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40010000 	.word	0x40010000
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800
 8004074:	40000c00 	.word	0x40000c00
 8004078:	40010400 	.word	0x40010400
 800407c:	40014000 	.word	0x40014000
 8004080:	40001800 	.word	0x40001800

08004084 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0201 	bic.w	r2, r2, #1
 800409a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6a1a      	ldr	r2, [r3, #32]
 80040a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10f      	bne.n	80040cc <HAL_TIM_Base_Stop_IT+0x48>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6a1a      	ldr	r2, [r3, #32]
 80040b2:	f240 4344 	movw	r3, #1092	; 0x444
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d107      	bne.n	80040cc <HAL_TIM_Base_Stop_IT+0x48>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0201 	bic.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d122      	bne.n	800413e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b02      	cmp	r3, #2
 8004104:	d11b      	bne.n	800413e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f06f 0202 	mvn.w	r2, #2
 800410e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	f003 0303 	and.w	r3, r3, #3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f9b5 	bl	8004494 <HAL_TIM_IC_CaptureCallback>
 800412a:	e005      	b.n	8004138 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f9a7 	bl	8004480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f9b8 	bl	80044a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b04      	cmp	r3, #4
 800414a:	d122      	bne.n	8004192 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b04      	cmp	r3, #4
 8004158:	d11b      	bne.n	8004192 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f06f 0204 	mvn.w	r2, #4
 8004162:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f98b 	bl	8004494 <HAL_TIM_IC_CaptureCallback>
 800417e:	e005      	b.n	800418c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f97d 	bl	8004480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f98e 	bl	80044a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b08      	cmp	r3, #8
 800419e:	d122      	bne.n	80041e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d11b      	bne.n	80041e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f06f 0208 	mvn.w	r2, #8
 80041b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2204      	movs	r2, #4
 80041bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f961 	bl	8004494 <HAL_TIM_IC_CaptureCallback>
 80041d2:	e005      	b.n	80041e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f953 	bl	8004480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f964 	bl	80044a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d122      	bne.n	800423a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f003 0310 	and.w	r3, r3, #16
 80041fe:	2b10      	cmp	r3, #16
 8004200:	d11b      	bne.n	800423a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f06f 0210 	mvn.w	r2, #16
 800420a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2208      	movs	r2, #8
 8004210:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f937 	bl	8004494 <HAL_TIM_IC_CaptureCallback>
 8004226:	e005      	b.n	8004234 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f929 	bl	8004480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f93a 	bl	80044a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d10e      	bne.n	8004266 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b01      	cmp	r3, #1
 8004254:	d107      	bne.n	8004266 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f06f 0201 	mvn.w	r2, #1
 800425e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7fd f8fd 	bl	8001460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004270:	2b80      	cmp	r3, #128	; 0x80
 8004272:	d10e      	bne.n	8004292 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427e:	2b80      	cmp	r3, #128	; 0x80
 8004280:	d107      	bne.n	8004292 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800428a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 fadf 	bl	8004850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d10e      	bne.n	80042be <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b40      	cmp	r3, #64	; 0x40
 80042ac:	d107      	bne.n	80042be <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f8ff 	bl	80044bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d10e      	bne.n	80042ea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d107      	bne.n	80042ea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f06f 0220 	mvn.w	r2, #32
 80042e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 faa9 	bl	800483c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_TIM_ConfigClockSource+0x1c>
 800430a:	2302      	movs	r3, #2
 800430c:	e0b4      	b.n	8004478 <HAL_TIM_ConfigClockSource+0x186>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2202      	movs	r2, #2
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800432c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004334:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004346:	d03e      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0xd4>
 8004348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800434c:	f200 8087 	bhi.w	800445e <HAL_TIM_ConfigClockSource+0x16c>
 8004350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004354:	f000 8086 	beq.w	8004464 <HAL_TIM_ConfigClockSource+0x172>
 8004358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435c:	d87f      	bhi.n	800445e <HAL_TIM_ConfigClockSource+0x16c>
 800435e:	2b70      	cmp	r3, #112	; 0x70
 8004360:	d01a      	beq.n	8004398 <HAL_TIM_ConfigClockSource+0xa6>
 8004362:	2b70      	cmp	r3, #112	; 0x70
 8004364:	d87b      	bhi.n	800445e <HAL_TIM_ConfigClockSource+0x16c>
 8004366:	2b60      	cmp	r3, #96	; 0x60
 8004368:	d050      	beq.n	800440c <HAL_TIM_ConfigClockSource+0x11a>
 800436a:	2b60      	cmp	r3, #96	; 0x60
 800436c:	d877      	bhi.n	800445e <HAL_TIM_ConfigClockSource+0x16c>
 800436e:	2b50      	cmp	r3, #80	; 0x50
 8004370:	d03c      	beq.n	80043ec <HAL_TIM_ConfigClockSource+0xfa>
 8004372:	2b50      	cmp	r3, #80	; 0x50
 8004374:	d873      	bhi.n	800445e <HAL_TIM_ConfigClockSource+0x16c>
 8004376:	2b40      	cmp	r3, #64	; 0x40
 8004378:	d058      	beq.n	800442c <HAL_TIM_ConfigClockSource+0x13a>
 800437a:	2b40      	cmp	r3, #64	; 0x40
 800437c:	d86f      	bhi.n	800445e <HAL_TIM_ConfigClockSource+0x16c>
 800437e:	2b30      	cmp	r3, #48	; 0x30
 8004380:	d064      	beq.n	800444c <HAL_TIM_ConfigClockSource+0x15a>
 8004382:	2b30      	cmp	r3, #48	; 0x30
 8004384:	d86b      	bhi.n	800445e <HAL_TIM_ConfigClockSource+0x16c>
 8004386:	2b20      	cmp	r3, #32
 8004388:	d060      	beq.n	800444c <HAL_TIM_ConfigClockSource+0x15a>
 800438a:	2b20      	cmp	r3, #32
 800438c:	d867      	bhi.n	800445e <HAL_TIM_ConfigClockSource+0x16c>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d05c      	beq.n	800444c <HAL_TIM_ConfigClockSource+0x15a>
 8004392:	2b10      	cmp	r3, #16
 8004394:	d05a      	beq.n	800444c <HAL_TIM_ConfigClockSource+0x15a>
 8004396:	e062      	b.n	800445e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	6899      	ldr	r1, [r3, #8]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f000 f9ac 	bl	8004704 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	609a      	str	r2, [r3, #8]
      break;
 80043c4:	e04f      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6899      	ldr	r1, [r3, #8]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f000 f995 	bl	8004704 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043e8:	609a      	str	r2, [r3, #8]
      break;
 80043ea:	e03c      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	6859      	ldr	r1, [r3, #4]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	461a      	mov	r2, r3
 80043fa:	f000 f909 	bl	8004610 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2150      	movs	r1, #80	; 0x50
 8004404:	4618      	mov	r0, r3
 8004406:	f000 f962 	bl	80046ce <TIM_ITRx_SetConfig>
      break;
 800440a:	e02c      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	461a      	mov	r2, r3
 800441a:	f000 f928 	bl	800466e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2160      	movs	r1, #96	; 0x60
 8004424:	4618      	mov	r0, r3
 8004426:	f000 f952 	bl	80046ce <TIM_ITRx_SetConfig>
      break;
 800442a:	e01c      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6818      	ldr	r0, [r3, #0]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	6859      	ldr	r1, [r3, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	461a      	mov	r2, r3
 800443a:	f000 f8e9 	bl	8004610 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2140      	movs	r1, #64	; 0x40
 8004444:	4618      	mov	r0, r3
 8004446:	f000 f942 	bl	80046ce <TIM_ITRx_SetConfig>
      break;
 800444a:	e00c      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4619      	mov	r1, r3
 8004456:	4610      	mov	r0, r2
 8004458:	f000 f939 	bl	80046ce <TIM_ITRx_SetConfig>
      break;
 800445c:	e003      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
      break;
 8004462:	e000      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004464:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004476:	7bfb      	ldrb	r3, [r7, #15]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a40      	ldr	r2, [pc, #256]	; (80045e4 <TIM_Base_SetConfig+0x114>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d013      	beq.n	8004510 <TIM_Base_SetConfig+0x40>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ee:	d00f      	beq.n	8004510 <TIM_Base_SetConfig+0x40>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a3d      	ldr	r2, [pc, #244]	; (80045e8 <TIM_Base_SetConfig+0x118>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00b      	beq.n	8004510 <TIM_Base_SetConfig+0x40>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a3c      	ldr	r2, [pc, #240]	; (80045ec <TIM_Base_SetConfig+0x11c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d007      	beq.n	8004510 <TIM_Base_SetConfig+0x40>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a3b      	ldr	r2, [pc, #236]	; (80045f0 <TIM_Base_SetConfig+0x120>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d003      	beq.n	8004510 <TIM_Base_SetConfig+0x40>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a3a      	ldr	r2, [pc, #232]	; (80045f4 <TIM_Base_SetConfig+0x124>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d108      	bne.n	8004522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2f      	ldr	r2, [pc, #188]	; (80045e4 <TIM_Base_SetConfig+0x114>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d02b      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004530:	d027      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a2c      	ldr	r2, [pc, #176]	; (80045e8 <TIM_Base_SetConfig+0x118>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d023      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a2b      	ldr	r2, [pc, #172]	; (80045ec <TIM_Base_SetConfig+0x11c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01f      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a2a      	ldr	r2, [pc, #168]	; (80045f0 <TIM_Base_SetConfig+0x120>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d01b      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a29      	ldr	r2, [pc, #164]	; (80045f4 <TIM_Base_SetConfig+0x124>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d017      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a28      	ldr	r2, [pc, #160]	; (80045f8 <TIM_Base_SetConfig+0x128>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d013      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a27      	ldr	r2, [pc, #156]	; (80045fc <TIM_Base_SetConfig+0x12c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00f      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a26      	ldr	r2, [pc, #152]	; (8004600 <TIM_Base_SetConfig+0x130>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00b      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a25      	ldr	r2, [pc, #148]	; (8004604 <TIM_Base_SetConfig+0x134>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d007      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a24      	ldr	r2, [pc, #144]	; (8004608 <TIM_Base_SetConfig+0x138>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d003      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a23      	ldr	r2, [pc, #140]	; (800460c <TIM_Base_SetConfig+0x13c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d108      	bne.n	8004594 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4313      	orrs	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <TIM_Base_SetConfig+0x114>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <TIM_Base_SetConfig+0xf8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a0c      	ldr	r2, [pc, #48]	; (80045f4 <TIM_Base_SetConfig+0x124>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d103      	bne.n	80045d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	615a      	str	r2, [r3, #20]
}
 80045d6:	bf00      	nop
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40010000 	.word	0x40010000
 80045e8:	40000400 	.word	0x40000400
 80045ec:	40000800 	.word	0x40000800
 80045f0:	40000c00 	.word	0x40000c00
 80045f4:	40010400 	.word	0x40010400
 80045f8:	40014000 	.word	0x40014000
 80045fc:	40014400 	.word	0x40014400
 8004600:	40014800 	.word	0x40014800
 8004604:	40001800 	.word	0x40001800
 8004608:	40001c00 	.word	0x40001c00
 800460c:	40002000 	.word	0x40002000

08004610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f023 0201 	bic.w	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800463a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f023 030a 	bic.w	r3, r3, #10
 800464c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	621a      	str	r2, [r3, #32]
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800466e:	b480      	push	{r7}
 8004670:	b087      	sub	sp, #28
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	f023 0210 	bic.w	r2, r3, #16
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004698:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	031b      	lsls	r3, r3, #12
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	621a      	str	r2, [r3, #32]
}
 80046c2:	bf00      	nop
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f043 0307 	orr.w	r3, r3, #7
 80046f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	609a      	str	r2, [r3, #8]
}
 80046f8:	bf00      	nop
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800471e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	021a      	lsls	r2, r3, #8
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	431a      	orrs	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4313      	orrs	r3, r2
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	609a      	str	r2, [r3, #8]
}
 8004738:	bf00      	nop
 800473a:	371c      	adds	r7, #28
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004758:	2302      	movs	r3, #2
 800475a:	e05a      	b.n	8004812 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a21      	ldr	r2, [pc, #132]	; (8004820 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d022      	beq.n	80047e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a8:	d01d      	beq.n	80047e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d018      	beq.n	80047e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1b      	ldr	r2, [pc, #108]	; (8004828 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1a      	ldr	r2, [pc, #104]	; (800482c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00e      	beq.n	80047e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a18      	ldr	r2, [pc, #96]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d009      	beq.n	80047e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a17      	ldr	r2, [pc, #92]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a15      	ldr	r2, [pc, #84]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d10c      	bne.n	8004800 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40010000 	.word	0x40010000
 8004824:	40000400 	.word	0x40000400
 8004828:	40000800 	.word	0x40000800
 800482c:	40000c00 	.word	0x40000c00
 8004830:	40010400 	.word	0x40010400
 8004834:	40014000 	.word	0x40014000
 8004838:	40001800 	.word	0x40001800

0800483c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004864:	b084      	sub	sp, #16
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	f107 001c 	add.w	r0, r7, #28
 8004872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	2b01      	cmp	r3, #1
 800487a:	d122      	bne.n	80048c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80048a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d105      	bne.n	80048b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f001 fbee 	bl	8006098 <USB_CoreReset>
 80048bc:	4603      	mov	r3, r0
 80048be:	73fb      	strb	r3, [r7, #15]
 80048c0:	e01a      	b.n	80048f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f001 fbe2 	bl	8006098 <USB_CoreReset>
 80048d4:	4603      	mov	r3, r0
 80048d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80048d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	639a      	str	r2, [r3, #56]	; 0x38
 80048ea:	e005      	b.n	80048f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d10b      	bne.n	8004916 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f043 0206 	orr.w	r2, r3, #6
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f043 0220 	orr.w	r2, r3, #32
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004916:	7bfb      	ldrb	r3, [r7, #15]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004922:	b004      	add	sp, #16
 8004924:	4770      	bx	lr
	...

08004928 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	4613      	mov	r3, r2
 8004934:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	2b02      	cmp	r3, #2
 800493a:	d165      	bne.n	8004a08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4a41      	ldr	r2, [pc, #260]	; (8004a44 <USB_SetTurnaroundTime+0x11c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d906      	bls.n	8004952 <USB_SetTurnaroundTime+0x2a>
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4a40      	ldr	r2, [pc, #256]	; (8004a48 <USB_SetTurnaroundTime+0x120>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d202      	bcs.n	8004952 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800494c:	230f      	movs	r3, #15
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	e062      	b.n	8004a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	4a3c      	ldr	r2, [pc, #240]	; (8004a48 <USB_SetTurnaroundTime+0x120>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d306      	bcc.n	8004968 <USB_SetTurnaroundTime+0x40>
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4a3b      	ldr	r2, [pc, #236]	; (8004a4c <USB_SetTurnaroundTime+0x124>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d202      	bcs.n	8004968 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004962:	230e      	movs	r3, #14
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	e057      	b.n	8004a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4a38      	ldr	r2, [pc, #224]	; (8004a4c <USB_SetTurnaroundTime+0x124>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d306      	bcc.n	800497e <USB_SetTurnaroundTime+0x56>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4a37      	ldr	r2, [pc, #220]	; (8004a50 <USB_SetTurnaroundTime+0x128>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d202      	bcs.n	800497e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004978:	230d      	movs	r3, #13
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	e04c      	b.n	8004a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	4a33      	ldr	r2, [pc, #204]	; (8004a50 <USB_SetTurnaroundTime+0x128>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d306      	bcc.n	8004994 <USB_SetTurnaroundTime+0x6c>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	4a32      	ldr	r2, [pc, #200]	; (8004a54 <USB_SetTurnaroundTime+0x12c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d802      	bhi.n	8004994 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800498e:	230c      	movs	r3, #12
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	e041      	b.n	8004a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4a2f      	ldr	r2, [pc, #188]	; (8004a54 <USB_SetTurnaroundTime+0x12c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d906      	bls.n	80049aa <USB_SetTurnaroundTime+0x82>
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	4a2e      	ldr	r2, [pc, #184]	; (8004a58 <USB_SetTurnaroundTime+0x130>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d802      	bhi.n	80049aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80049a4:	230b      	movs	r3, #11
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	e036      	b.n	8004a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4a2a      	ldr	r2, [pc, #168]	; (8004a58 <USB_SetTurnaroundTime+0x130>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d906      	bls.n	80049c0 <USB_SetTurnaroundTime+0x98>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	4a29      	ldr	r2, [pc, #164]	; (8004a5c <USB_SetTurnaroundTime+0x134>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d802      	bhi.n	80049c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80049ba:	230a      	movs	r3, #10
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	e02b      	b.n	8004a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4a26      	ldr	r2, [pc, #152]	; (8004a5c <USB_SetTurnaroundTime+0x134>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d906      	bls.n	80049d6 <USB_SetTurnaroundTime+0xae>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4a25      	ldr	r2, [pc, #148]	; (8004a60 <USB_SetTurnaroundTime+0x138>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d202      	bcs.n	80049d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80049d0:	2309      	movs	r3, #9
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	e020      	b.n	8004a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	4a21      	ldr	r2, [pc, #132]	; (8004a60 <USB_SetTurnaroundTime+0x138>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d306      	bcc.n	80049ec <USB_SetTurnaroundTime+0xc4>
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	4a20      	ldr	r2, [pc, #128]	; (8004a64 <USB_SetTurnaroundTime+0x13c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d802      	bhi.n	80049ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80049e6:	2308      	movs	r3, #8
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	e015      	b.n	8004a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4a1d      	ldr	r2, [pc, #116]	; (8004a64 <USB_SetTurnaroundTime+0x13c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d906      	bls.n	8004a02 <USB_SetTurnaroundTime+0xda>
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4a1c      	ldr	r2, [pc, #112]	; (8004a68 <USB_SetTurnaroundTime+0x140>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d202      	bcs.n	8004a02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80049fc:	2307      	movs	r3, #7
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	e00a      	b.n	8004a18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004a02:	2306      	movs	r3, #6
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	e007      	b.n	8004a18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d102      	bne.n	8004a14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004a0e:	2309      	movs	r3, #9
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	e001      	b.n	8004a18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004a14:	2309      	movs	r3, #9
 8004a16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	029b      	lsls	r3, r3, #10
 8004a2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004a30:	431a      	orrs	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	371c      	adds	r7, #28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	00d8acbf 	.word	0x00d8acbf
 8004a48:	00e4e1c0 	.word	0x00e4e1c0
 8004a4c:	00f42400 	.word	0x00f42400
 8004a50:	01067380 	.word	0x01067380
 8004a54:	011a499f 	.word	0x011a499f
 8004a58:	01312cff 	.word	0x01312cff
 8004a5c:	014ca43f 	.word	0x014ca43f
 8004a60:	016e3600 	.word	0x016e3600
 8004a64:	01a6ab1f 	.word	0x01a6ab1f
 8004a68:	01e84800 	.word	0x01e84800

08004a6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f043 0201 	orr.w	r2, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f023 0201 	bic.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d115      	bne.n	8004afe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ade:	2001      	movs	r0, #1
 8004ae0:	f7fc ff44 	bl	800196c <HAL_Delay>
      ms++;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f001 fa45 	bl	8005f7a <USB_GetMode>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d01e      	beq.n	8004b34 <USB_SetCurrentMode+0x84>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b31      	cmp	r3, #49	; 0x31
 8004afa:	d9f0      	bls.n	8004ade <USB_SetCurrentMode+0x2e>
 8004afc:	e01a      	b.n	8004b34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004afe:	78fb      	ldrb	r3, [r7, #3]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d115      	bne.n	8004b30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b10:	2001      	movs	r0, #1
 8004b12:	f7fc ff2b 	bl	800196c <HAL_Delay>
      ms++;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f001 fa2c 	bl	8005f7a <USB_GetMode>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <USB_SetCurrentMode+0x84>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b31      	cmp	r3, #49	; 0x31
 8004b2c:	d9f0      	bls.n	8004b10 <USB_SetCurrentMode+0x60>
 8004b2e:	e001      	b.n	8004b34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e005      	b.n	8004b40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2b32      	cmp	r3, #50	; 0x32
 8004b38:	d101      	bne.n	8004b3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b48:	b084      	sub	sp, #16
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b086      	sub	sp, #24
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
 8004b66:	e009      	b.n	8004b7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	3340      	adds	r3, #64	; 0x40
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	2200      	movs	r2, #0
 8004b74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	613b      	str	r3, [r7, #16]
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2b0e      	cmp	r3, #14
 8004b80:	d9f2      	bls.n	8004b68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d11c      	bne.n	8004bc2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b96:	f043 0302 	orr.w	r3, r3, #2
 8004b9a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	639a      	str	r2, [r3, #56]	; 0x38
 8004bc0:	e00b      	b.n	8004bda <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004be0:	461a      	mov	r2, r3
 8004be2:	2300      	movs	r3, #0
 8004be4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bec:	4619      	mov	r1, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	680b      	ldr	r3, [r1, #0]
 8004bf8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d10c      	bne.n	8004c1a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d104      	bne.n	8004c10 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c06:	2100      	movs	r1, #0
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f965 	bl	8004ed8 <USB_SetDevSpeed>
 8004c0e:	e008      	b.n	8004c22 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c10:	2101      	movs	r1, #1
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f960 	bl	8004ed8 <USB_SetDevSpeed>
 8004c18:	e003      	b.n	8004c22 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c1a:	2103      	movs	r1, #3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f95b 	bl	8004ed8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c22:	2110      	movs	r1, #16
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f8f3 	bl	8004e10 <USB_FlushTxFifo>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f91f 	bl	8004e78 <USB_FlushRxFifo>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c56:	461a      	mov	r2, r3
 8004c58:	2300      	movs	r3, #0
 8004c5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c62:	461a      	mov	r2, r3
 8004c64:	2300      	movs	r3, #0
 8004c66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	e043      	b.n	8004cf6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c84:	d118      	bne.n	8004cb8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10a      	bne.n	8004ca2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	e013      	b.n	8004cca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	e008      	b.n	8004cca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	2300      	movs	r3, #0
 8004cda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d3b7      	bcc.n	8004c6e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cfe:	2300      	movs	r3, #0
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	e043      	b.n	8004d8c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d1a:	d118      	bne.n	8004d4e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10a      	bne.n	8004d38 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	e013      	b.n	8004d60 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d44:	461a      	mov	r2, r3
 8004d46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	e008      	b.n	8004d60 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	2300      	movs	r3, #0
 8004d70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d3b7      	bcc.n	8004d04 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004da2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004da6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004db4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d105      	bne.n	8004dc8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	f043 0210 	orr.w	r2, r3, #16
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699a      	ldr	r2, [r3, #24]
 8004dcc:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <USB_DevInit+0x2c4>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	f043 0208 	orr.w	r2, r3, #8
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d107      	bne.n	8004dfc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004df4:	f043 0304 	orr.w	r3, r3, #4
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e08:	b004      	add	sp, #16
 8004e0a:	4770      	bx	lr
 8004e0c:	803c3800 	.word	0x803c3800

08004e10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3301      	adds	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <USB_FlushTxFifo+0x64>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d901      	bls.n	8004e30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e01b      	b.n	8004e68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	daf2      	bge.n	8004e1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	019b      	lsls	r3, r3, #6
 8004e40:	f043 0220 	orr.w	r2, r3, #32
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4a08      	ldr	r2, [pc, #32]	; (8004e74 <USB_FlushTxFifo+0x64>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e006      	b.n	8004e68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d0f0      	beq.n	8004e48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	00030d40 	.word	0x00030d40

08004e78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3301      	adds	r3, #1
 8004e88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4a11      	ldr	r2, [pc, #68]	; (8004ed4 <USB_FlushRxFifo+0x5c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d901      	bls.n	8004e96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e018      	b.n	8004ec8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	daf2      	bge.n	8004e84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2210      	movs	r2, #16
 8004ea6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4a08      	ldr	r2, [pc, #32]	; (8004ed4 <USB_FlushRxFifo+0x5c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d901      	bls.n	8004eba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e006      	b.n	8004ec8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	2b10      	cmp	r3, #16
 8004ec4:	d0f0      	beq.n	8004ea8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	00030d40 	.word	0x00030d40

08004ed8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	68f9      	ldr	r1, [r7, #12]
 8004ef4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b087      	sub	sp, #28
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 0306 	and.w	r3, r3, #6
 8004f22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d102      	bne.n	8004f30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	75fb      	strb	r3, [r7, #23]
 8004f2e:	e00a      	b.n	8004f46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d002      	beq.n	8004f3c <USB_GetDevSpeed+0x32>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b06      	cmp	r3, #6
 8004f3a:	d102      	bne.n	8004f42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	75fb      	strb	r3, [r7, #23]
 8004f40:	e001      	b.n	8004f46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004f42:	230f      	movs	r3, #15
 8004f44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	785b      	ldrb	r3, [r3, #1]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d13a      	bne.n	8004fe6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f76:	69da      	ldr	r2, [r3, #28]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	2101      	movs	r1, #1
 8004f82:	fa01 f303 	lsl.w	r3, r1, r3
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	68f9      	ldr	r1, [r7, #12]
 8004f8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d155      	bne.n	8005054 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	791b      	ldrb	r3, [r3, #4]
 8004fc2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fc4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	059b      	lsls	r3, r3, #22
 8004fca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	0151      	lsls	r1, r2, #5
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	e036      	b.n	8005054 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fec:	69da      	ldr	r2, [r3, #28]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffc:	041b      	lsls	r3, r3, #16
 8004ffe:	68f9      	ldr	r1, [r7, #12]
 8005000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005004:	4313      	orrs	r3, r2
 8005006:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d11a      	bne.n	8005054 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	791b      	ldrb	r3, [r3, #4]
 8005038:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800503a:	430b      	orrs	r3, r1
 800503c:	4313      	orrs	r3, r2
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	0151      	lsls	r1, r2, #5
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	440a      	add	r2, r1
 8005046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800504a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800504e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005052:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
	...

08005064 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	785b      	ldrb	r3, [r3, #1]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d161      	bne.n	8005144 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005096:	d11f      	bne.n	80050d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	0151      	lsls	r1, r2, #5
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	440a      	add	r2, r1
 80050ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	0151      	lsls	r1, r2, #5
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	440a      	add	r2, r1
 80050ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	f003 030f 	and.w	r3, r3, #15
 80050e8:	2101      	movs	r1, #1
 80050ea:	fa01 f303 	lsl.w	r3, r1, r3
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	43db      	mvns	r3, r3
 80050f2:	68f9      	ldr	r1, [r7, #12]
 80050f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050f8:	4013      	ands	r3, r2
 80050fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005102:	69da      	ldr	r2, [r3, #28]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	f003 030f 	and.w	r3, r3, #15
 800510c:	2101      	movs	r1, #1
 800510e:	fa01 f303 	lsl.w	r3, r1, r3
 8005112:	b29b      	uxth	r3, r3
 8005114:	43db      	mvns	r3, r3
 8005116:	68f9      	ldr	r1, [r7, #12]
 8005118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800511c:	4013      	ands	r3, r2
 800511e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	0159      	lsls	r1, r3, #5
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	440b      	add	r3, r1
 8005136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513a:	4619      	mov	r1, r3
 800513c:	4b35      	ldr	r3, [pc, #212]	; (8005214 <USB_DeactivateEndpoint+0x1b0>)
 800513e:	4013      	ands	r3, r2
 8005140:	600b      	str	r3, [r1, #0]
 8005142:	e060      	b.n	8005206 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800515a:	d11f      	bne.n	800519c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	440a      	add	r2, r1
 8005172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005176:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800517a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	0151      	lsls	r1, r2, #5
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	440a      	add	r2, r1
 8005192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005196:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800519a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	2101      	movs	r1, #1
 80051ae:	fa01 f303 	lsl.w	r3, r1, r3
 80051b2:	041b      	lsls	r3, r3, #16
 80051b4:	43db      	mvns	r3, r3
 80051b6:	68f9      	ldr	r1, [r7, #12]
 80051b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051bc:	4013      	ands	r3, r2
 80051be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	2101      	movs	r1, #1
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	041b      	lsls	r3, r3, #16
 80051d8:	43db      	mvns	r3, r3
 80051da:	68f9      	ldr	r1, [r7, #12]
 80051dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051e0:	4013      	ands	r3, r2
 80051e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	0159      	lsls	r1, r3, #5
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	440b      	add	r3, r1
 80051fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fe:	4619      	mov	r1, r3
 8005200:	4b05      	ldr	r3, [pc, #20]	; (8005218 <USB_DeactivateEndpoint+0x1b4>)
 8005202:	4013      	ands	r3, r2
 8005204:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	ec337800 	.word	0xec337800
 8005218:	eff37800 	.word	0xeff37800

0800521c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	; 0x28
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	4613      	mov	r3, r2
 8005228:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	785b      	ldrb	r3, [r3, #1]
 8005238:	2b01      	cmp	r3, #1
 800523a:	f040 815c 	bne.w	80054f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d132      	bne.n	80052ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	0151      	lsls	r1, r2, #5
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	440a      	add	r2, r1
 800525c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005260:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005264:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005268:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	440a      	add	r2, r1
 8005280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005284:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005288:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a4:	0cdb      	lsrs	r3, r3, #19
 80052a6:	04db      	lsls	r3, r3, #19
 80052a8:	6113      	str	r3, [r2, #16]
 80052aa:	e074      	b.n	8005396 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	0151      	lsls	r1, r2, #5
 80052be:	69fa      	ldr	r2, [r7, #28]
 80052c0:	440a      	add	r2, r1
 80052c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c6:	0cdb      	lsrs	r3, r3, #19
 80052c8:	04db      	lsls	r3, r3, #19
 80052ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	6999      	ldr	r1, [r3, #24]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	440b      	add	r3, r1
 8005308:	1e59      	subs	r1, r3, #1
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005312:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005314:	4b9d      	ldr	r3, [pc, #628]	; (800558c <USB_EPStartXfer+0x370>)
 8005316:	400b      	ands	r3, r1
 8005318:	69b9      	ldr	r1, [r7, #24]
 800531a:	0148      	lsls	r0, r1, #5
 800531c:	69f9      	ldr	r1, [r7, #28]
 800531e:	4401      	add	r1, r0
 8005320:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005324:	4313      	orrs	r3, r2
 8005326:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800533e:	69b9      	ldr	r1, [r7, #24]
 8005340:	0148      	lsls	r0, r1, #5
 8005342:	69f9      	ldr	r1, [r7, #28]
 8005344:	4401      	add	r1, r0
 8005346:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800534a:	4313      	orrs	r3, r2
 800534c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	791b      	ldrb	r3, [r3, #4]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d11f      	bne.n	8005396 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	0151      	lsls	r1, r2, #5
 8005368:	69fa      	ldr	r2, [r7, #28]
 800536a:	440a      	add	r2, r1
 800536c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005370:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005374:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	440a      	add	r2, r1
 800538c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005390:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005394:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d14b      	bne.n	8005434 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d009      	beq.n	80053b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b0:	461a      	mov	r2, r3
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	791b      	ldrb	r3, [r3, #4]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d128      	bne.n	8005412 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d110      	bne.n	80053f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	0151      	lsls	r1, r2, #5
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	440a      	add	r2, r1
 80053e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	e00f      	b.n	8005412 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	440a      	add	r2, r1
 8005408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800540c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005410:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	69fa      	ldr	r2, [r7, #28]
 8005426:	440a      	add	r2, r1
 8005428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	e133      	b.n	800569c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	440a      	add	r2, r1
 800544a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005452:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	791b      	ldrb	r3, [r3, #4]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d015      	beq.n	8005488 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 811b 	beq.w	800569c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	2101      	movs	r1, #1
 8005478:	fa01 f303 	lsl.w	r3, r1, r3
 800547c:	69f9      	ldr	r1, [r7, #28]
 800547e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005482:	4313      	orrs	r3, r2
 8005484:	634b      	str	r3, [r1, #52]	; 0x34
 8005486:	e109      	b.n	800569c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005494:	2b00      	cmp	r3, #0
 8005496:	d110      	bne.n	80054ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	0151      	lsls	r1, r2, #5
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	440a      	add	r2, r1
 80054ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054b6:	6013      	str	r3, [r2, #0]
 80054b8:	e00f      	b.n	80054da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	6919      	ldr	r1, [r3, #16]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	781a      	ldrb	r2, [r3, #0]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	b298      	uxth	r0, r3
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	4603      	mov	r3, r0
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 fade 	bl	8005ab0 <USB_WritePacket>
 80054f4:	e0d2      	b.n	800569c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	69fa      	ldr	r2, [r7, #28]
 800550a:	440a      	add	r2, r1
 800550c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005510:	0cdb      	lsrs	r3, r3, #19
 8005512:	04db      	lsls	r3, r3, #19
 8005514:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	0151      	lsls	r1, r2, #5
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	440a      	add	r2, r1
 800552c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005530:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005534:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005538:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d126      	bne.n	8005590 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005558:	69b9      	ldr	r1, [r7, #24]
 800555a:	0148      	lsls	r0, r1, #5
 800555c:	69f9      	ldr	r1, [r7, #28]
 800555e:	4401      	add	r1, r0
 8005560:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005564:	4313      	orrs	r3, r2
 8005566:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	440a      	add	r2, r1
 800557e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005582:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005586:	6113      	str	r3, [r2, #16]
 8005588:	e03a      	b.n	8005600 <USB_EPStartXfer+0x3e4>
 800558a:	bf00      	nop
 800558c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	699a      	ldr	r2, [r3, #24]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	4413      	add	r3, r2
 800559a:	1e5a      	subs	r2, r3, #1
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	8afa      	ldrh	r2, [r7, #22]
 80055ac:	fb03 f202 	mul.w	r2, r3, r2
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	8afb      	ldrh	r3, [r7, #22]
 80055c4:	04d9      	lsls	r1, r3, #19
 80055c6:	4b38      	ldr	r3, [pc, #224]	; (80056a8 <USB_EPStartXfer+0x48c>)
 80055c8:	400b      	ands	r3, r1
 80055ca:	69b9      	ldr	r1, [r7, #24]
 80055cc:	0148      	lsls	r0, r1, #5
 80055ce:	69f9      	ldr	r1, [r7, #28]
 80055d0:	4401      	add	r1, r0
 80055d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055d6:	4313      	orrs	r3, r2
 80055d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055f0:	69b9      	ldr	r1, [r7, #24]
 80055f2:	0148      	lsls	r0, r1, #5
 80055f4:	69f9      	ldr	r1, [r7, #28]
 80055f6:	4401      	add	r1, r0
 80055f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055fc:	4313      	orrs	r3, r2
 80055fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005600:	79fb      	ldrb	r3, [r7, #7]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d10d      	bne.n	8005622 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	6919      	ldr	r1, [r3, #16]
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561e:	460a      	mov	r2, r1
 8005620:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	791b      	ldrb	r3, [r3, #4]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d128      	bne.n	800567c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d110      	bne.n	800565c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	69fa      	ldr	r2, [r7, #28]
 800564e:	440a      	add	r2, r1
 8005650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005654:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	e00f      	b.n	800567c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	0151      	lsls	r1, r2, #5
 800566e:	69fa      	ldr	r2, [r7, #28]
 8005670:	440a      	add	r2, r1
 8005672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800567a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	0151      	lsls	r1, r2, #5
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	440a      	add	r2, r1
 8005692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005696:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800569a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3720      	adds	r7, #32
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	1ff80000 	.word	0x1ff80000

080056ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	4613      	mov	r3, r2
 80056b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	785b      	ldrb	r3, [r3, #1]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	f040 80ce 	bne.w	800586a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d132      	bne.n	800573c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	0151      	lsls	r1, r2, #5
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	440a      	add	r2, r1
 80056ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	0151      	lsls	r1, r2, #5
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	440a      	add	r2, r1
 8005710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005714:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005718:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	0151      	lsls	r1, r2, #5
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	440a      	add	r2, r1
 8005730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005734:	0cdb      	lsrs	r3, r3, #19
 8005736:	04db      	lsls	r3, r3, #19
 8005738:	6113      	str	r3, [r2, #16]
 800573a:	e04e      	b.n	80057da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	0151      	lsls	r1, r2, #5
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	440a      	add	r2, r1
 8005752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005756:	0cdb      	lsrs	r3, r3, #19
 8005758:	04db      	lsls	r3, r3, #19
 800575a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	0151      	lsls	r1, r2, #5
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	440a      	add	r2, r1
 8005772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005776:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800577a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800577e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	699a      	ldr	r2, [r3, #24]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	429a      	cmp	r2, r3
 800578a:	d903      	bls.n	8005794 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c0:	691a      	ldr	r2, [r3, #16]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ca:	6939      	ldr	r1, [r7, #16]
 80057cc:	0148      	lsls	r0, r1, #5
 80057ce:	6979      	ldr	r1, [r7, #20]
 80057d0:	4401      	add	r1, r0
 80057d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057d6:	4313      	orrs	r3, r2
 80057d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d11e      	bne.n	800581e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d009      	beq.n	80057fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f4:	461a      	mov	r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	0151      	lsls	r1, r2, #5
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	440a      	add	r2, r1
 8005812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005816:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	e097      	b.n	800594e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	0151      	lsls	r1, r2, #5
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	440a      	add	r2, r1
 8005834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005838:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800583c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 8083 	beq.w	800594e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	f003 030f 	and.w	r3, r3, #15
 8005858:	2101      	movs	r1, #1
 800585a:	fa01 f303 	lsl.w	r3, r1, r3
 800585e:	6979      	ldr	r1, [r7, #20]
 8005860:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005864:	4313      	orrs	r3, r2
 8005866:	634b      	str	r3, [r1, #52]	; 0x34
 8005868:	e071      	b.n	800594e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	0151      	lsls	r1, r2, #5
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	440a      	add	r2, r1
 8005880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005884:	0cdb      	lsrs	r3, r3, #19
 8005886:	04db      	lsls	r3, r3, #19
 8005888:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	0151      	lsls	r1, r2, #5
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	440a      	add	r2, r1
 80058a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	0151      	lsls	r1, r2, #5
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	440a      	add	r2, r1
 80058dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f2:	691a      	ldr	r2, [r3, #16]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058fc:	6939      	ldr	r1, [r7, #16]
 80058fe:	0148      	lsls	r0, r1, #5
 8005900:	6979      	ldr	r1, [r7, #20]
 8005902:	4401      	add	r1, r0
 8005904:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005908:	4313      	orrs	r3, r2
 800590a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d10d      	bne.n	800592e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d009      	beq.n	800592e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	6919      	ldr	r1, [r3, #16]
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592a:	460a      	mov	r2, r1
 800592c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	0151      	lsls	r1, r2, #5
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	440a      	add	r2, r1
 8005944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005948:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800594c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	371c      	adds	r7, #28
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	785b      	ldrb	r3, [r3, #1]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d14a      	bne.n	8005a10 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800598e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005992:	f040 8086 	bne.w	8005aa2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	7812      	ldrb	r2, [r2, #0]
 80059aa:	0151      	lsls	r1, r2, #5
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	440a      	add	r2, r1
 80059b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	7812      	ldrb	r2, [r2, #0]
 80059ce:	0151      	lsls	r1, r2, #5
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	440a      	add	r2, r1
 80059d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3301      	adds	r3, #1
 80059e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d902      	bls.n	80059f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	75fb      	strb	r3, [r7, #23]
          break;
 80059f2:	e056      	b.n	8005aa2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a0c:	d0e7      	beq.n	80059de <USB_EPStopXfer+0x82>
 8005a0e:	e048      	b.n	8005aa2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a28:	d13b      	bne.n	8005aa2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	7812      	ldrb	r2, [r2, #0]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a4c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	7812      	ldrb	r2, [r2, #0]
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3301      	adds	r3, #1
 8005a76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d902      	bls.n	8005a88 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	75fb      	strb	r3, [r7, #23]
          break;
 8005a86:	e00c      	b.n	8005aa2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aa0:	d0e7      	beq.n	8005a72 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	371c      	adds	r7, #28
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b089      	sub	sp, #36	; 0x24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	4611      	mov	r1, r2
 8005abc:	461a      	mov	r2, r3
 8005abe:	460b      	mov	r3, r1
 8005ac0:	71fb      	strb	r3, [r7, #7]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ace:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d123      	bne.n	8005b1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ad6:	88bb      	ldrh	r3, [r7, #4]
 8005ad8:	3303      	adds	r3, #3
 8005ada:	089b      	lsrs	r3, r3, #2
 8005adc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61bb      	str	r3, [r7, #24]
 8005ae2:	e018      	b.n	8005b16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	031a      	lsls	r2, r3, #12
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af0:	461a      	mov	r2, r3
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	3301      	adds	r3, #1
 8005afc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	3301      	adds	r3, #1
 8005b02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	3301      	adds	r3, #1
 8005b08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	3301      	adds	r3, #1
 8005b14:	61bb      	str	r3, [r7, #24]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d3e2      	bcc.n	8005ae4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3724      	adds	r7, #36	; 0x24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b08b      	sub	sp, #44	; 0x2c
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	4613      	mov	r3, r2
 8005b38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	089b      	lsrs	r3, r3, #2
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b4a:	88fb      	ldrh	r3, [r7, #6]
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b52:	2300      	movs	r3, #0
 8005b54:	623b      	str	r3, [r7, #32]
 8005b56:	e014      	b.n	8005b82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	3301      	adds	r3, #1
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	3301      	adds	r3, #1
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	3301      	adds	r3, #1
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	623b      	str	r3, [r7, #32]
 8005b82:	6a3a      	ldr	r2, [r7, #32]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d3e6      	bcc.n	8005b58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b8a:	8bfb      	ldrh	r3, [r7, #30]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01e      	beq.n	8005bce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f107 0310 	add.w	r3, r7, #16
 8005ba0:	6812      	ldr	r2, [r2, #0]
 8005ba2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	701a      	strb	r2, [r3, #0]
      i++;
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005bc2:	8bfb      	ldrh	r3, [r7, #30]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005bc8:	8bfb      	ldrh	r3, [r7, #30]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1ea      	bne.n	8005ba4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	372c      	adds	r7, #44	; 0x2c
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d12c      	bne.n	8005c52 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	db12      	blt.n	8005c30 <USB_EPSetStall+0x54>
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00f      	beq.n	8005c30 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c2e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	0151      	lsls	r1, r2, #5
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	440a      	add	r2, r1
 8005c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	e02b      	b.n	8005caa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	db12      	blt.n	8005c8a <USB_EPSetStall+0xae>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00f      	beq.n	8005c8a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	0151      	lsls	r1, r2, #5
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	440a      	add	r2, r1
 8005c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c88:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	0151      	lsls	r1, r2, #5
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ca8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	785b      	ldrb	r3, [r3, #1]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d128      	bne.n	8005d26 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cf2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	791b      	ldrb	r3, [r3, #4]
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d003      	beq.n	8005d04 <USB_EPClearStall+0x4c>
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	791b      	ldrb	r3, [r3, #4]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d138      	bne.n	8005d76 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	e027      	b.n	8005d76 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	791b      	ldrb	r3, [r3, #4]
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d003      	beq.n	8005d56 <USB_EPClearStall+0x9e>
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	791b      	ldrb	r3, [r3, #4]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d10f      	bne.n	8005d76 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	0151      	lsls	r1, r2, #5
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d74:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005da2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005da6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005db8:	68f9      	ldr	r1, [r7, #12]
 8005dba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005dea:	f023 0303 	bic.w	r3, r3, #3
 8005dee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dfe:	f023 0302 	bic.w	r3, r3, #2
 8005e02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b085      	sub	sp, #20
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e2c:	f023 0303 	bic.w	r3, r3, #3
 8005e30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e40:	f043 0302 	orr.w	r3, r3, #2
 8005e44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b085      	sub	sp, #20
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	0c1b      	lsrs	r3, r3, #16
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b085      	sub	sp, #20
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	b29b      	uxth	r3, r3
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b085      	sub	sp, #20
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	460b      	mov	r3, r1
 8005eec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ef2:	78fb      	ldrb	r3, [r7, #3]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f10:	68bb      	ldr	r3, [r7, #8]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b087      	sub	sp, #28
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	460b      	mov	r3, r1
 8005f28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f40:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f42:	78fb      	ldrb	r3, [r7, #3]
 8005f44:	f003 030f 	and.w	r3, r3, #15
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f4e:	01db      	lsls	r3, r3, #7
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f58:	78fb      	ldrb	r3, [r7, #3]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f003 0301 	and.w	r3, r3, #1
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b085      	sub	sp, #20
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005fb4:	f023 0307 	bic.w	r3, r3, #7
 8005fb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	333c      	adds	r3, #60	; 0x3c
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	4a26      	ldr	r2, [pc, #152]	; (8006094 <USB_EP0_OutStart+0xb8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d90a      	bls.n	8006016 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800600c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006010:	d101      	bne.n	8006016 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	e037      	b.n	8006086 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601c:	461a      	mov	r2, r3
 800601e:	2300      	movs	r3, #0
 8006020:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006030:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006034:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006044:	f043 0318 	orr.w	r3, r3, #24
 8006048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006058:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800605c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800605e:	7afb      	ldrb	r3, [r7, #11]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d10f      	bne.n	8006084 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606a:	461a      	mov	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800607e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006082:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	4f54300a 	.word	0x4f54300a

08006098 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	3301      	adds	r3, #1
 80060a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4a13      	ldr	r2, [pc, #76]	; (80060fc <USB_CoreReset+0x64>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d901      	bls.n	80060b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e01b      	b.n	80060ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	daf2      	bge.n	80060a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f043 0201 	orr.w	r2, r3, #1
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3301      	adds	r3, #1
 80060d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4a09      	ldr	r2, [pc, #36]	; (80060fc <USB_CoreReset+0x64>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d901      	bls.n	80060e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e006      	b.n	80060ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d0f0      	beq.n	80060ce <USB_CoreReset+0x36>

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	00030d40 	.word	0x00030d40

08006100 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800610c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006110:	f002 fcae 	bl	8008a70 <USBD_static_malloc>
 8006114:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d109      	bne.n	8006130 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	32b0      	adds	r2, #176	; 0xb0
 8006126:	2100      	movs	r1, #0
 8006128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800612c:	2302      	movs	r3, #2
 800612e:	e0d4      	b.n	80062da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006130:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006134:	2100      	movs	r1, #0
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f002 fd08 	bl	8008b4c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	32b0      	adds	r2, #176	; 0xb0
 8006146:	68f9      	ldr	r1, [r7, #12]
 8006148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	32b0      	adds	r2, #176	; 0xb0
 8006156:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	7c1b      	ldrb	r3, [r3, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d138      	bne.n	80061da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006168:	4b5e      	ldr	r3, [pc, #376]	; (80062e4 <USBD_CDC_Init+0x1e4>)
 800616a:	7819      	ldrb	r1, [r3, #0]
 800616c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006170:	2202      	movs	r2, #2
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f002 fb59 	bl	800882a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006178:	4b5a      	ldr	r3, [pc, #360]	; (80062e4 <USBD_CDC_Init+0x1e4>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	f003 020f 	and.w	r2, r3, #15
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	4613      	mov	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	440b      	add	r3, r1
 800618c:	3324      	adds	r3, #36	; 0x24
 800618e:	2201      	movs	r2, #1
 8006190:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006192:	4b55      	ldr	r3, [pc, #340]	; (80062e8 <USBD_CDC_Init+0x1e8>)
 8006194:	7819      	ldrb	r1, [r3, #0]
 8006196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800619a:	2202      	movs	r2, #2
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f002 fb44 	bl	800882a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80061a2:	4b51      	ldr	r3, [pc, #324]	; (80062e8 <USBD_CDC_Init+0x1e8>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	f003 020f 	and.w	r2, r3, #15
 80061aa:	6879      	ldr	r1, [r7, #4]
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061ba:	2201      	movs	r2, #1
 80061bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80061be:	4b4b      	ldr	r3, [pc, #300]	; (80062ec <USBD_CDC_Init+0x1ec>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	f003 020f 	and.w	r2, r3, #15
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	440b      	add	r3, r1
 80061d2:	3326      	adds	r3, #38	; 0x26
 80061d4:	2210      	movs	r2, #16
 80061d6:	801a      	strh	r2, [r3, #0]
 80061d8:	e035      	b.n	8006246 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80061da:	4b42      	ldr	r3, [pc, #264]	; (80062e4 <USBD_CDC_Init+0x1e4>)
 80061dc:	7819      	ldrb	r1, [r3, #0]
 80061de:	2340      	movs	r3, #64	; 0x40
 80061e0:	2202      	movs	r2, #2
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f002 fb21 	bl	800882a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80061e8:	4b3e      	ldr	r3, [pc, #248]	; (80062e4 <USBD_CDC_Init+0x1e4>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	f003 020f 	and.w	r2, r3, #15
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	4613      	mov	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	440b      	add	r3, r1
 80061fc:	3324      	adds	r3, #36	; 0x24
 80061fe:	2201      	movs	r2, #1
 8006200:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006202:	4b39      	ldr	r3, [pc, #228]	; (80062e8 <USBD_CDC_Init+0x1e8>)
 8006204:	7819      	ldrb	r1, [r3, #0]
 8006206:	2340      	movs	r3, #64	; 0x40
 8006208:	2202      	movs	r2, #2
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f002 fb0d 	bl	800882a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006210:	4b35      	ldr	r3, [pc, #212]	; (80062e8 <USBD_CDC_Init+0x1e8>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	f003 020f 	and.w	r2, r3, #15
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	4613      	mov	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	440b      	add	r3, r1
 8006224:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006228:	2201      	movs	r2, #1
 800622a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800622c:	4b2f      	ldr	r3, [pc, #188]	; (80062ec <USBD_CDC_Init+0x1ec>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	f003 020f 	and.w	r2, r3, #15
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	440b      	add	r3, r1
 8006240:	3326      	adds	r3, #38	; 0x26
 8006242:	2210      	movs	r2, #16
 8006244:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006246:	4b29      	ldr	r3, [pc, #164]	; (80062ec <USBD_CDC_Init+0x1ec>)
 8006248:	7819      	ldrb	r1, [r3, #0]
 800624a:	2308      	movs	r3, #8
 800624c:	2203      	movs	r2, #3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f002 faeb 	bl	800882a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006254:	4b25      	ldr	r3, [pc, #148]	; (80062ec <USBD_CDC_Init+0x1ec>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	f003 020f 	and.w	r2, r3, #15
 800625c:	6879      	ldr	r1, [r7, #4]
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	440b      	add	r3, r1
 8006268:	3324      	adds	r3, #36	; 0x24
 800626a:	2201      	movs	r2, #1
 800626c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	33b0      	adds	r3, #176	; 0xb0
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80062a4:	2302      	movs	r3, #2
 80062a6:	e018      	b.n	80062da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	7c1b      	ldrb	r3, [r3, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10a      	bne.n	80062c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062b0:	4b0d      	ldr	r3, [pc, #52]	; (80062e8 <USBD_CDC_Init+0x1e8>)
 80062b2:	7819      	ldrb	r1, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f002 fba2 	bl	8008a08 <USBD_LL_PrepareReceive>
 80062c4:	e008      	b.n	80062d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062c6:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <USBD_CDC_Init+0x1e8>)
 80062c8:	7819      	ldrb	r1, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062d0:	2340      	movs	r3, #64	; 0x40
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f002 fb98 	bl	8008a08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20000093 	.word	0x20000093
 80062e8:	20000094 	.word	0x20000094
 80062ec:	20000095 	.word	0x20000095

080062f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80062fc:	4b3a      	ldr	r3, [pc, #232]	; (80063e8 <USBD_CDC_DeInit+0xf8>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f002 fab7 	bl	8008876 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006308:	4b37      	ldr	r3, [pc, #220]	; (80063e8 <USBD_CDC_DeInit+0xf8>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	f003 020f 	and.w	r2, r3, #15
 8006310:	6879      	ldr	r1, [r7, #4]
 8006312:	4613      	mov	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	440b      	add	r3, r1
 800631c:	3324      	adds	r3, #36	; 0x24
 800631e:	2200      	movs	r2, #0
 8006320:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006322:	4b32      	ldr	r3, [pc, #200]	; (80063ec <USBD_CDC_DeInit+0xfc>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f002 faa4 	bl	8008876 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800632e:	4b2f      	ldr	r3, [pc, #188]	; (80063ec <USBD_CDC_DeInit+0xfc>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	f003 020f 	and.w	r2, r3, #15
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	440b      	add	r3, r1
 8006342:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006346:	2200      	movs	r2, #0
 8006348:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800634a:	4b29      	ldr	r3, [pc, #164]	; (80063f0 <USBD_CDC_DeInit+0x100>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f002 fa90 	bl	8008876 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006356:	4b26      	ldr	r3, [pc, #152]	; (80063f0 <USBD_CDC_DeInit+0x100>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	f003 020f 	and.w	r2, r3, #15
 800635e:	6879      	ldr	r1, [r7, #4]
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	440b      	add	r3, r1
 800636a:	3324      	adds	r3, #36	; 0x24
 800636c:	2200      	movs	r2, #0
 800636e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006370:	4b1f      	ldr	r3, [pc, #124]	; (80063f0 <USBD_CDC_DeInit+0x100>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	f003 020f 	and.w	r2, r3, #15
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	440b      	add	r3, r1
 8006384:	3326      	adds	r3, #38	; 0x26
 8006386:	2200      	movs	r2, #0
 8006388:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	32b0      	adds	r2, #176	; 0xb0
 8006394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d01f      	beq.n	80063dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	33b0      	adds	r3, #176	; 0xb0
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	32b0      	adds	r2, #176	; 0xb0
 80063ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063be:	4618      	mov	r0, r3
 80063c0:	f002 fb64 	bl	8008a8c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	32b0      	adds	r2, #176	; 0xb0
 80063ce:	2100      	movs	r1, #0
 80063d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000093 	.word	0x20000093
 80063ec:	20000094 	.word	0x20000094
 80063f0:	20000095 	.word	0x20000095

080063f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	32b0      	adds	r2, #176	; 0xb0
 8006408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006420:	2303      	movs	r3, #3
 8006422:	e0bf      	b.n	80065a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800642c:	2b00      	cmp	r3, #0
 800642e:	d050      	beq.n	80064d2 <USBD_CDC_Setup+0xde>
 8006430:	2b20      	cmp	r3, #32
 8006432:	f040 80af 	bne.w	8006594 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	88db      	ldrh	r3, [r3, #6]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d03a      	beq.n	80064b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	b25b      	sxtb	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	da1b      	bge.n	8006480 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	33b0      	adds	r3, #176	; 0xb0
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800645e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	88d2      	ldrh	r2, [r2, #6]
 8006464:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	88db      	ldrh	r3, [r3, #6]
 800646a:	2b07      	cmp	r3, #7
 800646c:	bf28      	it	cs
 800646e:	2307      	movcs	r3, #7
 8006470:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	89fa      	ldrh	r2, [r7, #14]
 8006476:	4619      	mov	r1, r3
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f001 fd89 	bl	8007f90 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800647e:	e090      	b.n	80065a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	785a      	ldrb	r2, [r3, #1]
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	88db      	ldrh	r3, [r3, #6]
 800648e:	2b3f      	cmp	r3, #63	; 0x3f
 8006490:	d803      	bhi.n	800649a <USBD_CDC_Setup+0xa6>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	88db      	ldrh	r3, [r3, #6]
 8006496:	b2da      	uxtb	r2, r3
 8006498:	e000      	b.n	800649c <USBD_CDC_Setup+0xa8>
 800649a:	2240      	movs	r2, #64	; 0x40
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80064a2:	6939      	ldr	r1, [r7, #16]
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80064aa:	461a      	mov	r2, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 fd9b 	bl	8007fe8 <USBD_CtlPrepareRx>
      break;
 80064b2:	e076      	b.n	80065a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	33b0      	adds	r3, #176	; 0xb0
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	7850      	ldrb	r0, [r2, #1]
 80064ca:	2200      	movs	r2, #0
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	4798      	blx	r3
      break;
 80064d0:	e067      	b.n	80065a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	785b      	ldrb	r3, [r3, #1]
 80064d6:	2b0b      	cmp	r3, #11
 80064d8:	d851      	bhi.n	800657e <USBD_CDC_Setup+0x18a>
 80064da:	a201      	add	r2, pc, #4	; (adr r2, 80064e0 <USBD_CDC_Setup+0xec>)
 80064dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e0:	08006511 	.word	0x08006511
 80064e4:	0800658d 	.word	0x0800658d
 80064e8:	0800657f 	.word	0x0800657f
 80064ec:	0800657f 	.word	0x0800657f
 80064f0:	0800657f 	.word	0x0800657f
 80064f4:	0800657f 	.word	0x0800657f
 80064f8:	0800657f 	.word	0x0800657f
 80064fc:	0800657f 	.word	0x0800657f
 8006500:	0800657f 	.word	0x0800657f
 8006504:	0800657f 	.word	0x0800657f
 8006508:	0800653b 	.word	0x0800653b
 800650c:	08006565 	.word	0x08006565
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b03      	cmp	r3, #3
 800651a:	d107      	bne.n	800652c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800651c:	f107 030a 	add.w	r3, r7, #10
 8006520:	2202      	movs	r2, #2
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 fd33 	bl	8007f90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800652a:	e032      	b.n	8006592 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f001 fcbd 	bl	8007eae <USBD_CtlError>
            ret = USBD_FAIL;
 8006534:	2303      	movs	r3, #3
 8006536:	75fb      	strb	r3, [r7, #23]
          break;
 8006538:	e02b      	b.n	8006592 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b03      	cmp	r3, #3
 8006544:	d107      	bne.n	8006556 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006546:	f107 030d 	add.w	r3, r7, #13
 800654a:	2201      	movs	r2, #1
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 fd1e 	bl	8007f90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006554:	e01d      	b.n	8006592 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 fca8 	bl	8007eae <USBD_CtlError>
            ret = USBD_FAIL;
 800655e:	2303      	movs	r3, #3
 8006560:	75fb      	strb	r3, [r7, #23]
          break;
 8006562:	e016      	b.n	8006592 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b03      	cmp	r3, #3
 800656e:	d00f      	beq.n	8006590 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f001 fc9b 	bl	8007eae <USBD_CtlError>
            ret = USBD_FAIL;
 8006578:	2303      	movs	r3, #3
 800657a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800657c:	e008      	b.n	8006590 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f001 fc94 	bl	8007eae <USBD_CtlError>
          ret = USBD_FAIL;
 8006586:	2303      	movs	r3, #3
 8006588:	75fb      	strb	r3, [r7, #23]
          break;
 800658a:	e002      	b.n	8006592 <USBD_CDC_Setup+0x19e>
          break;
 800658c:	bf00      	nop
 800658e:	e008      	b.n	80065a2 <USBD_CDC_Setup+0x1ae>
          break;
 8006590:	bf00      	nop
      }
      break;
 8006592:	e006      	b.n	80065a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006594:	6839      	ldr	r1, [r7, #0]
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f001 fc89 	bl	8007eae <USBD_CtlError>
      ret = USBD_FAIL;
 800659c:	2303      	movs	r3, #3
 800659e:	75fb      	strb	r3, [r7, #23]
      break;
 80065a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80065a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80065be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	32b0      	adds	r2, #176	; 0xb0
 80065ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e065      	b.n	80066a2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	32b0      	adds	r2, #176	; 0xb0
 80065e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	f003 020f 	and.w	r2, r3, #15
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	440b      	add	r3, r1
 80065f8:	3318      	adds	r3, #24
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d02f      	beq.n	8006660 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	f003 020f 	and.w	r2, r3, #15
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	4613      	mov	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	440b      	add	r3, r1
 8006612:	3318      	adds	r3, #24
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	78fb      	ldrb	r3, [r7, #3]
 8006618:	f003 010f 	and.w	r1, r3, #15
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	460b      	mov	r3, r1
 8006620:	00db      	lsls	r3, r3, #3
 8006622:	440b      	add	r3, r1
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4403      	add	r3, r0
 8006628:	3348      	adds	r3, #72	; 0x48
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006630:	fb01 f303 	mul.w	r3, r1, r3
 8006634:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006636:	2b00      	cmp	r3, #0
 8006638:	d112      	bne.n	8006660 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	f003 020f 	and.w	r2, r3, #15
 8006640:	6879      	ldr	r1, [r7, #4]
 8006642:	4613      	mov	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	440b      	add	r3, r1
 800664c:	3318      	adds	r3, #24
 800664e:	2200      	movs	r2, #0
 8006650:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006652:	78f9      	ldrb	r1, [r7, #3]
 8006654:	2300      	movs	r3, #0
 8006656:	2200      	movs	r2, #0
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f002 f9b4 	bl	80089c6 <USBD_LL_Transmit>
 800665e:	e01f      	b.n	80066a0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2200      	movs	r2, #0
 8006664:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	33b0      	adds	r3, #176	; 0xb0
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d010      	beq.n	80066a0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	33b0      	adds	r3, #176	; 0xb0
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800669c:	78fa      	ldrb	r2, [r7, #3]
 800669e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	460b      	mov	r3, r1
 80066b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	32b0      	adds	r2, #176	; 0xb0
 80066c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	32b0      	adds	r2, #176	; 0xb0
 80066d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80066d8:	2303      	movs	r3, #3
 80066da:	e01a      	b.n	8006712 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f002 f9b2 	bl	8008a4a <USBD_LL_GetRxDataSize>
 80066e6:	4602      	mov	r2, r0
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	33b0      	adds	r3, #176	; 0xb0
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800670c:	4611      	mov	r1, r2
 800670e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	32b0      	adds	r2, #176	; 0xb0
 800672c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006730:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006738:	2303      	movs	r3, #3
 800673a:	e025      	b.n	8006788 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	33b0      	adds	r3, #176	; 0xb0
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01a      	beq.n	8006786 <USBD_CDC_EP0_RxReady+0x6c>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006756:	2bff      	cmp	r3, #255	; 0xff
 8006758:	d015      	beq.n	8006786 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	33b0      	adds	r3, #176	; 0xb0
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006772:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800677a:	b292      	uxth	r2, r2
 800677c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	22ff      	movs	r2, #255	; 0xff
 8006782:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006798:	2182      	movs	r1, #130	; 0x82
 800679a:	4818      	ldr	r0, [pc, #96]	; (80067fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800679c:	f000 fd4f 	bl	800723e <USBD_GetEpDesc>
 80067a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067a2:	2101      	movs	r1, #1
 80067a4:	4815      	ldr	r0, [pc, #84]	; (80067fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067a6:	f000 fd4a 	bl	800723e <USBD_GetEpDesc>
 80067aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067ac:	2181      	movs	r1, #129	; 0x81
 80067ae:	4813      	ldr	r0, [pc, #76]	; (80067fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067b0:	f000 fd45 	bl	800723e <USBD_GetEpDesc>
 80067b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2210      	movs	r2, #16
 80067c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d006      	beq.n	80067d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067d0:	711a      	strb	r2, [r3, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d006      	beq.n	80067ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067e4:	711a      	strb	r2, [r3, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2243      	movs	r2, #67	; 0x43
 80067ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80067f0:	4b02      	ldr	r3, [pc, #8]	; (80067fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20000050 	.word	0x20000050

08006800 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006808:	2182      	movs	r1, #130	; 0x82
 800680a:	4818      	ldr	r0, [pc, #96]	; (800686c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800680c:	f000 fd17 	bl	800723e <USBD_GetEpDesc>
 8006810:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006812:	2101      	movs	r1, #1
 8006814:	4815      	ldr	r0, [pc, #84]	; (800686c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006816:	f000 fd12 	bl	800723e <USBD_GetEpDesc>
 800681a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800681c:	2181      	movs	r1, #129	; 0x81
 800681e:	4813      	ldr	r0, [pc, #76]	; (800686c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006820:	f000 fd0d 	bl	800723e <USBD_GetEpDesc>
 8006824:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	2210      	movs	r2, #16
 8006830:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d006      	beq.n	8006846 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	2200      	movs	r2, #0
 800683c:	711a      	strb	r2, [r3, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f042 0202 	orr.w	r2, r2, #2
 8006844:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d006      	beq.n	800685a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	711a      	strb	r2, [r3, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f042 0202 	orr.w	r2, r2, #2
 8006858:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2243      	movs	r2, #67	; 0x43
 800685e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006860:	4b02      	ldr	r3, [pc, #8]	; (800686c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	20000050 	.word	0x20000050

08006870 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006878:	2182      	movs	r1, #130	; 0x82
 800687a:	4818      	ldr	r0, [pc, #96]	; (80068dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800687c:	f000 fcdf 	bl	800723e <USBD_GetEpDesc>
 8006880:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006882:	2101      	movs	r1, #1
 8006884:	4815      	ldr	r0, [pc, #84]	; (80068dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006886:	f000 fcda 	bl	800723e <USBD_GetEpDesc>
 800688a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800688c:	2181      	movs	r1, #129	; 0x81
 800688e:	4813      	ldr	r0, [pc, #76]	; (80068dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006890:	f000 fcd5 	bl	800723e <USBD_GetEpDesc>
 8006894:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	2210      	movs	r2, #16
 80068a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d006      	beq.n	80068b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068b0:	711a      	strb	r2, [r3, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d006      	beq.n	80068ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068c4:	711a      	strb	r2, [r3, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2243      	movs	r2, #67	; 0x43
 80068ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80068d0:	4b02      	ldr	r3, [pc, #8]	; (80068dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	20000050 	.word	0x20000050

080068e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	220a      	movs	r2, #10
 80068ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80068ee:	4b03      	ldr	r3, [pc, #12]	; (80068fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	2000000c 	.word	0x2000000c

08006900 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006910:	2303      	movs	r3, #3
 8006912:	e009      	b.n	8006928 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	33b0      	adds	r3, #176	; 0xb0
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	32b0      	adds	r2, #176	; 0xb0
 800694a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800694e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006956:	2303      	movs	r3, #3
 8006958:	e008      	b.n	800696c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	371c      	adds	r7, #28
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	32b0      	adds	r2, #176	; 0xb0
 800698c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006990:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006998:	2303      	movs	r3, #3
 800699a:	e004      	b.n	80069a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
	...

080069b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	32b0      	adds	r2, #176	; 0xb0
 80069c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80069cc:	2301      	movs	r3, #1
 80069ce:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	32b0      	adds	r2, #176	; 0xb0
 80069da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e025      	b.n	8006a32 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d11f      	bne.n	8006a30 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80069f8:	4b10      	ldr	r3, [pc, #64]	; (8006a3c <USBD_CDC_TransmitPacket+0x88>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	f003 020f 	and.w	r2, r3, #15
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4403      	add	r3, r0
 8006a12:	3318      	adds	r3, #24
 8006a14:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006a16:	4b09      	ldr	r3, [pc, #36]	; (8006a3c <USBD_CDC_TransmitPacket+0x88>)
 8006a18:	7819      	ldrb	r1, [r3, #0]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f001 ffcd 	bl	80089c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000093 	.word	0x20000093

08006a40 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	32b0      	adds	r2, #176	; 0xb0
 8006a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a56:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	32b0      	adds	r2, #176	; 0xb0
 8006a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e018      	b.n	8006aa0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	7c1b      	ldrb	r3, [r3, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10a      	bne.n	8006a8c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a76:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <USBD_CDC_ReceivePacket+0x68>)
 8006a78:	7819      	ldrb	r1, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 ffbf 	bl	8008a08 <USBD_LL_PrepareReceive>
 8006a8a:	e008      	b.n	8006a9e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a8c:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <USBD_CDC_ReceivePacket+0x68>)
 8006a8e:	7819      	ldrb	r1, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a96:	2340      	movs	r3, #64	; 0x40
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 ffb5 	bl	8008a08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	20000094 	.word	0x20000094

08006aac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e01f      	b.n	8006b04 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	79fa      	ldrb	r2, [r7, #7]
 8006af6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f001 fe2f 	bl	800875c <USBD_LL_Init>
 8006afe:	4603      	mov	r3, r0
 8006b00:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3718      	adds	r7, #24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e025      	b.n	8006b70 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	32ae      	adds	r2, #174	; 0xae
 8006b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00f      	beq.n	8006b60 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	32ae      	adds	r2, #174	; 0xae
 8006b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	f107 020e 	add.w	r2, r7, #14
 8006b54:	4610      	mov	r0, r2
 8006b56:	4798      	blx	r3
 8006b58:	4602      	mov	r2, r0
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 fe37 	bl	80087f4 <USBD_LL_Start>
 8006b86:	4603      	mov	r3, r0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b98:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d009      	beq.n	8006bd4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	78fa      	ldrb	r2, [r7, #3]
 8006bca:	4611      	mov	r1, r2
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	460b      	mov	r3, r1
 8006be8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	78fa      	ldrb	r2, [r7, #3]
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006c04:	2303      	movs	r3, #3
 8006c06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b084      	sub	sp, #16
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f001 f908 	bl	8007e3a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006c38:	461a      	mov	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c46:	f003 031f 	and.w	r3, r3, #31
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d01a      	beq.n	8006c84 <USBD_LL_SetupStage+0x72>
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d822      	bhi.n	8006c98 <USBD_LL_SetupStage+0x86>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <USBD_LL_SetupStage+0x4a>
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d00a      	beq.n	8006c70 <USBD_LL_SetupStage+0x5e>
 8006c5a:	e01d      	b.n	8006c98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fb5f 	bl	8007328 <USBD_StdDevReq>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c6e:	e020      	b.n	8006cb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fbc7 	bl	800740c <USBD_StdItfReq>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	73fb      	strb	r3, [r7, #15]
      break;
 8006c82:	e016      	b.n	8006cb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fc29 	bl	80074e4 <USBD_StdEPReq>
 8006c92:	4603      	mov	r3, r0
 8006c94:	73fb      	strb	r3, [r7, #15]
      break;
 8006c96:	e00c      	b.n	8006cb2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 fe04 	bl	80088b4 <USBD_LL_StallEP>
 8006cac:	4603      	mov	r3, r0
 8006cae:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb0:	bf00      	nop
  }

  return ret;
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006cce:	7afb      	ldrb	r3, [r7, #11]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d16e      	bne.n	8006db2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006cda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	f040 8098 	bne.w	8006e18 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d913      	bls.n	8006d1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	1ad2      	subs	r2, r2, r3
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	68da      	ldr	r2, [r3, #12]
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	bf28      	it	cs
 8006d0e:	4613      	movcs	r3, r2
 8006d10:	461a      	mov	r2, r3
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f001 f984 	bl	8008022 <USBD_CtlContinueRx>
 8006d1a:	e07d      	b.n	8006e18 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d22:	f003 031f 	and.w	r3, r3, #31
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d014      	beq.n	8006d54 <USBD_LL_DataOutStage+0x98>
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d81d      	bhi.n	8006d6a <USBD_LL_DataOutStage+0xae>
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <USBD_LL_DataOutStage+0x7c>
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d003      	beq.n	8006d3e <USBD_LL_DataOutStage+0x82>
 8006d36:	e018      	b.n	8006d6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	75bb      	strb	r3, [r7, #22]
            break;
 8006d3c:	e018      	b.n	8006d70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	4619      	mov	r1, r3
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 fa5e 	bl	800720a <USBD_CoreFindIF>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	75bb      	strb	r3, [r7, #22]
            break;
 8006d52:	e00d      	b.n	8006d70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 fa60 	bl	8007224 <USBD_CoreFindEP>
 8006d64:	4603      	mov	r3, r0
 8006d66:	75bb      	strb	r3, [r7, #22]
            break;
 8006d68:	e002      	b.n	8006d70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	75bb      	strb	r3, [r7, #22]
            break;
 8006d6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006d70:	7dbb      	ldrb	r3, [r7, #22]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d119      	bne.n	8006daa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d113      	bne.n	8006daa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006d82:	7dba      	ldrb	r2, [r7, #22]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	32ae      	adds	r2, #174	; 0xae
 8006d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00b      	beq.n	8006daa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006d92:	7dba      	ldrb	r2, [r7, #22]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006d9a:	7dba      	ldrb	r2, [r7, #22]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	32ae      	adds	r2, #174	; 0xae
 8006da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f001 f94a 	bl	8008044 <USBD_CtlSendStatus>
 8006db0:	e032      	b.n	8006e18 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006db2:	7afb      	ldrb	r3, [r7, #11]
 8006db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	4619      	mov	r1, r3
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 fa31 	bl	8007224 <USBD_CoreFindEP>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dc6:	7dbb      	ldrb	r3, [r7, #22]
 8006dc8:	2bff      	cmp	r3, #255	; 0xff
 8006dca:	d025      	beq.n	8006e18 <USBD_LL_DataOutStage+0x15c>
 8006dcc:	7dbb      	ldrb	r3, [r7, #22]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d122      	bne.n	8006e18 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d117      	bne.n	8006e0e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006dde:	7dba      	ldrb	r2, [r7, #22]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	32ae      	adds	r2, #174	; 0xae
 8006de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00f      	beq.n	8006e0e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006dee:	7dba      	ldrb	r2, [r7, #22]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006df6:	7dba      	ldrb	r2, [r7, #22]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	32ae      	adds	r2, #174	; 0xae
 8006dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	7afa      	ldrb	r2, [r7, #11]
 8006e04:	4611      	mov	r1, r2
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	4798      	blx	r3
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	e000      	b.n	8006e1a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b086      	sub	sp, #24
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	607a      	str	r2, [r7, #4]
 8006e2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006e30:	7afb      	ldrb	r3, [r7, #11]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d16f      	bne.n	8006f16 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	3314      	adds	r3, #20
 8006e3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d15a      	bne.n	8006efc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	689a      	ldr	r2, [r3, #8]
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d914      	bls.n	8006e7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	1ad2      	subs	r2, r2, r3
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	461a      	mov	r2, r3
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f001 f8ac 	bl	8007fc6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e6e:	2300      	movs	r3, #0
 8006e70:	2200      	movs	r2, #0
 8006e72:	2100      	movs	r1, #0
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f001 fdc7 	bl	8008a08 <USBD_LL_PrepareReceive>
 8006e7a:	e03f      	b.n	8006efc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d11c      	bne.n	8006ec2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d316      	bcc.n	8006ec2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d20f      	bcs.n	8006ec2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f001 f88d 	bl	8007fc6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	2100      	movs	r1, #0
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f001 fda4 	bl	8008a08 <USBD_LL_PrepareReceive>
 8006ec0:	e01c      	b.n	8006efc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d10f      	bne.n	8006eee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d009      	beq.n	8006eee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006eee:	2180      	movs	r1, #128	; 0x80
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f001 fcdf 	bl	80088b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f001 f8b7 	bl	800806a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d03a      	beq.n	8006f7c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f7ff fe42 	bl	8006b90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f14:	e032      	b.n	8006f7c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006f16:	7afb      	ldrb	r3, [r7, #11]
 8006f18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	4619      	mov	r1, r3
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f97f 	bl	8007224 <USBD_CoreFindEP>
 8006f26:	4603      	mov	r3, r0
 8006f28:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
 8006f2c:	2bff      	cmp	r3, #255	; 0xff
 8006f2e:	d025      	beq.n	8006f7c <USBD_LL_DataInStage+0x15a>
 8006f30:	7dfb      	ldrb	r3, [r7, #23]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d122      	bne.n	8006f7c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d11c      	bne.n	8006f7c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006f42:	7dfa      	ldrb	r2, [r7, #23]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	32ae      	adds	r2, #174	; 0xae
 8006f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d014      	beq.n	8006f7c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006f52:	7dfa      	ldrb	r2, [r7, #23]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006f5a:	7dfa      	ldrb	r2, [r7, #23]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	32ae      	adds	r2, #174	; 0xae
 8006f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	7afa      	ldrb	r2, [r7, #11]
 8006f68:	4611      	mov	r1, r2
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	4798      	blx	r3
 8006f6e:	4603      	mov	r3, r0
 8006f70:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006f72:	7dbb      	ldrb	r3, [r7, #22]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006f78:	7dbb      	ldrb	r3, [r7, #22]
 8006f7a:	e000      	b.n	8006f7e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d014      	beq.n	8006fec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00e      	beq.n	8006fec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6852      	ldr	r2, [r2, #4]
 8006fda:	b2d2      	uxtb	r2, r2
 8006fdc:	4611      	mov	r1, r2
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	4798      	blx	r3
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fec:	2340      	movs	r3, #64	; 0x40
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f001 fc19 	bl	800882a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2240      	movs	r2, #64	; 0x40
 8007004:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007008:	2340      	movs	r3, #64	; 0x40
 800700a:	2200      	movs	r2, #0
 800700c:	2180      	movs	r1, #128	; 0x80
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 fc0b 	bl	800882a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2240      	movs	r2, #64	; 0x40
 800701e:	621a      	str	r2, [r3, #32]

  return ret;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	460b      	mov	r3, r1
 8007034:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	78fa      	ldrb	r2, [r7, #3]
 800703a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007058:	b2da      	uxtb	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2204      	movs	r2, #4
 8007064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007076:	b480      	push	{r7}
 8007078:	b083      	sub	sp, #12
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b04      	cmp	r3, #4
 8007088:	d106      	bne.n	8007098 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007090:	b2da      	uxtb	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d110      	bne.n	80070dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00b      	beq.n	80070dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d005      	beq.n	80070dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b082      	sub	sp, #8
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	460b      	mov	r3, r1
 80070f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	32ae      	adds	r2, #174	; 0xae
 80070fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007104:	2303      	movs	r3, #3
 8007106:	e01c      	b.n	8007142 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b03      	cmp	r3, #3
 8007112:	d115      	bne.n	8007140 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	32ae      	adds	r2, #174	; 0xae
 800711e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00b      	beq.n	8007140 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	32ae      	adds	r2, #174	; 0xae
 8007132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	78fa      	ldrb	r2, [r7, #3]
 800713a:	4611      	mov	r1, r2
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	460b      	mov	r3, r1
 8007154:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	32ae      	adds	r2, #174	; 0xae
 8007160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007168:	2303      	movs	r3, #3
 800716a:	e01c      	b.n	80071a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b03      	cmp	r3, #3
 8007176:	d115      	bne.n	80071a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	32ae      	adds	r2, #174	; 0xae
 8007182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00b      	beq.n	80071a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	32ae      	adds	r2, #174	; 0xae
 8007196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	78fa      	ldrb	r2, [r7, #3]
 800719e:	4611      	mov	r1, r2
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00e      	beq.n	8007200 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6852      	ldr	r2, [r2, #4]
 80071ee:	b2d2      	uxtb	r2, r2
 80071f0:	4611      	mov	r1, r2
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80071fc:	2303      	movs	r3, #3
 80071fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007200:	7bfb      	ldrb	r3, [r7, #15]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	460b      	mov	r3, r1
 8007214:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007216:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007218:	4618      	mov	r0, r3
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007230:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b086      	sub	sp, #24
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	460b      	mov	r3, r1
 8007248:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007252:	2300      	movs	r3, #0
 8007254:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	885b      	ldrh	r3, [r3, #2]
 800725a:	b29a      	uxth	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	b29b      	uxth	r3, r3
 8007262:	429a      	cmp	r2, r3
 8007264:	d920      	bls.n	80072a8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	b29b      	uxth	r3, r3
 800726c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800726e:	e013      	b.n	8007298 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007270:	f107 030a 	add.w	r3, r7, #10
 8007274:	4619      	mov	r1, r3
 8007276:	6978      	ldr	r0, [r7, #20]
 8007278:	f000 f81b 	bl	80072b2 <USBD_GetNextDesc>
 800727c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	785b      	ldrb	r3, [r3, #1]
 8007282:	2b05      	cmp	r3, #5
 8007284:	d108      	bne.n	8007298 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	789b      	ldrb	r3, [r3, #2]
 800728e:	78fa      	ldrb	r2, [r7, #3]
 8007290:	429a      	cmp	r2, r3
 8007292:	d008      	beq.n	80072a6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007294:	2300      	movs	r3, #0
 8007296:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	885b      	ldrh	r3, [r3, #2]
 800729c:	b29a      	uxth	r2, r3
 800729e:	897b      	ldrh	r3, [r7, #10]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d8e5      	bhi.n	8007270 <USBD_GetEpDesc+0x32>
 80072a4:	e000      	b.n	80072a8 <USBD_GetEpDesc+0x6a>
          break;
 80072a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80072a8:	693b      	ldr	r3, [r7, #16]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	881a      	ldrh	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	4413      	add	r3, r2
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4413      	add	r3, r2
 80072dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80072de:	68fb      	ldr	r3, [r7, #12]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	3301      	adds	r3, #1
 8007302:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800730a:	8a3b      	ldrh	r3, [r7, #16]
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	b21a      	sxth	r2, r3
 8007310:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007314:	4313      	orrs	r3, r2
 8007316:	b21b      	sxth	r3, r3
 8007318:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800731a:	89fb      	ldrh	r3, [r7, #14]
}
 800731c:	4618      	mov	r0, r3
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800733e:	2b40      	cmp	r3, #64	; 0x40
 8007340:	d005      	beq.n	800734e <USBD_StdDevReq+0x26>
 8007342:	2b40      	cmp	r3, #64	; 0x40
 8007344:	d857      	bhi.n	80073f6 <USBD_StdDevReq+0xce>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00f      	beq.n	800736a <USBD_StdDevReq+0x42>
 800734a:	2b20      	cmp	r3, #32
 800734c:	d153      	bne.n	80073f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	32ae      	adds	r2, #174	; 0xae
 8007358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	4798      	blx	r3
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]
      break;
 8007368:	e04a      	b.n	8007400 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	785b      	ldrb	r3, [r3, #1]
 800736e:	2b09      	cmp	r3, #9
 8007370:	d83b      	bhi.n	80073ea <USBD_StdDevReq+0xc2>
 8007372:	a201      	add	r2, pc, #4	; (adr r2, 8007378 <USBD_StdDevReq+0x50>)
 8007374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007378:	080073cd 	.word	0x080073cd
 800737c:	080073e1 	.word	0x080073e1
 8007380:	080073eb 	.word	0x080073eb
 8007384:	080073d7 	.word	0x080073d7
 8007388:	080073eb 	.word	0x080073eb
 800738c:	080073ab 	.word	0x080073ab
 8007390:	080073a1 	.word	0x080073a1
 8007394:	080073eb 	.word	0x080073eb
 8007398:	080073c3 	.word	0x080073c3
 800739c:	080073b5 	.word	0x080073b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fa3c 	bl	8007820 <USBD_GetDescriptor>
          break;
 80073a8:	e024      	b.n	80073f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fba1 	bl	8007af4 <USBD_SetAddress>
          break;
 80073b2:	e01f      	b.n	80073f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fbe0 	bl	8007b7c <USBD_SetConfig>
 80073bc:	4603      	mov	r3, r0
 80073be:	73fb      	strb	r3, [r7, #15]
          break;
 80073c0:	e018      	b.n	80073f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fc83 	bl	8007cd0 <USBD_GetConfig>
          break;
 80073ca:	e013      	b.n	80073f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fcb4 	bl	8007d3c <USBD_GetStatus>
          break;
 80073d4:	e00e      	b.n	80073f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073d6:	6839      	ldr	r1, [r7, #0]
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fce3 	bl	8007da4 <USBD_SetFeature>
          break;
 80073de:	e009      	b.n	80073f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fd07 	bl	8007df6 <USBD_ClrFeature>
          break;
 80073e8:	e004      	b.n	80073f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fd5e 	bl	8007eae <USBD_CtlError>
          break;
 80073f2:	bf00      	nop
      }
      break;
 80073f4:	e004      	b.n	8007400 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fd58 	bl	8007eae <USBD_CtlError>
      break;
 80073fe:	bf00      	nop
  }

  return ret;
 8007400:	7bfb      	ldrb	r3, [r7, #15]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop

0800740c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007422:	2b40      	cmp	r3, #64	; 0x40
 8007424:	d005      	beq.n	8007432 <USBD_StdItfReq+0x26>
 8007426:	2b40      	cmp	r3, #64	; 0x40
 8007428:	d852      	bhi.n	80074d0 <USBD_StdItfReq+0xc4>
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <USBD_StdItfReq+0x26>
 800742e:	2b20      	cmp	r3, #32
 8007430:	d14e      	bne.n	80074d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007438:	b2db      	uxtb	r3, r3
 800743a:	3b01      	subs	r3, #1
 800743c:	2b02      	cmp	r3, #2
 800743e:	d840      	bhi.n	80074c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	889b      	ldrh	r3, [r3, #4]
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b01      	cmp	r3, #1
 8007448:	d836      	bhi.n	80074b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	889b      	ldrh	r3, [r3, #4]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7ff fed9 	bl	800720a <USBD_CoreFindIF>
 8007458:	4603      	mov	r3, r0
 800745a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800745c:	7bbb      	ldrb	r3, [r7, #14]
 800745e:	2bff      	cmp	r3, #255	; 0xff
 8007460:	d01d      	beq.n	800749e <USBD_StdItfReq+0x92>
 8007462:	7bbb      	ldrb	r3, [r7, #14]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d11a      	bne.n	800749e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007468:	7bba      	ldrb	r2, [r7, #14]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	32ae      	adds	r2, #174	; 0xae
 800746e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00f      	beq.n	8007498 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007478:	7bba      	ldrb	r2, [r7, #14]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007480:	7bba      	ldrb	r2, [r7, #14]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	32ae      	adds	r2, #174	; 0xae
 8007486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	4798      	blx	r3
 8007492:	4603      	mov	r3, r0
 8007494:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007496:	e004      	b.n	80074a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007498:	2303      	movs	r3, #3
 800749a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800749c:	e001      	b.n	80074a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800749e:	2303      	movs	r3, #3
 80074a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	88db      	ldrh	r3, [r3, #6]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d110      	bne.n	80074cc <USBD_StdItfReq+0xc0>
 80074aa:	7bfb      	ldrb	r3, [r7, #15]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10d      	bne.n	80074cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fdc7 	bl	8008044 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80074b6:	e009      	b.n	80074cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fcf7 	bl	8007eae <USBD_CtlError>
          break;
 80074c0:	e004      	b.n	80074cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fcf2 	bl	8007eae <USBD_CtlError>
          break;
 80074ca:	e000      	b.n	80074ce <USBD_StdItfReq+0xc2>
          break;
 80074cc:	bf00      	nop
      }
      break;
 80074ce:	e004      	b.n	80074da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fceb 	bl	8007eae <USBD_CtlError>
      break;
 80074d8:	bf00      	nop
  }

  return ret;
 80074da:	7bfb      	ldrb	r3, [r7, #15]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	889b      	ldrh	r3, [r3, #4]
 80074f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007500:	2b40      	cmp	r3, #64	; 0x40
 8007502:	d007      	beq.n	8007514 <USBD_StdEPReq+0x30>
 8007504:	2b40      	cmp	r3, #64	; 0x40
 8007506:	f200 817f 	bhi.w	8007808 <USBD_StdEPReq+0x324>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d02a      	beq.n	8007564 <USBD_StdEPReq+0x80>
 800750e:	2b20      	cmp	r3, #32
 8007510:	f040 817a 	bne.w	8007808 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007514:	7bbb      	ldrb	r3, [r7, #14]
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7ff fe83 	bl	8007224 <USBD_CoreFindEP>
 800751e:	4603      	mov	r3, r0
 8007520:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007522:	7b7b      	ldrb	r3, [r7, #13]
 8007524:	2bff      	cmp	r3, #255	; 0xff
 8007526:	f000 8174 	beq.w	8007812 <USBD_StdEPReq+0x32e>
 800752a:	7b7b      	ldrb	r3, [r7, #13]
 800752c:	2b00      	cmp	r3, #0
 800752e:	f040 8170 	bne.w	8007812 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007532:	7b7a      	ldrb	r2, [r7, #13]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800753a:	7b7a      	ldrb	r2, [r7, #13]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	32ae      	adds	r2, #174	; 0xae
 8007540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	2b00      	cmp	r3, #0
 8007548:	f000 8163 	beq.w	8007812 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800754c:	7b7a      	ldrb	r2, [r7, #13]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	32ae      	adds	r2, #174	; 0xae
 8007552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	4798      	blx	r3
 800755e:	4603      	mov	r3, r0
 8007560:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007562:	e156      	b.n	8007812 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	785b      	ldrb	r3, [r3, #1]
 8007568:	2b03      	cmp	r3, #3
 800756a:	d008      	beq.n	800757e <USBD_StdEPReq+0x9a>
 800756c:	2b03      	cmp	r3, #3
 800756e:	f300 8145 	bgt.w	80077fc <USBD_StdEPReq+0x318>
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 809b 	beq.w	80076ae <USBD_StdEPReq+0x1ca>
 8007578:	2b01      	cmp	r3, #1
 800757a:	d03c      	beq.n	80075f6 <USBD_StdEPReq+0x112>
 800757c:	e13e      	b.n	80077fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b02      	cmp	r3, #2
 8007588:	d002      	beq.n	8007590 <USBD_StdEPReq+0xac>
 800758a:	2b03      	cmp	r3, #3
 800758c:	d016      	beq.n	80075bc <USBD_StdEPReq+0xd8>
 800758e:	e02c      	b.n	80075ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00d      	beq.n	80075b2 <USBD_StdEPReq+0xce>
 8007596:	7bbb      	ldrb	r3, [r7, #14]
 8007598:	2b80      	cmp	r3, #128	; 0x80
 800759a:	d00a      	beq.n	80075b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800759c:	7bbb      	ldrb	r3, [r7, #14]
 800759e:	4619      	mov	r1, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f001 f987 	bl	80088b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075a6:	2180      	movs	r1, #128	; 0x80
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f001 f983 	bl	80088b4 <USBD_LL_StallEP>
 80075ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075b0:	e020      	b.n	80075f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fc7a 	bl	8007eae <USBD_CtlError>
              break;
 80075ba:	e01b      	b.n	80075f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	885b      	ldrh	r3, [r3, #2]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10e      	bne.n	80075e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00b      	beq.n	80075e2 <USBD_StdEPReq+0xfe>
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	2b80      	cmp	r3, #128	; 0x80
 80075ce:	d008      	beq.n	80075e2 <USBD_StdEPReq+0xfe>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	88db      	ldrh	r3, [r3, #6]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d104      	bne.n	80075e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 f969 	bl	80088b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fd2e 	bl	8008044 <USBD_CtlSendStatus>

              break;
 80075e8:	e004      	b.n	80075f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fc5e 	bl	8007eae <USBD_CtlError>
              break;
 80075f2:	bf00      	nop
          }
          break;
 80075f4:	e107      	b.n	8007806 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d002      	beq.n	8007608 <USBD_StdEPReq+0x124>
 8007602:	2b03      	cmp	r3, #3
 8007604:	d016      	beq.n	8007634 <USBD_StdEPReq+0x150>
 8007606:	e04b      	b.n	80076a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007608:	7bbb      	ldrb	r3, [r7, #14]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00d      	beq.n	800762a <USBD_StdEPReq+0x146>
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	2b80      	cmp	r3, #128	; 0x80
 8007612:	d00a      	beq.n	800762a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007614:	7bbb      	ldrb	r3, [r7, #14]
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f001 f94b 	bl	80088b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800761e:	2180      	movs	r1, #128	; 0x80
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f001 f947 	bl	80088b4 <USBD_LL_StallEP>
 8007626:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007628:	e040      	b.n	80076ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fc3e 	bl	8007eae <USBD_CtlError>
              break;
 8007632:	e03b      	b.n	80076ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	885b      	ldrh	r3, [r3, #2]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d136      	bne.n	80076aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800763c:	7bbb      	ldrb	r3, [r7, #14]
 800763e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007642:	2b00      	cmp	r3, #0
 8007644:	d004      	beq.n	8007650 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	4619      	mov	r1, r3
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f001 f951 	bl	80088f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fcf7 	bl	8008044 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007656:	7bbb      	ldrb	r3, [r7, #14]
 8007658:	4619      	mov	r1, r3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff fde2 	bl	8007224 <USBD_CoreFindEP>
 8007660:	4603      	mov	r3, r0
 8007662:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007664:	7b7b      	ldrb	r3, [r7, #13]
 8007666:	2bff      	cmp	r3, #255	; 0xff
 8007668:	d01f      	beq.n	80076aa <USBD_StdEPReq+0x1c6>
 800766a:	7b7b      	ldrb	r3, [r7, #13]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d11c      	bne.n	80076aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007670:	7b7a      	ldrb	r2, [r7, #13]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007678:	7b7a      	ldrb	r2, [r7, #13]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	32ae      	adds	r2, #174	; 0xae
 800767e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d010      	beq.n	80076aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007688:	7b7a      	ldrb	r2, [r7, #13]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	32ae      	adds	r2, #174	; 0xae
 800768e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
 800769a:	4603      	mov	r3, r0
 800769c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800769e:	e004      	b.n	80076aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fc03 	bl	8007eae <USBD_CtlError>
              break;
 80076a8:	e000      	b.n	80076ac <USBD_StdEPReq+0x1c8>
              break;
 80076aa:	bf00      	nop
          }
          break;
 80076ac:	e0ab      	b.n	8007806 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d002      	beq.n	80076c0 <USBD_StdEPReq+0x1dc>
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d032      	beq.n	8007724 <USBD_StdEPReq+0x240>
 80076be:	e097      	b.n	80077f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076c0:	7bbb      	ldrb	r3, [r7, #14]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d007      	beq.n	80076d6 <USBD_StdEPReq+0x1f2>
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
 80076c8:	2b80      	cmp	r3, #128	; 0x80
 80076ca:	d004      	beq.n	80076d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fbed 	bl	8007eae <USBD_CtlError>
                break;
 80076d4:	e091      	b.n	80077fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	da0b      	bge.n	80076f6 <USBD_StdEPReq+0x212>
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	3310      	adds	r3, #16
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	4413      	add	r3, r2
 80076f2:	3304      	adds	r3, #4
 80076f4:	e00b      	b.n	800770e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076fc:	4613      	mov	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	4413      	add	r3, r2
 800770c:	3304      	adds	r3, #4
 800770e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2200      	movs	r2, #0
 8007714:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2202      	movs	r2, #2
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fc37 	bl	8007f90 <USBD_CtlSendData>
              break;
 8007722:	e06a      	b.n	80077fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007728:	2b00      	cmp	r3, #0
 800772a:	da11      	bge.n	8007750 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	f003 020f 	and.w	r2, r3, #15
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	4613      	mov	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	440b      	add	r3, r1
 800773e:	3324      	adds	r3, #36	; 0x24
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d117      	bne.n	8007776 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fbb0 	bl	8007eae <USBD_CtlError>
                  break;
 800774e:	e054      	b.n	80077fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	f003 020f 	and.w	r2, r3, #15
 8007756:	6879      	ldr	r1, [r7, #4]
 8007758:	4613      	mov	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	440b      	add	r3, r1
 8007762:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d104      	bne.n	8007776 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fb9d 	bl	8007eae <USBD_CtlError>
                  break;
 8007774:	e041      	b.n	80077fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007776:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800777a:	2b00      	cmp	r3, #0
 800777c:	da0b      	bge.n	8007796 <USBD_StdEPReq+0x2b2>
 800777e:	7bbb      	ldrb	r3, [r7, #14]
 8007780:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007784:	4613      	mov	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	3310      	adds	r3, #16
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	4413      	add	r3, r2
 8007792:	3304      	adds	r3, #4
 8007794:	e00b      	b.n	80077ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007796:	7bbb      	ldrb	r3, [r7, #14]
 8007798:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800779c:	4613      	mov	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	4413      	add	r3, r2
 80077ac:	3304      	adds	r3, #4
 80077ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <USBD_StdEPReq+0x2d8>
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
 80077b8:	2b80      	cmp	r3, #128	; 0x80
 80077ba:	d103      	bne.n	80077c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2200      	movs	r2, #0
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	e00e      	b.n	80077e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f001 f8b1 	bl	8008930 <USBD_LL_IsStallEP>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d003      	beq.n	80077dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2201      	movs	r2, #1
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	e002      	b.n	80077e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2200      	movs	r2, #0
 80077e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2202      	movs	r2, #2
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fbd1 	bl	8007f90 <USBD_CtlSendData>
              break;
 80077ee:	e004      	b.n	80077fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fb5b 	bl	8007eae <USBD_CtlError>
              break;
 80077f8:	bf00      	nop
          }
          break;
 80077fa:	e004      	b.n	8007806 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fb55 	bl	8007eae <USBD_CtlError>
          break;
 8007804:	bf00      	nop
      }
      break;
 8007806:	e005      	b.n	8007814 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fb4f 	bl	8007eae <USBD_CtlError>
      break;
 8007810:	e000      	b.n	8007814 <USBD_StdEPReq+0x330>
      break;
 8007812:	bf00      	nop
  }

  return ret;
 8007814:	7bfb      	ldrb	r3, [r7, #15]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800782e:	2300      	movs	r3, #0
 8007830:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	885b      	ldrh	r3, [r3, #2]
 800783a:	0a1b      	lsrs	r3, r3, #8
 800783c:	b29b      	uxth	r3, r3
 800783e:	3b01      	subs	r3, #1
 8007840:	2b06      	cmp	r3, #6
 8007842:	f200 8128 	bhi.w	8007a96 <USBD_GetDescriptor+0x276>
 8007846:	a201      	add	r2, pc, #4	; (adr r2, 800784c <USBD_GetDescriptor+0x2c>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	08007869 	.word	0x08007869
 8007850:	08007881 	.word	0x08007881
 8007854:	080078c1 	.word	0x080078c1
 8007858:	08007a97 	.word	0x08007a97
 800785c:	08007a97 	.word	0x08007a97
 8007860:	08007a37 	.word	0x08007a37
 8007864:	08007a63 	.word	0x08007a63
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	7c12      	ldrb	r2, [r2, #16]
 8007874:	f107 0108 	add.w	r1, r7, #8
 8007878:	4610      	mov	r0, r2
 800787a:	4798      	blx	r3
 800787c:	60f8      	str	r0, [r7, #12]
      break;
 800787e:	e112      	b.n	8007aa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	7c1b      	ldrb	r3, [r3, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10d      	bne.n	80078a4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800788e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007890:	f107 0208 	add.w	r2, r7, #8
 8007894:	4610      	mov	r0, r2
 8007896:	4798      	blx	r3
 8007898:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3301      	adds	r3, #1
 800789e:	2202      	movs	r2, #2
 80078a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80078a2:	e100      	b.n	8007aa6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	f107 0208 	add.w	r2, r7, #8
 80078b0:	4610      	mov	r0, r2
 80078b2:	4798      	blx	r3
 80078b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3301      	adds	r3, #1
 80078ba:	2202      	movs	r2, #2
 80078bc:	701a      	strb	r2, [r3, #0]
      break;
 80078be:	e0f2      	b.n	8007aa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	885b      	ldrh	r3, [r3, #2]
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b05      	cmp	r3, #5
 80078c8:	f200 80ac 	bhi.w	8007a24 <USBD_GetDescriptor+0x204>
 80078cc:	a201      	add	r2, pc, #4	; (adr r2, 80078d4 <USBD_GetDescriptor+0xb4>)
 80078ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d2:	bf00      	nop
 80078d4:	080078ed 	.word	0x080078ed
 80078d8:	08007921 	.word	0x08007921
 80078dc:	08007955 	.word	0x08007955
 80078e0:	08007989 	.word	0x08007989
 80078e4:	080079bd 	.word	0x080079bd
 80078e8:	080079f1 	.word	0x080079f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00b      	beq.n	8007910 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	7c12      	ldrb	r2, [r2, #16]
 8007904:	f107 0108 	add.w	r1, r7, #8
 8007908:	4610      	mov	r0, r2
 800790a:	4798      	blx	r3
 800790c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800790e:	e091      	b.n	8007a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 facb 	bl	8007eae <USBD_CtlError>
            err++;
 8007918:	7afb      	ldrb	r3, [r7, #11]
 800791a:	3301      	adds	r3, #1
 800791c:	72fb      	strb	r3, [r7, #11]
          break;
 800791e:	e089      	b.n	8007a34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00b      	beq.n	8007944 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	7c12      	ldrb	r2, [r2, #16]
 8007938:	f107 0108 	add.w	r1, r7, #8
 800793c:	4610      	mov	r0, r2
 800793e:	4798      	blx	r3
 8007940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007942:	e077      	b.n	8007a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fab1 	bl	8007eae <USBD_CtlError>
            err++;
 800794c:	7afb      	ldrb	r3, [r7, #11]
 800794e:	3301      	adds	r3, #1
 8007950:	72fb      	strb	r3, [r7, #11]
          break;
 8007952:	e06f      	b.n	8007a34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00b      	beq.n	8007978 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	7c12      	ldrb	r2, [r2, #16]
 800796c:	f107 0108 	add.w	r1, r7, #8
 8007970:	4610      	mov	r0, r2
 8007972:	4798      	blx	r3
 8007974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007976:	e05d      	b.n	8007a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fa97 	bl	8007eae <USBD_CtlError>
            err++;
 8007980:	7afb      	ldrb	r3, [r7, #11]
 8007982:	3301      	adds	r3, #1
 8007984:	72fb      	strb	r3, [r7, #11]
          break;
 8007986:	e055      	b.n	8007a34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00b      	beq.n	80079ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	7c12      	ldrb	r2, [r2, #16]
 80079a0:	f107 0108 	add.w	r1, r7, #8
 80079a4:	4610      	mov	r0, r2
 80079a6:	4798      	blx	r3
 80079a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079aa:	e043      	b.n	8007a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fa7d 	bl	8007eae <USBD_CtlError>
            err++;
 80079b4:	7afb      	ldrb	r3, [r7, #11]
 80079b6:	3301      	adds	r3, #1
 80079b8:	72fb      	strb	r3, [r7, #11]
          break;
 80079ba:	e03b      	b.n	8007a34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00b      	beq.n	80079e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	7c12      	ldrb	r2, [r2, #16]
 80079d4:	f107 0108 	add.w	r1, r7, #8
 80079d8:	4610      	mov	r0, r2
 80079da:	4798      	blx	r3
 80079dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079de:	e029      	b.n	8007a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fa63 	bl	8007eae <USBD_CtlError>
            err++;
 80079e8:	7afb      	ldrb	r3, [r7, #11]
 80079ea:	3301      	adds	r3, #1
 80079ec:	72fb      	strb	r3, [r7, #11]
          break;
 80079ee:	e021      	b.n	8007a34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00b      	beq.n	8007a14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	7c12      	ldrb	r2, [r2, #16]
 8007a08:	f107 0108 	add.w	r1, r7, #8
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	4798      	blx	r3
 8007a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a12:	e00f      	b.n	8007a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fa49 	bl	8007eae <USBD_CtlError>
            err++;
 8007a1c:	7afb      	ldrb	r3, [r7, #11]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	72fb      	strb	r3, [r7, #11]
          break;
 8007a22:	e007      	b.n	8007a34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fa41 	bl	8007eae <USBD_CtlError>
          err++;
 8007a2c:	7afb      	ldrb	r3, [r7, #11]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007a32:	bf00      	nop
      }
      break;
 8007a34:	e037      	b.n	8007aa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	7c1b      	ldrb	r3, [r3, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d109      	bne.n	8007a52 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a46:	f107 0208 	add.w	r2, r7, #8
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	4798      	blx	r3
 8007a4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a50:	e029      	b.n	8007aa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fa2a 	bl	8007eae <USBD_CtlError>
        err++;
 8007a5a:	7afb      	ldrb	r3, [r7, #11]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a60:	e021      	b.n	8007aa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	7c1b      	ldrb	r3, [r3, #16]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10d      	bne.n	8007a86 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a72:	f107 0208 	add.w	r2, r7, #8
 8007a76:	4610      	mov	r0, r2
 8007a78:	4798      	blx	r3
 8007a7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	2207      	movs	r2, #7
 8007a82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a84:	e00f      	b.n	8007aa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fa10 	bl	8007eae <USBD_CtlError>
        err++;
 8007a8e:	7afb      	ldrb	r3, [r7, #11]
 8007a90:	3301      	adds	r3, #1
 8007a92:	72fb      	strb	r3, [r7, #11]
      break;
 8007a94:	e007      	b.n	8007aa6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fa08 	bl	8007eae <USBD_CtlError>
      err++;
 8007a9e:	7afb      	ldrb	r3, [r7, #11]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	72fb      	strb	r3, [r7, #11]
      break;
 8007aa4:	bf00      	nop
  }

  if (err != 0U)
 8007aa6:	7afb      	ldrb	r3, [r7, #11]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d11e      	bne.n	8007aea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	88db      	ldrh	r3, [r3, #6]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d016      	beq.n	8007ae2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007ab4:	893b      	ldrh	r3, [r7, #8]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00e      	beq.n	8007ad8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	88da      	ldrh	r2, [r3, #6]
 8007abe:	893b      	ldrh	r3, [r7, #8]
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	bf28      	it	cs
 8007ac4:	4613      	movcs	r3, r2
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007aca:	893b      	ldrh	r3, [r7, #8]
 8007acc:	461a      	mov	r2, r3
 8007ace:	68f9      	ldr	r1, [r7, #12]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fa5d 	bl	8007f90 <USBD_CtlSendData>
 8007ad6:	e009      	b.n	8007aec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f9e7 	bl	8007eae <USBD_CtlError>
 8007ae0:	e004      	b.n	8007aec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 faae 	bl	8008044 <USBD_CtlSendStatus>
 8007ae8:	e000      	b.n	8007aec <USBD_GetDescriptor+0x2cc>
    return;
 8007aea:	bf00      	nop
  }
}
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop

08007af4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	889b      	ldrh	r3, [r3, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d131      	bne.n	8007b6a <USBD_SetAddress+0x76>
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	88db      	ldrh	r3, [r3, #6]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d12d      	bne.n	8007b6a <USBD_SetAddress+0x76>
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	885b      	ldrh	r3, [r3, #2]
 8007b12:	2b7f      	cmp	r3, #127	; 0x7f
 8007b14:	d829      	bhi.n	8007b6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	885b      	ldrh	r3, [r3, #2]
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d104      	bne.n	8007b38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f9bc 	bl	8007eae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b36:	e01d      	b.n	8007b74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	7bfa      	ldrb	r2, [r7, #15]
 8007b3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 ff1f 	bl	8008988 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fa7a 	bl	8008044 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d004      	beq.n	8007b60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2202      	movs	r2, #2
 8007b5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b5e:	e009      	b.n	8007b74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b68:	e004      	b.n	8007b74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f99e 	bl	8007eae <USBD_CtlError>
  }
}
 8007b72:	bf00      	nop
 8007b74:	bf00      	nop
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	885b      	ldrh	r3, [r3, #2]
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	4b4e      	ldr	r3, [pc, #312]	; (8007ccc <USBD_SetConfig+0x150>)
 8007b92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b94:	4b4d      	ldr	r3, [pc, #308]	; (8007ccc <USBD_SetConfig+0x150>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d905      	bls.n	8007ba8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f985 	bl	8007eae <USBD_CtlError>
    return USBD_FAIL;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e08c      	b.n	8007cc2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d002      	beq.n	8007bba <USBD_SetConfig+0x3e>
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	d029      	beq.n	8007c0c <USBD_SetConfig+0x90>
 8007bb8:	e075      	b.n	8007ca6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007bba:	4b44      	ldr	r3, [pc, #272]	; (8007ccc <USBD_SetConfig+0x150>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d020      	beq.n	8007c04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007bc2:	4b42      	ldr	r3, [pc, #264]	; (8007ccc <USBD_SetConfig+0x150>)
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bcc:	4b3f      	ldr	r3, [pc, #252]	; (8007ccc <USBD_SetConfig+0x150>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7fe ffe7 	bl	8006ba6 <USBD_SetClassConfig>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d008      	beq.n	8007bf4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f962 	bl	8007eae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2202      	movs	r2, #2
 8007bee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007bf2:	e065      	b.n	8007cc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fa25 	bl	8008044 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2203      	movs	r2, #3
 8007bfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c02:	e05d      	b.n	8007cc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fa1d 	bl	8008044 <USBD_CtlSendStatus>
      break;
 8007c0a:	e059      	b.n	8007cc0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007c0c:	4b2f      	ldr	r3, [pc, #188]	; (8007ccc <USBD_SetConfig+0x150>)
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d112      	bne.n	8007c3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007c1c:	4b2b      	ldr	r3, [pc, #172]	; (8007ccc <USBD_SetConfig+0x150>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	461a      	mov	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c26:	4b29      	ldr	r3, [pc, #164]	; (8007ccc <USBD_SetConfig+0x150>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7fe ffd6 	bl	8006bde <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fa06 	bl	8008044 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c38:	e042      	b.n	8007cc0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007c3a:	4b24      	ldr	r3, [pc, #144]	; (8007ccc <USBD_SetConfig+0x150>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d02a      	beq.n	8007c9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7fe ffc4 	bl	8006bde <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c56:	4b1d      	ldr	r3, [pc, #116]	; (8007ccc <USBD_SetConfig+0x150>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c60:	4b1a      	ldr	r3, [pc, #104]	; (8007ccc <USBD_SetConfig+0x150>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	4619      	mov	r1, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7fe ff9d 	bl	8006ba6 <USBD_SetClassConfig>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00f      	beq.n	8007c96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f918 	bl	8007eae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	4619      	mov	r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7fe ffa9 	bl	8006bde <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c94:	e014      	b.n	8007cc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f9d4 	bl	8008044 <USBD_CtlSendStatus>
      break;
 8007c9c:	e010      	b.n	8007cc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f9d0 	bl	8008044 <USBD_CtlSendStatus>
      break;
 8007ca4:	e00c      	b.n	8007cc0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f900 	bl	8007eae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007cae:	4b07      	ldr	r3, [pc, #28]	; (8007ccc <USBD_SetConfig+0x150>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7fe ff92 	bl	8006bde <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007cbe:	bf00      	nop
  }

  return ret;
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	20000424 	.word	0x20000424

08007cd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	88db      	ldrh	r3, [r3, #6]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d004      	beq.n	8007cec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f8e2 	bl	8007eae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007cea:	e023      	b.n	8007d34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	dc02      	bgt.n	8007cfe <USBD_GetConfig+0x2e>
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	dc03      	bgt.n	8007d04 <USBD_GetConfig+0x34>
 8007cfc:	e015      	b.n	8007d2a <USBD_GetConfig+0x5a>
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d00b      	beq.n	8007d1a <USBD_GetConfig+0x4a>
 8007d02:	e012      	b.n	8007d2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	3308      	adds	r3, #8
 8007d0e:	2201      	movs	r2, #1
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f93c 	bl	8007f90 <USBD_CtlSendData>
        break;
 8007d18:	e00c      	b.n	8007d34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	3304      	adds	r3, #4
 8007d1e:	2201      	movs	r2, #1
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f934 	bl	8007f90 <USBD_CtlSendData>
        break;
 8007d28:	e004      	b.n	8007d34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f8be 	bl	8007eae <USBD_CtlError>
        break;
 8007d32:	bf00      	nop
}
 8007d34:	bf00      	nop
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d81e      	bhi.n	8007d92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	88db      	ldrh	r3, [r3, #6]
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d004      	beq.n	8007d66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f8a5 	bl	8007eae <USBD_CtlError>
        break;
 8007d64:	e01a      	b.n	8007d9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d005      	beq.n	8007d82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	f043 0202 	orr.w	r2, r3, #2
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	330c      	adds	r3, #12
 8007d86:	2202      	movs	r2, #2
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f900 	bl	8007f90 <USBD_CtlSendData>
      break;
 8007d90:	e004      	b.n	8007d9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f88a 	bl	8007eae <USBD_CtlError>
      break;
 8007d9a:	bf00      	nop
  }
}
 8007d9c:	bf00      	nop
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	885b      	ldrh	r3, [r3, #2]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d107      	bne.n	8007dc6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f940 	bl	8008044 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007dc4:	e013      	b.n	8007dee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	885b      	ldrh	r3, [r3, #2]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d10b      	bne.n	8007de6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	889b      	ldrh	r3, [r3, #4]
 8007dd2:	0a1b      	lsrs	r3, r3, #8
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f930 	bl	8008044 <USBD_CtlSendStatus>
}
 8007de4:	e003      	b.n	8007dee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f860 	bl	8007eae <USBD_CtlError>
}
 8007dee:	bf00      	nop
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d80b      	bhi.n	8007e26 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	885b      	ldrh	r3, [r3, #2]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d10c      	bne.n	8007e30 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f910 	bl	8008044 <USBD_CtlSendStatus>
      }
      break;
 8007e24:	e004      	b.n	8007e30 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f840 	bl	8007eae <USBD_CtlError>
      break;
 8007e2e:	e000      	b.n	8007e32 <USBD_ClrFeature+0x3c>
      break;
 8007e30:	bf00      	nop
  }
}
 8007e32:	bf00      	nop
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	781a      	ldrb	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3301      	adds	r3, #1
 8007e54:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	781a      	ldrb	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3301      	adds	r3, #1
 8007e62:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f7ff fa41 	bl	80072ec <SWAPBYTE>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3301      	adds	r3, #1
 8007e76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f7ff fa34 	bl	80072ec <SWAPBYTE>
 8007e84:	4603      	mov	r3, r0
 8007e86:	461a      	mov	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3301      	adds	r3, #1
 8007e96:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7ff fa27 	bl	80072ec <SWAPBYTE>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	80da      	strh	r2, [r3, #6]
}
 8007ea6:	bf00      	nop
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b082      	sub	sp, #8
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eb8:	2180      	movs	r1, #128	; 0x80
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fcfa 	bl	80088b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fcf6 	bl	80088b4 <USBD_LL_StallEP>
}
 8007ec8:	bf00      	nop
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d036      	beq.n	8007f54 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007eea:	6938      	ldr	r0, [r7, #16]
 8007eec:	f000 f836 	bl	8007f5c <USBD_GetLen>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	4413      	add	r3, r2
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	7812      	ldrb	r2, [r2, #0]
 8007f08:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	4413      	add	r3, r2
 8007f16:	2203      	movs	r2, #3
 8007f18:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007f20:	e013      	b.n	8007f4a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	4413      	add	r3, r2
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	7812      	ldrb	r2, [r2, #0]
 8007f2c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	3301      	adds	r3, #1
 8007f32:	613b      	str	r3, [r7, #16]
    idx++;
 8007f34:	7dfb      	ldrb	r3, [r7, #23]
 8007f36:	3301      	adds	r3, #1
 8007f38:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	4413      	add	r3, r2
 8007f40:	2200      	movs	r2, #0
 8007f42:	701a      	strb	r2, [r3, #0]
    idx++;
 8007f44:	7dfb      	ldrb	r3, [r7, #23]
 8007f46:	3301      	adds	r3, #1
 8007f48:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1e7      	bne.n	8007f22 <USBD_GetString+0x52>
 8007f52:	e000      	b.n	8007f56 <USBD_GetString+0x86>
    return;
 8007f54:	bf00      	nop
  }
}
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f6c:	e005      	b.n	8007f7a <USBD_GetLen+0x1e>
  {
    len++;
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	3301      	adds	r3, #1
 8007f72:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	3301      	adds	r3, #1
 8007f78:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1f5      	bne.n	8007f6e <USBD_GetLen+0x12>
  }

  return len;
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f000 fd05 	bl	80089c6 <USBD_LL_Transmit>

  return USBD_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 fcf4 	bl	80089c6 <USBD_LL_Transmit>

  return USBD_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2203      	movs	r2, #3
 8007ff8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	2100      	movs	r1, #0
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 fcf8 	bl	8008a08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b084      	sub	sp, #16
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	2100      	movs	r1, #0
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 fce7 	bl	8008a08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2204      	movs	r2, #4
 8008050:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008054:	2300      	movs	r3, #0
 8008056:	2200      	movs	r2, #0
 8008058:	2100      	movs	r1, #0
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fcb3 	bl	80089c6 <USBD_LL_Transmit>

  return USBD_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2205      	movs	r2, #5
 8008076:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800807a:	2300      	movs	r3, #0
 800807c:	2200      	movs	r2, #0
 800807e:	2100      	movs	r1, #0
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fcc1 	bl	8008a08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008094:	2200      	movs	r2, #0
 8008096:	4912      	ldr	r1, [pc, #72]	; (80080e0 <MX_USB_DEVICE_Init+0x50>)
 8008098:	4812      	ldr	r0, [pc, #72]	; (80080e4 <MX_USB_DEVICE_Init+0x54>)
 800809a:	f7fe fd07 	bl	8006aac <USBD_Init>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80080a4:	f7f9 fa00 	bl	80014a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80080a8:	490f      	ldr	r1, [pc, #60]	; (80080e8 <MX_USB_DEVICE_Init+0x58>)
 80080aa:	480e      	ldr	r0, [pc, #56]	; (80080e4 <MX_USB_DEVICE_Init+0x54>)
 80080ac:	f7fe fd2e 	bl	8006b0c <USBD_RegisterClass>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80080b6:	f7f9 f9f7 	bl	80014a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80080ba:	490c      	ldr	r1, [pc, #48]	; (80080ec <MX_USB_DEVICE_Init+0x5c>)
 80080bc:	4809      	ldr	r0, [pc, #36]	; (80080e4 <MX_USB_DEVICE_Init+0x54>)
 80080be:	f7fe fc1f 	bl	8006900 <USBD_CDC_RegisterInterface>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80080c8:	f7f9 f9ee 	bl	80014a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80080cc:	4805      	ldr	r0, [pc, #20]	; (80080e4 <MX_USB_DEVICE_Init+0x54>)
 80080ce:	f7fe fd53 	bl	8006b78 <USBD_Start>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80080d8:	f7f9 f9e6 	bl	80014a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80080dc:	bf00      	nop
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	200000ac 	.word	0x200000ac
 80080e4:	20000428 	.word	0x20000428
 80080e8:	20000018 	.word	0x20000018
 80080ec:	20000098 	.word	0x20000098

080080f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80080f4:	2200      	movs	r2, #0
 80080f6:	4905      	ldr	r1, [pc, #20]	; (800810c <CDC_Init_FS+0x1c>)
 80080f8:	4805      	ldr	r0, [pc, #20]	; (8008110 <CDC_Init_FS+0x20>)
 80080fa:	f7fe fc1b 	bl	8006934 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80080fe:	4905      	ldr	r1, [pc, #20]	; (8008114 <CDC_Init_FS+0x24>)
 8008100:	4803      	ldr	r0, [pc, #12]	; (8008110 <CDC_Init_FS+0x20>)
 8008102:	f7fe fc39 	bl	8006978 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008106:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008108:	4618      	mov	r0, r3
 800810a:	bd80      	pop	{r7, pc}
 800810c:	20000f04 	.word	0x20000f04
 8008110:	20000428 	.word	0x20000428
 8008114:	20000704 	.word	0x20000704

08008118 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008118:	b480      	push	{r7}
 800811a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800811c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800811e:	4618      	mov	r0, r3
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	4603      	mov	r3, r0
 8008130:	6039      	str	r1, [r7, #0]
 8008132:	71fb      	strb	r3, [r7, #7]
 8008134:	4613      	mov	r3, r2
 8008136:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008138:	79fb      	ldrb	r3, [r7, #7]
 800813a:	2b23      	cmp	r3, #35	; 0x23
 800813c:	d84a      	bhi.n	80081d4 <CDC_Control_FS+0xac>
 800813e:	a201      	add	r2, pc, #4	; (adr r2, 8008144 <CDC_Control_FS+0x1c>)
 8008140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008144:	080081d5 	.word	0x080081d5
 8008148:	080081d5 	.word	0x080081d5
 800814c:	080081d5 	.word	0x080081d5
 8008150:	080081d5 	.word	0x080081d5
 8008154:	080081d5 	.word	0x080081d5
 8008158:	080081d5 	.word	0x080081d5
 800815c:	080081d5 	.word	0x080081d5
 8008160:	080081d5 	.word	0x080081d5
 8008164:	080081d5 	.word	0x080081d5
 8008168:	080081d5 	.word	0x080081d5
 800816c:	080081d5 	.word	0x080081d5
 8008170:	080081d5 	.word	0x080081d5
 8008174:	080081d5 	.word	0x080081d5
 8008178:	080081d5 	.word	0x080081d5
 800817c:	080081d5 	.word	0x080081d5
 8008180:	080081d5 	.word	0x080081d5
 8008184:	080081d5 	.word	0x080081d5
 8008188:	080081d5 	.word	0x080081d5
 800818c:	080081d5 	.word	0x080081d5
 8008190:	080081d5 	.word	0x080081d5
 8008194:	080081d5 	.word	0x080081d5
 8008198:	080081d5 	.word	0x080081d5
 800819c:	080081d5 	.word	0x080081d5
 80081a0:	080081d5 	.word	0x080081d5
 80081a4:	080081d5 	.word	0x080081d5
 80081a8:	080081d5 	.word	0x080081d5
 80081ac:	080081d5 	.word	0x080081d5
 80081b0:	080081d5 	.word	0x080081d5
 80081b4:	080081d5 	.word	0x080081d5
 80081b8:	080081d5 	.word	0x080081d5
 80081bc:	080081d5 	.word	0x080081d5
 80081c0:	080081d5 	.word	0x080081d5
 80081c4:	080081d5 	.word	0x080081d5
 80081c8:	080081d5 	.word	0x080081d5
 80081cc:	080081d5 	.word	0x080081d5
 80081d0:	080081d5 	.word	0x080081d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80081d4:	bf00      	nop
  }

  return (USBD_OK);
 80081d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80081ee:	6879      	ldr	r1, [r7, #4]
 80081f0:	480f      	ldr	r0, [pc, #60]	; (8008230 <CDC_Receive_FS+0x4c>)
 80081f2:	f7fe fbc1 	bl	8006978 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80081f6:	480e      	ldr	r0, [pc, #56]	; (8008230 <CDC_Receive_FS+0x4c>)
 80081f8:	f7fe fc22 	bl	8006a40 <USBD_CDC_ReceivePacket>
  if (!strcmp(Buf,"dataforward"))
 80081fc:	490d      	ldr	r1, [pc, #52]	; (8008234 <CDC_Receive_FS+0x50>)
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7f7 ffe6 	bl	80001d0 <strcmp>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d102      	bne.n	8008210 <CDC_Receive_FS+0x2c>
  {
	  flag=0;
 800820a:	4b0b      	ldr	r3, [pc, #44]	; (8008238 <CDC_Receive_FS+0x54>)
 800820c:	2200      	movs	r2, #0
 800820e:	701a      	strb	r2, [r3, #0]
	  //datastate=dataforward;
  }
  if (!strcmp(Buf,"datainfere"))
 8008210:	490a      	ldr	r1, [pc, #40]	; (800823c <CDC_Receive_FS+0x58>)
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7f7 ffdc 	bl	80001d0 <strcmp>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d102      	bne.n	8008224 <CDC_Receive_FS+0x40>
    {
  	  //datastate=datainfere;
	  flag=1;
 800821e:	4b06      	ldr	r3, [pc, #24]	; (8008238 <CDC_Receive_FS+0x54>)
 8008220:	2201      	movs	r2, #1
 8008222:	701a      	strb	r2, [r3, #0]
    }

  return (USBD_OK);
 8008224:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20000428 	.word	0x20000428
 8008234:	0800b948 	.word	0x0800b948
 8008238:	200002eb 	.word	0x200002eb
 800823c:	0800b954 	.word	0x0800b954

08008240 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	460b      	mov	r3, r1
 800824a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008250:	4b0d      	ldr	r3, [pc, #52]	; (8008288 <CDC_Transmit_FS+0x48>)
 8008252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008256:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008262:	2301      	movs	r3, #1
 8008264:	e00b      	b.n	800827e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008266:	887b      	ldrh	r3, [r7, #2]
 8008268:	461a      	mov	r2, r3
 800826a:	6879      	ldr	r1, [r7, #4]
 800826c:	4806      	ldr	r0, [pc, #24]	; (8008288 <CDC_Transmit_FS+0x48>)
 800826e:	f7fe fb61 	bl	8006934 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008272:	4805      	ldr	r0, [pc, #20]	; (8008288 <CDC_Transmit_FS+0x48>)
 8008274:	f7fe fb9e 	bl	80069b4 <USBD_CDC_TransmitPacket>
 8008278:	4603      	mov	r3, r0
 800827a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800827c:	7bfb      	ldrb	r3, [r7, #15]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000428 	.word	0x20000428

0800828c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	4613      	mov	r3, r2
 8008298:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800829e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	371c      	adds	r7, #28
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
	...

080082b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	6039      	str	r1, [r7, #0]
 80082ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	2212      	movs	r2, #18
 80082c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80082c2:	4b03      	ldr	r3, [pc, #12]	; (80082d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	200000c8 	.word	0x200000c8

080082d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	6039      	str	r1, [r7, #0]
 80082de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	2204      	movs	r2, #4
 80082e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082e6:	4b03      	ldr	r3, [pc, #12]	; (80082f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	200000dc 	.word	0x200000dc

080082f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	4603      	mov	r3, r0
 8008300:	6039      	str	r1, [r7, #0]
 8008302:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008304:	79fb      	ldrb	r3, [r7, #7]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d105      	bne.n	8008316 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	4907      	ldr	r1, [pc, #28]	; (800832c <USBD_FS_ProductStrDescriptor+0x34>)
 800830e:	4808      	ldr	r0, [pc, #32]	; (8008330 <USBD_FS_ProductStrDescriptor+0x38>)
 8008310:	f7ff fdde 	bl	8007ed0 <USBD_GetString>
 8008314:	e004      	b.n	8008320 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	4904      	ldr	r1, [pc, #16]	; (800832c <USBD_FS_ProductStrDescriptor+0x34>)
 800831a:	4805      	ldr	r0, [pc, #20]	; (8008330 <USBD_FS_ProductStrDescriptor+0x38>)
 800831c:	f7ff fdd8 	bl	8007ed0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008320:	4b02      	ldr	r3, [pc, #8]	; (800832c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008322:	4618      	mov	r0, r3
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20001704 	.word	0x20001704
 8008330:	0800b960 	.word	0x0800b960

08008334 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	4603      	mov	r3, r0
 800833c:	6039      	str	r1, [r7, #0]
 800833e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008340:	683a      	ldr	r2, [r7, #0]
 8008342:	4904      	ldr	r1, [pc, #16]	; (8008354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008344:	4804      	ldr	r0, [pc, #16]	; (8008358 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008346:	f7ff fdc3 	bl	8007ed0 <USBD_GetString>
  return USBD_StrDesc;
 800834a:	4b02      	ldr	r3, [pc, #8]	; (8008354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	20001704 	.word	0x20001704
 8008358:	0800b978 	.word	0x0800b978

0800835c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	6039      	str	r1, [r7, #0]
 8008366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	221a      	movs	r2, #26
 800836c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800836e:	f000 f843 	bl	80083f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008372:	4b02      	ldr	r3, [pc, #8]	; (800837c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	200000e0 	.word	0x200000e0

08008380 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	4603      	mov	r3, r0
 8008388:	6039      	str	r1, [r7, #0]
 800838a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800838c:	79fb      	ldrb	r3, [r7, #7]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d105      	bne.n	800839e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	4907      	ldr	r1, [pc, #28]	; (80083b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008396:	4808      	ldr	r0, [pc, #32]	; (80083b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008398:	f7ff fd9a 	bl	8007ed0 <USBD_GetString>
 800839c:	e004      	b.n	80083a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	4904      	ldr	r1, [pc, #16]	; (80083b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80083a2:	4805      	ldr	r0, [pc, #20]	; (80083b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80083a4:	f7ff fd94 	bl	8007ed0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083a8:	4b02      	ldr	r3, [pc, #8]	; (80083b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	20001704 	.word	0x20001704
 80083b8:	0800b98c 	.word	0x0800b98c

080083bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	4603      	mov	r3, r0
 80083c4:	6039      	str	r1, [r7, #0]
 80083c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083c8:	79fb      	ldrb	r3, [r7, #7]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d105      	bne.n	80083da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	4907      	ldr	r1, [pc, #28]	; (80083f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083d2:	4808      	ldr	r0, [pc, #32]	; (80083f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083d4:	f7ff fd7c 	bl	8007ed0 <USBD_GetString>
 80083d8:	e004      	b.n	80083e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	4904      	ldr	r1, [pc, #16]	; (80083f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083de:	4805      	ldr	r0, [pc, #20]	; (80083f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083e0:	f7ff fd76 	bl	8007ed0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083e4:	4b02      	ldr	r3, [pc, #8]	; (80083f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	20001704 	.word	0x20001704
 80083f4:	0800b998 	.word	0x0800b998

080083f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083fe:	4b0f      	ldr	r3, [pc, #60]	; (800843c <Get_SerialNum+0x44>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008404:	4b0e      	ldr	r3, [pc, #56]	; (8008440 <Get_SerialNum+0x48>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800840a:	4b0e      	ldr	r3, [pc, #56]	; (8008444 <Get_SerialNum+0x4c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4413      	add	r3, r2
 8008416:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d009      	beq.n	8008432 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800841e:	2208      	movs	r2, #8
 8008420:	4909      	ldr	r1, [pc, #36]	; (8008448 <Get_SerialNum+0x50>)
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 f814 	bl	8008450 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008428:	2204      	movs	r2, #4
 800842a:	4908      	ldr	r1, [pc, #32]	; (800844c <Get_SerialNum+0x54>)
 800842c:	68b8      	ldr	r0, [r7, #8]
 800842e:	f000 f80f 	bl	8008450 <IntToUnicode>
  }
}
 8008432:	bf00      	nop
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	1fff7a10 	.word	0x1fff7a10
 8008440:	1fff7a14 	.word	0x1fff7a14
 8008444:	1fff7a18 	.word	0x1fff7a18
 8008448:	200000e2 	.word	0x200000e2
 800844c:	200000f2 	.word	0x200000f2

08008450 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008450:	b480      	push	{r7}
 8008452:	b087      	sub	sp, #28
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	4613      	mov	r3, r2
 800845c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008462:	2300      	movs	r3, #0
 8008464:	75fb      	strb	r3, [r7, #23]
 8008466:	e027      	b.n	80084b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	0f1b      	lsrs	r3, r3, #28
 800846c:	2b09      	cmp	r3, #9
 800846e:	d80b      	bhi.n	8008488 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	0f1b      	lsrs	r3, r3, #28
 8008474:	b2da      	uxtb	r2, r3
 8008476:	7dfb      	ldrb	r3, [r7, #23]
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	4619      	mov	r1, r3
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	440b      	add	r3, r1
 8008480:	3230      	adds	r2, #48	; 0x30
 8008482:	b2d2      	uxtb	r2, r2
 8008484:	701a      	strb	r2, [r3, #0]
 8008486:	e00a      	b.n	800849e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	0f1b      	lsrs	r3, r3, #28
 800848c:	b2da      	uxtb	r2, r3
 800848e:	7dfb      	ldrb	r3, [r7, #23]
 8008490:	005b      	lsls	r3, r3, #1
 8008492:	4619      	mov	r1, r3
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	440b      	add	r3, r1
 8008498:	3237      	adds	r2, #55	; 0x37
 800849a:	b2d2      	uxtb	r2, r2
 800849c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	011b      	lsls	r3, r3, #4
 80084a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	005b      	lsls	r3, r3, #1
 80084a8:	3301      	adds	r3, #1
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	4413      	add	r3, r2
 80084ae:	2200      	movs	r2, #0
 80084b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80084b2:	7dfb      	ldrb	r3, [r7, #23]
 80084b4:	3301      	adds	r3, #1
 80084b6:	75fb      	strb	r3, [r7, #23]
 80084b8:	7dfa      	ldrb	r2, [r7, #23]
 80084ba:	79fb      	ldrb	r3, [r7, #7]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d3d3      	bcc.n	8008468 <IntToUnicode+0x18>
  }
}
 80084c0:	bf00      	nop
 80084c2:	bf00      	nop
 80084c4:	371c      	adds	r7, #28
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
	...

080084d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b08a      	sub	sp, #40	; 0x28
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084d8:	f107 0314 	add.w	r3, r7, #20
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	605a      	str	r2, [r3, #4]
 80084e2:	609a      	str	r2, [r3, #8]
 80084e4:	60da      	str	r2, [r3, #12]
 80084e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084f0:	d13a      	bne.n	8008568 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084f2:	2300      	movs	r3, #0
 80084f4:	613b      	str	r3, [r7, #16]
 80084f6:	4b1e      	ldr	r3, [pc, #120]	; (8008570 <HAL_PCD_MspInit+0xa0>)
 80084f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fa:	4a1d      	ldr	r2, [pc, #116]	; (8008570 <HAL_PCD_MspInit+0xa0>)
 80084fc:	f043 0301 	orr.w	r3, r3, #1
 8008500:	6313      	str	r3, [r2, #48]	; 0x30
 8008502:	4b1b      	ldr	r3, [pc, #108]	; (8008570 <HAL_PCD_MspInit+0xa0>)
 8008504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	613b      	str	r3, [r7, #16]
 800850c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800850e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008514:	2302      	movs	r3, #2
 8008516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008518:	2300      	movs	r3, #0
 800851a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800851c:	2303      	movs	r3, #3
 800851e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008520:	230a      	movs	r3, #10
 8008522:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008524:	f107 0314 	add.w	r3, r7, #20
 8008528:	4619      	mov	r1, r3
 800852a:	4812      	ldr	r0, [pc, #72]	; (8008574 <HAL_PCD_MspInit+0xa4>)
 800852c:	f7f9 fb86 	bl	8001c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008530:	4b0f      	ldr	r3, [pc, #60]	; (8008570 <HAL_PCD_MspInit+0xa0>)
 8008532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008534:	4a0e      	ldr	r2, [pc, #56]	; (8008570 <HAL_PCD_MspInit+0xa0>)
 8008536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800853a:	6353      	str	r3, [r2, #52]	; 0x34
 800853c:	2300      	movs	r3, #0
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	4b0b      	ldr	r3, [pc, #44]	; (8008570 <HAL_PCD_MspInit+0xa0>)
 8008542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008544:	4a0a      	ldr	r2, [pc, #40]	; (8008570 <HAL_PCD_MspInit+0xa0>)
 8008546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800854a:	6453      	str	r3, [r2, #68]	; 0x44
 800854c:	4b08      	ldr	r3, [pc, #32]	; (8008570 <HAL_PCD_MspInit+0xa0>)
 800854e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008554:	60fb      	str	r3, [r7, #12]
 8008556:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008558:	2200      	movs	r2, #0
 800855a:	2100      	movs	r1, #0
 800855c:	2043      	movs	r0, #67	; 0x43
 800855e:	f7f9 fb28 	bl	8001bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008562:	2043      	movs	r0, #67	; 0x43
 8008564:	f7f9 fb41 	bl	8001bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008568:	bf00      	nop
 800856a:	3728      	adds	r7, #40	; 0x28
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	40023800 	.word	0x40023800
 8008574:	40020000 	.word	0x40020000

08008578 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800858c:	4619      	mov	r1, r3
 800858e:	4610      	mov	r0, r2
 8008590:	f7fe fb3f 	bl	8006c12 <USBD_LL_SetupStage>
}
 8008594:	bf00      	nop
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	460b      	mov	r3, r1
 80085a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80085ae:	78fa      	ldrb	r2, [r7, #3]
 80085b0:	6879      	ldr	r1, [r7, #4]
 80085b2:	4613      	mov	r3, r2
 80085b4:	00db      	lsls	r3, r3, #3
 80085b6:	4413      	add	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	440b      	add	r3, r1
 80085bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	78fb      	ldrb	r3, [r7, #3]
 80085c4:	4619      	mov	r1, r3
 80085c6:	f7fe fb79 	bl	8006cbc <USBD_LL_DataOutStage>
}
 80085ca:	bf00      	nop
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b082      	sub	sp, #8
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	460b      	mov	r3, r1
 80085dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80085e4:	78fa      	ldrb	r2, [r7, #3]
 80085e6:	6879      	ldr	r1, [r7, #4]
 80085e8:	4613      	mov	r3, r2
 80085ea:	00db      	lsls	r3, r3, #3
 80085ec:	4413      	add	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	440b      	add	r3, r1
 80085f2:	334c      	adds	r3, #76	; 0x4c
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	78fb      	ldrb	r3, [r7, #3]
 80085f8:	4619      	mov	r1, r3
 80085fa:	f7fe fc12 	bl	8006e22 <USBD_LL_DataInStage>
}
 80085fe:	bf00      	nop
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008614:	4618      	mov	r0, r3
 8008616:	f7fe fd46 	bl	80070a6 <USBD_LL_SOF>
}
 800861a:	bf00      	nop
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b084      	sub	sp, #16
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800862a:	2301      	movs	r3, #1
 800862c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d102      	bne.n	800863c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008636:	2300      	movs	r3, #0
 8008638:	73fb      	strb	r3, [r7, #15]
 800863a:	e008      	b.n	800864e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	2b02      	cmp	r3, #2
 8008642:	d102      	bne.n	800864a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008644:	2301      	movs	r3, #1
 8008646:	73fb      	strb	r3, [r7, #15]
 8008648:	e001      	b.n	800864e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800864a:	f7f8 ff2d 	bl	80014a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008654:	7bfa      	ldrb	r2, [r7, #15]
 8008656:	4611      	mov	r1, r2
 8008658:	4618      	mov	r0, r3
 800865a:	f7fe fce6 	bl	800702a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008664:	4618      	mov	r0, r3
 8008666:	f7fe fc8e 	bl	8006f86 <USBD_LL_Reset>
}
 800866a:	bf00      	nop
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe fce1 	bl	800704a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	6812      	ldr	r2, [r2, #0]
 8008696:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800869a:	f043 0301 	orr.w	r3, r3, #1
 800869e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a1b      	ldr	r3, [r3, #32]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d005      	beq.n	80086b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086a8:	4b04      	ldr	r3, [pc, #16]	; (80086bc <HAL_PCD_SuspendCallback+0x48>)
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	4a03      	ldr	r2, [pc, #12]	; (80086bc <HAL_PCD_SuspendCallback+0x48>)
 80086ae:	f043 0306 	orr.w	r3, r3, #6
 80086b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086b4:	bf00      	nop
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	e000ed00 	.word	0xe000ed00

080086c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe fcd1 	bl	8007076 <USBD_LL_Resume>
}
 80086d4:	bf00      	nop
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086ee:	78fa      	ldrb	r2, [r7, #3]
 80086f0:	4611      	mov	r1, r2
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fe fd29 	bl	800714a <USBD_LL_IsoOUTIncomplete>
}
 80086f8:	bf00      	nop
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008712:	78fa      	ldrb	r2, [r7, #3]
 8008714:	4611      	mov	r1, r2
 8008716:	4618      	mov	r0, r3
 8008718:	f7fe fce5 	bl	80070e6 <USBD_LL_IsoINIncomplete>
}
 800871c:	bf00      	nop
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008732:	4618      	mov	r0, r3
 8008734:	f7fe fd3b 	bl	80071ae <USBD_LL_DevConnected>
}
 8008738:	bf00      	nop
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe fd38 	bl	80071c4 <USBD_LL_DevDisconnected>
}
 8008754:	bf00      	nop
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d13c      	bne.n	80087e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800876c:	4a20      	ldr	r2, [pc, #128]	; (80087f0 <USBD_LL_Init+0x94>)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a1e      	ldr	r2, [pc, #120]	; (80087f0 <USBD_LL_Init+0x94>)
 8008778:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800877c:	4b1c      	ldr	r3, [pc, #112]	; (80087f0 <USBD_LL_Init+0x94>)
 800877e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008782:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008784:	4b1a      	ldr	r3, [pc, #104]	; (80087f0 <USBD_LL_Init+0x94>)
 8008786:	2204      	movs	r2, #4
 8008788:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800878a:	4b19      	ldr	r3, [pc, #100]	; (80087f0 <USBD_LL_Init+0x94>)
 800878c:	2202      	movs	r2, #2
 800878e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008790:	4b17      	ldr	r3, [pc, #92]	; (80087f0 <USBD_LL_Init+0x94>)
 8008792:	2200      	movs	r2, #0
 8008794:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008796:	4b16      	ldr	r3, [pc, #88]	; (80087f0 <USBD_LL_Init+0x94>)
 8008798:	2202      	movs	r2, #2
 800879a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800879c:	4b14      	ldr	r3, [pc, #80]	; (80087f0 <USBD_LL_Init+0x94>)
 800879e:	2200      	movs	r2, #0
 80087a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80087a2:	4b13      	ldr	r3, [pc, #76]	; (80087f0 <USBD_LL_Init+0x94>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80087a8:	4b11      	ldr	r3, [pc, #68]	; (80087f0 <USBD_LL_Init+0x94>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80087ae:	4b10      	ldr	r3, [pc, #64]	; (80087f0 <USBD_LL_Init+0x94>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80087b4:	4b0e      	ldr	r3, [pc, #56]	; (80087f0 <USBD_LL_Init+0x94>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80087ba:	480d      	ldr	r0, [pc, #52]	; (80087f0 <USBD_LL_Init+0x94>)
 80087bc:	f7f9 fc24 	bl	8002008 <HAL_PCD_Init>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80087c6:	f7f8 fe6f 	bl	80014a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80087ca:	2180      	movs	r1, #128	; 0x80
 80087cc:	4808      	ldr	r0, [pc, #32]	; (80087f0 <USBD_LL_Init+0x94>)
 80087ce:	f7fa fe7c 	bl	80034ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80087d2:	2240      	movs	r2, #64	; 0x40
 80087d4:	2100      	movs	r1, #0
 80087d6:	4806      	ldr	r0, [pc, #24]	; (80087f0 <USBD_LL_Init+0x94>)
 80087d8:	f7fa fe30 	bl	800343c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80087dc:	2280      	movs	r2, #128	; 0x80
 80087de:	2101      	movs	r1, #1
 80087e0:	4803      	ldr	r0, [pc, #12]	; (80087f0 <USBD_LL_Init+0x94>)
 80087e2:	f7fa fe2b 	bl	800343c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	20001904 	.word	0x20001904

080087f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800880a:	4618      	mov	r0, r3
 800880c:	f7f9 fd19 	bl	8002242 <HAL_PCD_Start>
 8008810:	4603      	mov	r3, r0
 8008812:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	4618      	mov	r0, r3
 8008818:	f000 f942 	bl	8008aa0 <USBD_Get_USB_Status>
 800881c:	4603      	mov	r3, r0
 800881e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008820:	7bbb      	ldrb	r3, [r7, #14]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	4608      	mov	r0, r1
 8008834:	4611      	mov	r1, r2
 8008836:	461a      	mov	r2, r3
 8008838:	4603      	mov	r3, r0
 800883a:	70fb      	strb	r3, [r7, #3]
 800883c:	460b      	mov	r3, r1
 800883e:	70bb      	strb	r3, [r7, #2]
 8008840:	4613      	mov	r3, r2
 8008842:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008852:	78bb      	ldrb	r3, [r7, #2]
 8008854:	883a      	ldrh	r2, [r7, #0]
 8008856:	78f9      	ldrb	r1, [r7, #3]
 8008858:	f7fa f9ea 	bl	8002c30 <HAL_PCD_EP_Open>
 800885c:	4603      	mov	r3, r0
 800885e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008860:	7bfb      	ldrb	r3, [r7, #15]
 8008862:	4618      	mov	r0, r3
 8008864:	f000 f91c 	bl	8008aa0 <USBD_Get_USB_Status>
 8008868:	4603      	mov	r3, r0
 800886a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800886c:	7bbb      	ldrb	r3, [r7, #14]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b084      	sub	sp, #16
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	460b      	mov	r3, r1
 8008880:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008890:	78fa      	ldrb	r2, [r7, #3]
 8008892:	4611      	mov	r1, r2
 8008894:	4618      	mov	r0, r3
 8008896:	f7fa fa33 	bl	8002d00 <HAL_PCD_EP_Close>
 800889a:	4603      	mov	r3, r0
 800889c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 f8fd 	bl	8008aa0 <USBD_Get_USB_Status>
 80088a6:	4603      	mov	r3, r0
 80088a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088ce:	78fa      	ldrb	r2, [r7, #3]
 80088d0:	4611      	mov	r1, r2
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fa fb0b 	bl	8002eee <HAL_PCD_EP_SetStall>
 80088d8:	4603      	mov	r3, r0
 80088da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 f8de 	bl	8008aa0 <USBD_Get_USB_Status>
 80088e4:	4603      	mov	r3, r0
 80088e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	460b      	mov	r3, r1
 80088fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800890c:	78fa      	ldrb	r2, [r7, #3]
 800890e:	4611      	mov	r1, r2
 8008910:	4618      	mov	r0, r3
 8008912:	f7fa fb50 	bl	8002fb6 <HAL_PCD_EP_ClrStall>
 8008916:	4603      	mov	r3, r0
 8008918:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800891a:	7bfb      	ldrb	r3, [r7, #15]
 800891c:	4618      	mov	r0, r3
 800891e:	f000 f8bf 	bl	8008aa0 <USBD_Get_USB_Status>
 8008922:	4603      	mov	r3, r0
 8008924:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008926:	7bbb      	ldrb	r3, [r7, #14]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	460b      	mov	r3, r1
 800893a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008942:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008948:	2b00      	cmp	r3, #0
 800894a:	da0b      	bge.n	8008964 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800894c:	78fb      	ldrb	r3, [r7, #3]
 800894e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008952:	68f9      	ldr	r1, [r7, #12]
 8008954:	4613      	mov	r3, r2
 8008956:	00db      	lsls	r3, r3, #3
 8008958:	4413      	add	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	440b      	add	r3, r1
 800895e:	333e      	adds	r3, #62	; 0x3e
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	e00b      	b.n	800897c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008964:	78fb      	ldrb	r3, [r7, #3]
 8008966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800896a:	68f9      	ldr	r1, [r7, #12]
 800896c:	4613      	mov	r3, r2
 800896e:	00db      	lsls	r3, r3, #3
 8008970:	4413      	add	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	440b      	add	r3, r1
 8008976:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800897a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800897c:	4618      	mov	r0, r3
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089a2:	78fa      	ldrb	r2, [r7, #3]
 80089a4:	4611      	mov	r1, r2
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fa f91d 	bl	8002be6 <HAL_PCD_SetAddress>
 80089ac:	4603      	mov	r3, r0
 80089ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 f874 	bl	8008aa0 <USBD_Get_USB_Status>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b086      	sub	sp, #24
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	603b      	str	r3, [r7, #0]
 80089d2:	460b      	mov	r3, r1
 80089d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80089e4:	7af9      	ldrb	r1, [r7, #11]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	f7fa fa36 	bl	8002e5a <HAL_PCD_EP_Transmit>
 80089ee:	4603      	mov	r3, r0
 80089f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 f853 	bl	8008aa0 <USBD_Get_USB_Status>
 80089fa:	4603      	mov	r3, r0
 80089fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3718      	adds	r7, #24
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	607a      	str	r2, [r7, #4]
 8008a12:	603b      	str	r3, [r7, #0]
 8008a14:	460b      	mov	r3, r1
 8008a16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008a26:	7af9      	ldrb	r1, [r7, #11]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	f7fa f9b2 	bl	8002d94 <HAL_PCD_EP_Receive>
 8008a30:	4603      	mov	r3, r0
 8008a32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a34:	7dfb      	ldrb	r3, [r7, #23]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 f832 	bl	8008aa0 <USBD_Get_USB_Status>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a40:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a5c:	78fa      	ldrb	r2, [r7, #3]
 8008a5e:	4611      	mov	r1, r2
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fa f9e2 	bl	8002e2a <HAL_PCD_EP_GetRxCount>
 8008a66:	4603      	mov	r3, r0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a78:	4b03      	ldr	r3, [pc, #12]	; (8008a88 <USBD_static_malloc+0x18>)
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	20001e10 	.word	0x20001e10

08008a8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]

}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008aae:	79fb      	ldrb	r3, [r7, #7]
 8008ab0:	2b03      	cmp	r3, #3
 8008ab2:	d817      	bhi.n	8008ae4 <USBD_Get_USB_Status+0x44>
 8008ab4:	a201      	add	r2, pc, #4	; (adr r2, 8008abc <USBD_Get_USB_Status+0x1c>)
 8008ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aba:	bf00      	nop
 8008abc:	08008acd 	.word	0x08008acd
 8008ac0:	08008ad3 	.word	0x08008ad3
 8008ac4:	08008ad9 	.word	0x08008ad9
 8008ac8:	08008adf 	.word	0x08008adf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad0:	e00b      	b.n	8008aea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad6:	e008      	b.n	8008aea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	73fb      	strb	r3, [r7, #15]
    break;
 8008adc:	e005      	b.n	8008aea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae2:	e002      	b.n	8008aea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae8:	bf00      	nop
  }
  return usb_status;
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <__errno>:
 8008af8:	4b01      	ldr	r3, [pc, #4]	; (8008b00 <__errno+0x8>)
 8008afa:	6818      	ldr	r0, [r3, #0]
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	200000fc 	.word	0x200000fc

08008b04 <__libc_init_array>:
 8008b04:	b570      	push	{r4, r5, r6, lr}
 8008b06:	4d0d      	ldr	r5, [pc, #52]	; (8008b3c <__libc_init_array+0x38>)
 8008b08:	4c0d      	ldr	r4, [pc, #52]	; (8008b40 <__libc_init_array+0x3c>)
 8008b0a:	1b64      	subs	r4, r4, r5
 8008b0c:	10a4      	asrs	r4, r4, #2
 8008b0e:	2600      	movs	r6, #0
 8008b10:	42a6      	cmp	r6, r4
 8008b12:	d109      	bne.n	8008b28 <__libc_init_array+0x24>
 8008b14:	4d0b      	ldr	r5, [pc, #44]	; (8008b44 <__libc_init_array+0x40>)
 8008b16:	4c0c      	ldr	r4, [pc, #48]	; (8008b48 <__libc_init_array+0x44>)
 8008b18:	f002 ff02 	bl	800b920 <_init>
 8008b1c:	1b64      	subs	r4, r4, r5
 8008b1e:	10a4      	asrs	r4, r4, #2
 8008b20:	2600      	movs	r6, #0
 8008b22:	42a6      	cmp	r6, r4
 8008b24:	d105      	bne.n	8008b32 <__libc_init_array+0x2e>
 8008b26:	bd70      	pop	{r4, r5, r6, pc}
 8008b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b2c:	4798      	blx	r3
 8008b2e:	3601      	adds	r6, #1
 8008b30:	e7ee      	b.n	8008b10 <__libc_init_array+0xc>
 8008b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b36:	4798      	blx	r3
 8008b38:	3601      	adds	r6, #1
 8008b3a:	e7f2      	b.n	8008b22 <__libc_init_array+0x1e>
 8008b3c:	0800bd9c 	.word	0x0800bd9c
 8008b40:	0800bd9c 	.word	0x0800bd9c
 8008b44:	0800bd9c 	.word	0x0800bd9c
 8008b48:	0800bda0 	.word	0x0800bda0

08008b4c <memset>:
 8008b4c:	4402      	add	r2, r0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d100      	bne.n	8008b56 <memset+0xa>
 8008b54:	4770      	bx	lr
 8008b56:	f803 1b01 	strb.w	r1, [r3], #1
 8008b5a:	e7f9      	b.n	8008b50 <memset+0x4>

08008b5c <__cvt>:
 8008b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b60:	ec55 4b10 	vmov	r4, r5, d0
 8008b64:	2d00      	cmp	r5, #0
 8008b66:	460e      	mov	r6, r1
 8008b68:	4619      	mov	r1, r3
 8008b6a:	462b      	mov	r3, r5
 8008b6c:	bfbb      	ittet	lt
 8008b6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008b72:	461d      	movlt	r5, r3
 8008b74:	2300      	movge	r3, #0
 8008b76:	232d      	movlt	r3, #45	; 0x2d
 8008b78:	700b      	strb	r3, [r1, #0]
 8008b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008b80:	4691      	mov	r9, r2
 8008b82:	f023 0820 	bic.w	r8, r3, #32
 8008b86:	bfbc      	itt	lt
 8008b88:	4622      	movlt	r2, r4
 8008b8a:	4614      	movlt	r4, r2
 8008b8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b90:	d005      	beq.n	8008b9e <__cvt+0x42>
 8008b92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008b96:	d100      	bne.n	8008b9a <__cvt+0x3e>
 8008b98:	3601      	adds	r6, #1
 8008b9a:	2102      	movs	r1, #2
 8008b9c:	e000      	b.n	8008ba0 <__cvt+0x44>
 8008b9e:	2103      	movs	r1, #3
 8008ba0:	ab03      	add	r3, sp, #12
 8008ba2:	9301      	str	r3, [sp, #4]
 8008ba4:	ab02      	add	r3, sp, #8
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	ec45 4b10 	vmov	d0, r4, r5
 8008bac:	4653      	mov	r3, sl
 8008bae:	4632      	mov	r2, r6
 8008bb0:	f000 fcea 	bl	8009588 <_dtoa_r>
 8008bb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008bb8:	4607      	mov	r7, r0
 8008bba:	d102      	bne.n	8008bc2 <__cvt+0x66>
 8008bbc:	f019 0f01 	tst.w	r9, #1
 8008bc0:	d022      	beq.n	8008c08 <__cvt+0xac>
 8008bc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008bc6:	eb07 0906 	add.w	r9, r7, r6
 8008bca:	d110      	bne.n	8008bee <__cvt+0x92>
 8008bcc:	783b      	ldrb	r3, [r7, #0]
 8008bce:	2b30      	cmp	r3, #48	; 0x30
 8008bd0:	d10a      	bne.n	8008be8 <__cvt+0x8c>
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	4629      	mov	r1, r5
 8008bda:	f7f7 ff85 	bl	8000ae8 <__aeabi_dcmpeq>
 8008bde:	b918      	cbnz	r0, 8008be8 <__cvt+0x8c>
 8008be0:	f1c6 0601 	rsb	r6, r6, #1
 8008be4:	f8ca 6000 	str.w	r6, [sl]
 8008be8:	f8da 3000 	ldr.w	r3, [sl]
 8008bec:	4499      	add	r9, r3
 8008bee:	2200      	movs	r2, #0
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	f7f7 ff77 	bl	8000ae8 <__aeabi_dcmpeq>
 8008bfa:	b108      	cbz	r0, 8008c00 <__cvt+0xa4>
 8008bfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c00:	2230      	movs	r2, #48	; 0x30
 8008c02:	9b03      	ldr	r3, [sp, #12]
 8008c04:	454b      	cmp	r3, r9
 8008c06:	d307      	bcc.n	8008c18 <__cvt+0xbc>
 8008c08:	9b03      	ldr	r3, [sp, #12]
 8008c0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c0c:	1bdb      	subs	r3, r3, r7
 8008c0e:	4638      	mov	r0, r7
 8008c10:	6013      	str	r3, [r2, #0]
 8008c12:	b004      	add	sp, #16
 8008c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c18:	1c59      	adds	r1, r3, #1
 8008c1a:	9103      	str	r1, [sp, #12]
 8008c1c:	701a      	strb	r2, [r3, #0]
 8008c1e:	e7f0      	b.n	8008c02 <__cvt+0xa6>

08008c20 <__exponent>:
 8008c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c22:	4603      	mov	r3, r0
 8008c24:	2900      	cmp	r1, #0
 8008c26:	bfb8      	it	lt
 8008c28:	4249      	neglt	r1, r1
 8008c2a:	f803 2b02 	strb.w	r2, [r3], #2
 8008c2e:	bfb4      	ite	lt
 8008c30:	222d      	movlt	r2, #45	; 0x2d
 8008c32:	222b      	movge	r2, #43	; 0x2b
 8008c34:	2909      	cmp	r1, #9
 8008c36:	7042      	strb	r2, [r0, #1]
 8008c38:	dd2a      	ble.n	8008c90 <__exponent+0x70>
 8008c3a:	f10d 0407 	add.w	r4, sp, #7
 8008c3e:	46a4      	mov	ip, r4
 8008c40:	270a      	movs	r7, #10
 8008c42:	46a6      	mov	lr, r4
 8008c44:	460a      	mov	r2, r1
 8008c46:	fb91 f6f7 	sdiv	r6, r1, r7
 8008c4a:	fb07 1516 	mls	r5, r7, r6, r1
 8008c4e:	3530      	adds	r5, #48	; 0x30
 8008c50:	2a63      	cmp	r2, #99	; 0x63
 8008c52:	f104 34ff 	add.w	r4, r4, #4294967295
 8008c56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008c5a:	4631      	mov	r1, r6
 8008c5c:	dcf1      	bgt.n	8008c42 <__exponent+0x22>
 8008c5e:	3130      	adds	r1, #48	; 0x30
 8008c60:	f1ae 0502 	sub.w	r5, lr, #2
 8008c64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008c68:	1c44      	adds	r4, r0, #1
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	4561      	cmp	r1, ip
 8008c6e:	d30a      	bcc.n	8008c86 <__exponent+0x66>
 8008c70:	f10d 0209 	add.w	r2, sp, #9
 8008c74:	eba2 020e 	sub.w	r2, r2, lr
 8008c78:	4565      	cmp	r5, ip
 8008c7a:	bf88      	it	hi
 8008c7c:	2200      	movhi	r2, #0
 8008c7e:	4413      	add	r3, r2
 8008c80:	1a18      	subs	r0, r3, r0
 8008c82:	b003      	add	sp, #12
 8008c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008c8e:	e7ed      	b.n	8008c6c <__exponent+0x4c>
 8008c90:	2330      	movs	r3, #48	; 0x30
 8008c92:	3130      	adds	r1, #48	; 0x30
 8008c94:	7083      	strb	r3, [r0, #2]
 8008c96:	70c1      	strb	r1, [r0, #3]
 8008c98:	1d03      	adds	r3, r0, #4
 8008c9a:	e7f1      	b.n	8008c80 <__exponent+0x60>

08008c9c <_printf_float>:
 8008c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca0:	ed2d 8b02 	vpush	{d8}
 8008ca4:	b08d      	sub	sp, #52	; 0x34
 8008ca6:	460c      	mov	r4, r1
 8008ca8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008cac:	4616      	mov	r6, r2
 8008cae:	461f      	mov	r7, r3
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	f001 fa57 	bl	800a164 <_localeconv_r>
 8008cb6:	f8d0 a000 	ldr.w	sl, [r0]
 8008cba:	4650      	mov	r0, sl
 8008cbc:	f7f7 fa92 	bl	80001e4 <strlen>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8008cc4:	6823      	ldr	r3, [r4, #0]
 8008cc6:	9305      	str	r3, [sp, #20]
 8008cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8008ccc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008cd0:	3307      	adds	r3, #7
 8008cd2:	f023 0307 	bic.w	r3, r3, #7
 8008cd6:	f103 0208 	add.w	r2, r3, #8
 8008cda:	f8c8 2000 	str.w	r2, [r8]
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008ce6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008cea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008cee:	9307      	str	r3, [sp, #28]
 8008cf0:	f8cd 8018 	str.w	r8, [sp, #24]
 8008cf4:	ee08 0a10 	vmov	s16, r0
 8008cf8:	4b9f      	ldr	r3, [pc, #636]	; (8008f78 <_printf_float+0x2dc>)
 8008cfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8008d02:	f7f7 ff23 	bl	8000b4c <__aeabi_dcmpun>
 8008d06:	bb88      	cbnz	r0, 8008d6c <_printf_float+0xd0>
 8008d08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d0c:	4b9a      	ldr	r3, [pc, #616]	; (8008f78 <_printf_float+0x2dc>)
 8008d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d12:	f7f7 fefd 	bl	8000b10 <__aeabi_dcmple>
 8008d16:	bb48      	cbnz	r0, 8008d6c <_printf_float+0xd0>
 8008d18:	2200      	movs	r2, #0
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	4640      	mov	r0, r8
 8008d1e:	4649      	mov	r1, r9
 8008d20:	f7f7 feec 	bl	8000afc <__aeabi_dcmplt>
 8008d24:	b110      	cbz	r0, 8008d2c <_printf_float+0x90>
 8008d26:	232d      	movs	r3, #45	; 0x2d
 8008d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d2c:	4b93      	ldr	r3, [pc, #588]	; (8008f7c <_printf_float+0x2e0>)
 8008d2e:	4894      	ldr	r0, [pc, #592]	; (8008f80 <_printf_float+0x2e4>)
 8008d30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008d34:	bf94      	ite	ls
 8008d36:	4698      	movls	r8, r3
 8008d38:	4680      	movhi	r8, r0
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	6123      	str	r3, [r4, #16]
 8008d3e:	9b05      	ldr	r3, [sp, #20]
 8008d40:	f023 0204 	bic.w	r2, r3, #4
 8008d44:	6022      	str	r2, [r4, #0]
 8008d46:	f04f 0900 	mov.w	r9, #0
 8008d4a:	9700      	str	r7, [sp, #0]
 8008d4c:	4633      	mov	r3, r6
 8008d4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008d50:	4621      	mov	r1, r4
 8008d52:	4628      	mov	r0, r5
 8008d54:	f000 f9d8 	bl	8009108 <_printf_common>
 8008d58:	3001      	adds	r0, #1
 8008d5a:	f040 8090 	bne.w	8008e7e <_printf_float+0x1e2>
 8008d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d62:	b00d      	add	sp, #52	; 0x34
 8008d64:	ecbd 8b02 	vpop	{d8}
 8008d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6c:	4642      	mov	r2, r8
 8008d6e:	464b      	mov	r3, r9
 8008d70:	4640      	mov	r0, r8
 8008d72:	4649      	mov	r1, r9
 8008d74:	f7f7 feea 	bl	8000b4c <__aeabi_dcmpun>
 8008d78:	b140      	cbz	r0, 8008d8c <_printf_float+0xf0>
 8008d7a:	464b      	mov	r3, r9
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	bfbc      	itt	lt
 8008d80:	232d      	movlt	r3, #45	; 0x2d
 8008d82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008d86:	487f      	ldr	r0, [pc, #508]	; (8008f84 <_printf_float+0x2e8>)
 8008d88:	4b7f      	ldr	r3, [pc, #508]	; (8008f88 <_printf_float+0x2ec>)
 8008d8a:	e7d1      	b.n	8008d30 <_printf_float+0x94>
 8008d8c:	6863      	ldr	r3, [r4, #4]
 8008d8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008d92:	9206      	str	r2, [sp, #24]
 8008d94:	1c5a      	adds	r2, r3, #1
 8008d96:	d13f      	bne.n	8008e18 <_printf_float+0x17c>
 8008d98:	2306      	movs	r3, #6
 8008d9a:	6063      	str	r3, [r4, #4]
 8008d9c:	9b05      	ldr	r3, [sp, #20]
 8008d9e:	6861      	ldr	r1, [r4, #4]
 8008da0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008da4:	2300      	movs	r3, #0
 8008da6:	9303      	str	r3, [sp, #12]
 8008da8:	ab0a      	add	r3, sp, #40	; 0x28
 8008daa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008dae:	ab09      	add	r3, sp, #36	; 0x24
 8008db0:	ec49 8b10 	vmov	d0, r8, r9
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	6022      	str	r2, [r4, #0]
 8008db8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	f7ff fecd 	bl	8008b5c <__cvt>
 8008dc2:	9b06      	ldr	r3, [sp, #24]
 8008dc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dc6:	2b47      	cmp	r3, #71	; 0x47
 8008dc8:	4680      	mov	r8, r0
 8008dca:	d108      	bne.n	8008dde <_printf_float+0x142>
 8008dcc:	1cc8      	adds	r0, r1, #3
 8008dce:	db02      	blt.n	8008dd6 <_printf_float+0x13a>
 8008dd0:	6863      	ldr	r3, [r4, #4]
 8008dd2:	4299      	cmp	r1, r3
 8008dd4:	dd41      	ble.n	8008e5a <_printf_float+0x1be>
 8008dd6:	f1ab 0b02 	sub.w	fp, fp, #2
 8008dda:	fa5f fb8b 	uxtb.w	fp, fp
 8008dde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008de2:	d820      	bhi.n	8008e26 <_printf_float+0x18a>
 8008de4:	3901      	subs	r1, #1
 8008de6:	465a      	mov	r2, fp
 8008de8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008dec:	9109      	str	r1, [sp, #36]	; 0x24
 8008dee:	f7ff ff17 	bl	8008c20 <__exponent>
 8008df2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008df4:	1813      	adds	r3, r2, r0
 8008df6:	2a01      	cmp	r2, #1
 8008df8:	4681      	mov	r9, r0
 8008dfa:	6123      	str	r3, [r4, #16]
 8008dfc:	dc02      	bgt.n	8008e04 <_printf_float+0x168>
 8008dfe:	6822      	ldr	r2, [r4, #0]
 8008e00:	07d2      	lsls	r2, r2, #31
 8008e02:	d501      	bpl.n	8008e08 <_printf_float+0x16c>
 8008e04:	3301      	adds	r3, #1
 8008e06:	6123      	str	r3, [r4, #16]
 8008e08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d09c      	beq.n	8008d4a <_printf_float+0xae>
 8008e10:	232d      	movs	r3, #45	; 0x2d
 8008e12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e16:	e798      	b.n	8008d4a <_printf_float+0xae>
 8008e18:	9a06      	ldr	r2, [sp, #24]
 8008e1a:	2a47      	cmp	r2, #71	; 0x47
 8008e1c:	d1be      	bne.n	8008d9c <_printf_float+0x100>
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1bc      	bne.n	8008d9c <_printf_float+0x100>
 8008e22:	2301      	movs	r3, #1
 8008e24:	e7b9      	b.n	8008d9a <_printf_float+0xfe>
 8008e26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008e2a:	d118      	bne.n	8008e5e <_printf_float+0x1c2>
 8008e2c:	2900      	cmp	r1, #0
 8008e2e:	6863      	ldr	r3, [r4, #4]
 8008e30:	dd0b      	ble.n	8008e4a <_printf_float+0x1ae>
 8008e32:	6121      	str	r1, [r4, #16]
 8008e34:	b913      	cbnz	r3, 8008e3c <_printf_float+0x1a0>
 8008e36:	6822      	ldr	r2, [r4, #0]
 8008e38:	07d0      	lsls	r0, r2, #31
 8008e3a:	d502      	bpl.n	8008e42 <_printf_float+0x1a6>
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	440b      	add	r3, r1
 8008e40:	6123      	str	r3, [r4, #16]
 8008e42:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e44:	f04f 0900 	mov.w	r9, #0
 8008e48:	e7de      	b.n	8008e08 <_printf_float+0x16c>
 8008e4a:	b913      	cbnz	r3, 8008e52 <_printf_float+0x1b6>
 8008e4c:	6822      	ldr	r2, [r4, #0]
 8008e4e:	07d2      	lsls	r2, r2, #31
 8008e50:	d501      	bpl.n	8008e56 <_printf_float+0x1ba>
 8008e52:	3302      	adds	r3, #2
 8008e54:	e7f4      	b.n	8008e40 <_printf_float+0x1a4>
 8008e56:	2301      	movs	r3, #1
 8008e58:	e7f2      	b.n	8008e40 <_printf_float+0x1a4>
 8008e5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e60:	4299      	cmp	r1, r3
 8008e62:	db05      	blt.n	8008e70 <_printf_float+0x1d4>
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	6121      	str	r1, [r4, #16]
 8008e68:	07d8      	lsls	r0, r3, #31
 8008e6a:	d5ea      	bpl.n	8008e42 <_printf_float+0x1a6>
 8008e6c:	1c4b      	adds	r3, r1, #1
 8008e6e:	e7e7      	b.n	8008e40 <_printf_float+0x1a4>
 8008e70:	2900      	cmp	r1, #0
 8008e72:	bfd4      	ite	le
 8008e74:	f1c1 0202 	rsble	r2, r1, #2
 8008e78:	2201      	movgt	r2, #1
 8008e7a:	4413      	add	r3, r2
 8008e7c:	e7e0      	b.n	8008e40 <_printf_float+0x1a4>
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	055a      	lsls	r2, r3, #21
 8008e82:	d407      	bmi.n	8008e94 <_printf_float+0x1f8>
 8008e84:	6923      	ldr	r3, [r4, #16]
 8008e86:	4642      	mov	r2, r8
 8008e88:	4631      	mov	r1, r6
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	47b8      	blx	r7
 8008e8e:	3001      	adds	r0, #1
 8008e90:	d12c      	bne.n	8008eec <_printf_float+0x250>
 8008e92:	e764      	b.n	8008d5e <_printf_float+0xc2>
 8008e94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e98:	f240 80e0 	bls.w	800905c <_printf_float+0x3c0>
 8008e9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f7f7 fe20 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d034      	beq.n	8008f16 <_printf_float+0x27a>
 8008eac:	4a37      	ldr	r2, [pc, #220]	; (8008f8c <_printf_float+0x2f0>)
 8008eae:	2301      	movs	r3, #1
 8008eb0:	4631      	mov	r1, r6
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	47b8      	blx	r7
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	f43f af51 	beq.w	8008d5e <_printf_float+0xc2>
 8008ebc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	db02      	blt.n	8008eca <_printf_float+0x22e>
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	07d8      	lsls	r0, r3, #31
 8008ec8:	d510      	bpl.n	8008eec <_printf_float+0x250>
 8008eca:	ee18 3a10 	vmov	r3, s16
 8008ece:	4652      	mov	r2, sl
 8008ed0:	4631      	mov	r1, r6
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	47b8      	blx	r7
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	f43f af41 	beq.w	8008d5e <_printf_float+0xc2>
 8008edc:	f04f 0800 	mov.w	r8, #0
 8008ee0:	f104 091a 	add.w	r9, r4, #26
 8008ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	4543      	cmp	r3, r8
 8008eea:	dc09      	bgt.n	8008f00 <_printf_float+0x264>
 8008eec:	6823      	ldr	r3, [r4, #0]
 8008eee:	079b      	lsls	r3, r3, #30
 8008ef0:	f100 8105 	bmi.w	80090fe <_printf_float+0x462>
 8008ef4:	68e0      	ldr	r0, [r4, #12]
 8008ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ef8:	4298      	cmp	r0, r3
 8008efa:	bfb8      	it	lt
 8008efc:	4618      	movlt	r0, r3
 8008efe:	e730      	b.n	8008d62 <_printf_float+0xc6>
 8008f00:	2301      	movs	r3, #1
 8008f02:	464a      	mov	r2, r9
 8008f04:	4631      	mov	r1, r6
 8008f06:	4628      	mov	r0, r5
 8008f08:	47b8      	blx	r7
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	f43f af27 	beq.w	8008d5e <_printf_float+0xc2>
 8008f10:	f108 0801 	add.w	r8, r8, #1
 8008f14:	e7e6      	b.n	8008ee4 <_printf_float+0x248>
 8008f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	dc39      	bgt.n	8008f90 <_printf_float+0x2f4>
 8008f1c:	4a1b      	ldr	r2, [pc, #108]	; (8008f8c <_printf_float+0x2f0>)
 8008f1e:	2301      	movs	r3, #1
 8008f20:	4631      	mov	r1, r6
 8008f22:	4628      	mov	r0, r5
 8008f24:	47b8      	blx	r7
 8008f26:	3001      	adds	r0, #1
 8008f28:	f43f af19 	beq.w	8008d5e <_printf_float+0xc2>
 8008f2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f30:	4313      	orrs	r3, r2
 8008f32:	d102      	bne.n	8008f3a <_printf_float+0x29e>
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	07d9      	lsls	r1, r3, #31
 8008f38:	d5d8      	bpl.n	8008eec <_printf_float+0x250>
 8008f3a:	ee18 3a10 	vmov	r3, s16
 8008f3e:	4652      	mov	r2, sl
 8008f40:	4631      	mov	r1, r6
 8008f42:	4628      	mov	r0, r5
 8008f44:	47b8      	blx	r7
 8008f46:	3001      	adds	r0, #1
 8008f48:	f43f af09 	beq.w	8008d5e <_printf_float+0xc2>
 8008f4c:	f04f 0900 	mov.w	r9, #0
 8008f50:	f104 0a1a 	add.w	sl, r4, #26
 8008f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f56:	425b      	negs	r3, r3
 8008f58:	454b      	cmp	r3, r9
 8008f5a:	dc01      	bgt.n	8008f60 <_printf_float+0x2c4>
 8008f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f5e:	e792      	b.n	8008e86 <_printf_float+0x1ea>
 8008f60:	2301      	movs	r3, #1
 8008f62:	4652      	mov	r2, sl
 8008f64:	4631      	mov	r1, r6
 8008f66:	4628      	mov	r0, r5
 8008f68:	47b8      	blx	r7
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	f43f aef7 	beq.w	8008d5e <_printf_float+0xc2>
 8008f70:	f109 0901 	add.w	r9, r9, #1
 8008f74:	e7ee      	b.n	8008f54 <_printf_float+0x2b8>
 8008f76:	bf00      	nop
 8008f78:	7fefffff 	.word	0x7fefffff
 8008f7c:	0800b9bc 	.word	0x0800b9bc
 8008f80:	0800b9c0 	.word	0x0800b9c0
 8008f84:	0800b9c8 	.word	0x0800b9c8
 8008f88:	0800b9c4 	.word	0x0800b9c4
 8008f8c:	0800b9cc 	.word	0x0800b9cc
 8008f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f94:	429a      	cmp	r2, r3
 8008f96:	bfa8      	it	ge
 8008f98:	461a      	movge	r2, r3
 8008f9a:	2a00      	cmp	r2, #0
 8008f9c:	4691      	mov	r9, r2
 8008f9e:	dc37      	bgt.n	8009010 <_printf_float+0x374>
 8008fa0:	f04f 0b00 	mov.w	fp, #0
 8008fa4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fa8:	f104 021a 	add.w	r2, r4, #26
 8008fac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fae:	9305      	str	r3, [sp, #20]
 8008fb0:	eba3 0309 	sub.w	r3, r3, r9
 8008fb4:	455b      	cmp	r3, fp
 8008fb6:	dc33      	bgt.n	8009020 <_printf_float+0x384>
 8008fb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	db3b      	blt.n	8009038 <_printf_float+0x39c>
 8008fc0:	6823      	ldr	r3, [r4, #0]
 8008fc2:	07da      	lsls	r2, r3, #31
 8008fc4:	d438      	bmi.n	8009038 <_printf_float+0x39c>
 8008fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fc8:	9a05      	ldr	r2, [sp, #20]
 8008fca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fcc:	1a9a      	subs	r2, r3, r2
 8008fce:	eba3 0901 	sub.w	r9, r3, r1
 8008fd2:	4591      	cmp	r9, r2
 8008fd4:	bfa8      	it	ge
 8008fd6:	4691      	movge	r9, r2
 8008fd8:	f1b9 0f00 	cmp.w	r9, #0
 8008fdc:	dc35      	bgt.n	800904a <_printf_float+0x3ae>
 8008fde:	f04f 0800 	mov.w	r8, #0
 8008fe2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fe6:	f104 0a1a 	add.w	sl, r4, #26
 8008fea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fee:	1a9b      	subs	r3, r3, r2
 8008ff0:	eba3 0309 	sub.w	r3, r3, r9
 8008ff4:	4543      	cmp	r3, r8
 8008ff6:	f77f af79 	ble.w	8008eec <_printf_float+0x250>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	4652      	mov	r2, sl
 8008ffe:	4631      	mov	r1, r6
 8009000:	4628      	mov	r0, r5
 8009002:	47b8      	blx	r7
 8009004:	3001      	adds	r0, #1
 8009006:	f43f aeaa 	beq.w	8008d5e <_printf_float+0xc2>
 800900a:	f108 0801 	add.w	r8, r8, #1
 800900e:	e7ec      	b.n	8008fea <_printf_float+0x34e>
 8009010:	4613      	mov	r3, r2
 8009012:	4631      	mov	r1, r6
 8009014:	4642      	mov	r2, r8
 8009016:	4628      	mov	r0, r5
 8009018:	47b8      	blx	r7
 800901a:	3001      	adds	r0, #1
 800901c:	d1c0      	bne.n	8008fa0 <_printf_float+0x304>
 800901e:	e69e      	b.n	8008d5e <_printf_float+0xc2>
 8009020:	2301      	movs	r3, #1
 8009022:	4631      	mov	r1, r6
 8009024:	4628      	mov	r0, r5
 8009026:	9205      	str	r2, [sp, #20]
 8009028:	47b8      	blx	r7
 800902a:	3001      	adds	r0, #1
 800902c:	f43f ae97 	beq.w	8008d5e <_printf_float+0xc2>
 8009030:	9a05      	ldr	r2, [sp, #20]
 8009032:	f10b 0b01 	add.w	fp, fp, #1
 8009036:	e7b9      	b.n	8008fac <_printf_float+0x310>
 8009038:	ee18 3a10 	vmov	r3, s16
 800903c:	4652      	mov	r2, sl
 800903e:	4631      	mov	r1, r6
 8009040:	4628      	mov	r0, r5
 8009042:	47b8      	blx	r7
 8009044:	3001      	adds	r0, #1
 8009046:	d1be      	bne.n	8008fc6 <_printf_float+0x32a>
 8009048:	e689      	b.n	8008d5e <_printf_float+0xc2>
 800904a:	9a05      	ldr	r2, [sp, #20]
 800904c:	464b      	mov	r3, r9
 800904e:	4442      	add	r2, r8
 8009050:	4631      	mov	r1, r6
 8009052:	4628      	mov	r0, r5
 8009054:	47b8      	blx	r7
 8009056:	3001      	adds	r0, #1
 8009058:	d1c1      	bne.n	8008fde <_printf_float+0x342>
 800905a:	e680      	b.n	8008d5e <_printf_float+0xc2>
 800905c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800905e:	2a01      	cmp	r2, #1
 8009060:	dc01      	bgt.n	8009066 <_printf_float+0x3ca>
 8009062:	07db      	lsls	r3, r3, #31
 8009064:	d538      	bpl.n	80090d8 <_printf_float+0x43c>
 8009066:	2301      	movs	r3, #1
 8009068:	4642      	mov	r2, r8
 800906a:	4631      	mov	r1, r6
 800906c:	4628      	mov	r0, r5
 800906e:	47b8      	blx	r7
 8009070:	3001      	adds	r0, #1
 8009072:	f43f ae74 	beq.w	8008d5e <_printf_float+0xc2>
 8009076:	ee18 3a10 	vmov	r3, s16
 800907a:	4652      	mov	r2, sl
 800907c:	4631      	mov	r1, r6
 800907e:	4628      	mov	r0, r5
 8009080:	47b8      	blx	r7
 8009082:	3001      	adds	r0, #1
 8009084:	f43f ae6b 	beq.w	8008d5e <_printf_float+0xc2>
 8009088:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800908c:	2200      	movs	r2, #0
 800908e:	2300      	movs	r3, #0
 8009090:	f7f7 fd2a 	bl	8000ae8 <__aeabi_dcmpeq>
 8009094:	b9d8      	cbnz	r0, 80090ce <_printf_float+0x432>
 8009096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009098:	f108 0201 	add.w	r2, r8, #1
 800909c:	3b01      	subs	r3, #1
 800909e:	4631      	mov	r1, r6
 80090a0:	4628      	mov	r0, r5
 80090a2:	47b8      	blx	r7
 80090a4:	3001      	adds	r0, #1
 80090a6:	d10e      	bne.n	80090c6 <_printf_float+0x42a>
 80090a8:	e659      	b.n	8008d5e <_printf_float+0xc2>
 80090aa:	2301      	movs	r3, #1
 80090ac:	4652      	mov	r2, sl
 80090ae:	4631      	mov	r1, r6
 80090b0:	4628      	mov	r0, r5
 80090b2:	47b8      	blx	r7
 80090b4:	3001      	adds	r0, #1
 80090b6:	f43f ae52 	beq.w	8008d5e <_printf_float+0xc2>
 80090ba:	f108 0801 	add.w	r8, r8, #1
 80090be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090c0:	3b01      	subs	r3, #1
 80090c2:	4543      	cmp	r3, r8
 80090c4:	dcf1      	bgt.n	80090aa <_printf_float+0x40e>
 80090c6:	464b      	mov	r3, r9
 80090c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80090cc:	e6dc      	b.n	8008e88 <_printf_float+0x1ec>
 80090ce:	f04f 0800 	mov.w	r8, #0
 80090d2:	f104 0a1a 	add.w	sl, r4, #26
 80090d6:	e7f2      	b.n	80090be <_printf_float+0x422>
 80090d8:	2301      	movs	r3, #1
 80090da:	4642      	mov	r2, r8
 80090dc:	e7df      	b.n	800909e <_printf_float+0x402>
 80090de:	2301      	movs	r3, #1
 80090e0:	464a      	mov	r2, r9
 80090e2:	4631      	mov	r1, r6
 80090e4:	4628      	mov	r0, r5
 80090e6:	47b8      	blx	r7
 80090e8:	3001      	adds	r0, #1
 80090ea:	f43f ae38 	beq.w	8008d5e <_printf_float+0xc2>
 80090ee:	f108 0801 	add.w	r8, r8, #1
 80090f2:	68e3      	ldr	r3, [r4, #12]
 80090f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090f6:	1a5b      	subs	r3, r3, r1
 80090f8:	4543      	cmp	r3, r8
 80090fa:	dcf0      	bgt.n	80090de <_printf_float+0x442>
 80090fc:	e6fa      	b.n	8008ef4 <_printf_float+0x258>
 80090fe:	f04f 0800 	mov.w	r8, #0
 8009102:	f104 0919 	add.w	r9, r4, #25
 8009106:	e7f4      	b.n	80090f2 <_printf_float+0x456>

08009108 <_printf_common>:
 8009108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800910c:	4616      	mov	r6, r2
 800910e:	4699      	mov	r9, r3
 8009110:	688a      	ldr	r2, [r1, #8]
 8009112:	690b      	ldr	r3, [r1, #16]
 8009114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009118:	4293      	cmp	r3, r2
 800911a:	bfb8      	it	lt
 800911c:	4613      	movlt	r3, r2
 800911e:	6033      	str	r3, [r6, #0]
 8009120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009124:	4607      	mov	r7, r0
 8009126:	460c      	mov	r4, r1
 8009128:	b10a      	cbz	r2, 800912e <_printf_common+0x26>
 800912a:	3301      	adds	r3, #1
 800912c:	6033      	str	r3, [r6, #0]
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	0699      	lsls	r1, r3, #26
 8009132:	bf42      	ittt	mi
 8009134:	6833      	ldrmi	r3, [r6, #0]
 8009136:	3302      	addmi	r3, #2
 8009138:	6033      	strmi	r3, [r6, #0]
 800913a:	6825      	ldr	r5, [r4, #0]
 800913c:	f015 0506 	ands.w	r5, r5, #6
 8009140:	d106      	bne.n	8009150 <_printf_common+0x48>
 8009142:	f104 0a19 	add.w	sl, r4, #25
 8009146:	68e3      	ldr	r3, [r4, #12]
 8009148:	6832      	ldr	r2, [r6, #0]
 800914a:	1a9b      	subs	r3, r3, r2
 800914c:	42ab      	cmp	r3, r5
 800914e:	dc26      	bgt.n	800919e <_printf_common+0x96>
 8009150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009154:	1e13      	subs	r3, r2, #0
 8009156:	6822      	ldr	r2, [r4, #0]
 8009158:	bf18      	it	ne
 800915a:	2301      	movne	r3, #1
 800915c:	0692      	lsls	r2, r2, #26
 800915e:	d42b      	bmi.n	80091b8 <_printf_common+0xb0>
 8009160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009164:	4649      	mov	r1, r9
 8009166:	4638      	mov	r0, r7
 8009168:	47c0      	blx	r8
 800916a:	3001      	adds	r0, #1
 800916c:	d01e      	beq.n	80091ac <_printf_common+0xa4>
 800916e:	6823      	ldr	r3, [r4, #0]
 8009170:	68e5      	ldr	r5, [r4, #12]
 8009172:	6832      	ldr	r2, [r6, #0]
 8009174:	f003 0306 	and.w	r3, r3, #6
 8009178:	2b04      	cmp	r3, #4
 800917a:	bf08      	it	eq
 800917c:	1aad      	subeq	r5, r5, r2
 800917e:	68a3      	ldr	r3, [r4, #8]
 8009180:	6922      	ldr	r2, [r4, #16]
 8009182:	bf0c      	ite	eq
 8009184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009188:	2500      	movne	r5, #0
 800918a:	4293      	cmp	r3, r2
 800918c:	bfc4      	itt	gt
 800918e:	1a9b      	subgt	r3, r3, r2
 8009190:	18ed      	addgt	r5, r5, r3
 8009192:	2600      	movs	r6, #0
 8009194:	341a      	adds	r4, #26
 8009196:	42b5      	cmp	r5, r6
 8009198:	d11a      	bne.n	80091d0 <_printf_common+0xc8>
 800919a:	2000      	movs	r0, #0
 800919c:	e008      	b.n	80091b0 <_printf_common+0xa8>
 800919e:	2301      	movs	r3, #1
 80091a0:	4652      	mov	r2, sl
 80091a2:	4649      	mov	r1, r9
 80091a4:	4638      	mov	r0, r7
 80091a6:	47c0      	blx	r8
 80091a8:	3001      	adds	r0, #1
 80091aa:	d103      	bne.n	80091b4 <_printf_common+0xac>
 80091ac:	f04f 30ff 	mov.w	r0, #4294967295
 80091b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b4:	3501      	adds	r5, #1
 80091b6:	e7c6      	b.n	8009146 <_printf_common+0x3e>
 80091b8:	18e1      	adds	r1, r4, r3
 80091ba:	1c5a      	adds	r2, r3, #1
 80091bc:	2030      	movs	r0, #48	; 0x30
 80091be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091c2:	4422      	add	r2, r4
 80091c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091cc:	3302      	adds	r3, #2
 80091ce:	e7c7      	b.n	8009160 <_printf_common+0x58>
 80091d0:	2301      	movs	r3, #1
 80091d2:	4622      	mov	r2, r4
 80091d4:	4649      	mov	r1, r9
 80091d6:	4638      	mov	r0, r7
 80091d8:	47c0      	blx	r8
 80091da:	3001      	adds	r0, #1
 80091dc:	d0e6      	beq.n	80091ac <_printf_common+0xa4>
 80091de:	3601      	adds	r6, #1
 80091e0:	e7d9      	b.n	8009196 <_printf_common+0x8e>
	...

080091e4 <_printf_i>:
 80091e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091e8:	7e0f      	ldrb	r7, [r1, #24]
 80091ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091ec:	2f78      	cmp	r7, #120	; 0x78
 80091ee:	4691      	mov	r9, r2
 80091f0:	4680      	mov	r8, r0
 80091f2:	460c      	mov	r4, r1
 80091f4:	469a      	mov	sl, r3
 80091f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80091fa:	d807      	bhi.n	800920c <_printf_i+0x28>
 80091fc:	2f62      	cmp	r7, #98	; 0x62
 80091fe:	d80a      	bhi.n	8009216 <_printf_i+0x32>
 8009200:	2f00      	cmp	r7, #0
 8009202:	f000 80d8 	beq.w	80093b6 <_printf_i+0x1d2>
 8009206:	2f58      	cmp	r7, #88	; 0x58
 8009208:	f000 80a3 	beq.w	8009352 <_printf_i+0x16e>
 800920c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009214:	e03a      	b.n	800928c <_printf_i+0xa8>
 8009216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800921a:	2b15      	cmp	r3, #21
 800921c:	d8f6      	bhi.n	800920c <_printf_i+0x28>
 800921e:	a101      	add	r1, pc, #4	; (adr r1, 8009224 <_printf_i+0x40>)
 8009220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009224:	0800927d 	.word	0x0800927d
 8009228:	08009291 	.word	0x08009291
 800922c:	0800920d 	.word	0x0800920d
 8009230:	0800920d 	.word	0x0800920d
 8009234:	0800920d 	.word	0x0800920d
 8009238:	0800920d 	.word	0x0800920d
 800923c:	08009291 	.word	0x08009291
 8009240:	0800920d 	.word	0x0800920d
 8009244:	0800920d 	.word	0x0800920d
 8009248:	0800920d 	.word	0x0800920d
 800924c:	0800920d 	.word	0x0800920d
 8009250:	0800939d 	.word	0x0800939d
 8009254:	080092c1 	.word	0x080092c1
 8009258:	0800937f 	.word	0x0800937f
 800925c:	0800920d 	.word	0x0800920d
 8009260:	0800920d 	.word	0x0800920d
 8009264:	080093bf 	.word	0x080093bf
 8009268:	0800920d 	.word	0x0800920d
 800926c:	080092c1 	.word	0x080092c1
 8009270:	0800920d 	.word	0x0800920d
 8009274:	0800920d 	.word	0x0800920d
 8009278:	08009387 	.word	0x08009387
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	1d1a      	adds	r2, r3, #4
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	602a      	str	r2, [r5, #0]
 8009284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800928c:	2301      	movs	r3, #1
 800928e:	e0a3      	b.n	80093d8 <_printf_i+0x1f4>
 8009290:	6820      	ldr	r0, [r4, #0]
 8009292:	6829      	ldr	r1, [r5, #0]
 8009294:	0606      	lsls	r6, r0, #24
 8009296:	f101 0304 	add.w	r3, r1, #4
 800929a:	d50a      	bpl.n	80092b2 <_printf_i+0xce>
 800929c:	680e      	ldr	r6, [r1, #0]
 800929e:	602b      	str	r3, [r5, #0]
 80092a0:	2e00      	cmp	r6, #0
 80092a2:	da03      	bge.n	80092ac <_printf_i+0xc8>
 80092a4:	232d      	movs	r3, #45	; 0x2d
 80092a6:	4276      	negs	r6, r6
 80092a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092ac:	485e      	ldr	r0, [pc, #376]	; (8009428 <_printf_i+0x244>)
 80092ae:	230a      	movs	r3, #10
 80092b0:	e019      	b.n	80092e6 <_printf_i+0x102>
 80092b2:	680e      	ldr	r6, [r1, #0]
 80092b4:	602b      	str	r3, [r5, #0]
 80092b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092ba:	bf18      	it	ne
 80092bc:	b236      	sxthne	r6, r6
 80092be:	e7ef      	b.n	80092a0 <_printf_i+0xbc>
 80092c0:	682b      	ldr	r3, [r5, #0]
 80092c2:	6820      	ldr	r0, [r4, #0]
 80092c4:	1d19      	adds	r1, r3, #4
 80092c6:	6029      	str	r1, [r5, #0]
 80092c8:	0601      	lsls	r1, r0, #24
 80092ca:	d501      	bpl.n	80092d0 <_printf_i+0xec>
 80092cc:	681e      	ldr	r6, [r3, #0]
 80092ce:	e002      	b.n	80092d6 <_printf_i+0xf2>
 80092d0:	0646      	lsls	r6, r0, #25
 80092d2:	d5fb      	bpl.n	80092cc <_printf_i+0xe8>
 80092d4:	881e      	ldrh	r6, [r3, #0]
 80092d6:	4854      	ldr	r0, [pc, #336]	; (8009428 <_printf_i+0x244>)
 80092d8:	2f6f      	cmp	r7, #111	; 0x6f
 80092da:	bf0c      	ite	eq
 80092dc:	2308      	moveq	r3, #8
 80092de:	230a      	movne	r3, #10
 80092e0:	2100      	movs	r1, #0
 80092e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092e6:	6865      	ldr	r5, [r4, #4]
 80092e8:	60a5      	str	r5, [r4, #8]
 80092ea:	2d00      	cmp	r5, #0
 80092ec:	bfa2      	ittt	ge
 80092ee:	6821      	ldrge	r1, [r4, #0]
 80092f0:	f021 0104 	bicge.w	r1, r1, #4
 80092f4:	6021      	strge	r1, [r4, #0]
 80092f6:	b90e      	cbnz	r6, 80092fc <_printf_i+0x118>
 80092f8:	2d00      	cmp	r5, #0
 80092fa:	d04d      	beq.n	8009398 <_printf_i+0x1b4>
 80092fc:	4615      	mov	r5, r2
 80092fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8009302:	fb03 6711 	mls	r7, r3, r1, r6
 8009306:	5dc7      	ldrb	r7, [r0, r7]
 8009308:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800930c:	4637      	mov	r7, r6
 800930e:	42bb      	cmp	r3, r7
 8009310:	460e      	mov	r6, r1
 8009312:	d9f4      	bls.n	80092fe <_printf_i+0x11a>
 8009314:	2b08      	cmp	r3, #8
 8009316:	d10b      	bne.n	8009330 <_printf_i+0x14c>
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	07de      	lsls	r6, r3, #31
 800931c:	d508      	bpl.n	8009330 <_printf_i+0x14c>
 800931e:	6923      	ldr	r3, [r4, #16]
 8009320:	6861      	ldr	r1, [r4, #4]
 8009322:	4299      	cmp	r1, r3
 8009324:	bfde      	ittt	le
 8009326:	2330      	movle	r3, #48	; 0x30
 8009328:	f805 3c01 	strble.w	r3, [r5, #-1]
 800932c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009330:	1b52      	subs	r2, r2, r5
 8009332:	6122      	str	r2, [r4, #16]
 8009334:	f8cd a000 	str.w	sl, [sp]
 8009338:	464b      	mov	r3, r9
 800933a:	aa03      	add	r2, sp, #12
 800933c:	4621      	mov	r1, r4
 800933e:	4640      	mov	r0, r8
 8009340:	f7ff fee2 	bl	8009108 <_printf_common>
 8009344:	3001      	adds	r0, #1
 8009346:	d14c      	bne.n	80093e2 <_printf_i+0x1fe>
 8009348:	f04f 30ff 	mov.w	r0, #4294967295
 800934c:	b004      	add	sp, #16
 800934e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009352:	4835      	ldr	r0, [pc, #212]	; (8009428 <_printf_i+0x244>)
 8009354:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009358:	6829      	ldr	r1, [r5, #0]
 800935a:	6823      	ldr	r3, [r4, #0]
 800935c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009360:	6029      	str	r1, [r5, #0]
 8009362:	061d      	lsls	r5, r3, #24
 8009364:	d514      	bpl.n	8009390 <_printf_i+0x1ac>
 8009366:	07df      	lsls	r7, r3, #31
 8009368:	bf44      	itt	mi
 800936a:	f043 0320 	orrmi.w	r3, r3, #32
 800936e:	6023      	strmi	r3, [r4, #0]
 8009370:	b91e      	cbnz	r6, 800937a <_printf_i+0x196>
 8009372:	6823      	ldr	r3, [r4, #0]
 8009374:	f023 0320 	bic.w	r3, r3, #32
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	2310      	movs	r3, #16
 800937c:	e7b0      	b.n	80092e0 <_printf_i+0xfc>
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	f043 0320 	orr.w	r3, r3, #32
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	2378      	movs	r3, #120	; 0x78
 8009388:	4828      	ldr	r0, [pc, #160]	; (800942c <_printf_i+0x248>)
 800938a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800938e:	e7e3      	b.n	8009358 <_printf_i+0x174>
 8009390:	0659      	lsls	r1, r3, #25
 8009392:	bf48      	it	mi
 8009394:	b2b6      	uxthmi	r6, r6
 8009396:	e7e6      	b.n	8009366 <_printf_i+0x182>
 8009398:	4615      	mov	r5, r2
 800939a:	e7bb      	b.n	8009314 <_printf_i+0x130>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	6826      	ldr	r6, [r4, #0]
 80093a0:	6961      	ldr	r1, [r4, #20]
 80093a2:	1d18      	adds	r0, r3, #4
 80093a4:	6028      	str	r0, [r5, #0]
 80093a6:	0635      	lsls	r5, r6, #24
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	d501      	bpl.n	80093b0 <_printf_i+0x1cc>
 80093ac:	6019      	str	r1, [r3, #0]
 80093ae:	e002      	b.n	80093b6 <_printf_i+0x1d2>
 80093b0:	0670      	lsls	r0, r6, #25
 80093b2:	d5fb      	bpl.n	80093ac <_printf_i+0x1c8>
 80093b4:	8019      	strh	r1, [r3, #0]
 80093b6:	2300      	movs	r3, #0
 80093b8:	6123      	str	r3, [r4, #16]
 80093ba:	4615      	mov	r5, r2
 80093bc:	e7ba      	b.n	8009334 <_printf_i+0x150>
 80093be:	682b      	ldr	r3, [r5, #0]
 80093c0:	1d1a      	adds	r2, r3, #4
 80093c2:	602a      	str	r2, [r5, #0]
 80093c4:	681d      	ldr	r5, [r3, #0]
 80093c6:	6862      	ldr	r2, [r4, #4]
 80093c8:	2100      	movs	r1, #0
 80093ca:	4628      	mov	r0, r5
 80093cc:	f7f6 ff18 	bl	8000200 <memchr>
 80093d0:	b108      	cbz	r0, 80093d6 <_printf_i+0x1f2>
 80093d2:	1b40      	subs	r0, r0, r5
 80093d4:	6060      	str	r0, [r4, #4]
 80093d6:	6863      	ldr	r3, [r4, #4]
 80093d8:	6123      	str	r3, [r4, #16]
 80093da:	2300      	movs	r3, #0
 80093dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093e0:	e7a8      	b.n	8009334 <_printf_i+0x150>
 80093e2:	6923      	ldr	r3, [r4, #16]
 80093e4:	462a      	mov	r2, r5
 80093e6:	4649      	mov	r1, r9
 80093e8:	4640      	mov	r0, r8
 80093ea:	47d0      	blx	sl
 80093ec:	3001      	adds	r0, #1
 80093ee:	d0ab      	beq.n	8009348 <_printf_i+0x164>
 80093f0:	6823      	ldr	r3, [r4, #0]
 80093f2:	079b      	lsls	r3, r3, #30
 80093f4:	d413      	bmi.n	800941e <_printf_i+0x23a>
 80093f6:	68e0      	ldr	r0, [r4, #12]
 80093f8:	9b03      	ldr	r3, [sp, #12]
 80093fa:	4298      	cmp	r0, r3
 80093fc:	bfb8      	it	lt
 80093fe:	4618      	movlt	r0, r3
 8009400:	e7a4      	b.n	800934c <_printf_i+0x168>
 8009402:	2301      	movs	r3, #1
 8009404:	4632      	mov	r2, r6
 8009406:	4649      	mov	r1, r9
 8009408:	4640      	mov	r0, r8
 800940a:	47d0      	blx	sl
 800940c:	3001      	adds	r0, #1
 800940e:	d09b      	beq.n	8009348 <_printf_i+0x164>
 8009410:	3501      	adds	r5, #1
 8009412:	68e3      	ldr	r3, [r4, #12]
 8009414:	9903      	ldr	r1, [sp, #12]
 8009416:	1a5b      	subs	r3, r3, r1
 8009418:	42ab      	cmp	r3, r5
 800941a:	dcf2      	bgt.n	8009402 <_printf_i+0x21e>
 800941c:	e7eb      	b.n	80093f6 <_printf_i+0x212>
 800941e:	2500      	movs	r5, #0
 8009420:	f104 0619 	add.w	r6, r4, #25
 8009424:	e7f5      	b.n	8009412 <_printf_i+0x22e>
 8009426:	bf00      	nop
 8009428:	0800b9ce 	.word	0x0800b9ce
 800942c:	0800b9df 	.word	0x0800b9df

08009430 <siprintf>:
 8009430:	b40e      	push	{r1, r2, r3}
 8009432:	b500      	push	{lr}
 8009434:	b09c      	sub	sp, #112	; 0x70
 8009436:	ab1d      	add	r3, sp, #116	; 0x74
 8009438:	9002      	str	r0, [sp, #8]
 800943a:	9006      	str	r0, [sp, #24]
 800943c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009440:	4809      	ldr	r0, [pc, #36]	; (8009468 <siprintf+0x38>)
 8009442:	9107      	str	r1, [sp, #28]
 8009444:	9104      	str	r1, [sp, #16]
 8009446:	4909      	ldr	r1, [pc, #36]	; (800946c <siprintf+0x3c>)
 8009448:	f853 2b04 	ldr.w	r2, [r3], #4
 800944c:	9105      	str	r1, [sp, #20]
 800944e:	6800      	ldr	r0, [r0, #0]
 8009450:	9301      	str	r3, [sp, #4]
 8009452:	a902      	add	r1, sp, #8
 8009454:	f001 fb76 	bl	800ab44 <_svfiprintf_r>
 8009458:	9b02      	ldr	r3, [sp, #8]
 800945a:	2200      	movs	r2, #0
 800945c:	701a      	strb	r2, [r3, #0]
 800945e:	b01c      	add	sp, #112	; 0x70
 8009460:	f85d eb04 	ldr.w	lr, [sp], #4
 8009464:	b003      	add	sp, #12
 8009466:	4770      	bx	lr
 8009468:	200000fc 	.word	0x200000fc
 800946c:	ffff0208 	.word	0xffff0208

08009470 <quorem>:
 8009470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009474:	6903      	ldr	r3, [r0, #16]
 8009476:	690c      	ldr	r4, [r1, #16]
 8009478:	42a3      	cmp	r3, r4
 800947a:	4607      	mov	r7, r0
 800947c:	f2c0 8081 	blt.w	8009582 <quorem+0x112>
 8009480:	3c01      	subs	r4, #1
 8009482:	f101 0814 	add.w	r8, r1, #20
 8009486:	f100 0514 	add.w	r5, r0, #20
 800948a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800948e:	9301      	str	r3, [sp, #4]
 8009490:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009494:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009498:	3301      	adds	r3, #1
 800949a:	429a      	cmp	r2, r3
 800949c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80094a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80094a8:	d331      	bcc.n	800950e <quorem+0x9e>
 80094aa:	f04f 0e00 	mov.w	lr, #0
 80094ae:	4640      	mov	r0, r8
 80094b0:	46ac      	mov	ip, r5
 80094b2:	46f2      	mov	sl, lr
 80094b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80094b8:	b293      	uxth	r3, r2
 80094ba:	fb06 e303 	mla	r3, r6, r3, lr
 80094be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	ebaa 0303 	sub.w	r3, sl, r3
 80094c8:	f8dc a000 	ldr.w	sl, [ip]
 80094cc:	0c12      	lsrs	r2, r2, #16
 80094ce:	fa13 f38a 	uxtah	r3, r3, sl
 80094d2:	fb06 e202 	mla	r2, r6, r2, lr
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	9b00      	ldr	r3, [sp, #0]
 80094da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80094de:	b292      	uxth	r2, r2
 80094e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80094e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80094ec:	4581      	cmp	r9, r0
 80094ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094f2:	f84c 3b04 	str.w	r3, [ip], #4
 80094f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80094fa:	d2db      	bcs.n	80094b4 <quorem+0x44>
 80094fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8009500:	b92b      	cbnz	r3, 800950e <quorem+0x9e>
 8009502:	9b01      	ldr	r3, [sp, #4]
 8009504:	3b04      	subs	r3, #4
 8009506:	429d      	cmp	r5, r3
 8009508:	461a      	mov	r2, r3
 800950a:	d32e      	bcc.n	800956a <quorem+0xfa>
 800950c:	613c      	str	r4, [r7, #16]
 800950e:	4638      	mov	r0, r7
 8009510:	f001 f8c4 	bl	800a69c <__mcmp>
 8009514:	2800      	cmp	r0, #0
 8009516:	db24      	blt.n	8009562 <quorem+0xf2>
 8009518:	3601      	adds	r6, #1
 800951a:	4628      	mov	r0, r5
 800951c:	f04f 0c00 	mov.w	ip, #0
 8009520:	f858 2b04 	ldr.w	r2, [r8], #4
 8009524:	f8d0 e000 	ldr.w	lr, [r0]
 8009528:	b293      	uxth	r3, r2
 800952a:	ebac 0303 	sub.w	r3, ip, r3
 800952e:	0c12      	lsrs	r2, r2, #16
 8009530:	fa13 f38e 	uxtah	r3, r3, lr
 8009534:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009538:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800953c:	b29b      	uxth	r3, r3
 800953e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009542:	45c1      	cmp	r9, r8
 8009544:	f840 3b04 	str.w	r3, [r0], #4
 8009548:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800954c:	d2e8      	bcs.n	8009520 <quorem+0xb0>
 800954e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009552:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009556:	b922      	cbnz	r2, 8009562 <quorem+0xf2>
 8009558:	3b04      	subs	r3, #4
 800955a:	429d      	cmp	r5, r3
 800955c:	461a      	mov	r2, r3
 800955e:	d30a      	bcc.n	8009576 <quorem+0x106>
 8009560:	613c      	str	r4, [r7, #16]
 8009562:	4630      	mov	r0, r6
 8009564:	b003      	add	sp, #12
 8009566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800956a:	6812      	ldr	r2, [r2, #0]
 800956c:	3b04      	subs	r3, #4
 800956e:	2a00      	cmp	r2, #0
 8009570:	d1cc      	bne.n	800950c <quorem+0x9c>
 8009572:	3c01      	subs	r4, #1
 8009574:	e7c7      	b.n	8009506 <quorem+0x96>
 8009576:	6812      	ldr	r2, [r2, #0]
 8009578:	3b04      	subs	r3, #4
 800957a:	2a00      	cmp	r2, #0
 800957c:	d1f0      	bne.n	8009560 <quorem+0xf0>
 800957e:	3c01      	subs	r4, #1
 8009580:	e7eb      	b.n	800955a <quorem+0xea>
 8009582:	2000      	movs	r0, #0
 8009584:	e7ee      	b.n	8009564 <quorem+0xf4>
	...

08009588 <_dtoa_r>:
 8009588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958c:	ed2d 8b04 	vpush	{d8-d9}
 8009590:	ec57 6b10 	vmov	r6, r7, d0
 8009594:	b093      	sub	sp, #76	; 0x4c
 8009596:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009598:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800959c:	9106      	str	r1, [sp, #24]
 800959e:	ee10 aa10 	vmov	sl, s0
 80095a2:	4604      	mov	r4, r0
 80095a4:	9209      	str	r2, [sp, #36]	; 0x24
 80095a6:	930c      	str	r3, [sp, #48]	; 0x30
 80095a8:	46bb      	mov	fp, r7
 80095aa:	b975      	cbnz	r5, 80095ca <_dtoa_r+0x42>
 80095ac:	2010      	movs	r0, #16
 80095ae:	f000 fddd 	bl	800a16c <malloc>
 80095b2:	4602      	mov	r2, r0
 80095b4:	6260      	str	r0, [r4, #36]	; 0x24
 80095b6:	b920      	cbnz	r0, 80095c2 <_dtoa_r+0x3a>
 80095b8:	4ba7      	ldr	r3, [pc, #668]	; (8009858 <_dtoa_r+0x2d0>)
 80095ba:	21ea      	movs	r1, #234	; 0xea
 80095bc:	48a7      	ldr	r0, [pc, #668]	; (800985c <_dtoa_r+0x2d4>)
 80095be:	f001 fbd1 	bl	800ad64 <__assert_func>
 80095c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095c6:	6005      	str	r5, [r0, #0]
 80095c8:	60c5      	str	r5, [r0, #12]
 80095ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095cc:	6819      	ldr	r1, [r3, #0]
 80095ce:	b151      	cbz	r1, 80095e6 <_dtoa_r+0x5e>
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	604a      	str	r2, [r1, #4]
 80095d4:	2301      	movs	r3, #1
 80095d6:	4093      	lsls	r3, r2
 80095d8:	608b      	str	r3, [r1, #8]
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 fe1c 	bl	800a218 <_Bfree>
 80095e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095e2:	2200      	movs	r2, #0
 80095e4:	601a      	str	r2, [r3, #0]
 80095e6:	1e3b      	subs	r3, r7, #0
 80095e8:	bfaa      	itet	ge
 80095ea:	2300      	movge	r3, #0
 80095ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80095f0:	f8c8 3000 	strge.w	r3, [r8]
 80095f4:	4b9a      	ldr	r3, [pc, #616]	; (8009860 <_dtoa_r+0x2d8>)
 80095f6:	bfbc      	itt	lt
 80095f8:	2201      	movlt	r2, #1
 80095fa:	f8c8 2000 	strlt.w	r2, [r8]
 80095fe:	ea33 030b 	bics.w	r3, r3, fp
 8009602:	d11b      	bne.n	800963c <_dtoa_r+0xb4>
 8009604:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009606:	f242 730f 	movw	r3, #9999	; 0x270f
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009610:	4333      	orrs	r3, r6
 8009612:	f000 8592 	beq.w	800a13a <_dtoa_r+0xbb2>
 8009616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009618:	b963      	cbnz	r3, 8009634 <_dtoa_r+0xac>
 800961a:	4b92      	ldr	r3, [pc, #584]	; (8009864 <_dtoa_r+0x2dc>)
 800961c:	e022      	b.n	8009664 <_dtoa_r+0xdc>
 800961e:	4b92      	ldr	r3, [pc, #584]	; (8009868 <_dtoa_r+0x2e0>)
 8009620:	9301      	str	r3, [sp, #4]
 8009622:	3308      	adds	r3, #8
 8009624:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009626:	6013      	str	r3, [r2, #0]
 8009628:	9801      	ldr	r0, [sp, #4]
 800962a:	b013      	add	sp, #76	; 0x4c
 800962c:	ecbd 8b04 	vpop	{d8-d9}
 8009630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009634:	4b8b      	ldr	r3, [pc, #556]	; (8009864 <_dtoa_r+0x2dc>)
 8009636:	9301      	str	r3, [sp, #4]
 8009638:	3303      	adds	r3, #3
 800963a:	e7f3      	b.n	8009624 <_dtoa_r+0x9c>
 800963c:	2200      	movs	r2, #0
 800963e:	2300      	movs	r3, #0
 8009640:	4650      	mov	r0, sl
 8009642:	4659      	mov	r1, fp
 8009644:	f7f7 fa50 	bl	8000ae8 <__aeabi_dcmpeq>
 8009648:	ec4b ab19 	vmov	d9, sl, fp
 800964c:	4680      	mov	r8, r0
 800964e:	b158      	cbz	r0, 8009668 <_dtoa_r+0xe0>
 8009650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009652:	2301      	movs	r3, #1
 8009654:	6013      	str	r3, [r2, #0]
 8009656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 856b 	beq.w	800a134 <_dtoa_r+0xbac>
 800965e:	4883      	ldr	r0, [pc, #524]	; (800986c <_dtoa_r+0x2e4>)
 8009660:	6018      	str	r0, [r3, #0]
 8009662:	1e43      	subs	r3, r0, #1
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	e7df      	b.n	8009628 <_dtoa_r+0xa0>
 8009668:	ec4b ab10 	vmov	d0, sl, fp
 800966c:	aa10      	add	r2, sp, #64	; 0x40
 800966e:	a911      	add	r1, sp, #68	; 0x44
 8009670:	4620      	mov	r0, r4
 8009672:	f001 f8b9 	bl	800a7e8 <__d2b>
 8009676:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800967a:	ee08 0a10 	vmov	s16, r0
 800967e:	2d00      	cmp	r5, #0
 8009680:	f000 8084 	beq.w	800978c <_dtoa_r+0x204>
 8009684:	ee19 3a90 	vmov	r3, s19
 8009688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800968c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009690:	4656      	mov	r6, sl
 8009692:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009696:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800969a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800969e:	4b74      	ldr	r3, [pc, #464]	; (8009870 <_dtoa_r+0x2e8>)
 80096a0:	2200      	movs	r2, #0
 80096a2:	4630      	mov	r0, r6
 80096a4:	4639      	mov	r1, r7
 80096a6:	f7f6 fdff 	bl	80002a8 <__aeabi_dsub>
 80096aa:	a365      	add	r3, pc, #404	; (adr r3, 8009840 <_dtoa_r+0x2b8>)
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	f7f6 ffb2 	bl	8000618 <__aeabi_dmul>
 80096b4:	a364      	add	r3, pc, #400	; (adr r3, 8009848 <_dtoa_r+0x2c0>)
 80096b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ba:	f7f6 fdf7 	bl	80002ac <__adddf3>
 80096be:	4606      	mov	r6, r0
 80096c0:	4628      	mov	r0, r5
 80096c2:	460f      	mov	r7, r1
 80096c4:	f7f6 ff3e 	bl	8000544 <__aeabi_i2d>
 80096c8:	a361      	add	r3, pc, #388	; (adr r3, 8009850 <_dtoa_r+0x2c8>)
 80096ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ce:	f7f6 ffa3 	bl	8000618 <__aeabi_dmul>
 80096d2:	4602      	mov	r2, r0
 80096d4:	460b      	mov	r3, r1
 80096d6:	4630      	mov	r0, r6
 80096d8:	4639      	mov	r1, r7
 80096da:	f7f6 fde7 	bl	80002ac <__adddf3>
 80096de:	4606      	mov	r6, r0
 80096e0:	460f      	mov	r7, r1
 80096e2:	f7f7 fa49 	bl	8000b78 <__aeabi_d2iz>
 80096e6:	2200      	movs	r2, #0
 80096e8:	9000      	str	r0, [sp, #0]
 80096ea:	2300      	movs	r3, #0
 80096ec:	4630      	mov	r0, r6
 80096ee:	4639      	mov	r1, r7
 80096f0:	f7f7 fa04 	bl	8000afc <__aeabi_dcmplt>
 80096f4:	b150      	cbz	r0, 800970c <_dtoa_r+0x184>
 80096f6:	9800      	ldr	r0, [sp, #0]
 80096f8:	f7f6 ff24 	bl	8000544 <__aeabi_i2d>
 80096fc:	4632      	mov	r2, r6
 80096fe:	463b      	mov	r3, r7
 8009700:	f7f7 f9f2 	bl	8000ae8 <__aeabi_dcmpeq>
 8009704:	b910      	cbnz	r0, 800970c <_dtoa_r+0x184>
 8009706:	9b00      	ldr	r3, [sp, #0]
 8009708:	3b01      	subs	r3, #1
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	9b00      	ldr	r3, [sp, #0]
 800970e:	2b16      	cmp	r3, #22
 8009710:	d85a      	bhi.n	80097c8 <_dtoa_r+0x240>
 8009712:	9a00      	ldr	r2, [sp, #0]
 8009714:	4b57      	ldr	r3, [pc, #348]	; (8009874 <_dtoa_r+0x2ec>)
 8009716:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800971a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971e:	ec51 0b19 	vmov	r0, r1, d9
 8009722:	f7f7 f9eb 	bl	8000afc <__aeabi_dcmplt>
 8009726:	2800      	cmp	r0, #0
 8009728:	d050      	beq.n	80097cc <_dtoa_r+0x244>
 800972a:	9b00      	ldr	r3, [sp, #0]
 800972c:	3b01      	subs	r3, #1
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	2300      	movs	r3, #0
 8009732:	930b      	str	r3, [sp, #44]	; 0x2c
 8009734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009736:	1b5d      	subs	r5, r3, r5
 8009738:	1e6b      	subs	r3, r5, #1
 800973a:	9305      	str	r3, [sp, #20]
 800973c:	bf45      	ittet	mi
 800973e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009742:	9304      	strmi	r3, [sp, #16]
 8009744:	2300      	movpl	r3, #0
 8009746:	2300      	movmi	r3, #0
 8009748:	bf4c      	ite	mi
 800974a:	9305      	strmi	r3, [sp, #20]
 800974c:	9304      	strpl	r3, [sp, #16]
 800974e:	9b00      	ldr	r3, [sp, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	db3d      	blt.n	80097d0 <_dtoa_r+0x248>
 8009754:	9b05      	ldr	r3, [sp, #20]
 8009756:	9a00      	ldr	r2, [sp, #0]
 8009758:	920a      	str	r2, [sp, #40]	; 0x28
 800975a:	4413      	add	r3, r2
 800975c:	9305      	str	r3, [sp, #20]
 800975e:	2300      	movs	r3, #0
 8009760:	9307      	str	r3, [sp, #28]
 8009762:	9b06      	ldr	r3, [sp, #24]
 8009764:	2b09      	cmp	r3, #9
 8009766:	f200 8089 	bhi.w	800987c <_dtoa_r+0x2f4>
 800976a:	2b05      	cmp	r3, #5
 800976c:	bfc4      	itt	gt
 800976e:	3b04      	subgt	r3, #4
 8009770:	9306      	strgt	r3, [sp, #24]
 8009772:	9b06      	ldr	r3, [sp, #24]
 8009774:	f1a3 0302 	sub.w	r3, r3, #2
 8009778:	bfcc      	ite	gt
 800977a:	2500      	movgt	r5, #0
 800977c:	2501      	movle	r5, #1
 800977e:	2b03      	cmp	r3, #3
 8009780:	f200 8087 	bhi.w	8009892 <_dtoa_r+0x30a>
 8009784:	e8df f003 	tbb	[pc, r3]
 8009788:	59383a2d 	.word	0x59383a2d
 800978c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009790:	441d      	add	r5, r3
 8009792:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009796:	2b20      	cmp	r3, #32
 8009798:	bfc1      	itttt	gt
 800979a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800979e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80097a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80097a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80097aa:	bfda      	itte	le
 80097ac:	f1c3 0320 	rsble	r3, r3, #32
 80097b0:	fa06 f003 	lslle.w	r0, r6, r3
 80097b4:	4318      	orrgt	r0, r3
 80097b6:	f7f6 feb5 	bl	8000524 <__aeabi_ui2d>
 80097ba:	2301      	movs	r3, #1
 80097bc:	4606      	mov	r6, r0
 80097be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80097c2:	3d01      	subs	r5, #1
 80097c4:	930e      	str	r3, [sp, #56]	; 0x38
 80097c6:	e76a      	b.n	800969e <_dtoa_r+0x116>
 80097c8:	2301      	movs	r3, #1
 80097ca:	e7b2      	b.n	8009732 <_dtoa_r+0x1aa>
 80097cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80097ce:	e7b1      	b.n	8009734 <_dtoa_r+0x1ac>
 80097d0:	9b04      	ldr	r3, [sp, #16]
 80097d2:	9a00      	ldr	r2, [sp, #0]
 80097d4:	1a9b      	subs	r3, r3, r2
 80097d6:	9304      	str	r3, [sp, #16]
 80097d8:	4253      	negs	r3, r2
 80097da:	9307      	str	r3, [sp, #28]
 80097dc:	2300      	movs	r3, #0
 80097de:	930a      	str	r3, [sp, #40]	; 0x28
 80097e0:	e7bf      	b.n	8009762 <_dtoa_r+0x1da>
 80097e2:	2300      	movs	r3, #0
 80097e4:	9308      	str	r3, [sp, #32]
 80097e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	dc55      	bgt.n	8009898 <_dtoa_r+0x310>
 80097ec:	2301      	movs	r3, #1
 80097ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80097f2:	461a      	mov	r2, r3
 80097f4:	9209      	str	r2, [sp, #36]	; 0x24
 80097f6:	e00c      	b.n	8009812 <_dtoa_r+0x28a>
 80097f8:	2301      	movs	r3, #1
 80097fa:	e7f3      	b.n	80097e4 <_dtoa_r+0x25c>
 80097fc:	2300      	movs	r3, #0
 80097fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009800:	9308      	str	r3, [sp, #32]
 8009802:	9b00      	ldr	r3, [sp, #0]
 8009804:	4413      	add	r3, r2
 8009806:	9302      	str	r3, [sp, #8]
 8009808:	3301      	adds	r3, #1
 800980a:	2b01      	cmp	r3, #1
 800980c:	9303      	str	r3, [sp, #12]
 800980e:	bfb8      	it	lt
 8009810:	2301      	movlt	r3, #1
 8009812:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009814:	2200      	movs	r2, #0
 8009816:	6042      	str	r2, [r0, #4]
 8009818:	2204      	movs	r2, #4
 800981a:	f102 0614 	add.w	r6, r2, #20
 800981e:	429e      	cmp	r6, r3
 8009820:	6841      	ldr	r1, [r0, #4]
 8009822:	d93d      	bls.n	80098a0 <_dtoa_r+0x318>
 8009824:	4620      	mov	r0, r4
 8009826:	f000 fcb7 	bl	800a198 <_Balloc>
 800982a:	9001      	str	r0, [sp, #4]
 800982c:	2800      	cmp	r0, #0
 800982e:	d13b      	bne.n	80098a8 <_dtoa_r+0x320>
 8009830:	4b11      	ldr	r3, [pc, #68]	; (8009878 <_dtoa_r+0x2f0>)
 8009832:	4602      	mov	r2, r0
 8009834:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009838:	e6c0      	b.n	80095bc <_dtoa_r+0x34>
 800983a:	2301      	movs	r3, #1
 800983c:	e7df      	b.n	80097fe <_dtoa_r+0x276>
 800983e:	bf00      	nop
 8009840:	636f4361 	.word	0x636f4361
 8009844:	3fd287a7 	.word	0x3fd287a7
 8009848:	8b60c8b3 	.word	0x8b60c8b3
 800984c:	3fc68a28 	.word	0x3fc68a28
 8009850:	509f79fb 	.word	0x509f79fb
 8009854:	3fd34413 	.word	0x3fd34413
 8009858:	0800b9fd 	.word	0x0800b9fd
 800985c:	0800ba14 	.word	0x0800ba14
 8009860:	7ff00000 	.word	0x7ff00000
 8009864:	0800b9f9 	.word	0x0800b9f9
 8009868:	0800b9f0 	.word	0x0800b9f0
 800986c:	0800b9cd 	.word	0x0800b9cd
 8009870:	3ff80000 	.word	0x3ff80000
 8009874:	0800bb08 	.word	0x0800bb08
 8009878:	0800ba6f 	.word	0x0800ba6f
 800987c:	2501      	movs	r5, #1
 800987e:	2300      	movs	r3, #0
 8009880:	9306      	str	r3, [sp, #24]
 8009882:	9508      	str	r5, [sp, #32]
 8009884:	f04f 33ff 	mov.w	r3, #4294967295
 8009888:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800988c:	2200      	movs	r2, #0
 800988e:	2312      	movs	r3, #18
 8009890:	e7b0      	b.n	80097f4 <_dtoa_r+0x26c>
 8009892:	2301      	movs	r3, #1
 8009894:	9308      	str	r3, [sp, #32]
 8009896:	e7f5      	b.n	8009884 <_dtoa_r+0x2fc>
 8009898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800989a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800989e:	e7b8      	b.n	8009812 <_dtoa_r+0x28a>
 80098a0:	3101      	adds	r1, #1
 80098a2:	6041      	str	r1, [r0, #4]
 80098a4:	0052      	lsls	r2, r2, #1
 80098a6:	e7b8      	b.n	800981a <_dtoa_r+0x292>
 80098a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098aa:	9a01      	ldr	r2, [sp, #4]
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	9b03      	ldr	r3, [sp, #12]
 80098b0:	2b0e      	cmp	r3, #14
 80098b2:	f200 809d 	bhi.w	80099f0 <_dtoa_r+0x468>
 80098b6:	2d00      	cmp	r5, #0
 80098b8:	f000 809a 	beq.w	80099f0 <_dtoa_r+0x468>
 80098bc:	9b00      	ldr	r3, [sp, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	dd32      	ble.n	8009928 <_dtoa_r+0x3a0>
 80098c2:	4ab7      	ldr	r2, [pc, #732]	; (8009ba0 <_dtoa_r+0x618>)
 80098c4:	f003 030f 	and.w	r3, r3, #15
 80098c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80098cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098d0:	9b00      	ldr	r3, [sp, #0]
 80098d2:	05d8      	lsls	r0, r3, #23
 80098d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80098d8:	d516      	bpl.n	8009908 <_dtoa_r+0x380>
 80098da:	4bb2      	ldr	r3, [pc, #712]	; (8009ba4 <_dtoa_r+0x61c>)
 80098dc:	ec51 0b19 	vmov	r0, r1, d9
 80098e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80098e4:	f7f6 ffc2 	bl	800086c <__aeabi_ddiv>
 80098e8:	f007 070f 	and.w	r7, r7, #15
 80098ec:	4682      	mov	sl, r0
 80098ee:	468b      	mov	fp, r1
 80098f0:	2503      	movs	r5, #3
 80098f2:	4eac      	ldr	r6, [pc, #688]	; (8009ba4 <_dtoa_r+0x61c>)
 80098f4:	b957      	cbnz	r7, 800990c <_dtoa_r+0x384>
 80098f6:	4642      	mov	r2, r8
 80098f8:	464b      	mov	r3, r9
 80098fa:	4650      	mov	r0, sl
 80098fc:	4659      	mov	r1, fp
 80098fe:	f7f6 ffb5 	bl	800086c <__aeabi_ddiv>
 8009902:	4682      	mov	sl, r0
 8009904:	468b      	mov	fp, r1
 8009906:	e028      	b.n	800995a <_dtoa_r+0x3d2>
 8009908:	2502      	movs	r5, #2
 800990a:	e7f2      	b.n	80098f2 <_dtoa_r+0x36a>
 800990c:	07f9      	lsls	r1, r7, #31
 800990e:	d508      	bpl.n	8009922 <_dtoa_r+0x39a>
 8009910:	4640      	mov	r0, r8
 8009912:	4649      	mov	r1, r9
 8009914:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009918:	f7f6 fe7e 	bl	8000618 <__aeabi_dmul>
 800991c:	3501      	adds	r5, #1
 800991e:	4680      	mov	r8, r0
 8009920:	4689      	mov	r9, r1
 8009922:	107f      	asrs	r7, r7, #1
 8009924:	3608      	adds	r6, #8
 8009926:	e7e5      	b.n	80098f4 <_dtoa_r+0x36c>
 8009928:	f000 809b 	beq.w	8009a62 <_dtoa_r+0x4da>
 800992c:	9b00      	ldr	r3, [sp, #0]
 800992e:	4f9d      	ldr	r7, [pc, #628]	; (8009ba4 <_dtoa_r+0x61c>)
 8009930:	425e      	negs	r6, r3
 8009932:	4b9b      	ldr	r3, [pc, #620]	; (8009ba0 <_dtoa_r+0x618>)
 8009934:	f006 020f 	and.w	r2, r6, #15
 8009938:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800993c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009940:	ec51 0b19 	vmov	r0, r1, d9
 8009944:	f7f6 fe68 	bl	8000618 <__aeabi_dmul>
 8009948:	1136      	asrs	r6, r6, #4
 800994a:	4682      	mov	sl, r0
 800994c:	468b      	mov	fp, r1
 800994e:	2300      	movs	r3, #0
 8009950:	2502      	movs	r5, #2
 8009952:	2e00      	cmp	r6, #0
 8009954:	d17a      	bne.n	8009a4c <_dtoa_r+0x4c4>
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1d3      	bne.n	8009902 <_dtoa_r+0x37a>
 800995a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800995c:	2b00      	cmp	r3, #0
 800995e:	f000 8082 	beq.w	8009a66 <_dtoa_r+0x4de>
 8009962:	4b91      	ldr	r3, [pc, #580]	; (8009ba8 <_dtoa_r+0x620>)
 8009964:	2200      	movs	r2, #0
 8009966:	4650      	mov	r0, sl
 8009968:	4659      	mov	r1, fp
 800996a:	f7f7 f8c7 	bl	8000afc <__aeabi_dcmplt>
 800996e:	2800      	cmp	r0, #0
 8009970:	d079      	beq.n	8009a66 <_dtoa_r+0x4de>
 8009972:	9b03      	ldr	r3, [sp, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d076      	beq.n	8009a66 <_dtoa_r+0x4de>
 8009978:	9b02      	ldr	r3, [sp, #8]
 800997a:	2b00      	cmp	r3, #0
 800997c:	dd36      	ble.n	80099ec <_dtoa_r+0x464>
 800997e:	9b00      	ldr	r3, [sp, #0]
 8009980:	4650      	mov	r0, sl
 8009982:	4659      	mov	r1, fp
 8009984:	1e5f      	subs	r7, r3, #1
 8009986:	2200      	movs	r2, #0
 8009988:	4b88      	ldr	r3, [pc, #544]	; (8009bac <_dtoa_r+0x624>)
 800998a:	f7f6 fe45 	bl	8000618 <__aeabi_dmul>
 800998e:	9e02      	ldr	r6, [sp, #8]
 8009990:	4682      	mov	sl, r0
 8009992:	468b      	mov	fp, r1
 8009994:	3501      	adds	r5, #1
 8009996:	4628      	mov	r0, r5
 8009998:	f7f6 fdd4 	bl	8000544 <__aeabi_i2d>
 800999c:	4652      	mov	r2, sl
 800999e:	465b      	mov	r3, fp
 80099a0:	f7f6 fe3a 	bl	8000618 <__aeabi_dmul>
 80099a4:	4b82      	ldr	r3, [pc, #520]	; (8009bb0 <_dtoa_r+0x628>)
 80099a6:	2200      	movs	r2, #0
 80099a8:	f7f6 fc80 	bl	80002ac <__adddf3>
 80099ac:	46d0      	mov	r8, sl
 80099ae:	46d9      	mov	r9, fp
 80099b0:	4682      	mov	sl, r0
 80099b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80099b6:	2e00      	cmp	r6, #0
 80099b8:	d158      	bne.n	8009a6c <_dtoa_r+0x4e4>
 80099ba:	4b7e      	ldr	r3, [pc, #504]	; (8009bb4 <_dtoa_r+0x62c>)
 80099bc:	2200      	movs	r2, #0
 80099be:	4640      	mov	r0, r8
 80099c0:	4649      	mov	r1, r9
 80099c2:	f7f6 fc71 	bl	80002a8 <__aeabi_dsub>
 80099c6:	4652      	mov	r2, sl
 80099c8:	465b      	mov	r3, fp
 80099ca:	4680      	mov	r8, r0
 80099cc:	4689      	mov	r9, r1
 80099ce:	f7f7 f8b3 	bl	8000b38 <__aeabi_dcmpgt>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	f040 8295 	bne.w	8009f02 <_dtoa_r+0x97a>
 80099d8:	4652      	mov	r2, sl
 80099da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80099de:	4640      	mov	r0, r8
 80099e0:	4649      	mov	r1, r9
 80099e2:	f7f7 f88b 	bl	8000afc <__aeabi_dcmplt>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f040 8289 	bne.w	8009efe <_dtoa_r+0x976>
 80099ec:	ec5b ab19 	vmov	sl, fp, d9
 80099f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f2c0 8148 	blt.w	8009c88 <_dtoa_r+0x700>
 80099f8:	9a00      	ldr	r2, [sp, #0]
 80099fa:	2a0e      	cmp	r2, #14
 80099fc:	f300 8144 	bgt.w	8009c88 <_dtoa_r+0x700>
 8009a00:	4b67      	ldr	r3, [pc, #412]	; (8009ba0 <_dtoa_r+0x618>)
 8009a02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f280 80d5 	bge.w	8009bbc <_dtoa_r+0x634>
 8009a12:	9b03      	ldr	r3, [sp, #12]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f300 80d1 	bgt.w	8009bbc <_dtoa_r+0x634>
 8009a1a:	f040 826f 	bne.w	8009efc <_dtoa_r+0x974>
 8009a1e:	4b65      	ldr	r3, [pc, #404]	; (8009bb4 <_dtoa_r+0x62c>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	4640      	mov	r0, r8
 8009a24:	4649      	mov	r1, r9
 8009a26:	f7f6 fdf7 	bl	8000618 <__aeabi_dmul>
 8009a2a:	4652      	mov	r2, sl
 8009a2c:	465b      	mov	r3, fp
 8009a2e:	f7f7 f879 	bl	8000b24 <__aeabi_dcmpge>
 8009a32:	9e03      	ldr	r6, [sp, #12]
 8009a34:	4637      	mov	r7, r6
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f040 8245 	bne.w	8009ec6 <_dtoa_r+0x93e>
 8009a3c:	9d01      	ldr	r5, [sp, #4]
 8009a3e:	2331      	movs	r3, #49	; 0x31
 8009a40:	f805 3b01 	strb.w	r3, [r5], #1
 8009a44:	9b00      	ldr	r3, [sp, #0]
 8009a46:	3301      	adds	r3, #1
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	e240      	b.n	8009ece <_dtoa_r+0x946>
 8009a4c:	07f2      	lsls	r2, r6, #31
 8009a4e:	d505      	bpl.n	8009a5c <_dtoa_r+0x4d4>
 8009a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a54:	f7f6 fde0 	bl	8000618 <__aeabi_dmul>
 8009a58:	3501      	adds	r5, #1
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	1076      	asrs	r6, r6, #1
 8009a5e:	3708      	adds	r7, #8
 8009a60:	e777      	b.n	8009952 <_dtoa_r+0x3ca>
 8009a62:	2502      	movs	r5, #2
 8009a64:	e779      	b.n	800995a <_dtoa_r+0x3d2>
 8009a66:	9f00      	ldr	r7, [sp, #0]
 8009a68:	9e03      	ldr	r6, [sp, #12]
 8009a6a:	e794      	b.n	8009996 <_dtoa_r+0x40e>
 8009a6c:	9901      	ldr	r1, [sp, #4]
 8009a6e:	4b4c      	ldr	r3, [pc, #304]	; (8009ba0 <_dtoa_r+0x618>)
 8009a70:	4431      	add	r1, r6
 8009a72:	910d      	str	r1, [sp, #52]	; 0x34
 8009a74:	9908      	ldr	r1, [sp, #32]
 8009a76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009a7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a7e:	2900      	cmp	r1, #0
 8009a80:	d043      	beq.n	8009b0a <_dtoa_r+0x582>
 8009a82:	494d      	ldr	r1, [pc, #308]	; (8009bb8 <_dtoa_r+0x630>)
 8009a84:	2000      	movs	r0, #0
 8009a86:	f7f6 fef1 	bl	800086c <__aeabi_ddiv>
 8009a8a:	4652      	mov	r2, sl
 8009a8c:	465b      	mov	r3, fp
 8009a8e:	f7f6 fc0b 	bl	80002a8 <__aeabi_dsub>
 8009a92:	9d01      	ldr	r5, [sp, #4]
 8009a94:	4682      	mov	sl, r0
 8009a96:	468b      	mov	fp, r1
 8009a98:	4649      	mov	r1, r9
 8009a9a:	4640      	mov	r0, r8
 8009a9c:	f7f7 f86c 	bl	8000b78 <__aeabi_d2iz>
 8009aa0:	4606      	mov	r6, r0
 8009aa2:	f7f6 fd4f 	bl	8000544 <__aeabi_i2d>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	4640      	mov	r0, r8
 8009aac:	4649      	mov	r1, r9
 8009aae:	f7f6 fbfb 	bl	80002a8 <__aeabi_dsub>
 8009ab2:	3630      	adds	r6, #48	; 0x30
 8009ab4:	f805 6b01 	strb.w	r6, [r5], #1
 8009ab8:	4652      	mov	r2, sl
 8009aba:	465b      	mov	r3, fp
 8009abc:	4680      	mov	r8, r0
 8009abe:	4689      	mov	r9, r1
 8009ac0:	f7f7 f81c 	bl	8000afc <__aeabi_dcmplt>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d163      	bne.n	8009b90 <_dtoa_r+0x608>
 8009ac8:	4642      	mov	r2, r8
 8009aca:	464b      	mov	r3, r9
 8009acc:	4936      	ldr	r1, [pc, #216]	; (8009ba8 <_dtoa_r+0x620>)
 8009ace:	2000      	movs	r0, #0
 8009ad0:	f7f6 fbea 	bl	80002a8 <__aeabi_dsub>
 8009ad4:	4652      	mov	r2, sl
 8009ad6:	465b      	mov	r3, fp
 8009ad8:	f7f7 f810 	bl	8000afc <__aeabi_dcmplt>
 8009adc:	2800      	cmp	r0, #0
 8009ade:	f040 80b5 	bne.w	8009c4c <_dtoa_r+0x6c4>
 8009ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ae4:	429d      	cmp	r5, r3
 8009ae6:	d081      	beq.n	80099ec <_dtoa_r+0x464>
 8009ae8:	4b30      	ldr	r3, [pc, #192]	; (8009bac <_dtoa_r+0x624>)
 8009aea:	2200      	movs	r2, #0
 8009aec:	4650      	mov	r0, sl
 8009aee:	4659      	mov	r1, fp
 8009af0:	f7f6 fd92 	bl	8000618 <__aeabi_dmul>
 8009af4:	4b2d      	ldr	r3, [pc, #180]	; (8009bac <_dtoa_r+0x624>)
 8009af6:	4682      	mov	sl, r0
 8009af8:	468b      	mov	fp, r1
 8009afa:	4640      	mov	r0, r8
 8009afc:	4649      	mov	r1, r9
 8009afe:	2200      	movs	r2, #0
 8009b00:	f7f6 fd8a 	bl	8000618 <__aeabi_dmul>
 8009b04:	4680      	mov	r8, r0
 8009b06:	4689      	mov	r9, r1
 8009b08:	e7c6      	b.n	8009a98 <_dtoa_r+0x510>
 8009b0a:	4650      	mov	r0, sl
 8009b0c:	4659      	mov	r1, fp
 8009b0e:	f7f6 fd83 	bl	8000618 <__aeabi_dmul>
 8009b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b14:	9d01      	ldr	r5, [sp, #4]
 8009b16:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b18:	4682      	mov	sl, r0
 8009b1a:	468b      	mov	fp, r1
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	4640      	mov	r0, r8
 8009b20:	f7f7 f82a 	bl	8000b78 <__aeabi_d2iz>
 8009b24:	4606      	mov	r6, r0
 8009b26:	f7f6 fd0d 	bl	8000544 <__aeabi_i2d>
 8009b2a:	3630      	adds	r6, #48	; 0x30
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4640      	mov	r0, r8
 8009b32:	4649      	mov	r1, r9
 8009b34:	f7f6 fbb8 	bl	80002a8 <__aeabi_dsub>
 8009b38:	f805 6b01 	strb.w	r6, [r5], #1
 8009b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b3e:	429d      	cmp	r5, r3
 8009b40:	4680      	mov	r8, r0
 8009b42:	4689      	mov	r9, r1
 8009b44:	f04f 0200 	mov.w	r2, #0
 8009b48:	d124      	bne.n	8009b94 <_dtoa_r+0x60c>
 8009b4a:	4b1b      	ldr	r3, [pc, #108]	; (8009bb8 <_dtoa_r+0x630>)
 8009b4c:	4650      	mov	r0, sl
 8009b4e:	4659      	mov	r1, fp
 8009b50:	f7f6 fbac 	bl	80002ac <__adddf3>
 8009b54:	4602      	mov	r2, r0
 8009b56:	460b      	mov	r3, r1
 8009b58:	4640      	mov	r0, r8
 8009b5a:	4649      	mov	r1, r9
 8009b5c:	f7f6 ffec 	bl	8000b38 <__aeabi_dcmpgt>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d173      	bne.n	8009c4c <_dtoa_r+0x6c4>
 8009b64:	4652      	mov	r2, sl
 8009b66:	465b      	mov	r3, fp
 8009b68:	4913      	ldr	r1, [pc, #76]	; (8009bb8 <_dtoa_r+0x630>)
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	f7f6 fb9c 	bl	80002a8 <__aeabi_dsub>
 8009b70:	4602      	mov	r2, r0
 8009b72:	460b      	mov	r3, r1
 8009b74:	4640      	mov	r0, r8
 8009b76:	4649      	mov	r1, r9
 8009b78:	f7f6 ffc0 	bl	8000afc <__aeabi_dcmplt>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	f43f af35 	beq.w	80099ec <_dtoa_r+0x464>
 8009b82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009b84:	1e6b      	subs	r3, r5, #1
 8009b86:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b8c:	2b30      	cmp	r3, #48	; 0x30
 8009b8e:	d0f8      	beq.n	8009b82 <_dtoa_r+0x5fa>
 8009b90:	9700      	str	r7, [sp, #0]
 8009b92:	e049      	b.n	8009c28 <_dtoa_r+0x6a0>
 8009b94:	4b05      	ldr	r3, [pc, #20]	; (8009bac <_dtoa_r+0x624>)
 8009b96:	f7f6 fd3f 	bl	8000618 <__aeabi_dmul>
 8009b9a:	4680      	mov	r8, r0
 8009b9c:	4689      	mov	r9, r1
 8009b9e:	e7bd      	b.n	8009b1c <_dtoa_r+0x594>
 8009ba0:	0800bb08 	.word	0x0800bb08
 8009ba4:	0800bae0 	.word	0x0800bae0
 8009ba8:	3ff00000 	.word	0x3ff00000
 8009bac:	40240000 	.word	0x40240000
 8009bb0:	401c0000 	.word	0x401c0000
 8009bb4:	40140000 	.word	0x40140000
 8009bb8:	3fe00000 	.word	0x3fe00000
 8009bbc:	9d01      	ldr	r5, [sp, #4]
 8009bbe:	4656      	mov	r6, sl
 8009bc0:	465f      	mov	r7, fp
 8009bc2:	4642      	mov	r2, r8
 8009bc4:	464b      	mov	r3, r9
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	4639      	mov	r1, r7
 8009bca:	f7f6 fe4f 	bl	800086c <__aeabi_ddiv>
 8009bce:	f7f6 ffd3 	bl	8000b78 <__aeabi_d2iz>
 8009bd2:	4682      	mov	sl, r0
 8009bd4:	f7f6 fcb6 	bl	8000544 <__aeabi_i2d>
 8009bd8:	4642      	mov	r2, r8
 8009bda:	464b      	mov	r3, r9
 8009bdc:	f7f6 fd1c 	bl	8000618 <__aeabi_dmul>
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	4630      	mov	r0, r6
 8009be6:	4639      	mov	r1, r7
 8009be8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009bec:	f7f6 fb5c 	bl	80002a8 <__aeabi_dsub>
 8009bf0:	f805 6b01 	strb.w	r6, [r5], #1
 8009bf4:	9e01      	ldr	r6, [sp, #4]
 8009bf6:	9f03      	ldr	r7, [sp, #12]
 8009bf8:	1bae      	subs	r6, r5, r6
 8009bfa:	42b7      	cmp	r7, r6
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	460b      	mov	r3, r1
 8009c00:	d135      	bne.n	8009c6e <_dtoa_r+0x6e6>
 8009c02:	f7f6 fb53 	bl	80002ac <__adddf3>
 8009c06:	4642      	mov	r2, r8
 8009c08:	464b      	mov	r3, r9
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	460f      	mov	r7, r1
 8009c0e:	f7f6 ff93 	bl	8000b38 <__aeabi_dcmpgt>
 8009c12:	b9d0      	cbnz	r0, 8009c4a <_dtoa_r+0x6c2>
 8009c14:	4642      	mov	r2, r8
 8009c16:	464b      	mov	r3, r9
 8009c18:	4630      	mov	r0, r6
 8009c1a:	4639      	mov	r1, r7
 8009c1c:	f7f6 ff64 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c20:	b110      	cbz	r0, 8009c28 <_dtoa_r+0x6a0>
 8009c22:	f01a 0f01 	tst.w	sl, #1
 8009c26:	d110      	bne.n	8009c4a <_dtoa_r+0x6c2>
 8009c28:	4620      	mov	r0, r4
 8009c2a:	ee18 1a10 	vmov	r1, s16
 8009c2e:	f000 faf3 	bl	800a218 <_Bfree>
 8009c32:	2300      	movs	r3, #0
 8009c34:	9800      	ldr	r0, [sp, #0]
 8009c36:	702b      	strb	r3, [r5, #0]
 8009c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	6018      	str	r0, [r3, #0]
 8009c3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f43f acf1 	beq.w	8009628 <_dtoa_r+0xa0>
 8009c46:	601d      	str	r5, [r3, #0]
 8009c48:	e4ee      	b.n	8009628 <_dtoa_r+0xa0>
 8009c4a:	9f00      	ldr	r7, [sp, #0]
 8009c4c:	462b      	mov	r3, r5
 8009c4e:	461d      	mov	r5, r3
 8009c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c54:	2a39      	cmp	r2, #57	; 0x39
 8009c56:	d106      	bne.n	8009c66 <_dtoa_r+0x6de>
 8009c58:	9a01      	ldr	r2, [sp, #4]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d1f7      	bne.n	8009c4e <_dtoa_r+0x6c6>
 8009c5e:	9901      	ldr	r1, [sp, #4]
 8009c60:	2230      	movs	r2, #48	; 0x30
 8009c62:	3701      	adds	r7, #1
 8009c64:	700a      	strb	r2, [r1, #0]
 8009c66:	781a      	ldrb	r2, [r3, #0]
 8009c68:	3201      	adds	r2, #1
 8009c6a:	701a      	strb	r2, [r3, #0]
 8009c6c:	e790      	b.n	8009b90 <_dtoa_r+0x608>
 8009c6e:	4ba6      	ldr	r3, [pc, #664]	; (8009f08 <_dtoa_r+0x980>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	f7f6 fcd1 	bl	8000618 <__aeabi_dmul>
 8009c76:	2200      	movs	r2, #0
 8009c78:	2300      	movs	r3, #0
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	460f      	mov	r7, r1
 8009c7e:	f7f6 ff33 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d09d      	beq.n	8009bc2 <_dtoa_r+0x63a>
 8009c86:	e7cf      	b.n	8009c28 <_dtoa_r+0x6a0>
 8009c88:	9a08      	ldr	r2, [sp, #32]
 8009c8a:	2a00      	cmp	r2, #0
 8009c8c:	f000 80d7 	beq.w	8009e3e <_dtoa_r+0x8b6>
 8009c90:	9a06      	ldr	r2, [sp, #24]
 8009c92:	2a01      	cmp	r2, #1
 8009c94:	f300 80ba 	bgt.w	8009e0c <_dtoa_r+0x884>
 8009c98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c9a:	2a00      	cmp	r2, #0
 8009c9c:	f000 80b2 	beq.w	8009e04 <_dtoa_r+0x87c>
 8009ca0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ca4:	9e07      	ldr	r6, [sp, #28]
 8009ca6:	9d04      	ldr	r5, [sp, #16]
 8009ca8:	9a04      	ldr	r2, [sp, #16]
 8009caa:	441a      	add	r2, r3
 8009cac:	9204      	str	r2, [sp, #16]
 8009cae:	9a05      	ldr	r2, [sp, #20]
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	441a      	add	r2, r3
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	9205      	str	r2, [sp, #20]
 8009cb8:	f000 fb66 	bl	800a388 <__i2b>
 8009cbc:	4607      	mov	r7, r0
 8009cbe:	2d00      	cmp	r5, #0
 8009cc0:	dd0c      	ble.n	8009cdc <_dtoa_r+0x754>
 8009cc2:	9b05      	ldr	r3, [sp, #20]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	dd09      	ble.n	8009cdc <_dtoa_r+0x754>
 8009cc8:	42ab      	cmp	r3, r5
 8009cca:	9a04      	ldr	r2, [sp, #16]
 8009ccc:	bfa8      	it	ge
 8009cce:	462b      	movge	r3, r5
 8009cd0:	1ad2      	subs	r2, r2, r3
 8009cd2:	9204      	str	r2, [sp, #16]
 8009cd4:	9a05      	ldr	r2, [sp, #20]
 8009cd6:	1aed      	subs	r5, r5, r3
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	9305      	str	r3, [sp, #20]
 8009cdc:	9b07      	ldr	r3, [sp, #28]
 8009cde:	b31b      	cbz	r3, 8009d28 <_dtoa_r+0x7a0>
 8009ce0:	9b08      	ldr	r3, [sp, #32]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f000 80af 	beq.w	8009e46 <_dtoa_r+0x8be>
 8009ce8:	2e00      	cmp	r6, #0
 8009cea:	dd13      	ble.n	8009d14 <_dtoa_r+0x78c>
 8009cec:	4639      	mov	r1, r7
 8009cee:	4632      	mov	r2, r6
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f000 fc09 	bl	800a508 <__pow5mult>
 8009cf6:	ee18 2a10 	vmov	r2, s16
 8009cfa:	4601      	mov	r1, r0
 8009cfc:	4607      	mov	r7, r0
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f000 fb58 	bl	800a3b4 <__multiply>
 8009d04:	ee18 1a10 	vmov	r1, s16
 8009d08:	4680      	mov	r8, r0
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f000 fa84 	bl	800a218 <_Bfree>
 8009d10:	ee08 8a10 	vmov	s16, r8
 8009d14:	9b07      	ldr	r3, [sp, #28]
 8009d16:	1b9a      	subs	r2, r3, r6
 8009d18:	d006      	beq.n	8009d28 <_dtoa_r+0x7a0>
 8009d1a:	ee18 1a10 	vmov	r1, s16
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f000 fbf2 	bl	800a508 <__pow5mult>
 8009d24:	ee08 0a10 	vmov	s16, r0
 8009d28:	2101      	movs	r1, #1
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f000 fb2c 	bl	800a388 <__i2b>
 8009d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	4606      	mov	r6, r0
 8009d36:	f340 8088 	ble.w	8009e4a <_dtoa_r+0x8c2>
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	4601      	mov	r1, r0
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f000 fbe2 	bl	800a508 <__pow5mult>
 8009d44:	9b06      	ldr	r3, [sp, #24]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	4606      	mov	r6, r0
 8009d4a:	f340 8081 	ble.w	8009e50 <_dtoa_r+0x8c8>
 8009d4e:	f04f 0800 	mov.w	r8, #0
 8009d52:	6933      	ldr	r3, [r6, #16]
 8009d54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d58:	6918      	ldr	r0, [r3, #16]
 8009d5a:	f000 fac5 	bl	800a2e8 <__hi0bits>
 8009d5e:	f1c0 0020 	rsb	r0, r0, #32
 8009d62:	9b05      	ldr	r3, [sp, #20]
 8009d64:	4418      	add	r0, r3
 8009d66:	f010 001f 	ands.w	r0, r0, #31
 8009d6a:	f000 8092 	beq.w	8009e92 <_dtoa_r+0x90a>
 8009d6e:	f1c0 0320 	rsb	r3, r0, #32
 8009d72:	2b04      	cmp	r3, #4
 8009d74:	f340 808a 	ble.w	8009e8c <_dtoa_r+0x904>
 8009d78:	f1c0 001c 	rsb	r0, r0, #28
 8009d7c:	9b04      	ldr	r3, [sp, #16]
 8009d7e:	4403      	add	r3, r0
 8009d80:	9304      	str	r3, [sp, #16]
 8009d82:	9b05      	ldr	r3, [sp, #20]
 8009d84:	4403      	add	r3, r0
 8009d86:	4405      	add	r5, r0
 8009d88:	9305      	str	r3, [sp, #20]
 8009d8a:	9b04      	ldr	r3, [sp, #16]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	dd07      	ble.n	8009da0 <_dtoa_r+0x818>
 8009d90:	ee18 1a10 	vmov	r1, s16
 8009d94:	461a      	mov	r2, r3
 8009d96:	4620      	mov	r0, r4
 8009d98:	f000 fc10 	bl	800a5bc <__lshift>
 8009d9c:	ee08 0a10 	vmov	s16, r0
 8009da0:	9b05      	ldr	r3, [sp, #20]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	dd05      	ble.n	8009db2 <_dtoa_r+0x82a>
 8009da6:	4631      	mov	r1, r6
 8009da8:	461a      	mov	r2, r3
 8009daa:	4620      	mov	r0, r4
 8009dac:	f000 fc06 	bl	800a5bc <__lshift>
 8009db0:	4606      	mov	r6, r0
 8009db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d06e      	beq.n	8009e96 <_dtoa_r+0x90e>
 8009db8:	ee18 0a10 	vmov	r0, s16
 8009dbc:	4631      	mov	r1, r6
 8009dbe:	f000 fc6d 	bl	800a69c <__mcmp>
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	da67      	bge.n	8009e96 <_dtoa_r+0x90e>
 8009dc6:	9b00      	ldr	r3, [sp, #0]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	ee18 1a10 	vmov	r1, s16
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	220a      	movs	r2, #10
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f000 fa41 	bl	800a25c <__multadd>
 8009dda:	9b08      	ldr	r3, [sp, #32]
 8009ddc:	ee08 0a10 	vmov	s16, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 81b1 	beq.w	800a148 <_dtoa_r+0xbc0>
 8009de6:	2300      	movs	r3, #0
 8009de8:	4639      	mov	r1, r7
 8009dea:	220a      	movs	r2, #10
 8009dec:	4620      	mov	r0, r4
 8009dee:	f000 fa35 	bl	800a25c <__multadd>
 8009df2:	9b02      	ldr	r3, [sp, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	4607      	mov	r7, r0
 8009df8:	f300 808e 	bgt.w	8009f18 <_dtoa_r+0x990>
 8009dfc:	9b06      	ldr	r3, [sp, #24]
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	dc51      	bgt.n	8009ea6 <_dtoa_r+0x91e>
 8009e02:	e089      	b.n	8009f18 <_dtoa_r+0x990>
 8009e04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e0a:	e74b      	b.n	8009ca4 <_dtoa_r+0x71c>
 8009e0c:	9b03      	ldr	r3, [sp, #12]
 8009e0e:	1e5e      	subs	r6, r3, #1
 8009e10:	9b07      	ldr	r3, [sp, #28]
 8009e12:	42b3      	cmp	r3, r6
 8009e14:	bfbf      	itttt	lt
 8009e16:	9b07      	ldrlt	r3, [sp, #28]
 8009e18:	9607      	strlt	r6, [sp, #28]
 8009e1a:	1af2      	sublt	r2, r6, r3
 8009e1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009e1e:	bfb6      	itet	lt
 8009e20:	189b      	addlt	r3, r3, r2
 8009e22:	1b9e      	subge	r6, r3, r6
 8009e24:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009e26:	9b03      	ldr	r3, [sp, #12]
 8009e28:	bfb8      	it	lt
 8009e2a:	2600      	movlt	r6, #0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	bfb7      	itett	lt
 8009e30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009e34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009e38:	1a9d      	sublt	r5, r3, r2
 8009e3a:	2300      	movlt	r3, #0
 8009e3c:	e734      	b.n	8009ca8 <_dtoa_r+0x720>
 8009e3e:	9e07      	ldr	r6, [sp, #28]
 8009e40:	9d04      	ldr	r5, [sp, #16]
 8009e42:	9f08      	ldr	r7, [sp, #32]
 8009e44:	e73b      	b.n	8009cbe <_dtoa_r+0x736>
 8009e46:	9a07      	ldr	r2, [sp, #28]
 8009e48:	e767      	b.n	8009d1a <_dtoa_r+0x792>
 8009e4a:	9b06      	ldr	r3, [sp, #24]
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	dc18      	bgt.n	8009e82 <_dtoa_r+0x8fa>
 8009e50:	f1ba 0f00 	cmp.w	sl, #0
 8009e54:	d115      	bne.n	8009e82 <_dtoa_r+0x8fa>
 8009e56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e5a:	b993      	cbnz	r3, 8009e82 <_dtoa_r+0x8fa>
 8009e5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e60:	0d1b      	lsrs	r3, r3, #20
 8009e62:	051b      	lsls	r3, r3, #20
 8009e64:	b183      	cbz	r3, 8009e88 <_dtoa_r+0x900>
 8009e66:	9b04      	ldr	r3, [sp, #16]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	9304      	str	r3, [sp, #16]
 8009e6c:	9b05      	ldr	r3, [sp, #20]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	9305      	str	r3, [sp, #20]
 8009e72:	f04f 0801 	mov.w	r8, #1
 8009e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f47f af6a 	bne.w	8009d52 <_dtoa_r+0x7ca>
 8009e7e:	2001      	movs	r0, #1
 8009e80:	e76f      	b.n	8009d62 <_dtoa_r+0x7da>
 8009e82:	f04f 0800 	mov.w	r8, #0
 8009e86:	e7f6      	b.n	8009e76 <_dtoa_r+0x8ee>
 8009e88:	4698      	mov	r8, r3
 8009e8a:	e7f4      	b.n	8009e76 <_dtoa_r+0x8ee>
 8009e8c:	f43f af7d 	beq.w	8009d8a <_dtoa_r+0x802>
 8009e90:	4618      	mov	r0, r3
 8009e92:	301c      	adds	r0, #28
 8009e94:	e772      	b.n	8009d7c <_dtoa_r+0x7f4>
 8009e96:	9b03      	ldr	r3, [sp, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	dc37      	bgt.n	8009f0c <_dtoa_r+0x984>
 8009e9c:	9b06      	ldr	r3, [sp, #24]
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	dd34      	ble.n	8009f0c <_dtoa_r+0x984>
 8009ea2:	9b03      	ldr	r3, [sp, #12]
 8009ea4:	9302      	str	r3, [sp, #8]
 8009ea6:	9b02      	ldr	r3, [sp, #8]
 8009ea8:	b96b      	cbnz	r3, 8009ec6 <_dtoa_r+0x93e>
 8009eaa:	4631      	mov	r1, r6
 8009eac:	2205      	movs	r2, #5
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f000 f9d4 	bl	800a25c <__multadd>
 8009eb4:	4601      	mov	r1, r0
 8009eb6:	4606      	mov	r6, r0
 8009eb8:	ee18 0a10 	vmov	r0, s16
 8009ebc:	f000 fbee 	bl	800a69c <__mcmp>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	f73f adbb 	bgt.w	8009a3c <_dtoa_r+0x4b4>
 8009ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec8:	9d01      	ldr	r5, [sp, #4]
 8009eca:	43db      	mvns	r3, r3
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	f04f 0800 	mov.w	r8, #0
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f000 f99f 	bl	800a218 <_Bfree>
 8009eda:	2f00      	cmp	r7, #0
 8009edc:	f43f aea4 	beq.w	8009c28 <_dtoa_r+0x6a0>
 8009ee0:	f1b8 0f00 	cmp.w	r8, #0
 8009ee4:	d005      	beq.n	8009ef2 <_dtoa_r+0x96a>
 8009ee6:	45b8      	cmp	r8, r7
 8009ee8:	d003      	beq.n	8009ef2 <_dtoa_r+0x96a>
 8009eea:	4641      	mov	r1, r8
 8009eec:	4620      	mov	r0, r4
 8009eee:	f000 f993 	bl	800a218 <_Bfree>
 8009ef2:	4639      	mov	r1, r7
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f000 f98f 	bl	800a218 <_Bfree>
 8009efa:	e695      	b.n	8009c28 <_dtoa_r+0x6a0>
 8009efc:	2600      	movs	r6, #0
 8009efe:	4637      	mov	r7, r6
 8009f00:	e7e1      	b.n	8009ec6 <_dtoa_r+0x93e>
 8009f02:	9700      	str	r7, [sp, #0]
 8009f04:	4637      	mov	r7, r6
 8009f06:	e599      	b.n	8009a3c <_dtoa_r+0x4b4>
 8009f08:	40240000 	.word	0x40240000
 8009f0c:	9b08      	ldr	r3, [sp, #32]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f000 80ca 	beq.w	800a0a8 <_dtoa_r+0xb20>
 8009f14:	9b03      	ldr	r3, [sp, #12]
 8009f16:	9302      	str	r3, [sp, #8]
 8009f18:	2d00      	cmp	r5, #0
 8009f1a:	dd05      	ble.n	8009f28 <_dtoa_r+0x9a0>
 8009f1c:	4639      	mov	r1, r7
 8009f1e:	462a      	mov	r2, r5
 8009f20:	4620      	mov	r0, r4
 8009f22:	f000 fb4b 	bl	800a5bc <__lshift>
 8009f26:	4607      	mov	r7, r0
 8009f28:	f1b8 0f00 	cmp.w	r8, #0
 8009f2c:	d05b      	beq.n	8009fe6 <_dtoa_r+0xa5e>
 8009f2e:	6879      	ldr	r1, [r7, #4]
 8009f30:	4620      	mov	r0, r4
 8009f32:	f000 f931 	bl	800a198 <_Balloc>
 8009f36:	4605      	mov	r5, r0
 8009f38:	b928      	cbnz	r0, 8009f46 <_dtoa_r+0x9be>
 8009f3a:	4b87      	ldr	r3, [pc, #540]	; (800a158 <_dtoa_r+0xbd0>)
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009f42:	f7ff bb3b 	b.w	80095bc <_dtoa_r+0x34>
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	3202      	adds	r2, #2
 8009f4a:	0092      	lsls	r2, r2, #2
 8009f4c:	f107 010c 	add.w	r1, r7, #12
 8009f50:	300c      	adds	r0, #12
 8009f52:	f000 f913 	bl	800a17c <memcpy>
 8009f56:	2201      	movs	r2, #1
 8009f58:	4629      	mov	r1, r5
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 fb2e 	bl	800a5bc <__lshift>
 8009f60:	9b01      	ldr	r3, [sp, #4]
 8009f62:	f103 0901 	add.w	r9, r3, #1
 8009f66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	9305      	str	r3, [sp, #20]
 8009f6e:	f00a 0301 	and.w	r3, sl, #1
 8009f72:	46b8      	mov	r8, r7
 8009f74:	9304      	str	r3, [sp, #16]
 8009f76:	4607      	mov	r7, r0
 8009f78:	4631      	mov	r1, r6
 8009f7a:	ee18 0a10 	vmov	r0, s16
 8009f7e:	f7ff fa77 	bl	8009470 <quorem>
 8009f82:	4641      	mov	r1, r8
 8009f84:	9002      	str	r0, [sp, #8]
 8009f86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009f8a:	ee18 0a10 	vmov	r0, s16
 8009f8e:	f000 fb85 	bl	800a69c <__mcmp>
 8009f92:	463a      	mov	r2, r7
 8009f94:	9003      	str	r0, [sp, #12]
 8009f96:	4631      	mov	r1, r6
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f000 fb9b 	bl	800a6d4 <__mdiff>
 8009f9e:	68c2      	ldr	r2, [r0, #12]
 8009fa0:	f109 3bff 	add.w	fp, r9, #4294967295
 8009fa4:	4605      	mov	r5, r0
 8009fa6:	bb02      	cbnz	r2, 8009fea <_dtoa_r+0xa62>
 8009fa8:	4601      	mov	r1, r0
 8009faa:	ee18 0a10 	vmov	r0, s16
 8009fae:	f000 fb75 	bl	800a69c <__mcmp>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	9207      	str	r2, [sp, #28]
 8009fba:	f000 f92d 	bl	800a218 <_Bfree>
 8009fbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009fc2:	ea43 0102 	orr.w	r1, r3, r2
 8009fc6:	9b04      	ldr	r3, [sp, #16]
 8009fc8:	430b      	orrs	r3, r1
 8009fca:	464d      	mov	r5, r9
 8009fcc:	d10f      	bne.n	8009fee <_dtoa_r+0xa66>
 8009fce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009fd2:	d02a      	beq.n	800a02a <_dtoa_r+0xaa2>
 8009fd4:	9b03      	ldr	r3, [sp, #12]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	dd02      	ble.n	8009fe0 <_dtoa_r+0xa58>
 8009fda:	9b02      	ldr	r3, [sp, #8]
 8009fdc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009fe0:	f88b a000 	strb.w	sl, [fp]
 8009fe4:	e775      	b.n	8009ed2 <_dtoa_r+0x94a>
 8009fe6:	4638      	mov	r0, r7
 8009fe8:	e7ba      	b.n	8009f60 <_dtoa_r+0x9d8>
 8009fea:	2201      	movs	r2, #1
 8009fec:	e7e2      	b.n	8009fb4 <_dtoa_r+0xa2c>
 8009fee:	9b03      	ldr	r3, [sp, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	db04      	blt.n	8009ffe <_dtoa_r+0xa76>
 8009ff4:	9906      	ldr	r1, [sp, #24]
 8009ff6:	430b      	orrs	r3, r1
 8009ff8:	9904      	ldr	r1, [sp, #16]
 8009ffa:	430b      	orrs	r3, r1
 8009ffc:	d122      	bne.n	800a044 <_dtoa_r+0xabc>
 8009ffe:	2a00      	cmp	r2, #0
 800a000:	ddee      	ble.n	8009fe0 <_dtoa_r+0xa58>
 800a002:	ee18 1a10 	vmov	r1, s16
 800a006:	2201      	movs	r2, #1
 800a008:	4620      	mov	r0, r4
 800a00a:	f000 fad7 	bl	800a5bc <__lshift>
 800a00e:	4631      	mov	r1, r6
 800a010:	ee08 0a10 	vmov	s16, r0
 800a014:	f000 fb42 	bl	800a69c <__mcmp>
 800a018:	2800      	cmp	r0, #0
 800a01a:	dc03      	bgt.n	800a024 <_dtoa_r+0xa9c>
 800a01c:	d1e0      	bne.n	8009fe0 <_dtoa_r+0xa58>
 800a01e:	f01a 0f01 	tst.w	sl, #1
 800a022:	d0dd      	beq.n	8009fe0 <_dtoa_r+0xa58>
 800a024:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a028:	d1d7      	bne.n	8009fda <_dtoa_r+0xa52>
 800a02a:	2339      	movs	r3, #57	; 0x39
 800a02c:	f88b 3000 	strb.w	r3, [fp]
 800a030:	462b      	mov	r3, r5
 800a032:	461d      	mov	r5, r3
 800a034:	3b01      	subs	r3, #1
 800a036:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a03a:	2a39      	cmp	r2, #57	; 0x39
 800a03c:	d071      	beq.n	800a122 <_dtoa_r+0xb9a>
 800a03e:	3201      	adds	r2, #1
 800a040:	701a      	strb	r2, [r3, #0]
 800a042:	e746      	b.n	8009ed2 <_dtoa_r+0x94a>
 800a044:	2a00      	cmp	r2, #0
 800a046:	dd07      	ble.n	800a058 <_dtoa_r+0xad0>
 800a048:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a04c:	d0ed      	beq.n	800a02a <_dtoa_r+0xaa2>
 800a04e:	f10a 0301 	add.w	r3, sl, #1
 800a052:	f88b 3000 	strb.w	r3, [fp]
 800a056:	e73c      	b.n	8009ed2 <_dtoa_r+0x94a>
 800a058:	9b05      	ldr	r3, [sp, #20]
 800a05a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a05e:	4599      	cmp	r9, r3
 800a060:	d047      	beq.n	800a0f2 <_dtoa_r+0xb6a>
 800a062:	ee18 1a10 	vmov	r1, s16
 800a066:	2300      	movs	r3, #0
 800a068:	220a      	movs	r2, #10
 800a06a:	4620      	mov	r0, r4
 800a06c:	f000 f8f6 	bl	800a25c <__multadd>
 800a070:	45b8      	cmp	r8, r7
 800a072:	ee08 0a10 	vmov	s16, r0
 800a076:	f04f 0300 	mov.w	r3, #0
 800a07a:	f04f 020a 	mov.w	r2, #10
 800a07e:	4641      	mov	r1, r8
 800a080:	4620      	mov	r0, r4
 800a082:	d106      	bne.n	800a092 <_dtoa_r+0xb0a>
 800a084:	f000 f8ea 	bl	800a25c <__multadd>
 800a088:	4680      	mov	r8, r0
 800a08a:	4607      	mov	r7, r0
 800a08c:	f109 0901 	add.w	r9, r9, #1
 800a090:	e772      	b.n	8009f78 <_dtoa_r+0x9f0>
 800a092:	f000 f8e3 	bl	800a25c <__multadd>
 800a096:	4639      	mov	r1, r7
 800a098:	4680      	mov	r8, r0
 800a09a:	2300      	movs	r3, #0
 800a09c:	220a      	movs	r2, #10
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f000 f8dc 	bl	800a25c <__multadd>
 800a0a4:	4607      	mov	r7, r0
 800a0a6:	e7f1      	b.n	800a08c <_dtoa_r+0xb04>
 800a0a8:	9b03      	ldr	r3, [sp, #12]
 800a0aa:	9302      	str	r3, [sp, #8]
 800a0ac:	9d01      	ldr	r5, [sp, #4]
 800a0ae:	ee18 0a10 	vmov	r0, s16
 800a0b2:	4631      	mov	r1, r6
 800a0b4:	f7ff f9dc 	bl	8009470 <quorem>
 800a0b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a0bc:	9b01      	ldr	r3, [sp, #4]
 800a0be:	f805 ab01 	strb.w	sl, [r5], #1
 800a0c2:	1aea      	subs	r2, r5, r3
 800a0c4:	9b02      	ldr	r3, [sp, #8]
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	dd09      	ble.n	800a0de <_dtoa_r+0xb56>
 800a0ca:	ee18 1a10 	vmov	r1, s16
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	220a      	movs	r2, #10
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f000 f8c2 	bl	800a25c <__multadd>
 800a0d8:	ee08 0a10 	vmov	s16, r0
 800a0dc:	e7e7      	b.n	800a0ae <_dtoa_r+0xb26>
 800a0de:	9b02      	ldr	r3, [sp, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	bfc8      	it	gt
 800a0e4:	461d      	movgt	r5, r3
 800a0e6:	9b01      	ldr	r3, [sp, #4]
 800a0e8:	bfd8      	it	le
 800a0ea:	2501      	movle	r5, #1
 800a0ec:	441d      	add	r5, r3
 800a0ee:	f04f 0800 	mov.w	r8, #0
 800a0f2:	ee18 1a10 	vmov	r1, s16
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	f000 fa5f 	bl	800a5bc <__lshift>
 800a0fe:	4631      	mov	r1, r6
 800a100:	ee08 0a10 	vmov	s16, r0
 800a104:	f000 faca 	bl	800a69c <__mcmp>
 800a108:	2800      	cmp	r0, #0
 800a10a:	dc91      	bgt.n	800a030 <_dtoa_r+0xaa8>
 800a10c:	d102      	bne.n	800a114 <_dtoa_r+0xb8c>
 800a10e:	f01a 0f01 	tst.w	sl, #1
 800a112:	d18d      	bne.n	800a030 <_dtoa_r+0xaa8>
 800a114:	462b      	mov	r3, r5
 800a116:	461d      	mov	r5, r3
 800a118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a11c:	2a30      	cmp	r2, #48	; 0x30
 800a11e:	d0fa      	beq.n	800a116 <_dtoa_r+0xb8e>
 800a120:	e6d7      	b.n	8009ed2 <_dtoa_r+0x94a>
 800a122:	9a01      	ldr	r2, [sp, #4]
 800a124:	429a      	cmp	r2, r3
 800a126:	d184      	bne.n	800a032 <_dtoa_r+0xaaa>
 800a128:	9b00      	ldr	r3, [sp, #0]
 800a12a:	3301      	adds	r3, #1
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	2331      	movs	r3, #49	; 0x31
 800a130:	7013      	strb	r3, [r2, #0]
 800a132:	e6ce      	b.n	8009ed2 <_dtoa_r+0x94a>
 800a134:	4b09      	ldr	r3, [pc, #36]	; (800a15c <_dtoa_r+0xbd4>)
 800a136:	f7ff ba95 	b.w	8009664 <_dtoa_r+0xdc>
 800a13a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f47f aa6e 	bne.w	800961e <_dtoa_r+0x96>
 800a142:	4b07      	ldr	r3, [pc, #28]	; (800a160 <_dtoa_r+0xbd8>)
 800a144:	f7ff ba8e 	b.w	8009664 <_dtoa_r+0xdc>
 800a148:	9b02      	ldr	r3, [sp, #8]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	dcae      	bgt.n	800a0ac <_dtoa_r+0xb24>
 800a14e:	9b06      	ldr	r3, [sp, #24]
 800a150:	2b02      	cmp	r3, #2
 800a152:	f73f aea8 	bgt.w	8009ea6 <_dtoa_r+0x91e>
 800a156:	e7a9      	b.n	800a0ac <_dtoa_r+0xb24>
 800a158:	0800ba6f 	.word	0x0800ba6f
 800a15c:	0800b9cc 	.word	0x0800b9cc
 800a160:	0800b9f0 	.word	0x0800b9f0

0800a164 <_localeconv_r>:
 800a164:	4800      	ldr	r0, [pc, #0]	; (800a168 <_localeconv_r+0x4>)
 800a166:	4770      	bx	lr
 800a168:	20000250 	.word	0x20000250

0800a16c <malloc>:
 800a16c:	4b02      	ldr	r3, [pc, #8]	; (800a178 <malloc+0xc>)
 800a16e:	4601      	mov	r1, r0
 800a170:	6818      	ldr	r0, [r3, #0]
 800a172:	f000 bc17 	b.w	800a9a4 <_malloc_r>
 800a176:	bf00      	nop
 800a178:	200000fc 	.word	0x200000fc

0800a17c <memcpy>:
 800a17c:	440a      	add	r2, r1
 800a17e:	4291      	cmp	r1, r2
 800a180:	f100 33ff 	add.w	r3, r0, #4294967295
 800a184:	d100      	bne.n	800a188 <memcpy+0xc>
 800a186:	4770      	bx	lr
 800a188:	b510      	push	{r4, lr}
 800a18a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a18e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a192:	4291      	cmp	r1, r2
 800a194:	d1f9      	bne.n	800a18a <memcpy+0xe>
 800a196:	bd10      	pop	{r4, pc}

0800a198 <_Balloc>:
 800a198:	b570      	push	{r4, r5, r6, lr}
 800a19a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a19c:	4604      	mov	r4, r0
 800a19e:	460d      	mov	r5, r1
 800a1a0:	b976      	cbnz	r6, 800a1c0 <_Balloc+0x28>
 800a1a2:	2010      	movs	r0, #16
 800a1a4:	f7ff ffe2 	bl	800a16c <malloc>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	6260      	str	r0, [r4, #36]	; 0x24
 800a1ac:	b920      	cbnz	r0, 800a1b8 <_Balloc+0x20>
 800a1ae:	4b18      	ldr	r3, [pc, #96]	; (800a210 <_Balloc+0x78>)
 800a1b0:	4818      	ldr	r0, [pc, #96]	; (800a214 <_Balloc+0x7c>)
 800a1b2:	2166      	movs	r1, #102	; 0x66
 800a1b4:	f000 fdd6 	bl	800ad64 <__assert_func>
 800a1b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1bc:	6006      	str	r6, [r0, #0]
 800a1be:	60c6      	str	r6, [r0, #12]
 800a1c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1c2:	68f3      	ldr	r3, [r6, #12]
 800a1c4:	b183      	cbz	r3, 800a1e8 <_Balloc+0x50>
 800a1c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1ce:	b9b8      	cbnz	r0, 800a200 <_Balloc+0x68>
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	fa01 f605 	lsl.w	r6, r1, r5
 800a1d6:	1d72      	adds	r2, r6, #5
 800a1d8:	0092      	lsls	r2, r2, #2
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f000 fb60 	bl	800a8a0 <_calloc_r>
 800a1e0:	b160      	cbz	r0, 800a1fc <_Balloc+0x64>
 800a1e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1e6:	e00e      	b.n	800a206 <_Balloc+0x6e>
 800a1e8:	2221      	movs	r2, #33	; 0x21
 800a1ea:	2104      	movs	r1, #4
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f000 fb57 	bl	800a8a0 <_calloc_r>
 800a1f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1f4:	60f0      	str	r0, [r6, #12]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1e4      	bne.n	800a1c6 <_Balloc+0x2e>
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	bd70      	pop	{r4, r5, r6, pc}
 800a200:	6802      	ldr	r2, [r0, #0]
 800a202:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a206:	2300      	movs	r3, #0
 800a208:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a20c:	e7f7      	b.n	800a1fe <_Balloc+0x66>
 800a20e:	bf00      	nop
 800a210:	0800b9fd 	.word	0x0800b9fd
 800a214:	0800ba80 	.word	0x0800ba80

0800a218 <_Bfree>:
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a21c:	4605      	mov	r5, r0
 800a21e:	460c      	mov	r4, r1
 800a220:	b976      	cbnz	r6, 800a240 <_Bfree+0x28>
 800a222:	2010      	movs	r0, #16
 800a224:	f7ff ffa2 	bl	800a16c <malloc>
 800a228:	4602      	mov	r2, r0
 800a22a:	6268      	str	r0, [r5, #36]	; 0x24
 800a22c:	b920      	cbnz	r0, 800a238 <_Bfree+0x20>
 800a22e:	4b09      	ldr	r3, [pc, #36]	; (800a254 <_Bfree+0x3c>)
 800a230:	4809      	ldr	r0, [pc, #36]	; (800a258 <_Bfree+0x40>)
 800a232:	218a      	movs	r1, #138	; 0x8a
 800a234:	f000 fd96 	bl	800ad64 <__assert_func>
 800a238:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a23c:	6006      	str	r6, [r0, #0]
 800a23e:	60c6      	str	r6, [r0, #12]
 800a240:	b13c      	cbz	r4, 800a252 <_Bfree+0x3a>
 800a242:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a244:	6862      	ldr	r2, [r4, #4]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a24c:	6021      	str	r1, [r4, #0]
 800a24e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a252:	bd70      	pop	{r4, r5, r6, pc}
 800a254:	0800b9fd 	.word	0x0800b9fd
 800a258:	0800ba80 	.word	0x0800ba80

0800a25c <__multadd>:
 800a25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a260:	690d      	ldr	r5, [r1, #16]
 800a262:	4607      	mov	r7, r0
 800a264:	460c      	mov	r4, r1
 800a266:	461e      	mov	r6, r3
 800a268:	f101 0c14 	add.w	ip, r1, #20
 800a26c:	2000      	movs	r0, #0
 800a26e:	f8dc 3000 	ldr.w	r3, [ip]
 800a272:	b299      	uxth	r1, r3
 800a274:	fb02 6101 	mla	r1, r2, r1, r6
 800a278:	0c1e      	lsrs	r6, r3, #16
 800a27a:	0c0b      	lsrs	r3, r1, #16
 800a27c:	fb02 3306 	mla	r3, r2, r6, r3
 800a280:	b289      	uxth	r1, r1
 800a282:	3001      	adds	r0, #1
 800a284:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a288:	4285      	cmp	r5, r0
 800a28a:	f84c 1b04 	str.w	r1, [ip], #4
 800a28e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a292:	dcec      	bgt.n	800a26e <__multadd+0x12>
 800a294:	b30e      	cbz	r6, 800a2da <__multadd+0x7e>
 800a296:	68a3      	ldr	r3, [r4, #8]
 800a298:	42ab      	cmp	r3, r5
 800a29a:	dc19      	bgt.n	800a2d0 <__multadd+0x74>
 800a29c:	6861      	ldr	r1, [r4, #4]
 800a29e:	4638      	mov	r0, r7
 800a2a0:	3101      	adds	r1, #1
 800a2a2:	f7ff ff79 	bl	800a198 <_Balloc>
 800a2a6:	4680      	mov	r8, r0
 800a2a8:	b928      	cbnz	r0, 800a2b6 <__multadd+0x5a>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	4b0c      	ldr	r3, [pc, #48]	; (800a2e0 <__multadd+0x84>)
 800a2ae:	480d      	ldr	r0, [pc, #52]	; (800a2e4 <__multadd+0x88>)
 800a2b0:	21b5      	movs	r1, #181	; 0xb5
 800a2b2:	f000 fd57 	bl	800ad64 <__assert_func>
 800a2b6:	6922      	ldr	r2, [r4, #16]
 800a2b8:	3202      	adds	r2, #2
 800a2ba:	f104 010c 	add.w	r1, r4, #12
 800a2be:	0092      	lsls	r2, r2, #2
 800a2c0:	300c      	adds	r0, #12
 800a2c2:	f7ff ff5b 	bl	800a17c <memcpy>
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	4638      	mov	r0, r7
 800a2ca:	f7ff ffa5 	bl	800a218 <_Bfree>
 800a2ce:	4644      	mov	r4, r8
 800a2d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2d4:	3501      	adds	r5, #1
 800a2d6:	615e      	str	r6, [r3, #20]
 800a2d8:	6125      	str	r5, [r4, #16]
 800a2da:	4620      	mov	r0, r4
 800a2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e0:	0800ba6f 	.word	0x0800ba6f
 800a2e4:	0800ba80 	.word	0x0800ba80

0800a2e8 <__hi0bits>:
 800a2e8:	0c03      	lsrs	r3, r0, #16
 800a2ea:	041b      	lsls	r3, r3, #16
 800a2ec:	b9d3      	cbnz	r3, 800a324 <__hi0bits+0x3c>
 800a2ee:	0400      	lsls	r0, r0, #16
 800a2f0:	2310      	movs	r3, #16
 800a2f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a2f6:	bf04      	itt	eq
 800a2f8:	0200      	lsleq	r0, r0, #8
 800a2fa:	3308      	addeq	r3, #8
 800a2fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a300:	bf04      	itt	eq
 800a302:	0100      	lsleq	r0, r0, #4
 800a304:	3304      	addeq	r3, #4
 800a306:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a30a:	bf04      	itt	eq
 800a30c:	0080      	lsleq	r0, r0, #2
 800a30e:	3302      	addeq	r3, #2
 800a310:	2800      	cmp	r0, #0
 800a312:	db05      	blt.n	800a320 <__hi0bits+0x38>
 800a314:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a318:	f103 0301 	add.w	r3, r3, #1
 800a31c:	bf08      	it	eq
 800a31e:	2320      	moveq	r3, #32
 800a320:	4618      	mov	r0, r3
 800a322:	4770      	bx	lr
 800a324:	2300      	movs	r3, #0
 800a326:	e7e4      	b.n	800a2f2 <__hi0bits+0xa>

0800a328 <__lo0bits>:
 800a328:	6803      	ldr	r3, [r0, #0]
 800a32a:	f013 0207 	ands.w	r2, r3, #7
 800a32e:	4601      	mov	r1, r0
 800a330:	d00b      	beq.n	800a34a <__lo0bits+0x22>
 800a332:	07da      	lsls	r2, r3, #31
 800a334:	d423      	bmi.n	800a37e <__lo0bits+0x56>
 800a336:	0798      	lsls	r0, r3, #30
 800a338:	bf49      	itett	mi
 800a33a:	085b      	lsrmi	r3, r3, #1
 800a33c:	089b      	lsrpl	r3, r3, #2
 800a33e:	2001      	movmi	r0, #1
 800a340:	600b      	strmi	r3, [r1, #0]
 800a342:	bf5c      	itt	pl
 800a344:	600b      	strpl	r3, [r1, #0]
 800a346:	2002      	movpl	r0, #2
 800a348:	4770      	bx	lr
 800a34a:	b298      	uxth	r0, r3
 800a34c:	b9a8      	cbnz	r0, 800a37a <__lo0bits+0x52>
 800a34e:	0c1b      	lsrs	r3, r3, #16
 800a350:	2010      	movs	r0, #16
 800a352:	b2da      	uxtb	r2, r3
 800a354:	b90a      	cbnz	r2, 800a35a <__lo0bits+0x32>
 800a356:	3008      	adds	r0, #8
 800a358:	0a1b      	lsrs	r3, r3, #8
 800a35a:	071a      	lsls	r2, r3, #28
 800a35c:	bf04      	itt	eq
 800a35e:	091b      	lsreq	r3, r3, #4
 800a360:	3004      	addeq	r0, #4
 800a362:	079a      	lsls	r2, r3, #30
 800a364:	bf04      	itt	eq
 800a366:	089b      	lsreq	r3, r3, #2
 800a368:	3002      	addeq	r0, #2
 800a36a:	07da      	lsls	r2, r3, #31
 800a36c:	d403      	bmi.n	800a376 <__lo0bits+0x4e>
 800a36e:	085b      	lsrs	r3, r3, #1
 800a370:	f100 0001 	add.w	r0, r0, #1
 800a374:	d005      	beq.n	800a382 <__lo0bits+0x5a>
 800a376:	600b      	str	r3, [r1, #0]
 800a378:	4770      	bx	lr
 800a37a:	4610      	mov	r0, r2
 800a37c:	e7e9      	b.n	800a352 <__lo0bits+0x2a>
 800a37e:	2000      	movs	r0, #0
 800a380:	4770      	bx	lr
 800a382:	2020      	movs	r0, #32
 800a384:	4770      	bx	lr
	...

0800a388 <__i2b>:
 800a388:	b510      	push	{r4, lr}
 800a38a:	460c      	mov	r4, r1
 800a38c:	2101      	movs	r1, #1
 800a38e:	f7ff ff03 	bl	800a198 <_Balloc>
 800a392:	4602      	mov	r2, r0
 800a394:	b928      	cbnz	r0, 800a3a2 <__i2b+0x1a>
 800a396:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <__i2b+0x24>)
 800a398:	4805      	ldr	r0, [pc, #20]	; (800a3b0 <__i2b+0x28>)
 800a39a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a39e:	f000 fce1 	bl	800ad64 <__assert_func>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	6144      	str	r4, [r0, #20]
 800a3a6:	6103      	str	r3, [r0, #16]
 800a3a8:	bd10      	pop	{r4, pc}
 800a3aa:	bf00      	nop
 800a3ac:	0800ba6f 	.word	0x0800ba6f
 800a3b0:	0800ba80 	.word	0x0800ba80

0800a3b4 <__multiply>:
 800a3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b8:	4691      	mov	r9, r2
 800a3ba:	690a      	ldr	r2, [r1, #16]
 800a3bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	bfb8      	it	lt
 800a3c4:	460b      	movlt	r3, r1
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	bfbc      	itt	lt
 800a3ca:	464c      	movlt	r4, r9
 800a3cc:	4699      	movlt	r9, r3
 800a3ce:	6927      	ldr	r7, [r4, #16]
 800a3d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3d4:	68a3      	ldr	r3, [r4, #8]
 800a3d6:	6861      	ldr	r1, [r4, #4]
 800a3d8:	eb07 060a 	add.w	r6, r7, sl
 800a3dc:	42b3      	cmp	r3, r6
 800a3de:	b085      	sub	sp, #20
 800a3e0:	bfb8      	it	lt
 800a3e2:	3101      	addlt	r1, #1
 800a3e4:	f7ff fed8 	bl	800a198 <_Balloc>
 800a3e8:	b930      	cbnz	r0, 800a3f8 <__multiply+0x44>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	4b44      	ldr	r3, [pc, #272]	; (800a500 <__multiply+0x14c>)
 800a3ee:	4845      	ldr	r0, [pc, #276]	; (800a504 <__multiply+0x150>)
 800a3f0:	f240 115d 	movw	r1, #349	; 0x15d
 800a3f4:	f000 fcb6 	bl	800ad64 <__assert_func>
 800a3f8:	f100 0514 	add.w	r5, r0, #20
 800a3fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a400:	462b      	mov	r3, r5
 800a402:	2200      	movs	r2, #0
 800a404:	4543      	cmp	r3, r8
 800a406:	d321      	bcc.n	800a44c <__multiply+0x98>
 800a408:	f104 0314 	add.w	r3, r4, #20
 800a40c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a410:	f109 0314 	add.w	r3, r9, #20
 800a414:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a418:	9202      	str	r2, [sp, #8]
 800a41a:	1b3a      	subs	r2, r7, r4
 800a41c:	3a15      	subs	r2, #21
 800a41e:	f022 0203 	bic.w	r2, r2, #3
 800a422:	3204      	adds	r2, #4
 800a424:	f104 0115 	add.w	r1, r4, #21
 800a428:	428f      	cmp	r7, r1
 800a42a:	bf38      	it	cc
 800a42c:	2204      	movcc	r2, #4
 800a42e:	9201      	str	r2, [sp, #4]
 800a430:	9a02      	ldr	r2, [sp, #8]
 800a432:	9303      	str	r3, [sp, #12]
 800a434:	429a      	cmp	r2, r3
 800a436:	d80c      	bhi.n	800a452 <__multiply+0x9e>
 800a438:	2e00      	cmp	r6, #0
 800a43a:	dd03      	ble.n	800a444 <__multiply+0x90>
 800a43c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a440:	2b00      	cmp	r3, #0
 800a442:	d05a      	beq.n	800a4fa <__multiply+0x146>
 800a444:	6106      	str	r6, [r0, #16]
 800a446:	b005      	add	sp, #20
 800a448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44c:	f843 2b04 	str.w	r2, [r3], #4
 800a450:	e7d8      	b.n	800a404 <__multiply+0x50>
 800a452:	f8b3 a000 	ldrh.w	sl, [r3]
 800a456:	f1ba 0f00 	cmp.w	sl, #0
 800a45a:	d024      	beq.n	800a4a6 <__multiply+0xf2>
 800a45c:	f104 0e14 	add.w	lr, r4, #20
 800a460:	46a9      	mov	r9, r5
 800a462:	f04f 0c00 	mov.w	ip, #0
 800a466:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a46a:	f8d9 1000 	ldr.w	r1, [r9]
 800a46e:	fa1f fb82 	uxth.w	fp, r2
 800a472:	b289      	uxth	r1, r1
 800a474:	fb0a 110b 	mla	r1, sl, fp, r1
 800a478:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a47c:	f8d9 2000 	ldr.w	r2, [r9]
 800a480:	4461      	add	r1, ip
 800a482:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a486:	fb0a c20b 	mla	r2, sl, fp, ip
 800a48a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a48e:	b289      	uxth	r1, r1
 800a490:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a494:	4577      	cmp	r7, lr
 800a496:	f849 1b04 	str.w	r1, [r9], #4
 800a49a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a49e:	d8e2      	bhi.n	800a466 <__multiply+0xb2>
 800a4a0:	9a01      	ldr	r2, [sp, #4]
 800a4a2:	f845 c002 	str.w	ip, [r5, r2]
 800a4a6:	9a03      	ldr	r2, [sp, #12]
 800a4a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a4ac:	3304      	adds	r3, #4
 800a4ae:	f1b9 0f00 	cmp.w	r9, #0
 800a4b2:	d020      	beq.n	800a4f6 <__multiply+0x142>
 800a4b4:	6829      	ldr	r1, [r5, #0]
 800a4b6:	f104 0c14 	add.w	ip, r4, #20
 800a4ba:	46ae      	mov	lr, r5
 800a4bc:	f04f 0a00 	mov.w	sl, #0
 800a4c0:	f8bc b000 	ldrh.w	fp, [ip]
 800a4c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a4c8:	fb09 220b 	mla	r2, r9, fp, r2
 800a4cc:	4492      	add	sl, r2
 800a4ce:	b289      	uxth	r1, r1
 800a4d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a4d4:	f84e 1b04 	str.w	r1, [lr], #4
 800a4d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a4dc:	f8be 1000 	ldrh.w	r1, [lr]
 800a4e0:	0c12      	lsrs	r2, r2, #16
 800a4e2:	fb09 1102 	mla	r1, r9, r2, r1
 800a4e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a4ea:	4567      	cmp	r7, ip
 800a4ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a4f0:	d8e6      	bhi.n	800a4c0 <__multiply+0x10c>
 800a4f2:	9a01      	ldr	r2, [sp, #4]
 800a4f4:	50a9      	str	r1, [r5, r2]
 800a4f6:	3504      	adds	r5, #4
 800a4f8:	e79a      	b.n	800a430 <__multiply+0x7c>
 800a4fa:	3e01      	subs	r6, #1
 800a4fc:	e79c      	b.n	800a438 <__multiply+0x84>
 800a4fe:	bf00      	nop
 800a500:	0800ba6f 	.word	0x0800ba6f
 800a504:	0800ba80 	.word	0x0800ba80

0800a508 <__pow5mult>:
 800a508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a50c:	4615      	mov	r5, r2
 800a50e:	f012 0203 	ands.w	r2, r2, #3
 800a512:	4606      	mov	r6, r0
 800a514:	460f      	mov	r7, r1
 800a516:	d007      	beq.n	800a528 <__pow5mult+0x20>
 800a518:	4c25      	ldr	r4, [pc, #148]	; (800a5b0 <__pow5mult+0xa8>)
 800a51a:	3a01      	subs	r2, #1
 800a51c:	2300      	movs	r3, #0
 800a51e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a522:	f7ff fe9b 	bl	800a25c <__multadd>
 800a526:	4607      	mov	r7, r0
 800a528:	10ad      	asrs	r5, r5, #2
 800a52a:	d03d      	beq.n	800a5a8 <__pow5mult+0xa0>
 800a52c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a52e:	b97c      	cbnz	r4, 800a550 <__pow5mult+0x48>
 800a530:	2010      	movs	r0, #16
 800a532:	f7ff fe1b 	bl	800a16c <malloc>
 800a536:	4602      	mov	r2, r0
 800a538:	6270      	str	r0, [r6, #36]	; 0x24
 800a53a:	b928      	cbnz	r0, 800a548 <__pow5mult+0x40>
 800a53c:	4b1d      	ldr	r3, [pc, #116]	; (800a5b4 <__pow5mult+0xac>)
 800a53e:	481e      	ldr	r0, [pc, #120]	; (800a5b8 <__pow5mult+0xb0>)
 800a540:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a544:	f000 fc0e 	bl	800ad64 <__assert_func>
 800a548:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a54c:	6004      	str	r4, [r0, #0]
 800a54e:	60c4      	str	r4, [r0, #12]
 800a550:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a554:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a558:	b94c      	cbnz	r4, 800a56e <__pow5mult+0x66>
 800a55a:	f240 2171 	movw	r1, #625	; 0x271
 800a55e:	4630      	mov	r0, r6
 800a560:	f7ff ff12 	bl	800a388 <__i2b>
 800a564:	2300      	movs	r3, #0
 800a566:	f8c8 0008 	str.w	r0, [r8, #8]
 800a56a:	4604      	mov	r4, r0
 800a56c:	6003      	str	r3, [r0, #0]
 800a56e:	f04f 0900 	mov.w	r9, #0
 800a572:	07eb      	lsls	r3, r5, #31
 800a574:	d50a      	bpl.n	800a58c <__pow5mult+0x84>
 800a576:	4639      	mov	r1, r7
 800a578:	4622      	mov	r2, r4
 800a57a:	4630      	mov	r0, r6
 800a57c:	f7ff ff1a 	bl	800a3b4 <__multiply>
 800a580:	4639      	mov	r1, r7
 800a582:	4680      	mov	r8, r0
 800a584:	4630      	mov	r0, r6
 800a586:	f7ff fe47 	bl	800a218 <_Bfree>
 800a58a:	4647      	mov	r7, r8
 800a58c:	106d      	asrs	r5, r5, #1
 800a58e:	d00b      	beq.n	800a5a8 <__pow5mult+0xa0>
 800a590:	6820      	ldr	r0, [r4, #0]
 800a592:	b938      	cbnz	r0, 800a5a4 <__pow5mult+0x9c>
 800a594:	4622      	mov	r2, r4
 800a596:	4621      	mov	r1, r4
 800a598:	4630      	mov	r0, r6
 800a59a:	f7ff ff0b 	bl	800a3b4 <__multiply>
 800a59e:	6020      	str	r0, [r4, #0]
 800a5a0:	f8c0 9000 	str.w	r9, [r0]
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	e7e4      	b.n	800a572 <__pow5mult+0x6a>
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ae:	bf00      	nop
 800a5b0:	0800bbd0 	.word	0x0800bbd0
 800a5b4:	0800b9fd 	.word	0x0800b9fd
 800a5b8:	0800ba80 	.word	0x0800ba80

0800a5bc <__lshift>:
 800a5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	6849      	ldr	r1, [r1, #4]
 800a5c4:	6923      	ldr	r3, [r4, #16]
 800a5c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5ca:	68a3      	ldr	r3, [r4, #8]
 800a5cc:	4607      	mov	r7, r0
 800a5ce:	4691      	mov	r9, r2
 800a5d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5d4:	f108 0601 	add.w	r6, r8, #1
 800a5d8:	42b3      	cmp	r3, r6
 800a5da:	db0b      	blt.n	800a5f4 <__lshift+0x38>
 800a5dc:	4638      	mov	r0, r7
 800a5de:	f7ff fddb 	bl	800a198 <_Balloc>
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	b948      	cbnz	r0, 800a5fa <__lshift+0x3e>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	4b2a      	ldr	r3, [pc, #168]	; (800a694 <__lshift+0xd8>)
 800a5ea:	482b      	ldr	r0, [pc, #172]	; (800a698 <__lshift+0xdc>)
 800a5ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a5f0:	f000 fbb8 	bl	800ad64 <__assert_func>
 800a5f4:	3101      	adds	r1, #1
 800a5f6:	005b      	lsls	r3, r3, #1
 800a5f8:	e7ee      	b.n	800a5d8 <__lshift+0x1c>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	f100 0114 	add.w	r1, r0, #20
 800a600:	f100 0210 	add.w	r2, r0, #16
 800a604:	4618      	mov	r0, r3
 800a606:	4553      	cmp	r3, sl
 800a608:	db37      	blt.n	800a67a <__lshift+0xbe>
 800a60a:	6920      	ldr	r0, [r4, #16]
 800a60c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a610:	f104 0314 	add.w	r3, r4, #20
 800a614:	f019 091f 	ands.w	r9, r9, #31
 800a618:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a61c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a620:	d02f      	beq.n	800a682 <__lshift+0xc6>
 800a622:	f1c9 0e20 	rsb	lr, r9, #32
 800a626:	468a      	mov	sl, r1
 800a628:	f04f 0c00 	mov.w	ip, #0
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	fa02 f209 	lsl.w	r2, r2, r9
 800a632:	ea42 020c 	orr.w	r2, r2, ip
 800a636:	f84a 2b04 	str.w	r2, [sl], #4
 800a63a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a63e:	4298      	cmp	r0, r3
 800a640:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a644:	d8f2      	bhi.n	800a62c <__lshift+0x70>
 800a646:	1b03      	subs	r3, r0, r4
 800a648:	3b15      	subs	r3, #21
 800a64a:	f023 0303 	bic.w	r3, r3, #3
 800a64e:	3304      	adds	r3, #4
 800a650:	f104 0215 	add.w	r2, r4, #21
 800a654:	4290      	cmp	r0, r2
 800a656:	bf38      	it	cc
 800a658:	2304      	movcc	r3, #4
 800a65a:	f841 c003 	str.w	ip, [r1, r3]
 800a65e:	f1bc 0f00 	cmp.w	ip, #0
 800a662:	d001      	beq.n	800a668 <__lshift+0xac>
 800a664:	f108 0602 	add.w	r6, r8, #2
 800a668:	3e01      	subs	r6, #1
 800a66a:	4638      	mov	r0, r7
 800a66c:	612e      	str	r6, [r5, #16]
 800a66e:	4621      	mov	r1, r4
 800a670:	f7ff fdd2 	bl	800a218 <_Bfree>
 800a674:	4628      	mov	r0, r5
 800a676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a67a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a67e:	3301      	adds	r3, #1
 800a680:	e7c1      	b.n	800a606 <__lshift+0x4a>
 800a682:	3904      	subs	r1, #4
 800a684:	f853 2b04 	ldr.w	r2, [r3], #4
 800a688:	f841 2f04 	str.w	r2, [r1, #4]!
 800a68c:	4298      	cmp	r0, r3
 800a68e:	d8f9      	bhi.n	800a684 <__lshift+0xc8>
 800a690:	e7ea      	b.n	800a668 <__lshift+0xac>
 800a692:	bf00      	nop
 800a694:	0800ba6f 	.word	0x0800ba6f
 800a698:	0800ba80 	.word	0x0800ba80

0800a69c <__mcmp>:
 800a69c:	b530      	push	{r4, r5, lr}
 800a69e:	6902      	ldr	r2, [r0, #16]
 800a6a0:	690c      	ldr	r4, [r1, #16]
 800a6a2:	1b12      	subs	r2, r2, r4
 800a6a4:	d10e      	bne.n	800a6c4 <__mcmp+0x28>
 800a6a6:	f100 0314 	add.w	r3, r0, #20
 800a6aa:	3114      	adds	r1, #20
 800a6ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a6b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a6b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a6bc:	42a5      	cmp	r5, r4
 800a6be:	d003      	beq.n	800a6c8 <__mcmp+0x2c>
 800a6c0:	d305      	bcc.n	800a6ce <__mcmp+0x32>
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	4610      	mov	r0, r2
 800a6c6:	bd30      	pop	{r4, r5, pc}
 800a6c8:	4283      	cmp	r3, r0
 800a6ca:	d3f3      	bcc.n	800a6b4 <__mcmp+0x18>
 800a6cc:	e7fa      	b.n	800a6c4 <__mcmp+0x28>
 800a6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d2:	e7f7      	b.n	800a6c4 <__mcmp+0x28>

0800a6d4 <__mdiff>:
 800a6d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d8:	460c      	mov	r4, r1
 800a6da:	4606      	mov	r6, r0
 800a6dc:	4611      	mov	r1, r2
 800a6de:	4620      	mov	r0, r4
 800a6e0:	4690      	mov	r8, r2
 800a6e2:	f7ff ffdb 	bl	800a69c <__mcmp>
 800a6e6:	1e05      	subs	r5, r0, #0
 800a6e8:	d110      	bne.n	800a70c <__mdiff+0x38>
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f7ff fd53 	bl	800a198 <_Balloc>
 800a6f2:	b930      	cbnz	r0, 800a702 <__mdiff+0x2e>
 800a6f4:	4b3a      	ldr	r3, [pc, #232]	; (800a7e0 <__mdiff+0x10c>)
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	f240 2132 	movw	r1, #562	; 0x232
 800a6fc:	4839      	ldr	r0, [pc, #228]	; (800a7e4 <__mdiff+0x110>)
 800a6fe:	f000 fb31 	bl	800ad64 <__assert_func>
 800a702:	2301      	movs	r3, #1
 800a704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a70c:	bfa4      	itt	ge
 800a70e:	4643      	movge	r3, r8
 800a710:	46a0      	movge	r8, r4
 800a712:	4630      	mov	r0, r6
 800a714:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a718:	bfa6      	itte	ge
 800a71a:	461c      	movge	r4, r3
 800a71c:	2500      	movge	r5, #0
 800a71e:	2501      	movlt	r5, #1
 800a720:	f7ff fd3a 	bl	800a198 <_Balloc>
 800a724:	b920      	cbnz	r0, 800a730 <__mdiff+0x5c>
 800a726:	4b2e      	ldr	r3, [pc, #184]	; (800a7e0 <__mdiff+0x10c>)
 800a728:	4602      	mov	r2, r0
 800a72a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a72e:	e7e5      	b.n	800a6fc <__mdiff+0x28>
 800a730:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a734:	6926      	ldr	r6, [r4, #16]
 800a736:	60c5      	str	r5, [r0, #12]
 800a738:	f104 0914 	add.w	r9, r4, #20
 800a73c:	f108 0514 	add.w	r5, r8, #20
 800a740:	f100 0e14 	add.w	lr, r0, #20
 800a744:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a748:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a74c:	f108 0210 	add.w	r2, r8, #16
 800a750:	46f2      	mov	sl, lr
 800a752:	2100      	movs	r1, #0
 800a754:	f859 3b04 	ldr.w	r3, [r9], #4
 800a758:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a75c:	fa1f f883 	uxth.w	r8, r3
 800a760:	fa11 f18b 	uxtah	r1, r1, fp
 800a764:	0c1b      	lsrs	r3, r3, #16
 800a766:	eba1 0808 	sub.w	r8, r1, r8
 800a76a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a76e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a772:	fa1f f888 	uxth.w	r8, r8
 800a776:	1419      	asrs	r1, r3, #16
 800a778:	454e      	cmp	r6, r9
 800a77a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a77e:	f84a 3b04 	str.w	r3, [sl], #4
 800a782:	d8e7      	bhi.n	800a754 <__mdiff+0x80>
 800a784:	1b33      	subs	r3, r6, r4
 800a786:	3b15      	subs	r3, #21
 800a788:	f023 0303 	bic.w	r3, r3, #3
 800a78c:	3304      	adds	r3, #4
 800a78e:	3415      	adds	r4, #21
 800a790:	42a6      	cmp	r6, r4
 800a792:	bf38      	it	cc
 800a794:	2304      	movcc	r3, #4
 800a796:	441d      	add	r5, r3
 800a798:	4473      	add	r3, lr
 800a79a:	469e      	mov	lr, r3
 800a79c:	462e      	mov	r6, r5
 800a79e:	4566      	cmp	r6, ip
 800a7a0:	d30e      	bcc.n	800a7c0 <__mdiff+0xec>
 800a7a2:	f10c 0203 	add.w	r2, ip, #3
 800a7a6:	1b52      	subs	r2, r2, r5
 800a7a8:	f022 0203 	bic.w	r2, r2, #3
 800a7ac:	3d03      	subs	r5, #3
 800a7ae:	45ac      	cmp	ip, r5
 800a7b0:	bf38      	it	cc
 800a7b2:	2200      	movcc	r2, #0
 800a7b4:	441a      	add	r2, r3
 800a7b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a7ba:	b17b      	cbz	r3, 800a7dc <__mdiff+0x108>
 800a7bc:	6107      	str	r7, [r0, #16]
 800a7be:	e7a3      	b.n	800a708 <__mdiff+0x34>
 800a7c0:	f856 8b04 	ldr.w	r8, [r6], #4
 800a7c4:	fa11 f288 	uxtah	r2, r1, r8
 800a7c8:	1414      	asrs	r4, r2, #16
 800a7ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a7ce:	b292      	uxth	r2, r2
 800a7d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a7d4:	f84e 2b04 	str.w	r2, [lr], #4
 800a7d8:	1421      	asrs	r1, r4, #16
 800a7da:	e7e0      	b.n	800a79e <__mdiff+0xca>
 800a7dc:	3f01      	subs	r7, #1
 800a7de:	e7ea      	b.n	800a7b6 <__mdiff+0xe2>
 800a7e0:	0800ba6f 	.word	0x0800ba6f
 800a7e4:	0800ba80 	.word	0x0800ba80

0800a7e8 <__d2b>:
 800a7e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7ec:	4689      	mov	r9, r1
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	ec57 6b10 	vmov	r6, r7, d0
 800a7f4:	4690      	mov	r8, r2
 800a7f6:	f7ff fccf 	bl	800a198 <_Balloc>
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	b930      	cbnz	r0, 800a80c <__d2b+0x24>
 800a7fe:	4602      	mov	r2, r0
 800a800:	4b25      	ldr	r3, [pc, #148]	; (800a898 <__d2b+0xb0>)
 800a802:	4826      	ldr	r0, [pc, #152]	; (800a89c <__d2b+0xb4>)
 800a804:	f240 310a 	movw	r1, #778	; 0x30a
 800a808:	f000 faac 	bl	800ad64 <__assert_func>
 800a80c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a810:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a814:	bb35      	cbnz	r5, 800a864 <__d2b+0x7c>
 800a816:	2e00      	cmp	r6, #0
 800a818:	9301      	str	r3, [sp, #4]
 800a81a:	d028      	beq.n	800a86e <__d2b+0x86>
 800a81c:	4668      	mov	r0, sp
 800a81e:	9600      	str	r6, [sp, #0]
 800a820:	f7ff fd82 	bl	800a328 <__lo0bits>
 800a824:	9900      	ldr	r1, [sp, #0]
 800a826:	b300      	cbz	r0, 800a86a <__d2b+0x82>
 800a828:	9a01      	ldr	r2, [sp, #4]
 800a82a:	f1c0 0320 	rsb	r3, r0, #32
 800a82e:	fa02 f303 	lsl.w	r3, r2, r3
 800a832:	430b      	orrs	r3, r1
 800a834:	40c2      	lsrs	r2, r0
 800a836:	6163      	str	r3, [r4, #20]
 800a838:	9201      	str	r2, [sp, #4]
 800a83a:	9b01      	ldr	r3, [sp, #4]
 800a83c:	61a3      	str	r3, [r4, #24]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	bf14      	ite	ne
 800a842:	2202      	movne	r2, #2
 800a844:	2201      	moveq	r2, #1
 800a846:	6122      	str	r2, [r4, #16]
 800a848:	b1d5      	cbz	r5, 800a880 <__d2b+0x98>
 800a84a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a84e:	4405      	add	r5, r0
 800a850:	f8c9 5000 	str.w	r5, [r9]
 800a854:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a858:	f8c8 0000 	str.w	r0, [r8]
 800a85c:	4620      	mov	r0, r4
 800a85e:	b003      	add	sp, #12
 800a860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a868:	e7d5      	b.n	800a816 <__d2b+0x2e>
 800a86a:	6161      	str	r1, [r4, #20]
 800a86c:	e7e5      	b.n	800a83a <__d2b+0x52>
 800a86e:	a801      	add	r0, sp, #4
 800a870:	f7ff fd5a 	bl	800a328 <__lo0bits>
 800a874:	9b01      	ldr	r3, [sp, #4]
 800a876:	6163      	str	r3, [r4, #20]
 800a878:	2201      	movs	r2, #1
 800a87a:	6122      	str	r2, [r4, #16]
 800a87c:	3020      	adds	r0, #32
 800a87e:	e7e3      	b.n	800a848 <__d2b+0x60>
 800a880:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a884:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a888:	f8c9 0000 	str.w	r0, [r9]
 800a88c:	6918      	ldr	r0, [r3, #16]
 800a88e:	f7ff fd2b 	bl	800a2e8 <__hi0bits>
 800a892:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a896:	e7df      	b.n	800a858 <__d2b+0x70>
 800a898:	0800ba6f 	.word	0x0800ba6f
 800a89c:	0800ba80 	.word	0x0800ba80

0800a8a0 <_calloc_r>:
 800a8a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8a2:	fba1 2402 	umull	r2, r4, r1, r2
 800a8a6:	b94c      	cbnz	r4, 800a8bc <_calloc_r+0x1c>
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	9201      	str	r2, [sp, #4]
 800a8ac:	f000 f87a 	bl	800a9a4 <_malloc_r>
 800a8b0:	9a01      	ldr	r2, [sp, #4]
 800a8b2:	4605      	mov	r5, r0
 800a8b4:	b930      	cbnz	r0, 800a8c4 <_calloc_r+0x24>
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	b003      	add	sp, #12
 800a8ba:	bd30      	pop	{r4, r5, pc}
 800a8bc:	220c      	movs	r2, #12
 800a8be:	6002      	str	r2, [r0, #0]
 800a8c0:	2500      	movs	r5, #0
 800a8c2:	e7f8      	b.n	800a8b6 <_calloc_r+0x16>
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	f7fe f941 	bl	8008b4c <memset>
 800a8ca:	e7f4      	b.n	800a8b6 <_calloc_r+0x16>

0800a8cc <_free_r>:
 800a8cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8ce:	2900      	cmp	r1, #0
 800a8d0:	d044      	beq.n	800a95c <_free_r+0x90>
 800a8d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8d6:	9001      	str	r0, [sp, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f1a1 0404 	sub.w	r4, r1, #4
 800a8de:	bfb8      	it	lt
 800a8e0:	18e4      	addlt	r4, r4, r3
 800a8e2:	f000 fa9b 	bl	800ae1c <__malloc_lock>
 800a8e6:	4a1e      	ldr	r2, [pc, #120]	; (800a960 <_free_r+0x94>)
 800a8e8:	9801      	ldr	r0, [sp, #4]
 800a8ea:	6813      	ldr	r3, [r2, #0]
 800a8ec:	b933      	cbnz	r3, 800a8fc <_free_r+0x30>
 800a8ee:	6063      	str	r3, [r4, #4]
 800a8f0:	6014      	str	r4, [r2, #0]
 800a8f2:	b003      	add	sp, #12
 800a8f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8f8:	f000 ba96 	b.w	800ae28 <__malloc_unlock>
 800a8fc:	42a3      	cmp	r3, r4
 800a8fe:	d908      	bls.n	800a912 <_free_r+0x46>
 800a900:	6825      	ldr	r5, [r4, #0]
 800a902:	1961      	adds	r1, r4, r5
 800a904:	428b      	cmp	r3, r1
 800a906:	bf01      	itttt	eq
 800a908:	6819      	ldreq	r1, [r3, #0]
 800a90a:	685b      	ldreq	r3, [r3, #4]
 800a90c:	1949      	addeq	r1, r1, r5
 800a90e:	6021      	streq	r1, [r4, #0]
 800a910:	e7ed      	b.n	800a8ee <_free_r+0x22>
 800a912:	461a      	mov	r2, r3
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	b10b      	cbz	r3, 800a91c <_free_r+0x50>
 800a918:	42a3      	cmp	r3, r4
 800a91a:	d9fa      	bls.n	800a912 <_free_r+0x46>
 800a91c:	6811      	ldr	r1, [r2, #0]
 800a91e:	1855      	adds	r5, r2, r1
 800a920:	42a5      	cmp	r5, r4
 800a922:	d10b      	bne.n	800a93c <_free_r+0x70>
 800a924:	6824      	ldr	r4, [r4, #0]
 800a926:	4421      	add	r1, r4
 800a928:	1854      	adds	r4, r2, r1
 800a92a:	42a3      	cmp	r3, r4
 800a92c:	6011      	str	r1, [r2, #0]
 800a92e:	d1e0      	bne.n	800a8f2 <_free_r+0x26>
 800a930:	681c      	ldr	r4, [r3, #0]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	6053      	str	r3, [r2, #4]
 800a936:	4421      	add	r1, r4
 800a938:	6011      	str	r1, [r2, #0]
 800a93a:	e7da      	b.n	800a8f2 <_free_r+0x26>
 800a93c:	d902      	bls.n	800a944 <_free_r+0x78>
 800a93e:	230c      	movs	r3, #12
 800a940:	6003      	str	r3, [r0, #0]
 800a942:	e7d6      	b.n	800a8f2 <_free_r+0x26>
 800a944:	6825      	ldr	r5, [r4, #0]
 800a946:	1961      	adds	r1, r4, r5
 800a948:	428b      	cmp	r3, r1
 800a94a:	bf04      	itt	eq
 800a94c:	6819      	ldreq	r1, [r3, #0]
 800a94e:	685b      	ldreq	r3, [r3, #4]
 800a950:	6063      	str	r3, [r4, #4]
 800a952:	bf04      	itt	eq
 800a954:	1949      	addeq	r1, r1, r5
 800a956:	6021      	streq	r1, [r4, #0]
 800a958:	6054      	str	r4, [r2, #4]
 800a95a:	e7ca      	b.n	800a8f2 <_free_r+0x26>
 800a95c:	b003      	add	sp, #12
 800a95e:	bd30      	pop	{r4, r5, pc}
 800a960:	20002030 	.word	0x20002030

0800a964 <sbrk_aligned>:
 800a964:	b570      	push	{r4, r5, r6, lr}
 800a966:	4e0e      	ldr	r6, [pc, #56]	; (800a9a0 <sbrk_aligned+0x3c>)
 800a968:	460c      	mov	r4, r1
 800a96a:	6831      	ldr	r1, [r6, #0]
 800a96c:	4605      	mov	r5, r0
 800a96e:	b911      	cbnz	r1, 800a976 <sbrk_aligned+0x12>
 800a970:	f000 f9e8 	bl	800ad44 <_sbrk_r>
 800a974:	6030      	str	r0, [r6, #0]
 800a976:	4621      	mov	r1, r4
 800a978:	4628      	mov	r0, r5
 800a97a:	f000 f9e3 	bl	800ad44 <_sbrk_r>
 800a97e:	1c43      	adds	r3, r0, #1
 800a980:	d00a      	beq.n	800a998 <sbrk_aligned+0x34>
 800a982:	1cc4      	adds	r4, r0, #3
 800a984:	f024 0403 	bic.w	r4, r4, #3
 800a988:	42a0      	cmp	r0, r4
 800a98a:	d007      	beq.n	800a99c <sbrk_aligned+0x38>
 800a98c:	1a21      	subs	r1, r4, r0
 800a98e:	4628      	mov	r0, r5
 800a990:	f000 f9d8 	bl	800ad44 <_sbrk_r>
 800a994:	3001      	adds	r0, #1
 800a996:	d101      	bne.n	800a99c <sbrk_aligned+0x38>
 800a998:	f04f 34ff 	mov.w	r4, #4294967295
 800a99c:	4620      	mov	r0, r4
 800a99e:	bd70      	pop	{r4, r5, r6, pc}
 800a9a0:	20002034 	.word	0x20002034

0800a9a4 <_malloc_r>:
 800a9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a8:	1ccd      	adds	r5, r1, #3
 800a9aa:	f025 0503 	bic.w	r5, r5, #3
 800a9ae:	3508      	adds	r5, #8
 800a9b0:	2d0c      	cmp	r5, #12
 800a9b2:	bf38      	it	cc
 800a9b4:	250c      	movcc	r5, #12
 800a9b6:	2d00      	cmp	r5, #0
 800a9b8:	4607      	mov	r7, r0
 800a9ba:	db01      	blt.n	800a9c0 <_malloc_r+0x1c>
 800a9bc:	42a9      	cmp	r1, r5
 800a9be:	d905      	bls.n	800a9cc <_malloc_r+0x28>
 800a9c0:	230c      	movs	r3, #12
 800a9c2:	603b      	str	r3, [r7, #0]
 800a9c4:	2600      	movs	r6, #0
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9cc:	4e2e      	ldr	r6, [pc, #184]	; (800aa88 <_malloc_r+0xe4>)
 800a9ce:	f000 fa25 	bl	800ae1c <__malloc_lock>
 800a9d2:	6833      	ldr	r3, [r6, #0]
 800a9d4:	461c      	mov	r4, r3
 800a9d6:	bb34      	cbnz	r4, 800aa26 <_malloc_r+0x82>
 800a9d8:	4629      	mov	r1, r5
 800a9da:	4638      	mov	r0, r7
 800a9dc:	f7ff ffc2 	bl	800a964 <sbrk_aligned>
 800a9e0:	1c43      	adds	r3, r0, #1
 800a9e2:	4604      	mov	r4, r0
 800a9e4:	d14d      	bne.n	800aa82 <_malloc_r+0xde>
 800a9e6:	6834      	ldr	r4, [r6, #0]
 800a9e8:	4626      	mov	r6, r4
 800a9ea:	2e00      	cmp	r6, #0
 800a9ec:	d140      	bne.n	800aa70 <_malloc_r+0xcc>
 800a9ee:	6823      	ldr	r3, [r4, #0]
 800a9f0:	4631      	mov	r1, r6
 800a9f2:	4638      	mov	r0, r7
 800a9f4:	eb04 0803 	add.w	r8, r4, r3
 800a9f8:	f000 f9a4 	bl	800ad44 <_sbrk_r>
 800a9fc:	4580      	cmp	r8, r0
 800a9fe:	d13a      	bne.n	800aa76 <_malloc_r+0xd2>
 800aa00:	6821      	ldr	r1, [r4, #0]
 800aa02:	3503      	adds	r5, #3
 800aa04:	1a6d      	subs	r5, r5, r1
 800aa06:	f025 0503 	bic.w	r5, r5, #3
 800aa0a:	3508      	adds	r5, #8
 800aa0c:	2d0c      	cmp	r5, #12
 800aa0e:	bf38      	it	cc
 800aa10:	250c      	movcc	r5, #12
 800aa12:	4629      	mov	r1, r5
 800aa14:	4638      	mov	r0, r7
 800aa16:	f7ff ffa5 	bl	800a964 <sbrk_aligned>
 800aa1a:	3001      	adds	r0, #1
 800aa1c:	d02b      	beq.n	800aa76 <_malloc_r+0xd2>
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	442b      	add	r3, r5
 800aa22:	6023      	str	r3, [r4, #0]
 800aa24:	e00e      	b.n	800aa44 <_malloc_r+0xa0>
 800aa26:	6822      	ldr	r2, [r4, #0]
 800aa28:	1b52      	subs	r2, r2, r5
 800aa2a:	d41e      	bmi.n	800aa6a <_malloc_r+0xc6>
 800aa2c:	2a0b      	cmp	r2, #11
 800aa2e:	d916      	bls.n	800aa5e <_malloc_r+0xba>
 800aa30:	1961      	adds	r1, r4, r5
 800aa32:	42a3      	cmp	r3, r4
 800aa34:	6025      	str	r5, [r4, #0]
 800aa36:	bf18      	it	ne
 800aa38:	6059      	strne	r1, [r3, #4]
 800aa3a:	6863      	ldr	r3, [r4, #4]
 800aa3c:	bf08      	it	eq
 800aa3e:	6031      	streq	r1, [r6, #0]
 800aa40:	5162      	str	r2, [r4, r5]
 800aa42:	604b      	str	r3, [r1, #4]
 800aa44:	4638      	mov	r0, r7
 800aa46:	f104 060b 	add.w	r6, r4, #11
 800aa4a:	f000 f9ed 	bl	800ae28 <__malloc_unlock>
 800aa4e:	f026 0607 	bic.w	r6, r6, #7
 800aa52:	1d23      	adds	r3, r4, #4
 800aa54:	1af2      	subs	r2, r6, r3
 800aa56:	d0b6      	beq.n	800a9c6 <_malloc_r+0x22>
 800aa58:	1b9b      	subs	r3, r3, r6
 800aa5a:	50a3      	str	r3, [r4, r2]
 800aa5c:	e7b3      	b.n	800a9c6 <_malloc_r+0x22>
 800aa5e:	6862      	ldr	r2, [r4, #4]
 800aa60:	42a3      	cmp	r3, r4
 800aa62:	bf0c      	ite	eq
 800aa64:	6032      	streq	r2, [r6, #0]
 800aa66:	605a      	strne	r2, [r3, #4]
 800aa68:	e7ec      	b.n	800aa44 <_malloc_r+0xa0>
 800aa6a:	4623      	mov	r3, r4
 800aa6c:	6864      	ldr	r4, [r4, #4]
 800aa6e:	e7b2      	b.n	800a9d6 <_malloc_r+0x32>
 800aa70:	4634      	mov	r4, r6
 800aa72:	6876      	ldr	r6, [r6, #4]
 800aa74:	e7b9      	b.n	800a9ea <_malloc_r+0x46>
 800aa76:	230c      	movs	r3, #12
 800aa78:	603b      	str	r3, [r7, #0]
 800aa7a:	4638      	mov	r0, r7
 800aa7c:	f000 f9d4 	bl	800ae28 <__malloc_unlock>
 800aa80:	e7a1      	b.n	800a9c6 <_malloc_r+0x22>
 800aa82:	6025      	str	r5, [r4, #0]
 800aa84:	e7de      	b.n	800aa44 <_malloc_r+0xa0>
 800aa86:	bf00      	nop
 800aa88:	20002030 	.word	0x20002030

0800aa8c <__ssputs_r>:
 800aa8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa90:	688e      	ldr	r6, [r1, #8]
 800aa92:	429e      	cmp	r6, r3
 800aa94:	4682      	mov	sl, r0
 800aa96:	460c      	mov	r4, r1
 800aa98:	4690      	mov	r8, r2
 800aa9a:	461f      	mov	r7, r3
 800aa9c:	d838      	bhi.n	800ab10 <__ssputs_r+0x84>
 800aa9e:	898a      	ldrh	r2, [r1, #12]
 800aaa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aaa4:	d032      	beq.n	800ab0c <__ssputs_r+0x80>
 800aaa6:	6825      	ldr	r5, [r4, #0]
 800aaa8:	6909      	ldr	r1, [r1, #16]
 800aaaa:	eba5 0901 	sub.w	r9, r5, r1
 800aaae:	6965      	ldr	r5, [r4, #20]
 800aab0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aab4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aab8:	3301      	adds	r3, #1
 800aaba:	444b      	add	r3, r9
 800aabc:	106d      	asrs	r5, r5, #1
 800aabe:	429d      	cmp	r5, r3
 800aac0:	bf38      	it	cc
 800aac2:	461d      	movcc	r5, r3
 800aac4:	0553      	lsls	r3, r2, #21
 800aac6:	d531      	bpl.n	800ab2c <__ssputs_r+0xa0>
 800aac8:	4629      	mov	r1, r5
 800aaca:	f7ff ff6b 	bl	800a9a4 <_malloc_r>
 800aace:	4606      	mov	r6, r0
 800aad0:	b950      	cbnz	r0, 800aae8 <__ssputs_r+0x5c>
 800aad2:	230c      	movs	r3, #12
 800aad4:	f8ca 3000 	str.w	r3, [sl]
 800aad8:	89a3      	ldrh	r3, [r4, #12]
 800aada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aade:	81a3      	strh	r3, [r4, #12]
 800aae0:	f04f 30ff 	mov.w	r0, #4294967295
 800aae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae8:	6921      	ldr	r1, [r4, #16]
 800aaea:	464a      	mov	r2, r9
 800aaec:	f7ff fb46 	bl	800a17c <memcpy>
 800aaf0:	89a3      	ldrh	r3, [r4, #12]
 800aaf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aaf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aafa:	81a3      	strh	r3, [r4, #12]
 800aafc:	6126      	str	r6, [r4, #16]
 800aafe:	6165      	str	r5, [r4, #20]
 800ab00:	444e      	add	r6, r9
 800ab02:	eba5 0509 	sub.w	r5, r5, r9
 800ab06:	6026      	str	r6, [r4, #0]
 800ab08:	60a5      	str	r5, [r4, #8]
 800ab0a:	463e      	mov	r6, r7
 800ab0c:	42be      	cmp	r6, r7
 800ab0e:	d900      	bls.n	800ab12 <__ssputs_r+0x86>
 800ab10:	463e      	mov	r6, r7
 800ab12:	6820      	ldr	r0, [r4, #0]
 800ab14:	4632      	mov	r2, r6
 800ab16:	4641      	mov	r1, r8
 800ab18:	f000 f966 	bl	800ade8 <memmove>
 800ab1c:	68a3      	ldr	r3, [r4, #8]
 800ab1e:	1b9b      	subs	r3, r3, r6
 800ab20:	60a3      	str	r3, [r4, #8]
 800ab22:	6823      	ldr	r3, [r4, #0]
 800ab24:	4433      	add	r3, r6
 800ab26:	6023      	str	r3, [r4, #0]
 800ab28:	2000      	movs	r0, #0
 800ab2a:	e7db      	b.n	800aae4 <__ssputs_r+0x58>
 800ab2c:	462a      	mov	r2, r5
 800ab2e:	f000 f981 	bl	800ae34 <_realloc_r>
 800ab32:	4606      	mov	r6, r0
 800ab34:	2800      	cmp	r0, #0
 800ab36:	d1e1      	bne.n	800aafc <__ssputs_r+0x70>
 800ab38:	6921      	ldr	r1, [r4, #16]
 800ab3a:	4650      	mov	r0, sl
 800ab3c:	f7ff fec6 	bl	800a8cc <_free_r>
 800ab40:	e7c7      	b.n	800aad2 <__ssputs_r+0x46>
	...

0800ab44 <_svfiprintf_r>:
 800ab44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab48:	4698      	mov	r8, r3
 800ab4a:	898b      	ldrh	r3, [r1, #12]
 800ab4c:	061b      	lsls	r3, r3, #24
 800ab4e:	b09d      	sub	sp, #116	; 0x74
 800ab50:	4607      	mov	r7, r0
 800ab52:	460d      	mov	r5, r1
 800ab54:	4614      	mov	r4, r2
 800ab56:	d50e      	bpl.n	800ab76 <_svfiprintf_r+0x32>
 800ab58:	690b      	ldr	r3, [r1, #16]
 800ab5a:	b963      	cbnz	r3, 800ab76 <_svfiprintf_r+0x32>
 800ab5c:	2140      	movs	r1, #64	; 0x40
 800ab5e:	f7ff ff21 	bl	800a9a4 <_malloc_r>
 800ab62:	6028      	str	r0, [r5, #0]
 800ab64:	6128      	str	r0, [r5, #16]
 800ab66:	b920      	cbnz	r0, 800ab72 <_svfiprintf_r+0x2e>
 800ab68:	230c      	movs	r3, #12
 800ab6a:	603b      	str	r3, [r7, #0]
 800ab6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab70:	e0d1      	b.n	800ad16 <_svfiprintf_r+0x1d2>
 800ab72:	2340      	movs	r3, #64	; 0x40
 800ab74:	616b      	str	r3, [r5, #20]
 800ab76:	2300      	movs	r3, #0
 800ab78:	9309      	str	r3, [sp, #36]	; 0x24
 800ab7a:	2320      	movs	r3, #32
 800ab7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab80:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab84:	2330      	movs	r3, #48	; 0x30
 800ab86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ad30 <_svfiprintf_r+0x1ec>
 800ab8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab8e:	f04f 0901 	mov.w	r9, #1
 800ab92:	4623      	mov	r3, r4
 800ab94:	469a      	mov	sl, r3
 800ab96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab9a:	b10a      	cbz	r2, 800aba0 <_svfiprintf_r+0x5c>
 800ab9c:	2a25      	cmp	r2, #37	; 0x25
 800ab9e:	d1f9      	bne.n	800ab94 <_svfiprintf_r+0x50>
 800aba0:	ebba 0b04 	subs.w	fp, sl, r4
 800aba4:	d00b      	beq.n	800abbe <_svfiprintf_r+0x7a>
 800aba6:	465b      	mov	r3, fp
 800aba8:	4622      	mov	r2, r4
 800abaa:	4629      	mov	r1, r5
 800abac:	4638      	mov	r0, r7
 800abae:	f7ff ff6d 	bl	800aa8c <__ssputs_r>
 800abb2:	3001      	adds	r0, #1
 800abb4:	f000 80aa 	beq.w	800ad0c <_svfiprintf_r+0x1c8>
 800abb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abba:	445a      	add	r2, fp
 800abbc:	9209      	str	r2, [sp, #36]	; 0x24
 800abbe:	f89a 3000 	ldrb.w	r3, [sl]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f000 80a2 	beq.w	800ad0c <_svfiprintf_r+0x1c8>
 800abc8:	2300      	movs	r3, #0
 800abca:	f04f 32ff 	mov.w	r2, #4294967295
 800abce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abd2:	f10a 0a01 	add.w	sl, sl, #1
 800abd6:	9304      	str	r3, [sp, #16]
 800abd8:	9307      	str	r3, [sp, #28]
 800abda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abde:	931a      	str	r3, [sp, #104]	; 0x68
 800abe0:	4654      	mov	r4, sl
 800abe2:	2205      	movs	r2, #5
 800abe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abe8:	4851      	ldr	r0, [pc, #324]	; (800ad30 <_svfiprintf_r+0x1ec>)
 800abea:	f7f5 fb09 	bl	8000200 <memchr>
 800abee:	9a04      	ldr	r2, [sp, #16]
 800abf0:	b9d8      	cbnz	r0, 800ac2a <_svfiprintf_r+0xe6>
 800abf2:	06d0      	lsls	r0, r2, #27
 800abf4:	bf44      	itt	mi
 800abf6:	2320      	movmi	r3, #32
 800abf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abfc:	0711      	lsls	r1, r2, #28
 800abfe:	bf44      	itt	mi
 800ac00:	232b      	movmi	r3, #43	; 0x2b
 800ac02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac06:	f89a 3000 	ldrb.w	r3, [sl]
 800ac0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ac0c:	d015      	beq.n	800ac3a <_svfiprintf_r+0xf6>
 800ac0e:	9a07      	ldr	r2, [sp, #28]
 800ac10:	4654      	mov	r4, sl
 800ac12:	2000      	movs	r0, #0
 800ac14:	f04f 0c0a 	mov.w	ip, #10
 800ac18:	4621      	mov	r1, r4
 800ac1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac1e:	3b30      	subs	r3, #48	; 0x30
 800ac20:	2b09      	cmp	r3, #9
 800ac22:	d94e      	bls.n	800acc2 <_svfiprintf_r+0x17e>
 800ac24:	b1b0      	cbz	r0, 800ac54 <_svfiprintf_r+0x110>
 800ac26:	9207      	str	r2, [sp, #28]
 800ac28:	e014      	b.n	800ac54 <_svfiprintf_r+0x110>
 800ac2a:	eba0 0308 	sub.w	r3, r0, r8
 800ac2e:	fa09 f303 	lsl.w	r3, r9, r3
 800ac32:	4313      	orrs	r3, r2
 800ac34:	9304      	str	r3, [sp, #16]
 800ac36:	46a2      	mov	sl, r4
 800ac38:	e7d2      	b.n	800abe0 <_svfiprintf_r+0x9c>
 800ac3a:	9b03      	ldr	r3, [sp, #12]
 800ac3c:	1d19      	adds	r1, r3, #4
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	9103      	str	r1, [sp, #12]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	bfbb      	ittet	lt
 800ac46:	425b      	neglt	r3, r3
 800ac48:	f042 0202 	orrlt.w	r2, r2, #2
 800ac4c:	9307      	strge	r3, [sp, #28]
 800ac4e:	9307      	strlt	r3, [sp, #28]
 800ac50:	bfb8      	it	lt
 800ac52:	9204      	strlt	r2, [sp, #16]
 800ac54:	7823      	ldrb	r3, [r4, #0]
 800ac56:	2b2e      	cmp	r3, #46	; 0x2e
 800ac58:	d10c      	bne.n	800ac74 <_svfiprintf_r+0x130>
 800ac5a:	7863      	ldrb	r3, [r4, #1]
 800ac5c:	2b2a      	cmp	r3, #42	; 0x2a
 800ac5e:	d135      	bne.n	800accc <_svfiprintf_r+0x188>
 800ac60:	9b03      	ldr	r3, [sp, #12]
 800ac62:	1d1a      	adds	r2, r3, #4
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	9203      	str	r2, [sp, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	bfb8      	it	lt
 800ac6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac70:	3402      	adds	r4, #2
 800ac72:	9305      	str	r3, [sp, #20]
 800ac74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad40 <_svfiprintf_r+0x1fc>
 800ac78:	7821      	ldrb	r1, [r4, #0]
 800ac7a:	2203      	movs	r2, #3
 800ac7c:	4650      	mov	r0, sl
 800ac7e:	f7f5 fabf 	bl	8000200 <memchr>
 800ac82:	b140      	cbz	r0, 800ac96 <_svfiprintf_r+0x152>
 800ac84:	2340      	movs	r3, #64	; 0x40
 800ac86:	eba0 000a 	sub.w	r0, r0, sl
 800ac8a:	fa03 f000 	lsl.w	r0, r3, r0
 800ac8e:	9b04      	ldr	r3, [sp, #16]
 800ac90:	4303      	orrs	r3, r0
 800ac92:	3401      	adds	r4, #1
 800ac94:	9304      	str	r3, [sp, #16]
 800ac96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac9a:	4826      	ldr	r0, [pc, #152]	; (800ad34 <_svfiprintf_r+0x1f0>)
 800ac9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aca0:	2206      	movs	r2, #6
 800aca2:	f7f5 faad 	bl	8000200 <memchr>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d038      	beq.n	800ad1c <_svfiprintf_r+0x1d8>
 800acaa:	4b23      	ldr	r3, [pc, #140]	; (800ad38 <_svfiprintf_r+0x1f4>)
 800acac:	bb1b      	cbnz	r3, 800acf6 <_svfiprintf_r+0x1b2>
 800acae:	9b03      	ldr	r3, [sp, #12]
 800acb0:	3307      	adds	r3, #7
 800acb2:	f023 0307 	bic.w	r3, r3, #7
 800acb6:	3308      	adds	r3, #8
 800acb8:	9303      	str	r3, [sp, #12]
 800acba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acbc:	4433      	add	r3, r6
 800acbe:	9309      	str	r3, [sp, #36]	; 0x24
 800acc0:	e767      	b.n	800ab92 <_svfiprintf_r+0x4e>
 800acc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800acc6:	460c      	mov	r4, r1
 800acc8:	2001      	movs	r0, #1
 800acca:	e7a5      	b.n	800ac18 <_svfiprintf_r+0xd4>
 800accc:	2300      	movs	r3, #0
 800acce:	3401      	adds	r4, #1
 800acd0:	9305      	str	r3, [sp, #20]
 800acd2:	4619      	mov	r1, r3
 800acd4:	f04f 0c0a 	mov.w	ip, #10
 800acd8:	4620      	mov	r0, r4
 800acda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acde:	3a30      	subs	r2, #48	; 0x30
 800ace0:	2a09      	cmp	r2, #9
 800ace2:	d903      	bls.n	800acec <_svfiprintf_r+0x1a8>
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d0c5      	beq.n	800ac74 <_svfiprintf_r+0x130>
 800ace8:	9105      	str	r1, [sp, #20]
 800acea:	e7c3      	b.n	800ac74 <_svfiprintf_r+0x130>
 800acec:	fb0c 2101 	mla	r1, ip, r1, r2
 800acf0:	4604      	mov	r4, r0
 800acf2:	2301      	movs	r3, #1
 800acf4:	e7f0      	b.n	800acd8 <_svfiprintf_r+0x194>
 800acf6:	ab03      	add	r3, sp, #12
 800acf8:	9300      	str	r3, [sp, #0]
 800acfa:	462a      	mov	r2, r5
 800acfc:	4b0f      	ldr	r3, [pc, #60]	; (800ad3c <_svfiprintf_r+0x1f8>)
 800acfe:	a904      	add	r1, sp, #16
 800ad00:	4638      	mov	r0, r7
 800ad02:	f7fd ffcb 	bl	8008c9c <_printf_float>
 800ad06:	1c42      	adds	r2, r0, #1
 800ad08:	4606      	mov	r6, r0
 800ad0a:	d1d6      	bne.n	800acba <_svfiprintf_r+0x176>
 800ad0c:	89ab      	ldrh	r3, [r5, #12]
 800ad0e:	065b      	lsls	r3, r3, #25
 800ad10:	f53f af2c 	bmi.w	800ab6c <_svfiprintf_r+0x28>
 800ad14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad16:	b01d      	add	sp, #116	; 0x74
 800ad18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad1c:	ab03      	add	r3, sp, #12
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	462a      	mov	r2, r5
 800ad22:	4b06      	ldr	r3, [pc, #24]	; (800ad3c <_svfiprintf_r+0x1f8>)
 800ad24:	a904      	add	r1, sp, #16
 800ad26:	4638      	mov	r0, r7
 800ad28:	f7fe fa5c 	bl	80091e4 <_printf_i>
 800ad2c:	e7eb      	b.n	800ad06 <_svfiprintf_r+0x1c2>
 800ad2e:	bf00      	nop
 800ad30:	0800bbdc 	.word	0x0800bbdc
 800ad34:	0800bbe6 	.word	0x0800bbe6
 800ad38:	08008c9d 	.word	0x08008c9d
 800ad3c:	0800aa8d 	.word	0x0800aa8d
 800ad40:	0800bbe2 	.word	0x0800bbe2

0800ad44 <_sbrk_r>:
 800ad44:	b538      	push	{r3, r4, r5, lr}
 800ad46:	4d06      	ldr	r5, [pc, #24]	; (800ad60 <_sbrk_r+0x1c>)
 800ad48:	2300      	movs	r3, #0
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	4608      	mov	r0, r1
 800ad4e:	602b      	str	r3, [r5, #0]
 800ad50:	f7f6 fd28 	bl	80017a4 <_sbrk>
 800ad54:	1c43      	adds	r3, r0, #1
 800ad56:	d102      	bne.n	800ad5e <_sbrk_r+0x1a>
 800ad58:	682b      	ldr	r3, [r5, #0]
 800ad5a:	b103      	cbz	r3, 800ad5e <_sbrk_r+0x1a>
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	bd38      	pop	{r3, r4, r5, pc}
 800ad60:	20002038 	.word	0x20002038

0800ad64 <__assert_func>:
 800ad64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad66:	4614      	mov	r4, r2
 800ad68:	461a      	mov	r2, r3
 800ad6a:	4b09      	ldr	r3, [pc, #36]	; (800ad90 <__assert_func+0x2c>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4605      	mov	r5, r0
 800ad70:	68d8      	ldr	r0, [r3, #12]
 800ad72:	b14c      	cbz	r4, 800ad88 <__assert_func+0x24>
 800ad74:	4b07      	ldr	r3, [pc, #28]	; (800ad94 <__assert_func+0x30>)
 800ad76:	9100      	str	r1, [sp, #0]
 800ad78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad7c:	4906      	ldr	r1, [pc, #24]	; (800ad98 <__assert_func+0x34>)
 800ad7e:	462b      	mov	r3, r5
 800ad80:	f000 f80e 	bl	800ada0 <fiprintf>
 800ad84:	f000 faac 	bl	800b2e0 <abort>
 800ad88:	4b04      	ldr	r3, [pc, #16]	; (800ad9c <__assert_func+0x38>)
 800ad8a:	461c      	mov	r4, r3
 800ad8c:	e7f3      	b.n	800ad76 <__assert_func+0x12>
 800ad8e:	bf00      	nop
 800ad90:	200000fc 	.word	0x200000fc
 800ad94:	0800bbed 	.word	0x0800bbed
 800ad98:	0800bbfa 	.word	0x0800bbfa
 800ad9c:	0800bc28 	.word	0x0800bc28

0800ada0 <fiprintf>:
 800ada0:	b40e      	push	{r1, r2, r3}
 800ada2:	b503      	push	{r0, r1, lr}
 800ada4:	4601      	mov	r1, r0
 800ada6:	ab03      	add	r3, sp, #12
 800ada8:	4805      	ldr	r0, [pc, #20]	; (800adc0 <fiprintf+0x20>)
 800adaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800adae:	6800      	ldr	r0, [r0, #0]
 800adb0:	9301      	str	r3, [sp, #4]
 800adb2:	f000 f897 	bl	800aee4 <_vfiprintf_r>
 800adb6:	b002      	add	sp, #8
 800adb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800adbc:	b003      	add	sp, #12
 800adbe:	4770      	bx	lr
 800adc0:	200000fc 	.word	0x200000fc

0800adc4 <__ascii_mbtowc>:
 800adc4:	b082      	sub	sp, #8
 800adc6:	b901      	cbnz	r1, 800adca <__ascii_mbtowc+0x6>
 800adc8:	a901      	add	r1, sp, #4
 800adca:	b142      	cbz	r2, 800adde <__ascii_mbtowc+0x1a>
 800adcc:	b14b      	cbz	r3, 800ade2 <__ascii_mbtowc+0x1e>
 800adce:	7813      	ldrb	r3, [r2, #0]
 800add0:	600b      	str	r3, [r1, #0]
 800add2:	7812      	ldrb	r2, [r2, #0]
 800add4:	1e10      	subs	r0, r2, #0
 800add6:	bf18      	it	ne
 800add8:	2001      	movne	r0, #1
 800adda:	b002      	add	sp, #8
 800addc:	4770      	bx	lr
 800adde:	4610      	mov	r0, r2
 800ade0:	e7fb      	b.n	800adda <__ascii_mbtowc+0x16>
 800ade2:	f06f 0001 	mvn.w	r0, #1
 800ade6:	e7f8      	b.n	800adda <__ascii_mbtowc+0x16>

0800ade8 <memmove>:
 800ade8:	4288      	cmp	r0, r1
 800adea:	b510      	push	{r4, lr}
 800adec:	eb01 0402 	add.w	r4, r1, r2
 800adf0:	d902      	bls.n	800adf8 <memmove+0x10>
 800adf2:	4284      	cmp	r4, r0
 800adf4:	4623      	mov	r3, r4
 800adf6:	d807      	bhi.n	800ae08 <memmove+0x20>
 800adf8:	1e43      	subs	r3, r0, #1
 800adfa:	42a1      	cmp	r1, r4
 800adfc:	d008      	beq.n	800ae10 <memmove+0x28>
 800adfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae06:	e7f8      	b.n	800adfa <memmove+0x12>
 800ae08:	4402      	add	r2, r0
 800ae0a:	4601      	mov	r1, r0
 800ae0c:	428a      	cmp	r2, r1
 800ae0e:	d100      	bne.n	800ae12 <memmove+0x2a>
 800ae10:	bd10      	pop	{r4, pc}
 800ae12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae1a:	e7f7      	b.n	800ae0c <memmove+0x24>

0800ae1c <__malloc_lock>:
 800ae1c:	4801      	ldr	r0, [pc, #4]	; (800ae24 <__malloc_lock+0x8>)
 800ae1e:	f000 bc1f 	b.w	800b660 <__retarget_lock_acquire_recursive>
 800ae22:	bf00      	nop
 800ae24:	2000203c 	.word	0x2000203c

0800ae28 <__malloc_unlock>:
 800ae28:	4801      	ldr	r0, [pc, #4]	; (800ae30 <__malloc_unlock+0x8>)
 800ae2a:	f000 bc1a 	b.w	800b662 <__retarget_lock_release_recursive>
 800ae2e:	bf00      	nop
 800ae30:	2000203c 	.word	0x2000203c

0800ae34 <_realloc_r>:
 800ae34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae38:	4680      	mov	r8, r0
 800ae3a:	4614      	mov	r4, r2
 800ae3c:	460e      	mov	r6, r1
 800ae3e:	b921      	cbnz	r1, 800ae4a <_realloc_r+0x16>
 800ae40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae44:	4611      	mov	r1, r2
 800ae46:	f7ff bdad 	b.w	800a9a4 <_malloc_r>
 800ae4a:	b92a      	cbnz	r2, 800ae58 <_realloc_r+0x24>
 800ae4c:	f7ff fd3e 	bl	800a8cc <_free_r>
 800ae50:	4625      	mov	r5, r4
 800ae52:	4628      	mov	r0, r5
 800ae54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae58:	f000 fc6a 	bl	800b730 <_malloc_usable_size_r>
 800ae5c:	4284      	cmp	r4, r0
 800ae5e:	4607      	mov	r7, r0
 800ae60:	d802      	bhi.n	800ae68 <_realloc_r+0x34>
 800ae62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae66:	d812      	bhi.n	800ae8e <_realloc_r+0x5a>
 800ae68:	4621      	mov	r1, r4
 800ae6a:	4640      	mov	r0, r8
 800ae6c:	f7ff fd9a 	bl	800a9a4 <_malloc_r>
 800ae70:	4605      	mov	r5, r0
 800ae72:	2800      	cmp	r0, #0
 800ae74:	d0ed      	beq.n	800ae52 <_realloc_r+0x1e>
 800ae76:	42bc      	cmp	r4, r7
 800ae78:	4622      	mov	r2, r4
 800ae7a:	4631      	mov	r1, r6
 800ae7c:	bf28      	it	cs
 800ae7e:	463a      	movcs	r2, r7
 800ae80:	f7ff f97c 	bl	800a17c <memcpy>
 800ae84:	4631      	mov	r1, r6
 800ae86:	4640      	mov	r0, r8
 800ae88:	f7ff fd20 	bl	800a8cc <_free_r>
 800ae8c:	e7e1      	b.n	800ae52 <_realloc_r+0x1e>
 800ae8e:	4635      	mov	r5, r6
 800ae90:	e7df      	b.n	800ae52 <_realloc_r+0x1e>

0800ae92 <__sfputc_r>:
 800ae92:	6893      	ldr	r3, [r2, #8]
 800ae94:	3b01      	subs	r3, #1
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	b410      	push	{r4}
 800ae9a:	6093      	str	r3, [r2, #8]
 800ae9c:	da08      	bge.n	800aeb0 <__sfputc_r+0x1e>
 800ae9e:	6994      	ldr	r4, [r2, #24]
 800aea0:	42a3      	cmp	r3, r4
 800aea2:	db01      	blt.n	800aea8 <__sfputc_r+0x16>
 800aea4:	290a      	cmp	r1, #10
 800aea6:	d103      	bne.n	800aeb0 <__sfputc_r+0x1e>
 800aea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeac:	f000 b94a 	b.w	800b144 <__swbuf_r>
 800aeb0:	6813      	ldr	r3, [r2, #0]
 800aeb2:	1c58      	adds	r0, r3, #1
 800aeb4:	6010      	str	r0, [r2, #0]
 800aeb6:	7019      	strb	r1, [r3, #0]
 800aeb8:	4608      	mov	r0, r1
 800aeba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <__sfputs_r>:
 800aec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec2:	4606      	mov	r6, r0
 800aec4:	460f      	mov	r7, r1
 800aec6:	4614      	mov	r4, r2
 800aec8:	18d5      	adds	r5, r2, r3
 800aeca:	42ac      	cmp	r4, r5
 800aecc:	d101      	bne.n	800aed2 <__sfputs_r+0x12>
 800aece:	2000      	movs	r0, #0
 800aed0:	e007      	b.n	800aee2 <__sfputs_r+0x22>
 800aed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aed6:	463a      	mov	r2, r7
 800aed8:	4630      	mov	r0, r6
 800aeda:	f7ff ffda 	bl	800ae92 <__sfputc_r>
 800aede:	1c43      	adds	r3, r0, #1
 800aee0:	d1f3      	bne.n	800aeca <__sfputs_r+0xa>
 800aee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aee4 <_vfiprintf_r>:
 800aee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	460d      	mov	r5, r1
 800aeea:	b09d      	sub	sp, #116	; 0x74
 800aeec:	4614      	mov	r4, r2
 800aeee:	4698      	mov	r8, r3
 800aef0:	4606      	mov	r6, r0
 800aef2:	b118      	cbz	r0, 800aefc <_vfiprintf_r+0x18>
 800aef4:	6983      	ldr	r3, [r0, #24]
 800aef6:	b90b      	cbnz	r3, 800aefc <_vfiprintf_r+0x18>
 800aef8:	f000 fb14 	bl	800b524 <__sinit>
 800aefc:	4b89      	ldr	r3, [pc, #548]	; (800b124 <_vfiprintf_r+0x240>)
 800aefe:	429d      	cmp	r5, r3
 800af00:	d11b      	bne.n	800af3a <_vfiprintf_r+0x56>
 800af02:	6875      	ldr	r5, [r6, #4]
 800af04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af06:	07d9      	lsls	r1, r3, #31
 800af08:	d405      	bmi.n	800af16 <_vfiprintf_r+0x32>
 800af0a:	89ab      	ldrh	r3, [r5, #12]
 800af0c:	059a      	lsls	r2, r3, #22
 800af0e:	d402      	bmi.n	800af16 <_vfiprintf_r+0x32>
 800af10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af12:	f000 fba5 	bl	800b660 <__retarget_lock_acquire_recursive>
 800af16:	89ab      	ldrh	r3, [r5, #12]
 800af18:	071b      	lsls	r3, r3, #28
 800af1a:	d501      	bpl.n	800af20 <_vfiprintf_r+0x3c>
 800af1c:	692b      	ldr	r3, [r5, #16]
 800af1e:	b9eb      	cbnz	r3, 800af5c <_vfiprintf_r+0x78>
 800af20:	4629      	mov	r1, r5
 800af22:	4630      	mov	r0, r6
 800af24:	f000 f96e 	bl	800b204 <__swsetup_r>
 800af28:	b1c0      	cbz	r0, 800af5c <_vfiprintf_r+0x78>
 800af2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af2c:	07dc      	lsls	r4, r3, #31
 800af2e:	d50e      	bpl.n	800af4e <_vfiprintf_r+0x6a>
 800af30:	f04f 30ff 	mov.w	r0, #4294967295
 800af34:	b01d      	add	sp, #116	; 0x74
 800af36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af3a:	4b7b      	ldr	r3, [pc, #492]	; (800b128 <_vfiprintf_r+0x244>)
 800af3c:	429d      	cmp	r5, r3
 800af3e:	d101      	bne.n	800af44 <_vfiprintf_r+0x60>
 800af40:	68b5      	ldr	r5, [r6, #8]
 800af42:	e7df      	b.n	800af04 <_vfiprintf_r+0x20>
 800af44:	4b79      	ldr	r3, [pc, #484]	; (800b12c <_vfiprintf_r+0x248>)
 800af46:	429d      	cmp	r5, r3
 800af48:	bf08      	it	eq
 800af4a:	68f5      	ldreq	r5, [r6, #12]
 800af4c:	e7da      	b.n	800af04 <_vfiprintf_r+0x20>
 800af4e:	89ab      	ldrh	r3, [r5, #12]
 800af50:	0598      	lsls	r0, r3, #22
 800af52:	d4ed      	bmi.n	800af30 <_vfiprintf_r+0x4c>
 800af54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af56:	f000 fb84 	bl	800b662 <__retarget_lock_release_recursive>
 800af5a:	e7e9      	b.n	800af30 <_vfiprintf_r+0x4c>
 800af5c:	2300      	movs	r3, #0
 800af5e:	9309      	str	r3, [sp, #36]	; 0x24
 800af60:	2320      	movs	r3, #32
 800af62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af66:	f8cd 800c 	str.w	r8, [sp, #12]
 800af6a:	2330      	movs	r3, #48	; 0x30
 800af6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b130 <_vfiprintf_r+0x24c>
 800af70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af74:	f04f 0901 	mov.w	r9, #1
 800af78:	4623      	mov	r3, r4
 800af7a:	469a      	mov	sl, r3
 800af7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af80:	b10a      	cbz	r2, 800af86 <_vfiprintf_r+0xa2>
 800af82:	2a25      	cmp	r2, #37	; 0x25
 800af84:	d1f9      	bne.n	800af7a <_vfiprintf_r+0x96>
 800af86:	ebba 0b04 	subs.w	fp, sl, r4
 800af8a:	d00b      	beq.n	800afa4 <_vfiprintf_r+0xc0>
 800af8c:	465b      	mov	r3, fp
 800af8e:	4622      	mov	r2, r4
 800af90:	4629      	mov	r1, r5
 800af92:	4630      	mov	r0, r6
 800af94:	f7ff ff94 	bl	800aec0 <__sfputs_r>
 800af98:	3001      	adds	r0, #1
 800af9a:	f000 80aa 	beq.w	800b0f2 <_vfiprintf_r+0x20e>
 800af9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afa0:	445a      	add	r2, fp
 800afa2:	9209      	str	r2, [sp, #36]	; 0x24
 800afa4:	f89a 3000 	ldrb.w	r3, [sl]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	f000 80a2 	beq.w	800b0f2 <_vfiprintf_r+0x20e>
 800afae:	2300      	movs	r3, #0
 800afb0:	f04f 32ff 	mov.w	r2, #4294967295
 800afb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afb8:	f10a 0a01 	add.w	sl, sl, #1
 800afbc:	9304      	str	r3, [sp, #16]
 800afbe:	9307      	str	r3, [sp, #28]
 800afc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afc4:	931a      	str	r3, [sp, #104]	; 0x68
 800afc6:	4654      	mov	r4, sl
 800afc8:	2205      	movs	r2, #5
 800afca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afce:	4858      	ldr	r0, [pc, #352]	; (800b130 <_vfiprintf_r+0x24c>)
 800afd0:	f7f5 f916 	bl	8000200 <memchr>
 800afd4:	9a04      	ldr	r2, [sp, #16]
 800afd6:	b9d8      	cbnz	r0, 800b010 <_vfiprintf_r+0x12c>
 800afd8:	06d1      	lsls	r1, r2, #27
 800afda:	bf44      	itt	mi
 800afdc:	2320      	movmi	r3, #32
 800afde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afe2:	0713      	lsls	r3, r2, #28
 800afe4:	bf44      	itt	mi
 800afe6:	232b      	movmi	r3, #43	; 0x2b
 800afe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afec:	f89a 3000 	ldrb.w	r3, [sl]
 800aff0:	2b2a      	cmp	r3, #42	; 0x2a
 800aff2:	d015      	beq.n	800b020 <_vfiprintf_r+0x13c>
 800aff4:	9a07      	ldr	r2, [sp, #28]
 800aff6:	4654      	mov	r4, sl
 800aff8:	2000      	movs	r0, #0
 800affa:	f04f 0c0a 	mov.w	ip, #10
 800affe:	4621      	mov	r1, r4
 800b000:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b004:	3b30      	subs	r3, #48	; 0x30
 800b006:	2b09      	cmp	r3, #9
 800b008:	d94e      	bls.n	800b0a8 <_vfiprintf_r+0x1c4>
 800b00a:	b1b0      	cbz	r0, 800b03a <_vfiprintf_r+0x156>
 800b00c:	9207      	str	r2, [sp, #28]
 800b00e:	e014      	b.n	800b03a <_vfiprintf_r+0x156>
 800b010:	eba0 0308 	sub.w	r3, r0, r8
 800b014:	fa09 f303 	lsl.w	r3, r9, r3
 800b018:	4313      	orrs	r3, r2
 800b01a:	9304      	str	r3, [sp, #16]
 800b01c:	46a2      	mov	sl, r4
 800b01e:	e7d2      	b.n	800afc6 <_vfiprintf_r+0xe2>
 800b020:	9b03      	ldr	r3, [sp, #12]
 800b022:	1d19      	adds	r1, r3, #4
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	9103      	str	r1, [sp, #12]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	bfbb      	ittet	lt
 800b02c:	425b      	neglt	r3, r3
 800b02e:	f042 0202 	orrlt.w	r2, r2, #2
 800b032:	9307      	strge	r3, [sp, #28]
 800b034:	9307      	strlt	r3, [sp, #28]
 800b036:	bfb8      	it	lt
 800b038:	9204      	strlt	r2, [sp, #16]
 800b03a:	7823      	ldrb	r3, [r4, #0]
 800b03c:	2b2e      	cmp	r3, #46	; 0x2e
 800b03e:	d10c      	bne.n	800b05a <_vfiprintf_r+0x176>
 800b040:	7863      	ldrb	r3, [r4, #1]
 800b042:	2b2a      	cmp	r3, #42	; 0x2a
 800b044:	d135      	bne.n	800b0b2 <_vfiprintf_r+0x1ce>
 800b046:	9b03      	ldr	r3, [sp, #12]
 800b048:	1d1a      	adds	r2, r3, #4
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	9203      	str	r2, [sp, #12]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	bfb8      	it	lt
 800b052:	f04f 33ff 	movlt.w	r3, #4294967295
 800b056:	3402      	adds	r4, #2
 800b058:	9305      	str	r3, [sp, #20]
 800b05a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b140 <_vfiprintf_r+0x25c>
 800b05e:	7821      	ldrb	r1, [r4, #0]
 800b060:	2203      	movs	r2, #3
 800b062:	4650      	mov	r0, sl
 800b064:	f7f5 f8cc 	bl	8000200 <memchr>
 800b068:	b140      	cbz	r0, 800b07c <_vfiprintf_r+0x198>
 800b06a:	2340      	movs	r3, #64	; 0x40
 800b06c:	eba0 000a 	sub.w	r0, r0, sl
 800b070:	fa03 f000 	lsl.w	r0, r3, r0
 800b074:	9b04      	ldr	r3, [sp, #16]
 800b076:	4303      	orrs	r3, r0
 800b078:	3401      	adds	r4, #1
 800b07a:	9304      	str	r3, [sp, #16]
 800b07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b080:	482c      	ldr	r0, [pc, #176]	; (800b134 <_vfiprintf_r+0x250>)
 800b082:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b086:	2206      	movs	r2, #6
 800b088:	f7f5 f8ba 	bl	8000200 <memchr>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d03f      	beq.n	800b110 <_vfiprintf_r+0x22c>
 800b090:	4b29      	ldr	r3, [pc, #164]	; (800b138 <_vfiprintf_r+0x254>)
 800b092:	bb1b      	cbnz	r3, 800b0dc <_vfiprintf_r+0x1f8>
 800b094:	9b03      	ldr	r3, [sp, #12]
 800b096:	3307      	adds	r3, #7
 800b098:	f023 0307 	bic.w	r3, r3, #7
 800b09c:	3308      	adds	r3, #8
 800b09e:	9303      	str	r3, [sp, #12]
 800b0a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0a2:	443b      	add	r3, r7
 800b0a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b0a6:	e767      	b.n	800af78 <_vfiprintf_r+0x94>
 800b0a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0ac:	460c      	mov	r4, r1
 800b0ae:	2001      	movs	r0, #1
 800b0b0:	e7a5      	b.n	800affe <_vfiprintf_r+0x11a>
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	3401      	adds	r4, #1
 800b0b6:	9305      	str	r3, [sp, #20]
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	f04f 0c0a 	mov.w	ip, #10
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0c4:	3a30      	subs	r2, #48	; 0x30
 800b0c6:	2a09      	cmp	r2, #9
 800b0c8:	d903      	bls.n	800b0d2 <_vfiprintf_r+0x1ee>
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d0c5      	beq.n	800b05a <_vfiprintf_r+0x176>
 800b0ce:	9105      	str	r1, [sp, #20]
 800b0d0:	e7c3      	b.n	800b05a <_vfiprintf_r+0x176>
 800b0d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e7f0      	b.n	800b0be <_vfiprintf_r+0x1da>
 800b0dc:	ab03      	add	r3, sp, #12
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	462a      	mov	r2, r5
 800b0e2:	4b16      	ldr	r3, [pc, #88]	; (800b13c <_vfiprintf_r+0x258>)
 800b0e4:	a904      	add	r1, sp, #16
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	f7fd fdd8 	bl	8008c9c <_printf_float>
 800b0ec:	4607      	mov	r7, r0
 800b0ee:	1c78      	adds	r0, r7, #1
 800b0f0:	d1d6      	bne.n	800b0a0 <_vfiprintf_r+0x1bc>
 800b0f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0f4:	07d9      	lsls	r1, r3, #31
 800b0f6:	d405      	bmi.n	800b104 <_vfiprintf_r+0x220>
 800b0f8:	89ab      	ldrh	r3, [r5, #12]
 800b0fa:	059a      	lsls	r2, r3, #22
 800b0fc:	d402      	bmi.n	800b104 <_vfiprintf_r+0x220>
 800b0fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b100:	f000 faaf 	bl	800b662 <__retarget_lock_release_recursive>
 800b104:	89ab      	ldrh	r3, [r5, #12]
 800b106:	065b      	lsls	r3, r3, #25
 800b108:	f53f af12 	bmi.w	800af30 <_vfiprintf_r+0x4c>
 800b10c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b10e:	e711      	b.n	800af34 <_vfiprintf_r+0x50>
 800b110:	ab03      	add	r3, sp, #12
 800b112:	9300      	str	r3, [sp, #0]
 800b114:	462a      	mov	r2, r5
 800b116:	4b09      	ldr	r3, [pc, #36]	; (800b13c <_vfiprintf_r+0x258>)
 800b118:	a904      	add	r1, sp, #16
 800b11a:	4630      	mov	r0, r6
 800b11c:	f7fe f862 	bl	80091e4 <_printf_i>
 800b120:	e7e4      	b.n	800b0ec <_vfiprintf_r+0x208>
 800b122:	bf00      	nop
 800b124:	0800bd54 	.word	0x0800bd54
 800b128:	0800bd74 	.word	0x0800bd74
 800b12c:	0800bd34 	.word	0x0800bd34
 800b130:	0800bbdc 	.word	0x0800bbdc
 800b134:	0800bbe6 	.word	0x0800bbe6
 800b138:	08008c9d 	.word	0x08008c9d
 800b13c:	0800aec1 	.word	0x0800aec1
 800b140:	0800bbe2 	.word	0x0800bbe2

0800b144 <__swbuf_r>:
 800b144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b146:	460e      	mov	r6, r1
 800b148:	4614      	mov	r4, r2
 800b14a:	4605      	mov	r5, r0
 800b14c:	b118      	cbz	r0, 800b156 <__swbuf_r+0x12>
 800b14e:	6983      	ldr	r3, [r0, #24]
 800b150:	b90b      	cbnz	r3, 800b156 <__swbuf_r+0x12>
 800b152:	f000 f9e7 	bl	800b524 <__sinit>
 800b156:	4b21      	ldr	r3, [pc, #132]	; (800b1dc <__swbuf_r+0x98>)
 800b158:	429c      	cmp	r4, r3
 800b15a:	d12b      	bne.n	800b1b4 <__swbuf_r+0x70>
 800b15c:	686c      	ldr	r4, [r5, #4]
 800b15e:	69a3      	ldr	r3, [r4, #24]
 800b160:	60a3      	str	r3, [r4, #8]
 800b162:	89a3      	ldrh	r3, [r4, #12]
 800b164:	071a      	lsls	r2, r3, #28
 800b166:	d52f      	bpl.n	800b1c8 <__swbuf_r+0x84>
 800b168:	6923      	ldr	r3, [r4, #16]
 800b16a:	b36b      	cbz	r3, 800b1c8 <__swbuf_r+0x84>
 800b16c:	6923      	ldr	r3, [r4, #16]
 800b16e:	6820      	ldr	r0, [r4, #0]
 800b170:	1ac0      	subs	r0, r0, r3
 800b172:	6963      	ldr	r3, [r4, #20]
 800b174:	b2f6      	uxtb	r6, r6
 800b176:	4283      	cmp	r3, r0
 800b178:	4637      	mov	r7, r6
 800b17a:	dc04      	bgt.n	800b186 <__swbuf_r+0x42>
 800b17c:	4621      	mov	r1, r4
 800b17e:	4628      	mov	r0, r5
 800b180:	f000 f93c 	bl	800b3fc <_fflush_r>
 800b184:	bb30      	cbnz	r0, 800b1d4 <__swbuf_r+0x90>
 800b186:	68a3      	ldr	r3, [r4, #8]
 800b188:	3b01      	subs	r3, #1
 800b18a:	60a3      	str	r3, [r4, #8]
 800b18c:	6823      	ldr	r3, [r4, #0]
 800b18e:	1c5a      	adds	r2, r3, #1
 800b190:	6022      	str	r2, [r4, #0]
 800b192:	701e      	strb	r6, [r3, #0]
 800b194:	6963      	ldr	r3, [r4, #20]
 800b196:	3001      	adds	r0, #1
 800b198:	4283      	cmp	r3, r0
 800b19a:	d004      	beq.n	800b1a6 <__swbuf_r+0x62>
 800b19c:	89a3      	ldrh	r3, [r4, #12]
 800b19e:	07db      	lsls	r3, r3, #31
 800b1a0:	d506      	bpl.n	800b1b0 <__swbuf_r+0x6c>
 800b1a2:	2e0a      	cmp	r6, #10
 800b1a4:	d104      	bne.n	800b1b0 <__swbuf_r+0x6c>
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	f000 f927 	bl	800b3fc <_fflush_r>
 800b1ae:	b988      	cbnz	r0, 800b1d4 <__swbuf_r+0x90>
 800b1b0:	4638      	mov	r0, r7
 800b1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1b4:	4b0a      	ldr	r3, [pc, #40]	; (800b1e0 <__swbuf_r+0x9c>)
 800b1b6:	429c      	cmp	r4, r3
 800b1b8:	d101      	bne.n	800b1be <__swbuf_r+0x7a>
 800b1ba:	68ac      	ldr	r4, [r5, #8]
 800b1bc:	e7cf      	b.n	800b15e <__swbuf_r+0x1a>
 800b1be:	4b09      	ldr	r3, [pc, #36]	; (800b1e4 <__swbuf_r+0xa0>)
 800b1c0:	429c      	cmp	r4, r3
 800b1c2:	bf08      	it	eq
 800b1c4:	68ec      	ldreq	r4, [r5, #12]
 800b1c6:	e7ca      	b.n	800b15e <__swbuf_r+0x1a>
 800b1c8:	4621      	mov	r1, r4
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	f000 f81a 	bl	800b204 <__swsetup_r>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d0cb      	beq.n	800b16c <__swbuf_r+0x28>
 800b1d4:	f04f 37ff 	mov.w	r7, #4294967295
 800b1d8:	e7ea      	b.n	800b1b0 <__swbuf_r+0x6c>
 800b1da:	bf00      	nop
 800b1dc:	0800bd54 	.word	0x0800bd54
 800b1e0:	0800bd74 	.word	0x0800bd74
 800b1e4:	0800bd34 	.word	0x0800bd34

0800b1e8 <__ascii_wctomb>:
 800b1e8:	b149      	cbz	r1, 800b1fe <__ascii_wctomb+0x16>
 800b1ea:	2aff      	cmp	r2, #255	; 0xff
 800b1ec:	bf85      	ittet	hi
 800b1ee:	238a      	movhi	r3, #138	; 0x8a
 800b1f0:	6003      	strhi	r3, [r0, #0]
 800b1f2:	700a      	strbls	r2, [r1, #0]
 800b1f4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b1f8:	bf98      	it	ls
 800b1fa:	2001      	movls	r0, #1
 800b1fc:	4770      	bx	lr
 800b1fe:	4608      	mov	r0, r1
 800b200:	4770      	bx	lr
	...

0800b204 <__swsetup_r>:
 800b204:	4b32      	ldr	r3, [pc, #200]	; (800b2d0 <__swsetup_r+0xcc>)
 800b206:	b570      	push	{r4, r5, r6, lr}
 800b208:	681d      	ldr	r5, [r3, #0]
 800b20a:	4606      	mov	r6, r0
 800b20c:	460c      	mov	r4, r1
 800b20e:	b125      	cbz	r5, 800b21a <__swsetup_r+0x16>
 800b210:	69ab      	ldr	r3, [r5, #24]
 800b212:	b913      	cbnz	r3, 800b21a <__swsetup_r+0x16>
 800b214:	4628      	mov	r0, r5
 800b216:	f000 f985 	bl	800b524 <__sinit>
 800b21a:	4b2e      	ldr	r3, [pc, #184]	; (800b2d4 <__swsetup_r+0xd0>)
 800b21c:	429c      	cmp	r4, r3
 800b21e:	d10f      	bne.n	800b240 <__swsetup_r+0x3c>
 800b220:	686c      	ldr	r4, [r5, #4]
 800b222:	89a3      	ldrh	r3, [r4, #12]
 800b224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b228:	0719      	lsls	r1, r3, #28
 800b22a:	d42c      	bmi.n	800b286 <__swsetup_r+0x82>
 800b22c:	06dd      	lsls	r5, r3, #27
 800b22e:	d411      	bmi.n	800b254 <__swsetup_r+0x50>
 800b230:	2309      	movs	r3, #9
 800b232:	6033      	str	r3, [r6, #0]
 800b234:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b238:	81a3      	strh	r3, [r4, #12]
 800b23a:	f04f 30ff 	mov.w	r0, #4294967295
 800b23e:	e03e      	b.n	800b2be <__swsetup_r+0xba>
 800b240:	4b25      	ldr	r3, [pc, #148]	; (800b2d8 <__swsetup_r+0xd4>)
 800b242:	429c      	cmp	r4, r3
 800b244:	d101      	bne.n	800b24a <__swsetup_r+0x46>
 800b246:	68ac      	ldr	r4, [r5, #8]
 800b248:	e7eb      	b.n	800b222 <__swsetup_r+0x1e>
 800b24a:	4b24      	ldr	r3, [pc, #144]	; (800b2dc <__swsetup_r+0xd8>)
 800b24c:	429c      	cmp	r4, r3
 800b24e:	bf08      	it	eq
 800b250:	68ec      	ldreq	r4, [r5, #12]
 800b252:	e7e6      	b.n	800b222 <__swsetup_r+0x1e>
 800b254:	0758      	lsls	r0, r3, #29
 800b256:	d512      	bpl.n	800b27e <__swsetup_r+0x7a>
 800b258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b25a:	b141      	cbz	r1, 800b26e <__swsetup_r+0x6a>
 800b25c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b260:	4299      	cmp	r1, r3
 800b262:	d002      	beq.n	800b26a <__swsetup_r+0x66>
 800b264:	4630      	mov	r0, r6
 800b266:	f7ff fb31 	bl	800a8cc <_free_r>
 800b26a:	2300      	movs	r3, #0
 800b26c:	6363      	str	r3, [r4, #52]	; 0x34
 800b26e:	89a3      	ldrh	r3, [r4, #12]
 800b270:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b274:	81a3      	strh	r3, [r4, #12]
 800b276:	2300      	movs	r3, #0
 800b278:	6063      	str	r3, [r4, #4]
 800b27a:	6923      	ldr	r3, [r4, #16]
 800b27c:	6023      	str	r3, [r4, #0]
 800b27e:	89a3      	ldrh	r3, [r4, #12]
 800b280:	f043 0308 	orr.w	r3, r3, #8
 800b284:	81a3      	strh	r3, [r4, #12]
 800b286:	6923      	ldr	r3, [r4, #16]
 800b288:	b94b      	cbnz	r3, 800b29e <__swsetup_r+0x9a>
 800b28a:	89a3      	ldrh	r3, [r4, #12]
 800b28c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b294:	d003      	beq.n	800b29e <__swsetup_r+0x9a>
 800b296:	4621      	mov	r1, r4
 800b298:	4630      	mov	r0, r6
 800b29a:	f000 fa09 	bl	800b6b0 <__smakebuf_r>
 800b29e:	89a0      	ldrh	r0, [r4, #12]
 800b2a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2a4:	f010 0301 	ands.w	r3, r0, #1
 800b2a8:	d00a      	beq.n	800b2c0 <__swsetup_r+0xbc>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	60a3      	str	r3, [r4, #8]
 800b2ae:	6963      	ldr	r3, [r4, #20]
 800b2b0:	425b      	negs	r3, r3
 800b2b2:	61a3      	str	r3, [r4, #24]
 800b2b4:	6923      	ldr	r3, [r4, #16]
 800b2b6:	b943      	cbnz	r3, 800b2ca <__swsetup_r+0xc6>
 800b2b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b2bc:	d1ba      	bne.n	800b234 <__swsetup_r+0x30>
 800b2be:	bd70      	pop	{r4, r5, r6, pc}
 800b2c0:	0781      	lsls	r1, r0, #30
 800b2c2:	bf58      	it	pl
 800b2c4:	6963      	ldrpl	r3, [r4, #20]
 800b2c6:	60a3      	str	r3, [r4, #8]
 800b2c8:	e7f4      	b.n	800b2b4 <__swsetup_r+0xb0>
 800b2ca:	2000      	movs	r0, #0
 800b2cc:	e7f7      	b.n	800b2be <__swsetup_r+0xba>
 800b2ce:	bf00      	nop
 800b2d0:	200000fc 	.word	0x200000fc
 800b2d4:	0800bd54 	.word	0x0800bd54
 800b2d8:	0800bd74 	.word	0x0800bd74
 800b2dc:	0800bd34 	.word	0x0800bd34

0800b2e0 <abort>:
 800b2e0:	b508      	push	{r3, lr}
 800b2e2:	2006      	movs	r0, #6
 800b2e4:	f000 fa54 	bl	800b790 <raise>
 800b2e8:	2001      	movs	r0, #1
 800b2ea:	f7f6 f9e3 	bl	80016b4 <_exit>
	...

0800b2f0 <__sflush_r>:
 800b2f0:	898a      	ldrh	r2, [r1, #12]
 800b2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	0710      	lsls	r0, r2, #28
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	d458      	bmi.n	800b3b0 <__sflush_r+0xc0>
 800b2fe:	684b      	ldr	r3, [r1, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	dc05      	bgt.n	800b310 <__sflush_r+0x20>
 800b304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b306:	2b00      	cmp	r3, #0
 800b308:	dc02      	bgt.n	800b310 <__sflush_r+0x20>
 800b30a:	2000      	movs	r0, #0
 800b30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b312:	2e00      	cmp	r6, #0
 800b314:	d0f9      	beq.n	800b30a <__sflush_r+0x1a>
 800b316:	2300      	movs	r3, #0
 800b318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b31c:	682f      	ldr	r7, [r5, #0]
 800b31e:	602b      	str	r3, [r5, #0]
 800b320:	d032      	beq.n	800b388 <__sflush_r+0x98>
 800b322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b324:	89a3      	ldrh	r3, [r4, #12]
 800b326:	075a      	lsls	r2, r3, #29
 800b328:	d505      	bpl.n	800b336 <__sflush_r+0x46>
 800b32a:	6863      	ldr	r3, [r4, #4]
 800b32c:	1ac0      	subs	r0, r0, r3
 800b32e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b330:	b10b      	cbz	r3, 800b336 <__sflush_r+0x46>
 800b332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b334:	1ac0      	subs	r0, r0, r3
 800b336:	2300      	movs	r3, #0
 800b338:	4602      	mov	r2, r0
 800b33a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b33c:	6a21      	ldr	r1, [r4, #32]
 800b33e:	4628      	mov	r0, r5
 800b340:	47b0      	blx	r6
 800b342:	1c43      	adds	r3, r0, #1
 800b344:	89a3      	ldrh	r3, [r4, #12]
 800b346:	d106      	bne.n	800b356 <__sflush_r+0x66>
 800b348:	6829      	ldr	r1, [r5, #0]
 800b34a:	291d      	cmp	r1, #29
 800b34c:	d82c      	bhi.n	800b3a8 <__sflush_r+0xb8>
 800b34e:	4a2a      	ldr	r2, [pc, #168]	; (800b3f8 <__sflush_r+0x108>)
 800b350:	40ca      	lsrs	r2, r1
 800b352:	07d6      	lsls	r6, r2, #31
 800b354:	d528      	bpl.n	800b3a8 <__sflush_r+0xb8>
 800b356:	2200      	movs	r2, #0
 800b358:	6062      	str	r2, [r4, #4]
 800b35a:	04d9      	lsls	r1, r3, #19
 800b35c:	6922      	ldr	r2, [r4, #16]
 800b35e:	6022      	str	r2, [r4, #0]
 800b360:	d504      	bpl.n	800b36c <__sflush_r+0x7c>
 800b362:	1c42      	adds	r2, r0, #1
 800b364:	d101      	bne.n	800b36a <__sflush_r+0x7a>
 800b366:	682b      	ldr	r3, [r5, #0]
 800b368:	b903      	cbnz	r3, 800b36c <__sflush_r+0x7c>
 800b36a:	6560      	str	r0, [r4, #84]	; 0x54
 800b36c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b36e:	602f      	str	r7, [r5, #0]
 800b370:	2900      	cmp	r1, #0
 800b372:	d0ca      	beq.n	800b30a <__sflush_r+0x1a>
 800b374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b378:	4299      	cmp	r1, r3
 800b37a:	d002      	beq.n	800b382 <__sflush_r+0x92>
 800b37c:	4628      	mov	r0, r5
 800b37e:	f7ff faa5 	bl	800a8cc <_free_r>
 800b382:	2000      	movs	r0, #0
 800b384:	6360      	str	r0, [r4, #52]	; 0x34
 800b386:	e7c1      	b.n	800b30c <__sflush_r+0x1c>
 800b388:	6a21      	ldr	r1, [r4, #32]
 800b38a:	2301      	movs	r3, #1
 800b38c:	4628      	mov	r0, r5
 800b38e:	47b0      	blx	r6
 800b390:	1c41      	adds	r1, r0, #1
 800b392:	d1c7      	bne.n	800b324 <__sflush_r+0x34>
 800b394:	682b      	ldr	r3, [r5, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d0c4      	beq.n	800b324 <__sflush_r+0x34>
 800b39a:	2b1d      	cmp	r3, #29
 800b39c:	d001      	beq.n	800b3a2 <__sflush_r+0xb2>
 800b39e:	2b16      	cmp	r3, #22
 800b3a0:	d101      	bne.n	800b3a6 <__sflush_r+0xb6>
 800b3a2:	602f      	str	r7, [r5, #0]
 800b3a4:	e7b1      	b.n	800b30a <__sflush_r+0x1a>
 800b3a6:	89a3      	ldrh	r3, [r4, #12]
 800b3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ac:	81a3      	strh	r3, [r4, #12]
 800b3ae:	e7ad      	b.n	800b30c <__sflush_r+0x1c>
 800b3b0:	690f      	ldr	r7, [r1, #16]
 800b3b2:	2f00      	cmp	r7, #0
 800b3b4:	d0a9      	beq.n	800b30a <__sflush_r+0x1a>
 800b3b6:	0793      	lsls	r3, r2, #30
 800b3b8:	680e      	ldr	r6, [r1, #0]
 800b3ba:	bf08      	it	eq
 800b3bc:	694b      	ldreq	r3, [r1, #20]
 800b3be:	600f      	str	r7, [r1, #0]
 800b3c0:	bf18      	it	ne
 800b3c2:	2300      	movne	r3, #0
 800b3c4:	eba6 0807 	sub.w	r8, r6, r7
 800b3c8:	608b      	str	r3, [r1, #8]
 800b3ca:	f1b8 0f00 	cmp.w	r8, #0
 800b3ce:	dd9c      	ble.n	800b30a <__sflush_r+0x1a>
 800b3d0:	6a21      	ldr	r1, [r4, #32]
 800b3d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3d4:	4643      	mov	r3, r8
 800b3d6:	463a      	mov	r2, r7
 800b3d8:	4628      	mov	r0, r5
 800b3da:	47b0      	blx	r6
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	dc06      	bgt.n	800b3ee <__sflush_r+0xfe>
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3e6:	81a3      	strh	r3, [r4, #12]
 800b3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ec:	e78e      	b.n	800b30c <__sflush_r+0x1c>
 800b3ee:	4407      	add	r7, r0
 800b3f0:	eba8 0800 	sub.w	r8, r8, r0
 800b3f4:	e7e9      	b.n	800b3ca <__sflush_r+0xda>
 800b3f6:	bf00      	nop
 800b3f8:	20400001 	.word	0x20400001

0800b3fc <_fflush_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	690b      	ldr	r3, [r1, #16]
 800b400:	4605      	mov	r5, r0
 800b402:	460c      	mov	r4, r1
 800b404:	b913      	cbnz	r3, 800b40c <_fflush_r+0x10>
 800b406:	2500      	movs	r5, #0
 800b408:	4628      	mov	r0, r5
 800b40a:	bd38      	pop	{r3, r4, r5, pc}
 800b40c:	b118      	cbz	r0, 800b416 <_fflush_r+0x1a>
 800b40e:	6983      	ldr	r3, [r0, #24]
 800b410:	b90b      	cbnz	r3, 800b416 <_fflush_r+0x1a>
 800b412:	f000 f887 	bl	800b524 <__sinit>
 800b416:	4b14      	ldr	r3, [pc, #80]	; (800b468 <_fflush_r+0x6c>)
 800b418:	429c      	cmp	r4, r3
 800b41a:	d11b      	bne.n	800b454 <_fflush_r+0x58>
 800b41c:	686c      	ldr	r4, [r5, #4]
 800b41e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d0ef      	beq.n	800b406 <_fflush_r+0xa>
 800b426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b428:	07d0      	lsls	r0, r2, #31
 800b42a:	d404      	bmi.n	800b436 <_fflush_r+0x3a>
 800b42c:	0599      	lsls	r1, r3, #22
 800b42e:	d402      	bmi.n	800b436 <_fflush_r+0x3a>
 800b430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b432:	f000 f915 	bl	800b660 <__retarget_lock_acquire_recursive>
 800b436:	4628      	mov	r0, r5
 800b438:	4621      	mov	r1, r4
 800b43a:	f7ff ff59 	bl	800b2f0 <__sflush_r>
 800b43e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b440:	07da      	lsls	r2, r3, #31
 800b442:	4605      	mov	r5, r0
 800b444:	d4e0      	bmi.n	800b408 <_fflush_r+0xc>
 800b446:	89a3      	ldrh	r3, [r4, #12]
 800b448:	059b      	lsls	r3, r3, #22
 800b44a:	d4dd      	bmi.n	800b408 <_fflush_r+0xc>
 800b44c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b44e:	f000 f908 	bl	800b662 <__retarget_lock_release_recursive>
 800b452:	e7d9      	b.n	800b408 <_fflush_r+0xc>
 800b454:	4b05      	ldr	r3, [pc, #20]	; (800b46c <_fflush_r+0x70>)
 800b456:	429c      	cmp	r4, r3
 800b458:	d101      	bne.n	800b45e <_fflush_r+0x62>
 800b45a:	68ac      	ldr	r4, [r5, #8]
 800b45c:	e7df      	b.n	800b41e <_fflush_r+0x22>
 800b45e:	4b04      	ldr	r3, [pc, #16]	; (800b470 <_fflush_r+0x74>)
 800b460:	429c      	cmp	r4, r3
 800b462:	bf08      	it	eq
 800b464:	68ec      	ldreq	r4, [r5, #12]
 800b466:	e7da      	b.n	800b41e <_fflush_r+0x22>
 800b468:	0800bd54 	.word	0x0800bd54
 800b46c:	0800bd74 	.word	0x0800bd74
 800b470:	0800bd34 	.word	0x0800bd34

0800b474 <std>:
 800b474:	2300      	movs	r3, #0
 800b476:	b510      	push	{r4, lr}
 800b478:	4604      	mov	r4, r0
 800b47a:	e9c0 3300 	strd	r3, r3, [r0]
 800b47e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b482:	6083      	str	r3, [r0, #8]
 800b484:	8181      	strh	r1, [r0, #12]
 800b486:	6643      	str	r3, [r0, #100]	; 0x64
 800b488:	81c2      	strh	r2, [r0, #14]
 800b48a:	6183      	str	r3, [r0, #24]
 800b48c:	4619      	mov	r1, r3
 800b48e:	2208      	movs	r2, #8
 800b490:	305c      	adds	r0, #92	; 0x5c
 800b492:	f7fd fb5b 	bl	8008b4c <memset>
 800b496:	4b05      	ldr	r3, [pc, #20]	; (800b4ac <std+0x38>)
 800b498:	6263      	str	r3, [r4, #36]	; 0x24
 800b49a:	4b05      	ldr	r3, [pc, #20]	; (800b4b0 <std+0x3c>)
 800b49c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b49e:	4b05      	ldr	r3, [pc, #20]	; (800b4b4 <std+0x40>)
 800b4a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4a2:	4b05      	ldr	r3, [pc, #20]	; (800b4b8 <std+0x44>)
 800b4a4:	6224      	str	r4, [r4, #32]
 800b4a6:	6323      	str	r3, [r4, #48]	; 0x30
 800b4a8:	bd10      	pop	{r4, pc}
 800b4aa:	bf00      	nop
 800b4ac:	0800b7c9 	.word	0x0800b7c9
 800b4b0:	0800b7eb 	.word	0x0800b7eb
 800b4b4:	0800b823 	.word	0x0800b823
 800b4b8:	0800b847 	.word	0x0800b847

0800b4bc <_cleanup_r>:
 800b4bc:	4901      	ldr	r1, [pc, #4]	; (800b4c4 <_cleanup_r+0x8>)
 800b4be:	f000 b8af 	b.w	800b620 <_fwalk_reent>
 800b4c2:	bf00      	nop
 800b4c4:	0800b3fd 	.word	0x0800b3fd

0800b4c8 <__sfmoreglue>:
 800b4c8:	b570      	push	{r4, r5, r6, lr}
 800b4ca:	2268      	movs	r2, #104	; 0x68
 800b4cc:	1e4d      	subs	r5, r1, #1
 800b4ce:	4355      	muls	r5, r2
 800b4d0:	460e      	mov	r6, r1
 800b4d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4d6:	f7ff fa65 	bl	800a9a4 <_malloc_r>
 800b4da:	4604      	mov	r4, r0
 800b4dc:	b140      	cbz	r0, 800b4f0 <__sfmoreglue+0x28>
 800b4de:	2100      	movs	r1, #0
 800b4e0:	e9c0 1600 	strd	r1, r6, [r0]
 800b4e4:	300c      	adds	r0, #12
 800b4e6:	60a0      	str	r0, [r4, #8]
 800b4e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4ec:	f7fd fb2e 	bl	8008b4c <memset>
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	bd70      	pop	{r4, r5, r6, pc}

0800b4f4 <__sfp_lock_acquire>:
 800b4f4:	4801      	ldr	r0, [pc, #4]	; (800b4fc <__sfp_lock_acquire+0x8>)
 800b4f6:	f000 b8b3 	b.w	800b660 <__retarget_lock_acquire_recursive>
 800b4fa:	bf00      	nop
 800b4fc:	2000203d 	.word	0x2000203d

0800b500 <__sfp_lock_release>:
 800b500:	4801      	ldr	r0, [pc, #4]	; (800b508 <__sfp_lock_release+0x8>)
 800b502:	f000 b8ae 	b.w	800b662 <__retarget_lock_release_recursive>
 800b506:	bf00      	nop
 800b508:	2000203d 	.word	0x2000203d

0800b50c <__sinit_lock_acquire>:
 800b50c:	4801      	ldr	r0, [pc, #4]	; (800b514 <__sinit_lock_acquire+0x8>)
 800b50e:	f000 b8a7 	b.w	800b660 <__retarget_lock_acquire_recursive>
 800b512:	bf00      	nop
 800b514:	2000203e 	.word	0x2000203e

0800b518 <__sinit_lock_release>:
 800b518:	4801      	ldr	r0, [pc, #4]	; (800b520 <__sinit_lock_release+0x8>)
 800b51a:	f000 b8a2 	b.w	800b662 <__retarget_lock_release_recursive>
 800b51e:	bf00      	nop
 800b520:	2000203e 	.word	0x2000203e

0800b524 <__sinit>:
 800b524:	b510      	push	{r4, lr}
 800b526:	4604      	mov	r4, r0
 800b528:	f7ff fff0 	bl	800b50c <__sinit_lock_acquire>
 800b52c:	69a3      	ldr	r3, [r4, #24]
 800b52e:	b11b      	cbz	r3, 800b538 <__sinit+0x14>
 800b530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b534:	f7ff bff0 	b.w	800b518 <__sinit_lock_release>
 800b538:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b53c:	6523      	str	r3, [r4, #80]	; 0x50
 800b53e:	4b13      	ldr	r3, [pc, #76]	; (800b58c <__sinit+0x68>)
 800b540:	4a13      	ldr	r2, [pc, #76]	; (800b590 <__sinit+0x6c>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	62a2      	str	r2, [r4, #40]	; 0x28
 800b546:	42a3      	cmp	r3, r4
 800b548:	bf04      	itt	eq
 800b54a:	2301      	moveq	r3, #1
 800b54c:	61a3      	streq	r3, [r4, #24]
 800b54e:	4620      	mov	r0, r4
 800b550:	f000 f820 	bl	800b594 <__sfp>
 800b554:	6060      	str	r0, [r4, #4]
 800b556:	4620      	mov	r0, r4
 800b558:	f000 f81c 	bl	800b594 <__sfp>
 800b55c:	60a0      	str	r0, [r4, #8]
 800b55e:	4620      	mov	r0, r4
 800b560:	f000 f818 	bl	800b594 <__sfp>
 800b564:	2200      	movs	r2, #0
 800b566:	60e0      	str	r0, [r4, #12]
 800b568:	2104      	movs	r1, #4
 800b56a:	6860      	ldr	r0, [r4, #4]
 800b56c:	f7ff ff82 	bl	800b474 <std>
 800b570:	68a0      	ldr	r0, [r4, #8]
 800b572:	2201      	movs	r2, #1
 800b574:	2109      	movs	r1, #9
 800b576:	f7ff ff7d 	bl	800b474 <std>
 800b57a:	68e0      	ldr	r0, [r4, #12]
 800b57c:	2202      	movs	r2, #2
 800b57e:	2112      	movs	r1, #18
 800b580:	f7ff ff78 	bl	800b474 <std>
 800b584:	2301      	movs	r3, #1
 800b586:	61a3      	str	r3, [r4, #24]
 800b588:	e7d2      	b.n	800b530 <__sinit+0xc>
 800b58a:	bf00      	nop
 800b58c:	0800b9b8 	.word	0x0800b9b8
 800b590:	0800b4bd 	.word	0x0800b4bd

0800b594 <__sfp>:
 800b594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b596:	4607      	mov	r7, r0
 800b598:	f7ff ffac 	bl	800b4f4 <__sfp_lock_acquire>
 800b59c:	4b1e      	ldr	r3, [pc, #120]	; (800b618 <__sfp+0x84>)
 800b59e:	681e      	ldr	r6, [r3, #0]
 800b5a0:	69b3      	ldr	r3, [r6, #24]
 800b5a2:	b913      	cbnz	r3, 800b5aa <__sfp+0x16>
 800b5a4:	4630      	mov	r0, r6
 800b5a6:	f7ff ffbd 	bl	800b524 <__sinit>
 800b5aa:	3648      	adds	r6, #72	; 0x48
 800b5ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	d503      	bpl.n	800b5bc <__sfp+0x28>
 800b5b4:	6833      	ldr	r3, [r6, #0]
 800b5b6:	b30b      	cbz	r3, 800b5fc <__sfp+0x68>
 800b5b8:	6836      	ldr	r6, [r6, #0]
 800b5ba:	e7f7      	b.n	800b5ac <__sfp+0x18>
 800b5bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5c0:	b9d5      	cbnz	r5, 800b5f8 <__sfp+0x64>
 800b5c2:	4b16      	ldr	r3, [pc, #88]	; (800b61c <__sfp+0x88>)
 800b5c4:	60e3      	str	r3, [r4, #12]
 800b5c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b5ca:	6665      	str	r5, [r4, #100]	; 0x64
 800b5cc:	f000 f847 	bl	800b65e <__retarget_lock_init_recursive>
 800b5d0:	f7ff ff96 	bl	800b500 <__sfp_lock_release>
 800b5d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b5d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b5dc:	6025      	str	r5, [r4, #0]
 800b5de:	61a5      	str	r5, [r4, #24]
 800b5e0:	2208      	movs	r2, #8
 800b5e2:	4629      	mov	r1, r5
 800b5e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5e8:	f7fd fab0 	bl	8008b4c <memset>
 800b5ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5f8:	3468      	adds	r4, #104	; 0x68
 800b5fa:	e7d9      	b.n	800b5b0 <__sfp+0x1c>
 800b5fc:	2104      	movs	r1, #4
 800b5fe:	4638      	mov	r0, r7
 800b600:	f7ff ff62 	bl	800b4c8 <__sfmoreglue>
 800b604:	4604      	mov	r4, r0
 800b606:	6030      	str	r0, [r6, #0]
 800b608:	2800      	cmp	r0, #0
 800b60a:	d1d5      	bne.n	800b5b8 <__sfp+0x24>
 800b60c:	f7ff ff78 	bl	800b500 <__sfp_lock_release>
 800b610:	230c      	movs	r3, #12
 800b612:	603b      	str	r3, [r7, #0]
 800b614:	e7ee      	b.n	800b5f4 <__sfp+0x60>
 800b616:	bf00      	nop
 800b618:	0800b9b8 	.word	0x0800b9b8
 800b61c:	ffff0001 	.word	0xffff0001

0800b620 <_fwalk_reent>:
 800b620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b624:	4606      	mov	r6, r0
 800b626:	4688      	mov	r8, r1
 800b628:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b62c:	2700      	movs	r7, #0
 800b62e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b632:	f1b9 0901 	subs.w	r9, r9, #1
 800b636:	d505      	bpl.n	800b644 <_fwalk_reent+0x24>
 800b638:	6824      	ldr	r4, [r4, #0]
 800b63a:	2c00      	cmp	r4, #0
 800b63c:	d1f7      	bne.n	800b62e <_fwalk_reent+0xe>
 800b63e:	4638      	mov	r0, r7
 800b640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b644:	89ab      	ldrh	r3, [r5, #12]
 800b646:	2b01      	cmp	r3, #1
 800b648:	d907      	bls.n	800b65a <_fwalk_reent+0x3a>
 800b64a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b64e:	3301      	adds	r3, #1
 800b650:	d003      	beq.n	800b65a <_fwalk_reent+0x3a>
 800b652:	4629      	mov	r1, r5
 800b654:	4630      	mov	r0, r6
 800b656:	47c0      	blx	r8
 800b658:	4307      	orrs	r7, r0
 800b65a:	3568      	adds	r5, #104	; 0x68
 800b65c:	e7e9      	b.n	800b632 <_fwalk_reent+0x12>

0800b65e <__retarget_lock_init_recursive>:
 800b65e:	4770      	bx	lr

0800b660 <__retarget_lock_acquire_recursive>:
 800b660:	4770      	bx	lr

0800b662 <__retarget_lock_release_recursive>:
 800b662:	4770      	bx	lr

0800b664 <__swhatbuf_r>:
 800b664:	b570      	push	{r4, r5, r6, lr}
 800b666:	460e      	mov	r6, r1
 800b668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b66c:	2900      	cmp	r1, #0
 800b66e:	b096      	sub	sp, #88	; 0x58
 800b670:	4614      	mov	r4, r2
 800b672:	461d      	mov	r5, r3
 800b674:	da08      	bge.n	800b688 <__swhatbuf_r+0x24>
 800b676:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	602a      	str	r2, [r5, #0]
 800b67e:	061a      	lsls	r2, r3, #24
 800b680:	d410      	bmi.n	800b6a4 <__swhatbuf_r+0x40>
 800b682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b686:	e00e      	b.n	800b6a6 <__swhatbuf_r+0x42>
 800b688:	466a      	mov	r2, sp
 800b68a:	f000 f903 	bl	800b894 <_fstat_r>
 800b68e:	2800      	cmp	r0, #0
 800b690:	dbf1      	blt.n	800b676 <__swhatbuf_r+0x12>
 800b692:	9a01      	ldr	r2, [sp, #4]
 800b694:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b698:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b69c:	425a      	negs	r2, r3
 800b69e:	415a      	adcs	r2, r3
 800b6a0:	602a      	str	r2, [r5, #0]
 800b6a2:	e7ee      	b.n	800b682 <__swhatbuf_r+0x1e>
 800b6a4:	2340      	movs	r3, #64	; 0x40
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	6023      	str	r3, [r4, #0]
 800b6aa:	b016      	add	sp, #88	; 0x58
 800b6ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b6b0 <__smakebuf_r>:
 800b6b0:	898b      	ldrh	r3, [r1, #12]
 800b6b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6b4:	079d      	lsls	r5, r3, #30
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	460c      	mov	r4, r1
 800b6ba:	d507      	bpl.n	800b6cc <__smakebuf_r+0x1c>
 800b6bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	6123      	str	r3, [r4, #16]
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	6163      	str	r3, [r4, #20]
 800b6c8:	b002      	add	sp, #8
 800b6ca:	bd70      	pop	{r4, r5, r6, pc}
 800b6cc:	ab01      	add	r3, sp, #4
 800b6ce:	466a      	mov	r2, sp
 800b6d0:	f7ff ffc8 	bl	800b664 <__swhatbuf_r>
 800b6d4:	9900      	ldr	r1, [sp, #0]
 800b6d6:	4605      	mov	r5, r0
 800b6d8:	4630      	mov	r0, r6
 800b6da:	f7ff f963 	bl	800a9a4 <_malloc_r>
 800b6de:	b948      	cbnz	r0, 800b6f4 <__smakebuf_r+0x44>
 800b6e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6e4:	059a      	lsls	r2, r3, #22
 800b6e6:	d4ef      	bmi.n	800b6c8 <__smakebuf_r+0x18>
 800b6e8:	f023 0303 	bic.w	r3, r3, #3
 800b6ec:	f043 0302 	orr.w	r3, r3, #2
 800b6f0:	81a3      	strh	r3, [r4, #12]
 800b6f2:	e7e3      	b.n	800b6bc <__smakebuf_r+0xc>
 800b6f4:	4b0d      	ldr	r3, [pc, #52]	; (800b72c <__smakebuf_r+0x7c>)
 800b6f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b6f8:	89a3      	ldrh	r3, [r4, #12]
 800b6fa:	6020      	str	r0, [r4, #0]
 800b6fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b700:	81a3      	strh	r3, [r4, #12]
 800b702:	9b00      	ldr	r3, [sp, #0]
 800b704:	6163      	str	r3, [r4, #20]
 800b706:	9b01      	ldr	r3, [sp, #4]
 800b708:	6120      	str	r0, [r4, #16]
 800b70a:	b15b      	cbz	r3, 800b724 <__smakebuf_r+0x74>
 800b70c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b710:	4630      	mov	r0, r6
 800b712:	f000 f8d1 	bl	800b8b8 <_isatty_r>
 800b716:	b128      	cbz	r0, 800b724 <__smakebuf_r+0x74>
 800b718:	89a3      	ldrh	r3, [r4, #12]
 800b71a:	f023 0303 	bic.w	r3, r3, #3
 800b71e:	f043 0301 	orr.w	r3, r3, #1
 800b722:	81a3      	strh	r3, [r4, #12]
 800b724:	89a0      	ldrh	r0, [r4, #12]
 800b726:	4305      	orrs	r5, r0
 800b728:	81a5      	strh	r5, [r4, #12]
 800b72a:	e7cd      	b.n	800b6c8 <__smakebuf_r+0x18>
 800b72c:	0800b4bd 	.word	0x0800b4bd

0800b730 <_malloc_usable_size_r>:
 800b730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b734:	1f18      	subs	r0, r3, #4
 800b736:	2b00      	cmp	r3, #0
 800b738:	bfbc      	itt	lt
 800b73a:	580b      	ldrlt	r3, [r1, r0]
 800b73c:	18c0      	addlt	r0, r0, r3
 800b73e:	4770      	bx	lr

0800b740 <_raise_r>:
 800b740:	291f      	cmp	r1, #31
 800b742:	b538      	push	{r3, r4, r5, lr}
 800b744:	4604      	mov	r4, r0
 800b746:	460d      	mov	r5, r1
 800b748:	d904      	bls.n	800b754 <_raise_r+0x14>
 800b74a:	2316      	movs	r3, #22
 800b74c:	6003      	str	r3, [r0, #0]
 800b74e:	f04f 30ff 	mov.w	r0, #4294967295
 800b752:	bd38      	pop	{r3, r4, r5, pc}
 800b754:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b756:	b112      	cbz	r2, 800b75e <_raise_r+0x1e>
 800b758:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b75c:	b94b      	cbnz	r3, 800b772 <_raise_r+0x32>
 800b75e:	4620      	mov	r0, r4
 800b760:	f000 f830 	bl	800b7c4 <_getpid_r>
 800b764:	462a      	mov	r2, r5
 800b766:	4601      	mov	r1, r0
 800b768:	4620      	mov	r0, r4
 800b76a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b76e:	f000 b817 	b.w	800b7a0 <_kill_r>
 800b772:	2b01      	cmp	r3, #1
 800b774:	d00a      	beq.n	800b78c <_raise_r+0x4c>
 800b776:	1c59      	adds	r1, r3, #1
 800b778:	d103      	bne.n	800b782 <_raise_r+0x42>
 800b77a:	2316      	movs	r3, #22
 800b77c:	6003      	str	r3, [r0, #0]
 800b77e:	2001      	movs	r0, #1
 800b780:	e7e7      	b.n	800b752 <_raise_r+0x12>
 800b782:	2400      	movs	r4, #0
 800b784:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b788:	4628      	mov	r0, r5
 800b78a:	4798      	blx	r3
 800b78c:	2000      	movs	r0, #0
 800b78e:	e7e0      	b.n	800b752 <_raise_r+0x12>

0800b790 <raise>:
 800b790:	4b02      	ldr	r3, [pc, #8]	; (800b79c <raise+0xc>)
 800b792:	4601      	mov	r1, r0
 800b794:	6818      	ldr	r0, [r3, #0]
 800b796:	f7ff bfd3 	b.w	800b740 <_raise_r>
 800b79a:	bf00      	nop
 800b79c:	200000fc 	.word	0x200000fc

0800b7a0 <_kill_r>:
 800b7a0:	b538      	push	{r3, r4, r5, lr}
 800b7a2:	4d07      	ldr	r5, [pc, #28]	; (800b7c0 <_kill_r+0x20>)
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	4608      	mov	r0, r1
 800b7aa:	4611      	mov	r1, r2
 800b7ac:	602b      	str	r3, [r5, #0]
 800b7ae:	f7f5 ff71 	bl	8001694 <_kill>
 800b7b2:	1c43      	adds	r3, r0, #1
 800b7b4:	d102      	bne.n	800b7bc <_kill_r+0x1c>
 800b7b6:	682b      	ldr	r3, [r5, #0]
 800b7b8:	b103      	cbz	r3, 800b7bc <_kill_r+0x1c>
 800b7ba:	6023      	str	r3, [r4, #0]
 800b7bc:	bd38      	pop	{r3, r4, r5, pc}
 800b7be:	bf00      	nop
 800b7c0:	20002038 	.word	0x20002038

0800b7c4 <_getpid_r>:
 800b7c4:	f7f5 bf5e 	b.w	8001684 <_getpid>

0800b7c8 <__sread>:
 800b7c8:	b510      	push	{r4, lr}
 800b7ca:	460c      	mov	r4, r1
 800b7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d0:	f000 f894 	bl	800b8fc <_read_r>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	bfab      	itete	ge
 800b7d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b7da:	89a3      	ldrhlt	r3, [r4, #12]
 800b7dc:	181b      	addge	r3, r3, r0
 800b7de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b7e2:	bfac      	ite	ge
 800b7e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b7e6:	81a3      	strhlt	r3, [r4, #12]
 800b7e8:	bd10      	pop	{r4, pc}

0800b7ea <__swrite>:
 800b7ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ee:	461f      	mov	r7, r3
 800b7f0:	898b      	ldrh	r3, [r1, #12]
 800b7f2:	05db      	lsls	r3, r3, #23
 800b7f4:	4605      	mov	r5, r0
 800b7f6:	460c      	mov	r4, r1
 800b7f8:	4616      	mov	r6, r2
 800b7fa:	d505      	bpl.n	800b808 <__swrite+0x1e>
 800b7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b800:	2302      	movs	r3, #2
 800b802:	2200      	movs	r2, #0
 800b804:	f000 f868 	bl	800b8d8 <_lseek_r>
 800b808:	89a3      	ldrh	r3, [r4, #12]
 800b80a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b80e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b812:	81a3      	strh	r3, [r4, #12]
 800b814:	4632      	mov	r2, r6
 800b816:	463b      	mov	r3, r7
 800b818:	4628      	mov	r0, r5
 800b81a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b81e:	f000 b817 	b.w	800b850 <_write_r>

0800b822 <__sseek>:
 800b822:	b510      	push	{r4, lr}
 800b824:	460c      	mov	r4, r1
 800b826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b82a:	f000 f855 	bl	800b8d8 <_lseek_r>
 800b82e:	1c43      	adds	r3, r0, #1
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	bf15      	itete	ne
 800b834:	6560      	strne	r0, [r4, #84]	; 0x54
 800b836:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b83a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b83e:	81a3      	strheq	r3, [r4, #12]
 800b840:	bf18      	it	ne
 800b842:	81a3      	strhne	r3, [r4, #12]
 800b844:	bd10      	pop	{r4, pc}

0800b846 <__sclose>:
 800b846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b84a:	f000 b813 	b.w	800b874 <_close_r>
	...

0800b850 <_write_r>:
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	4d07      	ldr	r5, [pc, #28]	; (800b870 <_write_r+0x20>)
 800b854:	4604      	mov	r4, r0
 800b856:	4608      	mov	r0, r1
 800b858:	4611      	mov	r1, r2
 800b85a:	2200      	movs	r2, #0
 800b85c:	602a      	str	r2, [r5, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	f7f5 ff4f 	bl	8001702 <_write>
 800b864:	1c43      	adds	r3, r0, #1
 800b866:	d102      	bne.n	800b86e <_write_r+0x1e>
 800b868:	682b      	ldr	r3, [r5, #0]
 800b86a:	b103      	cbz	r3, 800b86e <_write_r+0x1e>
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	bd38      	pop	{r3, r4, r5, pc}
 800b870:	20002038 	.word	0x20002038

0800b874 <_close_r>:
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	4d06      	ldr	r5, [pc, #24]	; (800b890 <_close_r+0x1c>)
 800b878:	2300      	movs	r3, #0
 800b87a:	4604      	mov	r4, r0
 800b87c:	4608      	mov	r0, r1
 800b87e:	602b      	str	r3, [r5, #0]
 800b880:	f7f5 ff5b 	bl	800173a <_close>
 800b884:	1c43      	adds	r3, r0, #1
 800b886:	d102      	bne.n	800b88e <_close_r+0x1a>
 800b888:	682b      	ldr	r3, [r5, #0]
 800b88a:	b103      	cbz	r3, 800b88e <_close_r+0x1a>
 800b88c:	6023      	str	r3, [r4, #0]
 800b88e:	bd38      	pop	{r3, r4, r5, pc}
 800b890:	20002038 	.word	0x20002038

0800b894 <_fstat_r>:
 800b894:	b538      	push	{r3, r4, r5, lr}
 800b896:	4d07      	ldr	r5, [pc, #28]	; (800b8b4 <_fstat_r+0x20>)
 800b898:	2300      	movs	r3, #0
 800b89a:	4604      	mov	r4, r0
 800b89c:	4608      	mov	r0, r1
 800b89e:	4611      	mov	r1, r2
 800b8a0:	602b      	str	r3, [r5, #0]
 800b8a2:	f7f5 ff56 	bl	8001752 <_fstat>
 800b8a6:	1c43      	adds	r3, r0, #1
 800b8a8:	d102      	bne.n	800b8b0 <_fstat_r+0x1c>
 800b8aa:	682b      	ldr	r3, [r5, #0]
 800b8ac:	b103      	cbz	r3, 800b8b0 <_fstat_r+0x1c>
 800b8ae:	6023      	str	r3, [r4, #0]
 800b8b0:	bd38      	pop	{r3, r4, r5, pc}
 800b8b2:	bf00      	nop
 800b8b4:	20002038 	.word	0x20002038

0800b8b8 <_isatty_r>:
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	4d06      	ldr	r5, [pc, #24]	; (800b8d4 <_isatty_r+0x1c>)
 800b8bc:	2300      	movs	r3, #0
 800b8be:	4604      	mov	r4, r0
 800b8c0:	4608      	mov	r0, r1
 800b8c2:	602b      	str	r3, [r5, #0]
 800b8c4:	f7f5 ff55 	bl	8001772 <_isatty>
 800b8c8:	1c43      	adds	r3, r0, #1
 800b8ca:	d102      	bne.n	800b8d2 <_isatty_r+0x1a>
 800b8cc:	682b      	ldr	r3, [r5, #0]
 800b8ce:	b103      	cbz	r3, 800b8d2 <_isatty_r+0x1a>
 800b8d0:	6023      	str	r3, [r4, #0]
 800b8d2:	bd38      	pop	{r3, r4, r5, pc}
 800b8d4:	20002038 	.word	0x20002038

0800b8d8 <_lseek_r>:
 800b8d8:	b538      	push	{r3, r4, r5, lr}
 800b8da:	4d07      	ldr	r5, [pc, #28]	; (800b8f8 <_lseek_r+0x20>)
 800b8dc:	4604      	mov	r4, r0
 800b8de:	4608      	mov	r0, r1
 800b8e0:	4611      	mov	r1, r2
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	602a      	str	r2, [r5, #0]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	f7f5 ff4e 	bl	8001788 <_lseek>
 800b8ec:	1c43      	adds	r3, r0, #1
 800b8ee:	d102      	bne.n	800b8f6 <_lseek_r+0x1e>
 800b8f0:	682b      	ldr	r3, [r5, #0]
 800b8f2:	b103      	cbz	r3, 800b8f6 <_lseek_r+0x1e>
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	bd38      	pop	{r3, r4, r5, pc}
 800b8f8:	20002038 	.word	0x20002038

0800b8fc <_read_r>:
 800b8fc:	b538      	push	{r3, r4, r5, lr}
 800b8fe:	4d07      	ldr	r5, [pc, #28]	; (800b91c <_read_r+0x20>)
 800b900:	4604      	mov	r4, r0
 800b902:	4608      	mov	r0, r1
 800b904:	4611      	mov	r1, r2
 800b906:	2200      	movs	r2, #0
 800b908:	602a      	str	r2, [r5, #0]
 800b90a:	461a      	mov	r2, r3
 800b90c:	f7f5 fedc 	bl	80016c8 <_read>
 800b910:	1c43      	adds	r3, r0, #1
 800b912:	d102      	bne.n	800b91a <_read_r+0x1e>
 800b914:	682b      	ldr	r3, [r5, #0]
 800b916:	b103      	cbz	r3, 800b91a <_read_r+0x1e>
 800b918:	6023      	str	r3, [r4, #0]
 800b91a:	bd38      	pop	{r3, r4, r5, pc}
 800b91c:	20002038 	.word	0x20002038

0800b920 <_init>:
 800b920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b922:	bf00      	nop
 800b924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b926:	bc08      	pop	{r3}
 800b928:	469e      	mov	lr, r3
 800b92a:	4770      	bx	lr

0800b92c <_fini>:
 800b92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92e:	bf00      	nop
 800b930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b932:	bc08      	pop	{r3}
 800b934:	469e      	mov	lr, r3
 800b936:	4770      	bx	lr
