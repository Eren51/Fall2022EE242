
usbconnect2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0800b240  0800b240  0001b240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6ac  0800b6ac  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6ac  0800b6ac  0001b6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6b4  0800b6b4  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6b4  0800b6b4  0001b6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6b8  0800b6b8  0001b6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800b6bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202cc  2**0
                  CONTENTS
 10 .bss          00001d68  200002cc  200002cc  000202cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002034  20002034  000202cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013a35  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000315b  00000000  00000000  00033d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  00036e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ff8  00000000  00000000  00038000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000247b4  00000000  00000000  00038ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014f40  00000000  00000000  0005d7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cddfc  00000000  00000000  000726ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001404e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a44  00000000  00000000  00140538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002cc 	.word	0x200002cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b224 	.word	0x0800b224

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d0 	.word	0x200002d0
 80001cc:	0800b224 	.word	0x0800b224

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed2:	f000 fbe9 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed6:	f000 f8c9 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eda:	f000 f99d 	bl	8001218 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000ede:	f006 fd43 	bl	8007968 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8000ee2:	f000 f92d 	bl	8001140 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000ee6:	f000 f961 	bl	80011ac <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  CDC_Transmit_FS("hello", strlen("hello"));
 8000eea:	2105      	movs	r1, #5
 8000eec:	484d      	ldr	r0, [pc, #308]	; (8001024 <main+0x158>)
 8000eee:	f006 fe13 	bl	8007b18 <CDC_Transmit_FS>

	state=idle;
 8000ef2:	4b4d      	ldr	r3, [pc, #308]	; (8001028 <main+0x15c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
	  //CDC_Transmit_FS("Don't set aslı's pin", strlen("Don't set aslı's pin"));
	 // HAL_Delay(100);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch (flag)
 8000ef8:	4b4c      	ldr	r3, [pc, #304]	; (800102c <main+0x160>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <main+0x3a>
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d052      	beq.n	8000faa <main+0xde>
 8000f04:	e7f8      	b.n	8000ef8 <main+0x2c>
	  {
	  case 0:
		    switch (state)
 8000f06:	4b48      	ldr	r3, [pc, #288]	; (8001028 <main+0x15c>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d01c      	beq.n	8000f48 <main+0x7c>
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	f300 8083 	bgt.w	800101a <main+0x14e>
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <main+0x52>
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d007      	beq.n	8000f2c <main+0x60>

		    }



		  break;
 8000f1c:	e07d      	b.n	800101a <main+0x14e>
		    	 TIM7->CNT=0;
 8000f1e:	4b44      	ldr	r3, [pc, #272]	; (8001030 <main+0x164>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24
		    	HAL_TIM_Base_Start_IT(&htim7);
 8000f24:	4843      	ldr	r0, [pc, #268]	; (8001034 <main+0x168>)
 8000f26:	f002 ff4d 	bl	8003dc4 <HAL_TIM_Base_Start_IT>
		    	break;
 8000f2a:	e03d      	b.n	8000fa8 <main+0xdc>
		    	 TIM6->CNT=0;
 8000f2c:	4b42      	ldr	r3, [pc, #264]	; (8001038 <main+0x16c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24
		    	 timebetweenbutton=TIM7->CNT;
 8000f32:	4b3f      	ldr	r3, [pc, #252]	; (8001030 <main+0x164>)
 8000f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f36:	4a41      	ldr	r2, [pc, #260]	; (800103c <main+0x170>)
 8000f38:	6013      	str	r3, [r2, #0]
		    	HAL_TIM_Base_Stop_IT(&htim7);
 8000f3a:	483e      	ldr	r0, [pc, #248]	; (8001034 <main+0x168>)
 8000f3c:	f002 ffb2 	bl	8003ea4 <HAL_TIM_Base_Stop_IT>
		    	HAL_TIM_Base_Start(&htim6);
 8000f40:	483f      	ldr	r0, [pc, #252]	; (8001040 <main+0x174>)
 8000f42:	f002 feaf 	bl	8003ca4 <HAL_TIM_Base_Start>
		    	break;
 8000f46:	e02f      	b.n	8000fa8 <main+0xdc>
		    HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000f48:	2006      	movs	r0, #6
 8000f4a:	f000 fd6c 	bl	8001a26 <HAL_NVIC_DisableIRQ>
		    timinbuttonpress=TIM6->CNT;
 8000f4e:	4b3a      	ldr	r3, [pc, #232]	; (8001038 <main+0x16c>)
 8000f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f52:	4a3c      	ldr	r2, [pc, #240]	; (8001044 <main+0x178>)
 8000f54:	6013      	str	r3, [r2, #0]
		    HAL_TIM_Base_Stop(&htim6);
 8000f56:	483a      	ldr	r0, [pc, #232]	; (8001040 <main+0x174>)
 8000f58:	f002 ff0c 	bl	8003d74 <HAL_TIM_Base_Stop>
	        HAL_Delay(20);	  //this is 100ms
 8000f5c:	2014      	movs	r0, #20
 8000f5e:	f000 fc15 	bl	800178c <HAL_Delay>
	        HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f62:	2006      	movs	r0, #6
 8000f64:	f000 fd51 	bl	8001a0a <HAL_NVIC_EnableIRQ>
	        state=idle;
 8000f68:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <main+0x15c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
	        snprintf(charbuff,sizeof(charbuff),"%d,%d\n", timebetweenbutton+periodcount*65532,timinbuttonpress );
 8000f6e:	4b36      	ldr	r3, [pc, #216]	; (8001048 <main+0x17c>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	4613      	mov	r3, r2
 8000f74:	039b      	lsls	r3, r3, #14
 8000f76:	1a9b      	subs	r3, r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b2f      	ldr	r3, [pc, #188]	; (800103c <main+0x170>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	441a      	add	r2, r3
 8000f82:	4b30      	ldr	r3, [pc, #192]	; (8001044 <main+0x178>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	4a30      	ldr	r2, [pc, #192]	; (800104c <main+0x180>)
 8000f8c:	2140      	movs	r1, #64	; 0x40
 8000f8e:	4830      	ldr	r0, [pc, #192]	; (8001050 <main+0x184>)
 8000f90:	f007 fec8 	bl	8008d24 <sniprintf>
	       		CDC_Transmit_FS(charbuff, strlen(charbuff));
 8000f94:	482e      	ldr	r0, [pc, #184]	; (8001050 <main+0x184>)
 8000f96:	f7ff f925 	bl	80001e4 <strlen>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	482b      	ldr	r0, [pc, #172]	; (8001050 <main+0x184>)
 8000fa2:	f006 fdb9 	bl	8007b18 <CDC_Transmit_FS>
   		    break;
 8000fa6:	bf00      	nop
		  break;
 8000fa8:	e037      	b.n	800101a <main+0x14e>
	  case 1:
		  flag=0;
 8000faa:	4b20      	ldr	r3, [pc, #128]	; (800102c <main+0x160>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	801a      	strh	r2, [r3, #0]
		  if (!strcmp(externbuffer,"orangeon"))
 8000fb0:	4928      	ldr	r1, [pc, #160]	; (8001054 <main+0x188>)
 8000fb2:	4829      	ldr	r0, [pc, #164]	; (8001058 <main+0x18c>)
 8000fb4:	f7ff f90c 	bl	80001d0 <strcmp>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d105      	bne.n	8000fca <main+0xfe>
		 		  {
		 			HAL_GPIO_WritePin(orangeled_GPIO_Port, orangeled_Pin, 1   );
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc4:	4825      	ldr	r0, [pc, #148]	; (800105c <main+0x190>)
 8000fc6:	f000 fefd 	bl	8001dc4 <HAL_GPIO_WritePin>

		 		  }
		 		  if (!strcmp(externbuffer,"orangeof"))
 8000fca:	4925      	ldr	r1, [pc, #148]	; (8001060 <main+0x194>)
 8000fcc:	4822      	ldr	r0, [pc, #136]	; (8001058 <main+0x18c>)
 8000fce:	f7ff f8ff 	bl	80001d0 <strcmp>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d105      	bne.n	8000fe4 <main+0x118>
		 		  		  {
		 		  			HAL_GPIO_WritePin(orangeled_GPIO_Port, orangeled_Pin, 0  );
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fde:	481f      	ldr	r0, [pc, #124]	; (800105c <main+0x190>)
 8000fe0:	f000 fef0 	bl	8001dc4 <HAL_GPIO_WritePin>

		 		  		  }
		 		  if (!strcmp(externbuffer,"redof"))
 8000fe4:	491f      	ldr	r1, [pc, #124]	; (8001064 <main+0x198>)
 8000fe6:	481c      	ldr	r0, [pc, #112]	; (8001058 <main+0x18c>)
 8000fe8:	f7ff f8f2 	bl	80001d0 <strcmp>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d105      	bne.n	8000ffe <main+0x132>
		 		 		  		  {
		 		 		  			HAL_GPIO_WritePin(redled_GPIO_Port, redled_Pin, 0  );
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff8:	4818      	ldr	r0, [pc, #96]	; (800105c <main+0x190>)
 8000ffa:	f000 fee3 	bl	8001dc4 <HAL_GPIO_WritePin>

		 		 		  		  }
		 		  if (!strcmp(externbuffer,"redon"))
 8000ffe:	491a      	ldr	r1, [pc, #104]	; (8001068 <main+0x19c>)
 8001000:	4815      	ldr	r0, [pc, #84]	; (8001058 <main+0x18c>)
 8001002:	f7ff f8e5 	bl	80001d0 <strcmp>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d108      	bne.n	800101e <main+0x152>
		 		  		 		  		  {
		 		  		 		  			HAL_GPIO_WritePin(redled_GPIO_Port, redled_Pin, 1  );
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001012:	4812      	ldr	r0, [pc, #72]	; (800105c <main+0x190>)
 8001014:	f000 fed6 	bl	8001dc4 <HAL_GPIO_WritePin>

		 		  		 		  		  }

		  break;
 8001018:	e001      	b.n	800101e <main+0x152>
		  break;
 800101a:	bf00      	nop
 800101c:	e76c      	b.n	8000ef8 <main+0x2c>
		  break;
 800101e:	bf00      	nop
	  switch (flag)
 8001020:	e76a      	b.n	8000ef8 <main+0x2c>
 8001022:	bf00      	nop
 8001024:	0800b240 	.word	0x0800b240
 8001028:	20000374 	.word	0x20000374
 800102c:	20000368 	.word	0x20000368
 8001030:	40001400 	.word	0x40001400
 8001034:	200003c0 	.word	0x200003c0
 8001038:	40001000 	.word	0x40001000
 800103c:	20000370 	.word	0x20000370
 8001040:	20000378 	.word	0x20000378
 8001044:	2000036c 	.word	0x2000036c
 8001048:	2000040c 	.word	0x2000040c
 800104c:	0800b248 	.word	0x0800b248
 8001050:	200002e8 	.word	0x200002e8
 8001054:	0800b250 	.word	0x0800b250
 8001058:	20000328 	.word	0x20000328
 800105c:	40020c00 	.word	0x40020c00
 8001060:	0800b25c 	.word	0x0800b25c
 8001064:	0800b268 	.word	0x0800b268
 8001068:	0800b270 	.word	0x0800b270

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	; 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2230      	movs	r2, #48	; 0x30
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f007 f9e0 	bl	8008440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	4b28      	ldr	r3, [pc, #160]	; (8001138 <SystemClock_Config+0xcc>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	4a27      	ldr	r2, [pc, #156]	; (8001138 <SystemClock_Config+0xcc>)
 800109a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109e:	6413      	str	r3, [r2, #64]	; 0x40
 80010a0:	4b25      	ldr	r3, [pc, #148]	; (8001138 <SystemClock_Config+0xcc>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <SystemClock_Config+0xd0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a21      	ldr	r2, [pc, #132]	; (800113c <SystemClock_Config+0xd0>)
 80010b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <SystemClock_Config+0xd0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c8:	2301      	movs	r3, #1
 80010ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d2:	2302      	movs	r3, #2
 80010d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010dc:	2304      	movs	r3, #4
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010e0:	23a8      	movs	r3, #168	; 0xa8
 80010e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010e8:	2307      	movs	r3, #7
 80010ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ec:	f107 0320 	add.w	r3, r7, #32
 80010f0:	4618      	mov	r0, r3
 80010f2:	f002 f917 	bl	8003324 <HAL_RCC_OscConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010fc:	f000 f930 	bl	8001360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001100:	230f      	movs	r3, #15
 8001102:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001104:	2302      	movs	r3, #2
 8001106:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800110c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001110:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001116:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2105      	movs	r1, #5
 800111e:	4618      	mov	r0, r3
 8001120:	f002 fb78 	bl	8003814 <HAL_RCC_ClockConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800112a:	f000 f919 	bl	8001360 <Error_Handler>
  }
}
 800112e:	bf00      	nop
 8001130:	3750      	adds	r7, #80	; 0x50
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40007000 	.word	0x40007000

08001140 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001146:	463b      	mov	r3, r7
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_TIM6_Init+0x64>)
 8001150:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <MX_TIM6_Init+0x68>)
 8001152:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <MX_TIM6_Init+0x64>)
 8001156:	2201      	movs	r2, #1
 8001158:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_TIM6_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001160:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <MX_TIM6_Init+0x64>)
 8001162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001166:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_TIM6_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_TIM6_Init+0x64>)
 8001170:	f002 fd48 	bl	8003c04 <HAL_TIM_Base_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800117a:	f000 f8f1 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_TIM6_Init+0x64>)
 800118c:	f002 ff5a 	bl	8004044 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001196:	f000 f8e3 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000378 	.word	0x20000378
 80011a8:	40001000 	.word	0x40001000

080011ac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_TIM7_Init+0x64>)
 80011bc:	4a15      	ldr	r2, [pc, #84]	; (8001214 <MX_TIM7_Init+0x68>)
 80011be:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1;
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <MX_TIM7_Init+0x64>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_TIM7_Init+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_TIM7_Init+0x64>)
 80011ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_TIM7_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011da:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_TIM7_Init+0x64>)
 80011dc:	f002 fd12 	bl	8003c04 <HAL_TIM_Base_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80011e6:	f000 f8bb 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011f2:	463b      	mov	r3, r7
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_TIM7_Init+0x64>)
 80011f8:	f002 ff24 	bl	8004044 <HAL_TIMEx_MasterConfigSynchronization>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001202:	f000 f8ad 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200003c0 	.word	0x200003c0
 8001214:	40001400 	.word	0x40001400

08001218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b32      	ldr	r3, [pc, #200]	; (80012fc <MX_GPIO_Init+0xe4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a31      	ldr	r2, [pc, #196]	; (80012fc <MX_GPIO_Init+0xe4>)
 8001238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <MX_GPIO_Init+0xe4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <MX_GPIO_Init+0xe4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a2a      	ldr	r2, [pc, #168]	; (80012fc <MX_GPIO_Init+0xe4>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b28      	ldr	r3, [pc, #160]	; (80012fc <MX_GPIO_Init+0xe4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <MX_GPIO_Init+0xe4>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a23      	ldr	r2, [pc, #140]	; (80012fc <MX_GPIO_Init+0xe4>)
 8001270:	f043 0308 	orr.w	r3, r3, #8
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b21      	ldr	r3, [pc, #132]	; (80012fc <MX_GPIO_Init+0xe4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_GPIO_Init+0xe4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a1c      	ldr	r2, [pc, #112]	; (80012fc <MX_GPIO_Init+0xe4>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_GPIO_Init+0xe4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, orangeled_Pin|redled_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80012a4:	4816      	ldr	r0, [pc, #88]	; (8001300 <MX_GPIO_Init+0xe8>)
 80012a6:	f000 fd8d 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012aa:	2301      	movs	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012ae:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <MX_GPIO_Init+0xec>)
 80012c0:	f000 fbcc 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : orangeled_Pin redled_Pin */
  GPIO_InitStruct.Pin = orangeled_Pin|redled_Pin;
 80012c4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4808      	ldr	r0, [pc, #32]	; (8001300 <MX_GPIO_Init+0xe8>)
 80012de:	f000 fbbd 	bl	8001a5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2006      	movs	r0, #6
 80012e8:	f000 fb73 	bl	80019d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012ec:	2006      	movs	r0, #6
 80012ee:	f000 fb8c 	bl	8001a0a <HAL_NVIC_EnableIRQ>

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020c00 	.word	0x40020c00
 8001304:	40020000 	.word	0x40020000

08001308 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
	inerruptcount ++;
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <HAL_GPIO_EXTI_Callback+0x4c>)
 800131a:	6013      	str	r3, [r2, #0]
 if (GPIO_Pin==GPIO_PIN_0)
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d113      	bne.n	800134a <HAL_GPIO_EXTI_Callback+0x42>
 {
	 if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0 )== 1)
 8001322:	2101      	movs	r1, #1
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <HAL_GPIO_EXTI_Callback+0x50>)
 8001326:	f000 fd35 	bl	8001d94 <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	2b01      	cmp	r3, #1
 800132e:	d102      	bne.n	8001336 <HAL_GPIO_EXTI_Callback+0x2e>
	 {
		state=bdown;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_GPIO_EXTI_Callback+0x54>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
		 // TIM6->CNT=0;
		//HAL_TIM_Base_Start(&htim6);

	 }// button pres
	 if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0 )== 0)
 8001336:	2101      	movs	r1, #1
 8001338:	4807      	ldr	r0, [pc, #28]	; (8001358 <HAL_GPIO_EXTI_Callback+0x50>)
 800133a:	f000 fd2b 	bl	8001d94 <HAL_GPIO_ReadPin>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <HAL_GPIO_EXTI_Callback+0x42>
	 	 {
		 state=bup;
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_GPIO_EXTI_Callback+0x54>)
 8001346:	2202      	movs	r2, #2
 8001348:	701a      	strb	r2, [r3, #0]



	 	 }// button up
 }//if pin 0
}//exticallback
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000408 	.word	0x20000408
 8001358:	40020000 	.word	0x40020000
 800135c:	20000374 	.word	0x20000374

08001360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001364:	b672      	cpsid	i
}
 8001366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001368:	e7fe      	b.n	8001368 <Error_Handler+0x8>
	...

0800136c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HAL_MspInit+0x4c>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <HAL_MspInit+0x4c>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HAL_MspInit+0x4c>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_MspInit+0x4c>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <HAL_MspInit+0x4c>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_MspInit+0x4c>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013aa:	2007      	movs	r0, #7
 80013ac:	f000 fb06 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800

080013bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a15      	ldr	r2, [pc, #84]	; (8001420 <HAL_TIM_Base_MspInit+0x64>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d10e      	bne.n	80013ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <HAL_TIM_Base_MspInit+0x68>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a13      	ldr	r2, [pc, #76]	; (8001424 <HAL_TIM_Base_MspInit+0x68>)
 80013d8:	f043 0310 	orr.w	r3, r3, #16
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_TIM_Base_MspInit+0x68>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80013ea:	e012      	b.n	8001412 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <HAL_TIM_Base_MspInit+0x6c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d10d      	bne.n	8001412 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <HAL_TIM_Base_MspInit+0x68>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a09      	ldr	r2, [pc, #36]	; (8001424 <HAL_TIM_Base_MspInit+0x68>)
 8001400:	f043 0320 	orr.w	r3, r3, #32
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <HAL_TIM_Base_MspInit+0x68>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 0320 	and.w	r3, r3, #32
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40001000 	.word	0x40001000
 8001424:	40023800 	.word	0x40023800
 8001428:	40001400 	.word	0x40001400

0800142c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <NMI_Handler+0x4>

08001432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <HardFault_Handler+0x4>

08001438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <MemManage_Handler+0x4>

0800143e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <BusFault_Handler+0x4>

08001444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <UsageFault_Handler+0x4>

0800144a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001478:	f000 f968 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}

08001480 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001484:	2001      	movs	r0, #1
 8001486:	f000 fcb7 	bl	8001df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <OTG_FS_IRQHandler+0x10>)
 8001496:	f000 fe17 	bl	80020c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200018f8 	.word	0x200018f8

080014a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return 1;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_kill>:

int _kill(int pid, int sig)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014be:	f006 ff87 	bl	80083d0 <__errno>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2216      	movs	r2, #22
 80014c6:	601a      	str	r2, [r3, #0]
  return -1;
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_exit>:

void _exit (int status)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ffe7 	bl	80014b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014e6:	e7fe      	b.n	80014e6 <_exit+0x12>

080014e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	e00a      	b.n	8001510 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014fa:	f3af 8000 	nop.w
 80014fe:	4601      	mov	r1, r0
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	60ba      	str	r2, [r7, #8]
 8001506:	b2ca      	uxtb	r2, r1
 8001508:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	dbf0      	blt.n	80014fa <_read+0x12>
  }

  return len;
 8001518:	687b      	ldr	r3, [r7, #4]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	e009      	b.n	8001548 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	60ba      	str	r2, [r7, #8]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	dbf1      	blt.n	8001534 <_write+0x12>
  }
  return len;
 8001550:	687b      	ldr	r3, [r7, #4]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <_close>:

int _close(int file)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001582:	605a      	str	r2, [r3, #4]
  return 0;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <_isatty>:

int _isatty(int file)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4a14      	ldr	r2, [pc, #80]	; (8001620 <_sbrk+0x5c>)
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <_sbrk+0x60>)
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <_sbrk+0x64>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	; (800162c <_sbrk+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d207      	bcs.n	8001604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f4:	f006 feec 	bl	80083d0 <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	e009      	b.n	8001618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160a:	4b07      	ldr	r3, [pc, #28]	; (8001628 <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <_sbrk+0x64>)
 8001614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20020000 	.word	0x20020000
 8001624:	00000400 	.word	0x00000400
 8001628:	20000410 	.word	0x20000410
 800162c:	20002038 	.word	0x20002038

08001630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <SystemInit+0x20>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <SystemInit+0x20>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800165a:	490e      	ldr	r1, [pc, #56]	; (8001694 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001670:	4c0b      	ldr	r4, [pc, #44]	; (80016a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800167e:	f7ff ffd7 	bl	8001630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001682:	f006 feab 	bl	80083dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff fc21 	bl	8000ecc <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800168c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001698:	0800b6bc 	.word	0x0800b6bc
  ldr r2, =_sbss
 800169c:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 80016a0:	20002034 	.word	0x20002034

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <HAL_Init+0x40>)
 80016b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_Init+0x40>)
 80016be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_Init+0x40>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 f973 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 f808 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff fe46 	bl	800136c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f999 	bl	8001a42 <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f000 f953 	bl	80019d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	20000008 	.word	0x20000008
 8001748:	20000004 	.word	0x20000004

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008
 8001770:	20000414 	.word	0x20000414

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000414 	.word	0x20000414

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff ffee 	bl	8001774 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_Delay+0x44>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017b2:	bf00      	nop
 80017b4:	f7ff ffde 	bl	8001774 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	2b00      	cmp	r3, #0
 8001884:	db12      	blt.n	80018ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	f003 021f 	and.w	r2, r3, #31
 800188c:	490a      	ldr	r1, [pc, #40]	; (80018b8 <__NVIC_DisableIRQ+0x44>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	2001      	movs	r0, #1
 8001896:	fa00 f202 	lsl.w	r2, r0, r2
 800189a:	3320      	adds	r3, #32
 800189c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018a0:	f3bf 8f4f 	dsb	sy
}
 80018a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018a6:	f3bf 8f6f 	isb	sy
}
 80018aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000e100 	.word	0xe000e100

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	; (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	; (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001988:	d301      	bcc.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <SysTick_Config+0x40>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	210f      	movs	r1, #15
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f7ff ff8e 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <SysTick_Config+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <SysTick_Config+0x40>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff05 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff1a 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff8e 	bl	8001910 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5d 	bl	80018bc <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff0d 	bl	8001838 <__NVIC_EnableIRQ>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff1d 	bl	8001874 <__NVIC_DisableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ff94 	bl	8001978 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	e16b      	b.n	8001d50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	f040 815a 	bne.w	8001d4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d005      	beq.n	8001aae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d130      	bne.n	8001b10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 0201 	and.w	r2, r3, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d017      	beq.n	8001b4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d123      	bne.n	8001ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	08da      	lsrs	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3208      	adds	r2, #8
 8001b9a:	69b9      	ldr	r1, [r7, #24]
 8001b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80b4 	beq.w	8001d4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b60      	ldr	r3, [pc, #384]	; (8001d68 <HAL_GPIO_Init+0x30c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a5f      	ldr	r2, [pc, #380]	; (8001d68 <HAL_GPIO_Init+0x30c>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b5d      	ldr	r3, [pc, #372]	; (8001d68 <HAL_GPIO_Init+0x30c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bfe:	4a5b      	ldr	r2, [pc, #364]	; (8001d6c <HAL_GPIO_Init+0x310>)
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	3302      	adds	r3, #2
 8001c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	220f      	movs	r2, #15
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a52      	ldr	r2, [pc, #328]	; (8001d70 <HAL_GPIO_Init+0x314>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d02b      	beq.n	8001c82 <HAL_GPIO_Init+0x226>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a51      	ldr	r2, [pc, #324]	; (8001d74 <HAL_GPIO_Init+0x318>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d025      	beq.n	8001c7e <HAL_GPIO_Init+0x222>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a50      	ldr	r2, [pc, #320]	; (8001d78 <HAL_GPIO_Init+0x31c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d01f      	beq.n	8001c7a <HAL_GPIO_Init+0x21e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4f      	ldr	r2, [pc, #316]	; (8001d7c <HAL_GPIO_Init+0x320>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d019      	beq.n	8001c76 <HAL_GPIO_Init+0x21a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4e      	ldr	r2, [pc, #312]	; (8001d80 <HAL_GPIO_Init+0x324>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d013      	beq.n	8001c72 <HAL_GPIO_Init+0x216>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4d      	ldr	r2, [pc, #308]	; (8001d84 <HAL_GPIO_Init+0x328>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00d      	beq.n	8001c6e <HAL_GPIO_Init+0x212>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4c      	ldr	r2, [pc, #304]	; (8001d88 <HAL_GPIO_Init+0x32c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d007      	beq.n	8001c6a <HAL_GPIO_Init+0x20e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4b      	ldr	r2, [pc, #300]	; (8001d8c <HAL_GPIO_Init+0x330>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d101      	bne.n	8001c66 <HAL_GPIO_Init+0x20a>
 8001c62:	2307      	movs	r3, #7
 8001c64:	e00e      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c66:	2308      	movs	r3, #8
 8001c68:	e00c      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c6a:	2306      	movs	r3, #6
 8001c6c:	e00a      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c6e:	2305      	movs	r3, #5
 8001c70:	e008      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c72:	2304      	movs	r3, #4
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c76:	2303      	movs	r3, #3
 8001c78:	e004      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e002      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c82:	2300      	movs	r3, #0
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	f002 0203 	and.w	r2, r2, #3
 8001c8a:	0092      	lsls	r2, r2, #2
 8001c8c:	4093      	lsls	r3, r2
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c94:	4935      	ldr	r1, [pc, #212]	; (8001d6c <HAL_GPIO_Init+0x310>)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc6:	4a32      	ldr	r2, [pc, #200]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ccc:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf0:	4a27      	ldr	r2, [pc, #156]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d20:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d44:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	2b0f      	cmp	r3, #15
 8001d54:	f67f ae90 	bls.w	8001a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40013800 	.word	0x40013800
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40021400 	.word	0x40021400
 8001d88:	40021800 	.word	0x40021800
 8001d8c:	40021c00 	.word	0x40021c00
 8001d90:	40013c00 	.word	0x40013c00

08001d94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	887b      	ldrh	r3, [r7, #2]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	e001      	b.n	8001db6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd4:	787b      	ldrb	r3, [r7, #1]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001de0:	e003      	b.n	8001dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	041a      	lsls	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	619a      	str	r2, [r3, #24]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d006      	beq.n	8001e1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fa76 	bl	8001308 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40013c00 	.word	0x40013c00

08001e28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e2a:	b08f      	sub	sp, #60	; 0x3c
 8001e2c:	af0a      	add	r7, sp, #40	; 0x28
 8001e2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e10f      	b.n	800205a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d106      	bne.n	8001e5a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f005 ffa7 	bl	8007da8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d102      	bne.n	8001e74 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f002 fa74 	bl	8004366 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	687e      	ldr	r6, [r7, #4]
 8001e86:	466d      	mov	r5, sp
 8001e88:	f106 0410 	add.w	r4, r6, #16
 8001e8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e98:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e9c:	1d33      	adds	r3, r6, #4
 8001e9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ea0:	6838      	ldr	r0, [r7, #0]
 8001ea2:	f002 f94b 	bl	800413c <USB_CoreInit>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0d0      	b.n	800205a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f002 fa62 	bl	8004388 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73fb      	strb	r3, [r7, #15]
 8001ec8:	e04a      	b.n	8001f60 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eca:	7bfa      	ldrb	r2, [r7, #15]
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	333d      	adds	r3, #61	; 0x3d
 8001eda:	2201      	movs	r2, #1
 8001edc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	333c      	adds	r3, #60	; 0x3c
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	b298      	uxth	r0, r3
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	3344      	adds	r3, #68	; 0x44
 8001f06:	4602      	mov	r2, r0
 8001f08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f0a:	7bfa      	ldrb	r2, [r7, #15]
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	3340      	adds	r3, #64	; 0x40
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f1e:	7bfa      	ldrb	r2, [r7, #15]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3348      	adds	r3, #72	; 0x48
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	334c      	adds	r3, #76	; 0x4c
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	3354      	adds	r3, #84	; 0x54
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d3af      	bcc.n	8001eca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	73fb      	strb	r3, [r7, #15]
 8001f6e:	e044      	b.n	8001ffa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fc8:	7bfa      	ldrb	r2, [r7, #15]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	73fb      	strb	r3, [r7, #15]
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	d3b5      	bcc.n	8001f70 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	687e      	ldr	r6, [r7, #4]
 800200c:	466d      	mov	r5, sp
 800200e:	f106 0410 	add.w	r4, r6, #16
 8002012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800201a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800201e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002022:	1d33      	adds	r3, r6, #4
 8002024:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002026:	6838      	ldr	r0, [r7, #0]
 8002028:	f002 f9fa 	bl	8004420 <USB_DevInit>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2202      	movs	r2, #2
 8002036:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e00d      	b.n	800205a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f003 fb49 	bl	80056ea <USB_DevDisconnect>

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002062 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <HAL_PCD_Start+0x1c>
 800207a:	2302      	movs	r3, #2
 800207c:	e020      	b.n	80020c0 <HAL_PCD_Start+0x5e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208a:	2b01      	cmp	r3, #1
 800208c:	d109      	bne.n	80020a2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002092:	2b01      	cmp	r3, #1
 8002094:	d005      	beq.n	80020a2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 f94c 	bl	8004344 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f003 faf9 	bl	80056a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b08d      	sub	sp, #52	; 0x34
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 fbb7 	bl	8005852 <USB_GetMode>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 848a 	bne.w	8002a00 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f003 fb1b 	bl	800572c <USB_ReadInterrupts>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 8480 	beq.w	80029fe <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f003 fb08 	bl	800572c <USB_ReadInterrupts>
 800211c:	4603      	mov	r3, r0
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b02      	cmp	r3, #2
 8002124:	d107      	bne.n	8002136 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f002 0202 	and.w	r2, r2, #2
 8002134:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f003 faf6 	bl	800572c <USB_ReadInterrupts>
 8002140:	4603      	mov	r3, r0
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b10      	cmp	r3, #16
 8002148:	d161      	bne.n	800220e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699a      	ldr	r2, [r3, #24]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0210 	bic.w	r2, r2, #16
 8002158:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	f003 020f 	and.w	r2, r3, #15
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	3304      	adds	r3, #4
 8002178:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	0c5b      	lsrs	r3, r3, #17
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	2b02      	cmp	r3, #2
 8002184:	d124      	bne.n	80021d0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d035      	beq.n	80021fe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800219c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	6a38      	ldr	r0, [r7, #32]
 80021a6:	f003 f92d 	bl	8005404 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021b6:	441a      	add	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	6a1a      	ldr	r2, [r3, #32]
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021c8:	441a      	add	r2, r3
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	621a      	str	r2, [r3, #32]
 80021ce:	e016      	b.n	80021fe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	0c5b      	lsrs	r3, r3, #17
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	2b06      	cmp	r3, #6
 80021da:	d110      	bne.n	80021fe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021e2:	2208      	movs	r2, #8
 80021e4:	4619      	mov	r1, r3
 80021e6:	6a38      	ldr	r0, [r7, #32]
 80021e8:	f003 f90c 	bl	8005404 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	6a1a      	ldr	r2, [r3, #32]
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021f8:	441a      	add	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0210 	orr.w	r2, r2, #16
 800220c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f003 fa8a 	bl	800572c <USB_ReadInterrupts>
 8002218:	4603      	mov	r3, r0
 800221a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800221e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002222:	f040 80a7 	bne.w	8002374 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f003 fa8f 	bl	8005752 <USB_ReadDevAllOutEpInterrupt>
 8002234:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002236:	e099      	b.n	800236c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 808e 	beq.w	8002360 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f003 fab3 	bl	80057ba <USB_ReadDevOutEPInterrupt>
 8002254:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00c      	beq.n	800227a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	4413      	add	r3, r2
 8002268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800226c:	461a      	mov	r2, r3
 800226e:	2301      	movs	r3, #1
 8002270:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002272:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 fec3 	bl	8003000 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00c      	beq.n	800229e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	4413      	add	r3, r2
 800228c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002290:	461a      	mov	r2, r3
 8002292:	2308      	movs	r3, #8
 8002294:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002296:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 ff99 	bl	80031d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b4:	461a      	mov	r2, r3
 80022b6:	2310      	movs	r3, #16
 80022b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d030      	beq.n	8002326 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022cc:	2b80      	cmp	r3, #128	; 0x80
 80022ce:	d109      	bne.n	80022e4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80022e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e6:	4613      	mov	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4413      	add	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	3304      	adds	r3, #4
 80022f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	78db      	ldrb	r3, [r3, #3]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d108      	bne.n	8002314 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2200      	movs	r2, #0
 8002306:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	b2db      	uxtb	r3, r3
 800230c:	4619      	mov	r1, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f005 fe50 	bl	8007fb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002320:	461a      	mov	r2, r3
 8002322:	2302      	movs	r3, #2
 8002324:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	4413      	add	r3, r2
 8002338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233c:	461a      	mov	r2, r3
 800233e:	2320      	movs	r3, #32
 8002340:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d009      	beq.n	8002360 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	4413      	add	r3, r2
 8002354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002358:	461a      	mov	r2, r3
 800235a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800235e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	3301      	adds	r3, #1
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	085b      	lsrs	r3, r3, #1
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236e:	2b00      	cmp	r3, #0
 8002370:	f47f af62 	bne.w	8002238 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f003 f9d7 	bl	800572c <USB_ReadInterrupts>
 800237e:	4603      	mov	r3, r0
 8002380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002384:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002388:	f040 80db 	bne.w	8002542 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f003 f9f8 	bl	8005786 <USB_ReadDevAllInEpInterrupt>
 8002396:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800239c:	e0cd      	b.n	800253a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80c2 	beq.w	800252e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f003 fa1e 	bl	80057f6 <USB_ReadDevInEPInterrupt>
 80023ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d057      	beq.n	8002476 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	2201      	movs	r2, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	43db      	mvns	r3, r3
 80023e0:	69f9      	ldr	r1, [r7, #28]
 80023e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023e6:	4013      	ands	r3, r2
 80023e8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023f6:	461a      	mov	r2, r3
 80023f8:	2301      	movs	r3, #1
 80023fa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d132      	bne.n	800246a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	334c      	adds	r3, #76	; 0x4c
 8002414:	6819      	ldr	r1, [r3, #0]
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241a:	4613      	mov	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4413      	add	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4403      	add	r3, r0
 8002424:	3348      	adds	r3, #72	; 0x48
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4419      	add	r1, r3
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242e:	4613      	mov	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4403      	add	r3, r0
 8002438:	334c      	adds	r3, #76	; 0x4c
 800243a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	2b00      	cmp	r3, #0
 8002440:	d113      	bne.n	800246a <HAL_PCD_IRQHandler+0x3a2>
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	3354      	adds	r3, #84	; 0x54
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d108      	bne.n	800246a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002462:	461a      	mov	r2, r3
 8002464:	2101      	movs	r1, #1
 8002466:	f003 fa25 	bl	80058b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	b2db      	uxtb	r3, r3
 800246e:	4619      	mov	r1, r3
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f005 fd1a 	bl	8007eaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	4413      	add	r3, r2
 8002488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800248c:	461a      	mov	r2, r3
 800248e:	2308      	movs	r3, #8
 8002490:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024a8:	461a      	mov	r2, r3
 80024aa:	2310      	movs	r3, #16
 80024ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024c4:	461a      	mov	r2, r3
 80024c6:	2340      	movs	r3, #64	; 0x40
 80024c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d023      	beq.n	800251c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80024d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d6:	6a38      	ldr	r0, [r7, #32]
 80024d8:	f002 f906 	bl	80046e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80024dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024de:	4613      	mov	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	3338      	adds	r3, #56	; 0x38
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	4413      	add	r3, r2
 80024ec:	3304      	adds	r3, #4
 80024ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	78db      	ldrb	r3, [r3, #3]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d108      	bne.n	800250a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2200      	movs	r2, #0
 80024fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	b2db      	uxtb	r3, r3
 8002502:	4619      	mov	r1, r3
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f005 fd67 	bl	8007fd8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	4413      	add	r3, r2
 8002512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002516:	461a      	mov	r2, r3
 8002518:	2302      	movs	r3, #2
 800251a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002526:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fcdb 	bl	8002ee4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	3301      	adds	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	085b      	lsrs	r3, r3, #1
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f af2e 	bne.w	800239e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f003 f8f0 	bl	800572c <USB_ReadInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002552:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002556:	d122      	bne.n	800259e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002572:	2b01      	cmp	r3, #1
 8002574:	d108      	bne.n	8002588 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800257e:	2100      	movs	r1, #0
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fec3 	bl	800330c <HAL_PCDEx_LPM_Callback>
 8002586:	e002      	b.n	800258e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f005 fd05 	bl	8007f98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800259c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f003 f8c2 	bl	800572c <USB_ReadInterrupts>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025b2:	d112      	bne.n	80025da <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d102      	bne.n	80025ca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f005 fcc1 	bl	8007f4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025d8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f003 f8a4 	bl	800572c <USB_ReadInterrupts>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ee:	f040 80b7 	bne.w	8002760 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2110      	movs	r1, #16
 800260c:	4618      	mov	r0, r3
 800260e:	f002 f86b 	bl	80046e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002612:	2300      	movs	r3, #0
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002616:	e046      	b.n	80026a6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	4413      	add	r3, r2
 8002620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002624:	461a      	mov	r2, r3
 8002626:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800262a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800262c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	4413      	add	r3, r2
 8002634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800263c:	0151      	lsls	r1, r2, #5
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	440a      	add	r2, r1
 8002642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002646:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800264a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4413      	add	r3, r2
 8002654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002658:	461a      	mov	r2, r3
 800265a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800265e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	4413      	add	r3, r2
 8002668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002670:	0151      	lsls	r1, r2, #5
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	440a      	add	r2, r1
 8002676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800267a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800267e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002690:	0151      	lsls	r1, r2, #5
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	440a      	add	r2, r1
 8002696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800269a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800269e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	3301      	adds	r3, #1
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d3b3      	bcc.n	8002618 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026be:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d016      	beq.n	80026fa <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026dc:	f043 030b 	orr.w	r3, r3, #11
 80026e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026f2:	f043 030b 	orr.w	r3, r3, #11
 80026f6:	6453      	str	r3, [r2, #68]	; 0x44
 80026f8:	e015      	b.n	8002726 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002708:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800270c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002710:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002720:	f043 030b 	orr.w	r3, r3, #11
 8002724:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002734:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002738:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800274a:	461a      	mov	r2, r3
 800274c:	f003 f8b2 	bl	80058b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800275e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f002 ffe1 	bl	800572c <USB_ReadInterrupts>
 800276a:	4603      	mov	r3, r0
 800276c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002774:	d124      	bne.n	80027c0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f003 f877 	bl	800586e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f002 f82c 	bl	80047e2 <USB_GetDevSpeed>
 800278a:	4603      	mov	r3, r0
 800278c:	461a      	mov	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681c      	ldr	r4, [r3, #0]
 8002796:	f001 fa29 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 800279a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	4620      	mov	r0, r4
 80027a6:	f001 fd2b 	bl	8004200 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f005 fba5 	bl	8007efa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f002 ffb1 	bl	800572c <USB_ReadInterrupts>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d10a      	bne.n	80027ea <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f005 fb82 	bl	8007ede <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f002 0208 	and.w	r2, r2, #8
 80027e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f002 ff9c 	bl	800572c <USB_ReadInterrupts>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fa:	2b80      	cmp	r3, #128	; 0x80
 80027fc:	d122      	bne.n	8002844 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800280a:	2301      	movs	r3, #1
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
 800280e:	e014      	b.n	800283a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d105      	bne.n	8002834 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	b2db      	uxtb	r3, r3
 800282c:	4619      	mov	r1, r3
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fb27 	bl	8002e82 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	3301      	adds	r3, #1
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002840:	429a      	cmp	r2, r3
 8002842:	d3e5      	bcc.n	8002810 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f002 ff6f 	bl	800572c <USB_ReadInterrupts>
 800284e:	4603      	mov	r3, r0
 8002850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002854:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002858:	d13b      	bne.n	80028d2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800285a:	2301      	movs	r3, #1
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
 800285e:	e02b      	b.n	80028b8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	4413      	add	r3, r2
 8002868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	3340      	adds	r3, #64	; 0x40
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d115      	bne.n	80028b2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002886:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002888:	2b00      	cmp	r3, #0
 800288a:	da12      	bge.n	80028b2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002890:	4613      	mov	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	333f      	adds	r3, #63	; 0x3f
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	4619      	mov	r1, r3
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 fae8 	bl	8002e82 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	3301      	adds	r3, #1
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028be:	429a      	cmp	r2, r3
 80028c0:	d3ce      	bcc.n	8002860 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80028d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f002 ff28 	bl	800572c <USB_ReadInterrupts>
 80028dc:	4603      	mov	r3, r0
 80028de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028e6:	d155      	bne.n	8002994 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028e8:	2301      	movs	r3, #1
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
 80028ec:	e045      	b.n	800297a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d12e      	bne.n	8002974 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002916:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002918:	2b00      	cmp	r3, #0
 800291a:	da2b      	bge.n	8002974 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002928:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800292c:	429a      	cmp	r2, r3
 800292e:	d121      	bne.n	8002974 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10a      	bne.n	8002974 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800296c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002970:	6053      	str	r3, [r2, #4]
            break;
 8002972:	e007      	b.n	8002984 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	3301      	adds	r3, #1
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002980:	429a      	cmp	r2, r3
 8002982:	d3b4      	bcc.n	80028ee <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002992:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f002 fec7 	bl	800572c <USB_ReadInterrupts>
 800299e:	4603      	mov	r3, r0
 80029a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a8:	d10a      	bne.n	80029c0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f005 fb26 	bl	8007ffc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f002 feb1 	bl	800572c <USB_ReadInterrupts>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d115      	bne.n	8002a00 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f005 fb16 	bl	8008018 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6859      	ldr	r1, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	e000      	b.n	8002a00 <HAL_PCD_IRQHandler+0x938>
      return;
 80029fe:	bf00      	nop
    }
  }
}
 8002a00:	3734      	adds	r7, #52	; 0x34
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd90      	pop	{r4, r7, pc}

08002a06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_PCD_SetAddress+0x1a>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e013      	b.n	8002a48 <HAL_PCD_SetAddress+0x42>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f002 fe0f 	bl	800565c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	4608      	mov	r0, r1
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4603      	mov	r3, r0
 8002a60:	70fb      	strb	r3, [r7, #3]
 8002a62:	460b      	mov	r3, r1
 8002a64:	803b      	strh	r3, [r7, #0]
 8002a66:	4613      	mov	r3, r2
 8002a68:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	da0f      	bge.n	8002a96 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	f003 020f 	and.w	r2, r3, #15
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	3338      	adds	r3, #56	; 0x38
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	705a      	strb	r2, [r3, #1]
 8002a94:	e00f      	b.n	8002ab6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	f003 020f 	and.w	r2, r3, #15
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	3304      	adds	r3, #4
 8002aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ac2:	883a      	ldrh	r2, [r7, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	78ba      	ldrb	r2, [r7, #2]
 8002acc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	785b      	ldrb	r3, [r3, #1]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ae0:	78bb      	ldrb	r3, [r7, #2]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d102      	bne.n	8002aec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_PCD_EP_Open+0xaa>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e00e      	b.n	8002b18 <HAL_PCD_EP_Open+0xc8>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68f9      	ldr	r1, [r7, #12]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f001 fe8f 	bl	800482c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b16:	7afb      	ldrb	r3, [r7, #11]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	da0f      	bge.n	8002b54 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	f003 020f 	and.w	r2, r3, #15
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	3338      	adds	r3, #56	; 0x38
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	4413      	add	r3, r2
 8002b48:	3304      	adds	r3, #4
 8002b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	705a      	strb	r2, [r3, #1]
 8002b52:	e00f      	b.n	8002b74 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	f003 020f 	and.w	r2, r3, #15
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_PCD_EP_Close+0x6e>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e00e      	b.n	8002bac <HAL_PCD_EP_Close+0x8c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68f9      	ldr	r1, [r7, #12]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f001 fecd 	bl	800493c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bc4:	7afb      	ldrb	r3, [r7, #11]
 8002bc6:	f003 020f 	and.w	r2, r3, #15
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4413      	add	r3, r2
 8002bda:	3304      	adds	r3, #4
 8002bdc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2200      	movs	r2, #0
 8002bee:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bf6:	7afb      	ldrb	r3, [r7, #11]
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d102      	bne.n	8002c10 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c10:	7afb      	ldrb	r3, [r7, #11]
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	6979      	ldr	r1, [r7, #20]
 8002c28:	f002 f9ac 	bl	8004f84 <USB_EP0StartXfer>
 8002c2c:	e008      	b.n	8002c40 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	6979      	ldr	r1, [r7, #20]
 8002c3c:	f001 ff5a 	bl	8004af4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	f003 020f 	and.w	r2, r3, #15
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002c6c:	681b      	ldr	r3, [r3, #0]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b086      	sub	sp, #24
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
 8002c86:	460b      	mov	r3, r1
 8002c88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c8a:	7afb      	ldrb	r3, [r7, #11]
 8002c8c:	f003 020f 	and.w	r2, r3, #15
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	3338      	adds	r3, #56	; 0x38
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cba:	7afb      	ldrb	r3, [r7, #11]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d102      	bne.n	8002cd4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cd4:	7afb      	ldrb	r3, [r7, #11]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	6979      	ldr	r1, [r7, #20]
 8002cec:	f002 f94a 	bl	8004f84 <USB_EP0StartXfer>
 8002cf0:	e008      	b.n	8002d04 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	6979      	ldr	r1, [r7, #20]
 8002d00:	f001 fef8 	bl	8004af4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	f003 020f 	and.w	r2, r3, #15
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d901      	bls.n	8002d2c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e050      	b.n	8002dce <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	da0f      	bge.n	8002d54 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	f003 020f 	and.w	r2, r3, #15
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	3338      	adds	r3, #56	; 0x38
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	3304      	adds	r3, #4
 8002d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	705a      	strb	r2, [r3, #1]
 8002d52:	e00d      	b.n	8002d70 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	4613      	mov	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	3304      	adds	r3, #4
 8002d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_PCD_EP_SetStall+0x82>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e01e      	b.n	8002dce <HAL_PCD_EP_SetStall+0xc0>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68f9      	ldr	r1, [r7, #12]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f002 fb88 	bl	80054b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	b2d9      	uxtb	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f002 fd78 	bl	80058b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	f003 020f 	and.w	r2, r3, #15
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d901      	bls.n	8002df4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e042      	b.n	8002e7a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	da0f      	bge.n	8002e1c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	f003 020f 	and.w	r2, r3, #15
 8002e02:	4613      	mov	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	3338      	adds	r3, #56	; 0x38
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	4413      	add	r3, r2
 8002e10:	3304      	adds	r3, #4
 8002e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	705a      	strb	r2, [r3, #1]
 8002e1a:	e00f      	b.n	8002e3c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	f003 020f 	and.w	r2, r3, #15
 8002e22:	4613      	mov	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	3304      	adds	r3, #4
 8002e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_PCD_EP_ClrStall+0x86>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e00e      	b.n	8002e7a <HAL_PCD_EP_ClrStall+0xa4>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68f9      	ldr	r1, [r7, #12]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f002 fb90 	bl	8005590 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	da0c      	bge.n	8002eb0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	f003 020f 	and.w	r2, r3, #15
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	3338      	adds	r3, #56	; 0x38
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3304      	adds	r3, #4
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e00c      	b.n	8002eca <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	f003 020f 	and.w	r2, r3, #15
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68f9      	ldr	r1, [r7, #12]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f002 f9af 	bl	8005234 <USB_EPStopXfer>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002eda:	7afb      	ldrb	r3, [r7, #11]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	3338      	adds	r3, #56	; 0x38
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	3304      	adds	r3, #4
 8002f0a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a1a      	ldr	r2, [r3, #32]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d901      	bls.n	8002f1c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e06c      	b.n	8002ff6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	69fa      	ldr	r2, [r7, #28]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d902      	bls.n	8002f38 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	3303      	adds	r3, #3
 8002f3c:	089b      	lsrs	r3, r3, #2
 8002f3e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f40:	e02b      	b.n	8002f9a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	699a      	ldr	r2, [r3, #24]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d902      	bls.n	8002f5e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	3303      	adds	r3, #3
 8002f62:	089b      	lsrs	r3, r3, #2
 8002f64:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6919      	ldr	r1, [r3, #16]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	6978      	ldr	r0, [r7, #20]
 8002f7e:	f002 fa03 	bl	8005388 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	441a      	add	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a1a      	ldr	r2, [r3, #32]
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	441a      	add	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d809      	bhi.n	8002fc4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a1a      	ldr	r2, [r3, #32]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d203      	bcs.n	8002fc4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1be      	bne.n	8002f42 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	699a      	ldr	r2, [r3, #24]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d811      	bhi.n	8002ff4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	6939      	ldr	r1, [r7, #16]
 8002fec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3720      	adds	r7, #32
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	333c      	adds	r3, #60	; 0x3c
 8003018:	3304      	adds	r3, #4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	4413      	add	r3, r2
 8003026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d17b      	bne.n	800312e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d015      	beq.n	800306c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	4a61      	ldr	r2, [pc, #388]	; (80031c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	f240 80b9 	bls.w	80031bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80b3 	beq.w	80031bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003062:	461a      	mov	r2, r3
 8003064:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003068:	6093      	str	r3, [r2, #8]
 800306a:	e0a7      	b.n	80031bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003082:	461a      	mov	r2, r3
 8003084:	2320      	movs	r3, #32
 8003086:	6093      	str	r3, [r2, #8]
 8003088:	e098      	b.n	80031bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 8093 	bne.w	80031bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	4a4b      	ldr	r2, [pc, #300]	; (80031c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d90f      	bls.n	80030be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b4:	461a      	mov	r2, r3
 80030b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ba:	6093      	str	r3, [r2, #8]
 80030bc:	e07e      	b.n	80031bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	4413      	add	r3, r2
 80030d0:	3304      	adds	r3, #4
 80030d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	69da      	ldr	r2, [r3, #28]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	0159      	lsls	r1, r3, #5
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	440b      	add	r3, r1
 80030e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ea:	1ad2      	subs	r2, r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d114      	bne.n	8003120 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003108:	461a      	mov	r2, r3
 800310a:	2101      	movs	r1, #1
 800310c:	f002 fbd2 	bl	80058b4 <USB_EP0_OutStart>
 8003110:	e006      	b.n	8003120 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	441a      	add	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	4619      	mov	r1, r3
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f004 fea4 	bl	8007e74 <HAL_PCD_DataOutStageCallback>
 800312c:	e046      	b.n	80031bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	4a26      	ldr	r2, [pc, #152]	; (80031cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d124      	bne.n	8003180 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314c:	461a      	mov	r2, r3
 800314e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003152:	6093      	str	r3, [r2, #8]
 8003154:	e032      	b.n	80031bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	4413      	add	r3, r2
 8003168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316c:	461a      	mov	r2, r3
 800316e:	2320      	movs	r3, #32
 8003170:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	4619      	mov	r1, r3
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f004 fe7b 	bl	8007e74 <HAL_PCD_DataOutStageCallback>
 800317e:	e01d      	b.n	80031bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d114      	bne.n	80031b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d108      	bne.n	80031b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031a8:	461a      	mov	r2, r3
 80031aa:	2100      	movs	r1, #0
 80031ac:	f002 fb82 	bl	80058b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	4619      	mov	r1, r3
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f004 fe5c 	bl	8007e74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3720      	adds	r7, #32
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	4f54300a 	.word	0x4f54300a
 80031cc:	4f54310a 	.word	0x4f54310a

080031d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	333c      	adds	r3, #60	; 0x3c
 80031e8:	3304      	adds	r3, #4
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4a15      	ldr	r2, [pc, #84]	; (8003258 <PCD_EP_OutSetupPacket_int+0x88>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d90e      	bls.n	8003224 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321c:	461a      	mov	r2, r3
 800321e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003222:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f004 fe13 	bl	8007e50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <PCD_EP_OutSetupPacket_int+0x88>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d90c      	bls.n	800324c <PCD_EP_OutSetupPacket_int+0x7c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d108      	bne.n	800324c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003244:	461a      	mov	r2, r3
 8003246:	2101      	movs	r1, #1
 8003248:	f002 fb34 	bl	80058b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	4f54300a 	.word	0x4f54300a

0800325c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	70fb      	strb	r3, [r7, #3]
 8003268:	4613      	mov	r3, r2
 800326a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d107      	bne.n	800328a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800327a:	883b      	ldrh	r3, [r7, #0]
 800327c:	0419      	lsls	r1, r3, #16
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	430a      	orrs	r2, r1
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
 8003288:	e028      	b.n	80032dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	0c1b      	lsrs	r3, r3, #16
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	4413      	add	r3, r2
 8003296:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003298:	2300      	movs	r3, #0
 800329a:	73fb      	strb	r3, [r7, #15]
 800329c:	e00d      	b.n	80032ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	3340      	adds	r3, #64	; 0x40
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	0c1b      	lsrs	r3, r3, #16
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	4413      	add	r3, r2
 80032b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	3301      	adds	r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
 80032ba:	7bfa      	ldrb	r2, [r7, #15]
 80032bc:	78fb      	ldrb	r3, [r7, #3]
 80032be:	3b01      	subs	r3, #1
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d3ec      	bcc.n	800329e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032c4:	883b      	ldrh	r3, [r7, #0]
 80032c6:	0418      	lsls	r0, r3, #16
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6819      	ldr	r1, [r3, #0]
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	4302      	orrs	r2, r0
 80032d4:	3340      	adds	r3, #64	; 0x40
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	460b      	mov	r3, r1
 80032f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	887a      	ldrh	r2, [r7, #2]
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e267      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d075      	beq.n	800342e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003342:	4b88      	ldr	r3, [pc, #544]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b04      	cmp	r3, #4
 800334c:	d00c      	beq.n	8003368 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800334e:	4b85      	ldr	r3, [pc, #532]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003356:	2b08      	cmp	r3, #8
 8003358:	d112      	bne.n	8003380 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800335a:	4b82      	ldr	r3, [pc, #520]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003366:	d10b      	bne.n	8003380 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003368:	4b7e      	ldr	r3, [pc, #504]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d05b      	beq.n	800342c <HAL_RCC_OscConfig+0x108>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d157      	bne.n	800342c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e242      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003388:	d106      	bne.n	8003398 <HAL_RCC_OscConfig+0x74>
 800338a:	4b76      	ldr	r3, [pc, #472]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a75      	ldr	r2, [pc, #468]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e01d      	b.n	80033d4 <HAL_RCC_OscConfig+0xb0>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0x98>
 80033a2:	4b70      	ldr	r3, [pc, #448]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a6f      	ldr	r2, [pc, #444]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80033a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4b6d      	ldr	r3, [pc, #436]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a6c      	ldr	r2, [pc, #432]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e00b      	b.n	80033d4 <HAL_RCC_OscConfig+0xb0>
 80033bc:	4b69      	ldr	r3, [pc, #420]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a68      	ldr	r2, [pc, #416]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80033c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	4b66      	ldr	r3, [pc, #408]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a65      	ldr	r2, [pc, #404]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80033ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d013      	beq.n	8003404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033dc:	f7fe f9ca 	bl	8001774 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fe f9c6 	bl	8001774 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e207      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f6:	4b5b      	ldr	r3, [pc, #364]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0xc0>
 8003402:	e014      	b.n	800342e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fe f9b6 	bl	8001774 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800340c:	f7fe f9b2 	bl	8001774 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e1f3      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341e:	4b51      	ldr	r3, [pc, #324]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0xe8>
 800342a:	e000      	b.n	800342e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d063      	beq.n	8003502 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800343a:	4b4a      	ldr	r3, [pc, #296]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003446:	4b47      	ldr	r3, [pc, #284]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800344e:	2b08      	cmp	r3, #8
 8003450:	d11c      	bne.n	800348c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003452:	4b44      	ldr	r3, [pc, #272]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d116      	bne.n	800348c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345e:	4b41      	ldr	r3, [pc, #260]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_RCC_OscConfig+0x152>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d001      	beq.n	8003476 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e1c7      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003476:	4b3b      	ldr	r3, [pc, #236]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4937      	ldr	r1, [pc, #220]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348a:	e03a      	b.n	8003502 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d020      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003494:	4b34      	ldr	r3, [pc, #208]	; (8003568 <HAL_RCC_OscConfig+0x244>)
 8003496:	2201      	movs	r2, #1
 8003498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349a:	f7fe f96b 	bl	8001774 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a2:	f7fe f967 	bl	8001774 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e1a8      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b4:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c0:	4b28      	ldr	r3, [pc, #160]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4925      	ldr	r1, [pc, #148]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	600b      	str	r3, [r1, #0]
 80034d4:	e015      	b.n	8003502 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d6:	4b24      	ldr	r3, [pc, #144]	; (8003568 <HAL_RCC_OscConfig+0x244>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fe f94a 	bl	8001774 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e4:	f7fe f946 	bl	8001774 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e187      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f6:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d036      	beq.n	800357c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d016      	beq.n	8003544 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003516:	4b15      	ldr	r3, [pc, #84]	; (800356c <HAL_RCC_OscConfig+0x248>)
 8003518:	2201      	movs	r2, #1
 800351a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fe f92a 	bl	8001774 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003524:	f7fe f926 	bl	8001774 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e167      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003536:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x200>
 8003542:	e01b      	b.n	800357c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003544:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_RCC_OscConfig+0x248>)
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354a:	f7fe f913 	bl	8001774 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003550:	e00e      	b.n	8003570 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003552:	f7fe f90f 	bl	8001774 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d907      	bls.n	8003570 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e150      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
 8003564:	40023800 	.word	0x40023800
 8003568:	42470000 	.word	0x42470000
 800356c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003570:	4b88      	ldr	r3, [pc, #544]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1ea      	bne.n	8003552 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8097 	beq.w	80036b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358a:	2300      	movs	r3, #0
 800358c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358e:	4b81      	ldr	r3, [pc, #516]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10f      	bne.n	80035ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	4b7d      	ldr	r3, [pc, #500]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	4a7c      	ldr	r2, [pc, #496]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a8:	6413      	str	r3, [r2, #64]	; 0x40
 80035aa:	4b7a      	ldr	r3, [pc, #488]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b6:	2301      	movs	r3, #1
 80035b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ba:	4b77      	ldr	r3, [pc, #476]	; (8003798 <HAL_RCC_OscConfig+0x474>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d118      	bne.n	80035f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c6:	4b74      	ldr	r3, [pc, #464]	; (8003798 <HAL_RCC_OscConfig+0x474>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a73      	ldr	r2, [pc, #460]	; (8003798 <HAL_RCC_OscConfig+0x474>)
 80035cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d2:	f7fe f8cf 	bl	8001774 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035da:	f7fe f8cb 	bl	8001774 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e10c      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <HAL_RCC_OscConfig+0x474>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f0      	beq.n	80035da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d106      	bne.n	800360e <HAL_RCC_OscConfig+0x2ea>
 8003600:	4b64      	ldr	r3, [pc, #400]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003604:	4a63      	ldr	r2, [pc, #396]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6713      	str	r3, [r2, #112]	; 0x70
 800360c:	e01c      	b.n	8003648 <HAL_RCC_OscConfig+0x324>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b05      	cmp	r3, #5
 8003614:	d10c      	bne.n	8003630 <HAL_RCC_OscConfig+0x30c>
 8003616:	4b5f      	ldr	r3, [pc, #380]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	4a5e      	ldr	r2, [pc, #376]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 800361c:	f043 0304 	orr.w	r3, r3, #4
 8003620:	6713      	str	r3, [r2, #112]	; 0x70
 8003622:	4b5c      	ldr	r3, [pc, #368]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	4a5b      	ldr	r2, [pc, #364]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	6713      	str	r3, [r2, #112]	; 0x70
 800362e:	e00b      	b.n	8003648 <HAL_RCC_OscConfig+0x324>
 8003630:	4b58      	ldr	r3, [pc, #352]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	4a57      	ldr	r2, [pc, #348]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	6713      	str	r3, [r2, #112]	; 0x70
 800363c:	4b55      	ldr	r3, [pc, #340]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	4a54      	ldr	r2, [pc, #336]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003642:	f023 0304 	bic.w	r3, r3, #4
 8003646:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d015      	beq.n	800367c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003650:	f7fe f890 	bl	8001774 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003656:	e00a      	b.n	800366e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003658:	f7fe f88c 	bl	8001774 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e0cb      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366e:	4b49      	ldr	r3, [pc, #292]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0ee      	beq.n	8003658 <HAL_RCC_OscConfig+0x334>
 800367a:	e014      	b.n	80036a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367c:	f7fe f87a 	bl	8001774 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003682:	e00a      	b.n	800369a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003684:	f7fe f876 	bl	8001774 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e0b5      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369a:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1ee      	bne.n	8003684 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036a6:	7dfb      	ldrb	r3, [r7, #23]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d105      	bne.n	80036b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ac:	4b39      	ldr	r3, [pc, #228]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	4a38      	ldr	r2, [pc, #224]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 80036b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80a1 	beq.w	8003804 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036c2:	4b34      	ldr	r3, [pc, #208]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d05c      	beq.n	8003788 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d141      	bne.n	800375a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d6:	4b31      	ldr	r3, [pc, #196]	; (800379c <HAL_RCC_OscConfig+0x478>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7fe f84a 	bl	8001774 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e4:	f7fe f846 	bl	8001774 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e087      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	4b27      	ldr	r3, [pc, #156]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69da      	ldr	r2, [r3, #28]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	019b      	lsls	r3, r3, #6
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	3b01      	subs	r3, #1
 800371c:	041b      	lsls	r3, r3, #16
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	061b      	lsls	r3, r3, #24
 8003726:	491b      	ldr	r1, [pc, #108]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003728:	4313      	orrs	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800372c:	4b1b      	ldr	r3, [pc, #108]	; (800379c <HAL_RCC_OscConfig+0x478>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fe f81f 	bl	8001774 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373a:	f7fe f81b 	bl	8001774 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e05c      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x416>
 8003758:	e054      	b.n	8003804 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b10      	ldr	r3, [pc, #64]	; (800379c <HAL_RCC_OscConfig+0x478>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fe f808 	bl	8001774 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003768:	f7fe f804 	bl	8001774 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e045      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x444>
 8003786:	e03d      	b.n	8003804 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e038      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
 8003794:	40023800 	.word	0x40023800
 8003798:	40007000 	.word	0x40007000
 800379c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <HAL_RCC_OscConfig+0x4ec>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d028      	beq.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d121      	bne.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d11a      	bne.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037d0:	4013      	ands	r3, r2
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037d8:	4293      	cmp	r3, r2
 80037da:	d111      	bne.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	3b01      	subs	r3, #1
 80037ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d107      	bne.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40023800 	.word	0x40023800

08003814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0cc      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003828:	4b68      	ldr	r3, [pc, #416]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d90c      	bls.n	8003850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b65      	ldr	r3, [pc, #404]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b63      	ldr	r3, [pc, #396]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e0b8      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d020      	beq.n	800389e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003868:	4b59      	ldr	r3, [pc, #356]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	4a58      	ldr	r2, [pc, #352]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003872:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003880:	4b53      	ldr	r3, [pc, #332]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	4a52      	ldr	r2, [pc, #328]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800388a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800388c:	4b50      	ldr	r3, [pc, #320]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	494d      	ldr	r1, [pc, #308]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d044      	beq.n	8003934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d107      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b2:	4b47      	ldr	r3, [pc, #284]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d119      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e07f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d003      	beq.n	80038d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d107      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d2:	4b3f      	ldr	r3, [pc, #252]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e06f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e2:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e067      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038f2:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f023 0203 	bic.w	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4934      	ldr	r1, [pc, #208]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	4313      	orrs	r3, r2
 8003902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003904:	f7fd ff36 	bl	8001774 <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	e00a      	b.n	8003922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800390c:	f7fd ff32 	bl	8001774 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	; 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e04f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003922:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 020c 	and.w	r2, r3, #12
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	429a      	cmp	r2, r3
 8003932:	d1eb      	bne.n	800390c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003934:	4b25      	ldr	r3, [pc, #148]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d20c      	bcs.n	800395c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003942:	4b22      	ldr	r3, [pc, #136]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b20      	ldr	r3, [pc, #128]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e032      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003968:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4916      	ldr	r1, [pc, #88]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003986:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	490e      	ldr	r1, [pc, #56]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800399a:	f000 f821 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 800399e:	4602      	mov	r2, r0
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	490a      	ldr	r1, [pc, #40]	; (80039d4 <HAL_RCC_ClockConfig+0x1c0>)
 80039ac:	5ccb      	ldrb	r3, [r1, r3]
 80039ae:	fa22 f303 	lsr.w	r3, r2, r3
 80039b2:	4a09      	ldr	r2, [pc, #36]	; (80039d8 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039b6:	4b09      	ldr	r3, [pc, #36]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fd fe96 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023c00 	.word	0x40023c00
 80039d0:	40023800 	.word	0x40023800
 80039d4:	0800b2c0 	.word	0x0800b2c0
 80039d8:	20000000 	.word	0x20000000
 80039dc:	20000004 	.word	0x20000004

080039e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e4:	b094      	sub	sp, #80	; 0x50
 80039e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	647b      	str	r3, [r7, #68]	; 0x44
 80039ec:	2300      	movs	r3, #0
 80039ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039f0:	2300      	movs	r3, #0
 80039f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039f8:	4b79      	ldr	r3, [pc, #484]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 030c 	and.w	r3, r3, #12
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d00d      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x40>
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	f200 80e1 	bhi.w	8003bcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x34>
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d003      	beq.n	8003a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a12:	e0db      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a14:	4b73      	ldr	r3, [pc, #460]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a18:	e0db      	b.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a1a:	4b73      	ldr	r3, [pc, #460]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a1e:	e0d8      	b.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a20:	4b6f      	ldr	r3, [pc, #444]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a2a:	4b6d      	ldr	r3, [pc, #436]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d063      	beq.n	8003afe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a36:	4b6a      	ldr	r3, [pc, #424]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	099b      	lsrs	r3, r3, #6
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a48:	633b      	str	r3, [r7, #48]	; 0x30
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a52:	4622      	mov	r2, r4
 8003a54:	462b      	mov	r3, r5
 8003a56:	f04f 0000 	mov.w	r0, #0
 8003a5a:	f04f 0100 	mov.w	r1, #0
 8003a5e:	0159      	lsls	r1, r3, #5
 8003a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a64:	0150      	lsls	r0, r2, #5
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	1a51      	subs	r1, r2, r1
 8003a6e:	6139      	str	r1, [r7, #16]
 8003a70:	4629      	mov	r1, r5
 8003a72:	eb63 0301 	sbc.w	r3, r3, r1
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a84:	4659      	mov	r1, fp
 8003a86:	018b      	lsls	r3, r1, #6
 8003a88:	4651      	mov	r1, sl
 8003a8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a8e:	4651      	mov	r1, sl
 8003a90:	018a      	lsls	r2, r1, #6
 8003a92:	4651      	mov	r1, sl
 8003a94:	ebb2 0801 	subs.w	r8, r2, r1
 8003a98:	4659      	mov	r1, fp
 8003a9a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ab2:	4690      	mov	r8, r2
 8003ab4:	4699      	mov	r9, r3
 8003ab6:	4623      	mov	r3, r4
 8003ab8:	eb18 0303 	adds.w	r3, r8, r3
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	462b      	mov	r3, r5
 8003ac0:	eb49 0303 	adc.w	r3, r9, r3
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	024b      	lsls	r3, r1, #9
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003adc:	4621      	mov	r1, r4
 8003ade:	024a      	lsls	r2, r1, #9
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003af0:	f7fd f86a 	bl	8000bc8 <__aeabi_uldivmod>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4613      	mov	r3, r2
 8003afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003afc:	e058      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003afe:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	099b      	lsrs	r3, r3, #6
 8003b04:	2200      	movs	r2, #0
 8003b06:	4618      	mov	r0, r3
 8003b08:	4611      	mov	r1, r2
 8003b0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b0e:	623b      	str	r3, [r7, #32]
 8003b10:	2300      	movs	r3, #0
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
 8003b14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b18:	4642      	mov	r2, r8
 8003b1a:	464b      	mov	r3, r9
 8003b1c:	f04f 0000 	mov.w	r0, #0
 8003b20:	f04f 0100 	mov.w	r1, #0
 8003b24:	0159      	lsls	r1, r3, #5
 8003b26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b2a:	0150      	lsls	r0, r2, #5
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4641      	mov	r1, r8
 8003b32:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b36:	4649      	mov	r1, r9
 8003b38:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b50:	ebb2 040a 	subs.w	r4, r2, sl
 8003b54:	eb63 050b 	sbc.w	r5, r3, fp
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	00eb      	lsls	r3, r5, #3
 8003b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b66:	00e2      	lsls	r2, r4, #3
 8003b68:	4614      	mov	r4, r2
 8003b6a:	461d      	mov	r5, r3
 8003b6c:	4643      	mov	r3, r8
 8003b6e:	18e3      	adds	r3, r4, r3
 8003b70:	603b      	str	r3, [r7, #0]
 8003b72:	464b      	mov	r3, r9
 8003b74:	eb45 0303 	adc.w	r3, r5, r3
 8003b78:	607b      	str	r3, [r7, #4]
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b86:	4629      	mov	r1, r5
 8003b88:	028b      	lsls	r3, r1, #10
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b90:	4621      	mov	r1, r4
 8003b92:	028a      	lsls	r2, r1, #10
 8003b94:	4610      	mov	r0, r2
 8003b96:	4619      	mov	r1, r3
 8003b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	61fa      	str	r2, [r7, #28]
 8003ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ba4:	f7fd f810 	bl	8000bc8 <__aeabi_uldivmod>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4613      	mov	r3, r2
 8003bae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	0c1b      	lsrs	r3, r3, #16
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	3301      	adds	r3, #1
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003bc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bca:	e002      	b.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3750      	adds	r7, #80	; 0x50
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800
 8003be4:	00f42400 	.word	0x00f42400
 8003be8:	007a1200 	.word	0x007a1200

08003bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	20000000 	.word	0x20000000

08003c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e041      	b.n	8003c9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d106      	bne.n	8003c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fd fbc6 	bl	80013bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4619      	mov	r1, r3
 8003c42:	4610      	mov	r0, r2
 8003c44:	f000 f95e 	bl	8003f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d001      	beq.n	8003cbc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e046      	b.n	8003d4a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a23      	ldr	r2, [pc, #140]	; (8003d58 <HAL_TIM_Base_Start+0xb4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d022      	beq.n	8003d14 <HAL_TIM_Base_Start+0x70>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd6:	d01d      	beq.n	8003d14 <HAL_TIM_Base_Start+0x70>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1f      	ldr	r2, [pc, #124]	; (8003d5c <HAL_TIM_Base_Start+0xb8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d018      	beq.n	8003d14 <HAL_TIM_Base_Start+0x70>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1e      	ldr	r2, [pc, #120]	; (8003d60 <HAL_TIM_Base_Start+0xbc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d013      	beq.n	8003d14 <HAL_TIM_Base_Start+0x70>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1c      	ldr	r2, [pc, #112]	; (8003d64 <HAL_TIM_Base_Start+0xc0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00e      	beq.n	8003d14 <HAL_TIM_Base_Start+0x70>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a1b      	ldr	r2, [pc, #108]	; (8003d68 <HAL_TIM_Base_Start+0xc4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d009      	beq.n	8003d14 <HAL_TIM_Base_Start+0x70>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a19      	ldr	r2, [pc, #100]	; (8003d6c <HAL_TIM_Base_Start+0xc8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d004      	beq.n	8003d14 <HAL_TIM_Base_Start+0x70>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a18      	ldr	r2, [pc, #96]	; (8003d70 <HAL_TIM_Base_Start+0xcc>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d111      	bne.n	8003d38 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b06      	cmp	r3, #6
 8003d24:	d010      	beq.n	8003d48 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0201 	orr.w	r2, r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d36:	e007      	b.n	8003d48 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40010000 	.word	0x40010000
 8003d5c:	40000400 	.word	0x40000400
 8003d60:	40000800 	.word	0x40000800
 8003d64:	40000c00 	.word	0x40000c00
 8003d68:	40010400 	.word	0x40010400
 8003d6c:	40014000 	.word	0x40014000
 8003d70:	40001800 	.word	0x40001800

08003d74 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6a1a      	ldr	r2, [r3, #32]
 8003d82:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10f      	bne.n	8003dac <HAL_TIM_Base_Stop+0x38>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6a1a      	ldr	r2, [r3, #32]
 8003d92:	f240 4344 	movw	r3, #1092	; 0x444
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d107      	bne.n	8003dac <HAL_TIM_Base_Stop+0x38>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0201 	bic.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d001      	beq.n	8003ddc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e04e      	b.n	8003e7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a23      	ldr	r2, [pc, #140]	; (8003e88 <HAL_TIM_Base_Start_IT+0xc4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d022      	beq.n	8003e44 <HAL_TIM_Base_Start_IT+0x80>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e06:	d01d      	beq.n	8003e44 <HAL_TIM_Base_Start_IT+0x80>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1f      	ldr	r2, [pc, #124]	; (8003e8c <HAL_TIM_Base_Start_IT+0xc8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d018      	beq.n	8003e44 <HAL_TIM_Base_Start_IT+0x80>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1e      	ldr	r2, [pc, #120]	; (8003e90 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d013      	beq.n	8003e44 <HAL_TIM_Base_Start_IT+0x80>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1c      	ldr	r2, [pc, #112]	; (8003e94 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00e      	beq.n	8003e44 <HAL_TIM_Base_Start_IT+0x80>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1b      	ldr	r2, [pc, #108]	; (8003e98 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d009      	beq.n	8003e44 <HAL_TIM_Base_Start_IT+0x80>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <HAL_TIM_Base_Start_IT+0xd8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d004      	beq.n	8003e44 <HAL_TIM_Base_Start_IT+0x80>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a18      	ldr	r2, [pc, #96]	; (8003ea0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d111      	bne.n	8003e68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b06      	cmp	r3, #6
 8003e54:	d010      	beq.n	8003e78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0201 	orr.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e66:	e007      	b.n	8003e78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40000800 	.word	0x40000800
 8003e94:	40000c00 	.word	0x40000c00
 8003e98:	40010400 	.word	0x40010400
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40001800 	.word	0x40001800

08003ea4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0201 	bic.w	r2, r2, #1
 8003eba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6a1a      	ldr	r2, [r3, #32]
 8003ec2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10f      	bne.n	8003eec <HAL_TIM_Base_Stop_IT+0x48>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6a1a      	ldr	r2, [r3, #32]
 8003ed2:	f240 4344 	movw	r3, #1092	; 0x444
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d107      	bne.n	8003eec <HAL_TIM_Base_Stop_IT+0x48>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0201 	bic.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a40      	ldr	r2, [pc, #256]	; (8004018 <TIM_Base_SetConfig+0x114>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d00f      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a3d      	ldr	r2, [pc, #244]	; (800401c <TIM_Base_SetConfig+0x118>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00b      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a3c      	ldr	r2, [pc, #240]	; (8004020 <TIM_Base_SetConfig+0x11c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d007      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a3b      	ldr	r2, [pc, #236]	; (8004024 <TIM_Base_SetConfig+0x120>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d003      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a3a      	ldr	r2, [pc, #232]	; (8004028 <TIM_Base_SetConfig+0x124>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d108      	bne.n	8003f56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a2f      	ldr	r2, [pc, #188]	; (8004018 <TIM_Base_SetConfig+0x114>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d02b      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f64:	d027      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a2c      	ldr	r2, [pc, #176]	; (800401c <TIM_Base_SetConfig+0x118>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d023      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a2b      	ldr	r2, [pc, #172]	; (8004020 <TIM_Base_SetConfig+0x11c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d01f      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a2a      	ldr	r2, [pc, #168]	; (8004024 <TIM_Base_SetConfig+0x120>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d01b      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a29      	ldr	r2, [pc, #164]	; (8004028 <TIM_Base_SetConfig+0x124>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d017      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a28      	ldr	r2, [pc, #160]	; (800402c <TIM_Base_SetConfig+0x128>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a27      	ldr	r2, [pc, #156]	; (8004030 <TIM_Base_SetConfig+0x12c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00f      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a26      	ldr	r2, [pc, #152]	; (8004034 <TIM_Base_SetConfig+0x130>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00b      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a25      	ldr	r2, [pc, #148]	; (8004038 <TIM_Base_SetConfig+0x134>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a24      	ldr	r2, [pc, #144]	; (800403c <TIM_Base_SetConfig+0x138>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a23      	ldr	r2, [pc, #140]	; (8004040 <TIM_Base_SetConfig+0x13c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d108      	bne.n	8003fc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <TIM_Base_SetConfig+0x114>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d003      	beq.n	8003ffc <TIM_Base_SetConfig+0xf8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a0c      	ldr	r2, [pc, #48]	; (8004028 <TIM_Base_SetConfig+0x124>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d103      	bne.n	8004004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	615a      	str	r2, [r3, #20]
}
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40010000 	.word	0x40010000
 800401c:	40000400 	.word	0x40000400
 8004020:	40000800 	.word	0x40000800
 8004024:	40000c00 	.word	0x40000c00
 8004028:	40010400 	.word	0x40010400
 800402c:	40014000 	.word	0x40014000
 8004030:	40014400 	.word	0x40014400
 8004034:	40014800 	.word	0x40014800
 8004038:	40001800 	.word	0x40001800
 800403c:	40001c00 	.word	0x40001c00
 8004040:	40002000 	.word	0x40002000

08004044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004058:	2302      	movs	r3, #2
 800405a:	e05a      	b.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004082:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a21      	ldr	r2, [pc, #132]	; (8004120 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d022      	beq.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a8:	d01d      	beq.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1d      	ldr	r2, [pc, #116]	; (8004124 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d018      	beq.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1b      	ldr	r2, [pc, #108]	; (8004128 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d013      	beq.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1a      	ldr	r2, [pc, #104]	; (800412c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00e      	beq.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a18      	ldr	r2, [pc, #96]	; (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d009      	beq.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a17      	ldr	r2, [pc, #92]	; (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d004      	beq.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a15      	ldr	r2, [pc, #84]	; (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d10c      	bne.n	8004100 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40010000 	.word	0x40010000
 8004124:	40000400 	.word	0x40000400
 8004128:	40000800 	.word	0x40000800
 800412c:	40000c00 	.word	0x40000c00
 8004130:	40010400 	.word	0x40010400
 8004134:	40014000 	.word	0x40014000
 8004138:	40001800 	.word	0x40001800

0800413c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800413c:	b084      	sub	sp, #16
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	f107 001c 	add.w	r0, r7, #28
 800414a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	2b01      	cmp	r3, #1
 8004152:	d122      	bne.n	800419a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800417c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800417e:	2b01      	cmp	r3, #1
 8004180:	d105      	bne.n	800418e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f001 fbee 	bl	8005970 <USB_CoreReset>
 8004194:	4603      	mov	r3, r0
 8004196:	73fb      	strb	r3, [r7, #15]
 8004198:	e01a      	b.n	80041d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f001 fbe2 	bl	8005970 <USB_CoreReset>
 80041ac:	4603      	mov	r3, r0
 80041ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80041b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	639a      	str	r2, [r3, #56]	; 0x38
 80041c2:	e005      	b.n	80041d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d10b      	bne.n	80041ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f043 0206 	orr.w	r2, r3, #6
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f043 0220 	orr.w	r2, r3, #32
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041fa:	b004      	add	sp, #16
 80041fc:	4770      	bx	lr
	...

08004200 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	4613      	mov	r3, r2
 800420c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	2b02      	cmp	r3, #2
 8004212:	d165      	bne.n	80042e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4a41      	ldr	r2, [pc, #260]	; (800431c <USB_SetTurnaroundTime+0x11c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d906      	bls.n	800422a <USB_SetTurnaroundTime+0x2a>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4a40      	ldr	r2, [pc, #256]	; (8004320 <USB_SetTurnaroundTime+0x120>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d202      	bcs.n	800422a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004224:	230f      	movs	r3, #15
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e062      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4a3c      	ldr	r2, [pc, #240]	; (8004320 <USB_SetTurnaroundTime+0x120>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d306      	bcc.n	8004240 <USB_SetTurnaroundTime+0x40>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4a3b      	ldr	r2, [pc, #236]	; (8004324 <USB_SetTurnaroundTime+0x124>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d202      	bcs.n	8004240 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800423a:	230e      	movs	r3, #14
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	e057      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4a38      	ldr	r2, [pc, #224]	; (8004324 <USB_SetTurnaroundTime+0x124>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d306      	bcc.n	8004256 <USB_SetTurnaroundTime+0x56>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4a37      	ldr	r2, [pc, #220]	; (8004328 <USB_SetTurnaroundTime+0x128>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d202      	bcs.n	8004256 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004250:	230d      	movs	r3, #13
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	e04c      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4a33      	ldr	r2, [pc, #204]	; (8004328 <USB_SetTurnaroundTime+0x128>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d306      	bcc.n	800426c <USB_SetTurnaroundTime+0x6c>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4a32      	ldr	r2, [pc, #200]	; (800432c <USB_SetTurnaroundTime+0x12c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d802      	bhi.n	800426c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004266:	230c      	movs	r3, #12
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e041      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4a2f      	ldr	r2, [pc, #188]	; (800432c <USB_SetTurnaroundTime+0x12c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d906      	bls.n	8004282 <USB_SetTurnaroundTime+0x82>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4a2e      	ldr	r2, [pc, #184]	; (8004330 <USB_SetTurnaroundTime+0x130>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d802      	bhi.n	8004282 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800427c:	230b      	movs	r3, #11
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	e036      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4a2a      	ldr	r2, [pc, #168]	; (8004330 <USB_SetTurnaroundTime+0x130>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d906      	bls.n	8004298 <USB_SetTurnaroundTime+0x98>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4a29      	ldr	r2, [pc, #164]	; (8004334 <USB_SetTurnaroundTime+0x134>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d802      	bhi.n	8004298 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004292:	230a      	movs	r3, #10
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	e02b      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4a26      	ldr	r2, [pc, #152]	; (8004334 <USB_SetTurnaroundTime+0x134>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d906      	bls.n	80042ae <USB_SetTurnaroundTime+0xae>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4a25      	ldr	r2, [pc, #148]	; (8004338 <USB_SetTurnaroundTime+0x138>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d202      	bcs.n	80042ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80042a8:	2309      	movs	r3, #9
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e020      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4a21      	ldr	r2, [pc, #132]	; (8004338 <USB_SetTurnaroundTime+0x138>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d306      	bcc.n	80042c4 <USB_SetTurnaroundTime+0xc4>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4a20      	ldr	r2, [pc, #128]	; (800433c <USB_SetTurnaroundTime+0x13c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d802      	bhi.n	80042c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80042be:	2308      	movs	r3, #8
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e015      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a1d      	ldr	r2, [pc, #116]	; (800433c <USB_SetTurnaroundTime+0x13c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d906      	bls.n	80042da <USB_SetTurnaroundTime+0xda>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <USB_SetTurnaroundTime+0x140>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d202      	bcs.n	80042da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80042d4:	2307      	movs	r3, #7
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	e00a      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80042da:	2306      	movs	r3, #6
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	e007      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80042e0:	79fb      	ldrb	r3, [r7, #7]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d102      	bne.n	80042ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80042e6:	2309      	movs	r3, #9
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	e001      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80042ec:	2309      	movs	r3, #9
 80042ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	029b      	lsls	r3, r3, #10
 8004304:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004308:	431a      	orrs	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	371c      	adds	r7, #28
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	00d8acbf 	.word	0x00d8acbf
 8004320:	00e4e1c0 	.word	0x00e4e1c0
 8004324:	00f42400 	.word	0x00f42400
 8004328:	01067380 	.word	0x01067380
 800432c:	011a499f 	.word	0x011a499f
 8004330:	01312cff 	.word	0x01312cff
 8004334:	014ca43f 	.word	0x014ca43f
 8004338:	016e3600 	.word	0x016e3600
 800433c:	01a6ab1f 	.word	0x01a6ab1f
 8004340:	01e84800 	.word	0x01e84800

08004344 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f043 0201 	orr.w	r2, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f023 0201 	bic.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d115      	bne.n	80043d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043b6:	2001      	movs	r0, #1
 80043b8:	f7fd f9e8 	bl	800178c <HAL_Delay>
      ms++;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3301      	adds	r3, #1
 80043c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f001 fa45 	bl	8005852 <USB_GetMode>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d01e      	beq.n	800440c <USB_SetCurrentMode+0x84>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b31      	cmp	r3, #49	; 0x31
 80043d2:	d9f0      	bls.n	80043b6 <USB_SetCurrentMode+0x2e>
 80043d4:	e01a      	b.n	800440c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d115      	bne.n	8004408 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043e8:	2001      	movs	r0, #1
 80043ea:	f7fd f9cf 	bl	800178c <HAL_Delay>
      ms++;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3301      	adds	r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f001 fa2c 	bl	8005852 <USB_GetMode>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <USB_SetCurrentMode+0x84>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b31      	cmp	r3, #49	; 0x31
 8004404:	d9f0      	bls.n	80043e8 <USB_SetCurrentMode+0x60>
 8004406:	e001      	b.n	800440c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e005      	b.n	8004418 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b32      	cmp	r3, #50	; 0x32
 8004410:	d101      	bne.n	8004416 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004420:	b084      	sub	sp, #16
 8004422:	b580      	push	{r7, lr}
 8004424:	b086      	sub	sp, #24
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800442e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	e009      	b.n	8004454 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	3340      	adds	r3, #64	; 0x40
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	2200      	movs	r2, #0
 800444c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	3301      	adds	r3, #1
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	2b0e      	cmp	r3, #14
 8004458:	d9f2      	bls.n	8004440 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800445a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800445c:	2b00      	cmp	r3, #0
 800445e:	d11c      	bne.n	800449a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800446e:	f043 0302 	orr.w	r3, r3, #2
 8004472:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	639a      	str	r2, [r3, #56]	; 0x38
 8004498:	e00b      	b.n	80044b2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044b8:	461a      	mov	r2, r3
 80044ba:	2300      	movs	r3, #0
 80044bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c4:	4619      	mov	r1, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044cc:	461a      	mov	r2, r3
 80044ce:	680b      	ldr	r3, [r1, #0]
 80044d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d10c      	bne.n	80044f2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d104      	bne.n	80044e8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044de:	2100      	movs	r1, #0
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f965 	bl	80047b0 <USB_SetDevSpeed>
 80044e6:	e008      	b.n	80044fa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044e8:	2101      	movs	r1, #1
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f960 	bl	80047b0 <USB_SetDevSpeed>
 80044f0:	e003      	b.n	80044fa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044f2:	2103      	movs	r1, #3
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f95b 	bl	80047b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044fa:	2110      	movs	r1, #16
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f8f3 	bl	80046e8 <USB_FlushTxFifo>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f91f 	bl	8004750 <USB_FlushRxFifo>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004522:	461a      	mov	r2, r3
 8004524:	2300      	movs	r3, #0
 8004526:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452e:	461a      	mov	r2, r3
 8004530:	2300      	movs	r3, #0
 8004532:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453a:	461a      	mov	r2, r3
 800453c:	2300      	movs	r3, #0
 800453e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004540:	2300      	movs	r3, #0
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	e043      	b.n	80045ce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004558:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800455c:	d118      	bne.n	8004590 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004570:	461a      	mov	r2, r3
 8004572:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	e013      	b.n	80045a2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004586:	461a      	mov	r2, r3
 8004588:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	e008      	b.n	80045a2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459c:	461a      	mov	r2, r3
 800459e:	2300      	movs	r3, #0
 80045a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ae:	461a      	mov	r2, r3
 80045b0:	2300      	movs	r3, #0
 80045b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c0:	461a      	mov	r2, r3
 80045c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	3301      	adds	r3, #1
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d3b7      	bcc.n	8004546 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045d6:	2300      	movs	r3, #0
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	e043      	b.n	8004664 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045f2:	d118      	bne.n	8004626 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10a      	bne.n	8004610 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004606:	461a      	mov	r2, r3
 8004608:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	e013      	b.n	8004638 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461c:	461a      	mov	r2, r3
 800461e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	e008      	b.n	8004638 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004632:	461a      	mov	r2, r3
 8004634:	2300      	movs	r3, #0
 8004636:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004644:	461a      	mov	r2, r3
 8004646:	2300      	movs	r3, #0
 8004648:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004656:	461a      	mov	r2, r3
 8004658:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800465c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	3301      	adds	r3, #1
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	429a      	cmp	r2, r3
 800466a:	d3b7      	bcc.n	80045dc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800467a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800467e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800468c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	2b00      	cmp	r3, #0
 8004692:	d105      	bne.n	80046a0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	f043 0210 	orr.w	r2, r3, #16
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	699a      	ldr	r2, [r3, #24]
 80046a4:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <USB_DevInit+0x2c4>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f043 0208 	orr.w	r2, r3, #8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d107      	bne.n	80046d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046cc:	f043 0304 	orr.w	r3, r3, #4
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046e0:	b004      	add	sp, #16
 80046e2:	4770      	bx	lr
 80046e4:	803c3800 	.word	0x803c3800

080046e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3301      	adds	r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4a13      	ldr	r2, [pc, #76]	; (800474c <USB_FlushTxFifo+0x64>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d901      	bls.n	8004708 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e01b      	b.n	8004740 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	daf2      	bge.n	80046f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	019b      	lsls	r3, r3, #6
 8004718:	f043 0220 	orr.w	r2, r3, #32
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3301      	adds	r3, #1
 8004724:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4a08      	ldr	r2, [pc, #32]	; (800474c <USB_FlushTxFifo+0x64>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d901      	bls.n	8004732 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e006      	b.n	8004740 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b20      	cmp	r3, #32
 800473c:	d0f0      	beq.n	8004720 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	00030d40 	.word	0x00030d40

08004750 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3301      	adds	r3, #1
 8004760:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4a11      	ldr	r2, [pc, #68]	; (80047ac <USB_FlushRxFifo+0x5c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d901      	bls.n	800476e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e018      	b.n	80047a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	daf2      	bge.n	800475c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2210      	movs	r2, #16
 800477e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	3301      	adds	r3, #1
 8004784:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4a08      	ldr	r2, [pc, #32]	; (80047ac <USB_FlushRxFifo+0x5c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d901      	bls.n	8004792 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e006      	b.n	80047a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f003 0310 	and.w	r3, r3, #16
 800479a:	2b10      	cmp	r3, #16
 800479c:	d0f0      	beq.n	8004780 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	00030d40 	.word	0x00030d40

080047b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	68f9      	ldr	r1, [r7, #12]
 80047cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047d0:	4313      	orrs	r3, r2
 80047d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b087      	sub	sp, #28
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 0306 	and.w	r3, r3, #6
 80047fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004802:	2300      	movs	r3, #0
 8004804:	75fb      	strb	r3, [r7, #23]
 8004806:	e00a      	b.n	800481e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d002      	beq.n	8004814 <USB_GetDevSpeed+0x32>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b06      	cmp	r3, #6
 8004812:	d102      	bne.n	800481a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004814:	2302      	movs	r3, #2
 8004816:	75fb      	strb	r3, [r7, #23]
 8004818:	e001      	b.n	800481e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800481a:	230f      	movs	r3, #15
 800481c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800481e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004820:	4618      	mov	r0, r3
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	785b      	ldrb	r3, [r3, #1]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d13a      	bne.n	80048be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	2101      	movs	r1, #1
 800485a:	fa01 f303 	lsl.w	r3, r1, r3
 800485e:	b29b      	uxth	r3, r3
 8004860:	68f9      	ldr	r1, [r7, #12]
 8004862:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004866:	4313      	orrs	r3, r2
 8004868:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d155      	bne.n	800492c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	791b      	ldrb	r3, [r3, #4]
 800489a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800489c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	059b      	lsls	r3, r3, #22
 80048a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048a4:	4313      	orrs	r3, r2
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	0151      	lsls	r1, r2, #5
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	440a      	add	r2, r1
 80048ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	e036      	b.n	800492c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c4:	69da      	ldr	r2, [r3, #28]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	2101      	movs	r1, #1
 80048d0:	fa01 f303 	lsl.w	r3, r1, r3
 80048d4:	041b      	lsls	r3, r3, #16
 80048d6:	68f9      	ldr	r1, [r7, #12]
 80048d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048dc:	4313      	orrs	r3, r2
 80048de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d11a      	bne.n	800492c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	791b      	ldrb	r3, [r3, #4]
 8004910:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004912:	430b      	orrs	r3, r1
 8004914:	4313      	orrs	r3, r2
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	0151      	lsls	r1, r2, #5
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	440a      	add	r2, r1
 800491e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800492a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
	...

0800493c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	785b      	ldrb	r3, [r3, #1]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d161      	bne.n	8004a1c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800496a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800496e:	d11f      	bne.n	80049b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	0151      	lsls	r1, r2, #5
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	440a      	add	r2, r1
 8004986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800498e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	0151      	lsls	r1, r2, #5
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	440a      	add	r2, r1
 80049a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	2101      	movs	r1, #1
 80049c2:	fa01 f303 	lsl.w	r3, r1, r3
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	68f9      	ldr	r1, [r7, #12]
 80049cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049d0:	4013      	ands	r3, r2
 80049d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049da:	69da      	ldr	r2, [r3, #28]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	2101      	movs	r1, #1
 80049e6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	43db      	mvns	r3, r3
 80049ee:	68f9      	ldr	r1, [r7, #12]
 80049f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049f4:	4013      	ands	r3, r2
 80049f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	0159      	lsls	r1, r3, #5
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	440b      	add	r3, r1
 8004a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a12:	4619      	mov	r1, r3
 8004a14:	4b35      	ldr	r3, [pc, #212]	; (8004aec <USB_DeactivateEndpoint+0x1b0>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	600b      	str	r3, [r1, #0]
 8004a1a:	e060      	b.n	8004ade <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a32:	d11f      	bne.n	8004a74 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a52:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	0151      	lsls	r1, r2, #5
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	440a      	add	r2, r1
 8004a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	2101      	movs	r1, #1
 8004a86:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8a:	041b      	lsls	r3, r3, #16
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a94:	4013      	ands	r3, r2
 8004a96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9e:	69da      	ldr	r2, [r3, #28]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004aae:	041b      	lsls	r3, r3, #16
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	68f9      	ldr	r1, [r7, #12]
 8004ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ab8:	4013      	ands	r3, r2
 8004aba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	0159      	lsls	r1, r3, #5
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	440b      	add	r3, r1
 8004ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <USB_DeactivateEndpoint+0x1b4>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	ec337800 	.word	0xec337800
 8004af0:	eff37800 	.word	0xeff37800

08004af4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08a      	sub	sp, #40	; 0x28
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	4613      	mov	r3, r2
 8004b00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	785b      	ldrb	r3, [r3, #1]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	f040 815c 	bne.w	8004dce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d132      	bne.n	8004b84 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	0151      	lsls	r1, r2, #5
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	440a      	add	r2, r1
 8004b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	0151      	lsls	r1, r2, #5
 8004b54:	69fa      	ldr	r2, [r7, #28]
 8004b56:	440a      	add	r2, r1
 8004b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	0151      	lsls	r1, r2, #5
 8004b74:	69fa      	ldr	r2, [r7, #28]
 8004b76:	440a      	add	r2, r1
 8004b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b7c:	0cdb      	lsrs	r3, r3, #19
 8004b7e:	04db      	lsls	r3, r3, #19
 8004b80:	6113      	str	r3, [r2, #16]
 8004b82:	e074      	b.n	8004c6e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	0151      	lsls	r1, r2, #5
 8004b96:	69fa      	ldr	r2, [r7, #28]
 8004b98:	440a      	add	r2, r1
 8004b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b9e:	0cdb      	lsrs	r3, r3, #19
 8004ba0:	04db      	lsls	r3, r3, #19
 8004ba2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	0151      	lsls	r1, r2, #5
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	440a      	add	r2, r1
 8004bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bbe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bc2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	6999      	ldr	r1, [r3, #24]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	440b      	add	r3, r1
 8004be0:	1e59      	subs	r1, r3, #1
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bea:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004bec:	4b9d      	ldr	r3, [pc, #628]	; (8004e64 <USB_EPStartXfer+0x370>)
 8004bee:	400b      	ands	r3, r1
 8004bf0:	69b9      	ldr	r1, [r7, #24]
 8004bf2:	0148      	lsls	r0, r1, #5
 8004bf4:	69f9      	ldr	r1, [r7, #28]
 8004bf6:	4401      	add	r1, r0
 8004bf8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0c:	691a      	ldr	r2, [r3, #16]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c16:	69b9      	ldr	r1, [r7, #24]
 8004c18:	0148      	lsls	r0, r1, #5
 8004c1a:	69f9      	ldr	r1, [r7, #28]
 8004c1c:	4401      	add	r1, r0
 8004c1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c22:	4313      	orrs	r3, r2
 8004c24:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	791b      	ldrb	r3, [r3, #4]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d11f      	bne.n	8004c6e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	0151      	lsls	r1, r2, #5
 8004c40:	69fa      	ldr	r2, [r7, #28]
 8004c42:	440a      	add	r2, r1
 8004c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c48:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c4c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	0151      	lsls	r1, r2, #5
 8004c60:	69fa      	ldr	r2, [r7, #28]
 8004c62:	440a      	add	r2, r1
 8004c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c6c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d14b      	bne.n	8004d0c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d009      	beq.n	8004c90 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c88:	461a      	mov	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	791b      	ldrb	r3, [r3, #4]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d128      	bne.n	8004cea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d110      	bne.n	8004cca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	0151      	lsls	r1, r2, #5
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	440a      	add	r2, r1
 8004cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	e00f      	b.n	8004cea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	0151      	lsls	r1, r2, #5
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	440a      	add	r2, r1
 8004ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	e133      	b.n	8004f74 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	0151      	lsls	r1, r2, #5
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	440a      	add	r2, r1
 8004d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d2a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	791b      	ldrb	r3, [r3, #4]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d015      	beq.n	8004d60 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 811b 	beq.w	8004f74 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	2101      	movs	r1, #1
 8004d50:	fa01 f303 	lsl.w	r3, r1, r3
 8004d54:	69f9      	ldr	r1, [r7, #28]
 8004d56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	634b      	str	r3, [r1, #52]	; 0x34
 8004d5e:	e109      	b.n	8004f74 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d110      	bne.n	8004d92 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	0151      	lsls	r1, r2, #5
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	440a      	add	r2, r1
 8004d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	e00f      	b.n	8004db2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	6919      	ldr	r1, [r3, #16]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	781a      	ldrb	r2, [r3, #0]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	b298      	uxth	r0, r3
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 fade 	bl	8005388 <USB_WritePacket>
 8004dcc:	e0d2      	b.n	8004f74 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004de8:	0cdb      	lsrs	r3, r3, #19
 8004dea:	04db      	lsls	r3, r3, #19
 8004dec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e10:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d126      	bne.n	8004e68 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e30:	69b9      	ldr	r1, [r7, #24]
 8004e32:	0148      	lsls	r0, r1, #5
 8004e34:	69f9      	ldr	r1, [r7, #28]
 8004e36:	4401      	add	r1, r0
 8004e38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	0151      	lsls	r1, r2, #5
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	440a      	add	r2, r1
 8004e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e5e:	6113      	str	r3, [r2, #16]
 8004e60:	e03a      	b.n	8004ed8 <USB_EPStartXfer+0x3e4>
 8004e62:	bf00      	nop
 8004e64:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	699a      	ldr	r2, [r3, #24]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4413      	add	r3, r2
 8004e72:	1e5a      	subs	r2, r3, #1
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	8afa      	ldrh	r2, [r7, #22]
 8004e84:	fb03 f202 	mul.w	r2, r3, r2
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	8afb      	ldrh	r3, [r7, #22]
 8004e9c:	04d9      	lsls	r1, r3, #19
 8004e9e:	4b38      	ldr	r3, [pc, #224]	; (8004f80 <USB_EPStartXfer+0x48c>)
 8004ea0:	400b      	ands	r3, r1
 8004ea2:	69b9      	ldr	r1, [r7, #24]
 8004ea4:	0148      	lsls	r0, r1, #5
 8004ea6:	69f9      	ldr	r1, [r7, #28]
 8004ea8:	4401      	add	r1, r0
 8004eaa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ec8:	69b9      	ldr	r1, [r7, #24]
 8004eca:	0148      	lsls	r0, r1, #5
 8004ecc:	69f9      	ldr	r1, [r7, #28]
 8004ece:	4401      	add	r1, r0
 8004ed0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d10d      	bne.n	8004efa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d009      	beq.n	8004efa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	6919      	ldr	r1, [r3, #16]
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef6:	460a      	mov	r2, r1
 8004ef8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	791b      	ldrb	r3, [r3, #4]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d128      	bne.n	8004f54 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d110      	bne.n	8004f34 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	0151      	lsls	r1, r2, #5
 8004f24:	69fa      	ldr	r2, [r7, #28]
 8004f26:	440a      	add	r2, r1
 8004f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	e00f      	b.n	8004f54 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	0151      	lsls	r1, r2, #5
 8004f46:	69fa      	ldr	r2, [r7, #28]
 8004f48:	440a      	add	r2, r1
 8004f4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f52:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3720      	adds	r7, #32
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	1ff80000 	.word	0x1ff80000

08004f84 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	785b      	ldrb	r3, [r3, #1]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	f040 80ce 	bne.w	8005142 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d132      	bne.n	8005014 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	0151      	lsls	r1, r2, #5
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	440a      	add	r2, r1
 8004fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	0151      	lsls	r1, r2, #5
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	440a      	add	r2, r1
 8004fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ff0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	0151      	lsls	r1, r2, #5
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	440a      	add	r2, r1
 8005008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800500c:	0cdb      	lsrs	r3, r3, #19
 800500e:	04db      	lsls	r3, r3, #19
 8005010:	6113      	str	r3, [r2, #16]
 8005012:	e04e      	b.n	80050b2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	0151      	lsls	r1, r2, #5
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	440a      	add	r2, r1
 800502a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502e:	0cdb      	lsrs	r3, r3, #19
 8005030:	04db      	lsls	r3, r3, #19
 8005032:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	0151      	lsls	r1, r2, #5
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	440a      	add	r2, r1
 800504a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800504e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005052:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005056:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	699a      	ldr	r2, [r3, #24]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	429a      	cmp	r2, r3
 8005062:	d903      	bls.n	800506c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	0151      	lsls	r1, r2, #5
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	440a      	add	r2, r1
 8005082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005086:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800508a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a2:	6939      	ldr	r1, [r7, #16]
 80050a4:	0148      	lsls	r0, r1, #5
 80050a6:	6979      	ldr	r1, [r7, #20]
 80050a8:	4401      	add	r1, r0
 80050aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050ae:	4313      	orrs	r3, r2
 80050b0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d11e      	bne.n	80050f6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d009      	beq.n	80050d4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050cc:	461a      	mov	r2, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	0151      	lsls	r1, r2, #5
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	440a      	add	r2, r1
 80050ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	e097      	b.n	8005226 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	0151      	lsls	r1, r2, #5
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	440a      	add	r2, r1
 800510c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005110:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005114:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 8083 	beq.w	8005226 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	2101      	movs	r1, #1
 8005132:	fa01 f303 	lsl.w	r3, r1, r3
 8005136:	6979      	ldr	r1, [r7, #20]
 8005138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800513c:	4313      	orrs	r3, r2
 800513e:	634b      	str	r3, [r1, #52]	; 0x34
 8005140:	e071      	b.n	8005226 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	0151      	lsls	r1, r2, #5
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	440a      	add	r2, r1
 8005158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800515c:	0cdb      	lsrs	r3, r3, #19
 800515e:	04db      	lsls	r3, r3, #19
 8005160:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	0151      	lsls	r1, r2, #5
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	440a      	add	r2, r1
 8005178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800517c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005180:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005184:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051d4:	6939      	ldr	r1, [r7, #16]
 80051d6:	0148      	lsls	r0, r1, #5
 80051d8:	6979      	ldr	r1, [r7, #20]
 80051da:	4401      	add	r1, r0
 80051dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051e0:	4313      	orrs	r3, r2
 80051e2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80051e4:	79fb      	ldrb	r3, [r7, #7]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d10d      	bne.n	8005206 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d009      	beq.n	8005206 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	6919      	ldr	r1, [r3, #16]
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005202:	460a      	mov	r2, r1
 8005204:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	0151      	lsls	r1, r2, #5
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	440a      	add	r2, r1
 800521c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005220:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005224:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	785b      	ldrb	r3, [r3, #1]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d14a      	bne.n	80052e8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005266:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800526a:	f040 8086 	bne.w	800537a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	7812      	ldrb	r2, [r2, #0]
 8005282:	0151      	lsls	r1, r2, #5
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	440a      	add	r2, r1
 8005288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800528c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005290:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	7812      	ldrb	r2, [r2, #0]
 80052a6:	0151      	lsls	r1, r2, #5
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	440a      	add	r2, r1
 80052ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3301      	adds	r3, #1
 80052ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f242 7210 	movw	r2, #10000	; 0x2710
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d902      	bls.n	80052cc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	75fb      	strb	r3, [r7, #23]
          break;
 80052ca:	e056      	b.n	800537a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052e4:	d0e7      	beq.n	80052b6 <USB_EPStopXfer+0x82>
 80052e6:	e048      	b.n	800537a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005300:	d13b      	bne.n	800537a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	7812      	ldrb	r2, [r2, #0]
 8005316:	0151      	lsls	r1, r2, #5
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	440a      	add	r2, r1
 800531c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005320:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005324:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	7812      	ldrb	r2, [r2, #0]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	440a      	add	r2, r1
 8005340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005344:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005348:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3301      	adds	r3, #1
 800534e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f242 7210 	movw	r2, #10000	; 0x2710
 8005356:	4293      	cmp	r3, r2
 8005358:	d902      	bls.n	8005360 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	75fb      	strb	r3, [r7, #23]
          break;
 800535e:	e00c      	b.n	800537a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005374:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005378:	d0e7      	beq.n	800534a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800537a:	7dfb      	ldrb	r3, [r7, #23]
}
 800537c:	4618      	mov	r0, r3
 800537e:	371c      	adds	r7, #28
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005388:	b480      	push	{r7}
 800538a:	b089      	sub	sp, #36	; 0x24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	4611      	mov	r1, r2
 8005394:	461a      	mov	r2, r3
 8005396:	460b      	mov	r3, r1
 8005398:	71fb      	strb	r3, [r7, #7]
 800539a:	4613      	mov	r3, r2
 800539c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80053a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d123      	bne.n	80053f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053ae:	88bb      	ldrh	r3, [r7, #4]
 80053b0:	3303      	adds	r3, #3
 80053b2:	089b      	lsrs	r3, r3, #2
 80053b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	61bb      	str	r3, [r7, #24]
 80053ba:	e018      	b.n	80053ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	031a      	lsls	r2, r3, #12
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053c8:	461a      	mov	r2, r3
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	3301      	adds	r3, #1
 80053d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	3301      	adds	r3, #1
 80053da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	3301      	adds	r3, #1
 80053e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	3301      	adds	r3, #1
 80053e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	3301      	adds	r3, #1
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d3e2      	bcc.n	80053bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3724      	adds	r7, #36	; 0x24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005404:	b480      	push	{r7}
 8005406:	b08b      	sub	sp, #44	; 0x2c
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	4613      	mov	r3, r2
 8005410:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800541a:	88fb      	ldrh	r3, [r7, #6]
 800541c:	089b      	lsrs	r3, r3, #2
 800541e:	b29b      	uxth	r3, r3
 8005420:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	f003 0303 	and.w	r3, r3, #3
 8005428:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800542a:	2300      	movs	r3, #0
 800542c:	623b      	str	r3, [r7, #32]
 800542e:	e014      	b.n	800545a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	601a      	str	r2, [r3, #0]
    pDest++;
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	3301      	adds	r3, #1
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	3301      	adds	r3, #1
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	3301      	adds	r3, #1
 800544c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	3301      	adds	r3, #1
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	3301      	adds	r3, #1
 8005458:	623b      	str	r3, [r7, #32]
 800545a:	6a3a      	ldr	r2, [r7, #32]
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	429a      	cmp	r2, r3
 8005460:	d3e6      	bcc.n	8005430 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005462:	8bfb      	ldrh	r3, [r7, #30]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01e      	beq.n	80054a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005472:	461a      	mov	r2, r3
 8005474:	f107 0310 	add.w	r3, r7, #16
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
 8005488:	b2da      	uxtb	r2, r3
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	701a      	strb	r2, [r3, #0]
      i++;
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	3301      	adds	r3, #1
 8005492:	623b      	str	r3, [r7, #32]
      pDest++;
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	3301      	adds	r3, #1
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800549a:	8bfb      	ldrh	r3, [r7, #30]
 800549c:	3b01      	subs	r3, #1
 800549e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80054a0:	8bfb      	ldrh	r3, [r7, #30]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1ea      	bne.n	800547c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	372c      	adds	r7, #44	; 0x2c
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	785b      	ldrb	r3, [r3, #1]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d12c      	bne.n	800552a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	db12      	blt.n	8005508 <USB_EPSetStall+0x54>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00f      	beq.n	8005508 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	0151      	lsls	r1, r2, #5
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	440a      	add	r2, r1
 80054fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005502:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005506:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	0151      	lsls	r1, r2, #5
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	440a      	add	r2, r1
 800551e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005522:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	e02b      	b.n	8005582 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	db12      	blt.n	8005562 <USB_EPSetStall+0xae>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00f      	beq.n	8005562 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	0151      	lsls	r1, r2, #5
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	440a      	add	r2, r1
 8005558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800555c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005560:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	440a      	add	r2, r1
 8005578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800557c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005580:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	785b      	ldrb	r3, [r3, #1]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d128      	bne.n	80055fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	0151      	lsls	r1, r2, #5
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	440a      	add	r2, r1
 80055c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	791b      	ldrb	r3, [r3, #4]
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d003      	beq.n	80055dc <USB_EPClearStall+0x4c>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	791b      	ldrb	r3, [r3, #4]
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d138      	bne.n	800564e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	e027      	b.n	800564e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	0151      	lsls	r1, r2, #5
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	440a      	add	r2, r1
 8005614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005618:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800561c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	791b      	ldrb	r3, [r3, #4]
 8005622:	2b03      	cmp	r3, #3
 8005624:	d003      	beq.n	800562e <USB_EPClearStall+0x9e>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	791b      	ldrb	r3, [r3, #4]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d10f      	bne.n	800564e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	0151      	lsls	r1, r2, #5
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	440a      	add	r2, r1
 8005644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800564c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	460b      	mov	r3, r1
 8005666:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800567a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800567e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005690:	68f9      	ldr	r1, [r7, #12]
 8005692:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005696:	4313      	orrs	r3, r2
 8005698:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056c2:	f023 0303 	bic.w	r3, r3, #3
 80056c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056d6:	f023 0302 	bic.w	r3, r3, #2
 80056da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b085      	sub	sp, #20
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005704:	f023 0303 	bic.w	r3, r3, #3
 8005708:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005718:	f043 0302 	orr.w	r3, r3, #2
 800571c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4013      	ands	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005744:	68fb      	ldr	r3, [r7, #12]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005752:	b480      	push	{r7}
 8005754:	b085      	sub	sp, #20
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	4013      	ands	r3, r2
 8005774:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	0c1b      	lsrs	r3, r3, #16
}
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005786:	b480      	push	{r7}
 8005788:	b085      	sub	sp, #20
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	4013      	ands	r3, r2
 80057a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	b29b      	uxth	r3, r3
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b085      	sub	sp, #20
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	460b      	mov	r3, r1
 80057c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	4013      	ands	r3, r2
 80057e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057e8:	68bb      	ldr	r3, [r7, #8]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b087      	sub	sp, #28
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	460b      	mov	r3, r1
 8005800:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005818:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800581a:	78fb      	ldrb	r3, [r7, #3]
 800581c:	f003 030f 	and.w	r3, r3, #15
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	fa22 f303 	lsr.w	r3, r2, r3
 8005826:	01db      	lsls	r3, r3, #7
 8005828:	b2db      	uxtb	r3, r3
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4013      	ands	r3, r2
 8005842:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005844:	68bb      	ldr	r3, [r7, #8]
}
 8005846:	4618      	mov	r0, r3
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	f003 0301 	and.w	r3, r3, #1
}
 8005862:	4618      	mov	r0, r3
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800586e:	b480      	push	{r7}
 8005870:	b085      	sub	sp, #20
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005888:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800588c:	f023 0307 	bic.w	r3, r3, #7
 8005890:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	460b      	mov	r3, r1
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	333c      	adds	r3, #60	; 0x3c
 80058ca:	3304      	adds	r3, #4
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	4a26      	ldr	r2, [pc, #152]	; (800596c <USB_EP0_OutStart+0xb8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d90a      	bls.n	80058ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058e8:	d101      	bne.n	80058ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	e037      	b.n	800595e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f4:	461a      	mov	r2, r3
 80058f6:	2300      	movs	r3, #0
 80058f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005908:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800590c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800591c:	f043 0318 	orr.w	r3, r3, #24
 8005920:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005930:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005934:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005936:	7afb      	ldrb	r3, [r7, #11]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d10f      	bne.n	800595c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005942:	461a      	mov	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005956:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800595a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	4f54300a 	.word	0x4f54300a

08005970 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3301      	adds	r3, #1
 8005980:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4a13      	ldr	r2, [pc, #76]	; (80059d4 <USB_CoreReset+0x64>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d901      	bls.n	800598e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e01b      	b.n	80059c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	daf2      	bge.n	800597c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f043 0201 	orr.w	r2, r3, #1
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3301      	adds	r3, #1
 80059aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4a09      	ldr	r2, [pc, #36]	; (80059d4 <USB_CoreReset+0x64>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d901      	bls.n	80059b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e006      	b.n	80059c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d0f0      	beq.n	80059a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	00030d40 	.word	0x00030d40

080059d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	460b      	mov	r3, r1
 80059e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80059e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80059e8:	f002 fcae 	bl	8008348 <USBD_static_malloc>
 80059ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d109      	bne.n	8005a08 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	32b0      	adds	r2, #176	; 0xb0
 80059fe:	2100      	movs	r1, #0
 8005a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005a04:	2302      	movs	r3, #2
 8005a06:	e0d4      	b.n	8005bb2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005a08:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f002 fd16 	bl	8008440 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	32b0      	adds	r2, #176	; 0xb0
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	32b0      	adds	r2, #176	; 0xb0
 8005a2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	7c1b      	ldrb	r3, [r3, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d138      	bne.n	8005ab2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005a40:	4b5e      	ldr	r3, [pc, #376]	; (8005bbc <USBD_CDC_Init+0x1e4>)
 8005a42:	7819      	ldrb	r1, [r3, #0]
 8005a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a48:	2202      	movs	r2, #2
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f002 fb59 	bl	8008102 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005a50:	4b5a      	ldr	r3, [pc, #360]	; (8005bbc <USBD_CDC_Init+0x1e4>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	f003 020f 	and.w	r2, r3, #15
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	440b      	add	r3, r1
 8005a64:	3324      	adds	r3, #36	; 0x24
 8005a66:	2201      	movs	r2, #1
 8005a68:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005a6a:	4b55      	ldr	r3, [pc, #340]	; (8005bc0 <USBD_CDC_Init+0x1e8>)
 8005a6c:	7819      	ldrb	r1, [r3, #0]
 8005a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a72:	2202      	movs	r2, #2
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f002 fb44 	bl	8008102 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005a7a:	4b51      	ldr	r3, [pc, #324]	; (8005bc0 <USBD_CDC_Init+0x1e8>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	f003 020f 	and.w	r2, r3, #15
 8005a82:	6879      	ldr	r1, [r7, #4]
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a92:	2201      	movs	r2, #1
 8005a94:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005a96:	4b4b      	ldr	r3, [pc, #300]	; (8005bc4 <USBD_CDC_Init+0x1ec>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	f003 020f 	and.w	r2, r3, #15
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	440b      	add	r3, r1
 8005aaa:	3326      	adds	r3, #38	; 0x26
 8005aac:	2210      	movs	r2, #16
 8005aae:	801a      	strh	r2, [r3, #0]
 8005ab0:	e035      	b.n	8005b1e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ab2:	4b42      	ldr	r3, [pc, #264]	; (8005bbc <USBD_CDC_Init+0x1e4>)
 8005ab4:	7819      	ldrb	r1, [r3, #0]
 8005ab6:	2340      	movs	r3, #64	; 0x40
 8005ab8:	2202      	movs	r2, #2
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f002 fb21 	bl	8008102 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005ac0:	4b3e      	ldr	r3, [pc, #248]	; (8005bbc <USBD_CDC_Init+0x1e4>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	f003 020f 	and.w	r2, r3, #15
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	3324      	adds	r3, #36	; 0x24
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005ada:	4b39      	ldr	r3, [pc, #228]	; (8005bc0 <USBD_CDC_Init+0x1e8>)
 8005adc:	7819      	ldrb	r1, [r3, #0]
 8005ade:	2340      	movs	r3, #64	; 0x40
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f002 fb0d 	bl	8008102 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005ae8:	4b35      	ldr	r3, [pc, #212]	; (8005bc0 <USBD_CDC_Init+0x1e8>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	f003 020f 	and.w	r2, r3, #15
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	440b      	add	r3, r1
 8005afc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b00:	2201      	movs	r2, #1
 8005b02:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005b04:	4b2f      	ldr	r3, [pc, #188]	; (8005bc4 <USBD_CDC_Init+0x1ec>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	f003 020f 	and.w	r2, r3, #15
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	440b      	add	r3, r1
 8005b18:	3326      	adds	r3, #38	; 0x26
 8005b1a:	2210      	movs	r2, #16
 8005b1c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b1e:	4b29      	ldr	r3, [pc, #164]	; (8005bc4 <USBD_CDC_Init+0x1ec>)
 8005b20:	7819      	ldrb	r1, [r3, #0]
 8005b22:	2308      	movs	r3, #8
 8005b24:	2203      	movs	r2, #3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f002 faeb 	bl	8008102 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005b2c:	4b25      	ldr	r3, [pc, #148]	; (8005bc4 <USBD_CDC_Init+0x1ec>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f003 020f 	and.w	r2, r3, #15
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	3324      	adds	r3, #36	; 0x24
 8005b42:	2201      	movs	r2, #1
 8005b44:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	33b0      	adds	r3, #176	; 0xb0
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	e018      	b.n	8005bb2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	7c1b      	ldrb	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10a      	bne.n	8005b9e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b88:	4b0d      	ldr	r3, [pc, #52]	; (8005bc0 <USBD_CDC_Init+0x1e8>)
 8005b8a:	7819      	ldrb	r1, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f002 fba2 	bl	80082e0 <USBD_LL_PrepareReceive>
 8005b9c:	e008      	b.n	8005bb0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b9e:	4b08      	ldr	r3, [pc, #32]	; (8005bc0 <USBD_CDC_Init+0x1e8>)
 8005ba0:	7819      	ldrb	r1, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ba8:	2340      	movs	r3, #64	; 0x40
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f002 fb98 	bl	80082e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000093 	.word	0x20000093
 8005bc0:	20000094 	.word	0x20000094
 8005bc4:	20000095 	.word	0x20000095

08005bc8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005bd4:	4b3a      	ldr	r3, [pc, #232]	; (8005cc0 <USBD_CDC_DeInit+0xf8>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	4619      	mov	r1, r3
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f002 fab7 	bl	800814e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005be0:	4b37      	ldr	r3, [pc, #220]	; (8005cc0 <USBD_CDC_DeInit+0xf8>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	f003 020f 	and.w	r2, r3, #15
 8005be8:	6879      	ldr	r1, [r7, #4]
 8005bea:	4613      	mov	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	3324      	adds	r3, #36	; 0x24
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005bfa:	4b32      	ldr	r3, [pc, #200]	; (8005cc4 <USBD_CDC_DeInit+0xfc>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f002 faa4 	bl	800814e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005c06:	4b2f      	ldr	r3, [pc, #188]	; (8005cc4 <USBD_CDC_DeInit+0xfc>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	f003 020f 	and.w	r2, r3, #15
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005c1e:	2200      	movs	r2, #0
 8005c20:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005c22:	4b29      	ldr	r3, [pc, #164]	; (8005cc8 <USBD_CDC_DeInit+0x100>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	4619      	mov	r1, r3
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f002 fa90 	bl	800814e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005c2e:	4b26      	ldr	r3, [pc, #152]	; (8005cc8 <USBD_CDC_DeInit+0x100>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	f003 020f 	and.w	r2, r3, #15
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	3324      	adds	r3, #36	; 0x24
 8005c44:	2200      	movs	r2, #0
 8005c46:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005c48:	4b1f      	ldr	r3, [pc, #124]	; (8005cc8 <USBD_CDC_DeInit+0x100>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	f003 020f 	and.w	r2, r3, #15
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	3326      	adds	r3, #38	; 0x26
 8005c5e:	2200      	movs	r2, #0
 8005c60:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	32b0      	adds	r2, #176	; 0xb0
 8005c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01f      	beq.n	8005cb4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	33b0      	adds	r3, #176	; 0xb0
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	32b0      	adds	r2, #176	; 0xb0
 8005c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f002 fb64 	bl	8008364 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	32b0      	adds	r2, #176	; 0xb0
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20000093 	.word	0x20000093
 8005cc4:	20000094 	.word	0x20000094
 8005cc8:	20000095 	.word	0x20000095

08005ccc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	32b0      	adds	r2, #176	; 0xb0
 8005ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e0bf      	b.n	8005e7c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d050      	beq.n	8005daa <USBD_CDC_Setup+0xde>
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	f040 80af 	bne.w	8005e6c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	88db      	ldrh	r3, [r3, #6]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d03a      	beq.n	8005d8c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	b25b      	sxtb	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	da1b      	bge.n	8005d58 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	33b0      	adds	r3, #176	; 0xb0
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005d36:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	88d2      	ldrh	r2, [r2, #6]
 8005d3c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	88db      	ldrh	r3, [r3, #6]
 8005d42:	2b07      	cmp	r3, #7
 8005d44:	bf28      	it	cs
 8005d46:	2307      	movcs	r3, #7
 8005d48:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	89fa      	ldrh	r2, [r7, #14]
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 fd89 	bl	8007868 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005d56:	e090      	b.n	8005e7a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	785a      	ldrb	r2, [r3, #1]
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	88db      	ldrh	r3, [r3, #6]
 8005d66:	2b3f      	cmp	r3, #63	; 0x3f
 8005d68:	d803      	bhi.n	8005d72 <USBD_CDC_Setup+0xa6>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	88db      	ldrh	r3, [r3, #6]
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	e000      	b.n	8005d74 <USBD_CDC_Setup+0xa8>
 8005d72:	2240      	movs	r2, #64	; 0x40
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005d7a:	6939      	ldr	r1, [r7, #16]
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005d82:	461a      	mov	r2, r3
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f001 fd9b 	bl	80078c0 <USBD_CtlPrepareRx>
      break;
 8005d8a:	e076      	b.n	8005e7a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	33b0      	adds	r3, #176	; 0xb0
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	7850      	ldrb	r0, [r2, #1]
 8005da2:	2200      	movs	r2, #0
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	4798      	blx	r3
      break;
 8005da8:	e067      	b.n	8005e7a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	785b      	ldrb	r3, [r3, #1]
 8005dae:	2b0b      	cmp	r3, #11
 8005db0:	d851      	bhi.n	8005e56 <USBD_CDC_Setup+0x18a>
 8005db2:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <USBD_CDC_Setup+0xec>)
 8005db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db8:	08005de9 	.word	0x08005de9
 8005dbc:	08005e65 	.word	0x08005e65
 8005dc0:	08005e57 	.word	0x08005e57
 8005dc4:	08005e57 	.word	0x08005e57
 8005dc8:	08005e57 	.word	0x08005e57
 8005dcc:	08005e57 	.word	0x08005e57
 8005dd0:	08005e57 	.word	0x08005e57
 8005dd4:	08005e57 	.word	0x08005e57
 8005dd8:	08005e57 	.word	0x08005e57
 8005ddc:	08005e57 	.word	0x08005e57
 8005de0:	08005e13 	.word	0x08005e13
 8005de4:	08005e3d 	.word	0x08005e3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d107      	bne.n	8005e04 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005df4:	f107 030a 	add.w	r3, r7, #10
 8005df8:	2202      	movs	r2, #2
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f001 fd33 	bl	8007868 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e02:	e032      	b.n	8005e6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 fcbd 	bl	8007786 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	75fb      	strb	r3, [r7, #23]
          break;
 8005e10:	e02b      	b.n	8005e6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d107      	bne.n	8005e2e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e1e:	f107 030d 	add.w	r3, r7, #13
 8005e22:	2201      	movs	r2, #1
 8005e24:	4619      	mov	r1, r3
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f001 fd1e 	bl	8007868 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e2c:	e01d      	b.n	8005e6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005e2e:	6839      	ldr	r1, [r7, #0]
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f001 fca8 	bl	8007786 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e36:	2303      	movs	r3, #3
 8005e38:	75fb      	strb	r3, [r7, #23]
          break;
 8005e3a:	e016      	b.n	8005e6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d00f      	beq.n	8005e68 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f001 fc9b 	bl	8007786 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e50:	2303      	movs	r3, #3
 8005e52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005e54:	e008      	b.n	8005e68 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f001 fc94 	bl	8007786 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	75fb      	strb	r3, [r7, #23]
          break;
 8005e62:	e002      	b.n	8005e6a <USBD_CDC_Setup+0x19e>
          break;
 8005e64:	bf00      	nop
 8005e66:	e008      	b.n	8005e7a <USBD_CDC_Setup+0x1ae>
          break;
 8005e68:	bf00      	nop
      }
      break;
 8005e6a:	e006      	b.n	8005e7a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005e6c:	6839      	ldr	r1, [r7, #0]
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f001 fc89 	bl	8007786 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e74:	2303      	movs	r3, #3
 8005e76:	75fb      	strb	r3, [r7, #23]
      break;
 8005e78:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005e96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	32b0      	adds	r2, #176	; 0xb0
 8005ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e065      	b.n	8005f7a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	32b0      	adds	r2, #176	; 0xb0
 8005eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ebc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005ebe:	78fb      	ldrb	r3, [r7, #3]
 8005ec0:	f003 020f 	and.w	r2, r3, #15
 8005ec4:	6879      	ldr	r1, [r7, #4]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	440b      	add	r3, r1
 8005ed0:	3318      	adds	r3, #24
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d02f      	beq.n	8005f38 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	f003 020f 	and.w	r2, r3, #15
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	3318      	adds	r3, #24
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	f003 010f 	and.w	r1, r3, #15
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	440b      	add	r3, r1
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4403      	add	r3, r0
 8005f00:	3348      	adds	r3, #72	; 0x48
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f08:	fb01 f303 	mul.w	r3, r1, r3
 8005f0c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d112      	bne.n	8005f38 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005f12:	78fb      	ldrb	r3, [r7, #3]
 8005f14:	f003 020f 	and.w	r2, r3, #15
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	440b      	add	r3, r1
 8005f24:	3318      	adds	r3, #24
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f2a:	78f9      	ldrb	r1, [r7, #3]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	2200      	movs	r2, #0
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f002 f9b4 	bl	800829e <USBD_LL_Transmit>
 8005f36:	e01f      	b.n	8005f78 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	33b0      	adds	r3, #176	; 0xb0
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d010      	beq.n	8005f78 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	33b0      	adds	r3, #176	; 0xb0
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005f74:	78fa      	ldrb	r2, [r7, #3]
 8005f76:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	32b0      	adds	r2, #176	; 0xb0
 8005f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	32b0      	adds	r2, #176	; 0xb0
 8005fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e01a      	b.n	8005fea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f002 f9b2 	bl	8008322 <USBD_LL_GetRxDataSize>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	33b0      	adds	r3, #176	; 0xb0
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	32b0      	adds	r2, #176	; 0xb0
 8006004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006008:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006010:	2303      	movs	r3, #3
 8006012:	e025      	b.n	8006060 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	33b0      	adds	r3, #176	; 0xb0
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01a      	beq.n	800605e <USBD_CDC_EP0_RxReady+0x6c>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800602e:	2bff      	cmp	r3, #255	; 0xff
 8006030:	d015      	beq.n	800605e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	33b0      	adds	r3, #176	; 0xb0
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800604a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006052:	b292      	uxth	r2, r2
 8006054:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	22ff      	movs	r2, #255	; 0xff
 800605a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006070:	2182      	movs	r1, #130	; 0x82
 8006072:	4818      	ldr	r0, [pc, #96]	; (80060d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006074:	f000 fd4f 	bl	8006b16 <USBD_GetEpDesc>
 8006078:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800607a:	2101      	movs	r1, #1
 800607c:	4815      	ldr	r0, [pc, #84]	; (80060d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800607e:	f000 fd4a 	bl	8006b16 <USBD_GetEpDesc>
 8006082:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006084:	2181      	movs	r1, #129	; 0x81
 8006086:	4813      	ldr	r0, [pc, #76]	; (80060d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006088:	f000 fd45 	bl	8006b16 <USBD_GetEpDesc>
 800608c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2210      	movs	r2, #16
 8006098:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d006      	beq.n	80060ae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a8:	711a      	strb	r2, [r3, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d006      	beq.n	80060c2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060bc:	711a      	strb	r2, [r3, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2243      	movs	r2, #67	; 0x43
 80060c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80060c8:	4b02      	ldr	r3, [pc, #8]	; (80060d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20000050 	.word	0x20000050

080060d8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80060e0:	2182      	movs	r1, #130	; 0x82
 80060e2:	4818      	ldr	r0, [pc, #96]	; (8006144 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80060e4:	f000 fd17 	bl	8006b16 <USBD_GetEpDesc>
 80060e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80060ea:	2101      	movs	r1, #1
 80060ec:	4815      	ldr	r0, [pc, #84]	; (8006144 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80060ee:	f000 fd12 	bl	8006b16 <USBD_GetEpDesc>
 80060f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80060f4:	2181      	movs	r1, #129	; 0x81
 80060f6:	4813      	ldr	r0, [pc, #76]	; (8006144 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80060f8:	f000 fd0d 	bl	8006b16 <USBD_GetEpDesc>
 80060fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2210      	movs	r2, #16
 8006108:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d006      	beq.n	800611e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	2200      	movs	r2, #0
 8006114:	711a      	strb	r2, [r3, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f042 0202 	orr.w	r2, r2, #2
 800611c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d006      	beq.n	8006132 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	711a      	strb	r2, [r3, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f042 0202 	orr.w	r2, r2, #2
 8006130:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2243      	movs	r2, #67	; 0x43
 8006136:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006138:	4b02      	ldr	r3, [pc, #8]	; (8006144 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20000050 	.word	0x20000050

08006148 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006150:	2182      	movs	r1, #130	; 0x82
 8006152:	4818      	ldr	r0, [pc, #96]	; (80061b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006154:	f000 fcdf 	bl	8006b16 <USBD_GetEpDesc>
 8006158:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800615a:	2101      	movs	r1, #1
 800615c:	4815      	ldr	r0, [pc, #84]	; (80061b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800615e:	f000 fcda 	bl	8006b16 <USBD_GetEpDesc>
 8006162:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006164:	2181      	movs	r1, #129	; 0x81
 8006166:	4813      	ldr	r0, [pc, #76]	; (80061b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006168:	f000 fcd5 	bl	8006b16 <USBD_GetEpDesc>
 800616c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2210      	movs	r2, #16
 8006178:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d006      	beq.n	800618e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	2200      	movs	r2, #0
 8006184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006188:	711a      	strb	r2, [r3, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d006      	beq.n	80061a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800619c:	711a      	strb	r2, [r3, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2243      	movs	r2, #67	; 0x43
 80061a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80061a8:	4b02      	ldr	r3, [pc, #8]	; (80061b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20000050 	.word	0x20000050

080061b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	220a      	movs	r2, #10
 80061c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80061c6:	4b03      	ldr	r3, [pc, #12]	; (80061d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	2000000c 	.word	0x2000000c

080061d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e009      	b.n	8006200 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	33b0      	adds	r3, #176	; 0xb0
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	32b0      	adds	r2, #176	; 0xb0
 8006222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006226:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800622e:	2303      	movs	r3, #3
 8006230:	e008      	b.n	8006244 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	32b0      	adds	r2, #176	; 0xb0
 8006264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006268:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006270:	2303      	movs	r3, #3
 8006272:	e004      	b.n	800627e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
	...

0800628c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	32b0      	adds	r2, #176	; 0xb0
 800629e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80062a4:	2301      	movs	r3, #1
 80062a6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	32b0      	adds	r2, #176	; 0xb0
 80062b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e025      	b.n	800630a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d11f      	bne.n	8006308 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80062d0:	4b10      	ldr	r3, [pc, #64]	; (8006314 <USBD_CDC_TransmitPacket+0x88>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	f003 020f 	and.w	r2, r3, #15
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4403      	add	r3, r0
 80062ea:	3318      	adds	r3, #24
 80062ec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80062ee:	4b09      	ldr	r3, [pc, #36]	; (8006314 <USBD_CDC_TransmitPacket+0x88>)
 80062f0:	7819      	ldrb	r1, [r3, #0]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f001 ffcd 	bl	800829e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006304:	2300      	movs	r3, #0
 8006306:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006308:	7bfb      	ldrb	r3, [r7, #15]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	20000093 	.word	0x20000093

08006318 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	32b0      	adds	r2, #176	; 0xb0
 800632a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	32b0      	adds	r2, #176	; 0xb0
 800633a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006342:	2303      	movs	r3, #3
 8006344:	e018      	b.n	8006378 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	7c1b      	ldrb	r3, [r3, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800634e:	4b0c      	ldr	r3, [pc, #48]	; (8006380 <USBD_CDC_ReceivePacket+0x68>)
 8006350:	7819      	ldrb	r1, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f001 ffbf 	bl	80082e0 <USBD_LL_PrepareReceive>
 8006362:	e008      	b.n	8006376 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006364:	4b06      	ldr	r3, [pc, #24]	; (8006380 <USBD_CDC_ReceivePacket+0x68>)
 8006366:	7819      	ldrb	r1, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800636e:	2340      	movs	r3, #64	; 0x40
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f001 ffb5 	bl	80082e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	20000094 	.word	0x20000094

08006384 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	4613      	mov	r3, r2
 8006390:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006398:	2303      	movs	r3, #3
 800639a:	e01f      	b.n	80063dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	79fa      	ldrb	r2, [r7, #7]
 80063ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f001 fe2f 	bl	8008034 <USBD_LL_Init>
 80063d6:	4603      	mov	r3, r0
 80063d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80063da:	7dfb      	ldrb	r3, [r7, #23]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e025      	b.n	8006448 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	32ae      	adds	r2, #174	; 0xae
 800640e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00f      	beq.n	8006438 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	32ae      	adds	r2, #174	; 0xae
 8006422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	f107 020e 	add.w	r2, r7, #14
 800642c:	4610      	mov	r0, r2
 800642e:	4798      	blx	r3
 8006430:	4602      	mov	r2, r0
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f001 fe37 	bl	80080cc <USBD_LL_Start>
 800645e:	4603      	mov	r3, r0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006470:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	460b      	mov	r3, r1
 8006488:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006494:	2b00      	cmp	r3, #0
 8006496:	d009      	beq.n	80064ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	78fa      	ldrb	r2, [r7, #3]
 80064a2:	4611      	mov	r1, r2
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	4798      	blx	r3
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	460b      	mov	r3, r1
 80064c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	78fa      	ldrb	r2, [r7, #3]
 80064d0:	4611      	mov	r1, r2
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	4798      	blx	r3
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80064dc:	2303      	movs	r3, #3
 80064de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f001 f908 	bl	8007712 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006510:	461a      	mov	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800651e:	f003 031f 	and.w	r3, r3, #31
 8006522:	2b02      	cmp	r3, #2
 8006524:	d01a      	beq.n	800655c <USBD_LL_SetupStage+0x72>
 8006526:	2b02      	cmp	r3, #2
 8006528:	d822      	bhi.n	8006570 <USBD_LL_SetupStage+0x86>
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <USBD_LL_SetupStage+0x4a>
 800652e:	2b01      	cmp	r3, #1
 8006530:	d00a      	beq.n	8006548 <USBD_LL_SetupStage+0x5e>
 8006532:	e01d      	b.n	8006570 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fb5f 	bl	8006c00 <USBD_StdDevReq>
 8006542:	4603      	mov	r3, r0
 8006544:	73fb      	strb	r3, [r7, #15]
      break;
 8006546:	e020      	b.n	800658a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fbc7 	bl	8006ce4 <USBD_StdItfReq>
 8006556:	4603      	mov	r3, r0
 8006558:	73fb      	strb	r3, [r7, #15]
      break;
 800655a:	e016      	b.n	800658a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fc29 	bl	8006dbc <USBD_StdEPReq>
 800656a:	4603      	mov	r3, r0
 800656c:	73fb      	strb	r3, [r7, #15]
      break;
 800656e:	e00c      	b.n	800658a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006576:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800657a:	b2db      	uxtb	r3, r3
 800657c:	4619      	mov	r1, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f001 fe04 	bl	800818c <USBD_LL_StallEP>
 8006584:	4603      	mov	r3, r0
 8006586:	73fb      	strb	r3, [r7, #15]
      break;
 8006588:	bf00      	nop
  }

  return ret;
 800658a:	7bfb      	ldrb	r3, [r7, #15]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	460b      	mov	r3, r1
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80065a6:	7afb      	ldrb	r3, [r7, #11]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d16e      	bne.n	800668a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80065b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	f040 8098 	bne.w	80066f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d913      	bls.n	80065f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	1ad2      	subs	r2, r2, r3
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	4293      	cmp	r3, r2
 80065e4:	bf28      	it	cs
 80065e6:	4613      	movcs	r3, r2
 80065e8:	461a      	mov	r2, r3
 80065ea:	6879      	ldr	r1, [r7, #4]
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f001 f984 	bl	80078fa <USBD_CtlContinueRx>
 80065f2:	e07d      	b.n	80066f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80065fa:	f003 031f 	and.w	r3, r3, #31
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d014      	beq.n	800662c <USBD_LL_DataOutStage+0x98>
 8006602:	2b02      	cmp	r3, #2
 8006604:	d81d      	bhi.n	8006642 <USBD_LL_DataOutStage+0xae>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <USBD_LL_DataOutStage+0x7c>
 800660a:	2b01      	cmp	r3, #1
 800660c:	d003      	beq.n	8006616 <USBD_LL_DataOutStage+0x82>
 800660e:	e018      	b.n	8006642 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	75bb      	strb	r3, [r7, #22]
            break;
 8006614:	e018      	b.n	8006648 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800661c:	b2db      	uxtb	r3, r3
 800661e:	4619      	mov	r1, r3
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 fa5e 	bl	8006ae2 <USBD_CoreFindIF>
 8006626:	4603      	mov	r3, r0
 8006628:	75bb      	strb	r3, [r7, #22]
            break;
 800662a:	e00d      	b.n	8006648 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006632:	b2db      	uxtb	r3, r3
 8006634:	4619      	mov	r1, r3
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 fa60 	bl	8006afc <USBD_CoreFindEP>
 800663c:	4603      	mov	r3, r0
 800663e:	75bb      	strb	r3, [r7, #22]
            break;
 8006640:	e002      	b.n	8006648 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	75bb      	strb	r3, [r7, #22]
            break;
 8006646:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006648:	7dbb      	ldrb	r3, [r7, #22]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d119      	bne.n	8006682 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b03      	cmp	r3, #3
 8006658:	d113      	bne.n	8006682 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800665a:	7dba      	ldrb	r2, [r7, #22]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	32ae      	adds	r2, #174	; 0xae
 8006660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00b      	beq.n	8006682 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800666a:	7dba      	ldrb	r2, [r7, #22]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006672:	7dba      	ldrb	r2, [r7, #22]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	32ae      	adds	r2, #174	; 0xae
 8006678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f001 f94a 	bl	800791c <USBD_CtlSendStatus>
 8006688:	e032      	b.n	80066f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800668a:	7afb      	ldrb	r3, [r7, #11]
 800668c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006690:	b2db      	uxtb	r3, r3
 8006692:	4619      	mov	r1, r3
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 fa31 	bl	8006afc <USBD_CoreFindEP>
 800669a:	4603      	mov	r3, r0
 800669c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800669e:	7dbb      	ldrb	r3, [r7, #22]
 80066a0:	2bff      	cmp	r3, #255	; 0xff
 80066a2:	d025      	beq.n	80066f0 <USBD_LL_DataOutStage+0x15c>
 80066a4:	7dbb      	ldrb	r3, [r7, #22]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d122      	bne.n	80066f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	d117      	bne.n	80066e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80066b6:	7dba      	ldrb	r2, [r7, #22]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	32ae      	adds	r2, #174	; 0xae
 80066bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00f      	beq.n	80066e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80066c6:	7dba      	ldrb	r2, [r7, #22]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80066ce:	7dba      	ldrb	r2, [r7, #22]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	32ae      	adds	r2, #174	; 0xae
 80066d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	7afa      	ldrb	r2, [r7, #11]
 80066dc:	4611      	mov	r1, r2
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	4798      	blx	r3
 80066e2:	4603      	mov	r3, r0
 80066e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80066e6:	7dfb      	ldrb	r3, [r7, #23]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80066ec:	7dfb      	ldrb	r3, [r7, #23]
 80066ee:	e000      	b.n	80066f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	460b      	mov	r3, r1
 8006704:	607a      	str	r2, [r7, #4]
 8006706:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006708:	7afb      	ldrb	r3, [r7, #11]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d16f      	bne.n	80067ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3314      	adds	r3, #20
 8006712:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800671a:	2b02      	cmp	r3, #2
 800671c:	d15a      	bne.n	80067d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	429a      	cmp	r2, r3
 8006728:	d914      	bls.n	8006754 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	1ad2      	subs	r2, r2, r3
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	461a      	mov	r2, r3
 800673e:	6879      	ldr	r1, [r7, #4]
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f001 f8ac 	bl	800789e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006746:	2300      	movs	r3, #0
 8006748:	2200      	movs	r2, #0
 800674a:	2100      	movs	r1, #0
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f001 fdc7 	bl	80082e0 <USBD_LL_PrepareReceive>
 8006752:	e03f      	b.n	80067d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	68da      	ldr	r2, [r3, #12]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	429a      	cmp	r2, r3
 800675e:	d11c      	bne.n	800679a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006768:	429a      	cmp	r2, r3
 800676a:	d316      	bcc.n	800679a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006776:	429a      	cmp	r2, r3
 8006778:	d20f      	bcs.n	800679a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800677a:	2200      	movs	r2, #0
 800677c:	2100      	movs	r1, #0
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f001 f88d 	bl	800789e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800678c:	2300      	movs	r3, #0
 800678e:	2200      	movs	r2, #0
 8006790:	2100      	movs	r1, #0
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f001 fda4 	bl	80082e0 <USBD_LL_PrepareReceive>
 8006798:	e01c      	b.n	80067d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d10f      	bne.n	80067c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d009      	beq.n	80067c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80067c6:	2180      	movs	r1, #128	; 0x80
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f001 fcdf 	bl	800818c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f001 f8b7 	bl	8007942 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d03a      	beq.n	8006854 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f7ff fe42 	bl	8006468 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80067ec:	e032      	b.n	8006854 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80067ee:	7afb      	ldrb	r3, [r7, #11]
 80067f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	4619      	mov	r1, r3
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 f97f 	bl	8006afc <USBD_CoreFindEP>
 80067fe:	4603      	mov	r3, r0
 8006800:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006802:	7dfb      	ldrb	r3, [r7, #23]
 8006804:	2bff      	cmp	r3, #255	; 0xff
 8006806:	d025      	beq.n	8006854 <USBD_LL_DataInStage+0x15a>
 8006808:	7dfb      	ldrb	r3, [r7, #23]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d122      	bne.n	8006854 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b03      	cmp	r3, #3
 8006818:	d11c      	bne.n	8006854 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800681a:	7dfa      	ldrb	r2, [r7, #23]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	32ae      	adds	r2, #174	; 0xae
 8006820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d014      	beq.n	8006854 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800682a:	7dfa      	ldrb	r2, [r7, #23]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006832:	7dfa      	ldrb	r2, [r7, #23]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	32ae      	adds	r2, #174	; 0xae
 8006838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	7afa      	ldrb	r2, [r7, #11]
 8006840:	4611      	mov	r1, r2
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	4798      	blx	r3
 8006846:	4603      	mov	r3, r0
 8006848:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800684a:	7dbb      	ldrb	r3, [r7, #22]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006850:	7dbb      	ldrb	r3, [r7, #22]
 8006852:	e000      	b.n	8006856 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006896:	2b00      	cmp	r3, #0
 8006898:	d014      	beq.n	80068c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00e      	beq.n	80068c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	6852      	ldr	r2, [r2, #4]
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	4611      	mov	r1, r2
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	4798      	blx	r3
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80068c0:	2303      	movs	r3, #3
 80068c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068c4:	2340      	movs	r3, #64	; 0x40
 80068c6:	2200      	movs	r2, #0
 80068c8:	2100      	movs	r1, #0
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fc19 	bl	8008102 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2240      	movs	r2, #64	; 0x40
 80068dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068e0:	2340      	movs	r3, #64	; 0x40
 80068e2:	2200      	movs	r2, #0
 80068e4:	2180      	movs	r1, #128	; 0x80
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f001 fc0b 	bl	8008102 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2240      	movs	r2, #64	; 0x40
 80068f6:	621a      	str	r2, [r3, #32]

  return ret;
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	460b      	mov	r3, r1
 800690c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	78fa      	ldrb	r2, [r7, #3]
 8006912:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006930:	b2da      	uxtb	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2204      	movs	r2, #4
 800693c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b04      	cmp	r3, #4
 8006960:	d106      	bne.n	8006970 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006968:	b2da      	uxtb	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b082      	sub	sp, #8
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b03      	cmp	r3, #3
 8006990:	d110      	bne.n	80069b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00b      	beq.n	80069b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a2:	69db      	ldr	r3, [r3, #28]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d005      	beq.n	80069b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	460b      	mov	r3, r1
 80069c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	32ae      	adds	r2, #174	; 0xae
 80069d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80069dc:	2303      	movs	r3, #3
 80069de:	e01c      	b.n	8006a1a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	d115      	bne.n	8006a18 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	32ae      	adds	r2, #174	; 0xae
 80069f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	32ae      	adds	r2, #174	; 0xae
 8006a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	78fa      	ldrb	r2, [r7, #3]
 8006a12:	4611      	mov	r1, r2
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b082      	sub	sp, #8
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	32ae      	adds	r2, #174	; 0xae
 8006a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e01c      	b.n	8006a7e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d115      	bne.n	8006a7c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	32ae      	adds	r2, #174	; 0xae
 8006a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00b      	beq.n	8006a7c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	32ae      	adds	r2, #174	; 0xae
 8006a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	78fa      	ldrb	r2, [r7, #3]
 8006a76:	4611      	mov	r1, r2
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00e      	beq.n	8006ad8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6852      	ldr	r2, [r2, #4]
 8006ac6:	b2d2      	uxtb	r2, r2
 8006ac8:	4611      	mov	r1, r2
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4798      	blx	r3
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	460b      	mov	r3, r1
 8006aec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006aee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006b08:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b086      	sub	sp, #24
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	885b      	ldrh	r3, [r3, #2]
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d920      	bls.n	8006b80 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006b46:	e013      	b.n	8006b70 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006b48:	f107 030a 	add.w	r3, r7, #10
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6978      	ldr	r0, [r7, #20]
 8006b50:	f000 f81b 	bl	8006b8a <USBD_GetNextDesc>
 8006b54:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	785b      	ldrb	r3, [r3, #1]
 8006b5a:	2b05      	cmp	r3, #5
 8006b5c:	d108      	bne.n	8006b70 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	789b      	ldrb	r3, [r3, #2]
 8006b66:	78fa      	ldrb	r2, [r7, #3]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d008      	beq.n	8006b7e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	885b      	ldrh	r3, [r3, #2]
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	897b      	ldrh	r3, [r7, #10]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d8e5      	bhi.n	8006b48 <USBD_GetEpDesc+0x32>
 8006b7c:	e000      	b.n	8006b80 <USBD_GetEpDesc+0x6a>
          break;
 8006b7e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006b80:	693b      	ldr	r3, [r7, #16]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3718      	adds	r7, #24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b085      	sub	sp, #20
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	881a      	ldrh	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	4413      	add	r3, r2
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006be2:	8a3b      	ldrh	r3, [r7, #16]
 8006be4:	021b      	lsls	r3, r3, #8
 8006be6:	b21a      	sxth	r2, r3
 8006be8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	b21b      	sxth	r3, r3
 8006bf0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006bf2:	89fb      	ldrh	r3, [r7, #14]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	371c      	adds	r7, #28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c16:	2b40      	cmp	r3, #64	; 0x40
 8006c18:	d005      	beq.n	8006c26 <USBD_StdDevReq+0x26>
 8006c1a:	2b40      	cmp	r3, #64	; 0x40
 8006c1c:	d857      	bhi.n	8006cce <USBD_StdDevReq+0xce>
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00f      	beq.n	8006c42 <USBD_StdDevReq+0x42>
 8006c22:	2b20      	cmp	r3, #32
 8006c24:	d153      	bne.n	8006cce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	32ae      	adds	r2, #174	; 0xae
 8006c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	6839      	ldr	r1, [r7, #0]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	4798      	blx	r3
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c40:	e04a      	b.n	8006cd8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	785b      	ldrb	r3, [r3, #1]
 8006c46:	2b09      	cmp	r3, #9
 8006c48:	d83b      	bhi.n	8006cc2 <USBD_StdDevReq+0xc2>
 8006c4a:	a201      	add	r2, pc, #4	; (adr r2, 8006c50 <USBD_StdDevReq+0x50>)
 8006c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c50:	08006ca5 	.word	0x08006ca5
 8006c54:	08006cb9 	.word	0x08006cb9
 8006c58:	08006cc3 	.word	0x08006cc3
 8006c5c:	08006caf 	.word	0x08006caf
 8006c60:	08006cc3 	.word	0x08006cc3
 8006c64:	08006c83 	.word	0x08006c83
 8006c68:	08006c79 	.word	0x08006c79
 8006c6c:	08006cc3 	.word	0x08006cc3
 8006c70:	08006c9b 	.word	0x08006c9b
 8006c74:	08006c8d 	.word	0x08006c8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fa3c 	bl	80070f8 <USBD_GetDescriptor>
          break;
 8006c80:	e024      	b.n	8006ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fba1 	bl	80073cc <USBD_SetAddress>
          break;
 8006c8a:	e01f      	b.n	8006ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fbe0 	bl	8007454 <USBD_SetConfig>
 8006c94:	4603      	mov	r3, r0
 8006c96:	73fb      	strb	r3, [r7, #15]
          break;
 8006c98:	e018      	b.n	8006ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fc83 	bl	80075a8 <USBD_GetConfig>
          break;
 8006ca2:	e013      	b.n	8006ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fcb4 	bl	8007614 <USBD_GetStatus>
          break;
 8006cac:	e00e      	b.n	8006ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fce3 	bl	800767c <USBD_SetFeature>
          break;
 8006cb6:	e009      	b.n	8006ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fd07 	bl	80076ce <USBD_ClrFeature>
          break;
 8006cc0:	e004      	b.n	8006ccc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fd5e 	bl	8007786 <USBD_CtlError>
          break;
 8006cca:	bf00      	nop
      }
      break;
 8006ccc:	e004      	b.n	8006cd8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fd58 	bl	8007786 <USBD_CtlError>
      break;
 8006cd6:	bf00      	nop
  }

  return ret;
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop

08006ce4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cfa:	2b40      	cmp	r3, #64	; 0x40
 8006cfc:	d005      	beq.n	8006d0a <USBD_StdItfReq+0x26>
 8006cfe:	2b40      	cmp	r3, #64	; 0x40
 8006d00:	d852      	bhi.n	8006da8 <USBD_StdItfReq+0xc4>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <USBD_StdItfReq+0x26>
 8006d06:	2b20      	cmp	r3, #32
 8006d08:	d14e      	bne.n	8006da8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	3b01      	subs	r3, #1
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d840      	bhi.n	8006d9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	889b      	ldrh	r3, [r3, #4]
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d836      	bhi.n	8006d90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	889b      	ldrh	r3, [r3, #4]
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff fed9 	bl	8006ae2 <USBD_CoreFindIF>
 8006d30:	4603      	mov	r3, r0
 8006d32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d34:	7bbb      	ldrb	r3, [r7, #14]
 8006d36:	2bff      	cmp	r3, #255	; 0xff
 8006d38:	d01d      	beq.n	8006d76 <USBD_StdItfReq+0x92>
 8006d3a:	7bbb      	ldrb	r3, [r7, #14]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d11a      	bne.n	8006d76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006d40:	7bba      	ldrb	r2, [r7, #14]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	32ae      	adds	r2, #174	; 0xae
 8006d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00f      	beq.n	8006d70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006d50:	7bba      	ldrb	r2, [r7, #14]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d58:	7bba      	ldrb	r2, [r7, #14]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	32ae      	adds	r2, #174	; 0xae
 8006d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	4798      	blx	r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d6e:	e004      	b.n	8006d7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006d70:	2303      	movs	r3, #3
 8006d72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d74:	e001      	b.n	8006d7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006d76:	2303      	movs	r3, #3
 8006d78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	88db      	ldrh	r3, [r3, #6]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d110      	bne.n	8006da4 <USBD_StdItfReq+0xc0>
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10d      	bne.n	8006da4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fdc7 	bl	800791c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d8e:	e009      	b.n	8006da4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fcf7 	bl	8007786 <USBD_CtlError>
          break;
 8006d98:	e004      	b.n	8006da4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fcf2 	bl	8007786 <USBD_CtlError>
          break;
 8006da2:	e000      	b.n	8006da6 <USBD_StdItfReq+0xc2>
          break;
 8006da4:	bf00      	nop
      }
      break;
 8006da6:	e004      	b.n	8006db2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fceb 	bl	8007786 <USBD_CtlError>
      break;
 8006db0:	bf00      	nop
  }

  return ret;
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	889b      	ldrh	r3, [r3, #4]
 8006dce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dd8:	2b40      	cmp	r3, #64	; 0x40
 8006dda:	d007      	beq.n	8006dec <USBD_StdEPReq+0x30>
 8006ddc:	2b40      	cmp	r3, #64	; 0x40
 8006dde:	f200 817f 	bhi.w	80070e0 <USBD_StdEPReq+0x324>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d02a      	beq.n	8006e3c <USBD_StdEPReq+0x80>
 8006de6:	2b20      	cmp	r3, #32
 8006de8:	f040 817a 	bne.w	80070e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006dec:	7bbb      	ldrb	r3, [r7, #14]
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7ff fe83 	bl	8006afc <USBD_CoreFindEP>
 8006df6:	4603      	mov	r3, r0
 8006df8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dfa:	7b7b      	ldrb	r3, [r7, #13]
 8006dfc:	2bff      	cmp	r3, #255	; 0xff
 8006dfe:	f000 8174 	beq.w	80070ea <USBD_StdEPReq+0x32e>
 8006e02:	7b7b      	ldrb	r3, [r7, #13]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f040 8170 	bne.w	80070ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006e0a:	7b7a      	ldrb	r2, [r7, #13]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006e12:	7b7a      	ldrb	r2, [r7, #13]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	32ae      	adds	r2, #174	; 0xae
 8006e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 8163 	beq.w	80070ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006e24:	7b7a      	ldrb	r2, [r7, #13]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	32ae      	adds	r2, #174	; 0xae
 8006e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	4798      	blx	r3
 8006e36:	4603      	mov	r3, r0
 8006e38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e3a:	e156      	b.n	80070ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	785b      	ldrb	r3, [r3, #1]
 8006e40:	2b03      	cmp	r3, #3
 8006e42:	d008      	beq.n	8006e56 <USBD_StdEPReq+0x9a>
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	f300 8145 	bgt.w	80070d4 <USBD_StdEPReq+0x318>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 809b 	beq.w	8006f86 <USBD_StdEPReq+0x1ca>
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d03c      	beq.n	8006ece <USBD_StdEPReq+0x112>
 8006e54:	e13e      	b.n	80070d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d002      	beq.n	8006e68 <USBD_StdEPReq+0xac>
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d016      	beq.n	8006e94 <USBD_StdEPReq+0xd8>
 8006e66:	e02c      	b.n	8006ec2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00d      	beq.n	8006e8a <USBD_StdEPReq+0xce>
 8006e6e:	7bbb      	ldrb	r3, [r7, #14]
 8006e70:	2b80      	cmp	r3, #128	; 0x80
 8006e72:	d00a      	beq.n	8006e8a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	4619      	mov	r1, r3
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f001 f987 	bl	800818c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e7e:	2180      	movs	r1, #128	; 0x80
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f001 f983 	bl	800818c <USBD_LL_StallEP>
 8006e86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e88:	e020      	b.n	8006ecc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fc7a 	bl	8007786 <USBD_CtlError>
              break;
 8006e92:	e01b      	b.n	8006ecc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	885b      	ldrh	r3, [r3, #2]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10e      	bne.n	8006eba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e9c:	7bbb      	ldrb	r3, [r7, #14]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00b      	beq.n	8006eba <USBD_StdEPReq+0xfe>
 8006ea2:	7bbb      	ldrb	r3, [r7, #14]
 8006ea4:	2b80      	cmp	r3, #128	; 0x80
 8006ea6:	d008      	beq.n	8006eba <USBD_StdEPReq+0xfe>
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	88db      	ldrh	r3, [r3, #6]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d104      	bne.n	8006eba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006eb0:	7bbb      	ldrb	r3, [r7, #14]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f001 f969 	bl	800818c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fd2e 	bl	800791c <USBD_CtlSendStatus>

              break;
 8006ec0:	e004      	b.n	8006ecc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fc5e 	bl	8007786 <USBD_CtlError>
              break;
 8006eca:	bf00      	nop
          }
          break;
 8006ecc:	e107      	b.n	80070de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d002      	beq.n	8006ee0 <USBD_StdEPReq+0x124>
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d016      	beq.n	8006f0c <USBD_StdEPReq+0x150>
 8006ede:	e04b      	b.n	8006f78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00d      	beq.n	8006f02 <USBD_StdEPReq+0x146>
 8006ee6:	7bbb      	ldrb	r3, [r7, #14]
 8006ee8:	2b80      	cmp	r3, #128	; 0x80
 8006eea:	d00a      	beq.n	8006f02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	4619      	mov	r1, r3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 f94b 	bl	800818c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ef6:	2180      	movs	r1, #128	; 0x80
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 f947 	bl	800818c <USBD_LL_StallEP>
 8006efe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f00:	e040      	b.n	8006f84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fc3e 	bl	8007786 <USBD_CtlError>
              break;
 8006f0a:	e03b      	b.n	8006f84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	885b      	ldrh	r3, [r3, #2]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d136      	bne.n	8006f82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d004      	beq.n	8006f28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f1e:	7bbb      	ldrb	r3, [r7, #14]
 8006f20:	4619      	mov	r1, r3
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f001 f951 	bl	80081ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fcf7 	bl	800791c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006f2e:	7bbb      	ldrb	r3, [r7, #14]
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff fde2 	bl	8006afc <USBD_CoreFindEP>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f3c:	7b7b      	ldrb	r3, [r7, #13]
 8006f3e:	2bff      	cmp	r3, #255	; 0xff
 8006f40:	d01f      	beq.n	8006f82 <USBD_StdEPReq+0x1c6>
 8006f42:	7b7b      	ldrb	r3, [r7, #13]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d11c      	bne.n	8006f82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006f48:	7b7a      	ldrb	r2, [r7, #13]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006f50:	7b7a      	ldrb	r2, [r7, #13]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	32ae      	adds	r2, #174	; 0xae
 8006f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d010      	beq.n	8006f82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f60:	7b7a      	ldrb	r2, [r7, #13]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	32ae      	adds	r2, #174	; 0xae
 8006f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	4798      	blx	r3
 8006f72:	4603      	mov	r3, r0
 8006f74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006f76:	e004      	b.n	8006f82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fc03 	bl	8007786 <USBD_CtlError>
              break;
 8006f80:	e000      	b.n	8006f84 <USBD_StdEPReq+0x1c8>
              break;
 8006f82:	bf00      	nop
          }
          break;
 8006f84:	e0ab      	b.n	80070de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d002      	beq.n	8006f98 <USBD_StdEPReq+0x1dc>
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d032      	beq.n	8006ffc <USBD_StdEPReq+0x240>
 8006f96:	e097      	b.n	80070c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d007      	beq.n	8006fae <USBD_StdEPReq+0x1f2>
 8006f9e:	7bbb      	ldrb	r3, [r7, #14]
 8006fa0:	2b80      	cmp	r3, #128	; 0x80
 8006fa2:	d004      	beq.n	8006fae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fbed 	bl	8007786 <USBD_CtlError>
                break;
 8006fac:	e091      	b.n	80070d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	da0b      	bge.n	8006fce <USBD_StdEPReq+0x212>
 8006fb6:	7bbb      	ldrb	r3, [r7, #14]
 8006fb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	3310      	adds	r3, #16
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	4413      	add	r3, r2
 8006fca:	3304      	adds	r3, #4
 8006fcc:	e00b      	b.n	8006fe6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fce:	7bbb      	ldrb	r3, [r7, #14]
 8006fd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fc37 	bl	8007868 <USBD_CtlSendData>
              break;
 8006ffa:	e06a      	b.n	80070d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007000:	2b00      	cmp	r3, #0
 8007002:	da11      	bge.n	8007028 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	f003 020f 	and.w	r2, r3, #15
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	440b      	add	r3, r1
 8007016:	3324      	adds	r3, #36	; 0x24
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d117      	bne.n	800704e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fbb0 	bl	8007786 <USBD_CtlError>
                  break;
 8007026:	e054      	b.n	80070d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007028:	7bbb      	ldrb	r3, [r7, #14]
 800702a:	f003 020f 	and.w	r2, r3, #15
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	4613      	mov	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d104      	bne.n	800704e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fb9d 	bl	8007786 <USBD_CtlError>
                  break;
 800704c:	e041      	b.n	80070d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800704e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007052:	2b00      	cmp	r3, #0
 8007054:	da0b      	bge.n	800706e <USBD_StdEPReq+0x2b2>
 8007056:	7bbb      	ldrb	r3, [r7, #14]
 8007058:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800705c:	4613      	mov	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	3310      	adds	r3, #16
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	4413      	add	r3, r2
 800706a:	3304      	adds	r3, #4
 800706c:	e00b      	b.n	8007086 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	4413      	add	r3, r2
 8007084:	3304      	adds	r3, #4
 8007086:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007088:	7bbb      	ldrb	r3, [r7, #14]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <USBD_StdEPReq+0x2d8>
 800708e:	7bbb      	ldrb	r3, [r7, #14]
 8007090:	2b80      	cmp	r3, #128	; 0x80
 8007092:	d103      	bne.n	800709c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	e00e      	b.n	80070ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800709c:	7bbb      	ldrb	r3, [r7, #14]
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f001 f8b1 	bl	8008208 <USBD_LL_IsStallEP>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2201      	movs	r2, #1
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	e002      	b.n	80070ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2202      	movs	r2, #2
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fbd1 	bl	8007868 <USBD_CtlSendData>
              break;
 80070c6:	e004      	b.n	80070d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80070c8:	6839      	ldr	r1, [r7, #0]
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fb5b 	bl	8007786 <USBD_CtlError>
              break;
 80070d0:	bf00      	nop
          }
          break;
 80070d2:	e004      	b.n	80070de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fb55 	bl	8007786 <USBD_CtlError>
          break;
 80070dc:	bf00      	nop
      }
      break;
 80070de:	e005      	b.n	80070ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fb4f 	bl	8007786 <USBD_CtlError>
      break;
 80070e8:	e000      	b.n	80070ec <USBD_StdEPReq+0x330>
      break;
 80070ea:	bf00      	nop
  }

  return ret;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007106:	2300      	movs	r3, #0
 8007108:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	885b      	ldrh	r3, [r3, #2]
 8007112:	0a1b      	lsrs	r3, r3, #8
 8007114:	b29b      	uxth	r3, r3
 8007116:	3b01      	subs	r3, #1
 8007118:	2b06      	cmp	r3, #6
 800711a:	f200 8128 	bhi.w	800736e <USBD_GetDescriptor+0x276>
 800711e:	a201      	add	r2, pc, #4	; (adr r2, 8007124 <USBD_GetDescriptor+0x2c>)
 8007120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007124:	08007141 	.word	0x08007141
 8007128:	08007159 	.word	0x08007159
 800712c:	08007199 	.word	0x08007199
 8007130:	0800736f 	.word	0x0800736f
 8007134:	0800736f 	.word	0x0800736f
 8007138:	0800730f 	.word	0x0800730f
 800713c:	0800733b 	.word	0x0800733b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	7c12      	ldrb	r2, [r2, #16]
 800714c:	f107 0108 	add.w	r1, r7, #8
 8007150:	4610      	mov	r0, r2
 8007152:	4798      	blx	r3
 8007154:	60f8      	str	r0, [r7, #12]
      break;
 8007156:	e112      	b.n	800737e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	7c1b      	ldrb	r3, [r3, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10d      	bne.n	800717c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007168:	f107 0208 	add.w	r2, r7, #8
 800716c:	4610      	mov	r0, r2
 800716e:	4798      	blx	r3
 8007170:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	3301      	adds	r3, #1
 8007176:	2202      	movs	r2, #2
 8007178:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800717a:	e100      	b.n	800737e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	f107 0208 	add.w	r2, r7, #8
 8007188:	4610      	mov	r0, r2
 800718a:	4798      	blx	r3
 800718c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3301      	adds	r3, #1
 8007192:	2202      	movs	r2, #2
 8007194:	701a      	strb	r2, [r3, #0]
      break;
 8007196:	e0f2      	b.n	800737e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	885b      	ldrh	r3, [r3, #2]
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b05      	cmp	r3, #5
 80071a0:	f200 80ac 	bhi.w	80072fc <USBD_GetDescriptor+0x204>
 80071a4:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <USBD_GetDescriptor+0xb4>)
 80071a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071aa:	bf00      	nop
 80071ac:	080071c5 	.word	0x080071c5
 80071b0:	080071f9 	.word	0x080071f9
 80071b4:	0800722d 	.word	0x0800722d
 80071b8:	08007261 	.word	0x08007261
 80071bc:	08007295 	.word	0x08007295
 80071c0:	080072c9 	.word	0x080072c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00b      	beq.n	80071e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	7c12      	ldrb	r2, [r2, #16]
 80071dc:	f107 0108 	add.w	r1, r7, #8
 80071e0:	4610      	mov	r0, r2
 80071e2:	4798      	blx	r3
 80071e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071e6:	e091      	b.n	800730c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 facb 	bl	8007786 <USBD_CtlError>
            err++;
 80071f0:	7afb      	ldrb	r3, [r7, #11]
 80071f2:	3301      	adds	r3, #1
 80071f4:	72fb      	strb	r3, [r7, #11]
          break;
 80071f6:	e089      	b.n	800730c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00b      	beq.n	800721c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	7c12      	ldrb	r2, [r2, #16]
 8007210:	f107 0108 	add.w	r1, r7, #8
 8007214:	4610      	mov	r0, r2
 8007216:	4798      	blx	r3
 8007218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800721a:	e077      	b.n	800730c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fab1 	bl	8007786 <USBD_CtlError>
            err++;
 8007224:	7afb      	ldrb	r3, [r7, #11]
 8007226:	3301      	adds	r3, #1
 8007228:	72fb      	strb	r3, [r7, #11]
          break;
 800722a:	e06f      	b.n	800730c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00b      	beq.n	8007250 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	7c12      	ldrb	r2, [r2, #16]
 8007244:	f107 0108 	add.w	r1, r7, #8
 8007248:	4610      	mov	r0, r2
 800724a:	4798      	blx	r3
 800724c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800724e:	e05d      	b.n	800730c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fa97 	bl	8007786 <USBD_CtlError>
            err++;
 8007258:	7afb      	ldrb	r3, [r7, #11]
 800725a:	3301      	adds	r3, #1
 800725c:	72fb      	strb	r3, [r7, #11]
          break;
 800725e:	e055      	b.n	800730c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00b      	beq.n	8007284 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	7c12      	ldrb	r2, [r2, #16]
 8007278:	f107 0108 	add.w	r1, r7, #8
 800727c:	4610      	mov	r0, r2
 800727e:	4798      	blx	r3
 8007280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007282:	e043      	b.n	800730c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa7d 	bl	8007786 <USBD_CtlError>
            err++;
 800728c:	7afb      	ldrb	r3, [r7, #11]
 800728e:	3301      	adds	r3, #1
 8007290:	72fb      	strb	r3, [r7, #11]
          break;
 8007292:	e03b      	b.n	800730c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00b      	beq.n	80072b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	7c12      	ldrb	r2, [r2, #16]
 80072ac:	f107 0108 	add.w	r1, r7, #8
 80072b0:	4610      	mov	r0, r2
 80072b2:	4798      	blx	r3
 80072b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072b6:	e029      	b.n	800730c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fa63 	bl	8007786 <USBD_CtlError>
            err++;
 80072c0:	7afb      	ldrb	r3, [r7, #11]
 80072c2:	3301      	adds	r3, #1
 80072c4:	72fb      	strb	r3, [r7, #11]
          break;
 80072c6:	e021      	b.n	800730c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00b      	beq.n	80072ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	7c12      	ldrb	r2, [r2, #16]
 80072e0:	f107 0108 	add.w	r1, r7, #8
 80072e4:	4610      	mov	r0, r2
 80072e6:	4798      	blx	r3
 80072e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ea:	e00f      	b.n	800730c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fa49 	bl	8007786 <USBD_CtlError>
            err++;
 80072f4:	7afb      	ldrb	r3, [r7, #11]
 80072f6:	3301      	adds	r3, #1
 80072f8:	72fb      	strb	r3, [r7, #11]
          break;
 80072fa:	e007      	b.n	800730c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fa41 	bl	8007786 <USBD_CtlError>
          err++;
 8007304:	7afb      	ldrb	r3, [r7, #11]
 8007306:	3301      	adds	r3, #1
 8007308:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800730a:	bf00      	nop
      }
      break;
 800730c:	e037      	b.n	800737e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	7c1b      	ldrb	r3, [r3, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d109      	bne.n	800732a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731e:	f107 0208 	add.w	r2, r7, #8
 8007322:	4610      	mov	r0, r2
 8007324:	4798      	blx	r3
 8007326:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007328:	e029      	b.n	800737e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fa2a 	bl	8007786 <USBD_CtlError>
        err++;
 8007332:	7afb      	ldrb	r3, [r7, #11]
 8007334:	3301      	adds	r3, #1
 8007336:	72fb      	strb	r3, [r7, #11]
      break;
 8007338:	e021      	b.n	800737e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	7c1b      	ldrb	r3, [r3, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10d      	bne.n	800735e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734a:	f107 0208 	add.w	r2, r7, #8
 800734e:	4610      	mov	r0, r2
 8007350:	4798      	blx	r3
 8007352:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	3301      	adds	r3, #1
 8007358:	2207      	movs	r2, #7
 800735a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800735c:	e00f      	b.n	800737e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fa10 	bl	8007786 <USBD_CtlError>
        err++;
 8007366:	7afb      	ldrb	r3, [r7, #11]
 8007368:	3301      	adds	r3, #1
 800736a:	72fb      	strb	r3, [r7, #11]
      break;
 800736c:	e007      	b.n	800737e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fa08 	bl	8007786 <USBD_CtlError>
      err++;
 8007376:	7afb      	ldrb	r3, [r7, #11]
 8007378:	3301      	adds	r3, #1
 800737a:	72fb      	strb	r3, [r7, #11]
      break;
 800737c:	bf00      	nop
  }

  if (err != 0U)
 800737e:	7afb      	ldrb	r3, [r7, #11]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d11e      	bne.n	80073c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	88db      	ldrh	r3, [r3, #6]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d016      	beq.n	80073ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800738c:	893b      	ldrh	r3, [r7, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00e      	beq.n	80073b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	88da      	ldrh	r2, [r3, #6]
 8007396:	893b      	ldrh	r3, [r7, #8]
 8007398:	4293      	cmp	r3, r2
 800739a:	bf28      	it	cs
 800739c:	4613      	movcs	r3, r2
 800739e:	b29b      	uxth	r3, r3
 80073a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80073a2:	893b      	ldrh	r3, [r7, #8]
 80073a4:	461a      	mov	r2, r3
 80073a6:	68f9      	ldr	r1, [r7, #12]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fa5d 	bl	8007868 <USBD_CtlSendData>
 80073ae:	e009      	b.n	80073c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f9e7 	bl	8007786 <USBD_CtlError>
 80073b8:	e004      	b.n	80073c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 faae 	bl	800791c <USBD_CtlSendStatus>
 80073c0:	e000      	b.n	80073c4 <USBD_GetDescriptor+0x2cc>
    return;
 80073c2:	bf00      	nop
  }
}
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop

080073cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	889b      	ldrh	r3, [r3, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d131      	bne.n	8007442 <USBD_SetAddress+0x76>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	88db      	ldrh	r3, [r3, #6]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d12d      	bne.n	8007442 <USBD_SetAddress+0x76>
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	885b      	ldrh	r3, [r3, #2]
 80073ea:	2b7f      	cmp	r3, #127	; 0x7f
 80073ec:	d829      	bhi.n	8007442 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	885b      	ldrh	r3, [r3, #2]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b03      	cmp	r3, #3
 8007404:	d104      	bne.n	8007410 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f9bc 	bl	8007786 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800740e:	e01d      	b.n	800744c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	7bfa      	ldrb	r2, [r7, #15]
 8007414:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007418:	7bfb      	ldrb	r3, [r7, #15]
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 ff1f 	bl	8008260 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fa7a 	bl	800791c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d004      	beq.n	8007438 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007436:	e009      	b.n	800744c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007440:	e004      	b.n	800744c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f99e 	bl	8007786 <USBD_CtlError>
  }
}
 800744a:	bf00      	nop
 800744c:	bf00      	nop
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	885b      	ldrh	r3, [r3, #2]
 8007466:	b2da      	uxtb	r2, r3
 8007468:	4b4e      	ldr	r3, [pc, #312]	; (80075a4 <USBD_SetConfig+0x150>)
 800746a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800746c:	4b4d      	ldr	r3, [pc, #308]	; (80075a4 <USBD_SetConfig+0x150>)
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d905      	bls.n	8007480 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f985 	bl	8007786 <USBD_CtlError>
    return USBD_FAIL;
 800747c:	2303      	movs	r3, #3
 800747e:	e08c      	b.n	800759a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b02      	cmp	r3, #2
 800748a:	d002      	beq.n	8007492 <USBD_SetConfig+0x3e>
 800748c:	2b03      	cmp	r3, #3
 800748e:	d029      	beq.n	80074e4 <USBD_SetConfig+0x90>
 8007490:	e075      	b.n	800757e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007492:	4b44      	ldr	r3, [pc, #272]	; (80075a4 <USBD_SetConfig+0x150>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d020      	beq.n	80074dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800749a:	4b42      	ldr	r3, [pc, #264]	; (80075a4 <USBD_SetConfig+0x150>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80074a4:	4b3f      	ldr	r3, [pc, #252]	; (80075a4 <USBD_SetConfig+0x150>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7fe ffe7 	bl	800647e <USBD_SetClassConfig>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d008      	beq.n	80074cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f962 	bl	8007786 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2202      	movs	r2, #2
 80074c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80074ca:	e065      	b.n	8007598 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fa25 	bl	800791c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2203      	movs	r2, #3
 80074d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80074da:	e05d      	b.n	8007598 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fa1d 	bl	800791c <USBD_CtlSendStatus>
      break;
 80074e2:	e059      	b.n	8007598 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80074e4:	4b2f      	ldr	r3, [pc, #188]	; (80075a4 <USBD_SetConfig+0x150>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d112      	bne.n	8007512 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80074f4:	4b2b      	ldr	r3, [pc, #172]	; (80075a4 <USBD_SetConfig+0x150>)
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	461a      	mov	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074fe:	4b29      	ldr	r3, [pc, #164]	; (80075a4 <USBD_SetConfig+0x150>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7fe ffd6 	bl	80064b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fa06 	bl	800791c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007510:	e042      	b.n	8007598 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007512:	4b24      	ldr	r3, [pc, #144]	; (80075a4 <USBD_SetConfig+0x150>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	429a      	cmp	r2, r3
 800751e:	d02a      	beq.n	8007576 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	b2db      	uxtb	r3, r3
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7fe ffc4 	bl	80064b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800752e:	4b1d      	ldr	r3, [pc, #116]	; (80075a4 <USBD_SetConfig+0x150>)
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007538:	4b1a      	ldr	r3, [pc, #104]	; (80075a4 <USBD_SetConfig+0x150>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7fe ff9d 	bl	800647e <USBD_SetClassConfig>
 8007544:	4603      	mov	r3, r0
 8007546:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00f      	beq.n	800756e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f918 	bl	8007786 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	b2db      	uxtb	r3, r3
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7fe ffa9 	bl	80064b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800756c:	e014      	b.n	8007598 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f9d4 	bl	800791c <USBD_CtlSendStatus>
      break;
 8007574:	e010      	b.n	8007598 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f9d0 	bl	800791c <USBD_CtlSendStatus>
      break;
 800757c:	e00c      	b.n	8007598 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f900 	bl	8007786 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007586:	4b07      	ldr	r3, [pc, #28]	; (80075a4 <USBD_SetConfig+0x150>)
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7fe ff92 	bl	80064b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007592:	2303      	movs	r3, #3
 8007594:	73fb      	strb	r3, [r7, #15]
      break;
 8007596:	bf00      	nop
  }

  return ret;
 8007598:	7bfb      	ldrb	r3, [r7, #15]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20000418 	.word	0x20000418

080075a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	88db      	ldrh	r3, [r3, #6]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d004      	beq.n	80075c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f8e2 	bl	8007786 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80075c2:	e023      	b.n	800760c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	dc02      	bgt.n	80075d6 <USBD_GetConfig+0x2e>
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	dc03      	bgt.n	80075dc <USBD_GetConfig+0x34>
 80075d4:	e015      	b.n	8007602 <USBD_GetConfig+0x5a>
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d00b      	beq.n	80075f2 <USBD_GetConfig+0x4a>
 80075da:	e012      	b.n	8007602 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3308      	adds	r3, #8
 80075e6:	2201      	movs	r2, #1
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f93c 	bl	8007868 <USBD_CtlSendData>
        break;
 80075f0:	e00c      	b.n	800760c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3304      	adds	r3, #4
 80075f6:	2201      	movs	r2, #1
 80075f8:	4619      	mov	r1, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f934 	bl	8007868 <USBD_CtlSendData>
        break;
 8007600:	e004      	b.n	800760c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f8be 	bl	8007786 <USBD_CtlError>
        break;
 800760a:	bf00      	nop
}
 800760c:	bf00      	nop
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007624:	b2db      	uxtb	r3, r3
 8007626:	3b01      	subs	r3, #1
 8007628:	2b02      	cmp	r3, #2
 800762a:	d81e      	bhi.n	800766a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	88db      	ldrh	r3, [r3, #6]
 8007630:	2b02      	cmp	r3, #2
 8007632:	d004      	beq.n	800763e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f8a5 	bl	8007786 <USBD_CtlError>
        break;
 800763c:	e01a      	b.n	8007674 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	f043 0202 	orr.w	r2, r3, #2
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	330c      	adds	r3, #12
 800765e:	2202      	movs	r2, #2
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f900 	bl	8007868 <USBD_CtlSendData>
      break;
 8007668:	e004      	b.n	8007674 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f88a 	bl	8007786 <USBD_CtlError>
      break;
 8007672:	bf00      	nop
  }
}
 8007674:	bf00      	nop
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	885b      	ldrh	r3, [r3, #2]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d107      	bne.n	800769e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f940 	bl	800791c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800769c:	e013      	b.n	80076c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	885b      	ldrh	r3, [r3, #2]
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d10b      	bne.n	80076be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	889b      	ldrh	r3, [r3, #4]
 80076aa:	0a1b      	lsrs	r3, r3, #8
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f930 	bl	800791c <USBD_CtlSendStatus>
}
 80076bc:	e003      	b.n	80076c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f860 	bl	8007786 <USBD_CtlError>
}
 80076c6:	bf00      	nop
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b082      	sub	sp, #8
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	3b01      	subs	r3, #1
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d80b      	bhi.n	80076fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	885b      	ldrh	r3, [r3, #2]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d10c      	bne.n	8007708 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f910 	bl	800791c <USBD_CtlSendStatus>
      }
      break;
 80076fc:	e004      	b.n	8007708 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f840 	bl	8007786 <USBD_CtlError>
      break;
 8007706:	e000      	b.n	800770a <USBD_ClrFeature+0x3c>
      break;
 8007708:	bf00      	nop
  }
}
 800770a:	bf00      	nop
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b084      	sub	sp, #16
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	781a      	ldrb	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3301      	adds	r3, #1
 800772c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	781a      	ldrb	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3301      	adds	r3, #1
 800773a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f7ff fa41 	bl	8006bc4 <SWAPBYTE>
 8007742:	4603      	mov	r3, r0
 8007744:	461a      	mov	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	3301      	adds	r3, #1
 800774e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3301      	adds	r3, #1
 8007754:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f7ff fa34 	bl	8006bc4 <SWAPBYTE>
 800775c:	4603      	mov	r3, r0
 800775e:	461a      	mov	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3301      	adds	r3, #1
 8007768:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3301      	adds	r3, #1
 800776e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f7ff fa27 	bl	8006bc4 <SWAPBYTE>
 8007776:	4603      	mov	r3, r0
 8007778:	461a      	mov	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	80da      	strh	r2, [r3, #6]
}
 800777e:	bf00      	nop
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007790:	2180      	movs	r1, #128	; 0x80
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fcfa 	bl	800818c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007798:	2100      	movs	r1, #0
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fcf6 	bl	800818c <USBD_LL_StallEP>
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d036      	beq.n	800782c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80077c2:	6938      	ldr	r0, [r7, #16]
 80077c4:	f000 f836 	bl	8007834 <USBD_GetLen>
 80077c8:	4603      	mov	r3, r0
 80077ca:	3301      	adds	r3, #1
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	005b      	lsls	r3, r3, #1
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	4413      	add	r3, r2
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	7812      	ldrb	r2, [r2, #0]
 80077e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
 80077e4:	3301      	adds	r3, #1
 80077e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	4413      	add	r3, r2
 80077ee:	2203      	movs	r2, #3
 80077f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
 80077f4:	3301      	adds	r3, #1
 80077f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80077f8:	e013      	b.n	8007822 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80077fa:	7dfb      	ldrb	r3, [r7, #23]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	4413      	add	r3, r2
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	7812      	ldrb	r2, [r2, #0]
 8007804:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	3301      	adds	r3, #1
 800780a:	613b      	str	r3, [r7, #16]
    idx++;
 800780c:	7dfb      	ldrb	r3, [r7, #23]
 800780e:	3301      	adds	r3, #1
 8007810:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007812:	7dfb      	ldrb	r3, [r7, #23]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	4413      	add	r3, r2
 8007818:	2200      	movs	r2, #0
 800781a:	701a      	strb	r2, [r3, #0]
    idx++;
 800781c:	7dfb      	ldrb	r3, [r7, #23]
 800781e:	3301      	adds	r3, #1
 8007820:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1e7      	bne.n	80077fa <USBD_GetString+0x52>
 800782a:	e000      	b.n	800782e <USBD_GetString+0x86>
    return;
 800782c:	bf00      	nop
  }
}
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007844:	e005      	b.n	8007852 <USBD_GetLen+0x1e>
  {
    len++;
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	3301      	adds	r3, #1
 800784a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	3301      	adds	r3, #1
 8007850:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1f5      	bne.n	8007846 <USBD_GetLen+0x12>
  }

  return len;
 800785a:	7bfb      	ldrb	r3, [r7, #15]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2202      	movs	r2, #2
 8007878:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	2100      	movs	r1, #0
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 fd05 	bl	800829e <USBD_LL_Transmit>

  return USBD_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b084      	sub	sp, #16
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	60f8      	str	r0, [r7, #12]
 80078a6:	60b9      	str	r1, [r7, #8]
 80078a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	2100      	movs	r1, #0
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 fcf4 	bl	800829e <USBD_LL_Transmit>

  return USBD_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2203      	movs	r2, #3
 80078d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	2100      	movs	r1, #0
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 fcf8 	bl	80082e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b084      	sub	sp, #16
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	2100      	movs	r1, #0
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 fce7 	bl	80082e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2204      	movs	r2, #4
 8007928:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800792c:	2300      	movs	r3, #0
 800792e:	2200      	movs	r2, #0
 8007930:	2100      	movs	r1, #0
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fcb3 	bl	800829e <USBD_LL_Transmit>

  return USBD_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2205      	movs	r2, #5
 800794e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007952:	2300      	movs	r3, #0
 8007954:	2200      	movs	r2, #0
 8007956:	2100      	movs	r1, #0
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fcc1 	bl	80082e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800796c:	2200      	movs	r2, #0
 800796e:	4912      	ldr	r1, [pc, #72]	; (80079b8 <MX_USB_DEVICE_Init+0x50>)
 8007970:	4812      	ldr	r0, [pc, #72]	; (80079bc <MX_USB_DEVICE_Init+0x54>)
 8007972:	f7fe fd07 	bl	8006384 <USBD_Init>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800797c:	f7f9 fcf0 	bl	8001360 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007980:	490f      	ldr	r1, [pc, #60]	; (80079c0 <MX_USB_DEVICE_Init+0x58>)
 8007982:	480e      	ldr	r0, [pc, #56]	; (80079bc <MX_USB_DEVICE_Init+0x54>)
 8007984:	f7fe fd2e 	bl	80063e4 <USBD_RegisterClass>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800798e:	f7f9 fce7 	bl	8001360 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007992:	490c      	ldr	r1, [pc, #48]	; (80079c4 <MX_USB_DEVICE_Init+0x5c>)
 8007994:	4809      	ldr	r0, [pc, #36]	; (80079bc <MX_USB_DEVICE_Init+0x54>)
 8007996:	f7fe fc1f 	bl	80061d8 <USBD_CDC_RegisterInterface>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079a0:	f7f9 fcde 	bl	8001360 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079a4:	4805      	ldr	r0, [pc, #20]	; (80079bc <MX_USB_DEVICE_Init+0x54>)
 80079a6:	f7fe fd53 	bl	8006450 <USBD_Start>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80079b0:	f7f9 fcd6 	bl	8001360 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80079b4:	bf00      	nop
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	200000ac 	.word	0x200000ac
 80079bc:	2000041c 	.word	0x2000041c
 80079c0:	20000018 	.word	0x20000018
 80079c4:	20000098 	.word	0x20000098

080079c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80079cc:	2200      	movs	r2, #0
 80079ce:	4905      	ldr	r1, [pc, #20]	; (80079e4 <CDC_Init_FS+0x1c>)
 80079d0:	4805      	ldr	r0, [pc, #20]	; (80079e8 <CDC_Init_FS+0x20>)
 80079d2:	f7fe fc1b 	bl	800620c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80079d6:	4905      	ldr	r1, [pc, #20]	; (80079ec <CDC_Init_FS+0x24>)
 80079d8:	4803      	ldr	r0, [pc, #12]	; (80079e8 <CDC_Init_FS+0x20>)
 80079da:	f7fe fc39 	bl	8006250 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80079de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	20000ef8 	.word	0x20000ef8
 80079e8:	2000041c 	.word	0x2000041c
 80079ec:	200006f8 	.word	0x200006f8

080079f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80079f0:	b480      	push	{r7}
 80079f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	6039      	str	r1, [r7, #0]
 8007a0a:	71fb      	strb	r3, [r7, #7]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a10:	79fb      	ldrb	r3, [r7, #7]
 8007a12:	2b23      	cmp	r3, #35	; 0x23
 8007a14:	d84a      	bhi.n	8007aac <CDC_Control_FS+0xac>
 8007a16:	a201      	add	r2, pc, #4	; (adr r2, 8007a1c <CDC_Control_FS+0x1c>)
 8007a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1c:	08007aad 	.word	0x08007aad
 8007a20:	08007aad 	.word	0x08007aad
 8007a24:	08007aad 	.word	0x08007aad
 8007a28:	08007aad 	.word	0x08007aad
 8007a2c:	08007aad 	.word	0x08007aad
 8007a30:	08007aad 	.word	0x08007aad
 8007a34:	08007aad 	.word	0x08007aad
 8007a38:	08007aad 	.word	0x08007aad
 8007a3c:	08007aad 	.word	0x08007aad
 8007a40:	08007aad 	.word	0x08007aad
 8007a44:	08007aad 	.word	0x08007aad
 8007a48:	08007aad 	.word	0x08007aad
 8007a4c:	08007aad 	.word	0x08007aad
 8007a50:	08007aad 	.word	0x08007aad
 8007a54:	08007aad 	.word	0x08007aad
 8007a58:	08007aad 	.word	0x08007aad
 8007a5c:	08007aad 	.word	0x08007aad
 8007a60:	08007aad 	.word	0x08007aad
 8007a64:	08007aad 	.word	0x08007aad
 8007a68:	08007aad 	.word	0x08007aad
 8007a6c:	08007aad 	.word	0x08007aad
 8007a70:	08007aad 	.word	0x08007aad
 8007a74:	08007aad 	.word	0x08007aad
 8007a78:	08007aad 	.word	0x08007aad
 8007a7c:	08007aad 	.word	0x08007aad
 8007a80:	08007aad 	.word	0x08007aad
 8007a84:	08007aad 	.word	0x08007aad
 8007a88:	08007aad 	.word	0x08007aad
 8007a8c:	08007aad 	.word	0x08007aad
 8007a90:	08007aad 	.word	0x08007aad
 8007a94:	08007aad 	.word	0x08007aad
 8007a98:	08007aad 	.word	0x08007aad
 8007a9c:	08007aad 	.word	0x08007aad
 8007aa0:	08007aad 	.word	0x08007aad
 8007aa4:	08007aad 	.word	0x08007aad
 8007aa8:	08007aad 	.word	0x08007aad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007aac:	bf00      	nop
  }

  return (USBD_OK);
 8007aae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	4810      	ldr	r0, [pc, #64]	; (8007b0c <CDC_Receive_FS+0x50>)
 8007aca:	f7fe fbc1 	bl	8006250 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007ace:	480f      	ldr	r0, [pc, #60]	; (8007b0c <CDC_Receive_FS+0x50>)
 8007ad0:	f7fe fc22 	bl	8006318 <USBD_CDC_ReceivePacket>
  memset (externbuffer, '\0', 64);  // clear the buffer
 8007ad4:	2240      	movs	r2, #64	; 0x40
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	480d      	ldr	r0, [pc, #52]	; (8007b10 <CDC_Receive_FS+0x54>)
 8007ada:	f000 fcb1 	bl	8008440 <memset>
    //uint8_t len = (uint8_t)*Len;
    memcpy(externbuffer, Buf, *Len);  // copy the data to the buffer
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	6879      	ldr	r1, [r7, #4]
 8007ae6:	480a      	ldr	r0, [pc, #40]	; (8007b10 <CDC_Receive_FS+0x54>)
 8007ae8:	f000 fc9c 	bl	8008424 <memcpy>
    memset(Buf, '\0', *Len);   // clear the Buf also
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	2100      	movs	r1, #0
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fca3 	bl	8008440 <memset>
     flag=1;
 8007afa:	4b06      	ldr	r3, [pc, #24]	; (8007b14 <CDC_Receive_FS+0x58>)
 8007afc:	2201      	movs	r2, #1
 8007afe:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 8007b00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	2000041c 	.word	0x2000041c
 8007b10:	20000328 	.word	0x20000328
 8007b14:	20000368 	.word	0x20000368

08007b18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007b28:	4b0d      	ldr	r3, [pc, #52]	; (8007b60 <CDC_Transmit_FS+0x48>)
 8007b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e00b      	b.n	8007b56 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b3e:	887b      	ldrh	r3, [r7, #2]
 8007b40:	461a      	mov	r2, r3
 8007b42:	6879      	ldr	r1, [r7, #4]
 8007b44:	4806      	ldr	r0, [pc, #24]	; (8007b60 <CDC_Transmit_FS+0x48>)
 8007b46:	f7fe fb61 	bl	800620c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007b4a:	4805      	ldr	r0, [pc, #20]	; (8007b60 <CDC_Transmit_FS+0x48>)
 8007b4c:	f7fe fb9e 	bl	800628c <USBD_CDC_TransmitPacket>
 8007b50:	4603      	mov	r3, r0
 8007b52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	2000041c 	.word	0x2000041c

08007b64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007b76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	371c      	adds	r7, #28
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
	...

08007b88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	6039      	str	r1, [r7, #0]
 8007b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2212      	movs	r2, #18
 8007b98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b9a:	4b03      	ldr	r3, [pc, #12]	; (8007ba8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	200000c8 	.word	0x200000c8

08007bac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	6039      	str	r1, [r7, #0]
 8007bb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2204      	movs	r2, #4
 8007bbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007bbe:	4b03      	ldr	r3, [pc, #12]	; (8007bcc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	200000dc 	.word	0x200000dc

08007bd0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	6039      	str	r1, [r7, #0]
 8007bda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bdc:	79fb      	ldrb	r3, [r7, #7]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d105      	bne.n	8007bee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	4907      	ldr	r1, [pc, #28]	; (8007c04 <USBD_FS_ProductStrDescriptor+0x34>)
 8007be6:	4808      	ldr	r0, [pc, #32]	; (8007c08 <USBD_FS_ProductStrDescriptor+0x38>)
 8007be8:	f7ff fdde 	bl	80077a8 <USBD_GetString>
 8007bec:	e004      	b.n	8007bf8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	4904      	ldr	r1, [pc, #16]	; (8007c04 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bf2:	4805      	ldr	r0, [pc, #20]	; (8007c08 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bf4:	f7ff fdd8 	bl	80077a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bf8:	4b02      	ldr	r3, [pc, #8]	; (8007c04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	200016f8 	.word	0x200016f8
 8007c08:	0800b278 	.word	0x0800b278

08007c0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	4603      	mov	r3, r0
 8007c14:	6039      	str	r1, [r7, #0]
 8007c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	4904      	ldr	r1, [pc, #16]	; (8007c2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c1c:	4804      	ldr	r0, [pc, #16]	; (8007c30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c1e:	f7ff fdc3 	bl	80077a8 <USBD_GetString>
  return USBD_StrDesc;
 8007c22:	4b02      	ldr	r3, [pc, #8]	; (8007c2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	200016f8 	.word	0x200016f8
 8007c30:	0800b290 	.word	0x0800b290

08007c34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	6039      	str	r1, [r7, #0]
 8007c3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	221a      	movs	r2, #26
 8007c44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c46:	f000 f843 	bl	8007cd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c4a:	4b02      	ldr	r3, [pc, #8]	; (8007c54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	200000e0 	.word	0x200000e0

08007c58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	4603      	mov	r3, r0
 8007c60:	6039      	str	r1, [r7, #0]
 8007c62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c64:	79fb      	ldrb	r3, [r7, #7]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d105      	bne.n	8007c76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	4907      	ldr	r1, [pc, #28]	; (8007c8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c6e:	4808      	ldr	r0, [pc, #32]	; (8007c90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c70:	f7ff fd9a 	bl	80077a8 <USBD_GetString>
 8007c74:	e004      	b.n	8007c80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	4904      	ldr	r1, [pc, #16]	; (8007c8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c7a:	4805      	ldr	r0, [pc, #20]	; (8007c90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c7c:	f7ff fd94 	bl	80077a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c80:	4b02      	ldr	r3, [pc, #8]	; (8007c8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	200016f8 	.word	0x200016f8
 8007c90:	0800b2a4 	.word	0x0800b2a4

08007c94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	6039      	str	r1, [r7, #0]
 8007c9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ca0:	79fb      	ldrb	r3, [r7, #7]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d105      	bne.n	8007cb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	4907      	ldr	r1, [pc, #28]	; (8007cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007caa:	4808      	ldr	r0, [pc, #32]	; (8007ccc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007cac:	f7ff fd7c 	bl	80077a8 <USBD_GetString>
 8007cb0:	e004      	b.n	8007cbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	4904      	ldr	r1, [pc, #16]	; (8007cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007cb6:	4805      	ldr	r0, [pc, #20]	; (8007ccc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007cb8:	f7ff fd76 	bl	80077a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cbc:	4b02      	ldr	r3, [pc, #8]	; (8007cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	200016f8 	.word	0x200016f8
 8007ccc:	0800b2b0 	.word	0x0800b2b0

08007cd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007cd6:	4b0f      	ldr	r3, [pc, #60]	; (8007d14 <Get_SerialNum+0x44>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007cdc:	4b0e      	ldr	r3, [pc, #56]	; (8007d18 <Get_SerialNum+0x48>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007ce2:	4b0e      	ldr	r3, [pc, #56]	; (8007d1c <Get_SerialNum+0x4c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4413      	add	r3, r2
 8007cee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d009      	beq.n	8007d0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007cf6:	2208      	movs	r2, #8
 8007cf8:	4909      	ldr	r1, [pc, #36]	; (8007d20 <Get_SerialNum+0x50>)
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 f814 	bl	8007d28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d00:	2204      	movs	r2, #4
 8007d02:	4908      	ldr	r1, [pc, #32]	; (8007d24 <Get_SerialNum+0x54>)
 8007d04:	68b8      	ldr	r0, [r7, #8]
 8007d06:	f000 f80f 	bl	8007d28 <IntToUnicode>
  }
}
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	1fff7a10 	.word	0x1fff7a10
 8007d18:	1fff7a14 	.word	0x1fff7a14
 8007d1c:	1fff7a18 	.word	0x1fff7a18
 8007d20:	200000e2 	.word	0x200000e2
 8007d24:	200000f2 	.word	0x200000f2

08007d28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b087      	sub	sp, #28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	4613      	mov	r3, r2
 8007d34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d36:	2300      	movs	r3, #0
 8007d38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	75fb      	strb	r3, [r7, #23]
 8007d3e:	e027      	b.n	8007d90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	0f1b      	lsrs	r3, r3, #28
 8007d44:	2b09      	cmp	r3, #9
 8007d46:	d80b      	bhi.n	8007d60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	0f1b      	lsrs	r3, r3, #28
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	4619      	mov	r1, r3
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	440b      	add	r3, r1
 8007d58:	3230      	adds	r2, #48	; 0x30
 8007d5a:	b2d2      	uxtb	r2, r2
 8007d5c:	701a      	strb	r2, [r3, #0]
 8007d5e:	e00a      	b.n	8007d76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	0f1b      	lsrs	r3, r3, #28
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	440b      	add	r3, r1
 8007d70:	3237      	adds	r2, #55	; 0x37
 8007d72:	b2d2      	uxtb	r2, r2
 8007d74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	011b      	lsls	r3, r3, #4
 8007d7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
 8007d7e:	005b      	lsls	r3, r3, #1
 8007d80:	3301      	adds	r3, #1
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	4413      	add	r3, r2
 8007d86:	2200      	movs	r2, #0
 8007d88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d8a:	7dfb      	ldrb	r3, [r7, #23]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	75fb      	strb	r3, [r7, #23]
 8007d90:	7dfa      	ldrb	r2, [r7, #23]
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d3d3      	bcc.n	8007d40 <IntToUnicode+0x18>
  }
}
 8007d98:	bf00      	nop
 8007d9a:	bf00      	nop
 8007d9c:	371c      	adds	r7, #28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
	...

08007da8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08a      	sub	sp, #40	; 0x28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007db0:	f107 0314 	add.w	r3, r7, #20
 8007db4:	2200      	movs	r2, #0
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	605a      	str	r2, [r3, #4]
 8007dba:	609a      	str	r2, [r3, #8]
 8007dbc:	60da      	str	r2, [r3, #12]
 8007dbe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dc8:	d13a      	bne.n	8007e40 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dca:	2300      	movs	r3, #0
 8007dcc:	613b      	str	r3, [r7, #16]
 8007dce:	4b1e      	ldr	r3, [pc, #120]	; (8007e48 <HAL_PCD_MspInit+0xa0>)
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd2:	4a1d      	ldr	r2, [pc, #116]	; (8007e48 <HAL_PCD_MspInit+0xa0>)
 8007dd4:	f043 0301 	orr.w	r3, r3, #1
 8007dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8007dda:	4b1b      	ldr	r3, [pc, #108]	; (8007e48 <HAL_PCD_MspInit+0xa0>)
 8007ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	613b      	str	r3, [r7, #16]
 8007de4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007de6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dec:	2302      	movs	r3, #2
 8007dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007df0:	2300      	movs	r3, #0
 8007df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007df4:	2303      	movs	r3, #3
 8007df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007df8:	230a      	movs	r3, #10
 8007dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dfc:	f107 0314 	add.w	r3, r7, #20
 8007e00:	4619      	mov	r1, r3
 8007e02:	4812      	ldr	r0, [pc, #72]	; (8007e4c <HAL_PCD_MspInit+0xa4>)
 8007e04:	f7f9 fe2a 	bl	8001a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e08:	4b0f      	ldr	r3, [pc, #60]	; (8007e48 <HAL_PCD_MspInit+0xa0>)
 8007e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0c:	4a0e      	ldr	r2, [pc, #56]	; (8007e48 <HAL_PCD_MspInit+0xa0>)
 8007e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e12:	6353      	str	r3, [r2, #52]	; 0x34
 8007e14:	2300      	movs	r3, #0
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	4b0b      	ldr	r3, [pc, #44]	; (8007e48 <HAL_PCD_MspInit+0xa0>)
 8007e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e1c:	4a0a      	ldr	r2, [pc, #40]	; (8007e48 <HAL_PCD_MspInit+0xa0>)
 8007e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e22:	6453      	str	r3, [r2, #68]	; 0x44
 8007e24:	4b08      	ldr	r3, [pc, #32]	; (8007e48 <HAL_PCD_MspInit+0xa0>)
 8007e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e2c:	60fb      	str	r3, [r7, #12]
 8007e2e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e30:	2200      	movs	r2, #0
 8007e32:	2100      	movs	r1, #0
 8007e34:	2043      	movs	r0, #67	; 0x43
 8007e36:	f7f9 fdcc 	bl	80019d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e3a:	2043      	movs	r0, #67	; 0x43
 8007e3c:	f7f9 fde5 	bl	8001a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e40:	bf00      	nop
 8007e42:	3728      	adds	r7, #40	; 0x28
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	40023800 	.word	0x40023800
 8007e4c:	40020000 	.word	0x40020000

08007e50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007e64:	4619      	mov	r1, r3
 8007e66:	4610      	mov	r0, r2
 8007e68:	f7fe fb3f 	bl	80064ea <USBD_LL_SetupStage>
}
 8007e6c:	bf00      	nop
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007e86:	78fa      	ldrb	r2, [r7, #3]
 8007e88:	6879      	ldr	r1, [r7, #4]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	4413      	add	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	440b      	add	r3, r1
 8007e94:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	78fb      	ldrb	r3, [r7, #3]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	f7fe fb79 	bl	8006594 <USBD_LL_DataOutStage>
}
 8007ea2:	bf00      	nop
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007ebc:	78fa      	ldrb	r2, [r7, #3]
 8007ebe:	6879      	ldr	r1, [r7, #4]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	4413      	add	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	440b      	add	r3, r1
 8007eca:	334c      	adds	r3, #76	; 0x4c
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	78fb      	ldrb	r3, [r7, #3]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	f7fe fc12 	bl	80066fa <USBD_LL_DataInStage>
}
 8007ed6:	bf00      	nop
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b082      	sub	sp, #8
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fe fd46 	bl	800697e <USBD_LL_SOF>
}
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f02:	2301      	movs	r3, #1
 8007f04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d102      	bne.n	8007f14 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	73fb      	strb	r3, [r7, #15]
 8007f12:	e008      	b.n	8007f26 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d102      	bne.n	8007f22 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	73fb      	strb	r3, [r7, #15]
 8007f20:	e001      	b.n	8007f26 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007f22:	f7f9 fa1d 	bl	8001360 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f2c:	7bfa      	ldrb	r2, [r7, #15]
 8007f2e:	4611      	mov	r1, r2
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fe fce6 	bl	8006902 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fe fc8e 	bl	800685e <USBD_LL_Reset>
}
 8007f42:	bf00      	nop
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
	...

08007f4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fe fce1 	bl	8006922 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6812      	ldr	r2, [r2, #0]
 8007f6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f72:	f043 0301 	orr.w	r3, r3, #1
 8007f76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d005      	beq.n	8007f8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f80:	4b04      	ldr	r3, [pc, #16]	; (8007f94 <HAL_PCD_SuspendCallback+0x48>)
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	4a03      	ldr	r2, [pc, #12]	; (8007f94 <HAL_PCD_SuspendCallback+0x48>)
 8007f86:	f043 0306 	orr.w	r3, r3, #6
 8007f8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	e000ed00 	.word	0xe000ed00

08007f98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fcd1 	bl	800694e <USBD_LL_Resume>
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fc6:	78fa      	ldrb	r2, [r7, #3]
 8007fc8:	4611      	mov	r1, r2
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe fd29 	bl	8006a22 <USBD_LL_IsoOUTIncomplete>
}
 8007fd0:	bf00      	nop
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fea:	78fa      	ldrb	r2, [r7, #3]
 8007fec:	4611      	mov	r1, r2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fe fce5 	bl	80069be <USBD_LL_IsoINIncomplete>
}
 8007ff4:	bf00      	nop
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800800a:	4618      	mov	r0, r3
 800800c:	f7fe fd3b 	bl	8006a86 <USBD_LL_DevConnected>
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe fd38 	bl	8006a9c <USBD_LL_DevDisconnected>
}
 800802c:	bf00      	nop
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d13c      	bne.n	80080be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008044:	4a20      	ldr	r2, [pc, #128]	; (80080c8 <USBD_LL_Init+0x94>)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a1e      	ldr	r2, [pc, #120]	; (80080c8 <USBD_LL_Init+0x94>)
 8008050:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008054:	4b1c      	ldr	r3, [pc, #112]	; (80080c8 <USBD_LL_Init+0x94>)
 8008056:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800805a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800805c:	4b1a      	ldr	r3, [pc, #104]	; (80080c8 <USBD_LL_Init+0x94>)
 800805e:	2204      	movs	r2, #4
 8008060:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008062:	4b19      	ldr	r3, [pc, #100]	; (80080c8 <USBD_LL_Init+0x94>)
 8008064:	2202      	movs	r2, #2
 8008066:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008068:	4b17      	ldr	r3, [pc, #92]	; (80080c8 <USBD_LL_Init+0x94>)
 800806a:	2200      	movs	r2, #0
 800806c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800806e:	4b16      	ldr	r3, [pc, #88]	; (80080c8 <USBD_LL_Init+0x94>)
 8008070:	2202      	movs	r2, #2
 8008072:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008074:	4b14      	ldr	r3, [pc, #80]	; (80080c8 <USBD_LL_Init+0x94>)
 8008076:	2200      	movs	r2, #0
 8008078:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800807a:	4b13      	ldr	r3, [pc, #76]	; (80080c8 <USBD_LL_Init+0x94>)
 800807c:	2200      	movs	r2, #0
 800807e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008080:	4b11      	ldr	r3, [pc, #68]	; (80080c8 <USBD_LL_Init+0x94>)
 8008082:	2200      	movs	r2, #0
 8008084:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008086:	4b10      	ldr	r3, [pc, #64]	; (80080c8 <USBD_LL_Init+0x94>)
 8008088:	2200      	movs	r2, #0
 800808a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800808c:	4b0e      	ldr	r3, [pc, #56]	; (80080c8 <USBD_LL_Init+0x94>)
 800808e:	2200      	movs	r2, #0
 8008090:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008092:	480d      	ldr	r0, [pc, #52]	; (80080c8 <USBD_LL_Init+0x94>)
 8008094:	f7f9 fec8 	bl	8001e28 <HAL_PCD_Init>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800809e:	f7f9 f95f 	bl	8001360 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80080a2:	2180      	movs	r1, #128	; 0x80
 80080a4:	4808      	ldr	r0, [pc, #32]	; (80080c8 <USBD_LL_Init+0x94>)
 80080a6:	f7fb f920 	bl	80032ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80080aa:	2240      	movs	r2, #64	; 0x40
 80080ac:	2100      	movs	r1, #0
 80080ae:	4806      	ldr	r0, [pc, #24]	; (80080c8 <USBD_LL_Init+0x94>)
 80080b0:	f7fb f8d4 	bl	800325c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80080b4:	2280      	movs	r2, #128	; 0x80
 80080b6:	2101      	movs	r1, #1
 80080b8:	4803      	ldr	r0, [pc, #12]	; (80080c8 <USBD_LL_Init+0x94>)
 80080ba:	f7fb f8cf 	bl	800325c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	200018f8 	.word	0x200018f8

080080cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7f9 ffbd 	bl	8002062 <HAL_PCD_Start>
 80080e8:	4603      	mov	r3, r0
 80080ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f000 f942 	bl	8008378 <USBD_Get_USB_Status>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b084      	sub	sp, #16
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	4608      	mov	r0, r1
 800810c:	4611      	mov	r1, r2
 800810e:	461a      	mov	r2, r3
 8008110:	4603      	mov	r3, r0
 8008112:	70fb      	strb	r3, [r7, #3]
 8008114:	460b      	mov	r3, r1
 8008116:	70bb      	strb	r3, [r7, #2]
 8008118:	4613      	mov	r3, r2
 800811a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800812a:	78bb      	ldrb	r3, [r7, #2]
 800812c:	883a      	ldrh	r2, [r7, #0]
 800812e:	78f9      	ldrb	r1, [r7, #3]
 8008130:	f7fa fc8e 	bl	8002a50 <HAL_PCD_EP_Open>
 8008134:	4603      	mov	r3, r0
 8008136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008138:	7bfb      	ldrb	r3, [r7, #15]
 800813a:	4618      	mov	r0, r3
 800813c:	f000 f91c 	bl	8008378 <USBD_Get_USB_Status>
 8008140:	4603      	mov	r3, r0
 8008142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008144:	7bbb      	ldrb	r3, [r7, #14]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	460b      	mov	r3, r1
 8008158:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008168:	78fa      	ldrb	r2, [r7, #3]
 800816a:	4611      	mov	r1, r2
 800816c:	4618      	mov	r0, r3
 800816e:	f7fa fcd7 	bl	8002b20 <HAL_PCD_EP_Close>
 8008172:	4603      	mov	r3, r0
 8008174:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	4618      	mov	r0, r3
 800817a:	f000 f8fd 	bl	8008378 <USBD_Get_USB_Status>
 800817e:	4603      	mov	r3, r0
 8008180:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008182:	7bbb      	ldrb	r3, [r7, #14]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	460b      	mov	r3, r1
 8008196:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800819c:	2300      	movs	r3, #0
 800819e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081a6:	78fa      	ldrb	r2, [r7, #3]
 80081a8:	4611      	mov	r1, r2
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fa fdaf 	bl	8002d0e <HAL_PCD_EP_SetStall>
 80081b0:	4603      	mov	r3, r0
 80081b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 f8de 	bl	8008378 <USBD_Get_USB_Status>
 80081bc:	4603      	mov	r3, r0
 80081be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b084      	sub	sp, #16
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	460b      	mov	r3, r1
 80081d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081e4:	78fa      	ldrb	r2, [r7, #3]
 80081e6:	4611      	mov	r1, r2
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fa fdf4 	bl	8002dd6 <HAL_PCD_EP_ClrStall>
 80081ee:	4603      	mov	r3, r0
 80081f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 f8bf 	bl	8008378 <USBD_Get_USB_Status>
 80081fa:	4603      	mov	r3, r0
 80081fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800821a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800821c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008220:	2b00      	cmp	r3, #0
 8008222:	da0b      	bge.n	800823c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008224:	78fb      	ldrb	r3, [r7, #3]
 8008226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800822a:	68f9      	ldr	r1, [r7, #12]
 800822c:	4613      	mov	r3, r2
 800822e:	00db      	lsls	r3, r3, #3
 8008230:	4413      	add	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	440b      	add	r3, r1
 8008236:	333e      	adds	r3, #62	; 0x3e
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	e00b      	b.n	8008254 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800823c:	78fb      	ldrb	r3, [r7, #3]
 800823e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008242:	68f9      	ldr	r1, [r7, #12]
 8008244:	4613      	mov	r3, r2
 8008246:	00db      	lsls	r3, r3, #3
 8008248:	4413      	add	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	440b      	add	r3, r1
 800824e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008252:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008254:	4618      	mov	r0, r3
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800827a:	78fa      	ldrb	r2, [r7, #3]
 800827c:	4611      	mov	r1, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f7fa fbc1 	bl	8002a06 <HAL_PCD_SetAddress>
 8008284:	4603      	mov	r3, r0
 8008286:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008288:	7bfb      	ldrb	r3, [r7, #15]
 800828a:	4618      	mov	r0, r3
 800828c:	f000 f874 	bl	8008378 <USBD_Get_USB_Status>
 8008290:	4603      	mov	r3, r0
 8008292:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008294:	7bbb      	ldrb	r3, [r7, #14]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b086      	sub	sp, #24
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	603b      	str	r3, [r7, #0]
 80082aa:	460b      	mov	r3, r1
 80082ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80082bc:	7af9      	ldrb	r1, [r7, #11]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	f7fa fcda 	bl	8002c7a <HAL_PCD_EP_Transmit>
 80082c6:	4603      	mov	r3, r0
 80082c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 f853 	bl	8008378 <USBD_Get_USB_Status>
 80082d2:	4603      	mov	r3, r0
 80082d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3718      	adds	r7, #24
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	607a      	str	r2, [r7, #4]
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	460b      	mov	r3, r1
 80082ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80082fe:	7af9      	ldrb	r1, [r7, #11]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	f7fa fc56 	bl	8002bb4 <HAL_PCD_EP_Receive>
 8008308:	4603      	mov	r3, r0
 800830a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800830c:	7dfb      	ldrb	r3, [r7, #23]
 800830e:	4618      	mov	r0, r3
 8008310:	f000 f832 	bl	8008378 <USBD_Get_USB_Status>
 8008314:	4603      	mov	r3, r0
 8008316:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008318:	7dbb      	ldrb	r3, [r7, #22]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b082      	sub	sp, #8
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	460b      	mov	r3, r1
 800832c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008334:	78fa      	ldrb	r2, [r7, #3]
 8008336:	4611      	mov	r1, r2
 8008338:	4618      	mov	r0, r3
 800833a:	f7fa fc86 	bl	8002c4a <HAL_PCD_EP_GetRxCount>
 800833e:	4603      	mov	r3, r0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008350:	4b03      	ldr	r3, [pc, #12]	; (8008360 <USBD_static_malloc+0x18>)
}
 8008352:	4618      	mov	r0, r3
 8008354:	370c      	adds	r7, #12
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	20001e04 	.word	0x20001e04

08008364 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]

}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008386:	79fb      	ldrb	r3, [r7, #7]
 8008388:	2b03      	cmp	r3, #3
 800838a:	d817      	bhi.n	80083bc <USBD_Get_USB_Status+0x44>
 800838c:	a201      	add	r2, pc, #4	; (adr r2, 8008394 <USBD_Get_USB_Status+0x1c>)
 800838e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008392:	bf00      	nop
 8008394:	080083a5 	.word	0x080083a5
 8008398:	080083ab 	.word	0x080083ab
 800839c:	080083b1 	.word	0x080083b1
 80083a0:	080083b7 	.word	0x080083b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	73fb      	strb	r3, [r7, #15]
    break;
 80083a8:	e00b      	b.n	80083c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083aa:	2303      	movs	r3, #3
 80083ac:	73fb      	strb	r3, [r7, #15]
    break;
 80083ae:	e008      	b.n	80083c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083b0:	2301      	movs	r3, #1
 80083b2:	73fb      	strb	r3, [r7, #15]
    break;
 80083b4:	e005      	b.n	80083c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083b6:	2303      	movs	r3, #3
 80083b8:	73fb      	strb	r3, [r7, #15]
    break;
 80083ba:	e002      	b.n	80083c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80083bc:	2303      	movs	r3, #3
 80083be:	73fb      	strb	r3, [r7, #15]
    break;
 80083c0:	bf00      	nop
  }
  return usb_status;
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <__errno>:
 80083d0:	4b01      	ldr	r3, [pc, #4]	; (80083d8 <__errno+0x8>)
 80083d2:	6818      	ldr	r0, [r3, #0]
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	200000fc 	.word	0x200000fc

080083dc <__libc_init_array>:
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	4d0d      	ldr	r5, [pc, #52]	; (8008414 <__libc_init_array+0x38>)
 80083e0:	4c0d      	ldr	r4, [pc, #52]	; (8008418 <__libc_init_array+0x3c>)
 80083e2:	1b64      	subs	r4, r4, r5
 80083e4:	10a4      	asrs	r4, r4, #2
 80083e6:	2600      	movs	r6, #0
 80083e8:	42a6      	cmp	r6, r4
 80083ea:	d109      	bne.n	8008400 <__libc_init_array+0x24>
 80083ec:	4d0b      	ldr	r5, [pc, #44]	; (800841c <__libc_init_array+0x40>)
 80083ee:	4c0c      	ldr	r4, [pc, #48]	; (8008420 <__libc_init_array+0x44>)
 80083f0:	f002 ff18 	bl	800b224 <_init>
 80083f4:	1b64      	subs	r4, r4, r5
 80083f6:	10a4      	asrs	r4, r4, #2
 80083f8:	2600      	movs	r6, #0
 80083fa:	42a6      	cmp	r6, r4
 80083fc:	d105      	bne.n	800840a <__libc_init_array+0x2e>
 80083fe:	bd70      	pop	{r4, r5, r6, pc}
 8008400:	f855 3b04 	ldr.w	r3, [r5], #4
 8008404:	4798      	blx	r3
 8008406:	3601      	adds	r6, #1
 8008408:	e7ee      	b.n	80083e8 <__libc_init_array+0xc>
 800840a:	f855 3b04 	ldr.w	r3, [r5], #4
 800840e:	4798      	blx	r3
 8008410:	3601      	adds	r6, #1
 8008412:	e7f2      	b.n	80083fa <__libc_init_array+0x1e>
 8008414:	0800b6b4 	.word	0x0800b6b4
 8008418:	0800b6b4 	.word	0x0800b6b4
 800841c:	0800b6b4 	.word	0x0800b6b4
 8008420:	0800b6b8 	.word	0x0800b6b8

08008424 <memcpy>:
 8008424:	440a      	add	r2, r1
 8008426:	4291      	cmp	r1, r2
 8008428:	f100 33ff 	add.w	r3, r0, #4294967295
 800842c:	d100      	bne.n	8008430 <memcpy+0xc>
 800842e:	4770      	bx	lr
 8008430:	b510      	push	{r4, lr}
 8008432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800843a:	4291      	cmp	r1, r2
 800843c:	d1f9      	bne.n	8008432 <memcpy+0xe>
 800843e:	bd10      	pop	{r4, pc}

08008440 <memset>:
 8008440:	4402      	add	r2, r0
 8008442:	4603      	mov	r3, r0
 8008444:	4293      	cmp	r3, r2
 8008446:	d100      	bne.n	800844a <memset+0xa>
 8008448:	4770      	bx	lr
 800844a:	f803 1b01 	strb.w	r1, [r3], #1
 800844e:	e7f9      	b.n	8008444 <memset+0x4>

08008450 <__cvt>:
 8008450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008454:	ec55 4b10 	vmov	r4, r5, d0
 8008458:	2d00      	cmp	r5, #0
 800845a:	460e      	mov	r6, r1
 800845c:	4619      	mov	r1, r3
 800845e:	462b      	mov	r3, r5
 8008460:	bfbb      	ittet	lt
 8008462:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008466:	461d      	movlt	r5, r3
 8008468:	2300      	movge	r3, #0
 800846a:	232d      	movlt	r3, #45	; 0x2d
 800846c:	700b      	strb	r3, [r1, #0]
 800846e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008470:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008474:	4691      	mov	r9, r2
 8008476:	f023 0820 	bic.w	r8, r3, #32
 800847a:	bfbc      	itt	lt
 800847c:	4622      	movlt	r2, r4
 800847e:	4614      	movlt	r4, r2
 8008480:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008484:	d005      	beq.n	8008492 <__cvt+0x42>
 8008486:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800848a:	d100      	bne.n	800848e <__cvt+0x3e>
 800848c:	3601      	adds	r6, #1
 800848e:	2102      	movs	r1, #2
 8008490:	e000      	b.n	8008494 <__cvt+0x44>
 8008492:	2103      	movs	r1, #3
 8008494:	ab03      	add	r3, sp, #12
 8008496:	9301      	str	r3, [sp, #4]
 8008498:	ab02      	add	r3, sp, #8
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	ec45 4b10 	vmov	d0, r4, r5
 80084a0:	4653      	mov	r3, sl
 80084a2:	4632      	mov	r2, r6
 80084a4:	f000 fd00 	bl	8008ea8 <_dtoa_r>
 80084a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80084ac:	4607      	mov	r7, r0
 80084ae:	d102      	bne.n	80084b6 <__cvt+0x66>
 80084b0:	f019 0f01 	tst.w	r9, #1
 80084b4:	d022      	beq.n	80084fc <__cvt+0xac>
 80084b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80084ba:	eb07 0906 	add.w	r9, r7, r6
 80084be:	d110      	bne.n	80084e2 <__cvt+0x92>
 80084c0:	783b      	ldrb	r3, [r7, #0]
 80084c2:	2b30      	cmp	r3, #48	; 0x30
 80084c4:	d10a      	bne.n	80084dc <__cvt+0x8c>
 80084c6:	2200      	movs	r2, #0
 80084c8:	2300      	movs	r3, #0
 80084ca:	4620      	mov	r0, r4
 80084cc:	4629      	mov	r1, r5
 80084ce:	f7f8 fb0b 	bl	8000ae8 <__aeabi_dcmpeq>
 80084d2:	b918      	cbnz	r0, 80084dc <__cvt+0x8c>
 80084d4:	f1c6 0601 	rsb	r6, r6, #1
 80084d8:	f8ca 6000 	str.w	r6, [sl]
 80084dc:	f8da 3000 	ldr.w	r3, [sl]
 80084e0:	4499      	add	r9, r3
 80084e2:	2200      	movs	r2, #0
 80084e4:	2300      	movs	r3, #0
 80084e6:	4620      	mov	r0, r4
 80084e8:	4629      	mov	r1, r5
 80084ea:	f7f8 fafd 	bl	8000ae8 <__aeabi_dcmpeq>
 80084ee:	b108      	cbz	r0, 80084f4 <__cvt+0xa4>
 80084f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80084f4:	2230      	movs	r2, #48	; 0x30
 80084f6:	9b03      	ldr	r3, [sp, #12]
 80084f8:	454b      	cmp	r3, r9
 80084fa:	d307      	bcc.n	800850c <__cvt+0xbc>
 80084fc:	9b03      	ldr	r3, [sp, #12]
 80084fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008500:	1bdb      	subs	r3, r3, r7
 8008502:	4638      	mov	r0, r7
 8008504:	6013      	str	r3, [r2, #0]
 8008506:	b004      	add	sp, #16
 8008508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800850c:	1c59      	adds	r1, r3, #1
 800850e:	9103      	str	r1, [sp, #12]
 8008510:	701a      	strb	r2, [r3, #0]
 8008512:	e7f0      	b.n	80084f6 <__cvt+0xa6>

08008514 <__exponent>:
 8008514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008516:	4603      	mov	r3, r0
 8008518:	2900      	cmp	r1, #0
 800851a:	bfb8      	it	lt
 800851c:	4249      	neglt	r1, r1
 800851e:	f803 2b02 	strb.w	r2, [r3], #2
 8008522:	bfb4      	ite	lt
 8008524:	222d      	movlt	r2, #45	; 0x2d
 8008526:	222b      	movge	r2, #43	; 0x2b
 8008528:	2909      	cmp	r1, #9
 800852a:	7042      	strb	r2, [r0, #1]
 800852c:	dd2a      	ble.n	8008584 <__exponent+0x70>
 800852e:	f10d 0407 	add.w	r4, sp, #7
 8008532:	46a4      	mov	ip, r4
 8008534:	270a      	movs	r7, #10
 8008536:	46a6      	mov	lr, r4
 8008538:	460a      	mov	r2, r1
 800853a:	fb91 f6f7 	sdiv	r6, r1, r7
 800853e:	fb07 1516 	mls	r5, r7, r6, r1
 8008542:	3530      	adds	r5, #48	; 0x30
 8008544:	2a63      	cmp	r2, #99	; 0x63
 8008546:	f104 34ff 	add.w	r4, r4, #4294967295
 800854a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800854e:	4631      	mov	r1, r6
 8008550:	dcf1      	bgt.n	8008536 <__exponent+0x22>
 8008552:	3130      	adds	r1, #48	; 0x30
 8008554:	f1ae 0502 	sub.w	r5, lr, #2
 8008558:	f804 1c01 	strb.w	r1, [r4, #-1]
 800855c:	1c44      	adds	r4, r0, #1
 800855e:	4629      	mov	r1, r5
 8008560:	4561      	cmp	r1, ip
 8008562:	d30a      	bcc.n	800857a <__exponent+0x66>
 8008564:	f10d 0209 	add.w	r2, sp, #9
 8008568:	eba2 020e 	sub.w	r2, r2, lr
 800856c:	4565      	cmp	r5, ip
 800856e:	bf88      	it	hi
 8008570:	2200      	movhi	r2, #0
 8008572:	4413      	add	r3, r2
 8008574:	1a18      	subs	r0, r3, r0
 8008576:	b003      	add	sp, #12
 8008578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800857a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800857e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008582:	e7ed      	b.n	8008560 <__exponent+0x4c>
 8008584:	2330      	movs	r3, #48	; 0x30
 8008586:	3130      	adds	r1, #48	; 0x30
 8008588:	7083      	strb	r3, [r0, #2]
 800858a:	70c1      	strb	r1, [r0, #3]
 800858c:	1d03      	adds	r3, r0, #4
 800858e:	e7f1      	b.n	8008574 <__exponent+0x60>

08008590 <_printf_float>:
 8008590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	ed2d 8b02 	vpush	{d8}
 8008598:	b08d      	sub	sp, #52	; 0x34
 800859a:	460c      	mov	r4, r1
 800859c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80085a0:	4616      	mov	r6, r2
 80085a2:	461f      	mov	r7, r3
 80085a4:	4605      	mov	r5, r0
 80085a6:	f001 fa6d 	bl	8009a84 <_localeconv_r>
 80085aa:	f8d0 a000 	ldr.w	sl, [r0]
 80085ae:	4650      	mov	r0, sl
 80085b0:	f7f7 fe18 	bl	80001e4 <strlen>
 80085b4:	2300      	movs	r3, #0
 80085b6:	930a      	str	r3, [sp, #40]	; 0x28
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	9305      	str	r3, [sp, #20]
 80085bc:	f8d8 3000 	ldr.w	r3, [r8]
 80085c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80085c4:	3307      	adds	r3, #7
 80085c6:	f023 0307 	bic.w	r3, r3, #7
 80085ca:	f103 0208 	add.w	r2, r3, #8
 80085ce:	f8c8 2000 	str.w	r2, [r8]
 80085d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80085da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80085de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085e2:	9307      	str	r3, [sp, #28]
 80085e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80085e8:	ee08 0a10 	vmov	s16, r0
 80085ec:	4b9f      	ldr	r3, [pc, #636]	; (800886c <_printf_float+0x2dc>)
 80085ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085f2:	f04f 32ff 	mov.w	r2, #4294967295
 80085f6:	f7f8 faa9 	bl	8000b4c <__aeabi_dcmpun>
 80085fa:	bb88      	cbnz	r0, 8008660 <_printf_float+0xd0>
 80085fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008600:	4b9a      	ldr	r3, [pc, #616]	; (800886c <_printf_float+0x2dc>)
 8008602:	f04f 32ff 	mov.w	r2, #4294967295
 8008606:	f7f8 fa83 	bl	8000b10 <__aeabi_dcmple>
 800860a:	bb48      	cbnz	r0, 8008660 <_printf_float+0xd0>
 800860c:	2200      	movs	r2, #0
 800860e:	2300      	movs	r3, #0
 8008610:	4640      	mov	r0, r8
 8008612:	4649      	mov	r1, r9
 8008614:	f7f8 fa72 	bl	8000afc <__aeabi_dcmplt>
 8008618:	b110      	cbz	r0, 8008620 <_printf_float+0x90>
 800861a:	232d      	movs	r3, #45	; 0x2d
 800861c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008620:	4b93      	ldr	r3, [pc, #588]	; (8008870 <_printf_float+0x2e0>)
 8008622:	4894      	ldr	r0, [pc, #592]	; (8008874 <_printf_float+0x2e4>)
 8008624:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008628:	bf94      	ite	ls
 800862a:	4698      	movls	r8, r3
 800862c:	4680      	movhi	r8, r0
 800862e:	2303      	movs	r3, #3
 8008630:	6123      	str	r3, [r4, #16]
 8008632:	9b05      	ldr	r3, [sp, #20]
 8008634:	f023 0204 	bic.w	r2, r3, #4
 8008638:	6022      	str	r2, [r4, #0]
 800863a:	f04f 0900 	mov.w	r9, #0
 800863e:	9700      	str	r7, [sp, #0]
 8008640:	4633      	mov	r3, r6
 8008642:	aa0b      	add	r2, sp, #44	; 0x2c
 8008644:	4621      	mov	r1, r4
 8008646:	4628      	mov	r0, r5
 8008648:	f000 f9d8 	bl	80089fc <_printf_common>
 800864c:	3001      	adds	r0, #1
 800864e:	f040 8090 	bne.w	8008772 <_printf_float+0x1e2>
 8008652:	f04f 30ff 	mov.w	r0, #4294967295
 8008656:	b00d      	add	sp, #52	; 0x34
 8008658:	ecbd 8b02 	vpop	{d8}
 800865c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008660:	4642      	mov	r2, r8
 8008662:	464b      	mov	r3, r9
 8008664:	4640      	mov	r0, r8
 8008666:	4649      	mov	r1, r9
 8008668:	f7f8 fa70 	bl	8000b4c <__aeabi_dcmpun>
 800866c:	b140      	cbz	r0, 8008680 <_printf_float+0xf0>
 800866e:	464b      	mov	r3, r9
 8008670:	2b00      	cmp	r3, #0
 8008672:	bfbc      	itt	lt
 8008674:	232d      	movlt	r3, #45	; 0x2d
 8008676:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800867a:	487f      	ldr	r0, [pc, #508]	; (8008878 <_printf_float+0x2e8>)
 800867c:	4b7f      	ldr	r3, [pc, #508]	; (800887c <_printf_float+0x2ec>)
 800867e:	e7d1      	b.n	8008624 <_printf_float+0x94>
 8008680:	6863      	ldr	r3, [r4, #4]
 8008682:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008686:	9206      	str	r2, [sp, #24]
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	d13f      	bne.n	800870c <_printf_float+0x17c>
 800868c:	2306      	movs	r3, #6
 800868e:	6063      	str	r3, [r4, #4]
 8008690:	9b05      	ldr	r3, [sp, #20]
 8008692:	6861      	ldr	r1, [r4, #4]
 8008694:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008698:	2300      	movs	r3, #0
 800869a:	9303      	str	r3, [sp, #12]
 800869c:	ab0a      	add	r3, sp, #40	; 0x28
 800869e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80086a2:	ab09      	add	r3, sp, #36	; 0x24
 80086a4:	ec49 8b10 	vmov	d0, r8, r9
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	6022      	str	r2, [r4, #0]
 80086ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80086b0:	4628      	mov	r0, r5
 80086b2:	f7ff fecd 	bl	8008450 <__cvt>
 80086b6:	9b06      	ldr	r3, [sp, #24]
 80086b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086ba:	2b47      	cmp	r3, #71	; 0x47
 80086bc:	4680      	mov	r8, r0
 80086be:	d108      	bne.n	80086d2 <_printf_float+0x142>
 80086c0:	1cc8      	adds	r0, r1, #3
 80086c2:	db02      	blt.n	80086ca <_printf_float+0x13a>
 80086c4:	6863      	ldr	r3, [r4, #4]
 80086c6:	4299      	cmp	r1, r3
 80086c8:	dd41      	ble.n	800874e <_printf_float+0x1be>
 80086ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80086ce:	fa5f fb8b 	uxtb.w	fp, fp
 80086d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086d6:	d820      	bhi.n	800871a <_printf_float+0x18a>
 80086d8:	3901      	subs	r1, #1
 80086da:	465a      	mov	r2, fp
 80086dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086e0:	9109      	str	r1, [sp, #36]	; 0x24
 80086e2:	f7ff ff17 	bl	8008514 <__exponent>
 80086e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086e8:	1813      	adds	r3, r2, r0
 80086ea:	2a01      	cmp	r2, #1
 80086ec:	4681      	mov	r9, r0
 80086ee:	6123      	str	r3, [r4, #16]
 80086f0:	dc02      	bgt.n	80086f8 <_printf_float+0x168>
 80086f2:	6822      	ldr	r2, [r4, #0]
 80086f4:	07d2      	lsls	r2, r2, #31
 80086f6:	d501      	bpl.n	80086fc <_printf_float+0x16c>
 80086f8:	3301      	adds	r3, #1
 80086fa:	6123      	str	r3, [r4, #16]
 80086fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008700:	2b00      	cmp	r3, #0
 8008702:	d09c      	beq.n	800863e <_printf_float+0xae>
 8008704:	232d      	movs	r3, #45	; 0x2d
 8008706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800870a:	e798      	b.n	800863e <_printf_float+0xae>
 800870c:	9a06      	ldr	r2, [sp, #24]
 800870e:	2a47      	cmp	r2, #71	; 0x47
 8008710:	d1be      	bne.n	8008690 <_printf_float+0x100>
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1bc      	bne.n	8008690 <_printf_float+0x100>
 8008716:	2301      	movs	r3, #1
 8008718:	e7b9      	b.n	800868e <_printf_float+0xfe>
 800871a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800871e:	d118      	bne.n	8008752 <_printf_float+0x1c2>
 8008720:	2900      	cmp	r1, #0
 8008722:	6863      	ldr	r3, [r4, #4]
 8008724:	dd0b      	ble.n	800873e <_printf_float+0x1ae>
 8008726:	6121      	str	r1, [r4, #16]
 8008728:	b913      	cbnz	r3, 8008730 <_printf_float+0x1a0>
 800872a:	6822      	ldr	r2, [r4, #0]
 800872c:	07d0      	lsls	r0, r2, #31
 800872e:	d502      	bpl.n	8008736 <_printf_float+0x1a6>
 8008730:	3301      	adds	r3, #1
 8008732:	440b      	add	r3, r1
 8008734:	6123      	str	r3, [r4, #16]
 8008736:	65a1      	str	r1, [r4, #88]	; 0x58
 8008738:	f04f 0900 	mov.w	r9, #0
 800873c:	e7de      	b.n	80086fc <_printf_float+0x16c>
 800873e:	b913      	cbnz	r3, 8008746 <_printf_float+0x1b6>
 8008740:	6822      	ldr	r2, [r4, #0]
 8008742:	07d2      	lsls	r2, r2, #31
 8008744:	d501      	bpl.n	800874a <_printf_float+0x1ba>
 8008746:	3302      	adds	r3, #2
 8008748:	e7f4      	b.n	8008734 <_printf_float+0x1a4>
 800874a:	2301      	movs	r3, #1
 800874c:	e7f2      	b.n	8008734 <_printf_float+0x1a4>
 800874e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008754:	4299      	cmp	r1, r3
 8008756:	db05      	blt.n	8008764 <_printf_float+0x1d4>
 8008758:	6823      	ldr	r3, [r4, #0]
 800875a:	6121      	str	r1, [r4, #16]
 800875c:	07d8      	lsls	r0, r3, #31
 800875e:	d5ea      	bpl.n	8008736 <_printf_float+0x1a6>
 8008760:	1c4b      	adds	r3, r1, #1
 8008762:	e7e7      	b.n	8008734 <_printf_float+0x1a4>
 8008764:	2900      	cmp	r1, #0
 8008766:	bfd4      	ite	le
 8008768:	f1c1 0202 	rsble	r2, r1, #2
 800876c:	2201      	movgt	r2, #1
 800876e:	4413      	add	r3, r2
 8008770:	e7e0      	b.n	8008734 <_printf_float+0x1a4>
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	055a      	lsls	r2, r3, #21
 8008776:	d407      	bmi.n	8008788 <_printf_float+0x1f8>
 8008778:	6923      	ldr	r3, [r4, #16]
 800877a:	4642      	mov	r2, r8
 800877c:	4631      	mov	r1, r6
 800877e:	4628      	mov	r0, r5
 8008780:	47b8      	blx	r7
 8008782:	3001      	adds	r0, #1
 8008784:	d12c      	bne.n	80087e0 <_printf_float+0x250>
 8008786:	e764      	b.n	8008652 <_printf_float+0xc2>
 8008788:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800878c:	f240 80e0 	bls.w	8008950 <_printf_float+0x3c0>
 8008790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008794:	2200      	movs	r2, #0
 8008796:	2300      	movs	r3, #0
 8008798:	f7f8 f9a6 	bl	8000ae8 <__aeabi_dcmpeq>
 800879c:	2800      	cmp	r0, #0
 800879e:	d034      	beq.n	800880a <_printf_float+0x27a>
 80087a0:	4a37      	ldr	r2, [pc, #220]	; (8008880 <_printf_float+0x2f0>)
 80087a2:	2301      	movs	r3, #1
 80087a4:	4631      	mov	r1, r6
 80087a6:	4628      	mov	r0, r5
 80087a8:	47b8      	blx	r7
 80087aa:	3001      	adds	r0, #1
 80087ac:	f43f af51 	beq.w	8008652 <_printf_float+0xc2>
 80087b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087b4:	429a      	cmp	r2, r3
 80087b6:	db02      	blt.n	80087be <_printf_float+0x22e>
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	07d8      	lsls	r0, r3, #31
 80087bc:	d510      	bpl.n	80087e0 <_printf_float+0x250>
 80087be:	ee18 3a10 	vmov	r3, s16
 80087c2:	4652      	mov	r2, sl
 80087c4:	4631      	mov	r1, r6
 80087c6:	4628      	mov	r0, r5
 80087c8:	47b8      	blx	r7
 80087ca:	3001      	adds	r0, #1
 80087cc:	f43f af41 	beq.w	8008652 <_printf_float+0xc2>
 80087d0:	f04f 0800 	mov.w	r8, #0
 80087d4:	f104 091a 	add.w	r9, r4, #26
 80087d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087da:	3b01      	subs	r3, #1
 80087dc:	4543      	cmp	r3, r8
 80087de:	dc09      	bgt.n	80087f4 <_printf_float+0x264>
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	079b      	lsls	r3, r3, #30
 80087e4:	f100 8105 	bmi.w	80089f2 <_printf_float+0x462>
 80087e8:	68e0      	ldr	r0, [r4, #12]
 80087ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087ec:	4298      	cmp	r0, r3
 80087ee:	bfb8      	it	lt
 80087f0:	4618      	movlt	r0, r3
 80087f2:	e730      	b.n	8008656 <_printf_float+0xc6>
 80087f4:	2301      	movs	r3, #1
 80087f6:	464a      	mov	r2, r9
 80087f8:	4631      	mov	r1, r6
 80087fa:	4628      	mov	r0, r5
 80087fc:	47b8      	blx	r7
 80087fe:	3001      	adds	r0, #1
 8008800:	f43f af27 	beq.w	8008652 <_printf_float+0xc2>
 8008804:	f108 0801 	add.w	r8, r8, #1
 8008808:	e7e6      	b.n	80087d8 <_printf_float+0x248>
 800880a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800880c:	2b00      	cmp	r3, #0
 800880e:	dc39      	bgt.n	8008884 <_printf_float+0x2f4>
 8008810:	4a1b      	ldr	r2, [pc, #108]	; (8008880 <_printf_float+0x2f0>)
 8008812:	2301      	movs	r3, #1
 8008814:	4631      	mov	r1, r6
 8008816:	4628      	mov	r0, r5
 8008818:	47b8      	blx	r7
 800881a:	3001      	adds	r0, #1
 800881c:	f43f af19 	beq.w	8008652 <_printf_float+0xc2>
 8008820:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008824:	4313      	orrs	r3, r2
 8008826:	d102      	bne.n	800882e <_printf_float+0x29e>
 8008828:	6823      	ldr	r3, [r4, #0]
 800882a:	07d9      	lsls	r1, r3, #31
 800882c:	d5d8      	bpl.n	80087e0 <_printf_float+0x250>
 800882e:	ee18 3a10 	vmov	r3, s16
 8008832:	4652      	mov	r2, sl
 8008834:	4631      	mov	r1, r6
 8008836:	4628      	mov	r0, r5
 8008838:	47b8      	blx	r7
 800883a:	3001      	adds	r0, #1
 800883c:	f43f af09 	beq.w	8008652 <_printf_float+0xc2>
 8008840:	f04f 0900 	mov.w	r9, #0
 8008844:	f104 0a1a 	add.w	sl, r4, #26
 8008848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800884a:	425b      	negs	r3, r3
 800884c:	454b      	cmp	r3, r9
 800884e:	dc01      	bgt.n	8008854 <_printf_float+0x2c4>
 8008850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008852:	e792      	b.n	800877a <_printf_float+0x1ea>
 8008854:	2301      	movs	r3, #1
 8008856:	4652      	mov	r2, sl
 8008858:	4631      	mov	r1, r6
 800885a:	4628      	mov	r0, r5
 800885c:	47b8      	blx	r7
 800885e:	3001      	adds	r0, #1
 8008860:	f43f aef7 	beq.w	8008652 <_printf_float+0xc2>
 8008864:	f109 0901 	add.w	r9, r9, #1
 8008868:	e7ee      	b.n	8008848 <_printf_float+0x2b8>
 800886a:	bf00      	nop
 800886c:	7fefffff 	.word	0x7fefffff
 8008870:	0800b2d4 	.word	0x0800b2d4
 8008874:	0800b2d8 	.word	0x0800b2d8
 8008878:	0800b2e0 	.word	0x0800b2e0
 800887c:	0800b2dc 	.word	0x0800b2dc
 8008880:	0800b2e4 	.word	0x0800b2e4
 8008884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008886:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008888:	429a      	cmp	r2, r3
 800888a:	bfa8      	it	ge
 800888c:	461a      	movge	r2, r3
 800888e:	2a00      	cmp	r2, #0
 8008890:	4691      	mov	r9, r2
 8008892:	dc37      	bgt.n	8008904 <_printf_float+0x374>
 8008894:	f04f 0b00 	mov.w	fp, #0
 8008898:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800889c:	f104 021a 	add.w	r2, r4, #26
 80088a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088a2:	9305      	str	r3, [sp, #20]
 80088a4:	eba3 0309 	sub.w	r3, r3, r9
 80088a8:	455b      	cmp	r3, fp
 80088aa:	dc33      	bgt.n	8008914 <_printf_float+0x384>
 80088ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088b0:	429a      	cmp	r2, r3
 80088b2:	db3b      	blt.n	800892c <_printf_float+0x39c>
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	07da      	lsls	r2, r3, #31
 80088b8:	d438      	bmi.n	800892c <_printf_float+0x39c>
 80088ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088bc:	9a05      	ldr	r2, [sp, #20]
 80088be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088c0:	1a9a      	subs	r2, r3, r2
 80088c2:	eba3 0901 	sub.w	r9, r3, r1
 80088c6:	4591      	cmp	r9, r2
 80088c8:	bfa8      	it	ge
 80088ca:	4691      	movge	r9, r2
 80088cc:	f1b9 0f00 	cmp.w	r9, #0
 80088d0:	dc35      	bgt.n	800893e <_printf_float+0x3ae>
 80088d2:	f04f 0800 	mov.w	r8, #0
 80088d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088da:	f104 0a1a 	add.w	sl, r4, #26
 80088de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088e2:	1a9b      	subs	r3, r3, r2
 80088e4:	eba3 0309 	sub.w	r3, r3, r9
 80088e8:	4543      	cmp	r3, r8
 80088ea:	f77f af79 	ble.w	80087e0 <_printf_float+0x250>
 80088ee:	2301      	movs	r3, #1
 80088f0:	4652      	mov	r2, sl
 80088f2:	4631      	mov	r1, r6
 80088f4:	4628      	mov	r0, r5
 80088f6:	47b8      	blx	r7
 80088f8:	3001      	adds	r0, #1
 80088fa:	f43f aeaa 	beq.w	8008652 <_printf_float+0xc2>
 80088fe:	f108 0801 	add.w	r8, r8, #1
 8008902:	e7ec      	b.n	80088de <_printf_float+0x34e>
 8008904:	4613      	mov	r3, r2
 8008906:	4631      	mov	r1, r6
 8008908:	4642      	mov	r2, r8
 800890a:	4628      	mov	r0, r5
 800890c:	47b8      	blx	r7
 800890e:	3001      	adds	r0, #1
 8008910:	d1c0      	bne.n	8008894 <_printf_float+0x304>
 8008912:	e69e      	b.n	8008652 <_printf_float+0xc2>
 8008914:	2301      	movs	r3, #1
 8008916:	4631      	mov	r1, r6
 8008918:	4628      	mov	r0, r5
 800891a:	9205      	str	r2, [sp, #20]
 800891c:	47b8      	blx	r7
 800891e:	3001      	adds	r0, #1
 8008920:	f43f ae97 	beq.w	8008652 <_printf_float+0xc2>
 8008924:	9a05      	ldr	r2, [sp, #20]
 8008926:	f10b 0b01 	add.w	fp, fp, #1
 800892a:	e7b9      	b.n	80088a0 <_printf_float+0x310>
 800892c:	ee18 3a10 	vmov	r3, s16
 8008930:	4652      	mov	r2, sl
 8008932:	4631      	mov	r1, r6
 8008934:	4628      	mov	r0, r5
 8008936:	47b8      	blx	r7
 8008938:	3001      	adds	r0, #1
 800893a:	d1be      	bne.n	80088ba <_printf_float+0x32a>
 800893c:	e689      	b.n	8008652 <_printf_float+0xc2>
 800893e:	9a05      	ldr	r2, [sp, #20]
 8008940:	464b      	mov	r3, r9
 8008942:	4442      	add	r2, r8
 8008944:	4631      	mov	r1, r6
 8008946:	4628      	mov	r0, r5
 8008948:	47b8      	blx	r7
 800894a:	3001      	adds	r0, #1
 800894c:	d1c1      	bne.n	80088d2 <_printf_float+0x342>
 800894e:	e680      	b.n	8008652 <_printf_float+0xc2>
 8008950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008952:	2a01      	cmp	r2, #1
 8008954:	dc01      	bgt.n	800895a <_printf_float+0x3ca>
 8008956:	07db      	lsls	r3, r3, #31
 8008958:	d538      	bpl.n	80089cc <_printf_float+0x43c>
 800895a:	2301      	movs	r3, #1
 800895c:	4642      	mov	r2, r8
 800895e:	4631      	mov	r1, r6
 8008960:	4628      	mov	r0, r5
 8008962:	47b8      	blx	r7
 8008964:	3001      	adds	r0, #1
 8008966:	f43f ae74 	beq.w	8008652 <_printf_float+0xc2>
 800896a:	ee18 3a10 	vmov	r3, s16
 800896e:	4652      	mov	r2, sl
 8008970:	4631      	mov	r1, r6
 8008972:	4628      	mov	r0, r5
 8008974:	47b8      	blx	r7
 8008976:	3001      	adds	r0, #1
 8008978:	f43f ae6b 	beq.w	8008652 <_printf_float+0xc2>
 800897c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008980:	2200      	movs	r2, #0
 8008982:	2300      	movs	r3, #0
 8008984:	f7f8 f8b0 	bl	8000ae8 <__aeabi_dcmpeq>
 8008988:	b9d8      	cbnz	r0, 80089c2 <_printf_float+0x432>
 800898a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800898c:	f108 0201 	add.w	r2, r8, #1
 8008990:	3b01      	subs	r3, #1
 8008992:	4631      	mov	r1, r6
 8008994:	4628      	mov	r0, r5
 8008996:	47b8      	blx	r7
 8008998:	3001      	adds	r0, #1
 800899a:	d10e      	bne.n	80089ba <_printf_float+0x42a>
 800899c:	e659      	b.n	8008652 <_printf_float+0xc2>
 800899e:	2301      	movs	r3, #1
 80089a0:	4652      	mov	r2, sl
 80089a2:	4631      	mov	r1, r6
 80089a4:	4628      	mov	r0, r5
 80089a6:	47b8      	blx	r7
 80089a8:	3001      	adds	r0, #1
 80089aa:	f43f ae52 	beq.w	8008652 <_printf_float+0xc2>
 80089ae:	f108 0801 	add.w	r8, r8, #1
 80089b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b4:	3b01      	subs	r3, #1
 80089b6:	4543      	cmp	r3, r8
 80089b8:	dcf1      	bgt.n	800899e <_printf_float+0x40e>
 80089ba:	464b      	mov	r3, r9
 80089bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80089c0:	e6dc      	b.n	800877c <_printf_float+0x1ec>
 80089c2:	f04f 0800 	mov.w	r8, #0
 80089c6:	f104 0a1a 	add.w	sl, r4, #26
 80089ca:	e7f2      	b.n	80089b2 <_printf_float+0x422>
 80089cc:	2301      	movs	r3, #1
 80089ce:	4642      	mov	r2, r8
 80089d0:	e7df      	b.n	8008992 <_printf_float+0x402>
 80089d2:	2301      	movs	r3, #1
 80089d4:	464a      	mov	r2, r9
 80089d6:	4631      	mov	r1, r6
 80089d8:	4628      	mov	r0, r5
 80089da:	47b8      	blx	r7
 80089dc:	3001      	adds	r0, #1
 80089de:	f43f ae38 	beq.w	8008652 <_printf_float+0xc2>
 80089e2:	f108 0801 	add.w	r8, r8, #1
 80089e6:	68e3      	ldr	r3, [r4, #12]
 80089e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089ea:	1a5b      	subs	r3, r3, r1
 80089ec:	4543      	cmp	r3, r8
 80089ee:	dcf0      	bgt.n	80089d2 <_printf_float+0x442>
 80089f0:	e6fa      	b.n	80087e8 <_printf_float+0x258>
 80089f2:	f04f 0800 	mov.w	r8, #0
 80089f6:	f104 0919 	add.w	r9, r4, #25
 80089fa:	e7f4      	b.n	80089e6 <_printf_float+0x456>

080089fc <_printf_common>:
 80089fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a00:	4616      	mov	r6, r2
 8008a02:	4699      	mov	r9, r3
 8008a04:	688a      	ldr	r2, [r1, #8]
 8008a06:	690b      	ldr	r3, [r1, #16]
 8008a08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	bfb8      	it	lt
 8008a10:	4613      	movlt	r3, r2
 8008a12:	6033      	str	r3, [r6, #0]
 8008a14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a18:	4607      	mov	r7, r0
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	b10a      	cbz	r2, 8008a22 <_printf_common+0x26>
 8008a1e:	3301      	adds	r3, #1
 8008a20:	6033      	str	r3, [r6, #0]
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	0699      	lsls	r1, r3, #26
 8008a26:	bf42      	ittt	mi
 8008a28:	6833      	ldrmi	r3, [r6, #0]
 8008a2a:	3302      	addmi	r3, #2
 8008a2c:	6033      	strmi	r3, [r6, #0]
 8008a2e:	6825      	ldr	r5, [r4, #0]
 8008a30:	f015 0506 	ands.w	r5, r5, #6
 8008a34:	d106      	bne.n	8008a44 <_printf_common+0x48>
 8008a36:	f104 0a19 	add.w	sl, r4, #25
 8008a3a:	68e3      	ldr	r3, [r4, #12]
 8008a3c:	6832      	ldr	r2, [r6, #0]
 8008a3e:	1a9b      	subs	r3, r3, r2
 8008a40:	42ab      	cmp	r3, r5
 8008a42:	dc26      	bgt.n	8008a92 <_printf_common+0x96>
 8008a44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a48:	1e13      	subs	r3, r2, #0
 8008a4a:	6822      	ldr	r2, [r4, #0]
 8008a4c:	bf18      	it	ne
 8008a4e:	2301      	movne	r3, #1
 8008a50:	0692      	lsls	r2, r2, #26
 8008a52:	d42b      	bmi.n	8008aac <_printf_common+0xb0>
 8008a54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a58:	4649      	mov	r1, r9
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	47c0      	blx	r8
 8008a5e:	3001      	adds	r0, #1
 8008a60:	d01e      	beq.n	8008aa0 <_printf_common+0xa4>
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	68e5      	ldr	r5, [r4, #12]
 8008a66:	6832      	ldr	r2, [r6, #0]
 8008a68:	f003 0306 	and.w	r3, r3, #6
 8008a6c:	2b04      	cmp	r3, #4
 8008a6e:	bf08      	it	eq
 8008a70:	1aad      	subeq	r5, r5, r2
 8008a72:	68a3      	ldr	r3, [r4, #8]
 8008a74:	6922      	ldr	r2, [r4, #16]
 8008a76:	bf0c      	ite	eq
 8008a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a7c:	2500      	movne	r5, #0
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	bfc4      	itt	gt
 8008a82:	1a9b      	subgt	r3, r3, r2
 8008a84:	18ed      	addgt	r5, r5, r3
 8008a86:	2600      	movs	r6, #0
 8008a88:	341a      	adds	r4, #26
 8008a8a:	42b5      	cmp	r5, r6
 8008a8c:	d11a      	bne.n	8008ac4 <_printf_common+0xc8>
 8008a8e:	2000      	movs	r0, #0
 8008a90:	e008      	b.n	8008aa4 <_printf_common+0xa8>
 8008a92:	2301      	movs	r3, #1
 8008a94:	4652      	mov	r2, sl
 8008a96:	4649      	mov	r1, r9
 8008a98:	4638      	mov	r0, r7
 8008a9a:	47c0      	blx	r8
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	d103      	bne.n	8008aa8 <_printf_common+0xac>
 8008aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa8:	3501      	adds	r5, #1
 8008aaa:	e7c6      	b.n	8008a3a <_printf_common+0x3e>
 8008aac:	18e1      	adds	r1, r4, r3
 8008aae:	1c5a      	adds	r2, r3, #1
 8008ab0:	2030      	movs	r0, #48	; 0x30
 8008ab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ab6:	4422      	add	r2, r4
 8008ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008abc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ac0:	3302      	adds	r3, #2
 8008ac2:	e7c7      	b.n	8008a54 <_printf_common+0x58>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	4622      	mov	r2, r4
 8008ac8:	4649      	mov	r1, r9
 8008aca:	4638      	mov	r0, r7
 8008acc:	47c0      	blx	r8
 8008ace:	3001      	adds	r0, #1
 8008ad0:	d0e6      	beq.n	8008aa0 <_printf_common+0xa4>
 8008ad2:	3601      	adds	r6, #1
 8008ad4:	e7d9      	b.n	8008a8a <_printf_common+0x8e>
	...

08008ad8 <_printf_i>:
 8008ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008adc:	7e0f      	ldrb	r7, [r1, #24]
 8008ade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ae0:	2f78      	cmp	r7, #120	; 0x78
 8008ae2:	4691      	mov	r9, r2
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	469a      	mov	sl, r3
 8008aea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008aee:	d807      	bhi.n	8008b00 <_printf_i+0x28>
 8008af0:	2f62      	cmp	r7, #98	; 0x62
 8008af2:	d80a      	bhi.n	8008b0a <_printf_i+0x32>
 8008af4:	2f00      	cmp	r7, #0
 8008af6:	f000 80d8 	beq.w	8008caa <_printf_i+0x1d2>
 8008afa:	2f58      	cmp	r7, #88	; 0x58
 8008afc:	f000 80a3 	beq.w	8008c46 <_printf_i+0x16e>
 8008b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b08:	e03a      	b.n	8008b80 <_printf_i+0xa8>
 8008b0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b0e:	2b15      	cmp	r3, #21
 8008b10:	d8f6      	bhi.n	8008b00 <_printf_i+0x28>
 8008b12:	a101      	add	r1, pc, #4	; (adr r1, 8008b18 <_printf_i+0x40>)
 8008b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b18:	08008b71 	.word	0x08008b71
 8008b1c:	08008b85 	.word	0x08008b85
 8008b20:	08008b01 	.word	0x08008b01
 8008b24:	08008b01 	.word	0x08008b01
 8008b28:	08008b01 	.word	0x08008b01
 8008b2c:	08008b01 	.word	0x08008b01
 8008b30:	08008b85 	.word	0x08008b85
 8008b34:	08008b01 	.word	0x08008b01
 8008b38:	08008b01 	.word	0x08008b01
 8008b3c:	08008b01 	.word	0x08008b01
 8008b40:	08008b01 	.word	0x08008b01
 8008b44:	08008c91 	.word	0x08008c91
 8008b48:	08008bb5 	.word	0x08008bb5
 8008b4c:	08008c73 	.word	0x08008c73
 8008b50:	08008b01 	.word	0x08008b01
 8008b54:	08008b01 	.word	0x08008b01
 8008b58:	08008cb3 	.word	0x08008cb3
 8008b5c:	08008b01 	.word	0x08008b01
 8008b60:	08008bb5 	.word	0x08008bb5
 8008b64:	08008b01 	.word	0x08008b01
 8008b68:	08008b01 	.word	0x08008b01
 8008b6c:	08008c7b 	.word	0x08008c7b
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	1d1a      	adds	r2, r3, #4
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	602a      	str	r2, [r5, #0]
 8008b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b80:	2301      	movs	r3, #1
 8008b82:	e0a3      	b.n	8008ccc <_printf_i+0x1f4>
 8008b84:	6820      	ldr	r0, [r4, #0]
 8008b86:	6829      	ldr	r1, [r5, #0]
 8008b88:	0606      	lsls	r6, r0, #24
 8008b8a:	f101 0304 	add.w	r3, r1, #4
 8008b8e:	d50a      	bpl.n	8008ba6 <_printf_i+0xce>
 8008b90:	680e      	ldr	r6, [r1, #0]
 8008b92:	602b      	str	r3, [r5, #0]
 8008b94:	2e00      	cmp	r6, #0
 8008b96:	da03      	bge.n	8008ba0 <_printf_i+0xc8>
 8008b98:	232d      	movs	r3, #45	; 0x2d
 8008b9a:	4276      	negs	r6, r6
 8008b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ba0:	485e      	ldr	r0, [pc, #376]	; (8008d1c <_printf_i+0x244>)
 8008ba2:	230a      	movs	r3, #10
 8008ba4:	e019      	b.n	8008bda <_printf_i+0x102>
 8008ba6:	680e      	ldr	r6, [r1, #0]
 8008ba8:	602b      	str	r3, [r5, #0]
 8008baa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bae:	bf18      	it	ne
 8008bb0:	b236      	sxthne	r6, r6
 8008bb2:	e7ef      	b.n	8008b94 <_printf_i+0xbc>
 8008bb4:	682b      	ldr	r3, [r5, #0]
 8008bb6:	6820      	ldr	r0, [r4, #0]
 8008bb8:	1d19      	adds	r1, r3, #4
 8008bba:	6029      	str	r1, [r5, #0]
 8008bbc:	0601      	lsls	r1, r0, #24
 8008bbe:	d501      	bpl.n	8008bc4 <_printf_i+0xec>
 8008bc0:	681e      	ldr	r6, [r3, #0]
 8008bc2:	e002      	b.n	8008bca <_printf_i+0xf2>
 8008bc4:	0646      	lsls	r6, r0, #25
 8008bc6:	d5fb      	bpl.n	8008bc0 <_printf_i+0xe8>
 8008bc8:	881e      	ldrh	r6, [r3, #0]
 8008bca:	4854      	ldr	r0, [pc, #336]	; (8008d1c <_printf_i+0x244>)
 8008bcc:	2f6f      	cmp	r7, #111	; 0x6f
 8008bce:	bf0c      	ite	eq
 8008bd0:	2308      	moveq	r3, #8
 8008bd2:	230a      	movne	r3, #10
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bda:	6865      	ldr	r5, [r4, #4]
 8008bdc:	60a5      	str	r5, [r4, #8]
 8008bde:	2d00      	cmp	r5, #0
 8008be0:	bfa2      	ittt	ge
 8008be2:	6821      	ldrge	r1, [r4, #0]
 8008be4:	f021 0104 	bicge.w	r1, r1, #4
 8008be8:	6021      	strge	r1, [r4, #0]
 8008bea:	b90e      	cbnz	r6, 8008bf0 <_printf_i+0x118>
 8008bec:	2d00      	cmp	r5, #0
 8008bee:	d04d      	beq.n	8008c8c <_printf_i+0x1b4>
 8008bf0:	4615      	mov	r5, r2
 8008bf2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bf6:	fb03 6711 	mls	r7, r3, r1, r6
 8008bfa:	5dc7      	ldrb	r7, [r0, r7]
 8008bfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c00:	4637      	mov	r7, r6
 8008c02:	42bb      	cmp	r3, r7
 8008c04:	460e      	mov	r6, r1
 8008c06:	d9f4      	bls.n	8008bf2 <_printf_i+0x11a>
 8008c08:	2b08      	cmp	r3, #8
 8008c0a:	d10b      	bne.n	8008c24 <_printf_i+0x14c>
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	07de      	lsls	r6, r3, #31
 8008c10:	d508      	bpl.n	8008c24 <_printf_i+0x14c>
 8008c12:	6923      	ldr	r3, [r4, #16]
 8008c14:	6861      	ldr	r1, [r4, #4]
 8008c16:	4299      	cmp	r1, r3
 8008c18:	bfde      	ittt	le
 8008c1a:	2330      	movle	r3, #48	; 0x30
 8008c1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c24:	1b52      	subs	r2, r2, r5
 8008c26:	6122      	str	r2, [r4, #16]
 8008c28:	f8cd a000 	str.w	sl, [sp]
 8008c2c:	464b      	mov	r3, r9
 8008c2e:	aa03      	add	r2, sp, #12
 8008c30:	4621      	mov	r1, r4
 8008c32:	4640      	mov	r0, r8
 8008c34:	f7ff fee2 	bl	80089fc <_printf_common>
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d14c      	bne.n	8008cd6 <_printf_i+0x1fe>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	b004      	add	sp, #16
 8008c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c46:	4835      	ldr	r0, [pc, #212]	; (8008d1c <_printf_i+0x244>)
 8008c48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c4c:	6829      	ldr	r1, [r5, #0]
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c54:	6029      	str	r1, [r5, #0]
 8008c56:	061d      	lsls	r5, r3, #24
 8008c58:	d514      	bpl.n	8008c84 <_printf_i+0x1ac>
 8008c5a:	07df      	lsls	r7, r3, #31
 8008c5c:	bf44      	itt	mi
 8008c5e:	f043 0320 	orrmi.w	r3, r3, #32
 8008c62:	6023      	strmi	r3, [r4, #0]
 8008c64:	b91e      	cbnz	r6, 8008c6e <_printf_i+0x196>
 8008c66:	6823      	ldr	r3, [r4, #0]
 8008c68:	f023 0320 	bic.w	r3, r3, #32
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	2310      	movs	r3, #16
 8008c70:	e7b0      	b.n	8008bd4 <_printf_i+0xfc>
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	f043 0320 	orr.w	r3, r3, #32
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	2378      	movs	r3, #120	; 0x78
 8008c7c:	4828      	ldr	r0, [pc, #160]	; (8008d20 <_printf_i+0x248>)
 8008c7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c82:	e7e3      	b.n	8008c4c <_printf_i+0x174>
 8008c84:	0659      	lsls	r1, r3, #25
 8008c86:	bf48      	it	mi
 8008c88:	b2b6      	uxthmi	r6, r6
 8008c8a:	e7e6      	b.n	8008c5a <_printf_i+0x182>
 8008c8c:	4615      	mov	r5, r2
 8008c8e:	e7bb      	b.n	8008c08 <_printf_i+0x130>
 8008c90:	682b      	ldr	r3, [r5, #0]
 8008c92:	6826      	ldr	r6, [r4, #0]
 8008c94:	6961      	ldr	r1, [r4, #20]
 8008c96:	1d18      	adds	r0, r3, #4
 8008c98:	6028      	str	r0, [r5, #0]
 8008c9a:	0635      	lsls	r5, r6, #24
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	d501      	bpl.n	8008ca4 <_printf_i+0x1cc>
 8008ca0:	6019      	str	r1, [r3, #0]
 8008ca2:	e002      	b.n	8008caa <_printf_i+0x1d2>
 8008ca4:	0670      	lsls	r0, r6, #25
 8008ca6:	d5fb      	bpl.n	8008ca0 <_printf_i+0x1c8>
 8008ca8:	8019      	strh	r1, [r3, #0]
 8008caa:	2300      	movs	r3, #0
 8008cac:	6123      	str	r3, [r4, #16]
 8008cae:	4615      	mov	r5, r2
 8008cb0:	e7ba      	b.n	8008c28 <_printf_i+0x150>
 8008cb2:	682b      	ldr	r3, [r5, #0]
 8008cb4:	1d1a      	adds	r2, r3, #4
 8008cb6:	602a      	str	r2, [r5, #0]
 8008cb8:	681d      	ldr	r5, [r3, #0]
 8008cba:	6862      	ldr	r2, [r4, #4]
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	f7f7 fa9e 	bl	8000200 <memchr>
 8008cc4:	b108      	cbz	r0, 8008cca <_printf_i+0x1f2>
 8008cc6:	1b40      	subs	r0, r0, r5
 8008cc8:	6060      	str	r0, [r4, #4]
 8008cca:	6863      	ldr	r3, [r4, #4]
 8008ccc:	6123      	str	r3, [r4, #16]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cd4:	e7a8      	b.n	8008c28 <_printf_i+0x150>
 8008cd6:	6923      	ldr	r3, [r4, #16]
 8008cd8:	462a      	mov	r2, r5
 8008cda:	4649      	mov	r1, r9
 8008cdc:	4640      	mov	r0, r8
 8008cde:	47d0      	blx	sl
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	d0ab      	beq.n	8008c3c <_printf_i+0x164>
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	079b      	lsls	r3, r3, #30
 8008ce8:	d413      	bmi.n	8008d12 <_printf_i+0x23a>
 8008cea:	68e0      	ldr	r0, [r4, #12]
 8008cec:	9b03      	ldr	r3, [sp, #12]
 8008cee:	4298      	cmp	r0, r3
 8008cf0:	bfb8      	it	lt
 8008cf2:	4618      	movlt	r0, r3
 8008cf4:	e7a4      	b.n	8008c40 <_printf_i+0x168>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	4632      	mov	r2, r6
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	4640      	mov	r0, r8
 8008cfe:	47d0      	blx	sl
 8008d00:	3001      	adds	r0, #1
 8008d02:	d09b      	beq.n	8008c3c <_printf_i+0x164>
 8008d04:	3501      	adds	r5, #1
 8008d06:	68e3      	ldr	r3, [r4, #12]
 8008d08:	9903      	ldr	r1, [sp, #12]
 8008d0a:	1a5b      	subs	r3, r3, r1
 8008d0c:	42ab      	cmp	r3, r5
 8008d0e:	dcf2      	bgt.n	8008cf6 <_printf_i+0x21e>
 8008d10:	e7eb      	b.n	8008cea <_printf_i+0x212>
 8008d12:	2500      	movs	r5, #0
 8008d14:	f104 0619 	add.w	r6, r4, #25
 8008d18:	e7f5      	b.n	8008d06 <_printf_i+0x22e>
 8008d1a:	bf00      	nop
 8008d1c:	0800b2e6 	.word	0x0800b2e6
 8008d20:	0800b2f7 	.word	0x0800b2f7

08008d24 <sniprintf>:
 8008d24:	b40c      	push	{r2, r3}
 8008d26:	b530      	push	{r4, r5, lr}
 8008d28:	4b17      	ldr	r3, [pc, #92]	; (8008d88 <sniprintf+0x64>)
 8008d2a:	1e0c      	subs	r4, r1, #0
 8008d2c:	681d      	ldr	r5, [r3, #0]
 8008d2e:	b09d      	sub	sp, #116	; 0x74
 8008d30:	da08      	bge.n	8008d44 <sniprintf+0x20>
 8008d32:	238b      	movs	r3, #139	; 0x8b
 8008d34:	602b      	str	r3, [r5, #0]
 8008d36:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3a:	b01d      	add	sp, #116	; 0x74
 8008d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d40:	b002      	add	sp, #8
 8008d42:	4770      	bx	lr
 8008d44:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008d48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008d4c:	bf14      	ite	ne
 8008d4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008d52:	4623      	moveq	r3, r4
 8008d54:	9304      	str	r3, [sp, #16]
 8008d56:	9307      	str	r3, [sp, #28]
 8008d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d5c:	9002      	str	r0, [sp, #8]
 8008d5e:	9006      	str	r0, [sp, #24]
 8008d60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008d66:	ab21      	add	r3, sp, #132	; 0x84
 8008d68:	a902      	add	r1, sp, #8
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	9301      	str	r3, [sp, #4]
 8008d6e:	f001 fb6b 	bl	800a448 <_svfiprintf_r>
 8008d72:	1c43      	adds	r3, r0, #1
 8008d74:	bfbc      	itt	lt
 8008d76:	238b      	movlt	r3, #139	; 0x8b
 8008d78:	602b      	strlt	r3, [r5, #0]
 8008d7a:	2c00      	cmp	r4, #0
 8008d7c:	d0dd      	beq.n	8008d3a <sniprintf+0x16>
 8008d7e:	9b02      	ldr	r3, [sp, #8]
 8008d80:	2200      	movs	r2, #0
 8008d82:	701a      	strb	r2, [r3, #0]
 8008d84:	e7d9      	b.n	8008d3a <sniprintf+0x16>
 8008d86:	bf00      	nop
 8008d88:	200000fc 	.word	0x200000fc

08008d8c <quorem>:
 8008d8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d90:	6903      	ldr	r3, [r0, #16]
 8008d92:	690c      	ldr	r4, [r1, #16]
 8008d94:	42a3      	cmp	r3, r4
 8008d96:	4607      	mov	r7, r0
 8008d98:	f2c0 8081 	blt.w	8008e9e <quorem+0x112>
 8008d9c:	3c01      	subs	r4, #1
 8008d9e:	f101 0814 	add.w	r8, r1, #20
 8008da2:	f100 0514 	add.w	r5, r0, #20
 8008da6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008db0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008db4:	3301      	adds	r3, #1
 8008db6:	429a      	cmp	r2, r3
 8008db8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008dbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008dc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008dc4:	d331      	bcc.n	8008e2a <quorem+0x9e>
 8008dc6:	f04f 0e00 	mov.w	lr, #0
 8008dca:	4640      	mov	r0, r8
 8008dcc:	46ac      	mov	ip, r5
 8008dce:	46f2      	mov	sl, lr
 8008dd0:	f850 2b04 	ldr.w	r2, [r0], #4
 8008dd4:	b293      	uxth	r3, r2
 8008dd6:	fb06 e303 	mla	r3, r6, r3, lr
 8008dda:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	ebaa 0303 	sub.w	r3, sl, r3
 8008de4:	f8dc a000 	ldr.w	sl, [ip]
 8008de8:	0c12      	lsrs	r2, r2, #16
 8008dea:	fa13 f38a 	uxtah	r3, r3, sl
 8008dee:	fb06 e202 	mla	r2, r6, r2, lr
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	9b00      	ldr	r3, [sp, #0]
 8008df6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008dfa:	b292      	uxth	r2, r2
 8008dfc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008e00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e04:	f8bd 3000 	ldrh.w	r3, [sp]
 8008e08:	4581      	cmp	r9, r0
 8008e0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e0e:	f84c 3b04 	str.w	r3, [ip], #4
 8008e12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008e16:	d2db      	bcs.n	8008dd0 <quorem+0x44>
 8008e18:	f855 300b 	ldr.w	r3, [r5, fp]
 8008e1c:	b92b      	cbnz	r3, 8008e2a <quorem+0x9e>
 8008e1e:	9b01      	ldr	r3, [sp, #4]
 8008e20:	3b04      	subs	r3, #4
 8008e22:	429d      	cmp	r5, r3
 8008e24:	461a      	mov	r2, r3
 8008e26:	d32e      	bcc.n	8008e86 <quorem+0xfa>
 8008e28:	613c      	str	r4, [r7, #16]
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	f001 f8b8 	bl	8009fa0 <__mcmp>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	db24      	blt.n	8008e7e <quorem+0xf2>
 8008e34:	3601      	adds	r6, #1
 8008e36:	4628      	mov	r0, r5
 8008e38:	f04f 0c00 	mov.w	ip, #0
 8008e3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e40:	f8d0 e000 	ldr.w	lr, [r0]
 8008e44:	b293      	uxth	r3, r2
 8008e46:	ebac 0303 	sub.w	r3, ip, r3
 8008e4a:	0c12      	lsrs	r2, r2, #16
 8008e4c:	fa13 f38e 	uxtah	r3, r3, lr
 8008e50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008e54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e5e:	45c1      	cmp	r9, r8
 8008e60:	f840 3b04 	str.w	r3, [r0], #4
 8008e64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008e68:	d2e8      	bcs.n	8008e3c <quorem+0xb0>
 8008e6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e72:	b922      	cbnz	r2, 8008e7e <quorem+0xf2>
 8008e74:	3b04      	subs	r3, #4
 8008e76:	429d      	cmp	r5, r3
 8008e78:	461a      	mov	r2, r3
 8008e7a:	d30a      	bcc.n	8008e92 <quorem+0x106>
 8008e7c:	613c      	str	r4, [r7, #16]
 8008e7e:	4630      	mov	r0, r6
 8008e80:	b003      	add	sp, #12
 8008e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e86:	6812      	ldr	r2, [r2, #0]
 8008e88:	3b04      	subs	r3, #4
 8008e8a:	2a00      	cmp	r2, #0
 8008e8c:	d1cc      	bne.n	8008e28 <quorem+0x9c>
 8008e8e:	3c01      	subs	r4, #1
 8008e90:	e7c7      	b.n	8008e22 <quorem+0x96>
 8008e92:	6812      	ldr	r2, [r2, #0]
 8008e94:	3b04      	subs	r3, #4
 8008e96:	2a00      	cmp	r2, #0
 8008e98:	d1f0      	bne.n	8008e7c <quorem+0xf0>
 8008e9a:	3c01      	subs	r4, #1
 8008e9c:	e7eb      	b.n	8008e76 <quorem+0xea>
 8008e9e:	2000      	movs	r0, #0
 8008ea0:	e7ee      	b.n	8008e80 <quorem+0xf4>
 8008ea2:	0000      	movs	r0, r0
 8008ea4:	0000      	movs	r0, r0
	...

08008ea8 <_dtoa_r>:
 8008ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eac:	ed2d 8b04 	vpush	{d8-d9}
 8008eb0:	ec57 6b10 	vmov	r6, r7, d0
 8008eb4:	b093      	sub	sp, #76	; 0x4c
 8008eb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008eb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ebc:	9106      	str	r1, [sp, #24]
 8008ebe:	ee10 aa10 	vmov	sl, s0
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ec6:	930c      	str	r3, [sp, #48]	; 0x30
 8008ec8:	46bb      	mov	fp, r7
 8008eca:	b975      	cbnz	r5, 8008eea <_dtoa_r+0x42>
 8008ecc:	2010      	movs	r0, #16
 8008ece:	f000 fddd 	bl	8009a8c <malloc>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	6260      	str	r0, [r4, #36]	; 0x24
 8008ed6:	b920      	cbnz	r0, 8008ee2 <_dtoa_r+0x3a>
 8008ed8:	4ba7      	ldr	r3, [pc, #668]	; (8009178 <_dtoa_r+0x2d0>)
 8008eda:	21ea      	movs	r1, #234	; 0xea
 8008edc:	48a7      	ldr	r0, [pc, #668]	; (800917c <_dtoa_r+0x2d4>)
 8008ede:	f001 fbc3 	bl	800a668 <__assert_func>
 8008ee2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ee6:	6005      	str	r5, [r0, #0]
 8008ee8:	60c5      	str	r5, [r0, #12]
 8008eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eec:	6819      	ldr	r1, [r3, #0]
 8008eee:	b151      	cbz	r1, 8008f06 <_dtoa_r+0x5e>
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	604a      	str	r2, [r1, #4]
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	4093      	lsls	r3, r2
 8008ef8:	608b      	str	r3, [r1, #8]
 8008efa:	4620      	mov	r0, r4
 8008efc:	f000 fe0e 	bl	8009b1c <_Bfree>
 8008f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f02:	2200      	movs	r2, #0
 8008f04:	601a      	str	r2, [r3, #0]
 8008f06:	1e3b      	subs	r3, r7, #0
 8008f08:	bfaa      	itet	ge
 8008f0a:	2300      	movge	r3, #0
 8008f0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008f10:	f8c8 3000 	strge.w	r3, [r8]
 8008f14:	4b9a      	ldr	r3, [pc, #616]	; (8009180 <_dtoa_r+0x2d8>)
 8008f16:	bfbc      	itt	lt
 8008f18:	2201      	movlt	r2, #1
 8008f1a:	f8c8 2000 	strlt.w	r2, [r8]
 8008f1e:	ea33 030b 	bics.w	r3, r3, fp
 8008f22:	d11b      	bne.n	8008f5c <_dtoa_r+0xb4>
 8008f24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f26:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f2a:	6013      	str	r3, [r2, #0]
 8008f2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f30:	4333      	orrs	r3, r6
 8008f32:	f000 8592 	beq.w	8009a5a <_dtoa_r+0xbb2>
 8008f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f38:	b963      	cbnz	r3, 8008f54 <_dtoa_r+0xac>
 8008f3a:	4b92      	ldr	r3, [pc, #584]	; (8009184 <_dtoa_r+0x2dc>)
 8008f3c:	e022      	b.n	8008f84 <_dtoa_r+0xdc>
 8008f3e:	4b92      	ldr	r3, [pc, #584]	; (8009188 <_dtoa_r+0x2e0>)
 8008f40:	9301      	str	r3, [sp, #4]
 8008f42:	3308      	adds	r3, #8
 8008f44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f46:	6013      	str	r3, [r2, #0]
 8008f48:	9801      	ldr	r0, [sp, #4]
 8008f4a:	b013      	add	sp, #76	; 0x4c
 8008f4c:	ecbd 8b04 	vpop	{d8-d9}
 8008f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f54:	4b8b      	ldr	r3, [pc, #556]	; (8009184 <_dtoa_r+0x2dc>)
 8008f56:	9301      	str	r3, [sp, #4]
 8008f58:	3303      	adds	r3, #3
 8008f5a:	e7f3      	b.n	8008f44 <_dtoa_r+0x9c>
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2300      	movs	r3, #0
 8008f60:	4650      	mov	r0, sl
 8008f62:	4659      	mov	r1, fp
 8008f64:	f7f7 fdc0 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f68:	ec4b ab19 	vmov	d9, sl, fp
 8008f6c:	4680      	mov	r8, r0
 8008f6e:	b158      	cbz	r0, 8008f88 <_dtoa_r+0xe0>
 8008f70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f72:	2301      	movs	r3, #1
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 856b 	beq.w	8009a54 <_dtoa_r+0xbac>
 8008f7e:	4883      	ldr	r0, [pc, #524]	; (800918c <_dtoa_r+0x2e4>)
 8008f80:	6018      	str	r0, [r3, #0]
 8008f82:	1e43      	subs	r3, r0, #1
 8008f84:	9301      	str	r3, [sp, #4]
 8008f86:	e7df      	b.n	8008f48 <_dtoa_r+0xa0>
 8008f88:	ec4b ab10 	vmov	d0, sl, fp
 8008f8c:	aa10      	add	r2, sp, #64	; 0x40
 8008f8e:	a911      	add	r1, sp, #68	; 0x44
 8008f90:	4620      	mov	r0, r4
 8008f92:	f001 f8ab 	bl	800a0ec <__d2b>
 8008f96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008f9a:	ee08 0a10 	vmov	s16, r0
 8008f9e:	2d00      	cmp	r5, #0
 8008fa0:	f000 8084 	beq.w	80090ac <_dtoa_r+0x204>
 8008fa4:	ee19 3a90 	vmov	r3, s19
 8008fa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008fb0:	4656      	mov	r6, sl
 8008fb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008fb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008fba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008fbe:	4b74      	ldr	r3, [pc, #464]	; (8009190 <_dtoa_r+0x2e8>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	4639      	mov	r1, r7
 8008fc6:	f7f7 f96f 	bl	80002a8 <__aeabi_dsub>
 8008fca:	a365      	add	r3, pc, #404	; (adr r3, 8009160 <_dtoa_r+0x2b8>)
 8008fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd0:	f7f7 fb22 	bl	8000618 <__aeabi_dmul>
 8008fd4:	a364      	add	r3, pc, #400	; (adr r3, 8009168 <_dtoa_r+0x2c0>)
 8008fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fda:	f7f7 f967 	bl	80002ac <__adddf3>
 8008fde:	4606      	mov	r6, r0
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	460f      	mov	r7, r1
 8008fe4:	f7f7 faae 	bl	8000544 <__aeabi_i2d>
 8008fe8:	a361      	add	r3, pc, #388	; (adr r3, 8009170 <_dtoa_r+0x2c8>)
 8008fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fee:	f7f7 fb13 	bl	8000618 <__aeabi_dmul>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	4639      	mov	r1, r7
 8008ffa:	f7f7 f957 	bl	80002ac <__adddf3>
 8008ffe:	4606      	mov	r6, r0
 8009000:	460f      	mov	r7, r1
 8009002:	f7f7 fdb9 	bl	8000b78 <__aeabi_d2iz>
 8009006:	2200      	movs	r2, #0
 8009008:	9000      	str	r0, [sp, #0]
 800900a:	2300      	movs	r3, #0
 800900c:	4630      	mov	r0, r6
 800900e:	4639      	mov	r1, r7
 8009010:	f7f7 fd74 	bl	8000afc <__aeabi_dcmplt>
 8009014:	b150      	cbz	r0, 800902c <_dtoa_r+0x184>
 8009016:	9800      	ldr	r0, [sp, #0]
 8009018:	f7f7 fa94 	bl	8000544 <__aeabi_i2d>
 800901c:	4632      	mov	r2, r6
 800901e:	463b      	mov	r3, r7
 8009020:	f7f7 fd62 	bl	8000ae8 <__aeabi_dcmpeq>
 8009024:	b910      	cbnz	r0, 800902c <_dtoa_r+0x184>
 8009026:	9b00      	ldr	r3, [sp, #0]
 8009028:	3b01      	subs	r3, #1
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	9b00      	ldr	r3, [sp, #0]
 800902e:	2b16      	cmp	r3, #22
 8009030:	d85a      	bhi.n	80090e8 <_dtoa_r+0x240>
 8009032:	9a00      	ldr	r2, [sp, #0]
 8009034:	4b57      	ldr	r3, [pc, #348]	; (8009194 <_dtoa_r+0x2ec>)
 8009036:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800903a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903e:	ec51 0b19 	vmov	r0, r1, d9
 8009042:	f7f7 fd5b 	bl	8000afc <__aeabi_dcmplt>
 8009046:	2800      	cmp	r0, #0
 8009048:	d050      	beq.n	80090ec <_dtoa_r+0x244>
 800904a:	9b00      	ldr	r3, [sp, #0]
 800904c:	3b01      	subs	r3, #1
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	2300      	movs	r3, #0
 8009052:	930b      	str	r3, [sp, #44]	; 0x2c
 8009054:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009056:	1b5d      	subs	r5, r3, r5
 8009058:	1e6b      	subs	r3, r5, #1
 800905a:	9305      	str	r3, [sp, #20]
 800905c:	bf45      	ittet	mi
 800905e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009062:	9304      	strmi	r3, [sp, #16]
 8009064:	2300      	movpl	r3, #0
 8009066:	2300      	movmi	r3, #0
 8009068:	bf4c      	ite	mi
 800906a:	9305      	strmi	r3, [sp, #20]
 800906c:	9304      	strpl	r3, [sp, #16]
 800906e:	9b00      	ldr	r3, [sp, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	db3d      	blt.n	80090f0 <_dtoa_r+0x248>
 8009074:	9b05      	ldr	r3, [sp, #20]
 8009076:	9a00      	ldr	r2, [sp, #0]
 8009078:	920a      	str	r2, [sp, #40]	; 0x28
 800907a:	4413      	add	r3, r2
 800907c:	9305      	str	r3, [sp, #20]
 800907e:	2300      	movs	r3, #0
 8009080:	9307      	str	r3, [sp, #28]
 8009082:	9b06      	ldr	r3, [sp, #24]
 8009084:	2b09      	cmp	r3, #9
 8009086:	f200 8089 	bhi.w	800919c <_dtoa_r+0x2f4>
 800908a:	2b05      	cmp	r3, #5
 800908c:	bfc4      	itt	gt
 800908e:	3b04      	subgt	r3, #4
 8009090:	9306      	strgt	r3, [sp, #24]
 8009092:	9b06      	ldr	r3, [sp, #24]
 8009094:	f1a3 0302 	sub.w	r3, r3, #2
 8009098:	bfcc      	ite	gt
 800909a:	2500      	movgt	r5, #0
 800909c:	2501      	movle	r5, #1
 800909e:	2b03      	cmp	r3, #3
 80090a0:	f200 8087 	bhi.w	80091b2 <_dtoa_r+0x30a>
 80090a4:	e8df f003 	tbb	[pc, r3]
 80090a8:	59383a2d 	.word	0x59383a2d
 80090ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80090b0:	441d      	add	r5, r3
 80090b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80090b6:	2b20      	cmp	r3, #32
 80090b8:	bfc1      	itttt	gt
 80090ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80090be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80090c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80090c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80090ca:	bfda      	itte	le
 80090cc:	f1c3 0320 	rsble	r3, r3, #32
 80090d0:	fa06 f003 	lslle.w	r0, r6, r3
 80090d4:	4318      	orrgt	r0, r3
 80090d6:	f7f7 fa25 	bl	8000524 <__aeabi_ui2d>
 80090da:	2301      	movs	r3, #1
 80090dc:	4606      	mov	r6, r0
 80090de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80090e2:	3d01      	subs	r5, #1
 80090e4:	930e      	str	r3, [sp, #56]	; 0x38
 80090e6:	e76a      	b.n	8008fbe <_dtoa_r+0x116>
 80090e8:	2301      	movs	r3, #1
 80090ea:	e7b2      	b.n	8009052 <_dtoa_r+0x1aa>
 80090ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80090ee:	e7b1      	b.n	8009054 <_dtoa_r+0x1ac>
 80090f0:	9b04      	ldr	r3, [sp, #16]
 80090f2:	9a00      	ldr	r2, [sp, #0]
 80090f4:	1a9b      	subs	r3, r3, r2
 80090f6:	9304      	str	r3, [sp, #16]
 80090f8:	4253      	negs	r3, r2
 80090fa:	9307      	str	r3, [sp, #28]
 80090fc:	2300      	movs	r3, #0
 80090fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009100:	e7bf      	b.n	8009082 <_dtoa_r+0x1da>
 8009102:	2300      	movs	r3, #0
 8009104:	9308      	str	r3, [sp, #32]
 8009106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009108:	2b00      	cmp	r3, #0
 800910a:	dc55      	bgt.n	80091b8 <_dtoa_r+0x310>
 800910c:	2301      	movs	r3, #1
 800910e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009112:	461a      	mov	r2, r3
 8009114:	9209      	str	r2, [sp, #36]	; 0x24
 8009116:	e00c      	b.n	8009132 <_dtoa_r+0x28a>
 8009118:	2301      	movs	r3, #1
 800911a:	e7f3      	b.n	8009104 <_dtoa_r+0x25c>
 800911c:	2300      	movs	r3, #0
 800911e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009120:	9308      	str	r3, [sp, #32]
 8009122:	9b00      	ldr	r3, [sp, #0]
 8009124:	4413      	add	r3, r2
 8009126:	9302      	str	r3, [sp, #8]
 8009128:	3301      	adds	r3, #1
 800912a:	2b01      	cmp	r3, #1
 800912c:	9303      	str	r3, [sp, #12]
 800912e:	bfb8      	it	lt
 8009130:	2301      	movlt	r3, #1
 8009132:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009134:	2200      	movs	r2, #0
 8009136:	6042      	str	r2, [r0, #4]
 8009138:	2204      	movs	r2, #4
 800913a:	f102 0614 	add.w	r6, r2, #20
 800913e:	429e      	cmp	r6, r3
 8009140:	6841      	ldr	r1, [r0, #4]
 8009142:	d93d      	bls.n	80091c0 <_dtoa_r+0x318>
 8009144:	4620      	mov	r0, r4
 8009146:	f000 fca9 	bl	8009a9c <_Balloc>
 800914a:	9001      	str	r0, [sp, #4]
 800914c:	2800      	cmp	r0, #0
 800914e:	d13b      	bne.n	80091c8 <_dtoa_r+0x320>
 8009150:	4b11      	ldr	r3, [pc, #68]	; (8009198 <_dtoa_r+0x2f0>)
 8009152:	4602      	mov	r2, r0
 8009154:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009158:	e6c0      	b.n	8008edc <_dtoa_r+0x34>
 800915a:	2301      	movs	r3, #1
 800915c:	e7df      	b.n	800911e <_dtoa_r+0x276>
 800915e:	bf00      	nop
 8009160:	636f4361 	.word	0x636f4361
 8009164:	3fd287a7 	.word	0x3fd287a7
 8009168:	8b60c8b3 	.word	0x8b60c8b3
 800916c:	3fc68a28 	.word	0x3fc68a28
 8009170:	509f79fb 	.word	0x509f79fb
 8009174:	3fd34413 	.word	0x3fd34413
 8009178:	0800b315 	.word	0x0800b315
 800917c:	0800b32c 	.word	0x0800b32c
 8009180:	7ff00000 	.word	0x7ff00000
 8009184:	0800b311 	.word	0x0800b311
 8009188:	0800b308 	.word	0x0800b308
 800918c:	0800b2e5 	.word	0x0800b2e5
 8009190:	3ff80000 	.word	0x3ff80000
 8009194:	0800b420 	.word	0x0800b420
 8009198:	0800b387 	.word	0x0800b387
 800919c:	2501      	movs	r5, #1
 800919e:	2300      	movs	r3, #0
 80091a0:	9306      	str	r3, [sp, #24]
 80091a2:	9508      	str	r5, [sp, #32]
 80091a4:	f04f 33ff 	mov.w	r3, #4294967295
 80091a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80091ac:	2200      	movs	r2, #0
 80091ae:	2312      	movs	r3, #18
 80091b0:	e7b0      	b.n	8009114 <_dtoa_r+0x26c>
 80091b2:	2301      	movs	r3, #1
 80091b4:	9308      	str	r3, [sp, #32]
 80091b6:	e7f5      	b.n	80091a4 <_dtoa_r+0x2fc>
 80091b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80091be:	e7b8      	b.n	8009132 <_dtoa_r+0x28a>
 80091c0:	3101      	adds	r1, #1
 80091c2:	6041      	str	r1, [r0, #4]
 80091c4:	0052      	lsls	r2, r2, #1
 80091c6:	e7b8      	b.n	800913a <_dtoa_r+0x292>
 80091c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091ca:	9a01      	ldr	r2, [sp, #4]
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	9b03      	ldr	r3, [sp, #12]
 80091d0:	2b0e      	cmp	r3, #14
 80091d2:	f200 809d 	bhi.w	8009310 <_dtoa_r+0x468>
 80091d6:	2d00      	cmp	r5, #0
 80091d8:	f000 809a 	beq.w	8009310 <_dtoa_r+0x468>
 80091dc:	9b00      	ldr	r3, [sp, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	dd32      	ble.n	8009248 <_dtoa_r+0x3a0>
 80091e2:	4ab7      	ldr	r2, [pc, #732]	; (80094c0 <_dtoa_r+0x618>)
 80091e4:	f003 030f 	and.w	r3, r3, #15
 80091e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80091ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091f0:	9b00      	ldr	r3, [sp, #0]
 80091f2:	05d8      	lsls	r0, r3, #23
 80091f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80091f8:	d516      	bpl.n	8009228 <_dtoa_r+0x380>
 80091fa:	4bb2      	ldr	r3, [pc, #712]	; (80094c4 <_dtoa_r+0x61c>)
 80091fc:	ec51 0b19 	vmov	r0, r1, d9
 8009200:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009204:	f7f7 fb32 	bl	800086c <__aeabi_ddiv>
 8009208:	f007 070f 	and.w	r7, r7, #15
 800920c:	4682      	mov	sl, r0
 800920e:	468b      	mov	fp, r1
 8009210:	2503      	movs	r5, #3
 8009212:	4eac      	ldr	r6, [pc, #688]	; (80094c4 <_dtoa_r+0x61c>)
 8009214:	b957      	cbnz	r7, 800922c <_dtoa_r+0x384>
 8009216:	4642      	mov	r2, r8
 8009218:	464b      	mov	r3, r9
 800921a:	4650      	mov	r0, sl
 800921c:	4659      	mov	r1, fp
 800921e:	f7f7 fb25 	bl	800086c <__aeabi_ddiv>
 8009222:	4682      	mov	sl, r0
 8009224:	468b      	mov	fp, r1
 8009226:	e028      	b.n	800927a <_dtoa_r+0x3d2>
 8009228:	2502      	movs	r5, #2
 800922a:	e7f2      	b.n	8009212 <_dtoa_r+0x36a>
 800922c:	07f9      	lsls	r1, r7, #31
 800922e:	d508      	bpl.n	8009242 <_dtoa_r+0x39a>
 8009230:	4640      	mov	r0, r8
 8009232:	4649      	mov	r1, r9
 8009234:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009238:	f7f7 f9ee 	bl	8000618 <__aeabi_dmul>
 800923c:	3501      	adds	r5, #1
 800923e:	4680      	mov	r8, r0
 8009240:	4689      	mov	r9, r1
 8009242:	107f      	asrs	r7, r7, #1
 8009244:	3608      	adds	r6, #8
 8009246:	e7e5      	b.n	8009214 <_dtoa_r+0x36c>
 8009248:	f000 809b 	beq.w	8009382 <_dtoa_r+0x4da>
 800924c:	9b00      	ldr	r3, [sp, #0]
 800924e:	4f9d      	ldr	r7, [pc, #628]	; (80094c4 <_dtoa_r+0x61c>)
 8009250:	425e      	negs	r6, r3
 8009252:	4b9b      	ldr	r3, [pc, #620]	; (80094c0 <_dtoa_r+0x618>)
 8009254:	f006 020f 	and.w	r2, r6, #15
 8009258:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009260:	ec51 0b19 	vmov	r0, r1, d9
 8009264:	f7f7 f9d8 	bl	8000618 <__aeabi_dmul>
 8009268:	1136      	asrs	r6, r6, #4
 800926a:	4682      	mov	sl, r0
 800926c:	468b      	mov	fp, r1
 800926e:	2300      	movs	r3, #0
 8009270:	2502      	movs	r5, #2
 8009272:	2e00      	cmp	r6, #0
 8009274:	d17a      	bne.n	800936c <_dtoa_r+0x4c4>
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1d3      	bne.n	8009222 <_dtoa_r+0x37a>
 800927a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 8082 	beq.w	8009386 <_dtoa_r+0x4de>
 8009282:	4b91      	ldr	r3, [pc, #580]	; (80094c8 <_dtoa_r+0x620>)
 8009284:	2200      	movs	r2, #0
 8009286:	4650      	mov	r0, sl
 8009288:	4659      	mov	r1, fp
 800928a:	f7f7 fc37 	bl	8000afc <__aeabi_dcmplt>
 800928e:	2800      	cmp	r0, #0
 8009290:	d079      	beq.n	8009386 <_dtoa_r+0x4de>
 8009292:	9b03      	ldr	r3, [sp, #12]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d076      	beq.n	8009386 <_dtoa_r+0x4de>
 8009298:	9b02      	ldr	r3, [sp, #8]
 800929a:	2b00      	cmp	r3, #0
 800929c:	dd36      	ble.n	800930c <_dtoa_r+0x464>
 800929e:	9b00      	ldr	r3, [sp, #0]
 80092a0:	4650      	mov	r0, sl
 80092a2:	4659      	mov	r1, fp
 80092a4:	1e5f      	subs	r7, r3, #1
 80092a6:	2200      	movs	r2, #0
 80092a8:	4b88      	ldr	r3, [pc, #544]	; (80094cc <_dtoa_r+0x624>)
 80092aa:	f7f7 f9b5 	bl	8000618 <__aeabi_dmul>
 80092ae:	9e02      	ldr	r6, [sp, #8]
 80092b0:	4682      	mov	sl, r0
 80092b2:	468b      	mov	fp, r1
 80092b4:	3501      	adds	r5, #1
 80092b6:	4628      	mov	r0, r5
 80092b8:	f7f7 f944 	bl	8000544 <__aeabi_i2d>
 80092bc:	4652      	mov	r2, sl
 80092be:	465b      	mov	r3, fp
 80092c0:	f7f7 f9aa 	bl	8000618 <__aeabi_dmul>
 80092c4:	4b82      	ldr	r3, [pc, #520]	; (80094d0 <_dtoa_r+0x628>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	f7f6 fff0 	bl	80002ac <__adddf3>
 80092cc:	46d0      	mov	r8, sl
 80092ce:	46d9      	mov	r9, fp
 80092d0:	4682      	mov	sl, r0
 80092d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80092d6:	2e00      	cmp	r6, #0
 80092d8:	d158      	bne.n	800938c <_dtoa_r+0x4e4>
 80092da:	4b7e      	ldr	r3, [pc, #504]	; (80094d4 <_dtoa_r+0x62c>)
 80092dc:	2200      	movs	r2, #0
 80092de:	4640      	mov	r0, r8
 80092e0:	4649      	mov	r1, r9
 80092e2:	f7f6 ffe1 	bl	80002a8 <__aeabi_dsub>
 80092e6:	4652      	mov	r2, sl
 80092e8:	465b      	mov	r3, fp
 80092ea:	4680      	mov	r8, r0
 80092ec:	4689      	mov	r9, r1
 80092ee:	f7f7 fc23 	bl	8000b38 <__aeabi_dcmpgt>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	f040 8295 	bne.w	8009822 <_dtoa_r+0x97a>
 80092f8:	4652      	mov	r2, sl
 80092fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80092fe:	4640      	mov	r0, r8
 8009300:	4649      	mov	r1, r9
 8009302:	f7f7 fbfb 	bl	8000afc <__aeabi_dcmplt>
 8009306:	2800      	cmp	r0, #0
 8009308:	f040 8289 	bne.w	800981e <_dtoa_r+0x976>
 800930c:	ec5b ab19 	vmov	sl, fp, d9
 8009310:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009312:	2b00      	cmp	r3, #0
 8009314:	f2c0 8148 	blt.w	80095a8 <_dtoa_r+0x700>
 8009318:	9a00      	ldr	r2, [sp, #0]
 800931a:	2a0e      	cmp	r2, #14
 800931c:	f300 8144 	bgt.w	80095a8 <_dtoa_r+0x700>
 8009320:	4b67      	ldr	r3, [pc, #412]	; (80094c0 <_dtoa_r+0x618>)
 8009322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009326:	e9d3 8900 	ldrd	r8, r9, [r3]
 800932a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800932c:	2b00      	cmp	r3, #0
 800932e:	f280 80d5 	bge.w	80094dc <_dtoa_r+0x634>
 8009332:	9b03      	ldr	r3, [sp, #12]
 8009334:	2b00      	cmp	r3, #0
 8009336:	f300 80d1 	bgt.w	80094dc <_dtoa_r+0x634>
 800933a:	f040 826f 	bne.w	800981c <_dtoa_r+0x974>
 800933e:	4b65      	ldr	r3, [pc, #404]	; (80094d4 <_dtoa_r+0x62c>)
 8009340:	2200      	movs	r2, #0
 8009342:	4640      	mov	r0, r8
 8009344:	4649      	mov	r1, r9
 8009346:	f7f7 f967 	bl	8000618 <__aeabi_dmul>
 800934a:	4652      	mov	r2, sl
 800934c:	465b      	mov	r3, fp
 800934e:	f7f7 fbe9 	bl	8000b24 <__aeabi_dcmpge>
 8009352:	9e03      	ldr	r6, [sp, #12]
 8009354:	4637      	mov	r7, r6
 8009356:	2800      	cmp	r0, #0
 8009358:	f040 8245 	bne.w	80097e6 <_dtoa_r+0x93e>
 800935c:	9d01      	ldr	r5, [sp, #4]
 800935e:	2331      	movs	r3, #49	; 0x31
 8009360:	f805 3b01 	strb.w	r3, [r5], #1
 8009364:	9b00      	ldr	r3, [sp, #0]
 8009366:	3301      	adds	r3, #1
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	e240      	b.n	80097ee <_dtoa_r+0x946>
 800936c:	07f2      	lsls	r2, r6, #31
 800936e:	d505      	bpl.n	800937c <_dtoa_r+0x4d4>
 8009370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009374:	f7f7 f950 	bl	8000618 <__aeabi_dmul>
 8009378:	3501      	adds	r5, #1
 800937a:	2301      	movs	r3, #1
 800937c:	1076      	asrs	r6, r6, #1
 800937e:	3708      	adds	r7, #8
 8009380:	e777      	b.n	8009272 <_dtoa_r+0x3ca>
 8009382:	2502      	movs	r5, #2
 8009384:	e779      	b.n	800927a <_dtoa_r+0x3d2>
 8009386:	9f00      	ldr	r7, [sp, #0]
 8009388:	9e03      	ldr	r6, [sp, #12]
 800938a:	e794      	b.n	80092b6 <_dtoa_r+0x40e>
 800938c:	9901      	ldr	r1, [sp, #4]
 800938e:	4b4c      	ldr	r3, [pc, #304]	; (80094c0 <_dtoa_r+0x618>)
 8009390:	4431      	add	r1, r6
 8009392:	910d      	str	r1, [sp, #52]	; 0x34
 8009394:	9908      	ldr	r1, [sp, #32]
 8009396:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800939a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800939e:	2900      	cmp	r1, #0
 80093a0:	d043      	beq.n	800942a <_dtoa_r+0x582>
 80093a2:	494d      	ldr	r1, [pc, #308]	; (80094d8 <_dtoa_r+0x630>)
 80093a4:	2000      	movs	r0, #0
 80093a6:	f7f7 fa61 	bl	800086c <__aeabi_ddiv>
 80093aa:	4652      	mov	r2, sl
 80093ac:	465b      	mov	r3, fp
 80093ae:	f7f6 ff7b 	bl	80002a8 <__aeabi_dsub>
 80093b2:	9d01      	ldr	r5, [sp, #4]
 80093b4:	4682      	mov	sl, r0
 80093b6:	468b      	mov	fp, r1
 80093b8:	4649      	mov	r1, r9
 80093ba:	4640      	mov	r0, r8
 80093bc:	f7f7 fbdc 	bl	8000b78 <__aeabi_d2iz>
 80093c0:	4606      	mov	r6, r0
 80093c2:	f7f7 f8bf 	bl	8000544 <__aeabi_i2d>
 80093c6:	4602      	mov	r2, r0
 80093c8:	460b      	mov	r3, r1
 80093ca:	4640      	mov	r0, r8
 80093cc:	4649      	mov	r1, r9
 80093ce:	f7f6 ff6b 	bl	80002a8 <__aeabi_dsub>
 80093d2:	3630      	adds	r6, #48	; 0x30
 80093d4:	f805 6b01 	strb.w	r6, [r5], #1
 80093d8:	4652      	mov	r2, sl
 80093da:	465b      	mov	r3, fp
 80093dc:	4680      	mov	r8, r0
 80093de:	4689      	mov	r9, r1
 80093e0:	f7f7 fb8c 	bl	8000afc <__aeabi_dcmplt>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d163      	bne.n	80094b0 <_dtoa_r+0x608>
 80093e8:	4642      	mov	r2, r8
 80093ea:	464b      	mov	r3, r9
 80093ec:	4936      	ldr	r1, [pc, #216]	; (80094c8 <_dtoa_r+0x620>)
 80093ee:	2000      	movs	r0, #0
 80093f0:	f7f6 ff5a 	bl	80002a8 <__aeabi_dsub>
 80093f4:	4652      	mov	r2, sl
 80093f6:	465b      	mov	r3, fp
 80093f8:	f7f7 fb80 	bl	8000afc <__aeabi_dcmplt>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	f040 80b5 	bne.w	800956c <_dtoa_r+0x6c4>
 8009402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009404:	429d      	cmp	r5, r3
 8009406:	d081      	beq.n	800930c <_dtoa_r+0x464>
 8009408:	4b30      	ldr	r3, [pc, #192]	; (80094cc <_dtoa_r+0x624>)
 800940a:	2200      	movs	r2, #0
 800940c:	4650      	mov	r0, sl
 800940e:	4659      	mov	r1, fp
 8009410:	f7f7 f902 	bl	8000618 <__aeabi_dmul>
 8009414:	4b2d      	ldr	r3, [pc, #180]	; (80094cc <_dtoa_r+0x624>)
 8009416:	4682      	mov	sl, r0
 8009418:	468b      	mov	fp, r1
 800941a:	4640      	mov	r0, r8
 800941c:	4649      	mov	r1, r9
 800941e:	2200      	movs	r2, #0
 8009420:	f7f7 f8fa 	bl	8000618 <__aeabi_dmul>
 8009424:	4680      	mov	r8, r0
 8009426:	4689      	mov	r9, r1
 8009428:	e7c6      	b.n	80093b8 <_dtoa_r+0x510>
 800942a:	4650      	mov	r0, sl
 800942c:	4659      	mov	r1, fp
 800942e:	f7f7 f8f3 	bl	8000618 <__aeabi_dmul>
 8009432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009434:	9d01      	ldr	r5, [sp, #4]
 8009436:	930f      	str	r3, [sp, #60]	; 0x3c
 8009438:	4682      	mov	sl, r0
 800943a:	468b      	mov	fp, r1
 800943c:	4649      	mov	r1, r9
 800943e:	4640      	mov	r0, r8
 8009440:	f7f7 fb9a 	bl	8000b78 <__aeabi_d2iz>
 8009444:	4606      	mov	r6, r0
 8009446:	f7f7 f87d 	bl	8000544 <__aeabi_i2d>
 800944a:	3630      	adds	r6, #48	; 0x30
 800944c:	4602      	mov	r2, r0
 800944e:	460b      	mov	r3, r1
 8009450:	4640      	mov	r0, r8
 8009452:	4649      	mov	r1, r9
 8009454:	f7f6 ff28 	bl	80002a8 <__aeabi_dsub>
 8009458:	f805 6b01 	strb.w	r6, [r5], #1
 800945c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800945e:	429d      	cmp	r5, r3
 8009460:	4680      	mov	r8, r0
 8009462:	4689      	mov	r9, r1
 8009464:	f04f 0200 	mov.w	r2, #0
 8009468:	d124      	bne.n	80094b4 <_dtoa_r+0x60c>
 800946a:	4b1b      	ldr	r3, [pc, #108]	; (80094d8 <_dtoa_r+0x630>)
 800946c:	4650      	mov	r0, sl
 800946e:	4659      	mov	r1, fp
 8009470:	f7f6 ff1c 	bl	80002ac <__adddf3>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	4640      	mov	r0, r8
 800947a:	4649      	mov	r1, r9
 800947c:	f7f7 fb5c 	bl	8000b38 <__aeabi_dcmpgt>
 8009480:	2800      	cmp	r0, #0
 8009482:	d173      	bne.n	800956c <_dtoa_r+0x6c4>
 8009484:	4652      	mov	r2, sl
 8009486:	465b      	mov	r3, fp
 8009488:	4913      	ldr	r1, [pc, #76]	; (80094d8 <_dtoa_r+0x630>)
 800948a:	2000      	movs	r0, #0
 800948c:	f7f6 ff0c 	bl	80002a8 <__aeabi_dsub>
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	4640      	mov	r0, r8
 8009496:	4649      	mov	r1, r9
 8009498:	f7f7 fb30 	bl	8000afc <__aeabi_dcmplt>
 800949c:	2800      	cmp	r0, #0
 800949e:	f43f af35 	beq.w	800930c <_dtoa_r+0x464>
 80094a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80094a4:	1e6b      	subs	r3, r5, #1
 80094a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80094a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094ac:	2b30      	cmp	r3, #48	; 0x30
 80094ae:	d0f8      	beq.n	80094a2 <_dtoa_r+0x5fa>
 80094b0:	9700      	str	r7, [sp, #0]
 80094b2:	e049      	b.n	8009548 <_dtoa_r+0x6a0>
 80094b4:	4b05      	ldr	r3, [pc, #20]	; (80094cc <_dtoa_r+0x624>)
 80094b6:	f7f7 f8af 	bl	8000618 <__aeabi_dmul>
 80094ba:	4680      	mov	r8, r0
 80094bc:	4689      	mov	r9, r1
 80094be:	e7bd      	b.n	800943c <_dtoa_r+0x594>
 80094c0:	0800b420 	.word	0x0800b420
 80094c4:	0800b3f8 	.word	0x0800b3f8
 80094c8:	3ff00000 	.word	0x3ff00000
 80094cc:	40240000 	.word	0x40240000
 80094d0:	401c0000 	.word	0x401c0000
 80094d4:	40140000 	.word	0x40140000
 80094d8:	3fe00000 	.word	0x3fe00000
 80094dc:	9d01      	ldr	r5, [sp, #4]
 80094de:	4656      	mov	r6, sl
 80094e0:	465f      	mov	r7, fp
 80094e2:	4642      	mov	r2, r8
 80094e4:	464b      	mov	r3, r9
 80094e6:	4630      	mov	r0, r6
 80094e8:	4639      	mov	r1, r7
 80094ea:	f7f7 f9bf 	bl	800086c <__aeabi_ddiv>
 80094ee:	f7f7 fb43 	bl	8000b78 <__aeabi_d2iz>
 80094f2:	4682      	mov	sl, r0
 80094f4:	f7f7 f826 	bl	8000544 <__aeabi_i2d>
 80094f8:	4642      	mov	r2, r8
 80094fa:	464b      	mov	r3, r9
 80094fc:	f7f7 f88c 	bl	8000618 <__aeabi_dmul>
 8009500:	4602      	mov	r2, r0
 8009502:	460b      	mov	r3, r1
 8009504:	4630      	mov	r0, r6
 8009506:	4639      	mov	r1, r7
 8009508:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800950c:	f7f6 fecc 	bl	80002a8 <__aeabi_dsub>
 8009510:	f805 6b01 	strb.w	r6, [r5], #1
 8009514:	9e01      	ldr	r6, [sp, #4]
 8009516:	9f03      	ldr	r7, [sp, #12]
 8009518:	1bae      	subs	r6, r5, r6
 800951a:	42b7      	cmp	r7, r6
 800951c:	4602      	mov	r2, r0
 800951e:	460b      	mov	r3, r1
 8009520:	d135      	bne.n	800958e <_dtoa_r+0x6e6>
 8009522:	f7f6 fec3 	bl	80002ac <__adddf3>
 8009526:	4642      	mov	r2, r8
 8009528:	464b      	mov	r3, r9
 800952a:	4606      	mov	r6, r0
 800952c:	460f      	mov	r7, r1
 800952e:	f7f7 fb03 	bl	8000b38 <__aeabi_dcmpgt>
 8009532:	b9d0      	cbnz	r0, 800956a <_dtoa_r+0x6c2>
 8009534:	4642      	mov	r2, r8
 8009536:	464b      	mov	r3, r9
 8009538:	4630      	mov	r0, r6
 800953a:	4639      	mov	r1, r7
 800953c:	f7f7 fad4 	bl	8000ae8 <__aeabi_dcmpeq>
 8009540:	b110      	cbz	r0, 8009548 <_dtoa_r+0x6a0>
 8009542:	f01a 0f01 	tst.w	sl, #1
 8009546:	d110      	bne.n	800956a <_dtoa_r+0x6c2>
 8009548:	4620      	mov	r0, r4
 800954a:	ee18 1a10 	vmov	r1, s16
 800954e:	f000 fae5 	bl	8009b1c <_Bfree>
 8009552:	2300      	movs	r3, #0
 8009554:	9800      	ldr	r0, [sp, #0]
 8009556:	702b      	strb	r3, [r5, #0]
 8009558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800955a:	3001      	adds	r0, #1
 800955c:	6018      	str	r0, [r3, #0]
 800955e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009560:	2b00      	cmp	r3, #0
 8009562:	f43f acf1 	beq.w	8008f48 <_dtoa_r+0xa0>
 8009566:	601d      	str	r5, [r3, #0]
 8009568:	e4ee      	b.n	8008f48 <_dtoa_r+0xa0>
 800956a:	9f00      	ldr	r7, [sp, #0]
 800956c:	462b      	mov	r3, r5
 800956e:	461d      	mov	r5, r3
 8009570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009574:	2a39      	cmp	r2, #57	; 0x39
 8009576:	d106      	bne.n	8009586 <_dtoa_r+0x6de>
 8009578:	9a01      	ldr	r2, [sp, #4]
 800957a:	429a      	cmp	r2, r3
 800957c:	d1f7      	bne.n	800956e <_dtoa_r+0x6c6>
 800957e:	9901      	ldr	r1, [sp, #4]
 8009580:	2230      	movs	r2, #48	; 0x30
 8009582:	3701      	adds	r7, #1
 8009584:	700a      	strb	r2, [r1, #0]
 8009586:	781a      	ldrb	r2, [r3, #0]
 8009588:	3201      	adds	r2, #1
 800958a:	701a      	strb	r2, [r3, #0]
 800958c:	e790      	b.n	80094b0 <_dtoa_r+0x608>
 800958e:	4ba6      	ldr	r3, [pc, #664]	; (8009828 <_dtoa_r+0x980>)
 8009590:	2200      	movs	r2, #0
 8009592:	f7f7 f841 	bl	8000618 <__aeabi_dmul>
 8009596:	2200      	movs	r2, #0
 8009598:	2300      	movs	r3, #0
 800959a:	4606      	mov	r6, r0
 800959c:	460f      	mov	r7, r1
 800959e:	f7f7 faa3 	bl	8000ae8 <__aeabi_dcmpeq>
 80095a2:	2800      	cmp	r0, #0
 80095a4:	d09d      	beq.n	80094e2 <_dtoa_r+0x63a>
 80095a6:	e7cf      	b.n	8009548 <_dtoa_r+0x6a0>
 80095a8:	9a08      	ldr	r2, [sp, #32]
 80095aa:	2a00      	cmp	r2, #0
 80095ac:	f000 80d7 	beq.w	800975e <_dtoa_r+0x8b6>
 80095b0:	9a06      	ldr	r2, [sp, #24]
 80095b2:	2a01      	cmp	r2, #1
 80095b4:	f300 80ba 	bgt.w	800972c <_dtoa_r+0x884>
 80095b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095ba:	2a00      	cmp	r2, #0
 80095bc:	f000 80b2 	beq.w	8009724 <_dtoa_r+0x87c>
 80095c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80095c4:	9e07      	ldr	r6, [sp, #28]
 80095c6:	9d04      	ldr	r5, [sp, #16]
 80095c8:	9a04      	ldr	r2, [sp, #16]
 80095ca:	441a      	add	r2, r3
 80095cc:	9204      	str	r2, [sp, #16]
 80095ce:	9a05      	ldr	r2, [sp, #20]
 80095d0:	2101      	movs	r1, #1
 80095d2:	441a      	add	r2, r3
 80095d4:	4620      	mov	r0, r4
 80095d6:	9205      	str	r2, [sp, #20]
 80095d8:	f000 fb58 	bl	8009c8c <__i2b>
 80095dc:	4607      	mov	r7, r0
 80095de:	2d00      	cmp	r5, #0
 80095e0:	dd0c      	ble.n	80095fc <_dtoa_r+0x754>
 80095e2:	9b05      	ldr	r3, [sp, #20]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	dd09      	ble.n	80095fc <_dtoa_r+0x754>
 80095e8:	42ab      	cmp	r3, r5
 80095ea:	9a04      	ldr	r2, [sp, #16]
 80095ec:	bfa8      	it	ge
 80095ee:	462b      	movge	r3, r5
 80095f0:	1ad2      	subs	r2, r2, r3
 80095f2:	9204      	str	r2, [sp, #16]
 80095f4:	9a05      	ldr	r2, [sp, #20]
 80095f6:	1aed      	subs	r5, r5, r3
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	9305      	str	r3, [sp, #20]
 80095fc:	9b07      	ldr	r3, [sp, #28]
 80095fe:	b31b      	cbz	r3, 8009648 <_dtoa_r+0x7a0>
 8009600:	9b08      	ldr	r3, [sp, #32]
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 80af 	beq.w	8009766 <_dtoa_r+0x8be>
 8009608:	2e00      	cmp	r6, #0
 800960a:	dd13      	ble.n	8009634 <_dtoa_r+0x78c>
 800960c:	4639      	mov	r1, r7
 800960e:	4632      	mov	r2, r6
 8009610:	4620      	mov	r0, r4
 8009612:	f000 fbfb 	bl	8009e0c <__pow5mult>
 8009616:	ee18 2a10 	vmov	r2, s16
 800961a:	4601      	mov	r1, r0
 800961c:	4607      	mov	r7, r0
 800961e:	4620      	mov	r0, r4
 8009620:	f000 fb4a 	bl	8009cb8 <__multiply>
 8009624:	ee18 1a10 	vmov	r1, s16
 8009628:	4680      	mov	r8, r0
 800962a:	4620      	mov	r0, r4
 800962c:	f000 fa76 	bl	8009b1c <_Bfree>
 8009630:	ee08 8a10 	vmov	s16, r8
 8009634:	9b07      	ldr	r3, [sp, #28]
 8009636:	1b9a      	subs	r2, r3, r6
 8009638:	d006      	beq.n	8009648 <_dtoa_r+0x7a0>
 800963a:	ee18 1a10 	vmov	r1, s16
 800963e:	4620      	mov	r0, r4
 8009640:	f000 fbe4 	bl	8009e0c <__pow5mult>
 8009644:	ee08 0a10 	vmov	s16, r0
 8009648:	2101      	movs	r1, #1
 800964a:	4620      	mov	r0, r4
 800964c:	f000 fb1e 	bl	8009c8c <__i2b>
 8009650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009652:	2b00      	cmp	r3, #0
 8009654:	4606      	mov	r6, r0
 8009656:	f340 8088 	ble.w	800976a <_dtoa_r+0x8c2>
 800965a:	461a      	mov	r2, r3
 800965c:	4601      	mov	r1, r0
 800965e:	4620      	mov	r0, r4
 8009660:	f000 fbd4 	bl	8009e0c <__pow5mult>
 8009664:	9b06      	ldr	r3, [sp, #24]
 8009666:	2b01      	cmp	r3, #1
 8009668:	4606      	mov	r6, r0
 800966a:	f340 8081 	ble.w	8009770 <_dtoa_r+0x8c8>
 800966e:	f04f 0800 	mov.w	r8, #0
 8009672:	6933      	ldr	r3, [r6, #16]
 8009674:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009678:	6918      	ldr	r0, [r3, #16]
 800967a:	f000 fab7 	bl	8009bec <__hi0bits>
 800967e:	f1c0 0020 	rsb	r0, r0, #32
 8009682:	9b05      	ldr	r3, [sp, #20]
 8009684:	4418      	add	r0, r3
 8009686:	f010 001f 	ands.w	r0, r0, #31
 800968a:	f000 8092 	beq.w	80097b2 <_dtoa_r+0x90a>
 800968e:	f1c0 0320 	rsb	r3, r0, #32
 8009692:	2b04      	cmp	r3, #4
 8009694:	f340 808a 	ble.w	80097ac <_dtoa_r+0x904>
 8009698:	f1c0 001c 	rsb	r0, r0, #28
 800969c:	9b04      	ldr	r3, [sp, #16]
 800969e:	4403      	add	r3, r0
 80096a0:	9304      	str	r3, [sp, #16]
 80096a2:	9b05      	ldr	r3, [sp, #20]
 80096a4:	4403      	add	r3, r0
 80096a6:	4405      	add	r5, r0
 80096a8:	9305      	str	r3, [sp, #20]
 80096aa:	9b04      	ldr	r3, [sp, #16]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	dd07      	ble.n	80096c0 <_dtoa_r+0x818>
 80096b0:	ee18 1a10 	vmov	r1, s16
 80096b4:	461a      	mov	r2, r3
 80096b6:	4620      	mov	r0, r4
 80096b8:	f000 fc02 	bl	8009ec0 <__lshift>
 80096bc:	ee08 0a10 	vmov	s16, r0
 80096c0:	9b05      	ldr	r3, [sp, #20]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	dd05      	ble.n	80096d2 <_dtoa_r+0x82a>
 80096c6:	4631      	mov	r1, r6
 80096c8:	461a      	mov	r2, r3
 80096ca:	4620      	mov	r0, r4
 80096cc:	f000 fbf8 	bl	8009ec0 <__lshift>
 80096d0:	4606      	mov	r6, r0
 80096d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d06e      	beq.n	80097b6 <_dtoa_r+0x90e>
 80096d8:	ee18 0a10 	vmov	r0, s16
 80096dc:	4631      	mov	r1, r6
 80096de:	f000 fc5f 	bl	8009fa0 <__mcmp>
 80096e2:	2800      	cmp	r0, #0
 80096e4:	da67      	bge.n	80097b6 <_dtoa_r+0x90e>
 80096e6:	9b00      	ldr	r3, [sp, #0]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	ee18 1a10 	vmov	r1, s16
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	220a      	movs	r2, #10
 80096f2:	2300      	movs	r3, #0
 80096f4:	4620      	mov	r0, r4
 80096f6:	f000 fa33 	bl	8009b60 <__multadd>
 80096fa:	9b08      	ldr	r3, [sp, #32]
 80096fc:	ee08 0a10 	vmov	s16, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 81b1 	beq.w	8009a68 <_dtoa_r+0xbc0>
 8009706:	2300      	movs	r3, #0
 8009708:	4639      	mov	r1, r7
 800970a:	220a      	movs	r2, #10
 800970c:	4620      	mov	r0, r4
 800970e:	f000 fa27 	bl	8009b60 <__multadd>
 8009712:	9b02      	ldr	r3, [sp, #8]
 8009714:	2b00      	cmp	r3, #0
 8009716:	4607      	mov	r7, r0
 8009718:	f300 808e 	bgt.w	8009838 <_dtoa_r+0x990>
 800971c:	9b06      	ldr	r3, [sp, #24]
 800971e:	2b02      	cmp	r3, #2
 8009720:	dc51      	bgt.n	80097c6 <_dtoa_r+0x91e>
 8009722:	e089      	b.n	8009838 <_dtoa_r+0x990>
 8009724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009726:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800972a:	e74b      	b.n	80095c4 <_dtoa_r+0x71c>
 800972c:	9b03      	ldr	r3, [sp, #12]
 800972e:	1e5e      	subs	r6, r3, #1
 8009730:	9b07      	ldr	r3, [sp, #28]
 8009732:	42b3      	cmp	r3, r6
 8009734:	bfbf      	itttt	lt
 8009736:	9b07      	ldrlt	r3, [sp, #28]
 8009738:	9607      	strlt	r6, [sp, #28]
 800973a:	1af2      	sublt	r2, r6, r3
 800973c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800973e:	bfb6      	itet	lt
 8009740:	189b      	addlt	r3, r3, r2
 8009742:	1b9e      	subge	r6, r3, r6
 8009744:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009746:	9b03      	ldr	r3, [sp, #12]
 8009748:	bfb8      	it	lt
 800974a:	2600      	movlt	r6, #0
 800974c:	2b00      	cmp	r3, #0
 800974e:	bfb7      	itett	lt
 8009750:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009754:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009758:	1a9d      	sublt	r5, r3, r2
 800975a:	2300      	movlt	r3, #0
 800975c:	e734      	b.n	80095c8 <_dtoa_r+0x720>
 800975e:	9e07      	ldr	r6, [sp, #28]
 8009760:	9d04      	ldr	r5, [sp, #16]
 8009762:	9f08      	ldr	r7, [sp, #32]
 8009764:	e73b      	b.n	80095de <_dtoa_r+0x736>
 8009766:	9a07      	ldr	r2, [sp, #28]
 8009768:	e767      	b.n	800963a <_dtoa_r+0x792>
 800976a:	9b06      	ldr	r3, [sp, #24]
 800976c:	2b01      	cmp	r3, #1
 800976e:	dc18      	bgt.n	80097a2 <_dtoa_r+0x8fa>
 8009770:	f1ba 0f00 	cmp.w	sl, #0
 8009774:	d115      	bne.n	80097a2 <_dtoa_r+0x8fa>
 8009776:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800977a:	b993      	cbnz	r3, 80097a2 <_dtoa_r+0x8fa>
 800977c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009780:	0d1b      	lsrs	r3, r3, #20
 8009782:	051b      	lsls	r3, r3, #20
 8009784:	b183      	cbz	r3, 80097a8 <_dtoa_r+0x900>
 8009786:	9b04      	ldr	r3, [sp, #16]
 8009788:	3301      	adds	r3, #1
 800978a:	9304      	str	r3, [sp, #16]
 800978c:	9b05      	ldr	r3, [sp, #20]
 800978e:	3301      	adds	r3, #1
 8009790:	9305      	str	r3, [sp, #20]
 8009792:	f04f 0801 	mov.w	r8, #1
 8009796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009798:	2b00      	cmp	r3, #0
 800979a:	f47f af6a 	bne.w	8009672 <_dtoa_r+0x7ca>
 800979e:	2001      	movs	r0, #1
 80097a0:	e76f      	b.n	8009682 <_dtoa_r+0x7da>
 80097a2:	f04f 0800 	mov.w	r8, #0
 80097a6:	e7f6      	b.n	8009796 <_dtoa_r+0x8ee>
 80097a8:	4698      	mov	r8, r3
 80097aa:	e7f4      	b.n	8009796 <_dtoa_r+0x8ee>
 80097ac:	f43f af7d 	beq.w	80096aa <_dtoa_r+0x802>
 80097b0:	4618      	mov	r0, r3
 80097b2:	301c      	adds	r0, #28
 80097b4:	e772      	b.n	800969c <_dtoa_r+0x7f4>
 80097b6:	9b03      	ldr	r3, [sp, #12]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	dc37      	bgt.n	800982c <_dtoa_r+0x984>
 80097bc:	9b06      	ldr	r3, [sp, #24]
 80097be:	2b02      	cmp	r3, #2
 80097c0:	dd34      	ble.n	800982c <_dtoa_r+0x984>
 80097c2:	9b03      	ldr	r3, [sp, #12]
 80097c4:	9302      	str	r3, [sp, #8]
 80097c6:	9b02      	ldr	r3, [sp, #8]
 80097c8:	b96b      	cbnz	r3, 80097e6 <_dtoa_r+0x93e>
 80097ca:	4631      	mov	r1, r6
 80097cc:	2205      	movs	r2, #5
 80097ce:	4620      	mov	r0, r4
 80097d0:	f000 f9c6 	bl	8009b60 <__multadd>
 80097d4:	4601      	mov	r1, r0
 80097d6:	4606      	mov	r6, r0
 80097d8:	ee18 0a10 	vmov	r0, s16
 80097dc:	f000 fbe0 	bl	8009fa0 <__mcmp>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	f73f adbb 	bgt.w	800935c <_dtoa_r+0x4b4>
 80097e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e8:	9d01      	ldr	r5, [sp, #4]
 80097ea:	43db      	mvns	r3, r3
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	f04f 0800 	mov.w	r8, #0
 80097f2:	4631      	mov	r1, r6
 80097f4:	4620      	mov	r0, r4
 80097f6:	f000 f991 	bl	8009b1c <_Bfree>
 80097fa:	2f00      	cmp	r7, #0
 80097fc:	f43f aea4 	beq.w	8009548 <_dtoa_r+0x6a0>
 8009800:	f1b8 0f00 	cmp.w	r8, #0
 8009804:	d005      	beq.n	8009812 <_dtoa_r+0x96a>
 8009806:	45b8      	cmp	r8, r7
 8009808:	d003      	beq.n	8009812 <_dtoa_r+0x96a>
 800980a:	4641      	mov	r1, r8
 800980c:	4620      	mov	r0, r4
 800980e:	f000 f985 	bl	8009b1c <_Bfree>
 8009812:	4639      	mov	r1, r7
 8009814:	4620      	mov	r0, r4
 8009816:	f000 f981 	bl	8009b1c <_Bfree>
 800981a:	e695      	b.n	8009548 <_dtoa_r+0x6a0>
 800981c:	2600      	movs	r6, #0
 800981e:	4637      	mov	r7, r6
 8009820:	e7e1      	b.n	80097e6 <_dtoa_r+0x93e>
 8009822:	9700      	str	r7, [sp, #0]
 8009824:	4637      	mov	r7, r6
 8009826:	e599      	b.n	800935c <_dtoa_r+0x4b4>
 8009828:	40240000 	.word	0x40240000
 800982c:	9b08      	ldr	r3, [sp, #32]
 800982e:	2b00      	cmp	r3, #0
 8009830:	f000 80ca 	beq.w	80099c8 <_dtoa_r+0xb20>
 8009834:	9b03      	ldr	r3, [sp, #12]
 8009836:	9302      	str	r3, [sp, #8]
 8009838:	2d00      	cmp	r5, #0
 800983a:	dd05      	ble.n	8009848 <_dtoa_r+0x9a0>
 800983c:	4639      	mov	r1, r7
 800983e:	462a      	mov	r2, r5
 8009840:	4620      	mov	r0, r4
 8009842:	f000 fb3d 	bl	8009ec0 <__lshift>
 8009846:	4607      	mov	r7, r0
 8009848:	f1b8 0f00 	cmp.w	r8, #0
 800984c:	d05b      	beq.n	8009906 <_dtoa_r+0xa5e>
 800984e:	6879      	ldr	r1, [r7, #4]
 8009850:	4620      	mov	r0, r4
 8009852:	f000 f923 	bl	8009a9c <_Balloc>
 8009856:	4605      	mov	r5, r0
 8009858:	b928      	cbnz	r0, 8009866 <_dtoa_r+0x9be>
 800985a:	4b87      	ldr	r3, [pc, #540]	; (8009a78 <_dtoa_r+0xbd0>)
 800985c:	4602      	mov	r2, r0
 800985e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009862:	f7ff bb3b 	b.w	8008edc <_dtoa_r+0x34>
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	3202      	adds	r2, #2
 800986a:	0092      	lsls	r2, r2, #2
 800986c:	f107 010c 	add.w	r1, r7, #12
 8009870:	300c      	adds	r0, #12
 8009872:	f7fe fdd7 	bl	8008424 <memcpy>
 8009876:	2201      	movs	r2, #1
 8009878:	4629      	mov	r1, r5
 800987a:	4620      	mov	r0, r4
 800987c:	f000 fb20 	bl	8009ec0 <__lshift>
 8009880:	9b01      	ldr	r3, [sp, #4]
 8009882:	f103 0901 	add.w	r9, r3, #1
 8009886:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800988a:	4413      	add	r3, r2
 800988c:	9305      	str	r3, [sp, #20]
 800988e:	f00a 0301 	and.w	r3, sl, #1
 8009892:	46b8      	mov	r8, r7
 8009894:	9304      	str	r3, [sp, #16]
 8009896:	4607      	mov	r7, r0
 8009898:	4631      	mov	r1, r6
 800989a:	ee18 0a10 	vmov	r0, s16
 800989e:	f7ff fa75 	bl	8008d8c <quorem>
 80098a2:	4641      	mov	r1, r8
 80098a4:	9002      	str	r0, [sp, #8]
 80098a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80098aa:	ee18 0a10 	vmov	r0, s16
 80098ae:	f000 fb77 	bl	8009fa0 <__mcmp>
 80098b2:	463a      	mov	r2, r7
 80098b4:	9003      	str	r0, [sp, #12]
 80098b6:	4631      	mov	r1, r6
 80098b8:	4620      	mov	r0, r4
 80098ba:	f000 fb8d 	bl	8009fd8 <__mdiff>
 80098be:	68c2      	ldr	r2, [r0, #12]
 80098c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80098c4:	4605      	mov	r5, r0
 80098c6:	bb02      	cbnz	r2, 800990a <_dtoa_r+0xa62>
 80098c8:	4601      	mov	r1, r0
 80098ca:	ee18 0a10 	vmov	r0, s16
 80098ce:	f000 fb67 	bl	8009fa0 <__mcmp>
 80098d2:	4602      	mov	r2, r0
 80098d4:	4629      	mov	r1, r5
 80098d6:	4620      	mov	r0, r4
 80098d8:	9207      	str	r2, [sp, #28]
 80098da:	f000 f91f 	bl	8009b1c <_Bfree>
 80098de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80098e2:	ea43 0102 	orr.w	r1, r3, r2
 80098e6:	9b04      	ldr	r3, [sp, #16]
 80098e8:	430b      	orrs	r3, r1
 80098ea:	464d      	mov	r5, r9
 80098ec:	d10f      	bne.n	800990e <_dtoa_r+0xa66>
 80098ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098f2:	d02a      	beq.n	800994a <_dtoa_r+0xaa2>
 80098f4:	9b03      	ldr	r3, [sp, #12]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	dd02      	ble.n	8009900 <_dtoa_r+0xa58>
 80098fa:	9b02      	ldr	r3, [sp, #8]
 80098fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009900:	f88b a000 	strb.w	sl, [fp]
 8009904:	e775      	b.n	80097f2 <_dtoa_r+0x94a>
 8009906:	4638      	mov	r0, r7
 8009908:	e7ba      	b.n	8009880 <_dtoa_r+0x9d8>
 800990a:	2201      	movs	r2, #1
 800990c:	e7e2      	b.n	80098d4 <_dtoa_r+0xa2c>
 800990e:	9b03      	ldr	r3, [sp, #12]
 8009910:	2b00      	cmp	r3, #0
 8009912:	db04      	blt.n	800991e <_dtoa_r+0xa76>
 8009914:	9906      	ldr	r1, [sp, #24]
 8009916:	430b      	orrs	r3, r1
 8009918:	9904      	ldr	r1, [sp, #16]
 800991a:	430b      	orrs	r3, r1
 800991c:	d122      	bne.n	8009964 <_dtoa_r+0xabc>
 800991e:	2a00      	cmp	r2, #0
 8009920:	ddee      	ble.n	8009900 <_dtoa_r+0xa58>
 8009922:	ee18 1a10 	vmov	r1, s16
 8009926:	2201      	movs	r2, #1
 8009928:	4620      	mov	r0, r4
 800992a:	f000 fac9 	bl	8009ec0 <__lshift>
 800992e:	4631      	mov	r1, r6
 8009930:	ee08 0a10 	vmov	s16, r0
 8009934:	f000 fb34 	bl	8009fa0 <__mcmp>
 8009938:	2800      	cmp	r0, #0
 800993a:	dc03      	bgt.n	8009944 <_dtoa_r+0xa9c>
 800993c:	d1e0      	bne.n	8009900 <_dtoa_r+0xa58>
 800993e:	f01a 0f01 	tst.w	sl, #1
 8009942:	d0dd      	beq.n	8009900 <_dtoa_r+0xa58>
 8009944:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009948:	d1d7      	bne.n	80098fa <_dtoa_r+0xa52>
 800994a:	2339      	movs	r3, #57	; 0x39
 800994c:	f88b 3000 	strb.w	r3, [fp]
 8009950:	462b      	mov	r3, r5
 8009952:	461d      	mov	r5, r3
 8009954:	3b01      	subs	r3, #1
 8009956:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800995a:	2a39      	cmp	r2, #57	; 0x39
 800995c:	d071      	beq.n	8009a42 <_dtoa_r+0xb9a>
 800995e:	3201      	adds	r2, #1
 8009960:	701a      	strb	r2, [r3, #0]
 8009962:	e746      	b.n	80097f2 <_dtoa_r+0x94a>
 8009964:	2a00      	cmp	r2, #0
 8009966:	dd07      	ble.n	8009978 <_dtoa_r+0xad0>
 8009968:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800996c:	d0ed      	beq.n	800994a <_dtoa_r+0xaa2>
 800996e:	f10a 0301 	add.w	r3, sl, #1
 8009972:	f88b 3000 	strb.w	r3, [fp]
 8009976:	e73c      	b.n	80097f2 <_dtoa_r+0x94a>
 8009978:	9b05      	ldr	r3, [sp, #20]
 800997a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800997e:	4599      	cmp	r9, r3
 8009980:	d047      	beq.n	8009a12 <_dtoa_r+0xb6a>
 8009982:	ee18 1a10 	vmov	r1, s16
 8009986:	2300      	movs	r3, #0
 8009988:	220a      	movs	r2, #10
 800998a:	4620      	mov	r0, r4
 800998c:	f000 f8e8 	bl	8009b60 <__multadd>
 8009990:	45b8      	cmp	r8, r7
 8009992:	ee08 0a10 	vmov	s16, r0
 8009996:	f04f 0300 	mov.w	r3, #0
 800999a:	f04f 020a 	mov.w	r2, #10
 800999e:	4641      	mov	r1, r8
 80099a0:	4620      	mov	r0, r4
 80099a2:	d106      	bne.n	80099b2 <_dtoa_r+0xb0a>
 80099a4:	f000 f8dc 	bl	8009b60 <__multadd>
 80099a8:	4680      	mov	r8, r0
 80099aa:	4607      	mov	r7, r0
 80099ac:	f109 0901 	add.w	r9, r9, #1
 80099b0:	e772      	b.n	8009898 <_dtoa_r+0x9f0>
 80099b2:	f000 f8d5 	bl	8009b60 <__multadd>
 80099b6:	4639      	mov	r1, r7
 80099b8:	4680      	mov	r8, r0
 80099ba:	2300      	movs	r3, #0
 80099bc:	220a      	movs	r2, #10
 80099be:	4620      	mov	r0, r4
 80099c0:	f000 f8ce 	bl	8009b60 <__multadd>
 80099c4:	4607      	mov	r7, r0
 80099c6:	e7f1      	b.n	80099ac <_dtoa_r+0xb04>
 80099c8:	9b03      	ldr	r3, [sp, #12]
 80099ca:	9302      	str	r3, [sp, #8]
 80099cc:	9d01      	ldr	r5, [sp, #4]
 80099ce:	ee18 0a10 	vmov	r0, s16
 80099d2:	4631      	mov	r1, r6
 80099d4:	f7ff f9da 	bl	8008d8c <quorem>
 80099d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80099dc:	9b01      	ldr	r3, [sp, #4]
 80099de:	f805 ab01 	strb.w	sl, [r5], #1
 80099e2:	1aea      	subs	r2, r5, r3
 80099e4:	9b02      	ldr	r3, [sp, #8]
 80099e6:	4293      	cmp	r3, r2
 80099e8:	dd09      	ble.n	80099fe <_dtoa_r+0xb56>
 80099ea:	ee18 1a10 	vmov	r1, s16
 80099ee:	2300      	movs	r3, #0
 80099f0:	220a      	movs	r2, #10
 80099f2:	4620      	mov	r0, r4
 80099f4:	f000 f8b4 	bl	8009b60 <__multadd>
 80099f8:	ee08 0a10 	vmov	s16, r0
 80099fc:	e7e7      	b.n	80099ce <_dtoa_r+0xb26>
 80099fe:	9b02      	ldr	r3, [sp, #8]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	bfc8      	it	gt
 8009a04:	461d      	movgt	r5, r3
 8009a06:	9b01      	ldr	r3, [sp, #4]
 8009a08:	bfd8      	it	le
 8009a0a:	2501      	movle	r5, #1
 8009a0c:	441d      	add	r5, r3
 8009a0e:	f04f 0800 	mov.w	r8, #0
 8009a12:	ee18 1a10 	vmov	r1, s16
 8009a16:	2201      	movs	r2, #1
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f000 fa51 	bl	8009ec0 <__lshift>
 8009a1e:	4631      	mov	r1, r6
 8009a20:	ee08 0a10 	vmov	s16, r0
 8009a24:	f000 fabc 	bl	8009fa0 <__mcmp>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	dc91      	bgt.n	8009950 <_dtoa_r+0xaa8>
 8009a2c:	d102      	bne.n	8009a34 <_dtoa_r+0xb8c>
 8009a2e:	f01a 0f01 	tst.w	sl, #1
 8009a32:	d18d      	bne.n	8009950 <_dtoa_r+0xaa8>
 8009a34:	462b      	mov	r3, r5
 8009a36:	461d      	mov	r5, r3
 8009a38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a3c:	2a30      	cmp	r2, #48	; 0x30
 8009a3e:	d0fa      	beq.n	8009a36 <_dtoa_r+0xb8e>
 8009a40:	e6d7      	b.n	80097f2 <_dtoa_r+0x94a>
 8009a42:	9a01      	ldr	r2, [sp, #4]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d184      	bne.n	8009952 <_dtoa_r+0xaaa>
 8009a48:	9b00      	ldr	r3, [sp, #0]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	2331      	movs	r3, #49	; 0x31
 8009a50:	7013      	strb	r3, [r2, #0]
 8009a52:	e6ce      	b.n	80097f2 <_dtoa_r+0x94a>
 8009a54:	4b09      	ldr	r3, [pc, #36]	; (8009a7c <_dtoa_r+0xbd4>)
 8009a56:	f7ff ba95 	b.w	8008f84 <_dtoa_r+0xdc>
 8009a5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f47f aa6e 	bne.w	8008f3e <_dtoa_r+0x96>
 8009a62:	4b07      	ldr	r3, [pc, #28]	; (8009a80 <_dtoa_r+0xbd8>)
 8009a64:	f7ff ba8e 	b.w	8008f84 <_dtoa_r+0xdc>
 8009a68:	9b02      	ldr	r3, [sp, #8]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	dcae      	bgt.n	80099cc <_dtoa_r+0xb24>
 8009a6e:	9b06      	ldr	r3, [sp, #24]
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	f73f aea8 	bgt.w	80097c6 <_dtoa_r+0x91e>
 8009a76:	e7a9      	b.n	80099cc <_dtoa_r+0xb24>
 8009a78:	0800b387 	.word	0x0800b387
 8009a7c:	0800b2e4 	.word	0x0800b2e4
 8009a80:	0800b308 	.word	0x0800b308

08009a84 <_localeconv_r>:
 8009a84:	4800      	ldr	r0, [pc, #0]	; (8009a88 <_localeconv_r+0x4>)
 8009a86:	4770      	bx	lr
 8009a88:	20000250 	.word	0x20000250

08009a8c <malloc>:
 8009a8c:	4b02      	ldr	r3, [pc, #8]	; (8009a98 <malloc+0xc>)
 8009a8e:	4601      	mov	r1, r0
 8009a90:	6818      	ldr	r0, [r3, #0]
 8009a92:	f000 bc09 	b.w	800a2a8 <_malloc_r>
 8009a96:	bf00      	nop
 8009a98:	200000fc 	.word	0x200000fc

08009a9c <_Balloc>:
 8009a9c:	b570      	push	{r4, r5, r6, lr}
 8009a9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	460d      	mov	r5, r1
 8009aa4:	b976      	cbnz	r6, 8009ac4 <_Balloc+0x28>
 8009aa6:	2010      	movs	r0, #16
 8009aa8:	f7ff fff0 	bl	8009a8c <malloc>
 8009aac:	4602      	mov	r2, r0
 8009aae:	6260      	str	r0, [r4, #36]	; 0x24
 8009ab0:	b920      	cbnz	r0, 8009abc <_Balloc+0x20>
 8009ab2:	4b18      	ldr	r3, [pc, #96]	; (8009b14 <_Balloc+0x78>)
 8009ab4:	4818      	ldr	r0, [pc, #96]	; (8009b18 <_Balloc+0x7c>)
 8009ab6:	2166      	movs	r1, #102	; 0x66
 8009ab8:	f000 fdd6 	bl	800a668 <__assert_func>
 8009abc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ac0:	6006      	str	r6, [r0, #0]
 8009ac2:	60c6      	str	r6, [r0, #12]
 8009ac4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ac6:	68f3      	ldr	r3, [r6, #12]
 8009ac8:	b183      	cbz	r3, 8009aec <_Balloc+0x50>
 8009aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ad2:	b9b8      	cbnz	r0, 8009b04 <_Balloc+0x68>
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	fa01 f605 	lsl.w	r6, r1, r5
 8009ada:	1d72      	adds	r2, r6, #5
 8009adc:	0092      	lsls	r2, r2, #2
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f000 fb60 	bl	800a1a4 <_calloc_r>
 8009ae4:	b160      	cbz	r0, 8009b00 <_Balloc+0x64>
 8009ae6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009aea:	e00e      	b.n	8009b0a <_Balloc+0x6e>
 8009aec:	2221      	movs	r2, #33	; 0x21
 8009aee:	2104      	movs	r1, #4
 8009af0:	4620      	mov	r0, r4
 8009af2:	f000 fb57 	bl	800a1a4 <_calloc_r>
 8009af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009af8:	60f0      	str	r0, [r6, #12]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1e4      	bne.n	8009aca <_Balloc+0x2e>
 8009b00:	2000      	movs	r0, #0
 8009b02:	bd70      	pop	{r4, r5, r6, pc}
 8009b04:	6802      	ldr	r2, [r0, #0]
 8009b06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b10:	e7f7      	b.n	8009b02 <_Balloc+0x66>
 8009b12:	bf00      	nop
 8009b14:	0800b315 	.word	0x0800b315
 8009b18:	0800b398 	.word	0x0800b398

08009b1c <_Bfree>:
 8009b1c:	b570      	push	{r4, r5, r6, lr}
 8009b1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b20:	4605      	mov	r5, r0
 8009b22:	460c      	mov	r4, r1
 8009b24:	b976      	cbnz	r6, 8009b44 <_Bfree+0x28>
 8009b26:	2010      	movs	r0, #16
 8009b28:	f7ff ffb0 	bl	8009a8c <malloc>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	6268      	str	r0, [r5, #36]	; 0x24
 8009b30:	b920      	cbnz	r0, 8009b3c <_Bfree+0x20>
 8009b32:	4b09      	ldr	r3, [pc, #36]	; (8009b58 <_Bfree+0x3c>)
 8009b34:	4809      	ldr	r0, [pc, #36]	; (8009b5c <_Bfree+0x40>)
 8009b36:	218a      	movs	r1, #138	; 0x8a
 8009b38:	f000 fd96 	bl	800a668 <__assert_func>
 8009b3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b40:	6006      	str	r6, [r0, #0]
 8009b42:	60c6      	str	r6, [r0, #12]
 8009b44:	b13c      	cbz	r4, 8009b56 <_Bfree+0x3a>
 8009b46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b48:	6862      	ldr	r2, [r4, #4]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b50:	6021      	str	r1, [r4, #0]
 8009b52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b56:	bd70      	pop	{r4, r5, r6, pc}
 8009b58:	0800b315 	.word	0x0800b315
 8009b5c:	0800b398 	.word	0x0800b398

08009b60 <__multadd>:
 8009b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b64:	690d      	ldr	r5, [r1, #16]
 8009b66:	4607      	mov	r7, r0
 8009b68:	460c      	mov	r4, r1
 8009b6a:	461e      	mov	r6, r3
 8009b6c:	f101 0c14 	add.w	ip, r1, #20
 8009b70:	2000      	movs	r0, #0
 8009b72:	f8dc 3000 	ldr.w	r3, [ip]
 8009b76:	b299      	uxth	r1, r3
 8009b78:	fb02 6101 	mla	r1, r2, r1, r6
 8009b7c:	0c1e      	lsrs	r6, r3, #16
 8009b7e:	0c0b      	lsrs	r3, r1, #16
 8009b80:	fb02 3306 	mla	r3, r2, r6, r3
 8009b84:	b289      	uxth	r1, r1
 8009b86:	3001      	adds	r0, #1
 8009b88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b8c:	4285      	cmp	r5, r0
 8009b8e:	f84c 1b04 	str.w	r1, [ip], #4
 8009b92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b96:	dcec      	bgt.n	8009b72 <__multadd+0x12>
 8009b98:	b30e      	cbz	r6, 8009bde <__multadd+0x7e>
 8009b9a:	68a3      	ldr	r3, [r4, #8]
 8009b9c:	42ab      	cmp	r3, r5
 8009b9e:	dc19      	bgt.n	8009bd4 <__multadd+0x74>
 8009ba0:	6861      	ldr	r1, [r4, #4]
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	3101      	adds	r1, #1
 8009ba6:	f7ff ff79 	bl	8009a9c <_Balloc>
 8009baa:	4680      	mov	r8, r0
 8009bac:	b928      	cbnz	r0, 8009bba <__multadd+0x5a>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	4b0c      	ldr	r3, [pc, #48]	; (8009be4 <__multadd+0x84>)
 8009bb2:	480d      	ldr	r0, [pc, #52]	; (8009be8 <__multadd+0x88>)
 8009bb4:	21b5      	movs	r1, #181	; 0xb5
 8009bb6:	f000 fd57 	bl	800a668 <__assert_func>
 8009bba:	6922      	ldr	r2, [r4, #16]
 8009bbc:	3202      	adds	r2, #2
 8009bbe:	f104 010c 	add.w	r1, r4, #12
 8009bc2:	0092      	lsls	r2, r2, #2
 8009bc4:	300c      	adds	r0, #12
 8009bc6:	f7fe fc2d 	bl	8008424 <memcpy>
 8009bca:	4621      	mov	r1, r4
 8009bcc:	4638      	mov	r0, r7
 8009bce:	f7ff ffa5 	bl	8009b1c <_Bfree>
 8009bd2:	4644      	mov	r4, r8
 8009bd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009bd8:	3501      	adds	r5, #1
 8009bda:	615e      	str	r6, [r3, #20]
 8009bdc:	6125      	str	r5, [r4, #16]
 8009bde:	4620      	mov	r0, r4
 8009be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009be4:	0800b387 	.word	0x0800b387
 8009be8:	0800b398 	.word	0x0800b398

08009bec <__hi0bits>:
 8009bec:	0c03      	lsrs	r3, r0, #16
 8009bee:	041b      	lsls	r3, r3, #16
 8009bf0:	b9d3      	cbnz	r3, 8009c28 <__hi0bits+0x3c>
 8009bf2:	0400      	lsls	r0, r0, #16
 8009bf4:	2310      	movs	r3, #16
 8009bf6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009bfa:	bf04      	itt	eq
 8009bfc:	0200      	lsleq	r0, r0, #8
 8009bfe:	3308      	addeq	r3, #8
 8009c00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c04:	bf04      	itt	eq
 8009c06:	0100      	lsleq	r0, r0, #4
 8009c08:	3304      	addeq	r3, #4
 8009c0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c0e:	bf04      	itt	eq
 8009c10:	0080      	lsleq	r0, r0, #2
 8009c12:	3302      	addeq	r3, #2
 8009c14:	2800      	cmp	r0, #0
 8009c16:	db05      	blt.n	8009c24 <__hi0bits+0x38>
 8009c18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c1c:	f103 0301 	add.w	r3, r3, #1
 8009c20:	bf08      	it	eq
 8009c22:	2320      	moveq	r3, #32
 8009c24:	4618      	mov	r0, r3
 8009c26:	4770      	bx	lr
 8009c28:	2300      	movs	r3, #0
 8009c2a:	e7e4      	b.n	8009bf6 <__hi0bits+0xa>

08009c2c <__lo0bits>:
 8009c2c:	6803      	ldr	r3, [r0, #0]
 8009c2e:	f013 0207 	ands.w	r2, r3, #7
 8009c32:	4601      	mov	r1, r0
 8009c34:	d00b      	beq.n	8009c4e <__lo0bits+0x22>
 8009c36:	07da      	lsls	r2, r3, #31
 8009c38:	d423      	bmi.n	8009c82 <__lo0bits+0x56>
 8009c3a:	0798      	lsls	r0, r3, #30
 8009c3c:	bf49      	itett	mi
 8009c3e:	085b      	lsrmi	r3, r3, #1
 8009c40:	089b      	lsrpl	r3, r3, #2
 8009c42:	2001      	movmi	r0, #1
 8009c44:	600b      	strmi	r3, [r1, #0]
 8009c46:	bf5c      	itt	pl
 8009c48:	600b      	strpl	r3, [r1, #0]
 8009c4a:	2002      	movpl	r0, #2
 8009c4c:	4770      	bx	lr
 8009c4e:	b298      	uxth	r0, r3
 8009c50:	b9a8      	cbnz	r0, 8009c7e <__lo0bits+0x52>
 8009c52:	0c1b      	lsrs	r3, r3, #16
 8009c54:	2010      	movs	r0, #16
 8009c56:	b2da      	uxtb	r2, r3
 8009c58:	b90a      	cbnz	r2, 8009c5e <__lo0bits+0x32>
 8009c5a:	3008      	adds	r0, #8
 8009c5c:	0a1b      	lsrs	r3, r3, #8
 8009c5e:	071a      	lsls	r2, r3, #28
 8009c60:	bf04      	itt	eq
 8009c62:	091b      	lsreq	r3, r3, #4
 8009c64:	3004      	addeq	r0, #4
 8009c66:	079a      	lsls	r2, r3, #30
 8009c68:	bf04      	itt	eq
 8009c6a:	089b      	lsreq	r3, r3, #2
 8009c6c:	3002      	addeq	r0, #2
 8009c6e:	07da      	lsls	r2, r3, #31
 8009c70:	d403      	bmi.n	8009c7a <__lo0bits+0x4e>
 8009c72:	085b      	lsrs	r3, r3, #1
 8009c74:	f100 0001 	add.w	r0, r0, #1
 8009c78:	d005      	beq.n	8009c86 <__lo0bits+0x5a>
 8009c7a:	600b      	str	r3, [r1, #0]
 8009c7c:	4770      	bx	lr
 8009c7e:	4610      	mov	r0, r2
 8009c80:	e7e9      	b.n	8009c56 <__lo0bits+0x2a>
 8009c82:	2000      	movs	r0, #0
 8009c84:	4770      	bx	lr
 8009c86:	2020      	movs	r0, #32
 8009c88:	4770      	bx	lr
	...

08009c8c <__i2b>:
 8009c8c:	b510      	push	{r4, lr}
 8009c8e:	460c      	mov	r4, r1
 8009c90:	2101      	movs	r1, #1
 8009c92:	f7ff ff03 	bl	8009a9c <_Balloc>
 8009c96:	4602      	mov	r2, r0
 8009c98:	b928      	cbnz	r0, 8009ca6 <__i2b+0x1a>
 8009c9a:	4b05      	ldr	r3, [pc, #20]	; (8009cb0 <__i2b+0x24>)
 8009c9c:	4805      	ldr	r0, [pc, #20]	; (8009cb4 <__i2b+0x28>)
 8009c9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ca2:	f000 fce1 	bl	800a668 <__assert_func>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	6144      	str	r4, [r0, #20]
 8009caa:	6103      	str	r3, [r0, #16]
 8009cac:	bd10      	pop	{r4, pc}
 8009cae:	bf00      	nop
 8009cb0:	0800b387 	.word	0x0800b387
 8009cb4:	0800b398 	.word	0x0800b398

08009cb8 <__multiply>:
 8009cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cbc:	4691      	mov	r9, r2
 8009cbe:	690a      	ldr	r2, [r1, #16]
 8009cc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	bfb8      	it	lt
 8009cc8:	460b      	movlt	r3, r1
 8009cca:	460c      	mov	r4, r1
 8009ccc:	bfbc      	itt	lt
 8009cce:	464c      	movlt	r4, r9
 8009cd0:	4699      	movlt	r9, r3
 8009cd2:	6927      	ldr	r7, [r4, #16]
 8009cd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009cd8:	68a3      	ldr	r3, [r4, #8]
 8009cda:	6861      	ldr	r1, [r4, #4]
 8009cdc:	eb07 060a 	add.w	r6, r7, sl
 8009ce0:	42b3      	cmp	r3, r6
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	bfb8      	it	lt
 8009ce6:	3101      	addlt	r1, #1
 8009ce8:	f7ff fed8 	bl	8009a9c <_Balloc>
 8009cec:	b930      	cbnz	r0, 8009cfc <__multiply+0x44>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	4b44      	ldr	r3, [pc, #272]	; (8009e04 <__multiply+0x14c>)
 8009cf2:	4845      	ldr	r0, [pc, #276]	; (8009e08 <__multiply+0x150>)
 8009cf4:	f240 115d 	movw	r1, #349	; 0x15d
 8009cf8:	f000 fcb6 	bl	800a668 <__assert_func>
 8009cfc:	f100 0514 	add.w	r5, r0, #20
 8009d00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d04:	462b      	mov	r3, r5
 8009d06:	2200      	movs	r2, #0
 8009d08:	4543      	cmp	r3, r8
 8009d0a:	d321      	bcc.n	8009d50 <__multiply+0x98>
 8009d0c:	f104 0314 	add.w	r3, r4, #20
 8009d10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d14:	f109 0314 	add.w	r3, r9, #20
 8009d18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d1c:	9202      	str	r2, [sp, #8]
 8009d1e:	1b3a      	subs	r2, r7, r4
 8009d20:	3a15      	subs	r2, #21
 8009d22:	f022 0203 	bic.w	r2, r2, #3
 8009d26:	3204      	adds	r2, #4
 8009d28:	f104 0115 	add.w	r1, r4, #21
 8009d2c:	428f      	cmp	r7, r1
 8009d2e:	bf38      	it	cc
 8009d30:	2204      	movcc	r2, #4
 8009d32:	9201      	str	r2, [sp, #4]
 8009d34:	9a02      	ldr	r2, [sp, #8]
 8009d36:	9303      	str	r3, [sp, #12]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d80c      	bhi.n	8009d56 <__multiply+0x9e>
 8009d3c:	2e00      	cmp	r6, #0
 8009d3e:	dd03      	ble.n	8009d48 <__multiply+0x90>
 8009d40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d05a      	beq.n	8009dfe <__multiply+0x146>
 8009d48:	6106      	str	r6, [r0, #16]
 8009d4a:	b005      	add	sp, #20
 8009d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d50:	f843 2b04 	str.w	r2, [r3], #4
 8009d54:	e7d8      	b.n	8009d08 <__multiply+0x50>
 8009d56:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d5a:	f1ba 0f00 	cmp.w	sl, #0
 8009d5e:	d024      	beq.n	8009daa <__multiply+0xf2>
 8009d60:	f104 0e14 	add.w	lr, r4, #20
 8009d64:	46a9      	mov	r9, r5
 8009d66:	f04f 0c00 	mov.w	ip, #0
 8009d6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d6e:	f8d9 1000 	ldr.w	r1, [r9]
 8009d72:	fa1f fb82 	uxth.w	fp, r2
 8009d76:	b289      	uxth	r1, r1
 8009d78:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009d80:	f8d9 2000 	ldr.w	r2, [r9]
 8009d84:	4461      	add	r1, ip
 8009d86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d8a:	fb0a c20b 	mla	r2, sl, fp, ip
 8009d8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d92:	b289      	uxth	r1, r1
 8009d94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d98:	4577      	cmp	r7, lr
 8009d9a:	f849 1b04 	str.w	r1, [r9], #4
 8009d9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009da2:	d8e2      	bhi.n	8009d6a <__multiply+0xb2>
 8009da4:	9a01      	ldr	r2, [sp, #4]
 8009da6:	f845 c002 	str.w	ip, [r5, r2]
 8009daa:	9a03      	ldr	r2, [sp, #12]
 8009dac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009db0:	3304      	adds	r3, #4
 8009db2:	f1b9 0f00 	cmp.w	r9, #0
 8009db6:	d020      	beq.n	8009dfa <__multiply+0x142>
 8009db8:	6829      	ldr	r1, [r5, #0]
 8009dba:	f104 0c14 	add.w	ip, r4, #20
 8009dbe:	46ae      	mov	lr, r5
 8009dc0:	f04f 0a00 	mov.w	sl, #0
 8009dc4:	f8bc b000 	ldrh.w	fp, [ip]
 8009dc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009dcc:	fb09 220b 	mla	r2, r9, fp, r2
 8009dd0:	4492      	add	sl, r2
 8009dd2:	b289      	uxth	r1, r1
 8009dd4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009dd8:	f84e 1b04 	str.w	r1, [lr], #4
 8009ddc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009de0:	f8be 1000 	ldrh.w	r1, [lr]
 8009de4:	0c12      	lsrs	r2, r2, #16
 8009de6:	fb09 1102 	mla	r1, r9, r2, r1
 8009dea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009dee:	4567      	cmp	r7, ip
 8009df0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009df4:	d8e6      	bhi.n	8009dc4 <__multiply+0x10c>
 8009df6:	9a01      	ldr	r2, [sp, #4]
 8009df8:	50a9      	str	r1, [r5, r2]
 8009dfa:	3504      	adds	r5, #4
 8009dfc:	e79a      	b.n	8009d34 <__multiply+0x7c>
 8009dfe:	3e01      	subs	r6, #1
 8009e00:	e79c      	b.n	8009d3c <__multiply+0x84>
 8009e02:	bf00      	nop
 8009e04:	0800b387 	.word	0x0800b387
 8009e08:	0800b398 	.word	0x0800b398

08009e0c <__pow5mult>:
 8009e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e10:	4615      	mov	r5, r2
 8009e12:	f012 0203 	ands.w	r2, r2, #3
 8009e16:	4606      	mov	r6, r0
 8009e18:	460f      	mov	r7, r1
 8009e1a:	d007      	beq.n	8009e2c <__pow5mult+0x20>
 8009e1c:	4c25      	ldr	r4, [pc, #148]	; (8009eb4 <__pow5mult+0xa8>)
 8009e1e:	3a01      	subs	r2, #1
 8009e20:	2300      	movs	r3, #0
 8009e22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e26:	f7ff fe9b 	bl	8009b60 <__multadd>
 8009e2a:	4607      	mov	r7, r0
 8009e2c:	10ad      	asrs	r5, r5, #2
 8009e2e:	d03d      	beq.n	8009eac <__pow5mult+0xa0>
 8009e30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e32:	b97c      	cbnz	r4, 8009e54 <__pow5mult+0x48>
 8009e34:	2010      	movs	r0, #16
 8009e36:	f7ff fe29 	bl	8009a8c <malloc>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	6270      	str	r0, [r6, #36]	; 0x24
 8009e3e:	b928      	cbnz	r0, 8009e4c <__pow5mult+0x40>
 8009e40:	4b1d      	ldr	r3, [pc, #116]	; (8009eb8 <__pow5mult+0xac>)
 8009e42:	481e      	ldr	r0, [pc, #120]	; (8009ebc <__pow5mult+0xb0>)
 8009e44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009e48:	f000 fc0e 	bl	800a668 <__assert_func>
 8009e4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e50:	6004      	str	r4, [r0, #0]
 8009e52:	60c4      	str	r4, [r0, #12]
 8009e54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009e58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e5c:	b94c      	cbnz	r4, 8009e72 <__pow5mult+0x66>
 8009e5e:	f240 2171 	movw	r1, #625	; 0x271
 8009e62:	4630      	mov	r0, r6
 8009e64:	f7ff ff12 	bl	8009c8c <__i2b>
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e6e:	4604      	mov	r4, r0
 8009e70:	6003      	str	r3, [r0, #0]
 8009e72:	f04f 0900 	mov.w	r9, #0
 8009e76:	07eb      	lsls	r3, r5, #31
 8009e78:	d50a      	bpl.n	8009e90 <__pow5mult+0x84>
 8009e7a:	4639      	mov	r1, r7
 8009e7c:	4622      	mov	r2, r4
 8009e7e:	4630      	mov	r0, r6
 8009e80:	f7ff ff1a 	bl	8009cb8 <__multiply>
 8009e84:	4639      	mov	r1, r7
 8009e86:	4680      	mov	r8, r0
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f7ff fe47 	bl	8009b1c <_Bfree>
 8009e8e:	4647      	mov	r7, r8
 8009e90:	106d      	asrs	r5, r5, #1
 8009e92:	d00b      	beq.n	8009eac <__pow5mult+0xa0>
 8009e94:	6820      	ldr	r0, [r4, #0]
 8009e96:	b938      	cbnz	r0, 8009ea8 <__pow5mult+0x9c>
 8009e98:	4622      	mov	r2, r4
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	f7ff ff0b 	bl	8009cb8 <__multiply>
 8009ea2:	6020      	str	r0, [r4, #0]
 8009ea4:	f8c0 9000 	str.w	r9, [r0]
 8009ea8:	4604      	mov	r4, r0
 8009eaa:	e7e4      	b.n	8009e76 <__pow5mult+0x6a>
 8009eac:	4638      	mov	r0, r7
 8009eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eb2:	bf00      	nop
 8009eb4:	0800b4e8 	.word	0x0800b4e8
 8009eb8:	0800b315 	.word	0x0800b315
 8009ebc:	0800b398 	.word	0x0800b398

08009ec0 <__lshift>:
 8009ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec4:	460c      	mov	r4, r1
 8009ec6:	6849      	ldr	r1, [r1, #4]
 8009ec8:	6923      	ldr	r3, [r4, #16]
 8009eca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ece:	68a3      	ldr	r3, [r4, #8]
 8009ed0:	4607      	mov	r7, r0
 8009ed2:	4691      	mov	r9, r2
 8009ed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ed8:	f108 0601 	add.w	r6, r8, #1
 8009edc:	42b3      	cmp	r3, r6
 8009ede:	db0b      	blt.n	8009ef8 <__lshift+0x38>
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	f7ff fddb 	bl	8009a9c <_Balloc>
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	b948      	cbnz	r0, 8009efe <__lshift+0x3e>
 8009eea:	4602      	mov	r2, r0
 8009eec:	4b2a      	ldr	r3, [pc, #168]	; (8009f98 <__lshift+0xd8>)
 8009eee:	482b      	ldr	r0, [pc, #172]	; (8009f9c <__lshift+0xdc>)
 8009ef0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ef4:	f000 fbb8 	bl	800a668 <__assert_func>
 8009ef8:	3101      	adds	r1, #1
 8009efa:	005b      	lsls	r3, r3, #1
 8009efc:	e7ee      	b.n	8009edc <__lshift+0x1c>
 8009efe:	2300      	movs	r3, #0
 8009f00:	f100 0114 	add.w	r1, r0, #20
 8009f04:	f100 0210 	add.w	r2, r0, #16
 8009f08:	4618      	mov	r0, r3
 8009f0a:	4553      	cmp	r3, sl
 8009f0c:	db37      	blt.n	8009f7e <__lshift+0xbe>
 8009f0e:	6920      	ldr	r0, [r4, #16]
 8009f10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f14:	f104 0314 	add.w	r3, r4, #20
 8009f18:	f019 091f 	ands.w	r9, r9, #31
 8009f1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f24:	d02f      	beq.n	8009f86 <__lshift+0xc6>
 8009f26:	f1c9 0e20 	rsb	lr, r9, #32
 8009f2a:	468a      	mov	sl, r1
 8009f2c:	f04f 0c00 	mov.w	ip, #0
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	fa02 f209 	lsl.w	r2, r2, r9
 8009f36:	ea42 020c 	orr.w	r2, r2, ip
 8009f3a:	f84a 2b04 	str.w	r2, [sl], #4
 8009f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f42:	4298      	cmp	r0, r3
 8009f44:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009f48:	d8f2      	bhi.n	8009f30 <__lshift+0x70>
 8009f4a:	1b03      	subs	r3, r0, r4
 8009f4c:	3b15      	subs	r3, #21
 8009f4e:	f023 0303 	bic.w	r3, r3, #3
 8009f52:	3304      	adds	r3, #4
 8009f54:	f104 0215 	add.w	r2, r4, #21
 8009f58:	4290      	cmp	r0, r2
 8009f5a:	bf38      	it	cc
 8009f5c:	2304      	movcc	r3, #4
 8009f5e:	f841 c003 	str.w	ip, [r1, r3]
 8009f62:	f1bc 0f00 	cmp.w	ip, #0
 8009f66:	d001      	beq.n	8009f6c <__lshift+0xac>
 8009f68:	f108 0602 	add.w	r6, r8, #2
 8009f6c:	3e01      	subs	r6, #1
 8009f6e:	4638      	mov	r0, r7
 8009f70:	612e      	str	r6, [r5, #16]
 8009f72:	4621      	mov	r1, r4
 8009f74:	f7ff fdd2 	bl	8009b1c <_Bfree>
 8009f78:	4628      	mov	r0, r5
 8009f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f82:	3301      	adds	r3, #1
 8009f84:	e7c1      	b.n	8009f0a <__lshift+0x4a>
 8009f86:	3904      	subs	r1, #4
 8009f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f90:	4298      	cmp	r0, r3
 8009f92:	d8f9      	bhi.n	8009f88 <__lshift+0xc8>
 8009f94:	e7ea      	b.n	8009f6c <__lshift+0xac>
 8009f96:	bf00      	nop
 8009f98:	0800b387 	.word	0x0800b387
 8009f9c:	0800b398 	.word	0x0800b398

08009fa0 <__mcmp>:
 8009fa0:	b530      	push	{r4, r5, lr}
 8009fa2:	6902      	ldr	r2, [r0, #16]
 8009fa4:	690c      	ldr	r4, [r1, #16]
 8009fa6:	1b12      	subs	r2, r2, r4
 8009fa8:	d10e      	bne.n	8009fc8 <__mcmp+0x28>
 8009faa:	f100 0314 	add.w	r3, r0, #20
 8009fae:	3114      	adds	r1, #20
 8009fb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009fb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009fb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009fbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009fc0:	42a5      	cmp	r5, r4
 8009fc2:	d003      	beq.n	8009fcc <__mcmp+0x2c>
 8009fc4:	d305      	bcc.n	8009fd2 <__mcmp+0x32>
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	4610      	mov	r0, r2
 8009fca:	bd30      	pop	{r4, r5, pc}
 8009fcc:	4283      	cmp	r3, r0
 8009fce:	d3f3      	bcc.n	8009fb8 <__mcmp+0x18>
 8009fd0:	e7fa      	b.n	8009fc8 <__mcmp+0x28>
 8009fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd6:	e7f7      	b.n	8009fc8 <__mcmp+0x28>

08009fd8 <__mdiff>:
 8009fd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fdc:	460c      	mov	r4, r1
 8009fde:	4606      	mov	r6, r0
 8009fe0:	4611      	mov	r1, r2
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	4690      	mov	r8, r2
 8009fe6:	f7ff ffdb 	bl	8009fa0 <__mcmp>
 8009fea:	1e05      	subs	r5, r0, #0
 8009fec:	d110      	bne.n	800a010 <__mdiff+0x38>
 8009fee:	4629      	mov	r1, r5
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	f7ff fd53 	bl	8009a9c <_Balloc>
 8009ff6:	b930      	cbnz	r0, 800a006 <__mdiff+0x2e>
 8009ff8:	4b3a      	ldr	r3, [pc, #232]	; (800a0e4 <__mdiff+0x10c>)
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	f240 2132 	movw	r1, #562	; 0x232
 800a000:	4839      	ldr	r0, [pc, #228]	; (800a0e8 <__mdiff+0x110>)
 800a002:	f000 fb31 	bl	800a668 <__assert_func>
 800a006:	2301      	movs	r3, #1
 800a008:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a00c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a010:	bfa4      	itt	ge
 800a012:	4643      	movge	r3, r8
 800a014:	46a0      	movge	r8, r4
 800a016:	4630      	mov	r0, r6
 800a018:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a01c:	bfa6      	itte	ge
 800a01e:	461c      	movge	r4, r3
 800a020:	2500      	movge	r5, #0
 800a022:	2501      	movlt	r5, #1
 800a024:	f7ff fd3a 	bl	8009a9c <_Balloc>
 800a028:	b920      	cbnz	r0, 800a034 <__mdiff+0x5c>
 800a02a:	4b2e      	ldr	r3, [pc, #184]	; (800a0e4 <__mdiff+0x10c>)
 800a02c:	4602      	mov	r2, r0
 800a02e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a032:	e7e5      	b.n	800a000 <__mdiff+0x28>
 800a034:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a038:	6926      	ldr	r6, [r4, #16]
 800a03a:	60c5      	str	r5, [r0, #12]
 800a03c:	f104 0914 	add.w	r9, r4, #20
 800a040:	f108 0514 	add.w	r5, r8, #20
 800a044:	f100 0e14 	add.w	lr, r0, #20
 800a048:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a04c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a050:	f108 0210 	add.w	r2, r8, #16
 800a054:	46f2      	mov	sl, lr
 800a056:	2100      	movs	r1, #0
 800a058:	f859 3b04 	ldr.w	r3, [r9], #4
 800a05c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a060:	fa1f f883 	uxth.w	r8, r3
 800a064:	fa11 f18b 	uxtah	r1, r1, fp
 800a068:	0c1b      	lsrs	r3, r3, #16
 800a06a:	eba1 0808 	sub.w	r8, r1, r8
 800a06e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a072:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a076:	fa1f f888 	uxth.w	r8, r8
 800a07a:	1419      	asrs	r1, r3, #16
 800a07c:	454e      	cmp	r6, r9
 800a07e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a082:	f84a 3b04 	str.w	r3, [sl], #4
 800a086:	d8e7      	bhi.n	800a058 <__mdiff+0x80>
 800a088:	1b33      	subs	r3, r6, r4
 800a08a:	3b15      	subs	r3, #21
 800a08c:	f023 0303 	bic.w	r3, r3, #3
 800a090:	3304      	adds	r3, #4
 800a092:	3415      	adds	r4, #21
 800a094:	42a6      	cmp	r6, r4
 800a096:	bf38      	it	cc
 800a098:	2304      	movcc	r3, #4
 800a09a:	441d      	add	r5, r3
 800a09c:	4473      	add	r3, lr
 800a09e:	469e      	mov	lr, r3
 800a0a0:	462e      	mov	r6, r5
 800a0a2:	4566      	cmp	r6, ip
 800a0a4:	d30e      	bcc.n	800a0c4 <__mdiff+0xec>
 800a0a6:	f10c 0203 	add.w	r2, ip, #3
 800a0aa:	1b52      	subs	r2, r2, r5
 800a0ac:	f022 0203 	bic.w	r2, r2, #3
 800a0b0:	3d03      	subs	r5, #3
 800a0b2:	45ac      	cmp	ip, r5
 800a0b4:	bf38      	it	cc
 800a0b6:	2200      	movcc	r2, #0
 800a0b8:	441a      	add	r2, r3
 800a0ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a0be:	b17b      	cbz	r3, 800a0e0 <__mdiff+0x108>
 800a0c0:	6107      	str	r7, [r0, #16]
 800a0c2:	e7a3      	b.n	800a00c <__mdiff+0x34>
 800a0c4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a0c8:	fa11 f288 	uxtah	r2, r1, r8
 800a0cc:	1414      	asrs	r4, r2, #16
 800a0ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a0d2:	b292      	uxth	r2, r2
 800a0d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a0d8:	f84e 2b04 	str.w	r2, [lr], #4
 800a0dc:	1421      	asrs	r1, r4, #16
 800a0de:	e7e0      	b.n	800a0a2 <__mdiff+0xca>
 800a0e0:	3f01      	subs	r7, #1
 800a0e2:	e7ea      	b.n	800a0ba <__mdiff+0xe2>
 800a0e4:	0800b387 	.word	0x0800b387
 800a0e8:	0800b398 	.word	0x0800b398

0800a0ec <__d2b>:
 800a0ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0f0:	4689      	mov	r9, r1
 800a0f2:	2101      	movs	r1, #1
 800a0f4:	ec57 6b10 	vmov	r6, r7, d0
 800a0f8:	4690      	mov	r8, r2
 800a0fa:	f7ff fccf 	bl	8009a9c <_Balloc>
 800a0fe:	4604      	mov	r4, r0
 800a100:	b930      	cbnz	r0, 800a110 <__d2b+0x24>
 800a102:	4602      	mov	r2, r0
 800a104:	4b25      	ldr	r3, [pc, #148]	; (800a19c <__d2b+0xb0>)
 800a106:	4826      	ldr	r0, [pc, #152]	; (800a1a0 <__d2b+0xb4>)
 800a108:	f240 310a 	movw	r1, #778	; 0x30a
 800a10c:	f000 faac 	bl	800a668 <__assert_func>
 800a110:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a114:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a118:	bb35      	cbnz	r5, 800a168 <__d2b+0x7c>
 800a11a:	2e00      	cmp	r6, #0
 800a11c:	9301      	str	r3, [sp, #4]
 800a11e:	d028      	beq.n	800a172 <__d2b+0x86>
 800a120:	4668      	mov	r0, sp
 800a122:	9600      	str	r6, [sp, #0]
 800a124:	f7ff fd82 	bl	8009c2c <__lo0bits>
 800a128:	9900      	ldr	r1, [sp, #0]
 800a12a:	b300      	cbz	r0, 800a16e <__d2b+0x82>
 800a12c:	9a01      	ldr	r2, [sp, #4]
 800a12e:	f1c0 0320 	rsb	r3, r0, #32
 800a132:	fa02 f303 	lsl.w	r3, r2, r3
 800a136:	430b      	orrs	r3, r1
 800a138:	40c2      	lsrs	r2, r0
 800a13a:	6163      	str	r3, [r4, #20]
 800a13c:	9201      	str	r2, [sp, #4]
 800a13e:	9b01      	ldr	r3, [sp, #4]
 800a140:	61a3      	str	r3, [r4, #24]
 800a142:	2b00      	cmp	r3, #0
 800a144:	bf14      	ite	ne
 800a146:	2202      	movne	r2, #2
 800a148:	2201      	moveq	r2, #1
 800a14a:	6122      	str	r2, [r4, #16]
 800a14c:	b1d5      	cbz	r5, 800a184 <__d2b+0x98>
 800a14e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a152:	4405      	add	r5, r0
 800a154:	f8c9 5000 	str.w	r5, [r9]
 800a158:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a15c:	f8c8 0000 	str.w	r0, [r8]
 800a160:	4620      	mov	r0, r4
 800a162:	b003      	add	sp, #12
 800a164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a16c:	e7d5      	b.n	800a11a <__d2b+0x2e>
 800a16e:	6161      	str	r1, [r4, #20]
 800a170:	e7e5      	b.n	800a13e <__d2b+0x52>
 800a172:	a801      	add	r0, sp, #4
 800a174:	f7ff fd5a 	bl	8009c2c <__lo0bits>
 800a178:	9b01      	ldr	r3, [sp, #4]
 800a17a:	6163      	str	r3, [r4, #20]
 800a17c:	2201      	movs	r2, #1
 800a17e:	6122      	str	r2, [r4, #16]
 800a180:	3020      	adds	r0, #32
 800a182:	e7e3      	b.n	800a14c <__d2b+0x60>
 800a184:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a188:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a18c:	f8c9 0000 	str.w	r0, [r9]
 800a190:	6918      	ldr	r0, [r3, #16]
 800a192:	f7ff fd2b 	bl	8009bec <__hi0bits>
 800a196:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a19a:	e7df      	b.n	800a15c <__d2b+0x70>
 800a19c:	0800b387 	.word	0x0800b387
 800a1a0:	0800b398 	.word	0x0800b398

0800a1a4 <_calloc_r>:
 800a1a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1a6:	fba1 2402 	umull	r2, r4, r1, r2
 800a1aa:	b94c      	cbnz	r4, 800a1c0 <_calloc_r+0x1c>
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	9201      	str	r2, [sp, #4]
 800a1b0:	f000 f87a 	bl	800a2a8 <_malloc_r>
 800a1b4:	9a01      	ldr	r2, [sp, #4]
 800a1b6:	4605      	mov	r5, r0
 800a1b8:	b930      	cbnz	r0, 800a1c8 <_calloc_r+0x24>
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	b003      	add	sp, #12
 800a1be:	bd30      	pop	{r4, r5, pc}
 800a1c0:	220c      	movs	r2, #12
 800a1c2:	6002      	str	r2, [r0, #0]
 800a1c4:	2500      	movs	r5, #0
 800a1c6:	e7f8      	b.n	800a1ba <_calloc_r+0x16>
 800a1c8:	4621      	mov	r1, r4
 800a1ca:	f7fe f939 	bl	8008440 <memset>
 800a1ce:	e7f4      	b.n	800a1ba <_calloc_r+0x16>

0800a1d0 <_free_r>:
 800a1d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1d2:	2900      	cmp	r1, #0
 800a1d4:	d044      	beq.n	800a260 <_free_r+0x90>
 800a1d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1da:	9001      	str	r0, [sp, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f1a1 0404 	sub.w	r4, r1, #4
 800a1e2:	bfb8      	it	lt
 800a1e4:	18e4      	addlt	r4, r4, r3
 800a1e6:	f000 fa9b 	bl	800a720 <__malloc_lock>
 800a1ea:	4a1e      	ldr	r2, [pc, #120]	; (800a264 <_free_r+0x94>)
 800a1ec:	9801      	ldr	r0, [sp, #4]
 800a1ee:	6813      	ldr	r3, [r2, #0]
 800a1f0:	b933      	cbnz	r3, 800a200 <_free_r+0x30>
 800a1f2:	6063      	str	r3, [r4, #4]
 800a1f4:	6014      	str	r4, [r2, #0]
 800a1f6:	b003      	add	sp, #12
 800a1f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1fc:	f000 ba96 	b.w	800a72c <__malloc_unlock>
 800a200:	42a3      	cmp	r3, r4
 800a202:	d908      	bls.n	800a216 <_free_r+0x46>
 800a204:	6825      	ldr	r5, [r4, #0]
 800a206:	1961      	adds	r1, r4, r5
 800a208:	428b      	cmp	r3, r1
 800a20a:	bf01      	itttt	eq
 800a20c:	6819      	ldreq	r1, [r3, #0]
 800a20e:	685b      	ldreq	r3, [r3, #4]
 800a210:	1949      	addeq	r1, r1, r5
 800a212:	6021      	streq	r1, [r4, #0]
 800a214:	e7ed      	b.n	800a1f2 <_free_r+0x22>
 800a216:	461a      	mov	r2, r3
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	b10b      	cbz	r3, 800a220 <_free_r+0x50>
 800a21c:	42a3      	cmp	r3, r4
 800a21e:	d9fa      	bls.n	800a216 <_free_r+0x46>
 800a220:	6811      	ldr	r1, [r2, #0]
 800a222:	1855      	adds	r5, r2, r1
 800a224:	42a5      	cmp	r5, r4
 800a226:	d10b      	bne.n	800a240 <_free_r+0x70>
 800a228:	6824      	ldr	r4, [r4, #0]
 800a22a:	4421      	add	r1, r4
 800a22c:	1854      	adds	r4, r2, r1
 800a22e:	42a3      	cmp	r3, r4
 800a230:	6011      	str	r1, [r2, #0]
 800a232:	d1e0      	bne.n	800a1f6 <_free_r+0x26>
 800a234:	681c      	ldr	r4, [r3, #0]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	6053      	str	r3, [r2, #4]
 800a23a:	4421      	add	r1, r4
 800a23c:	6011      	str	r1, [r2, #0]
 800a23e:	e7da      	b.n	800a1f6 <_free_r+0x26>
 800a240:	d902      	bls.n	800a248 <_free_r+0x78>
 800a242:	230c      	movs	r3, #12
 800a244:	6003      	str	r3, [r0, #0]
 800a246:	e7d6      	b.n	800a1f6 <_free_r+0x26>
 800a248:	6825      	ldr	r5, [r4, #0]
 800a24a:	1961      	adds	r1, r4, r5
 800a24c:	428b      	cmp	r3, r1
 800a24e:	bf04      	itt	eq
 800a250:	6819      	ldreq	r1, [r3, #0]
 800a252:	685b      	ldreq	r3, [r3, #4]
 800a254:	6063      	str	r3, [r4, #4]
 800a256:	bf04      	itt	eq
 800a258:	1949      	addeq	r1, r1, r5
 800a25a:	6021      	streq	r1, [r4, #0]
 800a25c:	6054      	str	r4, [r2, #4]
 800a25e:	e7ca      	b.n	800a1f6 <_free_r+0x26>
 800a260:	b003      	add	sp, #12
 800a262:	bd30      	pop	{r4, r5, pc}
 800a264:	20002024 	.word	0x20002024

0800a268 <sbrk_aligned>:
 800a268:	b570      	push	{r4, r5, r6, lr}
 800a26a:	4e0e      	ldr	r6, [pc, #56]	; (800a2a4 <sbrk_aligned+0x3c>)
 800a26c:	460c      	mov	r4, r1
 800a26e:	6831      	ldr	r1, [r6, #0]
 800a270:	4605      	mov	r5, r0
 800a272:	b911      	cbnz	r1, 800a27a <sbrk_aligned+0x12>
 800a274:	f000 f9e8 	bl	800a648 <_sbrk_r>
 800a278:	6030      	str	r0, [r6, #0]
 800a27a:	4621      	mov	r1, r4
 800a27c:	4628      	mov	r0, r5
 800a27e:	f000 f9e3 	bl	800a648 <_sbrk_r>
 800a282:	1c43      	adds	r3, r0, #1
 800a284:	d00a      	beq.n	800a29c <sbrk_aligned+0x34>
 800a286:	1cc4      	adds	r4, r0, #3
 800a288:	f024 0403 	bic.w	r4, r4, #3
 800a28c:	42a0      	cmp	r0, r4
 800a28e:	d007      	beq.n	800a2a0 <sbrk_aligned+0x38>
 800a290:	1a21      	subs	r1, r4, r0
 800a292:	4628      	mov	r0, r5
 800a294:	f000 f9d8 	bl	800a648 <_sbrk_r>
 800a298:	3001      	adds	r0, #1
 800a29a:	d101      	bne.n	800a2a0 <sbrk_aligned+0x38>
 800a29c:	f04f 34ff 	mov.w	r4, #4294967295
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	bd70      	pop	{r4, r5, r6, pc}
 800a2a4:	20002028 	.word	0x20002028

0800a2a8 <_malloc_r>:
 800a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ac:	1ccd      	adds	r5, r1, #3
 800a2ae:	f025 0503 	bic.w	r5, r5, #3
 800a2b2:	3508      	adds	r5, #8
 800a2b4:	2d0c      	cmp	r5, #12
 800a2b6:	bf38      	it	cc
 800a2b8:	250c      	movcc	r5, #12
 800a2ba:	2d00      	cmp	r5, #0
 800a2bc:	4607      	mov	r7, r0
 800a2be:	db01      	blt.n	800a2c4 <_malloc_r+0x1c>
 800a2c0:	42a9      	cmp	r1, r5
 800a2c2:	d905      	bls.n	800a2d0 <_malloc_r+0x28>
 800a2c4:	230c      	movs	r3, #12
 800a2c6:	603b      	str	r3, [r7, #0]
 800a2c8:	2600      	movs	r6, #0
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d0:	4e2e      	ldr	r6, [pc, #184]	; (800a38c <_malloc_r+0xe4>)
 800a2d2:	f000 fa25 	bl	800a720 <__malloc_lock>
 800a2d6:	6833      	ldr	r3, [r6, #0]
 800a2d8:	461c      	mov	r4, r3
 800a2da:	bb34      	cbnz	r4, 800a32a <_malloc_r+0x82>
 800a2dc:	4629      	mov	r1, r5
 800a2de:	4638      	mov	r0, r7
 800a2e0:	f7ff ffc2 	bl	800a268 <sbrk_aligned>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	d14d      	bne.n	800a386 <_malloc_r+0xde>
 800a2ea:	6834      	ldr	r4, [r6, #0]
 800a2ec:	4626      	mov	r6, r4
 800a2ee:	2e00      	cmp	r6, #0
 800a2f0:	d140      	bne.n	800a374 <_malloc_r+0xcc>
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	4631      	mov	r1, r6
 800a2f6:	4638      	mov	r0, r7
 800a2f8:	eb04 0803 	add.w	r8, r4, r3
 800a2fc:	f000 f9a4 	bl	800a648 <_sbrk_r>
 800a300:	4580      	cmp	r8, r0
 800a302:	d13a      	bne.n	800a37a <_malloc_r+0xd2>
 800a304:	6821      	ldr	r1, [r4, #0]
 800a306:	3503      	adds	r5, #3
 800a308:	1a6d      	subs	r5, r5, r1
 800a30a:	f025 0503 	bic.w	r5, r5, #3
 800a30e:	3508      	adds	r5, #8
 800a310:	2d0c      	cmp	r5, #12
 800a312:	bf38      	it	cc
 800a314:	250c      	movcc	r5, #12
 800a316:	4629      	mov	r1, r5
 800a318:	4638      	mov	r0, r7
 800a31a:	f7ff ffa5 	bl	800a268 <sbrk_aligned>
 800a31e:	3001      	adds	r0, #1
 800a320:	d02b      	beq.n	800a37a <_malloc_r+0xd2>
 800a322:	6823      	ldr	r3, [r4, #0]
 800a324:	442b      	add	r3, r5
 800a326:	6023      	str	r3, [r4, #0]
 800a328:	e00e      	b.n	800a348 <_malloc_r+0xa0>
 800a32a:	6822      	ldr	r2, [r4, #0]
 800a32c:	1b52      	subs	r2, r2, r5
 800a32e:	d41e      	bmi.n	800a36e <_malloc_r+0xc6>
 800a330:	2a0b      	cmp	r2, #11
 800a332:	d916      	bls.n	800a362 <_malloc_r+0xba>
 800a334:	1961      	adds	r1, r4, r5
 800a336:	42a3      	cmp	r3, r4
 800a338:	6025      	str	r5, [r4, #0]
 800a33a:	bf18      	it	ne
 800a33c:	6059      	strne	r1, [r3, #4]
 800a33e:	6863      	ldr	r3, [r4, #4]
 800a340:	bf08      	it	eq
 800a342:	6031      	streq	r1, [r6, #0]
 800a344:	5162      	str	r2, [r4, r5]
 800a346:	604b      	str	r3, [r1, #4]
 800a348:	4638      	mov	r0, r7
 800a34a:	f104 060b 	add.w	r6, r4, #11
 800a34e:	f000 f9ed 	bl	800a72c <__malloc_unlock>
 800a352:	f026 0607 	bic.w	r6, r6, #7
 800a356:	1d23      	adds	r3, r4, #4
 800a358:	1af2      	subs	r2, r6, r3
 800a35a:	d0b6      	beq.n	800a2ca <_malloc_r+0x22>
 800a35c:	1b9b      	subs	r3, r3, r6
 800a35e:	50a3      	str	r3, [r4, r2]
 800a360:	e7b3      	b.n	800a2ca <_malloc_r+0x22>
 800a362:	6862      	ldr	r2, [r4, #4]
 800a364:	42a3      	cmp	r3, r4
 800a366:	bf0c      	ite	eq
 800a368:	6032      	streq	r2, [r6, #0]
 800a36a:	605a      	strne	r2, [r3, #4]
 800a36c:	e7ec      	b.n	800a348 <_malloc_r+0xa0>
 800a36e:	4623      	mov	r3, r4
 800a370:	6864      	ldr	r4, [r4, #4]
 800a372:	e7b2      	b.n	800a2da <_malloc_r+0x32>
 800a374:	4634      	mov	r4, r6
 800a376:	6876      	ldr	r6, [r6, #4]
 800a378:	e7b9      	b.n	800a2ee <_malloc_r+0x46>
 800a37a:	230c      	movs	r3, #12
 800a37c:	603b      	str	r3, [r7, #0]
 800a37e:	4638      	mov	r0, r7
 800a380:	f000 f9d4 	bl	800a72c <__malloc_unlock>
 800a384:	e7a1      	b.n	800a2ca <_malloc_r+0x22>
 800a386:	6025      	str	r5, [r4, #0]
 800a388:	e7de      	b.n	800a348 <_malloc_r+0xa0>
 800a38a:	bf00      	nop
 800a38c:	20002024 	.word	0x20002024

0800a390 <__ssputs_r>:
 800a390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a394:	688e      	ldr	r6, [r1, #8]
 800a396:	429e      	cmp	r6, r3
 800a398:	4682      	mov	sl, r0
 800a39a:	460c      	mov	r4, r1
 800a39c:	4690      	mov	r8, r2
 800a39e:	461f      	mov	r7, r3
 800a3a0:	d838      	bhi.n	800a414 <__ssputs_r+0x84>
 800a3a2:	898a      	ldrh	r2, [r1, #12]
 800a3a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3a8:	d032      	beq.n	800a410 <__ssputs_r+0x80>
 800a3aa:	6825      	ldr	r5, [r4, #0]
 800a3ac:	6909      	ldr	r1, [r1, #16]
 800a3ae:	eba5 0901 	sub.w	r9, r5, r1
 800a3b2:	6965      	ldr	r5, [r4, #20]
 800a3b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3bc:	3301      	adds	r3, #1
 800a3be:	444b      	add	r3, r9
 800a3c0:	106d      	asrs	r5, r5, #1
 800a3c2:	429d      	cmp	r5, r3
 800a3c4:	bf38      	it	cc
 800a3c6:	461d      	movcc	r5, r3
 800a3c8:	0553      	lsls	r3, r2, #21
 800a3ca:	d531      	bpl.n	800a430 <__ssputs_r+0xa0>
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	f7ff ff6b 	bl	800a2a8 <_malloc_r>
 800a3d2:	4606      	mov	r6, r0
 800a3d4:	b950      	cbnz	r0, 800a3ec <__ssputs_r+0x5c>
 800a3d6:	230c      	movs	r3, #12
 800a3d8:	f8ca 3000 	str.w	r3, [sl]
 800a3dc:	89a3      	ldrh	r3, [r4, #12]
 800a3de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3e2:	81a3      	strh	r3, [r4, #12]
 800a3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ec:	6921      	ldr	r1, [r4, #16]
 800a3ee:	464a      	mov	r2, r9
 800a3f0:	f7fe f818 	bl	8008424 <memcpy>
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3fe:	81a3      	strh	r3, [r4, #12]
 800a400:	6126      	str	r6, [r4, #16]
 800a402:	6165      	str	r5, [r4, #20]
 800a404:	444e      	add	r6, r9
 800a406:	eba5 0509 	sub.w	r5, r5, r9
 800a40a:	6026      	str	r6, [r4, #0]
 800a40c:	60a5      	str	r5, [r4, #8]
 800a40e:	463e      	mov	r6, r7
 800a410:	42be      	cmp	r6, r7
 800a412:	d900      	bls.n	800a416 <__ssputs_r+0x86>
 800a414:	463e      	mov	r6, r7
 800a416:	6820      	ldr	r0, [r4, #0]
 800a418:	4632      	mov	r2, r6
 800a41a:	4641      	mov	r1, r8
 800a41c:	f000 f966 	bl	800a6ec <memmove>
 800a420:	68a3      	ldr	r3, [r4, #8]
 800a422:	1b9b      	subs	r3, r3, r6
 800a424:	60a3      	str	r3, [r4, #8]
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	4433      	add	r3, r6
 800a42a:	6023      	str	r3, [r4, #0]
 800a42c:	2000      	movs	r0, #0
 800a42e:	e7db      	b.n	800a3e8 <__ssputs_r+0x58>
 800a430:	462a      	mov	r2, r5
 800a432:	f000 f981 	bl	800a738 <_realloc_r>
 800a436:	4606      	mov	r6, r0
 800a438:	2800      	cmp	r0, #0
 800a43a:	d1e1      	bne.n	800a400 <__ssputs_r+0x70>
 800a43c:	6921      	ldr	r1, [r4, #16]
 800a43e:	4650      	mov	r0, sl
 800a440:	f7ff fec6 	bl	800a1d0 <_free_r>
 800a444:	e7c7      	b.n	800a3d6 <__ssputs_r+0x46>
	...

0800a448 <_svfiprintf_r>:
 800a448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44c:	4698      	mov	r8, r3
 800a44e:	898b      	ldrh	r3, [r1, #12]
 800a450:	061b      	lsls	r3, r3, #24
 800a452:	b09d      	sub	sp, #116	; 0x74
 800a454:	4607      	mov	r7, r0
 800a456:	460d      	mov	r5, r1
 800a458:	4614      	mov	r4, r2
 800a45a:	d50e      	bpl.n	800a47a <_svfiprintf_r+0x32>
 800a45c:	690b      	ldr	r3, [r1, #16]
 800a45e:	b963      	cbnz	r3, 800a47a <_svfiprintf_r+0x32>
 800a460:	2140      	movs	r1, #64	; 0x40
 800a462:	f7ff ff21 	bl	800a2a8 <_malloc_r>
 800a466:	6028      	str	r0, [r5, #0]
 800a468:	6128      	str	r0, [r5, #16]
 800a46a:	b920      	cbnz	r0, 800a476 <_svfiprintf_r+0x2e>
 800a46c:	230c      	movs	r3, #12
 800a46e:	603b      	str	r3, [r7, #0]
 800a470:	f04f 30ff 	mov.w	r0, #4294967295
 800a474:	e0d1      	b.n	800a61a <_svfiprintf_r+0x1d2>
 800a476:	2340      	movs	r3, #64	; 0x40
 800a478:	616b      	str	r3, [r5, #20]
 800a47a:	2300      	movs	r3, #0
 800a47c:	9309      	str	r3, [sp, #36]	; 0x24
 800a47e:	2320      	movs	r3, #32
 800a480:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a484:	f8cd 800c 	str.w	r8, [sp, #12]
 800a488:	2330      	movs	r3, #48	; 0x30
 800a48a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a634 <_svfiprintf_r+0x1ec>
 800a48e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a492:	f04f 0901 	mov.w	r9, #1
 800a496:	4623      	mov	r3, r4
 800a498:	469a      	mov	sl, r3
 800a49a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a49e:	b10a      	cbz	r2, 800a4a4 <_svfiprintf_r+0x5c>
 800a4a0:	2a25      	cmp	r2, #37	; 0x25
 800a4a2:	d1f9      	bne.n	800a498 <_svfiprintf_r+0x50>
 800a4a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a4a8:	d00b      	beq.n	800a4c2 <_svfiprintf_r+0x7a>
 800a4aa:	465b      	mov	r3, fp
 800a4ac:	4622      	mov	r2, r4
 800a4ae:	4629      	mov	r1, r5
 800a4b0:	4638      	mov	r0, r7
 800a4b2:	f7ff ff6d 	bl	800a390 <__ssputs_r>
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	f000 80aa 	beq.w	800a610 <_svfiprintf_r+0x1c8>
 800a4bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4be:	445a      	add	r2, fp
 800a4c0:	9209      	str	r2, [sp, #36]	; 0x24
 800a4c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f000 80a2 	beq.w	800a610 <_svfiprintf_r+0x1c8>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a4d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4d6:	f10a 0a01 	add.w	sl, sl, #1
 800a4da:	9304      	str	r3, [sp, #16]
 800a4dc:	9307      	str	r3, [sp, #28]
 800a4de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4e2:	931a      	str	r3, [sp, #104]	; 0x68
 800a4e4:	4654      	mov	r4, sl
 800a4e6:	2205      	movs	r2, #5
 800a4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ec:	4851      	ldr	r0, [pc, #324]	; (800a634 <_svfiprintf_r+0x1ec>)
 800a4ee:	f7f5 fe87 	bl	8000200 <memchr>
 800a4f2:	9a04      	ldr	r2, [sp, #16]
 800a4f4:	b9d8      	cbnz	r0, 800a52e <_svfiprintf_r+0xe6>
 800a4f6:	06d0      	lsls	r0, r2, #27
 800a4f8:	bf44      	itt	mi
 800a4fa:	2320      	movmi	r3, #32
 800a4fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a500:	0711      	lsls	r1, r2, #28
 800a502:	bf44      	itt	mi
 800a504:	232b      	movmi	r3, #43	; 0x2b
 800a506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a50a:	f89a 3000 	ldrb.w	r3, [sl]
 800a50e:	2b2a      	cmp	r3, #42	; 0x2a
 800a510:	d015      	beq.n	800a53e <_svfiprintf_r+0xf6>
 800a512:	9a07      	ldr	r2, [sp, #28]
 800a514:	4654      	mov	r4, sl
 800a516:	2000      	movs	r0, #0
 800a518:	f04f 0c0a 	mov.w	ip, #10
 800a51c:	4621      	mov	r1, r4
 800a51e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a522:	3b30      	subs	r3, #48	; 0x30
 800a524:	2b09      	cmp	r3, #9
 800a526:	d94e      	bls.n	800a5c6 <_svfiprintf_r+0x17e>
 800a528:	b1b0      	cbz	r0, 800a558 <_svfiprintf_r+0x110>
 800a52a:	9207      	str	r2, [sp, #28]
 800a52c:	e014      	b.n	800a558 <_svfiprintf_r+0x110>
 800a52e:	eba0 0308 	sub.w	r3, r0, r8
 800a532:	fa09 f303 	lsl.w	r3, r9, r3
 800a536:	4313      	orrs	r3, r2
 800a538:	9304      	str	r3, [sp, #16]
 800a53a:	46a2      	mov	sl, r4
 800a53c:	e7d2      	b.n	800a4e4 <_svfiprintf_r+0x9c>
 800a53e:	9b03      	ldr	r3, [sp, #12]
 800a540:	1d19      	adds	r1, r3, #4
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	9103      	str	r1, [sp, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	bfbb      	ittet	lt
 800a54a:	425b      	neglt	r3, r3
 800a54c:	f042 0202 	orrlt.w	r2, r2, #2
 800a550:	9307      	strge	r3, [sp, #28]
 800a552:	9307      	strlt	r3, [sp, #28]
 800a554:	bfb8      	it	lt
 800a556:	9204      	strlt	r2, [sp, #16]
 800a558:	7823      	ldrb	r3, [r4, #0]
 800a55a:	2b2e      	cmp	r3, #46	; 0x2e
 800a55c:	d10c      	bne.n	800a578 <_svfiprintf_r+0x130>
 800a55e:	7863      	ldrb	r3, [r4, #1]
 800a560:	2b2a      	cmp	r3, #42	; 0x2a
 800a562:	d135      	bne.n	800a5d0 <_svfiprintf_r+0x188>
 800a564:	9b03      	ldr	r3, [sp, #12]
 800a566:	1d1a      	adds	r2, r3, #4
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	9203      	str	r2, [sp, #12]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	bfb8      	it	lt
 800a570:	f04f 33ff 	movlt.w	r3, #4294967295
 800a574:	3402      	adds	r4, #2
 800a576:	9305      	str	r3, [sp, #20]
 800a578:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a644 <_svfiprintf_r+0x1fc>
 800a57c:	7821      	ldrb	r1, [r4, #0]
 800a57e:	2203      	movs	r2, #3
 800a580:	4650      	mov	r0, sl
 800a582:	f7f5 fe3d 	bl	8000200 <memchr>
 800a586:	b140      	cbz	r0, 800a59a <_svfiprintf_r+0x152>
 800a588:	2340      	movs	r3, #64	; 0x40
 800a58a:	eba0 000a 	sub.w	r0, r0, sl
 800a58e:	fa03 f000 	lsl.w	r0, r3, r0
 800a592:	9b04      	ldr	r3, [sp, #16]
 800a594:	4303      	orrs	r3, r0
 800a596:	3401      	adds	r4, #1
 800a598:	9304      	str	r3, [sp, #16]
 800a59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a59e:	4826      	ldr	r0, [pc, #152]	; (800a638 <_svfiprintf_r+0x1f0>)
 800a5a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5a4:	2206      	movs	r2, #6
 800a5a6:	f7f5 fe2b 	bl	8000200 <memchr>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d038      	beq.n	800a620 <_svfiprintf_r+0x1d8>
 800a5ae:	4b23      	ldr	r3, [pc, #140]	; (800a63c <_svfiprintf_r+0x1f4>)
 800a5b0:	bb1b      	cbnz	r3, 800a5fa <_svfiprintf_r+0x1b2>
 800a5b2:	9b03      	ldr	r3, [sp, #12]
 800a5b4:	3307      	adds	r3, #7
 800a5b6:	f023 0307 	bic.w	r3, r3, #7
 800a5ba:	3308      	adds	r3, #8
 800a5bc:	9303      	str	r3, [sp, #12]
 800a5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c0:	4433      	add	r3, r6
 800a5c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c4:	e767      	b.n	800a496 <_svfiprintf_r+0x4e>
 800a5c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	2001      	movs	r0, #1
 800a5ce:	e7a5      	b.n	800a51c <_svfiprintf_r+0xd4>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	3401      	adds	r4, #1
 800a5d4:	9305      	str	r3, [sp, #20]
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	f04f 0c0a 	mov.w	ip, #10
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5e2:	3a30      	subs	r2, #48	; 0x30
 800a5e4:	2a09      	cmp	r2, #9
 800a5e6:	d903      	bls.n	800a5f0 <_svfiprintf_r+0x1a8>
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d0c5      	beq.n	800a578 <_svfiprintf_r+0x130>
 800a5ec:	9105      	str	r1, [sp, #20]
 800a5ee:	e7c3      	b.n	800a578 <_svfiprintf_r+0x130>
 800a5f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e7f0      	b.n	800a5dc <_svfiprintf_r+0x194>
 800a5fa:	ab03      	add	r3, sp, #12
 800a5fc:	9300      	str	r3, [sp, #0]
 800a5fe:	462a      	mov	r2, r5
 800a600:	4b0f      	ldr	r3, [pc, #60]	; (800a640 <_svfiprintf_r+0x1f8>)
 800a602:	a904      	add	r1, sp, #16
 800a604:	4638      	mov	r0, r7
 800a606:	f7fd ffc3 	bl	8008590 <_printf_float>
 800a60a:	1c42      	adds	r2, r0, #1
 800a60c:	4606      	mov	r6, r0
 800a60e:	d1d6      	bne.n	800a5be <_svfiprintf_r+0x176>
 800a610:	89ab      	ldrh	r3, [r5, #12]
 800a612:	065b      	lsls	r3, r3, #25
 800a614:	f53f af2c 	bmi.w	800a470 <_svfiprintf_r+0x28>
 800a618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a61a:	b01d      	add	sp, #116	; 0x74
 800a61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a620:	ab03      	add	r3, sp, #12
 800a622:	9300      	str	r3, [sp, #0]
 800a624:	462a      	mov	r2, r5
 800a626:	4b06      	ldr	r3, [pc, #24]	; (800a640 <_svfiprintf_r+0x1f8>)
 800a628:	a904      	add	r1, sp, #16
 800a62a:	4638      	mov	r0, r7
 800a62c:	f7fe fa54 	bl	8008ad8 <_printf_i>
 800a630:	e7eb      	b.n	800a60a <_svfiprintf_r+0x1c2>
 800a632:	bf00      	nop
 800a634:	0800b4f4 	.word	0x0800b4f4
 800a638:	0800b4fe 	.word	0x0800b4fe
 800a63c:	08008591 	.word	0x08008591
 800a640:	0800a391 	.word	0x0800a391
 800a644:	0800b4fa 	.word	0x0800b4fa

0800a648 <_sbrk_r>:
 800a648:	b538      	push	{r3, r4, r5, lr}
 800a64a:	4d06      	ldr	r5, [pc, #24]	; (800a664 <_sbrk_r+0x1c>)
 800a64c:	2300      	movs	r3, #0
 800a64e:	4604      	mov	r4, r0
 800a650:	4608      	mov	r0, r1
 800a652:	602b      	str	r3, [r5, #0]
 800a654:	f7f6 ffb6 	bl	80015c4 <_sbrk>
 800a658:	1c43      	adds	r3, r0, #1
 800a65a:	d102      	bne.n	800a662 <_sbrk_r+0x1a>
 800a65c:	682b      	ldr	r3, [r5, #0]
 800a65e:	b103      	cbz	r3, 800a662 <_sbrk_r+0x1a>
 800a660:	6023      	str	r3, [r4, #0]
 800a662:	bd38      	pop	{r3, r4, r5, pc}
 800a664:	2000202c 	.word	0x2000202c

0800a668 <__assert_func>:
 800a668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a66a:	4614      	mov	r4, r2
 800a66c:	461a      	mov	r2, r3
 800a66e:	4b09      	ldr	r3, [pc, #36]	; (800a694 <__assert_func+0x2c>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4605      	mov	r5, r0
 800a674:	68d8      	ldr	r0, [r3, #12]
 800a676:	b14c      	cbz	r4, 800a68c <__assert_func+0x24>
 800a678:	4b07      	ldr	r3, [pc, #28]	; (800a698 <__assert_func+0x30>)
 800a67a:	9100      	str	r1, [sp, #0]
 800a67c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a680:	4906      	ldr	r1, [pc, #24]	; (800a69c <__assert_func+0x34>)
 800a682:	462b      	mov	r3, r5
 800a684:	f000 f80e 	bl	800a6a4 <fiprintf>
 800a688:	f000 faac 	bl	800abe4 <abort>
 800a68c:	4b04      	ldr	r3, [pc, #16]	; (800a6a0 <__assert_func+0x38>)
 800a68e:	461c      	mov	r4, r3
 800a690:	e7f3      	b.n	800a67a <__assert_func+0x12>
 800a692:	bf00      	nop
 800a694:	200000fc 	.word	0x200000fc
 800a698:	0800b505 	.word	0x0800b505
 800a69c:	0800b512 	.word	0x0800b512
 800a6a0:	0800b540 	.word	0x0800b540

0800a6a4 <fiprintf>:
 800a6a4:	b40e      	push	{r1, r2, r3}
 800a6a6:	b503      	push	{r0, r1, lr}
 800a6a8:	4601      	mov	r1, r0
 800a6aa:	ab03      	add	r3, sp, #12
 800a6ac:	4805      	ldr	r0, [pc, #20]	; (800a6c4 <fiprintf+0x20>)
 800a6ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6b2:	6800      	ldr	r0, [r0, #0]
 800a6b4:	9301      	str	r3, [sp, #4]
 800a6b6:	f000 f897 	bl	800a7e8 <_vfiprintf_r>
 800a6ba:	b002      	add	sp, #8
 800a6bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6c0:	b003      	add	sp, #12
 800a6c2:	4770      	bx	lr
 800a6c4:	200000fc 	.word	0x200000fc

0800a6c8 <__ascii_mbtowc>:
 800a6c8:	b082      	sub	sp, #8
 800a6ca:	b901      	cbnz	r1, 800a6ce <__ascii_mbtowc+0x6>
 800a6cc:	a901      	add	r1, sp, #4
 800a6ce:	b142      	cbz	r2, 800a6e2 <__ascii_mbtowc+0x1a>
 800a6d0:	b14b      	cbz	r3, 800a6e6 <__ascii_mbtowc+0x1e>
 800a6d2:	7813      	ldrb	r3, [r2, #0]
 800a6d4:	600b      	str	r3, [r1, #0]
 800a6d6:	7812      	ldrb	r2, [r2, #0]
 800a6d8:	1e10      	subs	r0, r2, #0
 800a6da:	bf18      	it	ne
 800a6dc:	2001      	movne	r0, #1
 800a6de:	b002      	add	sp, #8
 800a6e0:	4770      	bx	lr
 800a6e2:	4610      	mov	r0, r2
 800a6e4:	e7fb      	b.n	800a6de <__ascii_mbtowc+0x16>
 800a6e6:	f06f 0001 	mvn.w	r0, #1
 800a6ea:	e7f8      	b.n	800a6de <__ascii_mbtowc+0x16>

0800a6ec <memmove>:
 800a6ec:	4288      	cmp	r0, r1
 800a6ee:	b510      	push	{r4, lr}
 800a6f0:	eb01 0402 	add.w	r4, r1, r2
 800a6f4:	d902      	bls.n	800a6fc <memmove+0x10>
 800a6f6:	4284      	cmp	r4, r0
 800a6f8:	4623      	mov	r3, r4
 800a6fa:	d807      	bhi.n	800a70c <memmove+0x20>
 800a6fc:	1e43      	subs	r3, r0, #1
 800a6fe:	42a1      	cmp	r1, r4
 800a700:	d008      	beq.n	800a714 <memmove+0x28>
 800a702:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a70a:	e7f8      	b.n	800a6fe <memmove+0x12>
 800a70c:	4402      	add	r2, r0
 800a70e:	4601      	mov	r1, r0
 800a710:	428a      	cmp	r2, r1
 800a712:	d100      	bne.n	800a716 <memmove+0x2a>
 800a714:	bd10      	pop	{r4, pc}
 800a716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a71a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a71e:	e7f7      	b.n	800a710 <memmove+0x24>

0800a720 <__malloc_lock>:
 800a720:	4801      	ldr	r0, [pc, #4]	; (800a728 <__malloc_lock+0x8>)
 800a722:	f000 bc1f 	b.w	800af64 <__retarget_lock_acquire_recursive>
 800a726:	bf00      	nop
 800a728:	20002030 	.word	0x20002030

0800a72c <__malloc_unlock>:
 800a72c:	4801      	ldr	r0, [pc, #4]	; (800a734 <__malloc_unlock+0x8>)
 800a72e:	f000 bc1a 	b.w	800af66 <__retarget_lock_release_recursive>
 800a732:	bf00      	nop
 800a734:	20002030 	.word	0x20002030

0800a738 <_realloc_r>:
 800a738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a73c:	4680      	mov	r8, r0
 800a73e:	4614      	mov	r4, r2
 800a740:	460e      	mov	r6, r1
 800a742:	b921      	cbnz	r1, 800a74e <_realloc_r+0x16>
 800a744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a748:	4611      	mov	r1, r2
 800a74a:	f7ff bdad 	b.w	800a2a8 <_malloc_r>
 800a74e:	b92a      	cbnz	r2, 800a75c <_realloc_r+0x24>
 800a750:	f7ff fd3e 	bl	800a1d0 <_free_r>
 800a754:	4625      	mov	r5, r4
 800a756:	4628      	mov	r0, r5
 800a758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a75c:	f000 fc6a 	bl	800b034 <_malloc_usable_size_r>
 800a760:	4284      	cmp	r4, r0
 800a762:	4607      	mov	r7, r0
 800a764:	d802      	bhi.n	800a76c <_realloc_r+0x34>
 800a766:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a76a:	d812      	bhi.n	800a792 <_realloc_r+0x5a>
 800a76c:	4621      	mov	r1, r4
 800a76e:	4640      	mov	r0, r8
 800a770:	f7ff fd9a 	bl	800a2a8 <_malloc_r>
 800a774:	4605      	mov	r5, r0
 800a776:	2800      	cmp	r0, #0
 800a778:	d0ed      	beq.n	800a756 <_realloc_r+0x1e>
 800a77a:	42bc      	cmp	r4, r7
 800a77c:	4622      	mov	r2, r4
 800a77e:	4631      	mov	r1, r6
 800a780:	bf28      	it	cs
 800a782:	463a      	movcs	r2, r7
 800a784:	f7fd fe4e 	bl	8008424 <memcpy>
 800a788:	4631      	mov	r1, r6
 800a78a:	4640      	mov	r0, r8
 800a78c:	f7ff fd20 	bl	800a1d0 <_free_r>
 800a790:	e7e1      	b.n	800a756 <_realloc_r+0x1e>
 800a792:	4635      	mov	r5, r6
 800a794:	e7df      	b.n	800a756 <_realloc_r+0x1e>

0800a796 <__sfputc_r>:
 800a796:	6893      	ldr	r3, [r2, #8]
 800a798:	3b01      	subs	r3, #1
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	b410      	push	{r4}
 800a79e:	6093      	str	r3, [r2, #8]
 800a7a0:	da08      	bge.n	800a7b4 <__sfputc_r+0x1e>
 800a7a2:	6994      	ldr	r4, [r2, #24]
 800a7a4:	42a3      	cmp	r3, r4
 800a7a6:	db01      	blt.n	800a7ac <__sfputc_r+0x16>
 800a7a8:	290a      	cmp	r1, #10
 800a7aa:	d103      	bne.n	800a7b4 <__sfputc_r+0x1e>
 800a7ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7b0:	f000 b94a 	b.w	800aa48 <__swbuf_r>
 800a7b4:	6813      	ldr	r3, [r2, #0]
 800a7b6:	1c58      	adds	r0, r3, #1
 800a7b8:	6010      	str	r0, [r2, #0]
 800a7ba:	7019      	strb	r1, [r3, #0]
 800a7bc:	4608      	mov	r0, r1
 800a7be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <__sfputs_r>:
 800a7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	460f      	mov	r7, r1
 800a7ca:	4614      	mov	r4, r2
 800a7cc:	18d5      	adds	r5, r2, r3
 800a7ce:	42ac      	cmp	r4, r5
 800a7d0:	d101      	bne.n	800a7d6 <__sfputs_r+0x12>
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	e007      	b.n	800a7e6 <__sfputs_r+0x22>
 800a7d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7da:	463a      	mov	r2, r7
 800a7dc:	4630      	mov	r0, r6
 800a7de:	f7ff ffda 	bl	800a796 <__sfputc_r>
 800a7e2:	1c43      	adds	r3, r0, #1
 800a7e4:	d1f3      	bne.n	800a7ce <__sfputs_r+0xa>
 800a7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a7e8 <_vfiprintf_r>:
 800a7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ec:	460d      	mov	r5, r1
 800a7ee:	b09d      	sub	sp, #116	; 0x74
 800a7f0:	4614      	mov	r4, r2
 800a7f2:	4698      	mov	r8, r3
 800a7f4:	4606      	mov	r6, r0
 800a7f6:	b118      	cbz	r0, 800a800 <_vfiprintf_r+0x18>
 800a7f8:	6983      	ldr	r3, [r0, #24]
 800a7fa:	b90b      	cbnz	r3, 800a800 <_vfiprintf_r+0x18>
 800a7fc:	f000 fb14 	bl	800ae28 <__sinit>
 800a800:	4b89      	ldr	r3, [pc, #548]	; (800aa28 <_vfiprintf_r+0x240>)
 800a802:	429d      	cmp	r5, r3
 800a804:	d11b      	bne.n	800a83e <_vfiprintf_r+0x56>
 800a806:	6875      	ldr	r5, [r6, #4]
 800a808:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a80a:	07d9      	lsls	r1, r3, #31
 800a80c:	d405      	bmi.n	800a81a <_vfiprintf_r+0x32>
 800a80e:	89ab      	ldrh	r3, [r5, #12]
 800a810:	059a      	lsls	r2, r3, #22
 800a812:	d402      	bmi.n	800a81a <_vfiprintf_r+0x32>
 800a814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a816:	f000 fba5 	bl	800af64 <__retarget_lock_acquire_recursive>
 800a81a:	89ab      	ldrh	r3, [r5, #12]
 800a81c:	071b      	lsls	r3, r3, #28
 800a81e:	d501      	bpl.n	800a824 <_vfiprintf_r+0x3c>
 800a820:	692b      	ldr	r3, [r5, #16]
 800a822:	b9eb      	cbnz	r3, 800a860 <_vfiprintf_r+0x78>
 800a824:	4629      	mov	r1, r5
 800a826:	4630      	mov	r0, r6
 800a828:	f000 f96e 	bl	800ab08 <__swsetup_r>
 800a82c:	b1c0      	cbz	r0, 800a860 <_vfiprintf_r+0x78>
 800a82e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a830:	07dc      	lsls	r4, r3, #31
 800a832:	d50e      	bpl.n	800a852 <_vfiprintf_r+0x6a>
 800a834:	f04f 30ff 	mov.w	r0, #4294967295
 800a838:	b01d      	add	sp, #116	; 0x74
 800a83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a83e:	4b7b      	ldr	r3, [pc, #492]	; (800aa2c <_vfiprintf_r+0x244>)
 800a840:	429d      	cmp	r5, r3
 800a842:	d101      	bne.n	800a848 <_vfiprintf_r+0x60>
 800a844:	68b5      	ldr	r5, [r6, #8]
 800a846:	e7df      	b.n	800a808 <_vfiprintf_r+0x20>
 800a848:	4b79      	ldr	r3, [pc, #484]	; (800aa30 <_vfiprintf_r+0x248>)
 800a84a:	429d      	cmp	r5, r3
 800a84c:	bf08      	it	eq
 800a84e:	68f5      	ldreq	r5, [r6, #12]
 800a850:	e7da      	b.n	800a808 <_vfiprintf_r+0x20>
 800a852:	89ab      	ldrh	r3, [r5, #12]
 800a854:	0598      	lsls	r0, r3, #22
 800a856:	d4ed      	bmi.n	800a834 <_vfiprintf_r+0x4c>
 800a858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a85a:	f000 fb84 	bl	800af66 <__retarget_lock_release_recursive>
 800a85e:	e7e9      	b.n	800a834 <_vfiprintf_r+0x4c>
 800a860:	2300      	movs	r3, #0
 800a862:	9309      	str	r3, [sp, #36]	; 0x24
 800a864:	2320      	movs	r3, #32
 800a866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a86a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a86e:	2330      	movs	r3, #48	; 0x30
 800a870:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa34 <_vfiprintf_r+0x24c>
 800a874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a878:	f04f 0901 	mov.w	r9, #1
 800a87c:	4623      	mov	r3, r4
 800a87e:	469a      	mov	sl, r3
 800a880:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a884:	b10a      	cbz	r2, 800a88a <_vfiprintf_r+0xa2>
 800a886:	2a25      	cmp	r2, #37	; 0x25
 800a888:	d1f9      	bne.n	800a87e <_vfiprintf_r+0x96>
 800a88a:	ebba 0b04 	subs.w	fp, sl, r4
 800a88e:	d00b      	beq.n	800a8a8 <_vfiprintf_r+0xc0>
 800a890:	465b      	mov	r3, fp
 800a892:	4622      	mov	r2, r4
 800a894:	4629      	mov	r1, r5
 800a896:	4630      	mov	r0, r6
 800a898:	f7ff ff94 	bl	800a7c4 <__sfputs_r>
 800a89c:	3001      	adds	r0, #1
 800a89e:	f000 80aa 	beq.w	800a9f6 <_vfiprintf_r+0x20e>
 800a8a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8a4:	445a      	add	r2, fp
 800a8a6:	9209      	str	r2, [sp, #36]	; 0x24
 800a8a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f000 80a2 	beq.w	800a9f6 <_vfiprintf_r+0x20e>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8bc:	f10a 0a01 	add.w	sl, sl, #1
 800a8c0:	9304      	str	r3, [sp, #16]
 800a8c2:	9307      	str	r3, [sp, #28]
 800a8c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8c8:	931a      	str	r3, [sp, #104]	; 0x68
 800a8ca:	4654      	mov	r4, sl
 800a8cc:	2205      	movs	r2, #5
 800a8ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d2:	4858      	ldr	r0, [pc, #352]	; (800aa34 <_vfiprintf_r+0x24c>)
 800a8d4:	f7f5 fc94 	bl	8000200 <memchr>
 800a8d8:	9a04      	ldr	r2, [sp, #16]
 800a8da:	b9d8      	cbnz	r0, 800a914 <_vfiprintf_r+0x12c>
 800a8dc:	06d1      	lsls	r1, r2, #27
 800a8de:	bf44      	itt	mi
 800a8e0:	2320      	movmi	r3, #32
 800a8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8e6:	0713      	lsls	r3, r2, #28
 800a8e8:	bf44      	itt	mi
 800a8ea:	232b      	movmi	r3, #43	; 0x2b
 800a8ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a8f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a8f6:	d015      	beq.n	800a924 <_vfiprintf_r+0x13c>
 800a8f8:	9a07      	ldr	r2, [sp, #28]
 800a8fa:	4654      	mov	r4, sl
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	f04f 0c0a 	mov.w	ip, #10
 800a902:	4621      	mov	r1, r4
 800a904:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a908:	3b30      	subs	r3, #48	; 0x30
 800a90a:	2b09      	cmp	r3, #9
 800a90c:	d94e      	bls.n	800a9ac <_vfiprintf_r+0x1c4>
 800a90e:	b1b0      	cbz	r0, 800a93e <_vfiprintf_r+0x156>
 800a910:	9207      	str	r2, [sp, #28]
 800a912:	e014      	b.n	800a93e <_vfiprintf_r+0x156>
 800a914:	eba0 0308 	sub.w	r3, r0, r8
 800a918:	fa09 f303 	lsl.w	r3, r9, r3
 800a91c:	4313      	orrs	r3, r2
 800a91e:	9304      	str	r3, [sp, #16]
 800a920:	46a2      	mov	sl, r4
 800a922:	e7d2      	b.n	800a8ca <_vfiprintf_r+0xe2>
 800a924:	9b03      	ldr	r3, [sp, #12]
 800a926:	1d19      	adds	r1, r3, #4
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	9103      	str	r1, [sp, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	bfbb      	ittet	lt
 800a930:	425b      	neglt	r3, r3
 800a932:	f042 0202 	orrlt.w	r2, r2, #2
 800a936:	9307      	strge	r3, [sp, #28]
 800a938:	9307      	strlt	r3, [sp, #28]
 800a93a:	bfb8      	it	lt
 800a93c:	9204      	strlt	r2, [sp, #16]
 800a93e:	7823      	ldrb	r3, [r4, #0]
 800a940:	2b2e      	cmp	r3, #46	; 0x2e
 800a942:	d10c      	bne.n	800a95e <_vfiprintf_r+0x176>
 800a944:	7863      	ldrb	r3, [r4, #1]
 800a946:	2b2a      	cmp	r3, #42	; 0x2a
 800a948:	d135      	bne.n	800a9b6 <_vfiprintf_r+0x1ce>
 800a94a:	9b03      	ldr	r3, [sp, #12]
 800a94c:	1d1a      	adds	r2, r3, #4
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	9203      	str	r2, [sp, #12]
 800a952:	2b00      	cmp	r3, #0
 800a954:	bfb8      	it	lt
 800a956:	f04f 33ff 	movlt.w	r3, #4294967295
 800a95a:	3402      	adds	r4, #2
 800a95c:	9305      	str	r3, [sp, #20]
 800a95e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa44 <_vfiprintf_r+0x25c>
 800a962:	7821      	ldrb	r1, [r4, #0]
 800a964:	2203      	movs	r2, #3
 800a966:	4650      	mov	r0, sl
 800a968:	f7f5 fc4a 	bl	8000200 <memchr>
 800a96c:	b140      	cbz	r0, 800a980 <_vfiprintf_r+0x198>
 800a96e:	2340      	movs	r3, #64	; 0x40
 800a970:	eba0 000a 	sub.w	r0, r0, sl
 800a974:	fa03 f000 	lsl.w	r0, r3, r0
 800a978:	9b04      	ldr	r3, [sp, #16]
 800a97a:	4303      	orrs	r3, r0
 800a97c:	3401      	adds	r4, #1
 800a97e:	9304      	str	r3, [sp, #16]
 800a980:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a984:	482c      	ldr	r0, [pc, #176]	; (800aa38 <_vfiprintf_r+0x250>)
 800a986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a98a:	2206      	movs	r2, #6
 800a98c:	f7f5 fc38 	bl	8000200 <memchr>
 800a990:	2800      	cmp	r0, #0
 800a992:	d03f      	beq.n	800aa14 <_vfiprintf_r+0x22c>
 800a994:	4b29      	ldr	r3, [pc, #164]	; (800aa3c <_vfiprintf_r+0x254>)
 800a996:	bb1b      	cbnz	r3, 800a9e0 <_vfiprintf_r+0x1f8>
 800a998:	9b03      	ldr	r3, [sp, #12]
 800a99a:	3307      	adds	r3, #7
 800a99c:	f023 0307 	bic.w	r3, r3, #7
 800a9a0:	3308      	adds	r3, #8
 800a9a2:	9303      	str	r3, [sp, #12]
 800a9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a6:	443b      	add	r3, r7
 800a9a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a9aa:	e767      	b.n	800a87c <_vfiprintf_r+0x94>
 800a9ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9b0:	460c      	mov	r4, r1
 800a9b2:	2001      	movs	r0, #1
 800a9b4:	e7a5      	b.n	800a902 <_vfiprintf_r+0x11a>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	3401      	adds	r4, #1
 800a9ba:	9305      	str	r3, [sp, #20]
 800a9bc:	4619      	mov	r1, r3
 800a9be:	f04f 0c0a 	mov.w	ip, #10
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9c8:	3a30      	subs	r2, #48	; 0x30
 800a9ca:	2a09      	cmp	r2, #9
 800a9cc:	d903      	bls.n	800a9d6 <_vfiprintf_r+0x1ee>
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d0c5      	beq.n	800a95e <_vfiprintf_r+0x176>
 800a9d2:	9105      	str	r1, [sp, #20]
 800a9d4:	e7c3      	b.n	800a95e <_vfiprintf_r+0x176>
 800a9d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9da:	4604      	mov	r4, r0
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e7f0      	b.n	800a9c2 <_vfiprintf_r+0x1da>
 800a9e0:	ab03      	add	r3, sp, #12
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	462a      	mov	r2, r5
 800a9e6:	4b16      	ldr	r3, [pc, #88]	; (800aa40 <_vfiprintf_r+0x258>)
 800a9e8:	a904      	add	r1, sp, #16
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	f7fd fdd0 	bl	8008590 <_printf_float>
 800a9f0:	4607      	mov	r7, r0
 800a9f2:	1c78      	adds	r0, r7, #1
 800a9f4:	d1d6      	bne.n	800a9a4 <_vfiprintf_r+0x1bc>
 800a9f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9f8:	07d9      	lsls	r1, r3, #31
 800a9fa:	d405      	bmi.n	800aa08 <_vfiprintf_r+0x220>
 800a9fc:	89ab      	ldrh	r3, [r5, #12]
 800a9fe:	059a      	lsls	r2, r3, #22
 800aa00:	d402      	bmi.n	800aa08 <_vfiprintf_r+0x220>
 800aa02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa04:	f000 faaf 	bl	800af66 <__retarget_lock_release_recursive>
 800aa08:	89ab      	ldrh	r3, [r5, #12]
 800aa0a:	065b      	lsls	r3, r3, #25
 800aa0c:	f53f af12 	bmi.w	800a834 <_vfiprintf_r+0x4c>
 800aa10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa12:	e711      	b.n	800a838 <_vfiprintf_r+0x50>
 800aa14:	ab03      	add	r3, sp, #12
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	462a      	mov	r2, r5
 800aa1a:	4b09      	ldr	r3, [pc, #36]	; (800aa40 <_vfiprintf_r+0x258>)
 800aa1c:	a904      	add	r1, sp, #16
 800aa1e:	4630      	mov	r0, r6
 800aa20:	f7fe f85a 	bl	8008ad8 <_printf_i>
 800aa24:	e7e4      	b.n	800a9f0 <_vfiprintf_r+0x208>
 800aa26:	bf00      	nop
 800aa28:	0800b66c 	.word	0x0800b66c
 800aa2c:	0800b68c 	.word	0x0800b68c
 800aa30:	0800b64c 	.word	0x0800b64c
 800aa34:	0800b4f4 	.word	0x0800b4f4
 800aa38:	0800b4fe 	.word	0x0800b4fe
 800aa3c:	08008591 	.word	0x08008591
 800aa40:	0800a7c5 	.word	0x0800a7c5
 800aa44:	0800b4fa 	.word	0x0800b4fa

0800aa48 <__swbuf_r>:
 800aa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4a:	460e      	mov	r6, r1
 800aa4c:	4614      	mov	r4, r2
 800aa4e:	4605      	mov	r5, r0
 800aa50:	b118      	cbz	r0, 800aa5a <__swbuf_r+0x12>
 800aa52:	6983      	ldr	r3, [r0, #24]
 800aa54:	b90b      	cbnz	r3, 800aa5a <__swbuf_r+0x12>
 800aa56:	f000 f9e7 	bl	800ae28 <__sinit>
 800aa5a:	4b21      	ldr	r3, [pc, #132]	; (800aae0 <__swbuf_r+0x98>)
 800aa5c:	429c      	cmp	r4, r3
 800aa5e:	d12b      	bne.n	800aab8 <__swbuf_r+0x70>
 800aa60:	686c      	ldr	r4, [r5, #4]
 800aa62:	69a3      	ldr	r3, [r4, #24]
 800aa64:	60a3      	str	r3, [r4, #8]
 800aa66:	89a3      	ldrh	r3, [r4, #12]
 800aa68:	071a      	lsls	r2, r3, #28
 800aa6a:	d52f      	bpl.n	800aacc <__swbuf_r+0x84>
 800aa6c:	6923      	ldr	r3, [r4, #16]
 800aa6e:	b36b      	cbz	r3, 800aacc <__swbuf_r+0x84>
 800aa70:	6923      	ldr	r3, [r4, #16]
 800aa72:	6820      	ldr	r0, [r4, #0]
 800aa74:	1ac0      	subs	r0, r0, r3
 800aa76:	6963      	ldr	r3, [r4, #20]
 800aa78:	b2f6      	uxtb	r6, r6
 800aa7a:	4283      	cmp	r3, r0
 800aa7c:	4637      	mov	r7, r6
 800aa7e:	dc04      	bgt.n	800aa8a <__swbuf_r+0x42>
 800aa80:	4621      	mov	r1, r4
 800aa82:	4628      	mov	r0, r5
 800aa84:	f000 f93c 	bl	800ad00 <_fflush_r>
 800aa88:	bb30      	cbnz	r0, 800aad8 <__swbuf_r+0x90>
 800aa8a:	68a3      	ldr	r3, [r4, #8]
 800aa8c:	3b01      	subs	r3, #1
 800aa8e:	60a3      	str	r3, [r4, #8]
 800aa90:	6823      	ldr	r3, [r4, #0]
 800aa92:	1c5a      	adds	r2, r3, #1
 800aa94:	6022      	str	r2, [r4, #0]
 800aa96:	701e      	strb	r6, [r3, #0]
 800aa98:	6963      	ldr	r3, [r4, #20]
 800aa9a:	3001      	adds	r0, #1
 800aa9c:	4283      	cmp	r3, r0
 800aa9e:	d004      	beq.n	800aaaa <__swbuf_r+0x62>
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	07db      	lsls	r3, r3, #31
 800aaa4:	d506      	bpl.n	800aab4 <__swbuf_r+0x6c>
 800aaa6:	2e0a      	cmp	r6, #10
 800aaa8:	d104      	bne.n	800aab4 <__swbuf_r+0x6c>
 800aaaa:	4621      	mov	r1, r4
 800aaac:	4628      	mov	r0, r5
 800aaae:	f000 f927 	bl	800ad00 <_fflush_r>
 800aab2:	b988      	cbnz	r0, 800aad8 <__swbuf_r+0x90>
 800aab4:	4638      	mov	r0, r7
 800aab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aab8:	4b0a      	ldr	r3, [pc, #40]	; (800aae4 <__swbuf_r+0x9c>)
 800aaba:	429c      	cmp	r4, r3
 800aabc:	d101      	bne.n	800aac2 <__swbuf_r+0x7a>
 800aabe:	68ac      	ldr	r4, [r5, #8]
 800aac0:	e7cf      	b.n	800aa62 <__swbuf_r+0x1a>
 800aac2:	4b09      	ldr	r3, [pc, #36]	; (800aae8 <__swbuf_r+0xa0>)
 800aac4:	429c      	cmp	r4, r3
 800aac6:	bf08      	it	eq
 800aac8:	68ec      	ldreq	r4, [r5, #12]
 800aaca:	e7ca      	b.n	800aa62 <__swbuf_r+0x1a>
 800aacc:	4621      	mov	r1, r4
 800aace:	4628      	mov	r0, r5
 800aad0:	f000 f81a 	bl	800ab08 <__swsetup_r>
 800aad4:	2800      	cmp	r0, #0
 800aad6:	d0cb      	beq.n	800aa70 <__swbuf_r+0x28>
 800aad8:	f04f 37ff 	mov.w	r7, #4294967295
 800aadc:	e7ea      	b.n	800aab4 <__swbuf_r+0x6c>
 800aade:	bf00      	nop
 800aae0:	0800b66c 	.word	0x0800b66c
 800aae4:	0800b68c 	.word	0x0800b68c
 800aae8:	0800b64c 	.word	0x0800b64c

0800aaec <__ascii_wctomb>:
 800aaec:	b149      	cbz	r1, 800ab02 <__ascii_wctomb+0x16>
 800aaee:	2aff      	cmp	r2, #255	; 0xff
 800aaf0:	bf85      	ittet	hi
 800aaf2:	238a      	movhi	r3, #138	; 0x8a
 800aaf4:	6003      	strhi	r3, [r0, #0]
 800aaf6:	700a      	strbls	r2, [r1, #0]
 800aaf8:	f04f 30ff 	movhi.w	r0, #4294967295
 800aafc:	bf98      	it	ls
 800aafe:	2001      	movls	r0, #1
 800ab00:	4770      	bx	lr
 800ab02:	4608      	mov	r0, r1
 800ab04:	4770      	bx	lr
	...

0800ab08 <__swsetup_r>:
 800ab08:	4b32      	ldr	r3, [pc, #200]	; (800abd4 <__swsetup_r+0xcc>)
 800ab0a:	b570      	push	{r4, r5, r6, lr}
 800ab0c:	681d      	ldr	r5, [r3, #0]
 800ab0e:	4606      	mov	r6, r0
 800ab10:	460c      	mov	r4, r1
 800ab12:	b125      	cbz	r5, 800ab1e <__swsetup_r+0x16>
 800ab14:	69ab      	ldr	r3, [r5, #24]
 800ab16:	b913      	cbnz	r3, 800ab1e <__swsetup_r+0x16>
 800ab18:	4628      	mov	r0, r5
 800ab1a:	f000 f985 	bl	800ae28 <__sinit>
 800ab1e:	4b2e      	ldr	r3, [pc, #184]	; (800abd8 <__swsetup_r+0xd0>)
 800ab20:	429c      	cmp	r4, r3
 800ab22:	d10f      	bne.n	800ab44 <__swsetup_r+0x3c>
 800ab24:	686c      	ldr	r4, [r5, #4]
 800ab26:	89a3      	ldrh	r3, [r4, #12]
 800ab28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab2c:	0719      	lsls	r1, r3, #28
 800ab2e:	d42c      	bmi.n	800ab8a <__swsetup_r+0x82>
 800ab30:	06dd      	lsls	r5, r3, #27
 800ab32:	d411      	bmi.n	800ab58 <__swsetup_r+0x50>
 800ab34:	2309      	movs	r3, #9
 800ab36:	6033      	str	r3, [r6, #0]
 800ab38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab3c:	81a3      	strh	r3, [r4, #12]
 800ab3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab42:	e03e      	b.n	800abc2 <__swsetup_r+0xba>
 800ab44:	4b25      	ldr	r3, [pc, #148]	; (800abdc <__swsetup_r+0xd4>)
 800ab46:	429c      	cmp	r4, r3
 800ab48:	d101      	bne.n	800ab4e <__swsetup_r+0x46>
 800ab4a:	68ac      	ldr	r4, [r5, #8]
 800ab4c:	e7eb      	b.n	800ab26 <__swsetup_r+0x1e>
 800ab4e:	4b24      	ldr	r3, [pc, #144]	; (800abe0 <__swsetup_r+0xd8>)
 800ab50:	429c      	cmp	r4, r3
 800ab52:	bf08      	it	eq
 800ab54:	68ec      	ldreq	r4, [r5, #12]
 800ab56:	e7e6      	b.n	800ab26 <__swsetup_r+0x1e>
 800ab58:	0758      	lsls	r0, r3, #29
 800ab5a:	d512      	bpl.n	800ab82 <__swsetup_r+0x7a>
 800ab5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab5e:	b141      	cbz	r1, 800ab72 <__swsetup_r+0x6a>
 800ab60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab64:	4299      	cmp	r1, r3
 800ab66:	d002      	beq.n	800ab6e <__swsetup_r+0x66>
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f7ff fb31 	bl	800a1d0 <_free_r>
 800ab6e:	2300      	movs	r3, #0
 800ab70:	6363      	str	r3, [r4, #52]	; 0x34
 800ab72:	89a3      	ldrh	r3, [r4, #12]
 800ab74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab78:	81a3      	strh	r3, [r4, #12]
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	6063      	str	r3, [r4, #4]
 800ab7e:	6923      	ldr	r3, [r4, #16]
 800ab80:	6023      	str	r3, [r4, #0]
 800ab82:	89a3      	ldrh	r3, [r4, #12]
 800ab84:	f043 0308 	orr.w	r3, r3, #8
 800ab88:	81a3      	strh	r3, [r4, #12]
 800ab8a:	6923      	ldr	r3, [r4, #16]
 800ab8c:	b94b      	cbnz	r3, 800aba2 <__swsetup_r+0x9a>
 800ab8e:	89a3      	ldrh	r3, [r4, #12]
 800ab90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab98:	d003      	beq.n	800aba2 <__swsetup_r+0x9a>
 800ab9a:	4621      	mov	r1, r4
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	f000 fa09 	bl	800afb4 <__smakebuf_r>
 800aba2:	89a0      	ldrh	r0, [r4, #12]
 800aba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aba8:	f010 0301 	ands.w	r3, r0, #1
 800abac:	d00a      	beq.n	800abc4 <__swsetup_r+0xbc>
 800abae:	2300      	movs	r3, #0
 800abb0:	60a3      	str	r3, [r4, #8]
 800abb2:	6963      	ldr	r3, [r4, #20]
 800abb4:	425b      	negs	r3, r3
 800abb6:	61a3      	str	r3, [r4, #24]
 800abb8:	6923      	ldr	r3, [r4, #16]
 800abba:	b943      	cbnz	r3, 800abce <__swsetup_r+0xc6>
 800abbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800abc0:	d1ba      	bne.n	800ab38 <__swsetup_r+0x30>
 800abc2:	bd70      	pop	{r4, r5, r6, pc}
 800abc4:	0781      	lsls	r1, r0, #30
 800abc6:	bf58      	it	pl
 800abc8:	6963      	ldrpl	r3, [r4, #20]
 800abca:	60a3      	str	r3, [r4, #8]
 800abcc:	e7f4      	b.n	800abb8 <__swsetup_r+0xb0>
 800abce:	2000      	movs	r0, #0
 800abd0:	e7f7      	b.n	800abc2 <__swsetup_r+0xba>
 800abd2:	bf00      	nop
 800abd4:	200000fc 	.word	0x200000fc
 800abd8:	0800b66c 	.word	0x0800b66c
 800abdc:	0800b68c 	.word	0x0800b68c
 800abe0:	0800b64c 	.word	0x0800b64c

0800abe4 <abort>:
 800abe4:	b508      	push	{r3, lr}
 800abe6:	2006      	movs	r0, #6
 800abe8:	f000 fa54 	bl	800b094 <raise>
 800abec:	2001      	movs	r0, #1
 800abee:	f7f6 fc71 	bl	80014d4 <_exit>
	...

0800abf4 <__sflush_r>:
 800abf4:	898a      	ldrh	r2, [r1, #12]
 800abf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abfa:	4605      	mov	r5, r0
 800abfc:	0710      	lsls	r0, r2, #28
 800abfe:	460c      	mov	r4, r1
 800ac00:	d458      	bmi.n	800acb4 <__sflush_r+0xc0>
 800ac02:	684b      	ldr	r3, [r1, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	dc05      	bgt.n	800ac14 <__sflush_r+0x20>
 800ac08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	dc02      	bgt.n	800ac14 <__sflush_r+0x20>
 800ac0e:	2000      	movs	r0, #0
 800ac10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac16:	2e00      	cmp	r6, #0
 800ac18:	d0f9      	beq.n	800ac0e <__sflush_r+0x1a>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac20:	682f      	ldr	r7, [r5, #0]
 800ac22:	602b      	str	r3, [r5, #0]
 800ac24:	d032      	beq.n	800ac8c <__sflush_r+0x98>
 800ac26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	075a      	lsls	r2, r3, #29
 800ac2c:	d505      	bpl.n	800ac3a <__sflush_r+0x46>
 800ac2e:	6863      	ldr	r3, [r4, #4]
 800ac30:	1ac0      	subs	r0, r0, r3
 800ac32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac34:	b10b      	cbz	r3, 800ac3a <__sflush_r+0x46>
 800ac36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac38:	1ac0      	subs	r0, r0, r3
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac40:	6a21      	ldr	r1, [r4, #32]
 800ac42:	4628      	mov	r0, r5
 800ac44:	47b0      	blx	r6
 800ac46:	1c43      	adds	r3, r0, #1
 800ac48:	89a3      	ldrh	r3, [r4, #12]
 800ac4a:	d106      	bne.n	800ac5a <__sflush_r+0x66>
 800ac4c:	6829      	ldr	r1, [r5, #0]
 800ac4e:	291d      	cmp	r1, #29
 800ac50:	d82c      	bhi.n	800acac <__sflush_r+0xb8>
 800ac52:	4a2a      	ldr	r2, [pc, #168]	; (800acfc <__sflush_r+0x108>)
 800ac54:	40ca      	lsrs	r2, r1
 800ac56:	07d6      	lsls	r6, r2, #31
 800ac58:	d528      	bpl.n	800acac <__sflush_r+0xb8>
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	6062      	str	r2, [r4, #4]
 800ac5e:	04d9      	lsls	r1, r3, #19
 800ac60:	6922      	ldr	r2, [r4, #16]
 800ac62:	6022      	str	r2, [r4, #0]
 800ac64:	d504      	bpl.n	800ac70 <__sflush_r+0x7c>
 800ac66:	1c42      	adds	r2, r0, #1
 800ac68:	d101      	bne.n	800ac6e <__sflush_r+0x7a>
 800ac6a:	682b      	ldr	r3, [r5, #0]
 800ac6c:	b903      	cbnz	r3, 800ac70 <__sflush_r+0x7c>
 800ac6e:	6560      	str	r0, [r4, #84]	; 0x54
 800ac70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac72:	602f      	str	r7, [r5, #0]
 800ac74:	2900      	cmp	r1, #0
 800ac76:	d0ca      	beq.n	800ac0e <__sflush_r+0x1a>
 800ac78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac7c:	4299      	cmp	r1, r3
 800ac7e:	d002      	beq.n	800ac86 <__sflush_r+0x92>
 800ac80:	4628      	mov	r0, r5
 800ac82:	f7ff faa5 	bl	800a1d0 <_free_r>
 800ac86:	2000      	movs	r0, #0
 800ac88:	6360      	str	r0, [r4, #52]	; 0x34
 800ac8a:	e7c1      	b.n	800ac10 <__sflush_r+0x1c>
 800ac8c:	6a21      	ldr	r1, [r4, #32]
 800ac8e:	2301      	movs	r3, #1
 800ac90:	4628      	mov	r0, r5
 800ac92:	47b0      	blx	r6
 800ac94:	1c41      	adds	r1, r0, #1
 800ac96:	d1c7      	bne.n	800ac28 <__sflush_r+0x34>
 800ac98:	682b      	ldr	r3, [r5, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d0c4      	beq.n	800ac28 <__sflush_r+0x34>
 800ac9e:	2b1d      	cmp	r3, #29
 800aca0:	d001      	beq.n	800aca6 <__sflush_r+0xb2>
 800aca2:	2b16      	cmp	r3, #22
 800aca4:	d101      	bne.n	800acaa <__sflush_r+0xb6>
 800aca6:	602f      	str	r7, [r5, #0]
 800aca8:	e7b1      	b.n	800ac0e <__sflush_r+0x1a>
 800acaa:	89a3      	ldrh	r3, [r4, #12]
 800acac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acb0:	81a3      	strh	r3, [r4, #12]
 800acb2:	e7ad      	b.n	800ac10 <__sflush_r+0x1c>
 800acb4:	690f      	ldr	r7, [r1, #16]
 800acb6:	2f00      	cmp	r7, #0
 800acb8:	d0a9      	beq.n	800ac0e <__sflush_r+0x1a>
 800acba:	0793      	lsls	r3, r2, #30
 800acbc:	680e      	ldr	r6, [r1, #0]
 800acbe:	bf08      	it	eq
 800acc0:	694b      	ldreq	r3, [r1, #20]
 800acc2:	600f      	str	r7, [r1, #0]
 800acc4:	bf18      	it	ne
 800acc6:	2300      	movne	r3, #0
 800acc8:	eba6 0807 	sub.w	r8, r6, r7
 800accc:	608b      	str	r3, [r1, #8]
 800acce:	f1b8 0f00 	cmp.w	r8, #0
 800acd2:	dd9c      	ble.n	800ac0e <__sflush_r+0x1a>
 800acd4:	6a21      	ldr	r1, [r4, #32]
 800acd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acd8:	4643      	mov	r3, r8
 800acda:	463a      	mov	r2, r7
 800acdc:	4628      	mov	r0, r5
 800acde:	47b0      	blx	r6
 800ace0:	2800      	cmp	r0, #0
 800ace2:	dc06      	bgt.n	800acf2 <__sflush_r+0xfe>
 800ace4:	89a3      	ldrh	r3, [r4, #12]
 800ace6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acea:	81a3      	strh	r3, [r4, #12]
 800acec:	f04f 30ff 	mov.w	r0, #4294967295
 800acf0:	e78e      	b.n	800ac10 <__sflush_r+0x1c>
 800acf2:	4407      	add	r7, r0
 800acf4:	eba8 0800 	sub.w	r8, r8, r0
 800acf8:	e7e9      	b.n	800acce <__sflush_r+0xda>
 800acfa:	bf00      	nop
 800acfc:	20400001 	.word	0x20400001

0800ad00 <_fflush_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	690b      	ldr	r3, [r1, #16]
 800ad04:	4605      	mov	r5, r0
 800ad06:	460c      	mov	r4, r1
 800ad08:	b913      	cbnz	r3, 800ad10 <_fflush_r+0x10>
 800ad0a:	2500      	movs	r5, #0
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
 800ad10:	b118      	cbz	r0, 800ad1a <_fflush_r+0x1a>
 800ad12:	6983      	ldr	r3, [r0, #24]
 800ad14:	b90b      	cbnz	r3, 800ad1a <_fflush_r+0x1a>
 800ad16:	f000 f887 	bl	800ae28 <__sinit>
 800ad1a:	4b14      	ldr	r3, [pc, #80]	; (800ad6c <_fflush_r+0x6c>)
 800ad1c:	429c      	cmp	r4, r3
 800ad1e:	d11b      	bne.n	800ad58 <_fflush_r+0x58>
 800ad20:	686c      	ldr	r4, [r5, #4]
 800ad22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d0ef      	beq.n	800ad0a <_fflush_r+0xa>
 800ad2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad2c:	07d0      	lsls	r0, r2, #31
 800ad2e:	d404      	bmi.n	800ad3a <_fflush_r+0x3a>
 800ad30:	0599      	lsls	r1, r3, #22
 800ad32:	d402      	bmi.n	800ad3a <_fflush_r+0x3a>
 800ad34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad36:	f000 f915 	bl	800af64 <__retarget_lock_acquire_recursive>
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	f7ff ff59 	bl	800abf4 <__sflush_r>
 800ad42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad44:	07da      	lsls	r2, r3, #31
 800ad46:	4605      	mov	r5, r0
 800ad48:	d4e0      	bmi.n	800ad0c <_fflush_r+0xc>
 800ad4a:	89a3      	ldrh	r3, [r4, #12]
 800ad4c:	059b      	lsls	r3, r3, #22
 800ad4e:	d4dd      	bmi.n	800ad0c <_fflush_r+0xc>
 800ad50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad52:	f000 f908 	bl	800af66 <__retarget_lock_release_recursive>
 800ad56:	e7d9      	b.n	800ad0c <_fflush_r+0xc>
 800ad58:	4b05      	ldr	r3, [pc, #20]	; (800ad70 <_fflush_r+0x70>)
 800ad5a:	429c      	cmp	r4, r3
 800ad5c:	d101      	bne.n	800ad62 <_fflush_r+0x62>
 800ad5e:	68ac      	ldr	r4, [r5, #8]
 800ad60:	e7df      	b.n	800ad22 <_fflush_r+0x22>
 800ad62:	4b04      	ldr	r3, [pc, #16]	; (800ad74 <_fflush_r+0x74>)
 800ad64:	429c      	cmp	r4, r3
 800ad66:	bf08      	it	eq
 800ad68:	68ec      	ldreq	r4, [r5, #12]
 800ad6a:	e7da      	b.n	800ad22 <_fflush_r+0x22>
 800ad6c:	0800b66c 	.word	0x0800b66c
 800ad70:	0800b68c 	.word	0x0800b68c
 800ad74:	0800b64c 	.word	0x0800b64c

0800ad78 <std>:
 800ad78:	2300      	movs	r3, #0
 800ad7a:	b510      	push	{r4, lr}
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	e9c0 3300 	strd	r3, r3, [r0]
 800ad82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad86:	6083      	str	r3, [r0, #8]
 800ad88:	8181      	strh	r1, [r0, #12]
 800ad8a:	6643      	str	r3, [r0, #100]	; 0x64
 800ad8c:	81c2      	strh	r2, [r0, #14]
 800ad8e:	6183      	str	r3, [r0, #24]
 800ad90:	4619      	mov	r1, r3
 800ad92:	2208      	movs	r2, #8
 800ad94:	305c      	adds	r0, #92	; 0x5c
 800ad96:	f7fd fb53 	bl	8008440 <memset>
 800ad9a:	4b05      	ldr	r3, [pc, #20]	; (800adb0 <std+0x38>)
 800ad9c:	6263      	str	r3, [r4, #36]	; 0x24
 800ad9e:	4b05      	ldr	r3, [pc, #20]	; (800adb4 <std+0x3c>)
 800ada0:	62a3      	str	r3, [r4, #40]	; 0x28
 800ada2:	4b05      	ldr	r3, [pc, #20]	; (800adb8 <std+0x40>)
 800ada4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ada6:	4b05      	ldr	r3, [pc, #20]	; (800adbc <std+0x44>)
 800ada8:	6224      	str	r4, [r4, #32]
 800adaa:	6323      	str	r3, [r4, #48]	; 0x30
 800adac:	bd10      	pop	{r4, pc}
 800adae:	bf00      	nop
 800adb0:	0800b0cd 	.word	0x0800b0cd
 800adb4:	0800b0ef 	.word	0x0800b0ef
 800adb8:	0800b127 	.word	0x0800b127
 800adbc:	0800b14b 	.word	0x0800b14b

0800adc0 <_cleanup_r>:
 800adc0:	4901      	ldr	r1, [pc, #4]	; (800adc8 <_cleanup_r+0x8>)
 800adc2:	f000 b8af 	b.w	800af24 <_fwalk_reent>
 800adc6:	bf00      	nop
 800adc8:	0800ad01 	.word	0x0800ad01

0800adcc <__sfmoreglue>:
 800adcc:	b570      	push	{r4, r5, r6, lr}
 800adce:	2268      	movs	r2, #104	; 0x68
 800add0:	1e4d      	subs	r5, r1, #1
 800add2:	4355      	muls	r5, r2
 800add4:	460e      	mov	r6, r1
 800add6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800adda:	f7ff fa65 	bl	800a2a8 <_malloc_r>
 800adde:	4604      	mov	r4, r0
 800ade0:	b140      	cbz	r0, 800adf4 <__sfmoreglue+0x28>
 800ade2:	2100      	movs	r1, #0
 800ade4:	e9c0 1600 	strd	r1, r6, [r0]
 800ade8:	300c      	adds	r0, #12
 800adea:	60a0      	str	r0, [r4, #8]
 800adec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800adf0:	f7fd fb26 	bl	8008440 <memset>
 800adf4:	4620      	mov	r0, r4
 800adf6:	bd70      	pop	{r4, r5, r6, pc}

0800adf8 <__sfp_lock_acquire>:
 800adf8:	4801      	ldr	r0, [pc, #4]	; (800ae00 <__sfp_lock_acquire+0x8>)
 800adfa:	f000 b8b3 	b.w	800af64 <__retarget_lock_acquire_recursive>
 800adfe:	bf00      	nop
 800ae00:	20002031 	.word	0x20002031

0800ae04 <__sfp_lock_release>:
 800ae04:	4801      	ldr	r0, [pc, #4]	; (800ae0c <__sfp_lock_release+0x8>)
 800ae06:	f000 b8ae 	b.w	800af66 <__retarget_lock_release_recursive>
 800ae0a:	bf00      	nop
 800ae0c:	20002031 	.word	0x20002031

0800ae10 <__sinit_lock_acquire>:
 800ae10:	4801      	ldr	r0, [pc, #4]	; (800ae18 <__sinit_lock_acquire+0x8>)
 800ae12:	f000 b8a7 	b.w	800af64 <__retarget_lock_acquire_recursive>
 800ae16:	bf00      	nop
 800ae18:	20002032 	.word	0x20002032

0800ae1c <__sinit_lock_release>:
 800ae1c:	4801      	ldr	r0, [pc, #4]	; (800ae24 <__sinit_lock_release+0x8>)
 800ae1e:	f000 b8a2 	b.w	800af66 <__retarget_lock_release_recursive>
 800ae22:	bf00      	nop
 800ae24:	20002032 	.word	0x20002032

0800ae28 <__sinit>:
 800ae28:	b510      	push	{r4, lr}
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	f7ff fff0 	bl	800ae10 <__sinit_lock_acquire>
 800ae30:	69a3      	ldr	r3, [r4, #24]
 800ae32:	b11b      	cbz	r3, 800ae3c <__sinit+0x14>
 800ae34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae38:	f7ff bff0 	b.w	800ae1c <__sinit_lock_release>
 800ae3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae40:	6523      	str	r3, [r4, #80]	; 0x50
 800ae42:	4b13      	ldr	r3, [pc, #76]	; (800ae90 <__sinit+0x68>)
 800ae44:	4a13      	ldr	r2, [pc, #76]	; (800ae94 <__sinit+0x6c>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae4a:	42a3      	cmp	r3, r4
 800ae4c:	bf04      	itt	eq
 800ae4e:	2301      	moveq	r3, #1
 800ae50:	61a3      	streq	r3, [r4, #24]
 800ae52:	4620      	mov	r0, r4
 800ae54:	f000 f820 	bl	800ae98 <__sfp>
 800ae58:	6060      	str	r0, [r4, #4]
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f000 f81c 	bl	800ae98 <__sfp>
 800ae60:	60a0      	str	r0, [r4, #8]
 800ae62:	4620      	mov	r0, r4
 800ae64:	f000 f818 	bl	800ae98 <__sfp>
 800ae68:	2200      	movs	r2, #0
 800ae6a:	60e0      	str	r0, [r4, #12]
 800ae6c:	2104      	movs	r1, #4
 800ae6e:	6860      	ldr	r0, [r4, #4]
 800ae70:	f7ff ff82 	bl	800ad78 <std>
 800ae74:	68a0      	ldr	r0, [r4, #8]
 800ae76:	2201      	movs	r2, #1
 800ae78:	2109      	movs	r1, #9
 800ae7a:	f7ff ff7d 	bl	800ad78 <std>
 800ae7e:	68e0      	ldr	r0, [r4, #12]
 800ae80:	2202      	movs	r2, #2
 800ae82:	2112      	movs	r1, #18
 800ae84:	f7ff ff78 	bl	800ad78 <std>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	61a3      	str	r3, [r4, #24]
 800ae8c:	e7d2      	b.n	800ae34 <__sinit+0xc>
 800ae8e:	bf00      	nop
 800ae90:	0800b2d0 	.word	0x0800b2d0
 800ae94:	0800adc1 	.word	0x0800adc1

0800ae98 <__sfp>:
 800ae98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9a:	4607      	mov	r7, r0
 800ae9c:	f7ff ffac 	bl	800adf8 <__sfp_lock_acquire>
 800aea0:	4b1e      	ldr	r3, [pc, #120]	; (800af1c <__sfp+0x84>)
 800aea2:	681e      	ldr	r6, [r3, #0]
 800aea4:	69b3      	ldr	r3, [r6, #24]
 800aea6:	b913      	cbnz	r3, 800aeae <__sfp+0x16>
 800aea8:	4630      	mov	r0, r6
 800aeaa:	f7ff ffbd 	bl	800ae28 <__sinit>
 800aeae:	3648      	adds	r6, #72	; 0x48
 800aeb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	d503      	bpl.n	800aec0 <__sfp+0x28>
 800aeb8:	6833      	ldr	r3, [r6, #0]
 800aeba:	b30b      	cbz	r3, 800af00 <__sfp+0x68>
 800aebc:	6836      	ldr	r6, [r6, #0]
 800aebe:	e7f7      	b.n	800aeb0 <__sfp+0x18>
 800aec0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aec4:	b9d5      	cbnz	r5, 800aefc <__sfp+0x64>
 800aec6:	4b16      	ldr	r3, [pc, #88]	; (800af20 <__sfp+0x88>)
 800aec8:	60e3      	str	r3, [r4, #12]
 800aeca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aece:	6665      	str	r5, [r4, #100]	; 0x64
 800aed0:	f000 f847 	bl	800af62 <__retarget_lock_init_recursive>
 800aed4:	f7ff ff96 	bl	800ae04 <__sfp_lock_release>
 800aed8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aedc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aee0:	6025      	str	r5, [r4, #0]
 800aee2:	61a5      	str	r5, [r4, #24]
 800aee4:	2208      	movs	r2, #8
 800aee6:	4629      	mov	r1, r5
 800aee8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aeec:	f7fd faa8 	bl	8008440 <memset>
 800aef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aef4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aef8:	4620      	mov	r0, r4
 800aefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aefc:	3468      	adds	r4, #104	; 0x68
 800aefe:	e7d9      	b.n	800aeb4 <__sfp+0x1c>
 800af00:	2104      	movs	r1, #4
 800af02:	4638      	mov	r0, r7
 800af04:	f7ff ff62 	bl	800adcc <__sfmoreglue>
 800af08:	4604      	mov	r4, r0
 800af0a:	6030      	str	r0, [r6, #0]
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d1d5      	bne.n	800aebc <__sfp+0x24>
 800af10:	f7ff ff78 	bl	800ae04 <__sfp_lock_release>
 800af14:	230c      	movs	r3, #12
 800af16:	603b      	str	r3, [r7, #0]
 800af18:	e7ee      	b.n	800aef8 <__sfp+0x60>
 800af1a:	bf00      	nop
 800af1c:	0800b2d0 	.word	0x0800b2d0
 800af20:	ffff0001 	.word	0xffff0001

0800af24 <_fwalk_reent>:
 800af24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af28:	4606      	mov	r6, r0
 800af2a:	4688      	mov	r8, r1
 800af2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af30:	2700      	movs	r7, #0
 800af32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af36:	f1b9 0901 	subs.w	r9, r9, #1
 800af3a:	d505      	bpl.n	800af48 <_fwalk_reent+0x24>
 800af3c:	6824      	ldr	r4, [r4, #0]
 800af3e:	2c00      	cmp	r4, #0
 800af40:	d1f7      	bne.n	800af32 <_fwalk_reent+0xe>
 800af42:	4638      	mov	r0, r7
 800af44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af48:	89ab      	ldrh	r3, [r5, #12]
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d907      	bls.n	800af5e <_fwalk_reent+0x3a>
 800af4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af52:	3301      	adds	r3, #1
 800af54:	d003      	beq.n	800af5e <_fwalk_reent+0x3a>
 800af56:	4629      	mov	r1, r5
 800af58:	4630      	mov	r0, r6
 800af5a:	47c0      	blx	r8
 800af5c:	4307      	orrs	r7, r0
 800af5e:	3568      	adds	r5, #104	; 0x68
 800af60:	e7e9      	b.n	800af36 <_fwalk_reent+0x12>

0800af62 <__retarget_lock_init_recursive>:
 800af62:	4770      	bx	lr

0800af64 <__retarget_lock_acquire_recursive>:
 800af64:	4770      	bx	lr

0800af66 <__retarget_lock_release_recursive>:
 800af66:	4770      	bx	lr

0800af68 <__swhatbuf_r>:
 800af68:	b570      	push	{r4, r5, r6, lr}
 800af6a:	460e      	mov	r6, r1
 800af6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af70:	2900      	cmp	r1, #0
 800af72:	b096      	sub	sp, #88	; 0x58
 800af74:	4614      	mov	r4, r2
 800af76:	461d      	mov	r5, r3
 800af78:	da08      	bge.n	800af8c <__swhatbuf_r+0x24>
 800af7a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800af7e:	2200      	movs	r2, #0
 800af80:	602a      	str	r2, [r5, #0]
 800af82:	061a      	lsls	r2, r3, #24
 800af84:	d410      	bmi.n	800afa8 <__swhatbuf_r+0x40>
 800af86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af8a:	e00e      	b.n	800afaa <__swhatbuf_r+0x42>
 800af8c:	466a      	mov	r2, sp
 800af8e:	f000 f903 	bl	800b198 <_fstat_r>
 800af92:	2800      	cmp	r0, #0
 800af94:	dbf1      	blt.n	800af7a <__swhatbuf_r+0x12>
 800af96:	9a01      	ldr	r2, [sp, #4]
 800af98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800afa0:	425a      	negs	r2, r3
 800afa2:	415a      	adcs	r2, r3
 800afa4:	602a      	str	r2, [r5, #0]
 800afa6:	e7ee      	b.n	800af86 <__swhatbuf_r+0x1e>
 800afa8:	2340      	movs	r3, #64	; 0x40
 800afaa:	2000      	movs	r0, #0
 800afac:	6023      	str	r3, [r4, #0]
 800afae:	b016      	add	sp, #88	; 0x58
 800afb0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800afb4 <__smakebuf_r>:
 800afb4:	898b      	ldrh	r3, [r1, #12]
 800afb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afb8:	079d      	lsls	r5, r3, #30
 800afba:	4606      	mov	r6, r0
 800afbc:	460c      	mov	r4, r1
 800afbe:	d507      	bpl.n	800afd0 <__smakebuf_r+0x1c>
 800afc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800afc4:	6023      	str	r3, [r4, #0]
 800afc6:	6123      	str	r3, [r4, #16]
 800afc8:	2301      	movs	r3, #1
 800afca:	6163      	str	r3, [r4, #20]
 800afcc:	b002      	add	sp, #8
 800afce:	bd70      	pop	{r4, r5, r6, pc}
 800afd0:	ab01      	add	r3, sp, #4
 800afd2:	466a      	mov	r2, sp
 800afd4:	f7ff ffc8 	bl	800af68 <__swhatbuf_r>
 800afd8:	9900      	ldr	r1, [sp, #0]
 800afda:	4605      	mov	r5, r0
 800afdc:	4630      	mov	r0, r6
 800afde:	f7ff f963 	bl	800a2a8 <_malloc_r>
 800afe2:	b948      	cbnz	r0, 800aff8 <__smakebuf_r+0x44>
 800afe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afe8:	059a      	lsls	r2, r3, #22
 800afea:	d4ef      	bmi.n	800afcc <__smakebuf_r+0x18>
 800afec:	f023 0303 	bic.w	r3, r3, #3
 800aff0:	f043 0302 	orr.w	r3, r3, #2
 800aff4:	81a3      	strh	r3, [r4, #12]
 800aff6:	e7e3      	b.n	800afc0 <__smakebuf_r+0xc>
 800aff8:	4b0d      	ldr	r3, [pc, #52]	; (800b030 <__smakebuf_r+0x7c>)
 800affa:	62b3      	str	r3, [r6, #40]	; 0x28
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	6020      	str	r0, [r4, #0]
 800b000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b004:	81a3      	strh	r3, [r4, #12]
 800b006:	9b00      	ldr	r3, [sp, #0]
 800b008:	6163      	str	r3, [r4, #20]
 800b00a:	9b01      	ldr	r3, [sp, #4]
 800b00c:	6120      	str	r0, [r4, #16]
 800b00e:	b15b      	cbz	r3, 800b028 <__smakebuf_r+0x74>
 800b010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b014:	4630      	mov	r0, r6
 800b016:	f000 f8d1 	bl	800b1bc <_isatty_r>
 800b01a:	b128      	cbz	r0, 800b028 <__smakebuf_r+0x74>
 800b01c:	89a3      	ldrh	r3, [r4, #12]
 800b01e:	f023 0303 	bic.w	r3, r3, #3
 800b022:	f043 0301 	orr.w	r3, r3, #1
 800b026:	81a3      	strh	r3, [r4, #12]
 800b028:	89a0      	ldrh	r0, [r4, #12]
 800b02a:	4305      	orrs	r5, r0
 800b02c:	81a5      	strh	r5, [r4, #12]
 800b02e:	e7cd      	b.n	800afcc <__smakebuf_r+0x18>
 800b030:	0800adc1 	.word	0x0800adc1

0800b034 <_malloc_usable_size_r>:
 800b034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b038:	1f18      	subs	r0, r3, #4
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	bfbc      	itt	lt
 800b03e:	580b      	ldrlt	r3, [r1, r0]
 800b040:	18c0      	addlt	r0, r0, r3
 800b042:	4770      	bx	lr

0800b044 <_raise_r>:
 800b044:	291f      	cmp	r1, #31
 800b046:	b538      	push	{r3, r4, r5, lr}
 800b048:	4604      	mov	r4, r0
 800b04a:	460d      	mov	r5, r1
 800b04c:	d904      	bls.n	800b058 <_raise_r+0x14>
 800b04e:	2316      	movs	r3, #22
 800b050:	6003      	str	r3, [r0, #0]
 800b052:	f04f 30ff 	mov.w	r0, #4294967295
 800b056:	bd38      	pop	{r3, r4, r5, pc}
 800b058:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b05a:	b112      	cbz	r2, 800b062 <_raise_r+0x1e>
 800b05c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b060:	b94b      	cbnz	r3, 800b076 <_raise_r+0x32>
 800b062:	4620      	mov	r0, r4
 800b064:	f000 f830 	bl	800b0c8 <_getpid_r>
 800b068:	462a      	mov	r2, r5
 800b06a:	4601      	mov	r1, r0
 800b06c:	4620      	mov	r0, r4
 800b06e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b072:	f000 b817 	b.w	800b0a4 <_kill_r>
 800b076:	2b01      	cmp	r3, #1
 800b078:	d00a      	beq.n	800b090 <_raise_r+0x4c>
 800b07a:	1c59      	adds	r1, r3, #1
 800b07c:	d103      	bne.n	800b086 <_raise_r+0x42>
 800b07e:	2316      	movs	r3, #22
 800b080:	6003      	str	r3, [r0, #0]
 800b082:	2001      	movs	r0, #1
 800b084:	e7e7      	b.n	800b056 <_raise_r+0x12>
 800b086:	2400      	movs	r4, #0
 800b088:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b08c:	4628      	mov	r0, r5
 800b08e:	4798      	blx	r3
 800b090:	2000      	movs	r0, #0
 800b092:	e7e0      	b.n	800b056 <_raise_r+0x12>

0800b094 <raise>:
 800b094:	4b02      	ldr	r3, [pc, #8]	; (800b0a0 <raise+0xc>)
 800b096:	4601      	mov	r1, r0
 800b098:	6818      	ldr	r0, [r3, #0]
 800b09a:	f7ff bfd3 	b.w	800b044 <_raise_r>
 800b09e:	bf00      	nop
 800b0a0:	200000fc 	.word	0x200000fc

0800b0a4 <_kill_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	4d07      	ldr	r5, [pc, #28]	; (800b0c4 <_kill_r+0x20>)
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	4604      	mov	r4, r0
 800b0ac:	4608      	mov	r0, r1
 800b0ae:	4611      	mov	r1, r2
 800b0b0:	602b      	str	r3, [r5, #0]
 800b0b2:	f7f6 f9ff 	bl	80014b4 <_kill>
 800b0b6:	1c43      	adds	r3, r0, #1
 800b0b8:	d102      	bne.n	800b0c0 <_kill_r+0x1c>
 800b0ba:	682b      	ldr	r3, [r5, #0]
 800b0bc:	b103      	cbz	r3, 800b0c0 <_kill_r+0x1c>
 800b0be:	6023      	str	r3, [r4, #0]
 800b0c0:	bd38      	pop	{r3, r4, r5, pc}
 800b0c2:	bf00      	nop
 800b0c4:	2000202c 	.word	0x2000202c

0800b0c8 <_getpid_r>:
 800b0c8:	f7f6 b9ec 	b.w	80014a4 <_getpid>

0800b0cc <__sread>:
 800b0cc:	b510      	push	{r4, lr}
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0d4:	f000 f894 	bl	800b200 <_read_r>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	bfab      	itete	ge
 800b0dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b0de:	89a3      	ldrhlt	r3, [r4, #12]
 800b0e0:	181b      	addge	r3, r3, r0
 800b0e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b0e6:	bfac      	ite	ge
 800b0e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b0ea:	81a3      	strhlt	r3, [r4, #12]
 800b0ec:	bd10      	pop	{r4, pc}

0800b0ee <__swrite>:
 800b0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f2:	461f      	mov	r7, r3
 800b0f4:	898b      	ldrh	r3, [r1, #12]
 800b0f6:	05db      	lsls	r3, r3, #23
 800b0f8:	4605      	mov	r5, r0
 800b0fa:	460c      	mov	r4, r1
 800b0fc:	4616      	mov	r6, r2
 800b0fe:	d505      	bpl.n	800b10c <__swrite+0x1e>
 800b100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b104:	2302      	movs	r3, #2
 800b106:	2200      	movs	r2, #0
 800b108:	f000 f868 	bl	800b1dc <_lseek_r>
 800b10c:	89a3      	ldrh	r3, [r4, #12]
 800b10e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b112:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b116:	81a3      	strh	r3, [r4, #12]
 800b118:	4632      	mov	r2, r6
 800b11a:	463b      	mov	r3, r7
 800b11c:	4628      	mov	r0, r5
 800b11e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b122:	f000 b817 	b.w	800b154 <_write_r>

0800b126 <__sseek>:
 800b126:	b510      	push	{r4, lr}
 800b128:	460c      	mov	r4, r1
 800b12a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b12e:	f000 f855 	bl	800b1dc <_lseek_r>
 800b132:	1c43      	adds	r3, r0, #1
 800b134:	89a3      	ldrh	r3, [r4, #12]
 800b136:	bf15      	itete	ne
 800b138:	6560      	strne	r0, [r4, #84]	; 0x54
 800b13a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b13e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b142:	81a3      	strheq	r3, [r4, #12]
 800b144:	bf18      	it	ne
 800b146:	81a3      	strhne	r3, [r4, #12]
 800b148:	bd10      	pop	{r4, pc}

0800b14a <__sclose>:
 800b14a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b14e:	f000 b813 	b.w	800b178 <_close_r>
	...

0800b154 <_write_r>:
 800b154:	b538      	push	{r3, r4, r5, lr}
 800b156:	4d07      	ldr	r5, [pc, #28]	; (800b174 <_write_r+0x20>)
 800b158:	4604      	mov	r4, r0
 800b15a:	4608      	mov	r0, r1
 800b15c:	4611      	mov	r1, r2
 800b15e:	2200      	movs	r2, #0
 800b160:	602a      	str	r2, [r5, #0]
 800b162:	461a      	mov	r2, r3
 800b164:	f7f6 f9dd 	bl	8001522 <_write>
 800b168:	1c43      	adds	r3, r0, #1
 800b16a:	d102      	bne.n	800b172 <_write_r+0x1e>
 800b16c:	682b      	ldr	r3, [r5, #0]
 800b16e:	b103      	cbz	r3, 800b172 <_write_r+0x1e>
 800b170:	6023      	str	r3, [r4, #0]
 800b172:	bd38      	pop	{r3, r4, r5, pc}
 800b174:	2000202c 	.word	0x2000202c

0800b178 <_close_r>:
 800b178:	b538      	push	{r3, r4, r5, lr}
 800b17a:	4d06      	ldr	r5, [pc, #24]	; (800b194 <_close_r+0x1c>)
 800b17c:	2300      	movs	r3, #0
 800b17e:	4604      	mov	r4, r0
 800b180:	4608      	mov	r0, r1
 800b182:	602b      	str	r3, [r5, #0]
 800b184:	f7f6 f9e9 	bl	800155a <_close>
 800b188:	1c43      	adds	r3, r0, #1
 800b18a:	d102      	bne.n	800b192 <_close_r+0x1a>
 800b18c:	682b      	ldr	r3, [r5, #0]
 800b18e:	b103      	cbz	r3, 800b192 <_close_r+0x1a>
 800b190:	6023      	str	r3, [r4, #0]
 800b192:	bd38      	pop	{r3, r4, r5, pc}
 800b194:	2000202c 	.word	0x2000202c

0800b198 <_fstat_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	4d07      	ldr	r5, [pc, #28]	; (800b1b8 <_fstat_r+0x20>)
 800b19c:	2300      	movs	r3, #0
 800b19e:	4604      	mov	r4, r0
 800b1a0:	4608      	mov	r0, r1
 800b1a2:	4611      	mov	r1, r2
 800b1a4:	602b      	str	r3, [r5, #0]
 800b1a6:	f7f6 f9e4 	bl	8001572 <_fstat>
 800b1aa:	1c43      	adds	r3, r0, #1
 800b1ac:	d102      	bne.n	800b1b4 <_fstat_r+0x1c>
 800b1ae:	682b      	ldr	r3, [r5, #0]
 800b1b0:	b103      	cbz	r3, 800b1b4 <_fstat_r+0x1c>
 800b1b2:	6023      	str	r3, [r4, #0]
 800b1b4:	bd38      	pop	{r3, r4, r5, pc}
 800b1b6:	bf00      	nop
 800b1b8:	2000202c 	.word	0x2000202c

0800b1bc <_isatty_r>:
 800b1bc:	b538      	push	{r3, r4, r5, lr}
 800b1be:	4d06      	ldr	r5, [pc, #24]	; (800b1d8 <_isatty_r+0x1c>)
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	4604      	mov	r4, r0
 800b1c4:	4608      	mov	r0, r1
 800b1c6:	602b      	str	r3, [r5, #0]
 800b1c8:	f7f6 f9e3 	bl	8001592 <_isatty>
 800b1cc:	1c43      	adds	r3, r0, #1
 800b1ce:	d102      	bne.n	800b1d6 <_isatty_r+0x1a>
 800b1d0:	682b      	ldr	r3, [r5, #0]
 800b1d2:	b103      	cbz	r3, 800b1d6 <_isatty_r+0x1a>
 800b1d4:	6023      	str	r3, [r4, #0]
 800b1d6:	bd38      	pop	{r3, r4, r5, pc}
 800b1d8:	2000202c 	.word	0x2000202c

0800b1dc <_lseek_r>:
 800b1dc:	b538      	push	{r3, r4, r5, lr}
 800b1de:	4d07      	ldr	r5, [pc, #28]	; (800b1fc <_lseek_r+0x20>)
 800b1e0:	4604      	mov	r4, r0
 800b1e2:	4608      	mov	r0, r1
 800b1e4:	4611      	mov	r1, r2
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	602a      	str	r2, [r5, #0]
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	f7f6 f9dc 	bl	80015a8 <_lseek>
 800b1f0:	1c43      	adds	r3, r0, #1
 800b1f2:	d102      	bne.n	800b1fa <_lseek_r+0x1e>
 800b1f4:	682b      	ldr	r3, [r5, #0]
 800b1f6:	b103      	cbz	r3, 800b1fa <_lseek_r+0x1e>
 800b1f8:	6023      	str	r3, [r4, #0]
 800b1fa:	bd38      	pop	{r3, r4, r5, pc}
 800b1fc:	2000202c 	.word	0x2000202c

0800b200 <_read_r>:
 800b200:	b538      	push	{r3, r4, r5, lr}
 800b202:	4d07      	ldr	r5, [pc, #28]	; (800b220 <_read_r+0x20>)
 800b204:	4604      	mov	r4, r0
 800b206:	4608      	mov	r0, r1
 800b208:	4611      	mov	r1, r2
 800b20a:	2200      	movs	r2, #0
 800b20c:	602a      	str	r2, [r5, #0]
 800b20e:	461a      	mov	r2, r3
 800b210:	f7f6 f96a 	bl	80014e8 <_read>
 800b214:	1c43      	adds	r3, r0, #1
 800b216:	d102      	bne.n	800b21e <_read_r+0x1e>
 800b218:	682b      	ldr	r3, [r5, #0]
 800b21a:	b103      	cbz	r3, 800b21e <_read_r+0x1e>
 800b21c:	6023      	str	r3, [r4, #0]
 800b21e:	bd38      	pop	{r3, r4, r5, pc}
 800b220:	2000202c 	.word	0x2000202c

0800b224 <_init>:
 800b224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b226:	bf00      	nop
 800b228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b22a:	bc08      	pop	{r3}
 800b22c:	469e      	mov	lr, r3
 800b22e:	4770      	bx	lr

0800b230 <_fini>:
 800b230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b232:	bf00      	nop
 800b234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b236:	bc08      	pop	{r3}
 800b238:	469e      	mov	lr, r3
 800b23a:	4770      	bx	lr
