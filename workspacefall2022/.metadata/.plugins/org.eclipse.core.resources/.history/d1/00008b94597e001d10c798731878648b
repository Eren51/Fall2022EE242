
usbbuttoncountinclass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000784c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080079d4  080079d4  000179d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a2c  08007a2c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007a2c  08007a2c  00017a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a34  08007a34  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a34  08007a34  00017a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a38  08007a38  00017a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001c84  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d80  20001d80  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013854  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f07  00000000  00000000  00033980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  00036888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f50  00000000  00000000  00037930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000239c9  00000000  00000000  00038880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001411c  00000000  00000000  0005c249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc638  00000000  00000000  00070365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c99d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004544  00000000  00000000  0013c9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080079bc 	.word	0x080079bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	080079bc 	.word	0x080079bc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
timercount=TIM2->CNT;
 80004d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d6:	4a06      	ldr	r2, [pc, #24]	; (80004f0 <main+0x24>)
 80004d8:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fa3b 	bl	8000954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f809 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f8bf 	bl	8000664 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004e6:	f006 fd49 	bl	8006f7c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80004ea:	f000 f86d 	bl	80005c8 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <main+0x22>
 80004f0:	20000124 	.word	0x20000124

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b094      	sub	sp, #80	; 0x50
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	2230      	movs	r2, #48	; 0x30
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f007 fa52 	bl	80079ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <SystemClock_Config+0xcc>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <SystemClock_Config+0xcc>)
 8000522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000526:	6413      	str	r3, [r2, #64]	; 0x40
 8000528:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <SystemClock_Config+0xd0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a21      	ldr	r2, [pc, #132]	; (80005c4 <SystemClock_Config+0xd0>)
 800053e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000550:	2301      	movs	r3, #1
 8000552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000564:	2304      	movs	r3, #4
 8000566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000568:	23a8      	movs	r3, #168	; 0xa8
 800056a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056c:	2302      	movs	r3, #2
 800056e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000570:	2307      	movs	r3, #7
 8000572:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0320 	add.w	r3, r7, #32
 8000578:	4618      	mov	r0, r3
 800057a:	f002 f80f 	bl	800259c <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000584:	f000 f910 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	230f      	movs	r3, #15
 800058a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2302      	movs	r3, #2
 800058e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000594:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000598:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800059a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2105      	movs	r1, #5
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fa70 	bl	8002a8c <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005b2:	f000 f8f9 	bl	80007a8 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3750      	adds	r7, #80	; 0x50
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40007000 	.word	0x40007000

080005c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005dc:	463b      	mov	r3, r7
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005e4:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <MX_TIM2_Init+0x98>)
 80005e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000-1;
 80005ec:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <MX_TIM2_Init+0x98>)
 80005ee:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80005f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f4:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_TIM2_Init+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800-1;
 80005fa:	4b19      	ldr	r3, [pc, #100]	; (8000660 <MX_TIM2_Init+0x98>)
 80005fc:	f240 321f 	movw	r2, #799	; 0x31f
 8000600:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <MX_TIM2_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_TIM2_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800060e:	4814      	ldr	r0, [pc, #80]	; (8000660 <MX_TIM2_Init+0x98>)
 8000610:	f002 fc34 	bl	8002e7c <HAL_TIM_Base_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800061a:	f000 f8c5 	bl	80007a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800061e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000622:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	4619      	mov	r1, r3
 800062a:	480d      	ldr	r0, [pc, #52]	; (8000660 <MX_TIM2_Init+0x98>)
 800062c:	f002 fe1d 	bl	800326a <HAL_TIM_ConfigClockSource>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000636:	f000 f8b7 	bl	80007a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800063a:	2300      	movs	r3, #0
 800063c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	4619      	mov	r1, r3
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <MX_TIM2_Init+0x98>)
 8000648:	f003 f838 	bl	80036bc <HAL_TIMEx_MasterConfigSynchronization>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000652:	f000 f8a9 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000128 	.word	0x20000128

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	4b20      	ldr	r3, [pc, #128]	; (8000700 <MX_GPIO_Init+0x9c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a1f      	ldr	r2, [pc, #124]	; (8000700 <MX_GPIO_Init+0x9c>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <MX_GPIO_Init+0x9c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <MX_GPIO_Init+0x9c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a18      	ldr	r2, [pc, #96]	; (8000700 <MX_GPIO_Init+0x9c>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_GPIO_Init+0x9c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_GPIO_Init+0x9c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a11      	ldr	r2, [pc, #68]	; (8000700 <MX_GPIO_Init+0x9c>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_GPIO_Init+0x9c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ce:	2301      	movs	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006d2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80006d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	4619      	mov	r1, r3
 80006e2:	4808      	ldr	r0, [pc, #32]	; (8000704 <MX_GPIO_Init+0xa0>)
 80006e4:	f000 fb10 	bl	8000d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2100      	movs	r1, #0
 80006ec:	2006      	movs	r0, #6
 80006ee:	f000 fac6 	bl	8000c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006f2:	2006      	movs	r0, #6
 80006f4:	f000 fadf 	bl	8000cb6 <HAL_NVIC_EnableIRQ>

}
 80006f8:	bf00      	nop
 80006fa:	3720      	adds	r7, #32
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40020000 	.word	0x40020000

08000708 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==GPIO_PIN_0)
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d121      	bne.n	800075c <HAL_GPIO_EXTI_Callback+0x54>
	{
		switch (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000718:	2101      	movs	r1, #1
 800071a:	4813      	ldr	r0, [pc, #76]	; (8000768 <HAL_GPIO_EXTI_Callback+0x60>)
 800071c:	f000 fc90 	bl	8001040 <HAL_GPIO_ReadPin>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d002      	beq.n	800072c <HAL_GPIO_EXTI_Callback+0x24>
 8000726:	2b01      	cmp	r3, #1
 8000728:	d00f      	beq.n	800074a <HAL_GPIO_EXTI_Callback+0x42>

		}
		//HAL_NVIC_DisableIRQ(EXTI0_IRQn);

	}// if button
}//exti callback
 800072a:	e018      	b.n	800075e <HAL_GPIO_EXTI_Callback+0x56>
			HAL_TIM_Base_Start_IT(&htim2);
 800072c:	480f      	ldr	r0, [pc, #60]	; (800076c <HAL_GPIO_EXTI_Callback+0x64>)
 800072e:	f002 fbf5 	bl	8002f1c <HAL_TIM_Base_Start_IT>
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000732:	2006      	movs	r0, #6
 8000734:	f000 facd 	bl	8000cd2 <HAL_NVIC_DisableIRQ>
			state=bup;
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <HAL_GPIO_EXTI_Callback+0x68>)
 800073a:	2202      	movs	r2, #2
 800073c:	701a      	strb	r2, [r3, #0]
			buttonupcount++;
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000746:	6013      	str	r3, [r2, #0]
			break;
 8000748:	e009      	b.n	800075e <HAL_GPIO_EXTI_Callback+0x56>
			state=bdown;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <HAL_GPIO_EXTI_Callback+0x68>)
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
			buttondowncount++;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <HAL_GPIO_EXTI_Callback+0x70>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	4a08      	ldr	r2, [pc, #32]	; (8000778 <HAL_GPIO_EXTI_Callback+0x70>)
 8000758:	6013      	str	r3, [r2, #0]
			break;
 800075a:	e000      	b.n	800075e <HAL_GPIO_EXTI_Callback+0x56>
	}// if button
 800075c:	bf00      	nop
}//exti callback
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40020000 	.word	0x40020000
 800076c:	20000128 	.word	0x20000128
 8000770:	20000118 	.word	0x20000118
 8000774:	2000011c 	.word	0x2000011c
 8000778:	20000120 	.word	0x20000120

0800077c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

	 state=idle;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
	 HAL_TIM_Base_Stop_IT(&htim2);
 800078a:	4806      	ldr	r0, [pc, #24]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800078c:	f002 fc36 	bl	8002ffc <HAL_TIM_Base_Stop_IT>
	 HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000790:	2006      	movs	r0, #6
 8000792:	f000 fa90 	bl	8000cb6 <HAL_NVIC_EnableIRQ>


}//period callback
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000118 	.word	0x20000118
 80007a4:	20000128 	.word	0x20000128

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_MspInit+0x4c>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <HAL_MspInit+0x4c>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_MspInit+0x4c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_MspInit+0x4c>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_MspInit+0x4c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007f2:	2007      	movs	r0, #7
 80007f4:	f000 fa38 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800

08000804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000814:	d115      	bne.n	8000842 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <HAL_TIM_Base_MspInit+0x48>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a0b      	ldr	r2, [pc, #44]	; (800084c <HAL_TIM_Base_MspInit+0x48>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_TIM_Base_MspInit+0x48>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	201c      	movs	r0, #28
 8000838:	f000 fa21 	bl	8000c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800083c:	201c      	movs	r0, #28
 800083e:	f000 fa3a 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <NMI_Handler+0x4>

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 f8ac 	bl	80009f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80008a8:	2001      	movs	r0, #1
 80008aa:	f000 fbe1 	bl	8001070 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <TIM2_IRQHandler+0x10>)
 80008ba:	f002 fbce 	bl	800305a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000128 	.word	0x20000128

080008c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <OTG_FS_IRQHandler+0x10>)
 80008ce:	f000 fd37 	bl	8001340 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20001654 	.word	0x20001654

080008dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <SystemInit+0x20>)
 80008e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <SystemInit+0x20>)
 80008e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000938 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000906:	490e      	ldr	r1, [pc, #56]	; (8000940 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000908:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800091c:	4c0b      	ldr	r4, [pc, #44]	; (800094c <LoopFillZerobss+0x26>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800092a:	f7ff ffd7 	bl	80008dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800092e:	f007 f819 	bl	8007964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000932:	f7ff fdcb 	bl	80004cc <main>
  bx  lr    
 8000936:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000938:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800093c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000940:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000944:	08007a3c 	.word	0x08007a3c
  ldr r2, =_sbss
 8000948:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800094c:	20001d80 	.word	0x20001d80

08000950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000950:	e7fe      	b.n	8000950 <ADC_IRQHandler>
	...

08000954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_Init+0x40>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <HAL_Init+0x40>)
 800095e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000962:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <HAL_Init+0x40>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <HAL_Init+0x40>)
 800096a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800096e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_Init+0x40>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a07      	ldr	r2, [pc, #28]	; (8000994 <HAL_Init+0x40>)
 8000976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800097a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097c:	2003      	movs	r0, #3
 800097e:	f000 f973 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000982:	2000      	movs	r0, #0
 8000984:	f000 f808 	bl	8000998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000988:	f7ff ff14 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023c00 	.word	0x40023c00

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_InitTick+0x54>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_InitTick+0x58>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f999 	bl	8000cee <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00e      	b.n	80009e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b0f      	cmp	r3, #15
 80009ca:	d80a      	bhi.n	80009e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009cc:	2200      	movs	r2, #0
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f000 f953 	bl	8000c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d8:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <HAL_InitTick+0x5c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	e000      	b.n	80009e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000004 	.word	0x20000004

080009f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_IncTick+0x20>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_IncTick+0x24>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <HAL_IncTick+0x24>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000170 	.word	0x20000170

08000a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <HAL_GetTick+0x14>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000170 	.word	0x20000170

08000a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a40:	f7ff ffee 	bl	8000a20 <HAL_GetTick>
 8000a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a50:	d005      	beq.n	8000a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <HAL_Delay+0x44>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a5e:	bf00      	nop
 8000a60:	f7ff ffde 	bl	8000a20 <HAL_GetTick>
 8000a64:	4602      	mov	r2, r0
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d8f7      	bhi.n	8000a60 <HAL_Delay+0x28>
  {
  }
}
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008

08000a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	db0b      	blt.n	8000b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	f003 021f 	and.w	r2, r3, #31
 8000afc:	4907      	ldr	r1, [pc, #28]	; (8000b1c <__NVIC_EnableIRQ+0x38>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	095b      	lsrs	r3, r3, #5
 8000b04:	2001      	movs	r0, #1
 8000b06:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	db12      	blt.n	8000b58 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	f003 021f 	and.w	r2, r3, #31
 8000b38:	490a      	ldr	r1, [pc, #40]	; (8000b64 <__NVIC_DisableIRQ+0x44>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	095b      	lsrs	r3, r3, #5
 8000b40:	2001      	movs	r0, #1
 8000b42:	fa00 f202 	lsl.w	r2, r0, r2
 8000b46:	3320      	adds	r3, #32
 8000b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b4c:	f3bf 8f4f 	dsb	sy
}
 8000b50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b52:	f3bf 8f6f 	isb	sy
}
 8000b56:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db0a      	blt.n	8000b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	490c      	ldr	r1, [pc, #48]	; (8000bb4 <__NVIC_SetPriority+0x4c>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b90:	e00a      	b.n	8000ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4908      	ldr	r1, [pc, #32]	; (8000bb8 <__NVIC_SetPriority+0x50>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	0112      	lsls	r2, r2, #4
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	761a      	strb	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f1c3 0307 	rsb	r3, r3, #7
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	bf28      	it	cs
 8000bda:	2304      	movcs	r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3304      	adds	r3, #4
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d902      	bls.n	8000bec <NVIC_EncodePriority+0x30>
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3b03      	subs	r3, #3
 8000bea:	e000      	b.n	8000bee <NVIC_EncodePriority+0x32>
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43d9      	mvns	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	4313      	orrs	r3, r2
         );
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c34:	d301      	bcc.n	8000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00f      	b.n	8000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <SysTick_Config+0x40>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c42:	210f      	movs	r1, #15
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f7ff ff8e 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <SysTick_Config+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SysTick_Config+0x40>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff05 	bl	8000a80 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff1a 	bl	8000ac8 <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ff8e 	bl	8000bbc <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff5d 	bl	8000b68 <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff0d 	bl	8000ae4 <__NVIC_EnableIRQ>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff1d 	bl	8000b20 <__NVIC_DisableIRQ>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ff94 	bl	8000c24 <SysTick_Config>
 8000cfc:	4603      	mov	r3, r0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
 8000d22:	e16b      	b.n	8000ffc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d24:	2201      	movs	r2, #1
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	f040 815a 	bne.w	8000ff6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d005      	beq.n	8000d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d130      	bne.n	8000dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	68da      	ldr	r2, [r3, #12]
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d90:	2201      	movs	r2, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	091b      	lsrs	r3, r3, #4
 8000da6:	f003 0201 	and.w	r2, r3, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0303 	and.w	r3, r3, #3
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d017      	beq.n	8000df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d123      	bne.n	8000e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	08da      	lsrs	r2, r3, #3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3208      	adds	r2, #8
 8000e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	f003 0307 	and.w	r3, r3, #7
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	220f      	movs	r2, #15
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	691a      	ldr	r2, [r3, #16]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	08da      	lsrs	r2, r3, #3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3208      	adds	r2, #8
 8000e46:	69b9      	ldr	r1, [r7, #24]
 8000e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0203 	and.w	r2, r3, #3
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f000 80b4 	beq.w	8000ff6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b60      	ldr	r3, [pc, #384]	; (8001014 <HAL_GPIO_Init+0x30c>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a5f      	ldr	r2, [pc, #380]	; (8001014 <HAL_GPIO_Init+0x30c>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b5d      	ldr	r3, [pc, #372]	; (8001014 <HAL_GPIO_Init+0x30c>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eaa:	4a5b      	ldr	r2, [pc, #364]	; (8001018 <HAL_GPIO_Init+0x310>)
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	089b      	lsrs	r3, r3, #2
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	220f      	movs	r2, #15
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a52      	ldr	r2, [pc, #328]	; (800101c <HAL_GPIO_Init+0x314>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d02b      	beq.n	8000f2e <HAL_GPIO_Init+0x226>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a51      	ldr	r2, [pc, #324]	; (8001020 <HAL_GPIO_Init+0x318>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d025      	beq.n	8000f2a <HAL_GPIO_Init+0x222>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a50      	ldr	r2, [pc, #320]	; (8001024 <HAL_GPIO_Init+0x31c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d01f      	beq.n	8000f26 <HAL_GPIO_Init+0x21e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4f      	ldr	r2, [pc, #316]	; (8001028 <HAL_GPIO_Init+0x320>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d019      	beq.n	8000f22 <HAL_GPIO_Init+0x21a>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4e      	ldr	r2, [pc, #312]	; (800102c <HAL_GPIO_Init+0x324>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d013      	beq.n	8000f1e <HAL_GPIO_Init+0x216>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4d      	ldr	r2, [pc, #308]	; (8001030 <HAL_GPIO_Init+0x328>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d00d      	beq.n	8000f1a <HAL_GPIO_Init+0x212>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4c      	ldr	r2, [pc, #304]	; (8001034 <HAL_GPIO_Init+0x32c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d007      	beq.n	8000f16 <HAL_GPIO_Init+0x20e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4b      	ldr	r2, [pc, #300]	; (8001038 <HAL_GPIO_Init+0x330>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d101      	bne.n	8000f12 <HAL_GPIO_Init+0x20a>
 8000f0e:	2307      	movs	r3, #7
 8000f10:	e00e      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f12:	2308      	movs	r3, #8
 8000f14:	e00c      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f16:	2306      	movs	r3, #6
 8000f18:	e00a      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f1a:	2305      	movs	r3, #5
 8000f1c:	e008      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f1e:	2304      	movs	r3, #4
 8000f20:	e006      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f22:	2303      	movs	r3, #3
 8000f24:	e004      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f26:	2302      	movs	r3, #2
 8000f28:	e002      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e000      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f2e:	2300      	movs	r3, #0
 8000f30:	69fa      	ldr	r2, [r7, #28]
 8000f32:	f002 0203 	and.w	r2, r2, #3
 8000f36:	0092      	lsls	r2, r2, #2
 8000f38:	4093      	lsls	r3, r2
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f40:	4935      	ldr	r1, [pc, #212]	; (8001018 <HAL_GPIO_Init+0x310>)
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	089b      	lsrs	r3, r3, #2
 8000f46:	3302      	adds	r3, #2
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4e:	4b3b      	ldr	r3, [pc, #236]	; (800103c <HAL_GPIO_Init+0x334>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f72:	4a32      	ldr	r2, [pc, #200]	; (800103c <HAL_GPIO_Init+0x334>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f78:	4b30      	ldr	r3, [pc, #192]	; (800103c <HAL_GPIO_Init+0x334>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f9c:	4a27      	ldr	r2, [pc, #156]	; (800103c <HAL_GPIO_Init+0x334>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <HAL_GPIO_Init+0x334>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc6:	4a1d      	ldr	r2, [pc, #116]	; (800103c <HAL_GPIO_Init+0x334>)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <HAL_GPIO_Init+0x334>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ff0:	4a12      	ldr	r2, [pc, #72]	; (800103c <HAL_GPIO_Init+0x334>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	2b0f      	cmp	r3, #15
 8001000:	f67f ae90 	bls.w	8000d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3724      	adds	r7, #36	; 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40013800 	.word	0x40013800
 800101c:	40020000 	.word	0x40020000
 8001020:	40020400 	.word	0x40020400
 8001024:	40020800 	.word	0x40020800
 8001028:	40020c00 	.word	0x40020c00
 800102c:	40021000 	.word	0x40021000
 8001030:	40021400 	.word	0x40021400
 8001034:	40021800 	.word	0x40021800
 8001038:	40021c00 	.word	0x40021c00
 800103c:	40013c00 	.word	0x40013c00

08001040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691a      	ldr	r2, [r3, #16]
 8001050:	887b      	ldrh	r3, [r7, #2]
 8001052:	4013      	ands	r3, r2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001058:	2301      	movs	r3, #1
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	e001      	b.n	8001062 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001062:	7bfb      	ldrb	r3, [r7, #15]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800107c:	695a      	ldr	r2, [r3, #20]
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	4013      	ands	r3, r2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d006      	beq.n	8001094 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fb3a 	bl	8000708 <HAL_GPIO_EXTI_Callback>
  }
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40013c00 	.word	0x40013c00

080010a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010a2:	b08f      	sub	sp, #60	; 0x3c
 80010a4:	af0a      	add	r7, sp, #40	; 0x28
 80010a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e10f      	b.n	80012d2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d106      	bne.n	80010d2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f006 f935 	bl	800733c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2203      	movs	r2, #3
 80010d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d102      	bne.n	80010ec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f002 fc88 	bl	8003a06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	687e      	ldr	r6, [r7, #4]
 80010fe:	466d      	mov	r5, sp
 8001100:	f106 0410 	add.w	r4, r6, #16
 8001104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001110:	e885 0003 	stmia.w	r5, {r0, r1}
 8001114:	1d33      	adds	r3, r6, #4
 8001116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001118:	6838      	ldr	r0, [r7, #0]
 800111a:	f002 fb5f 	bl	80037dc <USB_CoreInit>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2202      	movs	r2, #2
 8001128:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e0d0      	b.n	80012d2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f002 fc76 	bl	8003a28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	e04a      	b.n	80011d8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	333d      	adds	r3, #61	; 0x3d
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001156:	7bfa      	ldrb	r2, [r7, #15]
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	4413      	add	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	333c      	adds	r3, #60	; 0x3c
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	b298      	uxth	r0, r3
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	3344      	adds	r3, #68	; 0x44
 800117e:	4602      	mov	r2, r0
 8001180:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001182:	7bfa      	ldrb	r2, [r7, #15]
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	3340      	adds	r3, #64	; 0x40
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	440b      	add	r3, r1
 80011a4:	3348      	adds	r3, #72	; 0x48
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011aa:	7bfa      	ldrb	r2, [r7, #15]
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4613      	mov	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	334c      	adds	r3, #76	; 0x4c
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	440b      	add	r3, r1
 80011cc:	3354      	adds	r3, #84	; 0x54
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	3301      	adds	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d3af      	bcc.n	8001142 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	73fb      	strb	r3, [r7, #15]
 80011e6:	e044      	b.n	8001272 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011fe:	7bfa      	ldrb	r2, [r7, #15]
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4413      	add	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	440b      	add	r3, r1
 8001222:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800122a:	7bfa      	ldrb	r2, [r7, #15]
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	440b      	add	r3, r1
 8001238:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001240:	7bfa      	ldrb	r2, [r7, #15]
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	4613      	mov	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4413      	add	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	440b      	add	r3, r1
 8001264:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	3301      	adds	r3, #1
 8001270:	73fb      	strb	r3, [r7, #15]
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	429a      	cmp	r2, r3
 800127a:	d3b5      	bcc.n	80011e8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	687e      	ldr	r6, [r7, #4]
 8001284:	466d      	mov	r5, sp
 8001286:	f106 0410 	add.w	r4, r6, #16
 800128a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800128c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800128e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001292:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001296:	e885 0003 	stmia.w	r5, {r0, r1}
 800129a:	1d33      	adds	r3, r6, #4
 800129c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800129e:	6838      	ldr	r0, [r7, #0]
 80012a0:	f002 fc0e 	bl	8003ac0 <USB_DevInit>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d005      	beq.n	80012b6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2202      	movs	r2, #2
 80012ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00d      	b.n	80012d2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f003 fd5d 	bl	8004d8a <USB_DevDisconnect>

  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d101      	bne.n	80012f6 <HAL_PCD_Start+0x1c>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e020      	b.n	8001338 <HAL_PCD_Start+0x5e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001302:	2b01      	cmp	r3, #1
 8001304:	d109      	bne.n	800131a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800130a:	2b01      	cmp	r3, #1
 800130c:	d005      	beq.n	800131a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001312:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f002 fb60 	bl	80039e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f003 fd0d 	bl	8004d48 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b08d      	sub	sp, #52	; 0x34
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f003 fdcb 	bl	8004ef2 <USB_GetMode>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	f040 848a 	bne.w	8001c78 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f003 fd2f 	bl	8004dcc <USB_ReadInterrupts>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 8480 	beq.w	8001c76 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	0a1b      	lsrs	r3, r3, #8
 8001380:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f003 fd1c 	bl	8004dcc <USB_ReadInterrupts>
 8001394:	4603      	mov	r3, r0
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b02      	cmp	r3, #2
 800139c:	d107      	bne.n	80013ae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	695a      	ldr	r2, [r3, #20]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f002 0202 	and.w	r2, r2, #2
 80013ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fd0a 	bl	8004dcc <USB_ReadInterrupts>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	2b10      	cmp	r3, #16
 80013c0:	d161      	bne.n	8001486 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0210 	bic.w	r2, r2, #16
 80013d0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	f003 020f 	and.w	r2, r3, #15
 80013de:	4613      	mov	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4413      	add	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	3304      	adds	r3, #4
 80013f0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	0c5b      	lsrs	r3, r3, #17
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d124      	bne.n	8001448 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001404:	4013      	ands	r3, r2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d035      	beq.n	8001476 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	091b      	lsrs	r3, r3, #4
 8001412:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001418:	b29b      	uxth	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	6a38      	ldr	r0, [r7, #32]
 800141e:	f003 fb41 	bl	8004aa4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	691a      	ldr	r2, [r3, #16]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800142e:	441a      	add	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	6a1a      	ldr	r2, [r3, #32]
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	091b      	lsrs	r3, r3, #4
 800143c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001440:	441a      	add	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	621a      	str	r2, [r3, #32]
 8001446:	e016      	b.n	8001476 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	0c5b      	lsrs	r3, r3, #17
 800144c:	f003 030f 	and.w	r3, r3, #15
 8001450:	2b06      	cmp	r3, #6
 8001452:	d110      	bne.n	8001476 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800145a:	2208      	movs	r2, #8
 800145c:	4619      	mov	r1, r3
 800145e:	6a38      	ldr	r0, [r7, #32]
 8001460:	f003 fb20 	bl	8004aa4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	6a1a      	ldr	r2, [r3, #32]
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	091b      	lsrs	r3, r3, #4
 800146c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001470:	441a      	add	r2, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	699a      	ldr	r2, [r3, #24]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 0210 	orr.w	r2, r2, #16
 8001484:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f003 fc9e 	bl	8004dcc <USB_ReadInterrupts>
 8001490:	4603      	mov	r3, r0
 8001492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001496:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800149a:	f040 80a7 	bne.w	80015ec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 fca3 	bl	8004df2 <USB_ReadDevAllOutEpInterrupt>
 80014ac:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014ae:	e099      	b.n	80015e4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 808e 	beq.w	80015d8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 fcc7 	bl	8004e5a <USB_ReadDevOutEPInterrupt>
 80014cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00c      	beq.n	80014f2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	015a      	lsls	r2, r3, #5
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	4413      	add	r3, r2
 80014e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014e4:	461a      	mov	r2, r3
 80014e6:	2301      	movs	r3, #1
 80014e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 fec3 	bl	8002278 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00c      	beq.n	8001516 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	015a      	lsls	r2, r3, #5
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	4413      	add	r3, r2
 8001504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001508:	461a      	mov	r2, r3
 800150a:	2308      	movs	r3, #8
 800150c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800150e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 ff99 	bl	8002448 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	015a      	lsls	r2, r3, #5
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	4413      	add	r3, r2
 8001528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800152c:	461a      	mov	r2, r3
 800152e:	2310      	movs	r3, #16
 8001530:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d030      	beq.n	800159e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001544:	2b80      	cmp	r3, #128	; 0x80
 8001546:	d109      	bne.n	800155c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	69fa      	ldr	r2, [r7, #28]
 8001552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800155c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	3304      	adds	r3, #4
 8001570:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	78db      	ldrb	r3, [r3, #3]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d108      	bne.n	800158c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2200      	movs	r2, #0
 800157e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	b2db      	uxtb	r3, r3
 8001584:	4619      	mov	r1, r3
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f005 ffde 	bl	8007548 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	015a      	lsls	r2, r3, #5
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	4413      	add	r3, r2
 8001594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001598:	461a      	mov	r2, r3
 800159a:	2302      	movs	r3, #2
 800159c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	f003 0320 	and.w	r3, r3, #32
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	015a      	lsls	r2, r3, #5
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	4413      	add	r3, r2
 80015b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015b4:	461a      	mov	r2, r3
 80015b6:	2320      	movs	r3, #32
 80015b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d009      	beq.n	80015d8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	4413      	add	r3, r2
 80015cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015d0:	461a      	mov	r2, r3
 80015d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	3301      	adds	r3, #1
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e0:	085b      	lsrs	r3, r3, #1
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f47f af62 	bne.w	80014b0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 fbeb 	bl	8004dcc <USB_ReadInterrupts>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001600:	f040 80db 	bne.w	80017ba <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f003 fc0c 	bl	8004e26 <USB_ReadDevAllInEpInterrupt>
 800160e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001614:	e0cd      	b.n	80017b2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80c2 	beq.w	80017a6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fc32 	bl	8004e96 <USB_ReadDevInEPInterrupt>
 8001632:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d057      	beq.n	80016ee <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	2201      	movs	r2, #1
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	43db      	mvns	r3, r3
 8001658:	69f9      	ldr	r1, [r7, #28]
 800165a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800165e:	4013      	ands	r3, r2
 8001660:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	015a      	lsls	r2, r3, #5
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	4413      	add	r3, r2
 800166a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800166e:	461a      	mov	r2, r3
 8001670:	2301      	movs	r3, #1
 8001672:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d132      	bne.n	80016e2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001680:	4613      	mov	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4413      	add	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	334c      	adds	r3, #76	; 0x4c
 800168c:	6819      	ldr	r1, [r3, #0]
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4403      	add	r3, r0
 800169c:	3348      	adds	r3, #72	; 0x48
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4419      	add	r1, r3
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a6:	4613      	mov	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4413      	add	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4403      	add	r3, r0
 80016b0:	334c      	adds	r3, #76	; 0x4c
 80016b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d113      	bne.n	80016e2 <HAL_PCD_IRQHandler+0x3a2>
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016be:	4613      	mov	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	3354      	adds	r3, #84	; 0x54
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d108      	bne.n	80016e2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80016da:	461a      	mov	r2, r3
 80016dc:	2101      	movs	r1, #1
 80016de:	f003 fc39 	bl	8004f54 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	4619      	mov	r1, r3
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f005 fea8 	bl	800743e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	015a      	lsls	r2, r3, #5
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	4413      	add	r3, r2
 8001700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001704:	461a      	mov	r2, r3
 8001706:	2308      	movs	r3, #8
 8001708:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	015a      	lsls	r2, r3, #5
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	4413      	add	r3, r2
 800171c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001720:	461a      	mov	r2, r3
 8001722:	2310      	movs	r3, #16
 8001724:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172c:	2b00      	cmp	r3, #0
 800172e:	d008      	beq.n	8001742 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	015a      	lsls	r2, r3, #5
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	4413      	add	r3, r2
 8001738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800173c:	461a      	mov	r2, r3
 800173e:	2340      	movs	r3, #64	; 0x40
 8001740:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d023      	beq.n	8001794 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800174c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800174e:	6a38      	ldr	r0, [r7, #32]
 8001750:	f002 fb1a 	bl	8003d88 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001756:	4613      	mov	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	3338      	adds	r3, #56	; 0x38
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	3304      	adds	r3, #4
 8001766:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	78db      	ldrb	r3, [r3, #3]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d108      	bne.n	8001782 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2200      	movs	r2, #0
 8001774:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	b2db      	uxtb	r3, r3
 800177a:	4619      	mov	r1, r3
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f005 fef5 	bl	800756c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	015a      	lsls	r2, r3, #5
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	4413      	add	r3, r2
 800178a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800178e:	461a      	mov	r2, r3
 8001790:	2302      	movs	r3, #2
 8001792:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800179e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 fcdb 	bl	800215c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	3301      	adds	r3, #1
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ae:	085b      	lsrs	r3, r3, #1
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f47f af2e 	bne.w	8001616 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f003 fb04 	bl	8004dcc <USB_ReadInterrupts>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017ce:	d122      	bne.n	8001816 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d108      	bne.n	8001800 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017f6:	2100      	movs	r1, #0
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 fec3 	bl	8002584 <HAL_PCDEx_LPM_Callback>
 80017fe:	e002      	b.n	8001806 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f005 fe93 	bl	800752c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	695a      	ldr	r2, [r3, #20]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001814:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f003 fad6 	bl	8004dcc <USB_ReadInterrupts>
 8001820:	4603      	mov	r3, r0
 8001822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800182a:	d112      	bne.n	8001852 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b01      	cmp	r3, #1
 800183a:	d102      	bne.n	8001842 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f005 fe4f 	bl	80074e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001850:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fab8 	bl	8004dcc <USB_ReadInterrupts>
 800185c:	4603      	mov	r3, r0
 800185e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001866:	f040 80b7 	bne.w	80019d8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2110      	movs	r1, #16
 8001884:	4618      	mov	r0, r3
 8001886:	f002 fa7f 	bl	8003d88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800188a:	2300      	movs	r3, #0
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800188e:	e046      	b.n	800191e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001892:	015a      	lsls	r2, r3, #5
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	4413      	add	r3, r2
 8001898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800189c:	461a      	mov	r2, r3
 800189e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018a2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a6:	015a      	lsls	r2, r3, #5
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018b4:	0151      	lsls	r1, r2, #5
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	440a      	add	r2, r1
 80018ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c6:	015a      	lsls	r2, r3, #5
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	4413      	add	r3, r2
 80018cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018d0:	461a      	mov	r2, r3
 80018d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018da:	015a      	lsls	r2, r3, #5
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	4413      	add	r3, r2
 80018e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018e8:	0151      	lsls	r1, r2, #5
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	440a      	add	r2, r1
 80018ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fa:	015a      	lsls	r2, r3, #5
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	4413      	add	r3, r2
 8001900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001908:	0151      	lsls	r1, r2, #5
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	440a      	add	r2, r1
 800190e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001912:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001916:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191a:	3301      	adds	r3, #1
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001924:	429a      	cmp	r2, r3
 8001926:	d3b3      	bcc.n	8001890 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001936:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800193a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	2b00      	cmp	r3, #0
 8001942:	d016      	beq.n	8001972 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800194a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001954:	f043 030b 	orr.w	r3, r3, #11
 8001958:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800196a:	f043 030b 	orr.w	r3, r3, #11
 800196e:	6453      	str	r3, [r2, #68]	; 0x44
 8001970:	e015      	b.n	800199e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001980:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001984:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001988:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001998:	f043 030b 	orr.w	r3, r3, #11
 800199c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019b0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6818      	ldr	r0, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019c2:	461a      	mov	r2, r3
 80019c4:	f003 fac6 	bl	8004f54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f003 f9f5 	bl	8004dcc <USB_ReadInterrupts>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ec:	d124      	bne.n	8001a38 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 fa8b 	bl	8004f0e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f002 fa40 	bl	8003e82 <USB_GetDevSpeed>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681c      	ldr	r4, [r3, #0]
 8001a0e:	f001 fa29 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8001a12:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f001 ff3f 	bl	80038a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f005 fd33 	bl	800748e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695a      	ldr	r2, [r3, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f003 f9c5 	bl	8004dcc <USB_ReadInterrupts>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d10a      	bne.n	8001a62 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f005 fd10 	bl	8007472 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f002 0208 	and.w	r2, r2, #8
 8001a60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 f9b0 	bl	8004dcc <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a72:	2b80      	cmp	r3, #128	; 0x80
 8001a74:	d122      	bne.n	8001abc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a82:	2301      	movs	r3, #1
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
 8001a86:	e014      	b.n	8001ab2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4413      	add	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d105      	bne.n	8001aac <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 fb27 	bl	80020fa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	3301      	adds	r3, #1
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d3e5      	bcc.n	8001a88 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f003 f983 	bl	8004dcc <USB_ReadInterrupts>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ad0:	d13b      	bne.n	8001b4a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad6:	e02b      	b.n	8001b30 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	015a      	lsls	r2, r3, #5
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aec:	4613      	mov	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	3340      	adds	r3, #64	; 0x40
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d115      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001afe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	da12      	bge.n	8001b2a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	333f      	adds	r3, #63	; 0x3f
 8001b14:	2201      	movs	r2, #1
 8001b16:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	4619      	mov	r1, r3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 fae8 	bl	80020fa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d3ce      	bcc.n	8001ad8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	695a      	ldr	r2, [r3, #20]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 f93c 	bl	8004dcc <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b5e:	d155      	bne.n	8001c0c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b60:	2301      	movs	r3, #1
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
 8001b64:	e045      	b.n	8001bf2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	015a      	lsls	r2, r3, #5
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d12e      	bne.n	8001bec <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b8e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	da2b      	bge.n	8001bec <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ba0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d121      	bne.n	8001bec <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bac:	4613      	mov	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10a      	bne.n	8001bec <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001be4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be8:	6053      	str	r3, [r2, #4]
            break;
 8001bea:	e007      	b.n	8001bfc <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	3301      	adds	r3, #1
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d3b4      	bcc.n	8001b66 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 f8db 	bl	8004dcc <USB_ReadInterrupts>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c20:	d10a      	bne.n	8001c38 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f005 fcb4 	bl	8007590 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	695a      	ldr	r2, [r3, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f003 f8c5 	bl	8004dcc <USB_ReadInterrupts>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d115      	bne.n	8001c78 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f005 fca4 	bl	80075ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6859      	ldr	r1, [r3, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	e000      	b.n	8001c78 <HAL_PCD_IRQHandler+0x938>
      return;
 8001c76:	bf00      	nop
    }
  }
}
 8001c78:	3734      	adds	r7, #52	; 0x34
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd90      	pop	{r4, r7, pc}

08001c7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_PCD_SetAddress+0x1a>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e013      	b.n	8001cc0 <HAL_PCD_SetAddress+0x42>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	78fa      	ldrb	r2, [r7, #3]
 8001ca4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	78fa      	ldrb	r2, [r7, #3]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f003 f823 	bl	8004cfc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	4608      	mov	r0, r1
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	70fb      	strb	r3, [r7, #3]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	803b      	strh	r3, [r7, #0]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	da0f      	bge.n	8001d0e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	f003 020f 	and.w	r2, r3, #15
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	3338      	adds	r3, #56	; 0x38
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	3304      	adds	r3, #4
 8001d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	705a      	strb	r2, [r3, #1]
 8001d0c:	e00f      	b.n	8001d2e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	f003 020f 	and.w	r2, r3, #15
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	3304      	adds	r3, #4
 8001d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d3a:	883a      	ldrh	r2, [r7, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	78ba      	ldrb	r2, [r7, #2]
 8001d44:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	785b      	ldrb	r3, [r3, #1]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d004      	beq.n	8001d58 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d58:	78bb      	ldrb	r3, [r7, #2]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d102      	bne.n	8001d64 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_PCD_EP_Open+0xaa>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e00e      	b.n	8001d90 <HAL_PCD_EP_Open+0xc8>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68f9      	ldr	r1, [r7, #12]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f002 f8a3 	bl	8003ecc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001d8e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001da4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	da0f      	bge.n	8001dcc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	f003 020f 	and.w	r2, r3, #15
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	3338      	adds	r3, #56	; 0x38
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	705a      	strb	r2, [r3, #1]
 8001dca:	e00f      	b.n	8001dec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	f003 020f 	and.w	r2, r3, #15
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	3304      	adds	r3, #4
 8001de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_PCD_EP_Close+0x6e>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e00e      	b.n	8001e24 <HAL_PCD_EP_Close+0x8c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68f9      	ldr	r1, [r7, #12]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f002 f8e1 	bl	8003fdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
 8001e3e:	f003 020f 	and.w	r2, r3, #15
 8001e42:	4613      	mov	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4413      	add	r3, r2
 8001e52:	3304      	adds	r3, #4
 8001e54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2200      	movs	r2, #0
 8001e66:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e6e:	7afb      	ldrb	r3, [r7, #11]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d102      	bne.n	8001e88 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e88:	7afb      	ldrb	r3, [r7, #11]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d109      	bne.n	8001ea6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	6979      	ldr	r1, [r7, #20]
 8001ea0:	f002 fbc0 	bl	8004624 <USB_EP0StartXfer>
 8001ea4:	e008      	b.n	8001eb8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	6979      	ldr	r1, [r7, #20]
 8001eb4:	f002 f96e 	bl	8004194 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	f003 020f 	and.w	r2, r3, #15
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001ee4:	681b      	ldr	r3, [r3, #0]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b086      	sub	sp, #24
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	460b      	mov	r3, r1
 8001f00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f02:	7afb      	ldrb	r3, [r7, #11]
 8001f04:	f003 020f 	and.w	r2, r3, #15
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	3338      	adds	r3, #56	; 0x38
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4413      	add	r3, r2
 8001f16:	3304      	adds	r3, #4
 8001f18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f32:	7afb      	ldrb	r3, [r7, #11]
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d102      	bne.n	8001f4c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f4c:	7afb      	ldrb	r3, [r7, #11]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	6979      	ldr	r1, [r7, #20]
 8001f64:	f002 fb5e 	bl	8004624 <USB_EP0StartXfer>
 8001f68:	e008      	b.n	8001f7c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	6979      	ldr	r1, [r7, #20]
 8001f78:	f002 f90c 	bl	8004194 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	f003 020f 	and.w	r2, r3, #15
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d901      	bls.n	8001fa4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e050      	b.n	8002046 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da0f      	bge.n	8001fcc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	f003 020f 	and.w	r2, r3, #15
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	3338      	adds	r3, #56	; 0x38
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	705a      	strb	r2, [r3, #1]
 8001fca:	e00d      	b.n	8001fe8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	3304      	adds	r3, #4
 8001fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2201      	movs	r2, #1
 8001fec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_PCD_EP_SetStall+0x82>
 8002004:	2302      	movs	r3, #2
 8002006:	e01e      	b.n	8002046 <HAL_PCD_EP_SetStall+0xc0>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68f9      	ldr	r1, [r7, #12]
 8002016:	4618      	mov	r0, r3
 8002018:	f002 fd9c 	bl	8004b54 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10a      	bne.n	800203c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	b2d9      	uxtb	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002036:	461a      	mov	r2, r3
 8002038:	f002 ff8c 	bl	8004f54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b084      	sub	sp, #16
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	f003 020f 	and.w	r2, r3, #15
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	d901      	bls.n	800206c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e042      	b.n	80020f2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800206c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002070:	2b00      	cmp	r3, #0
 8002072:	da0f      	bge.n	8002094 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	f003 020f 	and.w	r2, r3, #15
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	3338      	adds	r3, #56	; 0x38
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4413      	add	r3, r2
 8002088:	3304      	adds	r3, #4
 800208a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2201      	movs	r2, #1
 8002090:	705a      	strb	r2, [r3, #1]
 8002092:	e00f      	b.n	80020b4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	f003 020f 	and.w	r2, r3, #15
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	3304      	adds	r3, #4
 80020ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_PCD_EP_ClrStall+0x86>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e00e      	b.n	80020f2 <HAL_PCD_EP_ClrStall+0xa4>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68f9      	ldr	r1, [r7, #12]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f002 fda4 	bl	8004c30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002106:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800210a:	2b00      	cmp	r3, #0
 800210c:	da0c      	bge.n	8002128 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	f003 020f 	and.w	r2, r3, #15
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	3338      	adds	r3, #56	; 0x38
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	3304      	adds	r3, #4
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	e00c      	b.n	8002142 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	f003 020f 	and.w	r2, r3, #15
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	3304      	adds	r3, #4
 8002140:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68f9      	ldr	r1, [r7, #12]
 8002148:	4618      	mov	r0, r3
 800214a:	f002 fbc3 	bl	80048d4 <USB_EPStopXfer>
 800214e:	4603      	mov	r3, r0
 8002150:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002152:	7afb      	ldrb	r3, [r7, #11]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af02      	add	r7, sp, #8
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	3338      	adds	r3, #56	; 0x38
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	3304      	adds	r3, #4
 8002182:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a1a      	ldr	r2, [r3, #32]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	429a      	cmp	r2, r3
 800218e:	d901      	bls.n	8002194 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e06c      	b.n	800226e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	699a      	ldr	r2, [r3, #24]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	69fa      	ldr	r2, [r7, #28]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d902      	bls.n	80021b0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	3303      	adds	r3, #3
 80021b4:	089b      	lsrs	r3, r3, #2
 80021b6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021b8:	e02b      	b.n	8002212 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d902      	bls.n	80021d6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3303      	adds	r3, #3
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6919      	ldr	r1, [r3, #16]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	4603      	mov	r3, r0
 80021f4:	6978      	ldr	r0, [r7, #20]
 80021f6:	f002 fc17 	bl	8004a28 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	441a      	add	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a1a      	ldr	r2, [r3, #32]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	441a      	add	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	b29b      	uxth	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	429a      	cmp	r2, r3
 8002226:	d809      	bhi.n	800223c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a1a      	ldr	r2, [r3, #32]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002230:	429a      	cmp	r2, r3
 8002232:	d203      	bcs.n	800223c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1be      	bne.n	80021ba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	699a      	ldr	r2, [r3, #24]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	429a      	cmp	r2, r3
 8002246:	d811      	bhi.n	800226c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	2201      	movs	r2, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800225c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	43db      	mvns	r3, r3
 8002262:	6939      	ldr	r1, [r7, #16]
 8002264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002268:	4013      	ands	r3, r2
 800226a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3720      	adds	r7, #32
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	333c      	adds	r3, #60	; 0x3c
 8002290:	3304      	adds	r3, #4
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	4413      	add	r3, r2
 800229e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d17b      	bne.n	80023a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d015      	beq.n	80022e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	4a61      	ldr	r2, [pc, #388]	; (8002440 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	f240 80b9 	bls.w	8002434 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80b3 	beq.w	8002434 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022da:	461a      	mov	r2, r3
 80022dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022e0:	6093      	str	r3, [r2, #8]
 80022e2:	e0a7      	b.n	8002434 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d009      	beq.n	8002302 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022fa:	461a      	mov	r2, r3
 80022fc:	2320      	movs	r3, #32
 80022fe:	6093      	str	r3, [r2, #8]
 8002300:	e098      	b.n	8002434 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002308:	2b00      	cmp	r3, #0
 800230a:	f040 8093 	bne.w	8002434 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	4a4b      	ldr	r2, [pc, #300]	; (8002440 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d90f      	bls.n	8002336 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	4413      	add	r3, r2
 8002328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232c:	461a      	mov	r2, r3
 800232e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002332:	6093      	str	r3, [r2, #8]
 8002334:	e07e      	b.n	8002434 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	3304      	adds	r3, #4
 800234a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	69da      	ldr	r2, [r3, #28]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	0159      	lsls	r1, r3, #5
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	440b      	add	r3, r1
 8002358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002362:	1ad2      	subs	r2, r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d114      	bne.n	8002398 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002380:	461a      	mov	r2, r3
 8002382:	2101      	movs	r1, #1
 8002384:	f002 fde6 	bl	8004f54 <USB_EP0_OutStart>
 8002388:	e006      	b.n	8002398 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	441a      	add	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	4619      	mov	r1, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f005 f832 	bl	8007408 <HAL_PCD_DataOutStageCallback>
 80023a4:	e046      	b.n	8002434 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	4a26      	ldr	r2, [pc, #152]	; (8002444 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d124      	bne.n	80023f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c4:	461a      	mov	r2, r3
 80023c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ca:	6093      	str	r3, [r2, #8]
 80023cc:	e032      	b.n	8002434 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e4:	461a      	mov	r2, r3
 80023e6:	2320      	movs	r3, #32
 80023e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	4619      	mov	r1, r3
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f005 f809 	bl	8007408 <HAL_PCD_DataOutStageCallback>
 80023f6:	e01d      	b.n	8002434 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d114      	bne.n	8002428 <PCD_EP_OutXfrComplete_int+0x1b0>
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d108      	bne.n	8002428 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002420:	461a      	mov	r2, r3
 8002422:	2100      	movs	r1, #0
 8002424:	f002 fd96 	bl	8004f54 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	4619      	mov	r1, r3
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f004 ffea 	bl	8007408 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3720      	adds	r7, #32
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	4f54300a 	.word	0x4f54300a
 8002444:	4f54310a 	.word	0x4f54310a

08002448 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	333c      	adds	r3, #60	; 0x3c
 8002460:	3304      	adds	r3, #4
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d90e      	bls.n	800249c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002484:	2b00      	cmp	r3, #0
 8002486:	d009      	beq.n	800249c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4413      	add	r3, r2
 8002490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002494:	461a      	mov	r2, r3
 8002496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800249a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f004 ffa1 	bl	80073e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d90c      	bls.n	80024c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d108      	bne.n	80024c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024bc:	461a      	mov	r2, r3
 80024be:	2101      	movs	r1, #1
 80024c0:	f002 fd48 	bl	8004f54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	4f54300a 	.word	0x4f54300a

080024d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	70fb      	strb	r3, [r7, #3]
 80024e0:	4613      	mov	r3, r2
 80024e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d107      	bne.n	8002502 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024f2:	883b      	ldrh	r3, [r7, #0]
 80024f4:	0419      	lsls	r1, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002500:	e028      	b.n	8002554 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	0c1b      	lsrs	r3, r3, #16
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	4413      	add	r3, r2
 800250e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	e00d      	b.n	8002532 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	3340      	adds	r3, #64	; 0x40
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	0c1b      	lsrs	r3, r3, #16
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	4413      	add	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	3301      	adds	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	3b01      	subs	r3, #1
 8002538:	429a      	cmp	r2, r3
 800253a:	d3ec      	bcc.n	8002516 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800253c:	883b      	ldrh	r3, [r7, #0]
 800253e:	0418      	lsls	r0, r3, #16
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	3b01      	subs	r3, #1
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	4302      	orrs	r2, r0
 800254c:	3340      	adds	r3, #64	; 0x40
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e267      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d075      	beq.n	80026a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ba:	4b88      	ldr	r3, [pc, #544]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d00c      	beq.n	80025e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c6:	4b85      	ldr	r3, [pc, #532]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d112      	bne.n	80025f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d2:	4b82      	ldr	r3, [pc, #520]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025de:	d10b      	bne.n	80025f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e0:	4b7e      	ldr	r3, [pc, #504]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d05b      	beq.n	80026a4 <HAL_RCC_OscConfig+0x108>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d157      	bne.n	80026a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e242      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002600:	d106      	bne.n	8002610 <HAL_RCC_OscConfig+0x74>
 8002602:	4b76      	ldr	r3, [pc, #472]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a75      	ldr	r2, [pc, #468]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e01d      	b.n	800264c <HAL_RCC_OscConfig+0xb0>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x98>
 800261a:	4b70      	ldr	r3, [pc, #448]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a6f      	ldr	r2, [pc, #444]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b6d      	ldr	r3, [pc, #436]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a6c      	ldr	r2, [pc, #432]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e00b      	b.n	800264c <HAL_RCC_OscConfig+0xb0>
 8002634:	4b69      	ldr	r3, [pc, #420]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a68      	ldr	r2, [pc, #416]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800263a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b66      	ldr	r3, [pc, #408]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a65      	ldr	r2, [pc, #404]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d013      	beq.n	800267c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7fe f9e4 	bl	8000a20 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265c:	f7fe f9e0 	bl	8000a20 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b64      	cmp	r3, #100	; 0x64
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e207      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	4b5b      	ldr	r3, [pc, #364]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0xc0>
 800267a:	e014      	b.n	80026a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe f9d0 	bl	8000a20 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002684:	f7fe f9cc 	bl	8000a20 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1f3      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002696:	4b51      	ldr	r3, [pc, #324]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0xe8>
 80026a2:	e000      	b.n	80026a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d063      	beq.n	800277a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026b2:	4b4a      	ldr	r3, [pc, #296]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d11c      	bne.n	8002704 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ca:	4b44      	ldr	r3, [pc, #272]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d116      	bne.n	8002704 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	4b41      	ldr	r3, [pc, #260]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_RCC_OscConfig+0x152>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e1c7      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ee:	4b3b      	ldr	r3, [pc, #236]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4937      	ldr	r1, [pc, #220]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002702:	e03a      	b.n	800277a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800270c:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <HAL_RCC_OscConfig+0x244>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7fe f985 	bl	8000a20 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271a:	f7fe f981 	bl	8000a20 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e1a8      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272c:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002738:	4b28      	ldr	r3, [pc, #160]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4925      	ldr	r1, [pc, #148]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]
 800274c:	e015      	b.n	800277a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274e:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <HAL_RCC_OscConfig+0x244>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe f964 	bl	8000a20 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275c:	f7fe f960 	bl	8000a20 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e187      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d036      	beq.n	80027f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d016      	beq.n	80027bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_RCC_OscConfig+0x248>)
 8002790:	2201      	movs	r2, #1
 8002792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7fe f944 	bl	8000a20 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800279c:	f7fe f940 	bl	8000a20 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e167      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80027b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x200>
 80027ba:	e01b      	b.n	80027f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_OscConfig+0x248>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c2:	f7fe f92d 	bl	8000a20 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c8:	e00e      	b.n	80027e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ca:	f7fe f929 	bl	8000a20 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d907      	bls.n	80027e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e150      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
 80027dc:	40023800 	.word	0x40023800
 80027e0:	42470000 	.word	0x42470000
 80027e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e8:	4b88      	ldr	r3, [pc, #544]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80027ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1ea      	bne.n	80027ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 8097 	beq.w	8002930 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002802:	2300      	movs	r3, #0
 8002804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002806:	4b81      	ldr	r3, [pc, #516]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10f      	bne.n	8002832 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	4b7d      	ldr	r3, [pc, #500]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a7c      	ldr	r2, [pc, #496]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800281c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b7a      	ldr	r3, [pc, #488]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282e:	2301      	movs	r3, #1
 8002830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002832:	4b77      	ldr	r3, [pc, #476]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d118      	bne.n	8002870 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283e:	4b74      	ldr	r3, [pc, #464]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a73      	ldr	r2, [pc, #460]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284a:	f7fe f8e9 	bl	8000a20 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002852:	f7fe f8e5 	bl	8000a20 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e10c      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	4b6a      	ldr	r3, [pc, #424]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d106      	bne.n	8002886 <HAL_RCC_OscConfig+0x2ea>
 8002878:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	4a63      	ldr	r2, [pc, #396]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	6713      	str	r3, [r2, #112]	; 0x70
 8002884:	e01c      	b.n	80028c0 <HAL_RCC_OscConfig+0x324>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b05      	cmp	r3, #5
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x30c>
 800288e:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a5e      	ldr	r2, [pc, #376]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
 800289a:	4b5c      	ldr	r3, [pc, #368]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	4a5b      	ldr	r2, [pc, #364]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6713      	str	r3, [r2, #112]	; 0x70
 80028a6:	e00b      	b.n	80028c0 <HAL_RCC_OscConfig+0x324>
 80028a8:	4b58      	ldr	r3, [pc, #352]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a57      	ldr	r2, [pc, #348]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
 80028b4:	4b55      	ldr	r3, [pc, #340]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b8:	4a54      	ldr	r2, [pc, #336]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028ba:	f023 0304 	bic.w	r3, r3, #4
 80028be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d015      	beq.n	80028f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7fe f8aa 	bl	8000a20 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d0:	f7fe f8a6 	bl	8000a20 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e0cb      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e6:	4b49      	ldr	r3, [pc, #292]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0ee      	beq.n	80028d0 <HAL_RCC_OscConfig+0x334>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f4:	f7fe f894 	bl	8000a20 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe f890 	bl	8000a20 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e0b5      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002912:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1ee      	bne.n	80028fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d105      	bne.n	8002930 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002924:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	4a38      	ldr	r2, [pc, #224]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800292a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80a1 	beq.w	8002a7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800293a:	4b34      	ldr	r3, [pc, #208]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b08      	cmp	r3, #8
 8002944:	d05c      	beq.n	8002a00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d141      	bne.n	80029d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294e:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <HAL_RCC_OscConfig+0x478>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe f864 	bl	8000a20 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295c:	f7fe f860 	bl	8000a20 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e087      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	019b      	lsls	r3, r3, #6
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	085b      	lsrs	r3, r3, #1
 8002992:	3b01      	subs	r3, #1
 8002994:	041b      	lsls	r3, r3, #16
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	061b      	lsls	r3, r3, #24
 800299e:	491b      	ldr	r1, [pc, #108]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_RCC_OscConfig+0x478>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe f839 	bl	8000a20 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe f835 	bl	8000a20 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e05c      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x416>
 80029d0:	e054      	b.n	8002a7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_RCC_OscConfig+0x478>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe f822 	bl	8000a20 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe f81e 	bl	8000a20 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e045      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x444>
 80029fe:	e03d      	b.n	8002a7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e038      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40007000 	.word	0x40007000
 8002a14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <HAL_RCC_OscConfig+0x4ec>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d028      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d121      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d11a      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a48:	4013      	ands	r3, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d111      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	3b01      	subs	r3, #1
 8002a62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800

08002a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0cc      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d90c      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b65      	ldr	r3, [pc, #404]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0b8      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d020      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae0:	4b59      	ldr	r3, [pc, #356]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4a58      	ldr	r2, [pc, #352]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af8:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a52      	ldr	r2, [pc, #328]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b50      	ldr	r3, [pc, #320]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	494d      	ldr	r1, [pc, #308]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d044      	beq.n	8002bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d119      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e07f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d003      	beq.n	8002b4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4a:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e06f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5a:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e067      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b6a:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f023 0203 	bic.w	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4934      	ldr	r1, [pc, #208]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b7c:	f7fd ff50 	bl	8000a20 <HAL_GetTick>
 8002b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b84:	f7fd ff4c 	bl	8000a20 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e04f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 020c 	and.w	r2, r3, #12
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d1eb      	bne.n	8002b84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bac:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d20c      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b22      	ldr	r3, [pc, #136]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e032      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4916      	ldr	r1, [pc, #88]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	490e      	ldr	r1, [pc, #56]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c12:	f000 f821 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	490a      	ldr	r1, [pc, #40]	; (8002c4c <HAL_RCC_ClockConfig+0x1c0>)
 8002c24:	5ccb      	ldrb	r3, [r1, r3]
 8002c26:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2a:	4a09      	ldr	r2, [pc, #36]	; (8002c50 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd feb0 	bl	8000998 <HAL_InitTick>

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023c00 	.word	0x40023c00
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	08007a1c 	.word	0x08007a1c
 8002c50:	20000000 	.word	0x20000000
 8002c54:	20000004 	.word	0x20000004

08002c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c5c:	b094      	sub	sp, #80	; 0x50
 8002c5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	647b      	str	r3, [r7, #68]	; 0x44
 8002c64:	2300      	movs	r3, #0
 8002c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c68:	2300      	movs	r3, #0
 8002c6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c70:	4b79      	ldr	r3, [pc, #484]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d00d      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x40>
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	f200 80e1 	bhi.w	8002e44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x34>
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c8a:	e0db      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c8c:	4b73      	ldr	r3, [pc, #460]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c90:	e0db      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c92:	4b73      	ldr	r3, [pc, #460]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c96:	e0d8      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c98:	4b6f      	ldr	r3, [pc, #444]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ca0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ca2:	4b6d      	ldr	r3, [pc, #436]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d063      	beq.n	8002d76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cae:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	099b      	lsrs	r3, r3, #6
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cca:	4622      	mov	r2, r4
 8002ccc:	462b      	mov	r3, r5
 8002cce:	f04f 0000 	mov.w	r0, #0
 8002cd2:	f04f 0100 	mov.w	r1, #0
 8002cd6:	0159      	lsls	r1, r3, #5
 8002cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cdc:	0150      	lsls	r0, r2, #5
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	1a51      	subs	r1, r2, r1
 8002ce6:	6139      	str	r1, [r7, #16]
 8002ce8:	4629      	mov	r1, r5
 8002cea:	eb63 0301 	sbc.w	r3, r3, r1
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cfc:	4659      	mov	r1, fp
 8002cfe:	018b      	lsls	r3, r1, #6
 8002d00:	4651      	mov	r1, sl
 8002d02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d06:	4651      	mov	r1, sl
 8002d08:	018a      	lsls	r2, r1, #6
 8002d0a:	4651      	mov	r1, sl
 8002d0c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d10:	4659      	mov	r1, fp
 8002d12:	eb63 0901 	sbc.w	r9, r3, r1
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d2a:	4690      	mov	r8, r2
 8002d2c:	4699      	mov	r9, r3
 8002d2e:	4623      	mov	r3, r4
 8002d30:	eb18 0303 	adds.w	r3, r8, r3
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	462b      	mov	r3, r5
 8002d38:	eb49 0303 	adc.w	r3, r9, r3
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	024b      	lsls	r3, r1, #9
 8002d4e:	4621      	mov	r1, r4
 8002d50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d54:	4621      	mov	r1, r4
 8002d56:	024a      	lsls	r2, r1, #9
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d5e:	2200      	movs	r2, #0
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d68:	f7fd fa2e 	bl	80001c8 <__aeabi_uldivmod>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4613      	mov	r3, r2
 8002d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d74:	e058      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d76:	4b38      	ldr	r3, [pc, #224]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	099b      	lsrs	r3, r3, #6
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	4611      	mov	r1, r2
 8002d82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d86:	623b      	str	r3, [r7, #32]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d90:	4642      	mov	r2, r8
 8002d92:	464b      	mov	r3, r9
 8002d94:	f04f 0000 	mov.w	r0, #0
 8002d98:	f04f 0100 	mov.w	r1, #0
 8002d9c:	0159      	lsls	r1, r3, #5
 8002d9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da2:	0150      	lsls	r0, r2, #5
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4641      	mov	r1, r8
 8002daa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dae:	4649      	mov	r1, r9
 8002db0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dc8:	ebb2 040a 	subs.w	r4, r2, sl
 8002dcc:	eb63 050b 	sbc.w	r5, r3, fp
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	00eb      	lsls	r3, r5, #3
 8002dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dde:	00e2      	lsls	r2, r4, #3
 8002de0:	4614      	mov	r4, r2
 8002de2:	461d      	mov	r5, r3
 8002de4:	4643      	mov	r3, r8
 8002de6:	18e3      	adds	r3, r4, r3
 8002de8:	603b      	str	r3, [r7, #0]
 8002dea:	464b      	mov	r3, r9
 8002dec:	eb45 0303 	adc.w	r3, r5, r3
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dfe:	4629      	mov	r1, r5
 8002e00:	028b      	lsls	r3, r1, #10
 8002e02:	4621      	mov	r1, r4
 8002e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e08:	4621      	mov	r1, r4
 8002e0a:	028a      	lsls	r2, r1, #10
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e12:	2200      	movs	r2, #0
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	61fa      	str	r2, [r7, #28]
 8002e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e1c:	f7fd f9d4 	bl	80001c8 <__aeabi_uldivmod>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4613      	mov	r3, r2
 8002e26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	3301      	adds	r3, #1
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e42:	e002      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3750      	adds	r7, #80	; 0x50
 8002e50:	46bd      	mov	sp, r7
 8002e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	00f42400 	.word	0x00f42400
 8002e60:	007a1200 	.word	0x007a1200

08002e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000000 	.word	0x20000000

08002e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e041      	b.n	8002f12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fd fcae 	bl	8000804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f000 fac4 	bl	8003448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d001      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e04e      	b.n	8002fd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a23      	ldr	r2, [pc, #140]	; (8002fe0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d022      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x80>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5e:	d01d      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x80>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1f      	ldr	r2, [pc, #124]	; (8002fe4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d018      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x80>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x80>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <HAL_TIM_Base_Start_IT+0xd0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00e      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x80>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d009      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x80>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a19      	ldr	r2, [pc, #100]	; (8002ff4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x80>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d111      	bne.n	8002fc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b06      	cmp	r3, #6
 8002fac:	d010      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fbe:	e007      	b.n	8002fd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40010000 	.word	0x40010000
 8002fe4:	40000400 	.word	0x40000400
 8002fe8:	40000800 	.word	0x40000800
 8002fec:	40000c00 	.word	0x40000c00
 8002ff0:	40010400 	.word	0x40010400
 8002ff4:	40014000 	.word	0x40014000
 8002ff8:	40001800 	.word	0x40001800

08002ffc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6a1a      	ldr	r2, [r3, #32]
 800301a:	f241 1311 	movw	r3, #4369	; 0x1111
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10f      	bne.n	8003044 <HAL_TIM_Base_Stop_IT+0x48>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6a1a      	ldr	r2, [r3, #32]
 800302a:	f240 4344 	movw	r3, #1092	; 0x444
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <HAL_TIM_Base_Stop_IT+0x48>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b02      	cmp	r3, #2
 800306e:	d122      	bne.n	80030b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b02      	cmp	r3, #2
 800307c:	d11b      	bne.n	80030b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f06f 0202 	mvn.w	r2, #2
 8003086:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f9b5 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 80030a2:	e005      	b.n	80030b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f9a7 	bl	80033f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f9b8 	bl	8003420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d122      	bne.n	800310a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d11b      	bne.n	800310a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f06f 0204 	mvn.w	r2, #4
 80030da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f98b 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 80030f6:	e005      	b.n	8003104 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f97d 	bl	80033f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f98e 	bl	8003420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b08      	cmp	r3, #8
 8003116:	d122      	bne.n	800315e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b08      	cmp	r3, #8
 8003124:	d11b      	bne.n	800315e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f06f 0208 	mvn.w	r2, #8
 800312e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2204      	movs	r2, #4
 8003134:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f961 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 800314a:	e005      	b.n	8003158 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f953 	bl	80033f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f964 	bl	8003420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b10      	cmp	r3, #16
 800316a:	d122      	bne.n	80031b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b10      	cmp	r3, #16
 8003178:	d11b      	bne.n	80031b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f06f 0210 	mvn.w	r2, #16
 8003182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2208      	movs	r2, #8
 8003188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f937 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 800319e:	e005      	b.n	80031ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f929 	bl	80033f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f93a 	bl	8003420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d10e      	bne.n	80031de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d107      	bne.n	80031de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f06f 0201 	mvn.w	r2, #1
 80031d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7fd facf 	bl	800077c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e8:	2b80      	cmp	r3, #128	; 0x80
 80031ea:	d10e      	bne.n	800320a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f6:	2b80      	cmp	r3, #128	; 0x80
 80031f8:	d107      	bne.n	800320a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 fadf 	bl	80037c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003214:	2b40      	cmp	r3, #64	; 0x40
 8003216:	d10e      	bne.n	8003236 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003222:	2b40      	cmp	r3, #64	; 0x40
 8003224:	d107      	bne.n	8003236 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800322e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f8ff 	bl	8003434 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b20      	cmp	r3, #32
 8003242:	d10e      	bne.n	8003262 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b20      	cmp	r3, #32
 8003250:	d107      	bne.n	8003262 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f06f 0220 	mvn.w	r2, #32
 800325a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 faa9 	bl	80037b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_TIM_ConfigClockSource+0x1c>
 8003282:	2302      	movs	r3, #2
 8003284:	e0b4      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x186>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2202      	movs	r2, #2
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032be:	d03e      	beq.n	800333e <HAL_TIM_ConfigClockSource+0xd4>
 80032c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c4:	f200 8087 	bhi.w	80033d6 <HAL_TIM_ConfigClockSource+0x16c>
 80032c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032cc:	f000 8086 	beq.w	80033dc <HAL_TIM_ConfigClockSource+0x172>
 80032d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d4:	d87f      	bhi.n	80033d6 <HAL_TIM_ConfigClockSource+0x16c>
 80032d6:	2b70      	cmp	r3, #112	; 0x70
 80032d8:	d01a      	beq.n	8003310 <HAL_TIM_ConfigClockSource+0xa6>
 80032da:	2b70      	cmp	r3, #112	; 0x70
 80032dc:	d87b      	bhi.n	80033d6 <HAL_TIM_ConfigClockSource+0x16c>
 80032de:	2b60      	cmp	r3, #96	; 0x60
 80032e0:	d050      	beq.n	8003384 <HAL_TIM_ConfigClockSource+0x11a>
 80032e2:	2b60      	cmp	r3, #96	; 0x60
 80032e4:	d877      	bhi.n	80033d6 <HAL_TIM_ConfigClockSource+0x16c>
 80032e6:	2b50      	cmp	r3, #80	; 0x50
 80032e8:	d03c      	beq.n	8003364 <HAL_TIM_ConfigClockSource+0xfa>
 80032ea:	2b50      	cmp	r3, #80	; 0x50
 80032ec:	d873      	bhi.n	80033d6 <HAL_TIM_ConfigClockSource+0x16c>
 80032ee:	2b40      	cmp	r3, #64	; 0x40
 80032f0:	d058      	beq.n	80033a4 <HAL_TIM_ConfigClockSource+0x13a>
 80032f2:	2b40      	cmp	r3, #64	; 0x40
 80032f4:	d86f      	bhi.n	80033d6 <HAL_TIM_ConfigClockSource+0x16c>
 80032f6:	2b30      	cmp	r3, #48	; 0x30
 80032f8:	d064      	beq.n	80033c4 <HAL_TIM_ConfigClockSource+0x15a>
 80032fa:	2b30      	cmp	r3, #48	; 0x30
 80032fc:	d86b      	bhi.n	80033d6 <HAL_TIM_ConfigClockSource+0x16c>
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d060      	beq.n	80033c4 <HAL_TIM_ConfigClockSource+0x15a>
 8003302:	2b20      	cmp	r3, #32
 8003304:	d867      	bhi.n	80033d6 <HAL_TIM_ConfigClockSource+0x16c>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d05c      	beq.n	80033c4 <HAL_TIM_ConfigClockSource+0x15a>
 800330a:	2b10      	cmp	r3, #16
 800330c:	d05a      	beq.n	80033c4 <HAL_TIM_ConfigClockSource+0x15a>
 800330e:	e062      	b.n	80033d6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	6899      	ldr	r1, [r3, #8]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f000 f9ac 	bl	800367c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003332:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	609a      	str	r2, [r3, #8]
      break;
 800333c:	e04f      	b.n	80033de <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6899      	ldr	r1, [r3, #8]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f000 f995 	bl	800367c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003360:	609a      	str	r2, [r3, #8]
      break;
 8003362:	e03c      	b.n	80033de <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6818      	ldr	r0, [r3, #0]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	6859      	ldr	r1, [r3, #4]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	461a      	mov	r2, r3
 8003372:	f000 f909 	bl	8003588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2150      	movs	r1, #80	; 0x50
 800337c:	4618      	mov	r0, r3
 800337e:	f000 f962 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 8003382:	e02c      	b.n	80033de <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	6859      	ldr	r1, [r3, #4]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	461a      	mov	r2, r3
 8003392:	f000 f928 	bl	80035e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2160      	movs	r1, #96	; 0x60
 800339c:	4618      	mov	r0, r3
 800339e:	f000 f952 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 80033a2:	e01c      	b.n	80033de <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	461a      	mov	r2, r3
 80033b2:	f000 f8e9 	bl	8003588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2140      	movs	r1, #64	; 0x40
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 f942 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 80033c2:	e00c      	b.n	80033de <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4619      	mov	r1, r3
 80033ce:	4610      	mov	r0, r2
 80033d0:	f000 f939 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 80033d4:	e003      	b.n	80033de <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
      break;
 80033da:	e000      	b.n	80033de <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a40      	ldr	r2, [pc, #256]	; (800355c <TIM_Base_SetConfig+0x114>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d013      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003466:	d00f      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a3d      	ldr	r2, [pc, #244]	; (8003560 <TIM_Base_SetConfig+0x118>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00b      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a3c      	ldr	r2, [pc, #240]	; (8003564 <TIM_Base_SetConfig+0x11c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d007      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a3b      	ldr	r2, [pc, #236]	; (8003568 <TIM_Base_SetConfig+0x120>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a3a      	ldr	r2, [pc, #232]	; (800356c <TIM_Base_SetConfig+0x124>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d108      	bne.n	800349a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a2f      	ldr	r2, [pc, #188]	; (800355c <TIM_Base_SetConfig+0x114>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d02b      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a8:	d027      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a2c      	ldr	r2, [pc, #176]	; (8003560 <TIM_Base_SetConfig+0x118>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d023      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a2b      	ldr	r2, [pc, #172]	; (8003564 <TIM_Base_SetConfig+0x11c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01f      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a2a      	ldr	r2, [pc, #168]	; (8003568 <TIM_Base_SetConfig+0x120>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d01b      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a29      	ldr	r2, [pc, #164]	; (800356c <TIM_Base_SetConfig+0x124>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d017      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a28      	ldr	r2, [pc, #160]	; (8003570 <TIM_Base_SetConfig+0x128>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a27      	ldr	r2, [pc, #156]	; (8003574 <TIM_Base_SetConfig+0x12c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00f      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a26      	ldr	r2, [pc, #152]	; (8003578 <TIM_Base_SetConfig+0x130>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00b      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a25      	ldr	r2, [pc, #148]	; (800357c <TIM_Base_SetConfig+0x134>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d007      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a24      	ldr	r2, [pc, #144]	; (8003580 <TIM_Base_SetConfig+0x138>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d003      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a23      	ldr	r2, [pc, #140]	; (8003584 <TIM_Base_SetConfig+0x13c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d108      	bne.n	800350c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a0a      	ldr	r2, [pc, #40]	; (800355c <TIM_Base_SetConfig+0x114>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d003      	beq.n	8003540 <TIM_Base_SetConfig+0xf8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a0c      	ldr	r2, [pc, #48]	; (800356c <TIM_Base_SetConfig+0x124>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d103      	bne.n	8003548 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	615a      	str	r2, [r3, #20]
}
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40010000 	.word	0x40010000
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800
 8003568:	40000c00 	.word	0x40000c00
 800356c:	40010400 	.word	0x40010400
 8003570:	40014000 	.word	0x40014000
 8003574:	40014400 	.word	0x40014400
 8003578:	40014800 	.word	0x40014800
 800357c:	40001800 	.word	0x40001800
 8003580:	40001c00 	.word	0x40001c00
 8003584:	40002000 	.word	0x40002000

08003588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	f023 0201 	bic.w	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f023 030a 	bic.w	r3, r3, #10
 80035c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	621a      	str	r2, [r3, #32]
}
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b087      	sub	sp, #28
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f023 0210 	bic.w	r2, r3, #16
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003610:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	031b      	lsls	r3, r3, #12
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003622:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	621a      	str	r2, [r3, #32]
}
 800363a:	bf00      	nop
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003646:	b480      	push	{r7}
 8003648:	b085      	sub	sp, #20
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	f043 0307 	orr.w	r3, r3, #7
 8003668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	021a      	lsls	r2, r3, #8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	431a      	orrs	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	609a      	str	r2, [r3, #8]
}
 80036b0:	bf00      	nop
 80036b2:	371c      	adds	r7, #28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e05a      	b.n	800378a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a21      	ldr	r2, [pc, #132]	; (8003798 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d022      	beq.n	800375e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003720:	d01d      	beq.n	800375e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1d      	ldr	r2, [pc, #116]	; (800379c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d018      	beq.n	800375e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1b      	ldr	r2, [pc, #108]	; (80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d013      	beq.n	800375e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a1a      	ldr	r2, [pc, #104]	; (80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00e      	beq.n	800375e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d009      	beq.n	800375e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a17      	ldr	r2, [pc, #92]	; (80037ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d004      	beq.n	800375e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a15      	ldr	r2, [pc, #84]	; (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d10c      	bne.n	8003778 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003764:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	4313      	orrs	r3, r2
 800376e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40010000 	.word	0x40010000
 800379c:	40000400 	.word	0x40000400
 80037a0:	40000800 	.word	0x40000800
 80037a4:	40000c00 	.word	0x40000c00
 80037a8:	40010400 	.word	0x40010400
 80037ac:	40014000 	.word	0x40014000
 80037b0:	40001800 	.word	0x40001800

080037b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037dc:	b084      	sub	sp, #16
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	f107 001c 	add.w	r0, r7, #28
 80037ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d122      	bne.n	800383a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800381c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800381e:	2b01      	cmp	r3, #1
 8003820:	d105      	bne.n	800382e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f001 fbee 	bl	8005010 <USB_CoreReset>
 8003834:	4603      	mov	r3, r0
 8003836:	73fb      	strb	r3, [r7, #15]
 8003838:	e01a      	b.n	8003870 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f001 fbe2 	bl	8005010 <USB_CoreReset>
 800384c:	4603      	mov	r3, r0
 800384e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	639a      	str	r2, [r3, #56]	; 0x38
 8003862:	e005      	b.n	8003870 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	2b01      	cmp	r3, #1
 8003874:	d10b      	bne.n	800388e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f043 0206 	orr.w	r2, r3, #6
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f043 0220 	orr.w	r2, r3, #32
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800388e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800389a:	b004      	add	sp, #16
 800389c:	4770      	bx	lr
	...

080038a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	4613      	mov	r3, r2
 80038ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d165      	bne.n	8003980 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4a41      	ldr	r2, [pc, #260]	; (80039bc <USB_SetTurnaroundTime+0x11c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d906      	bls.n	80038ca <USB_SetTurnaroundTime+0x2a>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4a40      	ldr	r2, [pc, #256]	; (80039c0 <USB_SetTurnaroundTime+0x120>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d202      	bcs.n	80038ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80038c4:	230f      	movs	r3, #15
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	e062      	b.n	8003990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4a3c      	ldr	r2, [pc, #240]	; (80039c0 <USB_SetTurnaroundTime+0x120>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d306      	bcc.n	80038e0 <USB_SetTurnaroundTime+0x40>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	4a3b      	ldr	r2, [pc, #236]	; (80039c4 <USB_SetTurnaroundTime+0x124>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d202      	bcs.n	80038e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80038da:	230e      	movs	r3, #14
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	e057      	b.n	8003990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4a38      	ldr	r2, [pc, #224]	; (80039c4 <USB_SetTurnaroundTime+0x124>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d306      	bcc.n	80038f6 <USB_SetTurnaroundTime+0x56>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4a37      	ldr	r2, [pc, #220]	; (80039c8 <USB_SetTurnaroundTime+0x128>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d202      	bcs.n	80038f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80038f0:	230d      	movs	r3, #13
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	e04c      	b.n	8003990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	4a33      	ldr	r2, [pc, #204]	; (80039c8 <USB_SetTurnaroundTime+0x128>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d306      	bcc.n	800390c <USB_SetTurnaroundTime+0x6c>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	4a32      	ldr	r2, [pc, #200]	; (80039cc <USB_SetTurnaroundTime+0x12c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d802      	bhi.n	800390c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003906:	230c      	movs	r3, #12
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	e041      	b.n	8003990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4a2f      	ldr	r2, [pc, #188]	; (80039cc <USB_SetTurnaroundTime+0x12c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d906      	bls.n	8003922 <USB_SetTurnaroundTime+0x82>
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4a2e      	ldr	r2, [pc, #184]	; (80039d0 <USB_SetTurnaroundTime+0x130>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d802      	bhi.n	8003922 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800391c:	230b      	movs	r3, #11
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	e036      	b.n	8003990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4a2a      	ldr	r2, [pc, #168]	; (80039d0 <USB_SetTurnaroundTime+0x130>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d906      	bls.n	8003938 <USB_SetTurnaroundTime+0x98>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	4a29      	ldr	r2, [pc, #164]	; (80039d4 <USB_SetTurnaroundTime+0x134>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d802      	bhi.n	8003938 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003932:	230a      	movs	r3, #10
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e02b      	b.n	8003990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	4a26      	ldr	r2, [pc, #152]	; (80039d4 <USB_SetTurnaroundTime+0x134>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d906      	bls.n	800394e <USB_SetTurnaroundTime+0xae>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4a25      	ldr	r2, [pc, #148]	; (80039d8 <USB_SetTurnaroundTime+0x138>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d202      	bcs.n	800394e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003948:	2309      	movs	r3, #9
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	e020      	b.n	8003990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	4a21      	ldr	r2, [pc, #132]	; (80039d8 <USB_SetTurnaroundTime+0x138>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d306      	bcc.n	8003964 <USB_SetTurnaroundTime+0xc4>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4a20      	ldr	r2, [pc, #128]	; (80039dc <USB_SetTurnaroundTime+0x13c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d802      	bhi.n	8003964 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800395e:	2308      	movs	r3, #8
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	e015      	b.n	8003990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4a1d      	ldr	r2, [pc, #116]	; (80039dc <USB_SetTurnaroundTime+0x13c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d906      	bls.n	800397a <USB_SetTurnaroundTime+0xda>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4a1c      	ldr	r2, [pc, #112]	; (80039e0 <USB_SetTurnaroundTime+0x140>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d202      	bcs.n	800397a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003974:	2307      	movs	r3, #7
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	e00a      	b.n	8003990 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800397a:	2306      	movs	r3, #6
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	e007      	b.n	8003990 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d102      	bne.n	800398c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003986:	2309      	movs	r3, #9
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	e001      	b.n	8003990 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800398c:	2309      	movs	r3, #9
 800398e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	029b      	lsls	r3, r3, #10
 80039a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80039a8:	431a      	orrs	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	371c      	adds	r7, #28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	00d8acbf 	.word	0x00d8acbf
 80039c0:	00e4e1c0 	.word	0x00e4e1c0
 80039c4:	00f42400 	.word	0x00f42400
 80039c8:	01067380 	.word	0x01067380
 80039cc:	011a499f 	.word	0x011a499f
 80039d0:	01312cff 	.word	0x01312cff
 80039d4:	014ca43f 	.word	0x014ca43f
 80039d8:	016e3600 	.word	0x016e3600
 80039dc:	01a6ab1f 	.word	0x01a6ab1f
 80039e0:	01e84800 	.word	0x01e84800

080039e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f043 0201 	orr.w	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f023 0201 	bic.w	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d115      	bne.n	8003a76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a56:	2001      	movs	r0, #1
 8003a58:	f7fc ffee 	bl	8000a38 <HAL_Delay>
      ms++;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f001 fa45 	bl	8004ef2 <USB_GetMode>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d01e      	beq.n	8003aac <USB_SetCurrentMode+0x84>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b31      	cmp	r3, #49	; 0x31
 8003a72:	d9f0      	bls.n	8003a56 <USB_SetCurrentMode+0x2e>
 8003a74:	e01a      	b.n	8003aac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d115      	bne.n	8003aa8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a88:	2001      	movs	r0, #1
 8003a8a:	f7fc ffd5 	bl	8000a38 <HAL_Delay>
      ms++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3301      	adds	r3, #1
 8003a92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f001 fa2c 	bl	8004ef2 <USB_GetMode>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <USB_SetCurrentMode+0x84>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b31      	cmp	r3, #49	; 0x31
 8003aa4:	d9f0      	bls.n	8003a88 <USB_SetCurrentMode+0x60>
 8003aa6:	e001      	b.n	8003aac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e005      	b.n	8003ab8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b32      	cmp	r3, #50	; 0x32
 8003ab0:	d101      	bne.n	8003ab6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e000      	b.n	8003ab8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b086      	sub	sp, #24
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ada:	2300      	movs	r3, #0
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	e009      	b.n	8003af4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	3340      	adds	r3, #64	; 0x40
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	2200      	movs	r2, #0
 8003aec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	3301      	adds	r3, #1
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	2b0e      	cmp	r3, #14
 8003af8:	d9f2      	bls.n	8003ae0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d11c      	bne.n	8003b3a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b0e:	f043 0302 	orr.w	r3, r3, #2
 8003b12:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	639a      	str	r2, [r3, #56]	; 0x38
 8003b38:	e00b      	b.n	8003b52 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b58:	461a      	mov	r2, r3
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b64:	4619      	mov	r1, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	680b      	ldr	r3, [r1, #0]
 8003b70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d10c      	bne.n	8003b92 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d104      	bne.n	8003b88 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b7e:	2100      	movs	r1, #0
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f965 	bl	8003e50 <USB_SetDevSpeed>
 8003b86:	e008      	b.n	8003b9a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b88:	2101      	movs	r1, #1
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f960 	bl	8003e50 <USB_SetDevSpeed>
 8003b90:	e003      	b.n	8003b9a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b92:	2103      	movs	r1, #3
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f95b 	bl	8003e50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b9a:	2110      	movs	r1, #16
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f8f3 	bl	8003d88 <USB_FlushTxFifo>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f91f 	bl	8003df0 <USB_FlushRxFifo>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bce:	461a      	mov	r2, r3
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003be0:	2300      	movs	r3, #0
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	e043      	b.n	8003c6e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bfc:	d118      	bne.n	8003c30 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c10:	461a      	mov	r2, r3
 8003c12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	e013      	b.n	8003c42 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c26:	461a      	mov	r2, r3
 8003c28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e008      	b.n	8003c42 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	2300      	movs	r3, #0
 8003c40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4e:	461a      	mov	r2, r3
 8003c50:	2300      	movs	r3, #0
 8003c52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c60:	461a      	mov	r2, r3
 8003c62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d3b7      	bcc.n	8003be6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c76:	2300      	movs	r3, #0
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	e043      	b.n	8003d04 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c92:	d118      	bne.n	8003cc6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10a      	bne.n	8003cb0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	e013      	b.n	8003cd8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	e008      	b.n	8003cd8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	3301      	adds	r3, #1
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d3b7      	bcc.n	8003c7c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d105      	bne.n	8003d40 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	f043 0210 	orr.w	r2, r3, #16
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	699a      	ldr	r2, [r3, #24]
 8003d44:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <USB_DevInit+0x2c4>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	f043 0208 	orr.w	r2, r3, #8
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d107      	bne.n	8003d74 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d6c:	f043 0304 	orr.w	r3, r3, #4
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d80:	b004      	add	sp, #16
 8003d82:	4770      	bx	lr
 8003d84:	803c3800 	.word	0x803c3800

08003d88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4a13      	ldr	r2, [pc, #76]	; (8003dec <USB_FlushTxFifo+0x64>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d901      	bls.n	8003da8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e01b      	b.n	8003de0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	daf2      	bge.n	8003d96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	019b      	lsls	r3, r3, #6
 8003db8:	f043 0220 	orr.w	r2, r3, #32
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a08      	ldr	r2, [pc, #32]	; (8003dec <USB_FlushTxFifo+0x64>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d901      	bls.n	8003dd2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e006      	b.n	8003de0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d0f0      	beq.n	8003dc0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	00030d40 	.word	0x00030d40

08003df0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4a11      	ldr	r2, [pc, #68]	; (8003e4c <USB_FlushRxFifo+0x5c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e018      	b.n	8003e40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	daf2      	bge.n	8003dfc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2210      	movs	r2, #16
 8003e1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	3301      	adds	r3, #1
 8003e24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <USB_FlushRxFifo+0x5c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e006      	b.n	8003e40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b10      	cmp	r3, #16
 8003e3c:	d0f0      	beq.n	8003e20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	00030d40 	.word	0x00030d40

08003e50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	68f9      	ldr	r1, [r7, #12]
 8003e6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e70:	4313      	orrs	r3, r2
 8003e72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b087      	sub	sp, #28
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 0306 	and.w	r3, r3, #6
 8003e9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d102      	bne.n	8003ea8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	75fb      	strb	r3, [r7, #23]
 8003ea6:	e00a      	b.n	8003ebe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d002      	beq.n	8003eb4 <USB_GetDevSpeed+0x32>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2b06      	cmp	r3, #6
 8003eb2:	d102      	bne.n	8003eba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	75fb      	strb	r3, [r7, #23]
 8003eb8:	e001      	b.n	8003ebe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003eba:	230f      	movs	r3, #15
 8003ebc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	785b      	ldrb	r3, [r3, #1]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d13a      	bne.n	8003f5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eee:	69da      	ldr	r2, [r3, #28]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	2101      	movs	r1, #1
 8003efa:	fa01 f303 	lsl.w	r3, r1, r3
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	68f9      	ldr	r1, [r7, #12]
 8003f02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d155      	bne.n	8003fcc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	791b      	ldrb	r3, [r3, #4]
 8003f3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	059b      	lsls	r3, r3, #22
 8003f42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f44:	4313      	orrs	r3, r2
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	0151      	lsls	r1, r2, #5
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	440a      	add	r2, r1
 8003f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	e036      	b.n	8003fcc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f64:	69da      	ldr	r2, [r3, #28]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	2101      	movs	r1, #1
 8003f70:	fa01 f303 	lsl.w	r3, r1, r3
 8003f74:	041b      	lsls	r3, r3, #16
 8003f76:	68f9      	ldr	r1, [r7, #12]
 8003f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d11a      	bne.n	8003fcc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	791b      	ldrb	r3, [r3, #4]
 8003fb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003fb2:	430b      	orrs	r3, r1
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	0151      	lsls	r1, r2, #5
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	440a      	add	r2, r1
 8003fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	785b      	ldrb	r3, [r3, #1]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d161      	bne.n	80040bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800400a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800400e:	d11f      	bne.n	8004050 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	0151      	lsls	r1, r2, #5
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	440a      	add	r2, r1
 8004026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800402a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800402e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	440a      	add	r2, r1
 8004046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800404a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800404e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	2101      	movs	r1, #1
 8004062:	fa01 f303 	lsl.w	r3, r1, r3
 8004066:	b29b      	uxth	r3, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	68f9      	ldr	r1, [r7, #12]
 800406c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004070:	4013      	ands	r3, r2
 8004072:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	2101      	movs	r1, #1
 8004086:	fa01 f303 	lsl.w	r3, r1, r3
 800408a:	b29b      	uxth	r3, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	68f9      	ldr	r1, [r7, #12]
 8004090:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004094:	4013      	ands	r3, r2
 8004096:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	0159      	lsls	r1, r3, #5
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	440b      	add	r3, r1
 80040ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b2:	4619      	mov	r1, r3
 80040b4:	4b35      	ldr	r3, [pc, #212]	; (800418c <USB_DeactivateEndpoint+0x1b0>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	600b      	str	r3, [r1, #0]
 80040ba:	e060      	b.n	800417e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040d2:	d11f      	bne.n	8004114 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	0151      	lsls	r1, r2, #5
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	440a      	add	r2, r1
 80040ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	0151      	lsls	r1, r2, #5
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	440a      	add	r2, r1
 800410a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800410e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004112:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	2101      	movs	r1, #1
 8004126:	fa01 f303 	lsl.w	r3, r1, r3
 800412a:	041b      	lsls	r3, r3, #16
 800412c:	43db      	mvns	r3, r3
 800412e:	68f9      	ldr	r1, [r7, #12]
 8004130:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004134:	4013      	ands	r3, r2
 8004136:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413e:	69da      	ldr	r2, [r3, #28]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	2101      	movs	r1, #1
 800414a:	fa01 f303 	lsl.w	r3, r1, r3
 800414e:	041b      	lsls	r3, r3, #16
 8004150:	43db      	mvns	r3, r3
 8004152:	68f9      	ldr	r1, [r7, #12]
 8004154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004158:	4013      	ands	r3, r2
 800415a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	0159      	lsls	r1, r3, #5
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	440b      	add	r3, r1
 8004172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004176:	4619      	mov	r1, r3
 8004178:	4b05      	ldr	r3, [pc, #20]	; (8004190 <USB_DeactivateEndpoint+0x1b4>)
 800417a:	4013      	ands	r3, r2
 800417c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	ec337800 	.word	0xec337800
 8004190:	eff37800 	.word	0xeff37800

08004194 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08a      	sub	sp, #40	; 0x28
 8004198:	af02      	add	r7, sp, #8
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	4613      	mov	r3, r2
 80041a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	785b      	ldrb	r3, [r3, #1]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	f040 815c 	bne.w	800446e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d132      	bne.n	8004224 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	0151      	lsls	r1, r2, #5
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	440a      	add	r2, r1
 80041d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	0151      	lsls	r1, r2, #5
 80041f4:	69fa      	ldr	r2, [r7, #28]
 80041f6:	440a      	add	r2, r1
 80041f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004200:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	0151      	lsls	r1, r2, #5
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	440a      	add	r2, r1
 8004218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800421c:	0cdb      	lsrs	r3, r3, #19
 800421e:	04db      	lsls	r3, r3, #19
 8004220:	6113      	str	r3, [r2, #16]
 8004222:	e074      	b.n	800430e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	0151      	lsls	r1, r2, #5
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	440a      	add	r2, r1
 800423a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800423e:	0cdb      	lsrs	r3, r3, #19
 8004240:	04db      	lsls	r3, r3, #19
 8004242:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	0151      	lsls	r1, r2, #5
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	440a      	add	r2, r1
 800425a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800425e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004262:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004266:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004274:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	6999      	ldr	r1, [r3, #24]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	440b      	add	r3, r1
 8004280:	1e59      	subs	r1, r3, #1
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	fbb1 f3f3 	udiv	r3, r1, r3
 800428a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800428c:	4b9d      	ldr	r3, [pc, #628]	; (8004504 <USB_EPStartXfer+0x370>)
 800428e:	400b      	ands	r3, r1
 8004290:	69b9      	ldr	r1, [r7, #24]
 8004292:	0148      	lsls	r0, r1, #5
 8004294:	69f9      	ldr	r1, [r7, #28]
 8004296:	4401      	add	r1, r0
 8004298:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800429c:	4313      	orrs	r3, r2
 800429e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b6:	69b9      	ldr	r1, [r7, #24]
 80042b8:	0148      	lsls	r0, r1, #5
 80042ba:	69f9      	ldr	r1, [r7, #28]
 80042bc:	4401      	add	r1, r0
 80042be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042c2:	4313      	orrs	r3, r2
 80042c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	791b      	ldrb	r3, [r3, #4]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d11f      	bne.n	800430e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	0151      	lsls	r1, r2, #5
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	440a      	add	r2, r1
 80042e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80042ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	0151      	lsls	r1, r2, #5
 8004300:	69fa      	ldr	r2, [r7, #28]
 8004302:	440a      	add	r2, r1
 8004304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004308:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800430c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d14b      	bne.n	80043ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d009      	beq.n	8004330 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004328:	461a      	mov	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	791b      	ldrb	r3, [r3, #4]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d128      	bne.n	800438a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004344:	2b00      	cmp	r3, #0
 8004346:	d110      	bne.n	800436a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	0151      	lsls	r1, r2, #5
 800435a:	69fa      	ldr	r2, [r7, #28]
 800435c:	440a      	add	r2, r1
 800435e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004362:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	e00f      	b.n	800438a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	0151      	lsls	r1, r2, #5
 800437c:	69fa      	ldr	r2, [r7, #28]
 800437e:	440a      	add	r2, r1
 8004380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004388:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	0151      	lsls	r1, r2, #5
 800439c:	69fa      	ldr	r2, [r7, #28]
 800439e:	440a      	add	r2, r1
 80043a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e133      	b.n	8004614 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	0151      	lsls	r1, r2, #5
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	440a      	add	r2, r1
 80043c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	791b      	ldrb	r3, [r3, #4]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d015      	beq.n	8004400 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 811b 	beq.w	8004614 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	2101      	movs	r1, #1
 80043f0:	fa01 f303 	lsl.w	r3, r1, r3
 80043f4:	69f9      	ldr	r1, [r7, #28]
 80043f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043fa:	4313      	orrs	r3, r2
 80043fc:	634b      	str	r3, [r1, #52]	; 0x34
 80043fe:	e109      	b.n	8004614 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d110      	bne.n	8004432 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	0151      	lsls	r1, r2, #5
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	440a      	add	r2, r1
 8004426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800442a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	e00f      	b.n	8004452 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	0151      	lsls	r1, r2, #5
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	440a      	add	r2, r1
 8004448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800444c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004450:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	6919      	ldr	r1, [r3, #16]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	781a      	ldrb	r2, [r3, #0]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	b298      	uxth	r0, r3
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	4603      	mov	r3, r0
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 fade 	bl	8004a28 <USB_WritePacket>
 800446c:	e0d2      	b.n	8004614 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	0151      	lsls	r1, r2, #5
 8004480:	69fa      	ldr	r2, [r7, #28]
 8004482:	440a      	add	r2, r1
 8004484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004488:	0cdb      	lsrs	r3, r3, #19
 800448a:	04db      	lsls	r3, r3, #19
 800448c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	4413      	add	r3, r2
 8004496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	0151      	lsls	r1, r2, #5
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	440a      	add	r2, r1
 80044a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d126      	bne.n	8004508 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c6:	691a      	ldr	r2, [r3, #16]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d0:	69b9      	ldr	r1, [r7, #24]
 80044d2:	0148      	lsls	r0, r1, #5
 80044d4:	69f9      	ldr	r1, [r7, #28]
 80044d6:	4401      	add	r1, r0
 80044d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044dc:	4313      	orrs	r3, r2
 80044de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	0151      	lsls	r1, r2, #5
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	440a      	add	r2, r1
 80044f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044fe:	6113      	str	r3, [r2, #16]
 8004500:	e03a      	b.n	8004578 <USB_EPStartXfer+0x3e4>
 8004502:	bf00      	nop
 8004504:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	699a      	ldr	r2, [r3, #24]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4413      	add	r3, r2
 8004512:	1e5a      	subs	r2, r3, #1
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	8afa      	ldrh	r2, [r7, #22]
 8004524:	fb03 f202 	mul.w	r2, r3, r2
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	8afb      	ldrh	r3, [r7, #22]
 800453c:	04d9      	lsls	r1, r3, #19
 800453e:	4b38      	ldr	r3, [pc, #224]	; (8004620 <USB_EPStartXfer+0x48c>)
 8004540:	400b      	ands	r3, r1
 8004542:	69b9      	ldr	r1, [r7, #24]
 8004544:	0148      	lsls	r0, r1, #5
 8004546:	69f9      	ldr	r1, [r7, #28]
 8004548:	4401      	add	r1, r0
 800454a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800454e:	4313      	orrs	r3, r2
 8004550:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004568:	69b9      	ldr	r1, [r7, #24]
 800456a:	0148      	lsls	r0, r1, #5
 800456c:	69f9      	ldr	r1, [r7, #28]
 800456e:	4401      	add	r1, r0
 8004570:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004574:	4313      	orrs	r3, r2
 8004576:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004578:	79fb      	ldrb	r3, [r7, #7]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d10d      	bne.n	800459a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	6919      	ldr	r1, [r3, #16]
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004596:	460a      	mov	r2, r1
 8004598:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	791b      	ldrb	r3, [r3, #4]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d128      	bne.n	80045f4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d110      	bne.n	80045d4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	0151      	lsls	r1, r2, #5
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	440a      	add	r2, r1
 80045c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	e00f      	b.n	80045f4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	0151      	lsls	r1, r2, #5
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	440a      	add	r2, r1
 80045ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	0151      	lsls	r1, r2, #5
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	440a      	add	r2, r1
 800460a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800460e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004612:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3720      	adds	r7, #32
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	1ff80000 	.word	0x1ff80000

08004624 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	4613      	mov	r3, r2
 8004630:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	785b      	ldrb	r3, [r3, #1]
 8004640:	2b01      	cmp	r3, #1
 8004642:	f040 80ce 	bne.w	80047e2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d132      	bne.n	80046b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	0151      	lsls	r1, r2, #5
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	440a      	add	r2, r1
 8004664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004668:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800466c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004670:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	0151      	lsls	r1, r2, #5
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	440a      	add	r2, r1
 8004688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800468c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004690:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	0151      	lsls	r1, r2, #5
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	440a      	add	r2, r1
 80046a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ac:	0cdb      	lsrs	r3, r3, #19
 80046ae:	04db      	lsls	r3, r3, #19
 80046b0:	6113      	str	r3, [r2, #16]
 80046b2:	e04e      	b.n	8004752 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	0151      	lsls	r1, r2, #5
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	440a      	add	r2, r1
 80046ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ce:	0cdb      	lsrs	r3, r3, #19
 80046d0:	04db      	lsls	r3, r3, #19
 80046d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	0151      	lsls	r1, r2, #5
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	440a      	add	r2, r1
 80046ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	699a      	ldr	r2, [r3, #24]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	429a      	cmp	r2, r3
 8004702:	d903      	bls.n	800470c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	0151      	lsls	r1, r2, #5
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	440a      	add	r2, r1
 8004722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004726:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800472a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004742:	6939      	ldr	r1, [r7, #16]
 8004744:	0148      	lsls	r0, r1, #5
 8004746:	6979      	ldr	r1, [r7, #20]
 8004748:	4401      	add	r1, r0
 800474a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800474e:	4313      	orrs	r3, r2
 8004750:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d11e      	bne.n	8004796 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d009      	beq.n	8004774 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476c:	461a      	mov	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	0151      	lsls	r1, r2, #5
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	440a      	add	r2, r1
 800478a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800478e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	e097      	b.n	80048c6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	0151      	lsls	r1, r2, #5
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	440a      	add	r2, r1
 80047ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 8083 	beq.w	80048c6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	2101      	movs	r1, #1
 80047d2:	fa01 f303 	lsl.w	r3, r1, r3
 80047d6:	6979      	ldr	r1, [r7, #20]
 80047d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047dc:	4313      	orrs	r3, r2
 80047de:	634b      	str	r3, [r1, #52]	; 0x34
 80047e0:	e071      	b.n	80048c6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047fc:	0cdb      	lsrs	r3, r3, #19
 80047fe:	04db      	lsls	r3, r3, #19
 8004800:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	0151      	lsls	r1, r2, #5
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	440a      	add	r2, r1
 8004818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800481c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004820:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004824:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	0151      	lsls	r1, r2, #5
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	440a      	add	r2, r1
 8004854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004858:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800485c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004874:	6939      	ldr	r1, [r7, #16]
 8004876:	0148      	lsls	r0, r1, #5
 8004878:	6979      	ldr	r1, [r7, #20]
 800487a:	4401      	add	r1, r0
 800487c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004880:	4313      	orrs	r3, r2
 8004882:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d10d      	bne.n	80048a6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	6919      	ldr	r1, [r3, #16]
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a2:	460a      	mov	r2, r1
 80048a4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	0151      	lsls	r1, r2, #5
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	440a      	add	r2, r1
 80048bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	785b      	ldrb	r3, [r3, #1]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d14a      	bne.n	8004988 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800490a:	f040 8086 	bne.w	8004a1a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	7812      	ldrb	r2, [r2, #0]
 8004922:	0151      	lsls	r1, r2, #5
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	440a      	add	r2, r1
 8004928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800492c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004930:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	7812      	ldrb	r2, [r2, #0]
 8004946:	0151      	lsls	r1, r2, #5
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	440a      	add	r2, r1
 800494c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004950:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004954:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3301      	adds	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004962:	4293      	cmp	r3, r2
 8004964:	d902      	bls.n	800496c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	75fb      	strb	r3, [r7, #23]
          break;
 800496a:	e056      	b.n	8004a1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004980:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004984:	d0e7      	beq.n	8004956 <USB_EPStopXfer+0x82>
 8004986:	e048      	b.n	8004a1a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800499c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049a0:	d13b      	bne.n	8004a1a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	7812      	ldrb	r2, [r2, #0]
 80049b6:	0151      	lsls	r1, r2, #5
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	440a      	add	r2, r1
 80049bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	7812      	ldrb	r2, [r2, #0]
 80049da:	0151      	lsls	r1, r2, #5
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	440a      	add	r2, r1
 80049e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3301      	adds	r3, #1
 80049ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d902      	bls.n	8004a00 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	75fb      	strb	r3, [r7, #23]
          break;
 80049fe:	e00c      	b.n	8004a1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a18:	d0e7      	beq.n	80049ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b089      	sub	sp, #36	; 0x24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	4611      	mov	r1, r2
 8004a34:	461a      	mov	r2, r3
 8004a36:	460b      	mov	r3, r1
 8004a38:	71fb      	strb	r3, [r7, #7]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004a46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d123      	bne.n	8004a96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004a4e:	88bb      	ldrh	r3, [r7, #4]
 8004a50:	3303      	adds	r3, #3
 8004a52:	089b      	lsrs	r3, r3, #2
 8004a54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004a56:	2300      	movs	r3, #0
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	e018      	b.n	8004a8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	031a      	lsls	r2, r3, #12
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a68:	461a      	mov	r2, r3
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	3301      	adds	r3, #1
 8004a74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3301      	adds	r3, #1
 8004a86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	61bb      	str	r3, [r7, #24]
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d3e2      	bcc.n	8004a5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3724      	adds	r7, #36	; 0x24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b08b      	sub	sp, #44	; 0x2c
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	089b      	lsrs	r3, r3, #2
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	f003 0303 	and.w	r3, r3, #3
 8004ac8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	623b      	str	r3, [r7, #32]
 8004ace:	e014      	b.n	8004afa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	601a      	str	r2, [r3, #0]
    pDest++;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	3301      	adds	r3, #1
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	3301      	adds	r3, #1
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	3301      	adds	r3, #1
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	3301      	adds	r3, #1
 8004af8:	623b      	str	r3, [r7, #32]
 8004afa:	6a3a      	ldr	r2, [r7, #32]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d3e6      	bcc.n	8004ad0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004b02:	8bfb      	ldrh	r3, [r7, #30]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01e      	beq.n	8004b46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b12:	461a      	mov	r2, r3
 8004b14:	f107 0310 	add.w	r3, r7, #16
 8004b18:	6812      	ldr	r2, [r2, #0]
 8004b1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	701a      	strb	r2, [r3, #0]
      i++;
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	3301      	adds	r3, #1
 8004b32:	623b      	str	r3, [r7, #32]
      pDest++;
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	3301      	adds	r3, #1
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004b3a:	8bfb      	ldrh	r3, [r7, #30]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004b40:	8bfb      	ldrh	r3, [r7, #30]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1ea      	bne.n	8004b1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	372c      	adds	r7, #44	; 0x2c
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	785b      	ldrb	r3, [r3, #1]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d12c      	bne.n	8004bca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	db12      	blt.n	8004ba8 <USB_EPSetStall+0x54>
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00f      	beq.n	8004ba8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	0151      	lsls	r1, r2, #5
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	440a      	add	r2, r1
 8004b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ba6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	0151      	lsls	r1, r2, #5
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	440a      	add	r2, r1
 8004bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	e02b      	b.n	8004c22 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	db12      	blt.n	8004c02 <USB_EPSetStall+0xae>
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00f      	beq.n	8004c02 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	0151      	lsls	r1, r2, #5
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	440a      	add	r2, r1
 8004bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c00:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	0151      	lsls	r1, r2, #5
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	440a      	add	r2, r1
 8004c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	785b      	ldrb	r3, [r3, #1]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d128      	bne.n	8004c9e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	0151      	lsls	r1, r2, #5
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	440a      	add	r2, r1
 8004c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	791b      	ldrb	r3, [r3, #4]
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d003      	beq.n	8004c7c <USB_EPClearStall+0x4c>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	791b      	ldrb	r3, [r3, #4]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d138      	bne.n	8004cee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	0151      	lsls	r1, r2, #5
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	440a      	add	r2, r1
 8004c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	e027      	b.n	8004cee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	0151      	lsls	r1, r2, #5
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	440a      	add	r2, r1
 8004cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cbc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	791b      	ldrb	r3, [r3, #4]
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d003      	beq.n	8004cce <USB_EPClearStall+0x9e>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	791b      	ldrb	r3, [r3, #4]
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d10f      	bne.n	8004cee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	0151      	lsls	r1, r2, #5
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	440a      	add	r2, r1
 8004ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d1e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004d30:	68f9      	ldr	r1, [r7, #12]
 8004d32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d36:	4313      	orrs	r3, r2
 8004d38:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d62:	f023 0303 	bic.w	r3, r3, #3
 8004d66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d76:	f023 0302 	bic.w	r3, r3, #2
 8004d7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b085      	sub	sp, #20
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004da4:	f023 0303 	bic.w	r3, r3, #3
 8004da8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004db8:	f043 0302 	orr.w	r3, r3, #2
 8004dbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4013      	ands	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004de4:	68fb      	ldr	r3, [r7, #12]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b085      	sub	sp, #20
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	4013      	ands	r3, r2
 8004e14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	0c1b      	lsrs	r3, r3, #16
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b085      	sub	sp, #20
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	4013      	ands	r3, r2
 8004e48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	b29b      	uxth	r3, r3
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	460b      	mov	r3, r1
 8004e64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	4013      	ands	r3, r2
 8004e86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e88:	68bb      	ldr	r3, [r7, #8]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b087      	sub	sp, #28
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004eba:	78fb      	ldrb	r3, [r7, #3]
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec6:	01db      	lsls	r3, r3, #7
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004ed0:	78fb      	ldrb	r3, [r7, #3]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f003 0301 	and.w	r3, r3, #1
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b085      	sub	sp, #20
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f28:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f2c:	f023 0307 	bic.w	r3, r3, #7
 8004f30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	333c      	adds	r3, #60	; 0x3c
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4a26      	ldr	r2, [pc, #152]	; (800500c <USB_EP0_OutStart+0xb8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d90a      	bls.n	8004f8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f88:	d101      	bne.n	8004f8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	e037      	b.n	8004ffe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f94:	461a      	mov	r2, r3
 8004f96:	2300      	movs	r3, #0
 8004f98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fbc:	f043 0318 	orr.w	r3, r3, #24
 8004fc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004fd4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004fd6:	7afb      	ldrb	r3, [r7, #11]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d10f      	bne.n	8004ffc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ff6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004ffa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	4f54300a 	.word	0x4f54300a

08005010 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	3301      	adds	r3, #1
 8005020:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a13      	ldr	r2, [pc, #76]	; (8005074 <USB_CoreReset+0x64>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e01b      	b.n	8005066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	daf2      	bge.n	800501c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f043 0201 	orr.w	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3301      	adds	r3, #1
 800504a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4a09      	ldr	r2, [pc, #36]	; (8005074 <USB_CoreReset+0x64>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d901      	bls.n	8005058 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e006      	b.n	8005066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b01      	cmp	r3, #1
 8005062:	d0f0      	beq.n	8005046 <USB_CoreReset+0x36>

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	00030d40 	.word	0x00030d40

08005078 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005084:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005088:	f002 fc28 	bl	80078dc <USBD_static_malloc>
 800508c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d109      	bne.n	80050a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	32b0      	adds	r2, #176	; 0xb0
 800509e:	2100      	movs	r1, #0
 80050a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80050a4:	2302      	movs	r3, #2
 80050a6:	e0d4      	b.n	8005252 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80050a8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80050ac:	2100      	movs	r1, #0
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f002 fc7c 	bl	80079ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	32b0      	adds	r2, #176	; 0xb0
 80050be:	68f9      	ldr	r1, [r7, #12]
 80050c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	32b0      	adds	r2, #176	; 0xb0
 80050ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	7c1b      	ldrb	r3, [r3, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d138      	bne.n	8005152 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80050e0:	4b5e      	ldr	r3, [pc, #376]	; (800525c <USBD_CDC_Init+0x1e4>)
 80050e2:	7819      	ldrb	r1, [r3, #0]
 80050e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050e8:	2202      	movs	r2, #2
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f002 fad3 	bl	8007696 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80050f0:	4b5a      	ldr	r3, [pc, #360]	; (800525c <USBD_CDC_Init+0x1e4>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	f003 020f 	and.w	r2, r3, #15
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	440b      	add	r3, r1
 8005104:	3324      	adds	r3, #36	; 0x24
 8005106:	2201      	movs	r2, #1
 8005108:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800510a:	4b55      	ldr	r3, [pc, #340]	; (8005260 <USBD_CDC_Init+0x1e8>)
 800510c:	7819      	ldrb	r1, [r3, #0]
 800510e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005112:	2202      	movs	r2, #2
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f002 fabe 	bl	8007696 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800511a:	4b51      	ldr	r3, [pc, #324]	; (8005260 <USBD_CDC_Init+0x1e8>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	f003 020f 	and.w	r2, r3, #15
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	440b      	add	r3, r1
 800512e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005132:	2201      	movs	r2, #1
 8005134:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005136:	4b4b      	ldr	r3, [pc, #300]	; (8005264 <USBD_CDC_Init+0x1ec>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	f003 020f 	and.w	r2, r3, #15
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	4613      	mov	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	440b      	add	r3, r1
 800514a:	3326      	adds	r3, #38	; 0x26
 800514c:	2210      	movs	r2, #16
 800514e:	801a      	strh	r2, [r3, #0]
 8005150:	e035      	b.n	80051be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005152:	4b42      	ldr	r3, [pc, #264]	; (800525c <USBD_CDC_Init+0x1e4>)
 8005154:	7819      	ldrb	r1, [r3, #0]
 8005156:	2340      	movs	r3, #64	; 0x40
 8005158:	2202      	movs	r2, #2
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f002 fa9b 	bl	8007696 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005160:	4b3e      	ldr	r3, [pc, #248]	; (800525c <USBD_CDC_Init+0x1e4>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	f003 020f 	and.w	r2, r3, #15
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	3324      	adds	r3, #36	; 0x24
 8005176:	2201      	movs	r2, #1
 8005178:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800517a:	4b39      	ldr	r3, [pc, #228]	; (8005260 <USBD_CDC_Init+0x1e8>)
 800517c:	7819      	ldrb	r1, [r3, #0]
 800517e:	2340      	movs	r3, #64	; 0x40
 8005180:	2202      	movs	r2, #2
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f002 fa87 	bl	8007696 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005188:	4b35      	ldr	r3, [pc, #212]	; (8005260 <USBD_CDC_Init+0x1e8>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	f003 020f 	and.w	r2, r3, #15
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051a0:	2201      	movs	r2, #1
 80051a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80051a4:	4b2f      	ldr	r3, [pc, #188]	; (8005264 <USBD_CDC_Init+0x1ec>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	f003 020f 	and.w	r2, r3, #15
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	3326      	adds	r3, #38	; 0x26
 80051ba:	2210      	movs	r2, #16
 80051bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80051be:	4b29      	ldr	r3, [pc, #164]	; (8005264 <USBD_CDC_Init+0x1ec>)
 80051c0:	7819      	ldrb	r1, [r3, #0]
 80051c2:	2308      	movs	r3, #8
 80051c4:	2203      	movs	r2, #3
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f002 fa65 	bl	8007696 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80051cc:	4b25      	ldr	r3, [pc, #148]	; (8005264 <USBD_CDC_Init+0x1ec>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	f003 020f 	and.w	r2, r3, #15
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	3324      	adds	r3, #36	; 0x24
 80051e2:	2201      	movs	r2, #1
 80051e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	33b0      	adds	r3, #176	; 0xb0
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800521c:	2302      	movs	r3, #2
 800521e:	e018      	b.n	8005252 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	7c1b      	ldrb	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005228:	4b0d      	ldr	r3, [pc, #52]	; (8005260 <USBD_CDC_Init+0x1e8>)
 800522a:	7819      	ldrb	r1, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f002 fb1c 	bl	8007874 <USBD_LL_PrepareReceive>
 800523c:	e008      	b.n	8005250 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800523e:	4b08      	ldr	r3, [pc, #32]	; (8005260 <USBD_CDC_Init+0x1e8>)
 8005240:	7819      	ldrb	r1, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005248:	2340      	movs	r3, #64	; 0x40
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f002 fb12 	bl	8007874 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20000093 	.word	0x20000093
 8005260:	20000094 	.word	0x20000094
 8005264:	20000095 	.word	0x20000095

08005268 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	460b      	mov	r3, r1
 8005272:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005274:	4b3a      	ldr	r3, [pc, #232]	; (8005360 <USBD_CDC_DeInit+0xf8>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	4619      	mov	r1, r3
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f002 fa31 	bl	80076e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005280:	4b37      	ldr	r3, [pc, #220]	; (8005360 <USBD_CDC_DeInit+0xf8>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	f003 020f 	and.w	r2, r3, #15
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	3324      	adds	r3, #36	; 0x24
 8005296:	2200      	movs	r2, #0
 8005298:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800529a:	4b32      	ldr	r3, [pc, #200]	; (8005364 <USBD_CDC_DeInit+0xfc>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	4619      	mov	r1, r3
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f002 fa1e 	bl	80076e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80052a6:	4b2f      	ldr	r3, [pc, #188]	; (8005364 <USBD_CDC_DeInit+0xfc>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	f003 020f 	and.w	r2, r3, #15
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	440b      	add	r3, r1
 80052ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80052be:	2200      	movs	r2, #0
 80052c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80052c2:	4b29      	ldr	r3, [pc, #164]	; (8005368 <USBD_CDC_DeInit+0x100>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	4619      	mov	r1, r3
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f002 fa0a 	bl	80076e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80052ce:	4b26      	ldr	r3, [pc, #152]	; (8005368 <USBD_CDC_DeInit+0x100>)
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	f003 020f 	and.w	r2, r3, #15
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	3324      	adds	r3, #36	; 0x24
 80052e4:	2200      	movs	r2, #0
 80052e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80052e8:	4b1f      	ldr	r3, [pc, #124]	; (8005368 <USBD_CDC_DeInit+0x100>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	f003 020f 	and.w	r2, r3, #15
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	4613      	mov	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	440b      	add	r3, r1
 80052fc:	3326      	adds	r3, #38	; 0x26
 80052fe:	2200      	movs	r2, #0
 8005300:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	32b0      	adds	r2, #176	; 0xb0
 800530c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01f      	beq.n	8005354 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	33b0      	adds	r3, #176	; 0xb0
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	32b0      	adds	r2, #176	; 0xb0
 8005332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005336:	4618      	mov	r0, r3
 8005338:	f002 fade 	bl	80078f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	32b0      	adds	r2, #176	; 0xb0
 8005346:	2100      	movs	r1, #0
 8005348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000093 	.word	0x20000093
 8005364:	20000094 	.word	0x20000094
 8005368:	20000095 	.word	0x20000095

0800536c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	32b0      	adds	r2, #176	; 0xb0
 8005380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005384:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005398:	2303      	movs	r3, #3
 800539a:	e0bf      	b.n	800551c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d050      	beq.n	800544a <USBD_CDC_Setup+0xde>
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	f040 80af 	bne.w	800550c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	88db      	ldrh	r3, [r3, #6]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d03a      	beq.n	800542c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	b25b      	sxtb	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	da1b      	bge.n	80053f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	33b0      	adds	r3, #176	; 0xb0
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80053d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	88d2      	ldrh	r2, [r2, #6]
 80053dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	88db      	ldrh	r3, [r3, #6]
 80053e2:	2b07      	cmp	r3, #7
 80053e4:	bf28      	it	cs
 80053e6:	2307      	movcs	r3, #7
 80053e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	89fa      	ldrh	r2, [r7, #14]
 80053ee:	4619      	mov	r1, r3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f001 fd43 	bl	8006e7c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80053f6:	e090      	b.n	800551a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	785a      	ldrb	r2, [r3, #1]
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	88db      	ldrh	r3, [r3, #6]
 8005406:	2b3f      	cmp	r3, #63	; 0x3f
 8005408:	d803      	bhi.n	8005412 <USBD_CDC_Setup+0xa6>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	88db      	ldrh	r3, [r3, #6]
 800540e:	b2da      	uxtb	r2, r3
 8005410:	e000      	b.n	8005414 <USBD_CDC_Setup+0xa8>
 8005412:	2240      	movs	r2, #64	; 0x40
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800541a:	6939      	ldr	r1, [r7, #16]
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005422:	461a      	mov	r2, r3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f001 fd55 	bl	8006ed4 <USBD_CtlPrepareRx>
      break;
 800542a:	e076      	b.n	800551a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	33b0      	adds	r3, #176	; 0xb0
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	7850      	ldrb	r0, [r2, #1]
 8005442:	2200      	movs	r2, #0
 8005444:	6839      	ldr	r1, [r7, #0]
 8005446:	4798      	blx	r3
      break;
 8005448:	e067      	b.n	800551a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	785b      	ldrb	r3, [r3, #1]
 800544e:	2b0b      	cmp	r3, #11
 8005450:	d851      	bhi.n	80054f6 <USBD_CDC_Setup+0x18a>
 8005452:	a201      	add	r2, pc, #4	; (adr r2, 8005458 <USBD_CDC_Setup+0xec>)
 8005454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005458:	08005489 	.word	0x08005489
 800545c:	08005505 	.word	0x08005505
 8005460:	080054f7 	.word	0x080054f7
 8005464:	080054f7 	.word	0x080054f7
 8005468:	080054f7 	.word	0x080054f7
 800546c:	080054f7 	.word	0x080054f7
 8005470:	080054f7 	.word	0x080054f7
 8005474:	080054f7 	.word	0x080054f7
 8005478:	080054f7 	.word	0x080054f7
 800547c:	080054f7 	.word	0x080054f7
 8005480:	080054b3 	.word	0x080054b3
 8005484:	080054dd 	.word	0x080054dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b03      	cmp	r3, #3
 8005492:	d107      	bne.n	80054a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005494:	f107 030a 	add.w	r3, r7, #10
 8005498:	2202      	movs	r2, #2
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f001 fced 	bl	8006e7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054a2:	e032      	b.n	800550a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80054a4:	6839      	ldr	r1, [r7, #0]
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f001 fc77 	bl	8006d9a <USBD_CtlError>
            ret = USBD_FAIL;
 80054ac:	2303      	movs	r3, #3
 80054ae:	75fb      	strb	r3, [r7, #23]
          break;
 80054b0:	e02b      	b.n	800550a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d107      	bne.n	80054ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80054be:	f107 030d 	add.w	r3, r7, #13
 80054c2:	2201      	movs	r2, #1
 80054c4:	4619      	mov	r1, r3
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f001 fcd8 	bl	8006e7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054cc:	e01d      	b.n	800550a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80054ce:	6839      	ldr	r1, [r7, #0]
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f001 fc62 	bl	8006d9a <USBD_CtlError>
            ret = USBD_FAIL;
 80054d6:	2303      	movs	r3, #3
 80054d8:	75fb      	strb	r3, [r7, #23]
          break;
 80054da:	e016      	b.n	800550a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d00f      	beq.n	8005508 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80054e8:	6839      	ldr	r1, [r7, #0]
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f001 fc55 	bl	8006d9a <USBD_CtlError>
            ret = USBD_FAIL;
 80054f0:	2303      	movs	r3, #3
 80054f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80054f4:	e008      	b.n	8005508 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80054f6:	6839      	ldr	r1, [r7, #0]
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f001 fc4e 	bl	8006d9a <USBD_CtlError>
          ret = USBD_FAIL;
 80054fe:	2303      	movs	r3, #3
 8005500:	75fb      	strb	r3, [r7, #23]
          break;
 8005502:	e002      	b.n	800550a <USBD_CDC_Setup+0x19e>
          break;
 8005504:	bf00      	nop
 8005506:	e008      	b.n	800551a <USBD_CDC_Setup+0x1ae>
          break;
 8005508:	bf00      	nop
      }
      break;
 800550a:	e006      	b.n	800551a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800550c:	6839      	ldr	r1, [r7, #0]
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f001 fc43 	bl	8006d9a <USBD_CtlError>
      ret = USBD_FAIL;
 8005514:	2303      	movs	r3, #3
 8005516:	75fb      	strb	r3, [r7, #23]
      break;
 8005518:	bf00      	nop
  }

  return (uint8_t)ret;
 800551a:	7dfb      	ldrb	r3, [r7, #23]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005536:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	32b0      	adds	r2, #176	; 0xb0
 8005542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800554a:	2303      	movs	r3, #3
 800554c:	e065      	b.n	800561a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	32b0      	adds	r2, #176	; 0xb0
 8005558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	f003 020f 	and.w	r2, r3, #15
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	4613      	mov	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	3318      	adds	r3, #24
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d02f      	beq.n	80055d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005578:	78fb      	ldrb	r3, [r7, #3]
 800557a:	f003 020f 	and.w	r2, r3, #15
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	3318      	adds	r3, #24
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	78fb      	ldrb	r3, [r7, #3]
 8005590:	f003 010f 	and.w	r1, r3, #15
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	460b      	mov	r3, r1
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	440b      	add	r3, r1
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4403      	add	r3, r0
 80055a0:	3348      	adds	r3, #72	; 0x48
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80055a8:	fb01 f303 	mul.w	r3, r1, r3
 80055ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d112      	bne.n	80055d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	f003 020f 	and.w	r2, r3, #15
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	3318      	adds	r3, #24
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80055ca:	78f9      	ldrb	r1, [r7, #3]
 80055cc:	2300      	movs	r3, #0
 80055ce:	2200      	movs	r2, #0
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f002 f92e 	bl	8007832 <USBD_LL_Transmit>
 80055d6:	e01f      	b.n	8005618 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2200      	movs	r2, #0
 80055dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	33b0      	adds	r3, #176	; 0xb0
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d010      	beq.n	8005618 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	33b0      	adds	r3, #176	; 0xb0
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005614:	78fa      	ldrb	r2, [r7, #3]
 8005616:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	460b      	mov	r3, r1
 800562c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	32b0      	adds	r2, #176	; 0xb0
 8005638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800563c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	32b0      	adds	r2, #176	; 0xb0
 8005648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005650:	2303      	movs	r3, #3
 8005652:	e01a      	b.n	800568a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005654:	78fb      	ldrb	r3, [r7, #3]
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f002 f92c 	bl	80078b6 <USBD_LL_GetRxDataSize>
 800565e:	4602      	mov	r2, r0
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	33b0      	adds	r3, #176	; 0xb0
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005684:	4611      	mov	r1, r2
 8005686:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	32b0      	adds	r2, #176	; 0xb0
 80056a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e025      	b.n	8005700 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	33b0      	adds	r3, #176	; 0xb0
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d01a      	beq.n	80056fe <USBD_CDC_EP0_RxReady+0x6c>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80056ce:	2bff      	cmp	r3, #255	; 0xff
 80056d0:	d015      	beq.n	80056fe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	33b0      	adds	r3, #176	; 0xb0
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80056ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80056f2:	b292      	uxth	r2, r2
 80056f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	22ff      	movs	r2, #255	; 0xff
 80056fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005710:	2182      	movs	r1, #130	; 0x82
 8005712:	4818      	ldr	r0, [pc, #96]	; (8005774 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005714:	f000 fd09 	bl	800612a <USBD_GetEpDesc>
 8005718:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800571a:	2101      	movs	r1, #1
 800571c:	4815      	ldr	r0, [pc, #84]	; (8005774 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800571e:	f000 fd04 	bl	800612a <USBD_GetEpDesc>
 8005722:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005724:	2181      	movs	r1, #129	; 0x81
 8005726:	4813      	ldr	r0, [pc, #76]	; (8005774 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005728:	f000 fcff 	bl	800612a <USBD_GetEpDesc>
 800572c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2210      	movs	r2, #16
 8005738:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d006      	beq.n	800574e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	2200      	movs	r2, #0
 8005744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005748:	711a      	strb	r2, [r3, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d006      	beq.n	8005762 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800575c:	711a      	strb	r2, [r3, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2243      	movs	r2, #67	; 0x43
 8005766:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005768:	4b02      	ldr	r3, [pc, #8]	; (8005774 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000050 	.word	0x20000050

08005778 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005780:	2182      	movs	r1, #130	; 0x82
 8005782:	4818      	ldr	r0, [pc, #96]	; (80057e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005784:	f000 fcd1 	bl	800612a <USBD_GetEpDesc>
 8005788:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800578a:	2101      	movs	r1, #1
 800578c:	4815      	ldr	r0, [pc, #84]	; (80057e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800578e:	f000 fccc 	bl	800612a <USBD_GetEpDesc>
 8005792:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005794:	2181      	movs	r1, #129	; 0x81
 8005796:	4813      	ldr	r0, [pc, #76]	; (80057e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005798:	f000 fcc7 	bl	800612a <USBD_GetEpDesc>
 800579c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2210      	movs	r2, #16
 80057a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d006      	beq.n	80057be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	2200      	movs	r2, #0
 80057b4:	711a      	strb	r2, [r3, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f042 0202 	orr.w	r2, r2, #2
 80057bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d006      	beq.n	80057d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	711a      	strb	r2, [r3, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f042 0202 	orr.w	r2, r2, #2
 80057d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2243      	movs	r2, #67	; 0x43
 80057d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80057d8:	4b02      	ldr	r3, [pc, #8]	; (80057e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000050 	.word	0x20000050

080057e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80057f0:	2182      	movs	r1, #130	; 0x82
 80057f2:	4818      	ldr	r0, [pc, #96]	; (8005854 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80057f4:	f000 fc99 	bl	800612a <USBD_GetEpDesc>
 80057f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80057fa:	2101      	movs	r1, #1
 80057fc:	4815      	ldr	r0, [pc, #84]	; (8005854 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80057fe:	f000 fc94 	bl	800612a <USBD_GetEpDesc>
 8005802:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005804:	2181      	movs	r1, #129	; 0x81
 8005806:	4813      	ldr	r0, [pc, #76]	; (8005854 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005808:	f000 fc8f 	bl	800612a <USBD_GetEpDesc>
 800580c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2210      	movs	r2, #16
 8005818:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d006      	beq.n	800582e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	2200      	movs	r2, #0
 8005824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005828:	711a      	strb	r2, [r3, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d006      	beq.n	8005842 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800583c:	711a      	strb	r2, [r3, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2243      	movs	r2, #67	; 0x43
 8005846:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005848:	4b02      	ldr	r3, [pc, #8]	; (8005854 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20000050 	.word	0x20000050

08005858 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	220a      	movs	r2, #10
 8005864:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005866:	4b03      	ldr	r3, [pc, #12]	; (8005874 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005868:	4618      	mov	r0, r3
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	2000000c 	.word	0x2000000c

08005878 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005888:	2303      	movs	r3, #3
 800588a:	e009      	b.n	80058a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	33b0      	adds	r3, #176	; 0xb0
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	32b0      	adds	r2, #176	; 0xb0
 80058c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e008      	b.n	80058e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	32b0      	adds	r2, #176	; 0xb0
 8005904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005908:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005910:	2303      	movs	r3, #3
 8005912:	e004      	b.n	800591e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	32b0      	adds	r2, #176	; 0xb0
 800593e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005942:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	32b0      	adds	r2, #176	; 0xb0
 800594e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005956:	2303      	movs	r3, #3
 8005958:	e018      	b.n	800598c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	7c1b      	ldrb	r3, [r3, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10a      	bne.n	8005978 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005962:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <USBD_CDC_ReceivePacket+0x68>)
 8005964:	7819      	ldrb	r1, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800596c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f001 ff7f 	bl	8007874 <USBD_LL_PrepareReceive>
 8005976:	e008      	b.n	800598a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005978:	4b06      	ldr	r3, [pc, #24]	; (8005994 <USBD_CDC_ReceivePacket+0x68>)
 800597a:	7819      	ldrb	r1, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005982:	2340      	movs	r3, #64	; 0x40
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f001 ff75 	bl	8007874 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20000094 	.word	0x20000094

08005998 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	4613      	mov	r3, r2
 80059a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e01f      	b.n	80059f0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	79fa      	ldrb	r2, [r7, #7]
 80059e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f001 fdef 	bl	80075c8 <USBD_LL_Init>
 80059ea:	4603      	mov	r3, r0
 80059ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e025      	b.n	8005a5c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	32ae      	adds	r2, #174	; 0xae
 8005a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00f      	beq.n	8005a4c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	32ae      	adds	r2, #174	; 0xae
 8005a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	f107 020e 	add.w	r2, r7, #14
 8005a40:	4610      	mov	r0, r2
 8005a42:	4798      	blx	r3
 8005a44:	4602      	mov	r2, r0
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f001 fdf7 	bl	8007660 <USBD_LL_Start>
 8005a72:	4603      	mov	r3, r0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a84:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d009      	beq.n	8005ac0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	78fa      	ldrb	r2, [r7, #3]
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	4798      	blx	r3
 8005abc:	4603      	mov	r3, r0
 8005abe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	78fa      	ldrb	r2, [r7, #3]
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	4798      	blx	r3
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005af0:	2303      	movs	r3, #3
 8005af2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b084      	sub	sp, #16
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b0e:	6839      	ldr	r1, [r7, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f001 f908 	bl	8006d26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005b24:	461a      	mov	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b32:	f003 031f 	and.w	r3, r3, #31
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d01a      	beq.n	8005b70 <USBD_LL_SetupStage+0x72>
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d822      	bhi.n	8005b84 <USBD_LL_SetupStage+0x86>
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <USBD_LL_SetupStage+0x4a>
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d00a      	beq.n	8005b5c <USBD_LL_SetupStage+0x5e>
 8005b46:	e01d      	b.n	8005b84 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fb5f 	bl	8006214 <USBD_StdDevReq>
 8005b56:	4603      	mov	r3, r0
 8005b58:	73fb      	strb	r3, [r7, #15]
      break;
 8005b5a:	e020      	b.n	8005b9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b62:	4619      	mov	r1, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fbc7 	bl	80062f8 <USBD_StdItfReq>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b6e:	e016      	b.n	8005b9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b76:	4619      	mov	r1, r3
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fc29 	bl	80063d0 <USBD_StdEPReq>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	73fb      	strb	r3, [r7, #15]
      break;
 8005b82:	e00c      	b.n	8005b9e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f001 fdc4 	bl	8007720 <USBD_LL_StallEP>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b9c:	bf00      	nop
  }

  return ret;
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005bba:	7afb      	ldrb	r3, [r7, #11]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d16e      	bne.n	8005c9e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005bc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	f040 8098 	bne.w	8005d04 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d913      	bls.n	8005c08 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	1ad2      	subs	r2, r2, r3
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	bf28      	it	cs
 8005bfa:	4613      	movcs	r3, r2
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f001 f984 	bl	8006f0e <USBD_CtlContinueRx>
 8005c06:	e07d      	b.n	8005d04 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c0e:	f003 031f 	and.w	r3, r3, #31
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d014      	beq.n	8005c40 <USBD_LL_DataOutStage+0x98>
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d81d      	bhi.n	8005c56 <USBD_LL_DataOutStage+0xae>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <USBD_LL_DataOutStage+0x7c>
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d003      	beq.n	8005c2a <USBD_LL_DataOutStage+0x82>
 8005c22:	e018      	b.n	8005c56 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	75bb      	strb	r3, [r7, #22]
            break;
 8005c28:	e018      	b.n	8005c5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	4619      	mov	r1, r3
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 fa5e 	bl	80060f6 <USBD_CoreFindIF>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	75bb      	strb	r3, [r7, #22]
            break;
 8005c3e:	e00d      	b.n	8005c5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	4619      	mov	r1, r3
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 fa60 	bl	8006110 <USBD_CoreFindEP>
 8005c50:	4603      	mov	r3, r0
 8005c52:	75bb      	strb	r3, [r7, #22]
            break;
 8005c54:	e002      	b.n	8005c5c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	75bb      	strb	r3, [r7, #22]
            break;
 8005c5a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005c5c:	7dbb      	ldrb	r3, [r7, #22]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d119      	bne.n	8005c96 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d113      	bne.n	8005c96 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005c6e:	7dba      	ldrb	r2, [r7, #22]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	32ae      	adds	r2, #174	; 0xae
 8005c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00b      	beq.n	8005c96 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005c7e:	7dba      	ldrb	r2, [r7, #22]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005c86:	7dba      	ldrb	r2, [r7, #22]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	32ae      	adds	r2, #174	; 0xae
 8005c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f001 f94a 	bl	8006f30 <USBD_CtlSendStatus>
 8005c9c:	e032      	b.n	8005d04 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005c9e:	7afb      	ldrb	r3, [r7, #11]
 8005ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 fa31 	bl	8006110 <USBD_CoreFindEP>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005cb2:	7dbb      	ldrb	r3, [r7, #22]
 8005cb4:	2bff      	cmp	r3, #255	; 0xff
 8005cb6:	d025      	beq.n	8005d04 <USBD_LL_DataOutStage+0x15c>
 8005cb8:	7dbb      	ldrb	r3, [r7, #22]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d122      	bne.n	8005d04 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d117      	bne.n	8005cfa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005cca:	7dba      	ldrb	r2, [r7, #22]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	32ae      	adds	r2, #174	; 0xae
 8005cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00f      	beq.n	8005cfa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005cda:	7dba      	ldrb	r2, [r7, #22]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005ce2:	7dba      	ldrb	r2, [r7, #22]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	32ae      	adds	r2, #174	; 0xae
 8005ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	7afa      	ldrb	r2, [r7, #11]
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	4798      	blx	r3
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005cfa:	7dfb      	ldrb	r3, [r7, #23]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	e000      	b.n	8005d06 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b086      	sub	sp, #24
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	460b      	mov	r3, r1
 8005d18:	607a      	str	r2, [r7, #4]
 8005d1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005d1c:	7afb      	ldrb	r3, [r7, #11]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d16f      	bne.n	8005e02 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	3314      	adds	r3, #20
 8005d26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d15a      	bne.n	8005de8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	689a      	ldr	r2, [r3, #8]
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d914      	bls.n	8005d68 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	1ad2      	subs	r2, r2, r3
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	461a      	mov	r2, r3
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f001 f8ac 	bl	8006eb2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	2100      	movs	r1, #0
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f001 fd87 	bl	8007874 <USBD_LL_PrepareReceive>
 8005d66:	e03f      	b.n	8005de8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d11c      	bne.n	8005dae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d316      	bcc.n	8005dae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d20f      	bcs.n	8005dae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d8e:	2200      	movs	r2, #0
 8005d90:	2100      	movs	r1, #0
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f001 f88d 	bl	8006eb2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005da0:	2300      	movs	r3, #0
 8005da2:	2200      	movs	r2, #0
 8005da4:	2100      	movs	r1, #0
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f001 fd64 	bl	8007874 <USBD_LL_PrepareReceive>
 8005dac:	e01c      	b.n	8005de8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	d10f      	bne.n	8005dda <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d009      	beq.n	8005dda <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005dda:	2180      	movs	r1, #128	; 0x80
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f001 fc9f 	bl	8007720 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f001 f8b7 	bl	8006f56 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d03a      	beq.n	8005e68 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f7ff fe42 	bl	8005a7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e00:	e032      	b.n	8005e68 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005e02:	7afb      	ldrb	r3, [r7, #11]
 8005e04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f97f 	bl	8006110 <USBD_CoreFindEP>
 8005e12:	4603      	mov	r3, r0
 8005e14:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e16:	7dfb      	ldrb	r3, [r7, #23]
 8005e18:	2bff      	cmp	r3, #255	; 0xff
 8005e1a:	d025      	beq.n	8005e68 <USBD_LL_DataInStage+0x15a>
 8005e1c:	7dfb      	ldrb	r3, [r7, #23]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d122      	bne.n	8005e68 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d11c      	bne.n	8005e68 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005e2e:	7dfa      	ldrb	r2, [r7, #23]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	32ae      	adds	r2, #174	; 0xae
 8005e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d014      	beq.n	8005e68 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005e3e:	7dfa      	ldrb	r2, [r7, #23]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005e46:	7dfa      	ldrb	r2, [r7, #23]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	32ae      	adds	r2, #174	; 0xae
 8005e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	7afa      	ldrb	r2, [r7, #11]
 8005e54:	4611      	mov	r1, r2
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	4798      	blx	r3
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005e5e:	7dbb      	ldrb	r3, [r7, #22]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005e64:	7dbb      	ldrb	r3, [r7, #22]
 8005e66:	e000      	b.n	8005e6a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d014      	beq.n	8005ed8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00e      	beq.n	8005ed8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6852      	ldr	r2, [r2, #4]
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	4611      	mov	r1, r2
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	4798      	blx	r3
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ed8:	2340      	movs	r3, #64	; 0x40
 8005eda:	2200      	movs	r2, #0
 8005edc:	2100      	movs	r1, #0
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f001 fbd9 	bl	8007696 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2240      	movs	r2, #64	; 0x40
 8005ef0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ef4:	2340      	movs	r3, #64	; 0x40
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	2180      	movs	r1, #128	; 0x80
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f001 fbcb 	bl	8007696 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2240      	movs	r2, #64	; 0x40
 8005f0a:	621a      	str	r2, [r3, #32]

  return ret;
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	78fa      	ldrb	r2, [r7, #3]
 8005f26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2204      	movs	r2, #4
 8005f50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d106      	bne.n	8005f84 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b082      	sub	sp, #8
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b03      	cmp	r3, #3
 8005fa4:	d110      	bne.n	8005fc8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00b      	beq.n	8005fc8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d005      	beq.n	8005fc8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b082      	sub	sp, #8
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	32ae      	adds	r2, #174	; 0xae
 8005fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e01c      	b.n	800602e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d115      	bne.n	800602c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	32ae      	adds	r2, #174	; 0xae
 800600a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00b      	beq.n	800602c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	32ae      	adds	r2, #174	; 0xae
 800601e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	78fa      	ldrb	r2, [r7, #3]
 8006026:	4611      	mov	r1, r2
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	460b      	mov	r3, r1
 8006040:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	32ae      	adds	r2, #174	; 0xae
 800604c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006054:	2303      	movs	r3, #3
 8006056:	e01c      	b.n	8006092 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b03      	cmp	r3, #3
 8006062:	d115      	bne.n	8006090 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	32ae      	adds	r2, #174	; 0xae
 800606e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00b      	beq.n	8006090 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	32ae      	adds	r2, #174	; 0xae
 8006082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	78fa      	ldrb	r2, [r7, #3]
 800608a:	4611      	mov	r1, r2
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00e      	beq.n	80060ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6852      	ldr	r2, [r2, #4]
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	4611      	mov	r1, r2
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	4798      	blx	r3
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80060e8:	2303      	movs	r3, #3
 80060ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	460b      	mov	r3, r1
 8006100:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006102:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800611c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800611e:	4618      	mov	r0, r3
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b086      	sub	sp, #24
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	460b      	mov	r3, r1
 8006134:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800613e:	2300      	movs	r3, #0
 8006140:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	885b      	ldrh	r3, [r3, #2]
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	429a      	cmp	r2, r3
 8006150:	d920      	bls.n	8006194 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800615a:	e013      	b.n	8006184 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800615c:	f107 030a 	add.w	r3, r7, #10
 8006160:	4619      	mov	r1, r3
 8006162:	6978      	ldr	r0, [r7, #20]
 8006164:	f000 f81b 	bl	800619e <USBD_GetNextDesc>
 8006168:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	2b05      	cmp	r3, #5
 8006170:	d108      	bne.n	8006184 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	789b      	ldrb	r3, [r3, #2]
 800617a:	78fa      	ldrb	r2, [r7, #3]
 800617c:	429a      	cmp	r2, r3
 800617e:	d008      	beq.n	8006192 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006180:	2300      	movs	r3, #0
 8006182:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	885b      	ldrh	r3, [r3, #2]
 8006188:	b29a      	uxth	r2, r3
 800618a:	897b      	ldrh	r3, [r7, #10]
 800618c:	429a      	cmp	r2, r3
 800618e:	d8e5      	bhi.n	800615c <USBD_GetEpDesc+0x32>
 8006190:	e000      	b.n	8006194 <USBD_GetEpDesc+0x6a>
          break;
 8006192:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006194:	693b      	ldr	r3, [r7, #16]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800619e:	b480      	push	{r7}
 80061a0:	b085      	sub	sp, #20
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	881a      	ldrh	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	4413      	add	r3, r2
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4413      	add	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80061ca:	68fb      	ldr	r3, [r7, #12]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	3301      	adds	r3, #1
 80061ee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80061f6:	8a3b      	ldrh	r3, [r7, #16]
 80061f8:	021b      	lsls	r3, r3, #8
 80061fa:	b21a      	sxth	r2, r3
 80061fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006200:	4313      	orrs	r3, r2
 8006202:	b21b      	sxth	r3, r3
 8006204:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006206:	89fb      	ldrh	r3, [r7, #14]
}
 8006208:	4618      	mov	r0, r3
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800622a:	2b40      	cmp	r3, #64	; 0x40
 800622c:	d005      	beq.n	800623a <USBD_StdDevReq+0x26>
 800622e:	2b40      	cmp	r3, #64	; 0x40
 8006230:	d857      	bhi.n	80062e2 <USBD_StdDevReq+0xce>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00f      	beq.n	8006256 <USBD_StdDevReq+0x42>
 8006236:	2b20      	cmp	r3, #32
 8006238:	d153      	bne.n	80062e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	32ae      	adds	r2, #174	; 0xae
 8006244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	4798      	blx	r3
 8006250:	4603      	mov	r3, r0
 8006252:	73fb      	strb	r3, [r7, #15]
      break;
 8006254:	e04a      	b.n	80062ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	785b      	ldrb	r3, [r3, #1]
 800625a:	2b09      	cmp	r3, #9
 800625c:	d83b      	bhi.n	80062d6 <USBD_StdDevReq+0xc2>
 800625e:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <USBD_StdDevReq+0x50>)
 8006260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006264:	080062b9 	.word	0x080062b9
 8006268:	080062cd 	.word	0x080062cd
 800626c:	080062d7 	.word	0x080062d7
 8006270:	080062c3 	.word	0x080062c3
 8006274:	080062d7 	.word	0x080062d7
 8006278:	08006297 	.word	0x08006297
 800627c:	0800628d 	.word	0x0800628d
 8006280:	080062d7 	.word	0x080062d7
 8006284:	080062af 	.word	0x080062af
 8006288:	080062a1 	.word	0x080062a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fa3c 	bl	800670c <USBD_GetDescriptor>
          break;
 8006294:	e024      	b.n	80062e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fba1 	bl	80069e0 <USBD_SetAddress>
          break;
 800629e:	e01f      	b.n	80062e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fbe0 	bl	8006a68 <USBD_SetConfig>
 80062a8:	4603      	mov	r3, r0
 80062aa:	73fb      	strb	r3, [r7, #15]
          break;
 80062ac:	e018      	b.n	80062e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80062ae:	6839      	ldr	r1, [r7, #0]
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fc83 	bl	8006bbc <USBD_GetConfig>
          break;
 80062b6:	e013      	b.n	80062e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fcb4 	bl	8006c28 <USBD_GetStatus>
          break;
 80062c0:	e00e      	b.n	80062e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fce3 	bl	8006c90 <USBD_SetFeature>
          break;
 80062ca:	e009      	b.n	80062e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80062cc:	6839      	ldr	r1, [r7, #0]
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fd07 	bl	8006ce2 <USBD_ClrFeature>
          break;
 80062d4:	e004      	b.n	80062e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80062d6:	6839      	ldr	r1, [r7, #0]
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fd5e 	bl	8006d9a <USBD_CtlError>
          break;
 80062de:	bf00      	nop
      }
      break;
 80062e0:	e004      	b.n	80062ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fd58 	bl	8006d9a <USBD_CtlError>
      break;
 80062ea:	bf00      	nop
  }

  return ret;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop

080062f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800630e:	2b40      	cmp	r3, #64	; 0x40
 8006310:	d005      	beq.n	800631e <USBD_StdItfReq+0x26>
 8006312:	2b40      	cmp	r3, #64	; 0x40
 8006314:	d852      	bhi.n	80063bc <USBD_StdItfReq+0xc4>
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <USBD_StdItfReq+0x26>
 800631a:	2b20      	cmp	r3, #32
 800631c:	d14e      	bne.n	80063bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006324:	b2db      	uxtb	r3, r3
 8006326:	3b01      	subs	r3, #1
 8006328:	2b02      	cmp	r3, #2
 800632a:	d840      	bhi.n	80063ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	889b      	ldrh	r3, [r3, #4]
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b01      	cmp	r3, #1
 8006334:	d836      	bhi.n	80063a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	889b      	ldrh	r3, [r3, #4]
 800633a:	b2db      	uxtb	r3, r3
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7ff fed9 	bl	80060f6 <USBD_CoreFindIF>
 8006344:	4603      	mov	r3, r0
 8006346:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006348:	7bbb      	ldrb	r3, [r7, #14]
 800634a:	2bff      	cmp	r3, #255	; 0xff
 800634c:	d01d      	beq.n	800638a <USBD_StdItfReq+0x92>
 800634e:	7bbb      	ldrb	r3, [r7, #14]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d11a      	bne.n	800638a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006354:	7bba      	ldrb	r2, [r7, #14]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	32ae      	adds	r2, #174	; 0xae
 800635a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00f      	beq.n	8006384 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006364:	7bba      	ldrb	r2, [r7, #14]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800636c:	7bba      	ldrb	r2, [r7, #14]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	32ae      	adds	r2, #174	; 0xae
 8006372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	4798      	blx	r3
 800637e:	4603      	mov	r3, r0
 8006380:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006382:	e004      	b.n	800638e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006384:	2303      	movs	r3, #3
 8006386:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006388:	e001      	b.n	800638e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800638a:	2303      	movs	r3, #3
 800638c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	88db      	ldrh	r3, [r3, #6]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d110      	bne.n	80063b8 <USBD_StdItfReq+0xc0>
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10d      	bne.n	80063b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fdc7 	bl	8006f30 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80063a2:	e009      	b.n	80063b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fcf7 	bl	8006d9a <USBD_CtlError>
          break;
 80063ac:	e004      	b.n	80063b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fcf2 	bl	8006d9a <USBD_CtlError>
          break;
 80063b6:	e000      	b.n	80063ba <USBD_StdItfReq+0xc2>
          break;
 80063b8:	bf00      	nop
      }
      break;
 80063ba:	e004      	b.n	80063c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fceb 	bl	8006d9a <USBD_CtlError>
      break;
 80063c4:	bf00      	nop
  }

  return ret;
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	889b      	ldrh	r3, [r3, #4]
 80063e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063ec:	2b40      	cmp	r3, #64	; 0x40
 80063ee:	d007      	beq.n	8006400 <USBD_StdEPReq+0x30>
 80063f0:	2b40      	cmp	r3, #64	; 0x40
 80063f2:	f200 817f 	bhi.w	80066f4 <USBD_StdEPReq+0x324>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d02a      	beq.n	8006450 <USBD_StdEPReq+0x80>
 80063fa:	2b20      	cmp	r3, #32
 80063fc:	f040 817a 	bne.w	80066f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006400:	7bbb      	ldrb	r3, [r7, #14]
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7ff fe83 	bl	8006110 <USBD_CoreFindEP>
 800640a:	4603      	mov	r3, r0
 800640c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800640e:	7b7b      	ldrb	r3, [r7, #13]
 8006410:	2bff      	cmp	r3, #255	; 0xff
 8006412:	f000 8174 	beq.w	80066fe <USBD_StdEPReq+0x32e>
 8006416:	7b7b      	ldrb	r3, [r7, #13]
 8006418:	2b00      	cmp	r3, #0
 800641a:	f040 8170 	bne.w	80066fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800641e:	7b7a      	ldrb	r2, [r7, #13]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006426:	7b7a      	ldrb	r2, [r7, #13]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	32ae      	adds	r2, #174	; 0xae
 800642c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 8163 	beq.w	80066fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006438:	7b7a      	ldrb	r2, [r7, #13]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	32ae      	adds	r2, #174	; 0xae
 800643e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	4798      	blx	r3
 800644a:	4603      	mov	r3, r0
 800644c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800644e:	e156      	b.n	80066fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	785b      	ldrb	r3, [r3, #1]
 8006454:	2b03      	cmp	r3, #3
 8006456:	d008      	beq.n	800646a <USBD_StdEPReq+0x9a>
 8006458:	2b03      	cmp	r3, #3
 800645a:	f300 8145 	bgt.w	80066e8 <USBD_StdEPReq+0x318>
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 809b 	beq.w	800659a <USBD_StdEPReq+0x1ca>
 8006464:	2b01      	cmp	r3, #1
 8006466:	d03c      	beq.n	80064e2 <USBD_StdEPReq+0x112>
 8006468:	e13e      	b.n	80066e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b02      	cmp	r3, #2
 8006474:	d002      	beq.n	800647c <USBD_StdEPReq+0xac>
 8006476:	2b03      	cmp	r3, #3
 8006478:	d016      	beq.n	80064a8 <USBD_StdEPReq+0xd8>
 800647a:	e02c      	b.n	80064d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800647c:	7bbb      	ldrb	r3, [r7, #14]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00d      	beq.n	800649e <USBD_StdEPReq+0xce>
 8006482:	7bbb      	ldrb	r3, [r7, #14]
 8006484:	2b80      	cmp	r3, #128	; 0x80
 8006486:	d00a      	beq.n	800649e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006488:	7bbb      	ldrb	r3, [r7, #14]
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f001 f947 	bl	8007720 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006492:	2180      	movs	r1, #128	; 0x80
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 f943 	bl	8007720 <USBD_LL_StallEP>
 800649a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800649c:	e020      	b.n	80064e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fc7a 	bl	8006d9a <USBD_CtlError>
              break;
 80064a6:	e01b      	b.n	80064e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	885b      	ldrh	r3, [r3, #2]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10e      	bne.n	80064ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00b      	beq.n	80064ce <USBD_StdEPReq+0xfe>
 80064b6:	7bbb      	ldrb	r3, [r7, #14]
 80064b8:	2b80      	cmp	r3, #128	; 0x80
 80064ba:	d008      	beq.n	80064ce <USBD_StdEPReq+0xfe>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	88db      	ldrh	r3, [r3, #6]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d104      	bne.n	80064ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 f929 	bl	8007720 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fd2e 	bl	8006f30 <USBD_CtlSendStatus>

              break;
 80064d4:	e004      	b.n	80064e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fc5e 	bl	8006d9a <USBD_CtlError>
              break;
 80064de:	bf00      	nop
          }
          break;
 80064e0:	e107      	b.n	80066f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d002      	beq.n	80064f4 <USBD_StdEPReq+0x124>
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d016      	beq.n	8006520 <USBD_StdEPReq+0x150>
 80064f2:	e04b      	b.n	800658c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00d      	beq.n	8006516 <USBD_StdEPReq+0x146>
 80064fa:	7bbb      	ldrb	r3, [r7, #14]
 80064fc:	2b80      	cmp	r3, #128	; 0x80
 80064fe:	d00a      	beq.n	8006516 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 f90b 	bl	8007720 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800650a:	2180      	movs	r1, #128	; 0x80
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 f907 	bl	8007720 <USBD_LL_StallEP>
 8006512:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006514:	e040      	b.n	8006598 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fc3e 	bl	8006d9a <USBD_CtlError>
              break;
 800651e:	e03b      	b.n	8006598 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	885b      	ldrh	r3, [r3, #2]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d136      	bne.n	8006596 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800652e:	2b00      	cmp	r3, #0
 8006530:	d004      	beq.n	800653c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006532:	7bbb      	ldrb	r3, [r7, #14]
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f001 f911 	bl	800775e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fcf7 	bl	8006f30 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006542:	7bbb      	ldrb	r3, [r7, #14]
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7ff fde2 	bl	8006110 <USBD_CoreFindEP>
 800654c:	4603      	mov	r3, r0
 800654e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006550:	7b7b      	ldrb	r3, [r7, #13]
 8006552:	2bff      	cmp	r3, #255	; 0xff
 8006554:	d01f      	beq.n	8006596 <USBD_StdEPReq+0x1c6>
 8006556:	7b7b      	ldrb	r3, [r7, #13]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d11c      	bne.n	8006596 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800655c:	7b7a      	ldrb	r2, [r7, #13]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006564:	7b7a      	ldrb	r2, [r7, #13]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	32ae      	adds	r2, #174	; 0xae
 800656a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d010      	beq.n	8006596 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006574:	7b7a      	ldrb	r2, [r7, #13]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	32ae      	adds	r2, #174	; 0xae
 800657a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	4798      	blx	r3
 8006586:	4603      	mov	r3, r0
 8006588:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800658a:	e004      	b.n	8006596 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fc03 	bl	8006d9a <USBD_CtlError>
              break;
 8006594:	e000      	b.n	8006598 <USBD_StdEPReq+0x1c8>
              break;
 8006596:	bf00      	nop
          }
          break;
 8006598:	e0ab      	b.n	80066f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d002      	beq.n	80065ac <USBD_StdEPReq+0x1dc>
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d032      	beq.n	8006610 <USBD_StdEPReq+0x240>
 80065aa:	e097      	b.n	80066dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065ac:	7bbb      	ldrb	r3, [r7, #14]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d007      	beq.n	80065c2 <USBD_StdEPReq+0x1f2>
 80065b2:	7bbb      	ldrb	r3, [r7, #14]
 80065b4:	2b80      	cmp	r3, #128	; 0x80
 80065b6:	d004      	beq.n	80065c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fbed 	bl	8006d9a <USBD_CtlError>
                break;
 80065c0:	e091      	b.n	80066e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	da0b      	bge.n	80065e2 <USBD_StdEPReq+0x212>
 80065ca:	7bbb      	ldrb	r3, [r7, #14]
 80065cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	3310      	adds	r3, #16
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	4413      	add	r3, r2
 80065de:	3304      	adds	r3, #4
 80065e0:	e00b      	b.n	80065fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065e2:	7bbb      	ldrb	r3, [r7, #14]
 80065e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	4413      	add	r3, r2
 80065f8:	3304      	adds	r3, #4
 80065fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2202      	movs	r2, #2
 8006606:	4619      	mov	r1, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fc37 	bl	8006e7c <USBD_CtlSendData>
              break;
 800660e:	e06a      	b.n	80066e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006614:	2b00      	cmp	r3, #0
 8006616:	da11      	bge.n	800663c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006618:	7bbb      	ldrb	r3, [r7, #14]
 800661a:	f003 020f 	and.w	r2, r3, #15
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	4613      	mov	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	3324      	adds	r3, #36	; 0x24
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d117      	bne.n	8006662 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fbb0 	bl	8006d9a <USBD_CtlError>
                  break;
 800663a:	e054      	b.n	80066e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800663c:	7bbb      	ldrb	r3, [r7, #14]
 800663e:	f003 020f 	and.w	r2, r3, #15
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	440b      	add	r3, r1
 800664e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d104      	bne.n	8006662 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fb9d 	bl	8006d9a <USBD_CtlError>
                  break;
 8006660:	e041      	b.n	80066e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006666:	2b00      	cmp	r3, #0
 8006668:	da0b      	bge.n	8006682 <USBD_StdEPReq+0x2b2>
 800666a:	7bbb      	ldrb	r3, [r7, #14]
 800666c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006670:	4613      	mov	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	3310      	adds	r3, #16
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	4413      	add	r3, r2
 800667e:	3304      	adds	r3, #4
 8006680:	e00b      	b.n	800669a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006682:	7bbb      	ldrb	r3, [r7, #14]
 8006684:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006688:	4613      	mov	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	4413      	add	r3, r2
 8006698:	3304      	adds	r3, #4
 800669a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800669c:	7bbb      	ldrb	r3, [r7, #14]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <USBD_StdEPReq+0x2d8>
 80066a2:	7bbb      	ldrb	r3, [r7, #14]
 80066a4:	2b80      	cmp	r3, #128	; 0x80
 80066a6:	d103      	bne.n	80066b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	e00e      	b.n	80066ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f001 f871 	bl	800779c <USBD_LL_IsStallEP>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2201      	movs	r2, #1
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	e002      	b.n	80066ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2202      	movs	r2, #2
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fbd1 	bl	8006e7c <USBD_CtlSendData>
              break;
 80066da:	e004      	b.n	80066e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fb5b 	bl	8006d9a <USBD_CtlError>
              break;
 80066e4:	bf00      	nop
          }
          break;
 80066e6:	e004      	b.n	80066f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fb55 	bl	8006d9a <USBD_CtlError>
          break;
 80066f0:	bf00      	nop
      }
      break;
 80066f2:	e005      	b.n	8006700 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fb4f 	bl	8006d9a <USBD_CtlError>
      break;
 80066fc:	e000      	b.n	8006700 <USBD_StdEPReq+0x330>
      break;
 80066fe:	bf00      	nop
  }

  return ret;
 8006700:	7bfb      	ldrb	r3, [r7, #15]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800671a:	2300      	movs	r3, #0
 800671c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	885b      	ldrh	r3, [r3, #2]
 8006726:	0a1b      	lsrs	r3, r3, #8
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b01      	subs	r3, #1
 800672c:	2b06      	cmp	r3, #6
 800672e:	f200 8128 	bhi.w	8006982 <USBD_GetDescriptor+0x276>
 8006732:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <USBD_GetDescriptor+0x2c>)
 8006734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006738:	08006755 	.word	0x08006755
 800673c:	0800676d 	.word	0x0800676d
 8006740:	080067ad 	.word	0x080067ad
 8006744:	08006983 	.word	0x08006983
 8006748:	08006983 	.word	0x08006983
 800674c:	08006923 	.word	0x08006923
 8006750:	0800694f 	.word	0x0800694f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	7c12      	ldrb	r2, [r2, #16]
 8006760:	f107 0108 	add.w	r1, r7, #8
 8006764:	4610      	mov	r0, r2
 8006766:	4798      	blx	r3
 8006768:	60f8      	str	r0, [r7, #12]
      break;
 800676a:	e112      	b.n	8006992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	7c1b      	ldrb	r3, [r3, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10d      	bne.n	8006790 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677c:	f107 0208 	add.w	r2, r7, #8
 8006780:	4610      	mov	r0, r2
 8006782:	4798      	blx	r3
 8006784:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3301      	adds	r3, #1
 800678a:	2202      	movs	r2, #2
 800678c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800678e:	e100      	b.n	8006992 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006798:	f107 0208 	add.w	r2, r7, #8
 800679c:	4610      	mov	r0, r2
 800679e:	4798      	blx	r3
 80067a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3301      	adds	r3, #1
 80067a6:	2202      	movs	r2, #2
 80067a8:	701a      	strb	r2, [r3, #0]
      break;
 80067aa:	e0f2      	b.n	8006992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	885b      	ldrh	r3, [r3, #2]
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b05      	cmp	r3, #5
 80067b4:	f200 80ac 	bhi.w	8006910 <USBD_GetDescriptor+0x204>
 80067b8:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <USBD_GetDescriptor+0xb4>)
 80067ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067be:	bf00      	nop
 80067c0:	080067d9 	.word	0x080067d9
 80067c4:	0800680d 	.word	0x0800680d
 80067c8:	08006841 	.word	0x08006841
 80067cc:	08006875 	.word	0x08006875
 80067d0:	080068a9 	.word	0x080068a9
 80067d4:	080068dd 	.word	0x080068dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00b      	beq.n	80067fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	7c12      	ldrb	r2, [r2, #16]
 80067f0:	f107 0108 	add.w	r1, r7, #8
 80067f4:	4610      	mov	r0, r2
 80067f6:	4798      	blx	r3
 80067f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067fa:	e091      	b.n	8006920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 facb 	bl	8006d9a <USBD_CtlError>
            err++;
 8006804:	7afb      	ldrb	r3, [r7, #11]
 8006806:	3301      	adds	r3, #1
 8006808:	72fb      	strb	r3, [r7, #11]
          break;
 800680a:	e089      	b.n	8006920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00b      	beq.n	8006830 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	7c12      	ldrb	r2, [r2, #16]
 8006824:	f107 0108 	add.w	r1, r7, #8
 8006828:	4610      	mov	r0, r2
 800682a:	4798      	blx	r3
 800682c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800682e:	e077      	b.n	8006920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fab1 	bl	8006d9a <USBD_CtlError>
            err++;
 8006838:	7afb      	ldrb	r3, [r7, #11]
 800683a:	3301      	adds	r3, #1
 800683c:	72fb      	strb	r3, [r7, #11]
          break;
 800683e:	e06f      	b.n	8006920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00b      	beq.n	8006864 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	7c12      	ldrb	r2, [r2, #16]
 8006858:	f107 0108 	add.w	r1, r7, #8
 800685c:	4610      	mov	r0, r2
 800685e:	4798      	blx	r3
 8006860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006862:	e05d      	b.n	8006920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fa97 	bl	8006d9a <USBD_CtlError>
            err++;
 800686c:	7afb      	ldrb	r3, [r7, #11]
 800686e:	3301      	adds	r3, #1
 8006870:	72fb      	strb	r3, [r7, #11]
          break;
 8006872:	e055      	b.n	8006920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00b      	beq.n	8006898 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	7c12      	ldrb	r2, [r2, #16]
 800688c:	f107 0108 	add.w	r1, r7, #8
 8006890:	4610      	mov	r0, r2
 8006892:	4798      	blx	r3
 8006894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006896:	e043      	b.n	8006920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fa7d 	bl	8006d9a <USBD_CtlError>
            err++;
 80068a0:	7afb      	ldrb	r3, [r7, #11]
 80068a2:	3301      	adds	r3, #1
 80068a4:	72fb      	strb	r3, [r7, #11]
          break;
 80068a6:	e03b      	b.n	8006920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00b      	beq.n	80068cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	7c12      	ldrb	r2, [r2, #16]
 80068c0:	f107 0108 	add.w	r1, r7, #8
 80068c4:	4610      	mov	r0, r2
 80068c6:	4798      	blx	r3
 80068c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068ca:	e029      	b.n	8006920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fa63 	bl	8006d9a <USBD_CtlError>
            err++;
 80068d4:	7afb      	ldrb	r3, [r7, #11]
 80068d6:	3301      	adds	r3, #1
 80068d8:	72fb      	strb	r3, [r7, #11]
          break;
 80068da:	e021      	b.n	8006920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00b      	beq.n	8006900 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	7c12      	ldrb	r2, [r2, #16]
 80068f4:	f107 0108 	add.w	r1, r7, #8
 80068f8:	4610      	mov	r0, r2
 80068fa:	4798      	blx	r3
 80068fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068fe:	e00f      	b.n	8006920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fa49 	bl	8006d9a <USBD_CtlError>
            err++;
 8006908:	7afb      	ldrb	r3, [r7, #11]
 800690a:	3301      	adds	r3, #1
 800690c:	72fb      	strb	r3, [r7, #11]
          break;
 800690e:	e007      	b.n	8006920 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fa41 	bl	8006d9a <USBD_CtlError>
          err++;
 8006918:	7afb      	ldrb	r3, [r7, #11]
 800691a:	3301      	adds	r3, #1
 800691c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800691e:	bf00      	nop
      }
      break;
 8006920:	e037      	b.n	8006992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	7c1b      	ldrb	r3, [r3, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d109      	bne.n	800693e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006932:	f107 0208 	add.w	r2, r7, #8
 8006936:	4610      	mov	r0, r2
 8006938:	4798      	blx	r3
 800693a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800693c:	e029      	b.n	8006992 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fa2a 	bl	8006d9a <USBD_CtlError>
        err++;
 8006946:	7afb      	ldrb	r3, [r7, #11]
 8006948:	3301      	adds	r3, #1
 800694a:	72fb      	strb	r3, [r7, #11]
      break;
 800694c:	e021      	b.n	8006992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	7c1b      	ldrb	r3, [r3, #16]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10d      	bne.n	8006972 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800695c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695e:	f107 0208 	add.w	r2, r7, #8
 8006962:	4610      	mov	r0, r2
 8006964:	4798      	blx	r3
 8006966:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	3301      	adds	r3, #1
 800696c:	2207      	movs	r2, #7
 800696e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006970:	e00f      	b.n	8006992 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fa10 	bl	8006d9a <USBD_CtlError>
        err++;
 800697a:	7afb      	ldrb	r3, [r7, #11]
 800697c:	3301      	adds	r3, #1
 800697e:	72fb      	strb	r3, [r7, #11]
      break;
 8006980:	e007      	b.n	8006992 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fa08 	bl	8006d9a <USBD_CtlError>
      err++;
 800698a:	7afb      	ldrb	r3, [r7, #11]
 800698c:	3301      	adds	r3, #1
 800698e:	72fb      	strb	r3, [r7, #11]
      break;
 8006990:	bf00      	nop
  }

  if (err != 0U)
 8006992:	7afb      	ldrb	r3, [r7, #11]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d11e      	bne.n	80069d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	88db      	ldrh	r3, [r3, #6]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d016      	beq.n	80069ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80069a0:	893b      	ldrh	r3, [r7, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00e      	beq.n	80069c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	88da      	ldrh	r2, [r3, #6]
 80069aa:	893b      	ldrh	r3, [r7, #8]
 80069ac:	4293      	cmp	r3, r2
 80069ae:	bf28      	it	cs
 80069b0:	4613      	movcs	r3, r2
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80069b6:	893b      	ldrh	r3, [r7, #8]
 80069b8:	461a      	mov	r2, r3
 80069ba:	68f9      	ldr	r1, [r7, #12]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fa5d 	bl	8006e7c <USBD_CtlSendData>
 80069c2:	e009      	b.n	80069d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f9e7 	bl	8006d9a <USBD_CtlError>
 80069cc:	e004      	b.n	80069d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 faae 	bl	8006f30 <USBD_CtlSendStatus>
 80069d4:	e000      	b.n	80069d8 <USBD_GetDescriptor+0x2cc>
    return;
 80069d6:	bf00      	nop
  }
}
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop

080069e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	889b      	ldrh	r3, [r3, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d131      	bne.n	8006a56 <USBD_SetAddress+0x76>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	88db      	ldrh	r3, [r3, #6]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d12d      	bne.n	8006a56 <USBD_SetAddress+0x76>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	885b      	ldrh	r3, [r3, #2]
 80069fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006a00:	d829      	bhi.n	8006a56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	885b      	ldrh	r3, [r3, #2]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d104      	bne.n	8006a24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f9bc 	bl	8006d9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a22:	e01d      	b.n	8006a60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	7bfa      	ldrb	r2, [r7, #15]
 8006a28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fedf 	bl	80077f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fa7a 	bl	8006f30 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a3c:	7bfb      	ldrb	r3, [r7, #15]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d004      	beq.n	8006a4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2202      	movs	r2, #2
 8006a46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a4a:	e009      	b.n	8006a60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a54:	e004      	b.n	8006a60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f99e 	bl	8006d9a <USBD_CtlError>
  }
}
 8006a5e:	bf00      	nop
 8006a60:	bf00      	nop
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	885b      	ldrh	r3, [r3, #2]
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	4b4e      	ldr	r3, [pc, #312]	; (8006bb8 <USBD_SetConfig+0x150>)
 8006a7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a80:	4b4d      	ldr	r3, [pc, #308]	; (8006bb8 <USBD_SetConfig+0x150>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d905      	bls.n	8006a94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f985 	bl	8006d9a <USBD_CtlError>
    return USBD_FAIL;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e08c      	b.n	8006bae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d002      	beq.n	8006aa6 <USBD_SetConfig+0x3e>
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d029      	beq.n	8006af8 <USBD_SetConfig+0x90>
 8006aa4:	e075      	b.n	8006b92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006aa6:	4b44      	ldr	r3, [pc, #272]	; (8006bb8 <USBD_SetConfig+0x150>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d020      	beq.n	8006af0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006aae:	4b42      	ldr	r3, [pc, #264]	; (8006bb8 <USBD_SetConfig+0x150>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ab8:	4b3f      	ldr	r3, [pc, #252]	; (8006bb8 <USBD_SetConfig+0x150>)
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7fe ffe7 	bl	8005a92 <USBD_SetClassConfig>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d008      	beq.n	8006ae0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f962 	bl	8006d9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2202      	movs	r2, #2
 8006ada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ade:	e065      	b.n	8006bac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fa25 	bl	8006f30 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2203      	movs	r2, #3
 8006aea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006aee:	e05d      	b.n	8006bac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fa1d 	bl	8006f30 <USBD_CtlSendStatus>
      break;
 8006af6:	e059      	b.n	8006bac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006af8:	4b2f      	ldr	r3, [pc, #188]	; (8006bb8 <USBD_SetConfig+0x150>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d112      	bne.n	8006b26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006b08:	4b2b      	ldr	r3, [pc, #172]	; (8006bb8 <USBD_SetConfig+0x150>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b12:	4b29      	ldr	r3, [pc, #164]	; (8006bb8 <USBD_SetConfig+0x150>)
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7fe ffd6 	bl	8005aca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fa06 	bl	8006f30 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b24:	e042      	b.n	8006bac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006b26:	4b24      	ldr	r3, [pc, #144]	; (8006bb8 <USBD_SetConfig+0x150>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d02a      	beq.n	8006b8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7fe ffc4 	bl	8005aca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006b42:	4b1d      	ldr	r3, [pc, #116]	; (8006bb8 <USBD_SetConfig+0x150>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b4c:	4b1a      	ldr	r3, [pc, #104]	; (8006bb8 <USBD_SetConfig+0x150>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7fe ff9d 	bl	8005a92 <USBD_SetClassConfig>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00f      	beq.n	8006b82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f918 	bl	8006d9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7fe ffa9 	bl	8005aca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b80:	e014      	b.n	8006bac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f9d4 	bl	8006f30 <USBD_CtlSendStatus>
      break;
 8006b88:	e010      	b.n	8006bac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f9d0 	bl	8006f30 <USBD_CtlSendStatus>
      break;
 8006b90:	e00c      	b.n	8006bac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f900 	bl	8006d9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b9a:	4b07      	ldr	r3, [pc, #28]	; (8006bb8 <USBD_SetConfig+0x150>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7fe ff92 	bl	8005aca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	73fb      	strb	r3, [r7, #15]
      break;
 8006baa:	bf00      	nop
  }

  return ret;
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000174 	.word	0x20000174

08006bbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	88db      	ldrh	r3, [r3, #6]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d004      	beq.n	8006bd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f8e2 	bl	8006d9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006bd6:	e023      	b.n	8006c20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	dc02      	bgt.n	8006bea <USBD_GetConfig+0x2e>
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	dc03      	bgt.n	8006bf0 <USBD_GetConfig+0x34>
 8006be8:	e015      	b.n	8006c16 <USBD_GetConfig+0x5a>
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	d00b      	beq.n	8006c06 <USBD_GetConfig+0x4a>
 8006bee:	e012      	b.n	8006c16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f93c 	bl	8006e7c <USBD_CtlSendData>
        break;
 8006c04:	e00c      	b.n	8006c20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3304      	adds	r3, #4
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f934 	bl	8006e7c <USBD_CtlSendData>
        break;
 8006c14:	e004      	b.n	8006c20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f8be 	bl	8006d9a <USBD_CtlError>
        break;
 8006c1e:	bf00      	nop
}
 8006c20:	bf00      	nop
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d81e      	bhi.n	8006c7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	88db      	ldrh	r3, [r3, #6]
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d004      	beq.n	8006c52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f8a5 	bl	8006d9a <USBD_CtlError>
        break;
 8006c50:	e01a      	b.n	8006c88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d005      	beq.n	8006c6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f043 0202 	orr.w	r2, r3, #2
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	330c      	adds	r3, #12
 8006c72:	2202      	movs	r2, #2
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f900 	bl	8006e7c <USBD_CtlSendData>
      break;
 8006c7c:	e004      	b.n	8006c88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f88a 	bl	8006d9a <USBD_CtlError>
      break;
 8006c86:	bf00      	nop
  }
}
 8006c88:	bf00      	nop
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	885b      	ldrh	r3, [r3, #2]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d107      	bne.n	8006cb2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f940 	bl	8006f30 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006cb0:	e013      	b.n	8006cda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	885b      	ldrh	r3, [r3, #2]
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d10b      	bne.n	8006cd2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	889b      	ldrh	r3, [r3, #4]
 8006cbe:	0a1b      	lsrs	r3, r3, #8
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f930 	bl	8006f30 <USBD_CtlSendStatus>
}
 8006cd0:	e003      	b.n	8006cda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f860 	bl	8006d9a <USBD_CtlError>
}
 8006cda:	bf00      	nop
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b082      	sub	sp, #8
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d80b      	bhi.n	8006d12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	885b      	ldrh	r3, [r3, #2]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d10c      	bne.n	8006d1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f910 	bl	8006f30 <USBD_CtlSendStatus>
      }
      break;
 8006d10:	e004      	b.n	8006d1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f840 	bl	8006d9a <USBD_CtlError>
      break;
 8006d1a:	e000      	b.n	8006d1e <USBD_ClrFeature+0x3c>
      break;
 8006d1c:	bf00      	nop
  }
}
 8006d1e:	bf00      	nop
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b084      	sub	sp, #16
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	781a      	ldrb	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	781a      	ldrb	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f7ff fa41 	bl	80061d8 <SWAPBYTE>
 8006d56:	4603      	mov	r3, r0
 8006d58:	461a      	mov	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3301      	adds	r3, #1
 8006d62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	3301      	adds	r3, #1
 8006d68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f7ff fa34 	bl	80061d8 <SWAPBYTE>
 8006d70:	4603      	mov	r3, r0
 8006d72:	461a      	mov	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	3301      	adds	r3, #1
 8006d82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f7ff fa27 	bl	80061d8 <SWAPBYTE>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	80da      	strh	r2, [r3, #6]
}
 8006d92:	bf00      	nop
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b082      	sub	sp, #8
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006da4:	2180      	movs	r1, #128	; 0x80
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fcba 	bl	8007720 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006dac:	2100      	movs	r1, #0
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fcb6 	bl	8007720 <USBD_LL_StallEP>
}
 8006db4:	bf00      	nop
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d036      	beq.n	8006e40 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006dd6:	6938      	ldr	r0, [r7, #16]
 8006dd8:	f000 f836 	bl	8006e48 <USBD_GetLen>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	3301      	adds	r3, #1
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	4413      	add	r3, r2
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	7812      	ldrb	r2, [r2, #0]
 8006df4:	701a      	strb	r2, [r3, #0]
  idx++;
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006dfc:	7dfb      	ldrb	r3, [r7, #23]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	4413      	add	r3, r2
 8006e02:	2203      	movs	r2, #3
 8006e04:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006e0c:	e013      	b.n	8006e36 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	4413      	add	r3, r2
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	7812      	ldrb	r2, [r2, #0]
 8006e18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	613b      	str	r3, [r7, #16]
    idx++;
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
 8006e22:	3301      	adds	r3, #1
 8006e24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
 8006e32:	3301      	adds	r3, #1
 8006e34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e7      	bne.n	8006e0e <USBD_GetString+0x52>
 8006e3e:	e000      	b.n	8006e42 <USBD_GetString+0x86>
    return;
 8006e40:	bf00      	nop
  }
}
 8006e42:	3718      	adds	r7, #24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006e58:	e005      	b.n	8006e66 <USBD_GetLen+0x1e>
  {
    len++;
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	3301      	adds	r3, #1
 8006e64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1f5      	bne.n	8006e5a <USBD_GetLen+0x12>
  }

  return len;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 fcc5 	bl	8007832 <USBD_LL_Transmit>

  return USBD_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 fcb4 	bl	8007832 <USBD_LL_Transmit>

  return USBD_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2203      	movs	r2, #3
 8006ee4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	2100      	movs	r1, #0
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f000 fcb8 	bl	8007874 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	60b9      	str	r1, [r7, #8]
 8006f18:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	2100      	movs	r1, #0
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 fca7 	bl	8007874 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2204      	movs	r2, #4
 8006f3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006f40:	2300      	movs	r3, #0
 8006f42:	2200      	movs	r2, #0
 8006f44:	2100      	movs	r1, #0
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fc73 	bl	8007832 <USBD_LL_Transmit>

  return USBD_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2205      	movs	r2, #5
 8006f62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f66:	2300      	movs	r3, #0
 8006f68:	2200      	movs	r2, #0
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fc81 	bl	8007874 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f80:	2200      	movs	r2, #0
 8006f82:	4912      	ldr	r1, [pc, #72]	; (8006fcc <MX_USB_DEVICE_Init+0x50>)
 8006f84:	4812      	ldr	r0, [pc, #72]	; (8006fd0 <MX_USB_DEVICE_Init+0x54>)
 8006f86:	f7fe fd07 	bl	8005998 <USBD_Init>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d001      	beq.n	8006f94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006f90:	f7f9 fc0a 	bl	80007a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006f94:	490f      	ldr	r1, [pc, #60]	; (8006fd4 <MX_USB_DEVICE_Init+0x58>)
 8006f96:	480e      	ldr	r0, [pc, #56]	; (8006fd0 <MX_USB_DEVICE_Init+0x54>)
 8006f98:	f7fe fd2e 	bl	80059f8 <USBD_RegisterClass>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006fa2:	f7f9 fc01 	bl	80007a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006fa6:	490c      	ldr	r1, [pc, #48]	; (8006fd8 <MX_USB_DEVICE_Init+0x5c>)
 8006fa8:	4809      	ldr	r0, [pc, #36]	; (8006fd0 <MX_USB_DEVICE_Init+0x54>)
 8006faa:	f7fe fc65 	bl	8005878 <USBD_CDC_RegisterInterface>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006fb4:	f7f9 fbf8 	bl	80007a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006fb8:	4805      	ldr	r0, [pc, #20]	; (8006fd0 <MX_USB_DEVICE_Init+0x54>)
 8006fba:	f7fe fd53 	bl	8005a64 <USBD_Start>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006fc4:	f7f9 fbf0 	bl	80007a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006fc8:	bf00      	nop
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	200000ac 	.word	0x200000ac
 8006fd0:	20000178 	.word	0x20000178
 8006fd4:	20000018 	.word	0x20000018
 8006fd8:	20000098 	.word	0x20000098

08006fdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	4905      	ldr	r1, [pc, #20]	; (8006ff8 <CDC_Init_FS+0x1c>)
 8006fe4:	4805      	ldr	r0, [pc, #20]	; (8006ffc <CDC_Init_FS+0x20>)
 8006fe6:	f7fe fc61 	bl	80058ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006fea:	4905      	ldr	r1, [pc, #20]	; (8007000 <CDC_Init_FS+0x24>)
 8006fec:	4803      	ldr	r0, [pc, #12]	; (8006ffc <CDC_Init_FS+0x20>)
 8006fee:	f7fe fc7f 	bl	80058f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006ff2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	20000c54 	.word	0x20000c54
 8006ffc:	20000178 	.word	0x20000178
 8007000:	20000454 	.word	0x20000454

08007004 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007004:	b480      	push	{r7}
 8007006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007008:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800700a:	4618      	mov	r0, r3
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	6039      	str	r1, [r7, #0]
 800701e:	71fb      	strb	r3, [r7, #7]
 8007020:	4613      	mov	r3, r2
 8007022:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007024:	79fb      	ldrb	r3, [r7, #7]
 8007026:	2b23      	cmp	r3, #35	; 0x23
 8007028:	d84a      	bhi.n	80070c0 <CDC_Control_FS+0xac>
 800702a:	a201      	add	r2, pc, #4	; (adr r2, 8007030 <CDC_Control_FS+0x1c>)
 800702c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007030:	080070c1 	.word	0x080070c1
 8007034:	080070c1 	.word	0x080070c1
 8007038:	080070c1 	.word	0x080070c1
 800703c:	080070c1 	.word	0x080070c1
 8007040:	080070c1 	.word	0x080070c1
 8007044:	080070c1 	.word	0x080070c1
 8007048:	080070c1 	.word	0x080070c1
 800704c:	080070c1 	.word	0x080070c1
 8007050:	080070c1 	.word	0x080070c1
 8007054:	080070c1 	.word	0x080070c1
 8007058:	080070c1 	.word	0x080070c1
 800705c:	080070c1 	.word	0x080070c1
 8007060:	080070c1 	.word	0x080070c1
 8007064:	080070c1 	.word	0x080070c1
 8007068:	080070c1 	.word	0x080070c1
 800706c:	080070c1 	.word	0x080070c1
 8007070:	080070c1 	.word	0x080070c1
 8007074:	080070c1 	.word	0x080070c1
 8007078:	080070c1 	.word	0x080070c1
 800707c:	080070c1 	.word	0x080070c1
 8007080:	080070c1 	.word	0x080070c1
 8007084:	080070c1 	.word	0x080070c1
 8007088:	080070c1 	.word	0x080070c1
 800708c:	080070c1 	.word	0x080070c1
 8007090:	080070c1 	.word	0x080070c1
 8007094:	080070c1 	.word	0x080070c1
 8007098:	080070c1 	.word	0x080070c1
 800709c:	080070c1 	.word	0x080070c1
 80070a0:	080070c1 	.word	0x080070c1
 80070a4:	080070c1 	.word	0x080070c1
 80070a8:	080070c1 	.word	0x080070c1
 80070ac:	080070c1 	.word	0x080070c1
 80070b0:	080070c1 	.word	0x080070c1
 80070b4:	080070c1 	.word	0x080070c1
 80070b8:	080070c1 	.word	0x080070c1
 80070bc:	080070c1 	.word	0x080070c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80070c0:	bf00      	nop
  }

  return (USBD_OK);
 80070c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	4805      	ldr	r0, [pc, #20]	; (80070f4 <CDC_Receive_FS+0x24>)
 80070de:	f7fe fc07 	bl	80058f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80070e2:	4804      	ldr	r0, [pc, #16]	; (80070f4 <CDC_Receive_FS+0x24>)
 80070e4:	f7fe fc22 	bl	800592c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80070e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20000178 	.word	0x20000178

080070f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	4613      	mov	r3, r2
 8007104:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800710a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800710e:	4618      	mov	r0, r3
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
	...

0800711c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	6039      	str	r1, [r7, #0]
 8007126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	2212      	movs	r2, #18
 800712c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800712e:	4b03      	ldr	r3, [pc, #12]	; (800713c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007130:	4618      	mov	r0, r3
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	200000c8 	.word	0x200000c8

08007140 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	4603      	mov	r3, r0
 8007148:	6039      	str	r1, [r7, #0]
 800714a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2204      	movs	r2, #4
 8007150:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007152:	4b03      	ldr	r3, [pc, #12]	; (8007160 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	200000dc 	.word	0x200000dc

08007164 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	6039      	str	r1, [r7, #0]
 800716e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007170:	79fb      	ldrb	r3, [r7, #7]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d105      	bne.n	8007182 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	4907      	ldr	r1, [pc, #28]	; (8007198 <USBD_FS_ProductStrDescriptor+0x34>)
 800717a:	4808      	ldr	r0, [pc, #32]	; (800719c <USBD_FS_ProductStrDescriptor+0x38>)
 800717c:	f7ff fe1e 	bl	8006dbc <USBD_GetString>
 8007180:	e004      	b.n	800718c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	4904      	ldr	r1, [pc, #16]	; (8007198 <USBD_FS_ProductStrDescriptor+0x34>)
 8007186:	4805      	ldr	r0, [pc, #20]	; (800719c <USBD_FS_ProductStrDescriptor+0x38>)
 8007188:	f7ff fe18 	bl	8006dbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800718c:	4b02      	ldr	r3, [pc, #8]	; (8007198 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800718e:	4618      	mov	r0, r3
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20001454 	.word	0x20001454
 800719c:	080079d4 	.word	0x080079d4

080071a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	6039      	str	r1, [r7, #0]
 80071aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	4904      	ldr	r1, [pc, #16]	; (80071c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80071b0:	4804      	ldr	r0, [pc, #16]	; (80071c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80071b2:	f7ff fe03 	bl	8006dbc <USBD_GetString>
  return USBD_StrDesc;
 80071b6:	4b02      	ldr	r3, [pc, #8]	; (80071c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	20001454 	.word	0x20001454
 80071c4:	080079ec 	.word	0x080079ec

080071c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	4603      	mov	r3, r0
 80071d0:	6039      	str	r1, [r7, #0]
 80071d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	221a      	movs	r2, #26
 80071d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80071da:	f000 f843 	bl	8007264 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80071de:	4b02      	ldr	r3, [pc, #8]	; (80071e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	200000e0 	.word	0x200000e0

080071ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	4603      	mov	r3, r0
 80071f4:	6039      	str	r1, [r7, #0]
 80071f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80071f8:	79fb      	ldrb	r3, [r7, #7]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d105      	bne.n	800720a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	4907      	ldr	r1, [pc, #28]	; (8007220 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007202:	4808      	ldr	r0, [pc, #32]	; (8007224 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007204:	f7ff fdda 	bl	8006dbc <USBD_GetString>
 8007208:	e004      	b.n	8007214 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	4904      	ldr	r1, [pc, #16]	; (8007220 <USBD_FS_ConfigStrDescriptor+0x34>)
 800720e:	4805      	ldr	r0, [pc, #20]	; (8007224 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007210:	f7ff fdd4 	bl	8006dbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007214:	4b02      	ldr	r3, [pc, #8]	; (8007220 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20001454 	.word	0x20001454
 8007224:	08007a00 	.word	0x08007a00

08007228 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	4603      	mov	r3, r0
 8007230:	6039      	str	r1, [r7, #0]
 8007232:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d105      	bne.n	8007246 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	4907      	ldr	r1, [pc, #28]	; (800725c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800723e:	4808      	ldr	r0, [pc, #32]	; (8007260 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007240:	f7ff fdbc 	bl	8006dbc <USBD_GetString>
 8007244:	e004      	b.n	8007250 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	4904      	ldr	r1, [pc, #16]	; (800725c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800724a:	4805      	ldr	r0, [pc, #20]	; (8007260 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800724c:	f7ff fdb6 	bl	8006dbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007250:	4b02      	ldr	r3, [pc, #8]	; (800725c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20001454 	.word	0x20001454
 8007260:	08007a0c 	.word	0x08007a0c

08007264 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800726a:	4b0f      	ldr	r3, [pc, #60]	; (80072a8 <Get_SerialNum+0x44>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007270:	4b0e      	ldr	r3, [pc, #56]	; (80072ac <Get_SerialNum+0x48>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007276:	4b0e      	ldr	r3, [pc, #56]	; (80072b0 <Get_SerialNum+0x4c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4413      	add	r3, r2
 8007282:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d009      	beq.n	800729e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800728a:	2208      	movs	r2, #8
 800728c:	4909      	ldr	r1, [pc, #36]	; (80072b4 <Get_SerialNum+0x50>)
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 f814 	bl	80072bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007294:	2204      	movs	r2, #4
 8007296:	4908      	ldr	r1, [pc, #32]	; (80072b8 <Get_SerialNum+0x54>)
 8007298:	68b8      	ldr	r0, [r7, #8]
 800729a:	f000 f80f 	bl	80072bc <IntToUnicode>
  }
}
 800729e:	bf00      	nop
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	1fff7a10 	.word	0x1fff7a10
 80072ac:	1fff7a14 	.word	0x1fff7a14
 80072b0:	1fff7a18 	.word	0x1fff7a18
 80072b4:	200000e2 	.word	0x200000e2
 80072b8:	200000f2 	.word	0x200000f2

080072bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	4613      	mov	r3, r2
 80072c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80072ca:	2300      	movs	r3, #0
 80072cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80072ce:	2300      	movs	r3, #0
 80072d0:	75fb      	strb	r3, [r7, #23]
 80072d2:	e027      	b.n	8007324 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	0f1b      	lsrs	r3, r3, #28
 80072d8:	2b09      	cmp	r3, #9
 80072da:	d80b      	bhi.n	80072f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	0f1b      	lsrs	r3, r3, #28
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	7dfb      	ldrb	r3, [r7, #23]
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	4619      	mov	r1, r3
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	440b      	add	r3, r1
 80072ec:	3230      	adds	r2, #48	; 0x30
 80072ee:	b2d2      	uxtb	r2, r2
 80072f0:	701a      	strb	r2, [r3, #0]
 80072f2:	e00a      	b.n	800730a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	0f1b      	lsrs	r3, r3, #28
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	4619      	mov	r1, r3
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	440b      	add	r3, r1
 8007304:	3237      	adds	r2, #55	; 0x37
 8007306:	b2d2      	uxtb	r2, r2
 8007308:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	011b      	lsls	r3, r3, #4
 800730e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	3301      	adds	r3, #1
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	4413      	add	r3, r2
 800731a:	2200      	movs	r2, #0
 800731c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800731e:	7dfb      	ldrb	r3, [r7, #23]
 8007320:	3301      	adds	r3, #1
 8007322:	75fb      	strb	r3, [r7, #23]
 8007324:	7dfa      	ldrb	r2, [r7, #23]
 8007326:	79fb      	ldrb	r3, [r7, #7]
 8007328:	429a      	cmp	r2, r3
 800732a:	d3d3      	bcc.n	80072d4 <IntToUnicode+0x18>
  }
}
 800732c:	bf00      	nop
 800732e:	bf00      	nop
 8007330:	371c      	adds	r7, #28
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
	...

0800733c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08a      	sub	sp, #40	; 0x28
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007344:	f107 0314 	add.w	r3, r7, #20
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	605a      	str	r2, [r3, #4]
 800734e:	609a      	str	r2, [r3, #8]
 8007350:	60da      	str	r2, [r3, #12]
 8007352:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800735c:	d13a      	bne.n	80073d4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800735e:	2300      	movs	r3, #0
 8007360:	613b      	str	r3, [r7, #16]
 8007362:	4b1e      	ldr	r3, [pc, #120]	; (80073dc <HAL_PCD_MspInit+0xa0>)
 8007364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007366:	4a1d      	ldr	r2, [pc, #116]	; (80073dc <HAL_PCD_MspInit+0xa0>)
 8007368:	f043 0301 	orr.w	r3, r3, #1
 800736c:	6313      	str	r3, [r2, #48]	; 0x30
 800736e:	4b1b      	ldr	r3, [pc, #108]	; (80073dc <HAL_PCD_MspInit+0xa0>)
 8007370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	613b      	str	r3, [r7, #16]
 8007378:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800737a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800737e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007380:	2302      	movs	r3, #2
 8007382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007384:	2300      	movs	r3, #0
 8007386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007388:	2303      	movs	r3, #3
 800738a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800738c:	230a      	movs	r3, #10
 800738e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007390:	f107 0314 	add.w	r3, r7, #20
 8007394:	4619      	mov	r1, r3
 8007396:	4812      	ldr	r0, [pc, #72]	; (80073e0 <HAL_PCD_MspInit+0xa4>)
 8007398:	f7f9 fcb6 	bl	8000d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800739c:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <HAL_PCD_MspInit+0xa0>)
 800739e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a0:	4a0e      	ldr	r2, [pc, #56]	; (80073dc <HAL_PCD_MspInit+0xa0>)
 80073a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a6:	6353      	str	r3, [r2, #52]	; 0x34
 80073a8:	2300      	movs	r3, #0
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	4b0b      	ldr	r3, [pc, #44]	; (80073dc <HAL_PCD_MspInit+0xa0>)
 80073ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b0:	4a0a      	ldr	r2, [pc, #40]	; (80073dc <HAL_PCD_MspInit+0xa0>)
 80073b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073b6:	6453      	str	r3, [r2, #68]	; 0x44
 80073b8:	4b08      	ldr	r3, [pc, #32]	; (80073dc <HAL_PCD_MspInit+0xa0>)
 80073ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073c0:	60fb      	str	r3, [r7, #12]
 80073c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80073c4:	2200      	movs	r2, #0
 80073c6:	2100      	movs	r1, #0
 80073c8:	2043      	movs	r0, #67	; 0x43
 80073ca:	f7f9 fc58 	bl	8000c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80073ce:	2043      	movs	r0, #67	; 0x43
 80073d0:	f7f9 fc71 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80073d4:	bf00      	nop
 80073d6:	3728      	adds	r7, #40	; 0x28
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	40023800 	.word	0x40023800
 80073e0:	40020000 	.word	0x40020000

080073e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80073f8:	4619      	mov	r1, r3
 80073fa:	4610      	mov	r0, r2
 80073fc:	f7fe fb7f 	bl	8005afe <USBD_LL_SetupStage>
}
 8007400:	bf00      	nop
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800741a:	78fa      	ldrb	r2, [r7, #3]
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	4613      	mov	r3, r2
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	440b      	add	r3, r1
 8007428:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	78fb      	ldrb	r3, [r7, #3]
 8007430:	4619      	mov	r1, r3
 8007432:	f7fe fbb9 	bl	8005ba8 <USBD_LL_DataOutStage>
}
 8007436:	bf00      	nop
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b082      	sub	sp, #8
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	460b      	mov	r3, r1
 8007448:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007450:	78fa      	ldrb	r2, [r7, #3]
 8007452:	6879      	ldr	r1, [r7, #4]
 8007454:	4613      	mov	r3, r2
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	4413      	add	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	440b      	add	r3, r1
 800745e:	334c      	adds	r3, #76	; 0x4c
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	4619      	mov	r1, r3
 8007466:	f7fe fc52 	bl	8005d0e <USBD_LL_DataInStage>
}
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b082      	sub	sp, #8
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007480:	4618      	mov	r0, r3
 8007482:	f7fe fd86 	bl	8005f92 <USBD_LL_SOF>
}
 8007486:	bf00      	nop
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007496:	2301      	movs	r3, #1
 8007498:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d102      	bne.n	80074a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
 80074a6:	e008      	b.n	80074ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d102      	bne.n	80074b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80074b0:	2301      	movs	r3, #1
 80074b2:	73fb      	strb	r3, [r7, #15]
 80074b4:	e001      	b.n	80074ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80074b6:	f7f9 f977 	bl	80007a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074c0:	7bfa      	ldrb	r2, [r7, #15]
 80074c2:	4611      	mov	r1, r2
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe fd26 	bl	8005f16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fe fcce 	bl	8005e72 <USBD_LL_Reset>
}
 80074d6:	bf00      	nop
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
	...

080074e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fd21 	bl	8005f36 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6812      	ldr	r2, [r2, #0]
 8007502:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007506:	f043 0301 	orr.w	r3, r3, #1
 800750a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007514:	4b04      	ldr	r3, [pc, #16]	; (8007528 <HAL_PCD_SuspendCallback+0x48>)
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	4a03      	ldr	r2, [pc, #12]	; (8007528 <HAL_PCD_SuspendCallback+0x48>)
 800751a:	f043 0306 	orr.w	r3, r3, #6
 800751e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007520:	bf00      	nop
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	e000ed00 	.word	0xe000ed00

0800752c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe fd11 	bl	8005f62 <USBD_LL_Resume>
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800755a:	78fa      	ldrb	r2, [r7, #3]
 800755c:	4611      	mov	r1, r2
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe fd69 	bl	8006036 <USBD_LL_IsoOUTIncomplete>
}
 8007564:	bf00      	nop
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800757e:	78fa      	ldrb	r2, [r7, #3]
 8007580:	4611      	mov	r1, r2
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe fd25 	bl	8005fd2 <USBD_LL_IsoINIncomplete>
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe fd7b 	bl	800609a <USBD_LL_DevConnected>
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe fd78 	bl	80060b0 <USBD_LL_DevDisconnected>
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d13c      	bne.n	8007652 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80075d8:	4a20      	ldr	r2, [pc, #128]	; (800765c <USBD_LL_Init+0x94>)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a1e      	ldr	r2, [pc, #120]	; (800765c <USBD_LL_Init+0x94>)
 80075e4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80075e8:	4b1c      	ldr	r3, [pc, #112]	; (800765c <USBD_LL_Init+0x94>)
 80075ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80075ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80075f0:	4b1a      	ldr	r3, [pc, #104]	; (800765c <USBD_LL_Init+0x94>)
 80075f2:	2204      	movs	r2, #4
 80075f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80075f6:	4b19      	ldr	r3, [pc, #100]	; (800765c <USBD_LL_Init+0x94>)
 80075f8:	2202      	movs	r2, #2
 80075fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80075fc:	4b17      	ldr	r3, [pc, #92]	; (800765c <USBD_LL_Init+0x94>)
 80075fe:	2200      	movs	r2, #0
 8007600:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007602:	4b16      	ldr	r3, [pc, #88]	; (800765c <USBD_LL_Init+0x94>)
 8007604:	2202      	movs	r2, #2
 8007606:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007608:	4b14      	ldr	r3, [pc, #80]	; (800765c <USBD_LL_Init+0x94>)
 800760a:	2200      	movs	r2, #0
 800760c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800760e:	4b13      	ldr	r3, [pc, #76]	; (800765c <USBD_LL_Init+0x94>)
 8007610:	2200      	movs	r2, #0
 8007612:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007614:	4b11      	ldr	r3, [pc, #68]	; (800765c <USBD_LL_Init+0x94>)
 8007616:	2200      	movs	r2, #0
 8007618:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800761a:	4b10      	ldr	r3, [pc, #64]	; (800765c <USBD_LL_Init+0x94>)
 800761c:	2200      	movs	r2, #0
 800761e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007620:	4b0e      	ldr	r3, [pc, #56]	; (800765c <USBD_LL_Init+0x94>)
 8007622:	2200      	movs	r2, #0
 8007624:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007626:	480d      	ldr	r0, [pc, #52]	; (800765c <USBD_LL_Init+0x94>)
 8007628:	f7f9 fd3a 	bl	80010a0 <HAL_PCD_Init>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007632:	f7f9 f8b9 	bl	80007a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007636:	2180      	movs	r1, #128	; 0x80
 8007638:	4808      	ldr	r0, [pc, #32]	; (800765c <USBD_LL_Init+0x94>)
 800763a:	f7fa ff92 	bl	8002562 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800763e:	2240      	movs	r2, #64	; 0x40
 8007640:	2100      	movs	r1, #0
 8007642:	4806      	ldr	r0, [pc, #24]	; (800765c <USBD_LL_Init+0x94>)
 8007644:	f7fa ff46 	bl	80024d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007648:	2280      	movs	r2, #128	; 0x80
 800764a:	2101      	movs	r1, #1
 800764c:	4803      	ldr	r0, [pc, #12]	; (800765c <USBD_LL_Init+0x94>)
 800764e:	f7fa ff41 	bl	80024d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	20001654 	.word	0x20001654

08007660 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007676:	4618      	mov	r0, r3
 8007678:	f7f9 fe2f 	bl	80012da <HAL_PCD_Start>
 800767c:	4603      	mov	r3, r0
 800767e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	4618      	mov	r0, r3
 8007684:	f000 f942 	bl	800790c <USBD_Get_USB_Status>
 8007688:	4603      	mov	r3, r0
 800768a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800768c:	7bbb      	ldrb	r3, [r7, #14]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	4608      	mov	r0, r1
 80076a0:	4611      	mov	r1, r2
 80076a2:	461a      	mov	r2, r3
 80076a4:	4603      	mov	r3, r0
 80076a6:	70fb      	strb	r3, [r7, #3]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70bb      	strb	r3, [r7, #2]
 80076ac:	4613      	mov	r3, r2
 80076ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80076be:	78bb      	ldrb	r3, [r7, #2]
 80076c0:	883a      	ldrh	r2, [r7, #0]
 80076c2:	78f9      	ldrb	r1, [r7, #3]
 80076c4:	f7fa fb00 	bl	8001cc8 <HAL_PCD_EP_Open>
 80076c8:	4603      	mov	r3, r0
 80076ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 f91c 	bl	800790c <USBD_Get_USB_Status>
 80076d4:	4603      	mov	r3, r0
 80076d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	460b      	mov	r3, r1
 80076ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076fc:	78fa      	ldrb	r2, [r7, #3]
 80076fe:	4611      	mov	r1, r2
 8007700:	4618      	mov	r0, r3
 8007702:	f7fa fb49 	bl	8001d98 <HAL_PCD_EP_Close>
 8007706:	4603      	mov	r3, r0
 8007708:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	4618      	mov	r0, r3
 800770e:	f000 f8fd 	bl	800790c <USBD_Get_USB_Status>
 8007712:	4603      	mov	r3, r0
 8007714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007716:	7bbb      	ldrb	r3, [r7, #14]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800773a:	78fa      	ldrb	r2, [r7, #3]
 800773c:	4611      	mov	r1, r2
 800773e:	4618      	mov	r0, r3
 8007740:	f7fa fc21 	bl	8001f86 <HAL_PCD_EP_SetStall>
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	4618      	mov	r0, r3
 800774c:	f000 f8de 	bl	800790c <USBD_Get_USB_Status>
 8007750:	4603      	mov	r3, r0
 8007752:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007754:	7bbb      	ldrb	r3, [r7, #14]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007778:	78fa      	ldrb	r2, [r7, #3]
 800777a:	4611      	mov	r1, r2
 800777c:	4618      	mov	r0, r3
 800777e:	f7fa fc66 	bl	800204e <HAL_PCD_EP_ClrStall>
 8007782:	4603      	mov	r3, r0
 8007784:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	4618      	mov	r0, r3
 800778a:	f000 f8bf 	bl	800790c <USBD_Get_USB_Status>
 800778e:	4603      	mov	r3, r0
 8007790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007792:	7bbb      	ldrb	r3, [r7, #14]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80077b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	da0b      	bge.n	80077d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077be:	68f9      	ldr	r1, [r7, #12]
 80077c0:	4613      	mov	r3, r2
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	4413      	add	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	440b      	add	r3, r1
 80077ca:	333e      	adds	r3, #62	; 0x3e
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	e00b      	b.n	80077e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077d6:	68f9      	ldr	r1, [r7, #12]
 80077d8:	4613      	mov	r3, r2
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	4413      	add	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	440b      	add	r3, r1
 80077e2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80077e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800780e:	78fa      	ldrb	r2, [r7, #3]
 8007810:	4611      	mov	r1, r2
 8007812:	4618      	mov	r0, r3
 8007814:	f7fa fa33 	bl	8001c7e <HAL_PCD_SetAddress>
 8007818:	4603      	mov	r3, r0
 800781a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	4618      	mov	r0, r3
 8007820:	f000 f874 	bl	800790c <USBD_Get_USB_Status>
 8007824:	4603      	mov	r3, r0
 8007826:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007828:	7bbb      	ldrb	r3, [r7, #14]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b086      	sub	sp, #24
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	607a      	str	r2, [r7, #4]
 800783c:	603b      	str	r3, [r7, #0]
 800783e:	460b      	mov	r3, r1
 8007840:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007850:	7af9      	ldrb	r1, [r7, #11]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	f7fa fb4c 	bl	8001ef2 <HAL_PCD_EP_Transmit>
 800785a:	4603      	mov	r3, r0
 800785c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800785e:	7dfb      	ldrb	r3, [r7, #23]
 8007860:	4618      	mov	r0, r3
 8007862:	f000 f853 	bl	800790c <USBD_Get_USB_Status>
 8007866:	4603      	mov	r3, r0
 8007868:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800786a:	7dbb      	ldrb	r3, [r7, #22]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	607a      	str	r2, [r7, #4]
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	460b      	mov	r3, r1
 8007882:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007888:	2300      	movs	r3, #0
 800788a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007892:	7af9      	ldrb	r1, [r7, #11]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	f7fa fac8 	bl	8001e2c <HAL_PCD_EP_Receive>
 800789c:	4603      	mov	r3, r0
 800789e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078a0:	7dfb      	ldrb	r3, [r7, #23]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 f832 	bl	800790c <USBD_Get_USB_Status>
 80078a8:	4603      	mov	r3, r0
 80078aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80078ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b082      	sub	sp, #8
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	460b      	mov	r3, r1
 80078c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078c8:	78fa      	ldrb	r2, [r7, #3]
 80078ca:	4611      	mov	r1, r2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fa faf8 	bl	8001ec2 <HAL_PCD_EP_GetRxCount>
 80078d2:	4603      	mov	r3, r0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80078e4:	4b03      	ldr	r3, [pc, #12]	; (80078f4 <USBD_static_malloc+0x18>)
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	20001b60 	.word	0x20001b60

080078f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]

}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	4603      	mov	r3, r0
 8007914:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800791a:	79fb      	ldrb	r3, [r7, #7]
 800791c:	2b03      	cmp	r3, #3
 800791e:	d817      	bhi.n	8007950 <USBD_Get_USB_Status+0x44>
 8007920:	a201      	add	r2, pc, #4	; (adr r2, 8007928 <USBD_Get_USB_Status+0x1c>)
 8007922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007926:	bf00      	nop
 8007928:	08007939 	.word	0x08007939
 800792c:	0800793f 	.word	0x0800793f
 8007930:	08007945 	.word	0x08007945
 8007934:	0800794b 	.word	0x0800794b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	73fb      	strb	r3, [r7, #15]
    break;
 800793c:	e00b      	b.n	8007956 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800793e:	2303      	movs	r3, #3
 8007940:	73fb      	strb	r3, [r7, #15]
    break;
 8007942:	e008      	b.n	8007956 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007944:	2301      	movs	r3, #1
 8007946:	73fb      	strb	r3, [r7, #15]
    break;
 8007948:	e005      	b.n	8007956 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800794a:	2303      	movs	r3, #3
 800794c:	73fb      	strb	r3, [r7, #15]
    break;
 800794e:	e002      	b.n	8007956 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007950:	2303      	movs	r3, #3
 8007952:	73fb      	strb	r3, [r7, #15]
    break;
 8007954:	bf00      	nop
  }
  return usb_status;
 8007956:	7bfb      	ldrb	r3, [r7, #15]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <__libc_init_array>:
 8007964:	b570      	push	{r4, r5, r6, lr}
 8007966:	4d0d      	ldr	r5, [pc, #52]	; (800799c <__libc_init_array+0x38>)
 8007968:	4c0d      	ldr	r4, [pc, #52]	; (80079a0 <__libc_init_array+0x3c>)
 800796a:	1b64      	subs	r4, r4, r5
 800796c:	10a4      	asrs	r4, r4, #2
 800796e:	2600      	movs	r6, #0
 8007970:	42a6      	cmp	r6, r4
 8007972:	d109      	bne.n	8007988 <__libc_init_array+0x24>
 8007974:	4d0b      	ldr	r5, [pc, #44]	; (80079a4 <__libc_init_array+0x40>)
 8007976:	4c0c      	ldr	r4, [pc, #48]	; (80079a8 <__libc_init_array+0x44>)
 8007978:	f000 f820 	bl	80079bc <_init>
 800797c:	1b64      	subs	r4, r4, r5
 800797e:	10a4      	asrs	r4, r4, #2
 8007980:	2600      	movs	r6, #0
 8007982:	42a6      	cmp	r6, r4
 8007984:	d105      	bne.n	8007992 <__libc_init_array+0x2e>
 8007986:	bd70      	pop	{r4, r5, r6, pc}
 8007988:	f855 3b04 	ldr.w	r3, [r5], #4
 800798c:	4798      	blx	r3
 800798e:	3601      	adds	r6, #1
 8007990:	e7ee      	b.n	8007970 <__libc_init_array+0xc>
 8007992:	f855 3b04 	ldr.w	r3, [r5], #4
 8007996:	4798      	blx	r3
 8007998:	3601      	adds	r6, #1
 800799a:	e7f2      	b.n	8007982 <__libc_init_array+0x1e>
 800799c:	08007a34 	.word	0x08007a34
 80079a0:	08007a34 	.word	0x08007a34
 80079a4:	08007a34 	.word	0x08007a34
 80079a8:	08007a38 	.word	0x08007a38

080079ac <memset>:
 80079ac:	4402      	add	r2, r0
 80079ae:	4603      	mov	r3, r0
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d100      	bne.n	80079b6 <memset+0xa>
 80079b4:	4770      	bx	lr
 80079b6:	f803 1b01 	strb.w	r1, [r3], #1
 80079ba:	e7f9      	b.n	80079b0 <memset+0x4>

080079bc <_init>:
 80079bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079be:	bf00      	nop
 80079c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c2:	bc08      	pop	{r3}
 80079c4:	469e      	mov	lr, r3
 80079c6:	4770      	bx	lr

080079c8 <_fini>:
 80079c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ca:	bf00      	nop
 80079cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ce:	bc08      	pop	{r3}
 80079d0:	469e      	mov	lr, r3
 80079d2:	4770      	bx	lr
