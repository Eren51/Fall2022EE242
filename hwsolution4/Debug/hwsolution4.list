
hwsolution4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d020  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003294  0801d1b0  0801d1b0  0002d1b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020444  08020444  00040420  2**0
                  CONTENTS
  4 .ARM          00000008  08020444  08020444  00030444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802044c  0802044c  00040420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802044c  0802044c  0003044c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08020454  08020454  00030454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000420  20000000  0802045c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040420  2**0
                  CONTENTS
 10 .bss          000022b4  20000420  20000420  00040420  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200026d4  200026d4  00040420  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040420  2**0
                  CONTENTS, READONLY
 13 .debug_info   0010e7a3  00000000  00000000  00040450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000118de  00000000  00000000  0014ebf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000053b0  00000000  00000000  001604d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000051b8  00000000  00000000  00165888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000332a7  00000000  00000000  0016aa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00054a53  00000000  00000000  0019dce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00188ecb  00000000  00000000  001f273a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0037b605  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000195d4  00000000  00000000  0037b658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000420 	.word	0x20000420
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d198 	.word	0x0801d198

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000424 	.word	0x20000424
 80001cc:	0801d198 	.word	0x0801d198

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cba:	f000 b9f5 	b.w	80010a8 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f883 	bl	8000dd8 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f876 	bl	8000dd8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f865 	bl	8000dd8 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f857 	bl	8000dd8 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b9aa 	b.w	80010a8 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f83c 	bl	8000dd8 <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_d2lz>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2300      	movs	r3, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	460d      	mov	r5, r1
 8000d76:	f7ff febb 	bl	8000af0 <__aeabi_dcmplt>
 8000d7a:	b928      	cbnz	r0, 8000d88 <__aeabi_d2lz+0x1c>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	4629      	mov	r1, r5
 8000d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d84:	f000 b80a 	b.w	8000d9c <__aeabi_d2ulz>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8e:	f000 f805 	bl	8000d9c <__aeabi_d2ulz>
 8000d92:	4240      	negs	r0, r0
 8000d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d98:	bd38      	pop	{r3, r4, r5, pc}
 8000d9a:	bf00      	nop

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fc31 	bl	800060c <__aeabi_dmul>
 8000daa:	f7ff ff07 	bl	8000bbc <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fbb2 	bl	8000518 <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fc28 	bl	800060c <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa6a 	bl	800029c <__aeabi_dsub>
 8000dc8:	f7ff fef8 	bl	8000bbc <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <_Z15LIS3DSH_WriteIOhPhh>:
static float __Z_Scale = 1.0f;
//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 80010c0:	2200      	movs	r2, #0
 80010c2:	2108      	movs	r1, #8
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010c6:	f003 f91b 	bl	8004300 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 80010ca:	f107 010f 	add.w	r1, r7, #15
 80010ce:	230a      	movs	r3, #10
 80010d0:	2201      	movs	r2, #1
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010d4:	f005 f8a3 	bl	800621e <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	230a      	movs	r3, #10
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010e2:	f005 f89c 	bl	800621e <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010ec:	f003 f908 	bl	8004300 <HAL_GPIO_WritePin>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	2000043c 	.word	0x2000043c

08001100 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>:
		dataR[i] = spiBuf[i];
	}
}
//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 800110e:	2258      	movs	r2, #88	; 0x58
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	4855      	ldr	r0, [pc, #340]	; (8001268 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x168>)
 8001114:	f019 f90c 	bl	801a330 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	78db      	ldrb	r3, [r3, #3]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	b2da      	uxtb	r2, r3
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	4313      	orrs	r3, r2
 8001126:	b2db      	uxtb	r3, r3
 8001128:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	f023 030f 	bic.w	r3, r3, #15
 8001132:	b2da      	uxtb	r2, r3
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	4313      	orrs	r3, r2
 8001138:	b2db      	uxtb	r3, r3
 800113a:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 800113c:	f107 030f 	add.w	r3, r7, #15
 8001140:	2201      	movs	r2, #1
 8001142:	4619      	mov	r1, r3
 8001144:	2020      	movs	r0, #32
 8001146:	f7ff ffb1 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	789b      	ldrb	r3, [r3, #2]
 8001152:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001156:	b2da      	uxtb	r2, r3
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	4313      	orrs	r3, r2
 800115c:	b2db      	uxtb	r3, r3
 800115e:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	785b      	ldrb	r3, [r3, #1]
 8001164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001168:	b2da      	uxtb	r2, r3
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	4313      	orrs	r3, r2
 800116e:	b2db      	uxtb	r3, r3
 8001170:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8001172:	f107 030f 	add.w	r3, r7, #15
 8001176:	2201      	movs	r2, #1
 8001178:	4619      	mov	r1, r3
 800117a:	2024      	movs	r0, #36	; 0x24
 800117c:	f7ff ff96 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	791b      	ldrb	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d008      	beq.n	800119a <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x9a>
	{
		spiData = 0x88;
 8001188:	2388      	movs	r3, #136	; 0x88
 800118a:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 800118c:	f107 030f 	add.w	r3, r7, #15
 8001190:	2201      	movs	r2, #1
 8001192:	4619      	mov	r1, r3
 8001194:	2023      	movs	r0, #35	; 0x23
 8001196:	f7ff ff89 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	785b      	ldrb	r3, [r3, #1]
 800119e:	2b20      	cmp	r3, #32
 80011a0:	d858      	bhi.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0xa8>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	0800122d 	.word	0x0800122d
 80011ac:	08001255 	.word	0x08001255
 80011b0:	08001255 	.word	0x08001255
 80011b4:	08001255 	.word	0x08001255
 80011b8:	08001255 	.word	0x08001255
 80011bc:	08001255 	.word	0x08001255
 80011c0:	08001255 	.word	0x08001255
 80011c4:	08001255 	.word	0x08001255
 80011c8:	08001235 	.word	0x08001235
 80011cc:	08001255 	.word	0x08001255
 80011d0:	08001255 	.word	0x08001255
 80011d4:	08001255 	.word	0x08001255
 80011d8:	08001255 	.word	0x08001255
 80011dc:	08001255 	.word	0x08001255
 80011e0:	08001255 	.word	0x08001255
 80011e4:	08001255 	.word	0x08001255
 80011e8:	0800123d 	.word	0x0800123d
 80011ec:	08001255 	.word	0x08001255
 80011f0:	08001255 	.word	0x08001255
 80011f4:	08001255 	.word	0x08001255
 80011f8:	08001255 	.word	0x08001255
 80011fc:	08001255 	.word	0x08001255
 8001200:	08001255 	.word	0x08001255
 8001204:	08001255 	.word	0x08001255
 8001208:	08001245 	.word	0x08001245
 800120c:	08001255 	.word	0x08001255
 8001210:	08001255 	.word	0x08001255
 8001214:	08001255 	.word	0x08001255
 8001218:	08001255 	.word	0x08001255
 800121c:	08001255 	.word	0x08001255
 8001220:	08001255 	.word	0x08001255
 8001224:	08001255 	.word	0x08001255
 8001228:	0800124d 	.word	0x0800124d
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 800122e:	4a10      	ldr	r2, [pc, #64]	; (8001270 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x170>)
 8001230:	601a      	str	r2, [r3, #0]
			break;
 8001232:	e00f      	b.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 8001236:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x174>)
 8001238:	601a      	str	r2, [r3, #0]
			break;
 800123a:	e00b      	b.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x178>)
 8001240:	601a      	str	r2, [r3, #0]
			break;
 8001242:	e007      	b.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 8001246:	4a0d      	ldr	r2, [pc, #52]	; (800127c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x17c>)
 8001248:	601a      	str	r2, [r3, #0]
			break;
 800124a:	e003      	b.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 800124e:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x180>)
 8001250:	601a      	str	r2, [r3, #0]
			break;
 8001252:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 8001254:	2201      	movs	r2, #1
 8001256:	2108      	movs	r1, #8
 8001258:	480a      	ldr	r0, [pc, #40]	; (8001284 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x184>)
 800125a:	f003 f851 	bl	8004300 <HAL_GPIO_WritePin>
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000043c 	.word	0x2000043c
 800126c:	20000000 	.word	0x20000000
 8001270:	3d75c28f 	.word	0x3d75c28f
 8001274:	3df5c28f 	.word	0x3df5c28f
 8001278:	3e3851ec 	.word	0x3e3851ec
 800127c:	3e75c28f 	.word	0x3e75c28f
 8001280:	3f3ae148 	.word	0x3f3ae148
 8001284:	40021000 	.word	0x40021000

08001288 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001292:	ed97 0a01 	vldr	s0, [r7, #4]
 8001296:	f017 fe51 	bl	8018f3c <expf>
 800129a:	eef0 7a40 	vmov.f32	s15, s0
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80012b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80012b6:	f017 fea5 	bl	8019004 <sqrtf>
 80012ba:	eef0 7a40 	vmov.f32	s15, s0
 80012be:	eeb0 0a67 	vmov.f32	s0, s15
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80012d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80012d6:	f017 fd9d 	bl	8018e14 <roundf>
 80012da:	eef0 7a40 	vmov.f32	s15, s0
 80012de:	eeb0 0a67 	vmov.f32	s0, s15
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>:
 * @param input Array of input values
 * @param scale Array of scale values (obtain from StandardScaler in Python)
 * @param mean Array of mean values (obtain from StandardScaler in Python)
 * @param input_size Size of input, scale and mean arrays
 */
void standard_scaler(float *input, const float *scale, const float *mean, size_t input_size) {
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	603b      	str	r3, [r7, #0]
    for (size_t ix = 0; ix < input_size; ix++) {
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d21f      	bcs.n	8001342 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x5a>
        input[ix] = (input[ix] - mean[ix]) / scale[ix];
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	4413      	add	r3, r2
 800130a:	ed93 7a00 	vldr	s14, [r3]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	4413      	add	r3, r2
 8001326:	ed93 7a00 	vldr	s14, [r3]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001336:	edc3 7a00 	vstr	s15, [r3]
    for (size_t ix = 0; ix < input_size; ix++) {
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3301      	adds	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	e7db      	b.n	80012fa <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x12>
    }
}
 8001342:	bf00      	nop
 8001344:	371c      	adds	r7, #28
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>:
 * Calculate the distance between input vector and the cluster
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param cluster A cluster (number of centroids should match input_size)
 */
float calculate_cluster_distance(float *input, size_t input_size, const ei_classifier_anom_cluster_t *cluster) {
 800134e:	b5b0      	push	{r4, r5, r7, lr}
 8001350:	b086      	sub	sp, #24
 8001352:	af00      	add	r7, sp, #0
 8001354:	60f8      	str	r0, [r7, #12]
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
    // todo: check input_size and centroid size?

    float dist = 0.0f;
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	429a      	cmp	r2, r3
 800136a:	d229      	bcs.n	80013c0 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x72>
        dist += pow(input[ix] - cluster->centroid[ix], 2);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	ed93 7a00 	vldr	s14, [r3]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	edd3 7a00 	vldr	s15, [r3]
 8001384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001388:	2002      	movs	r0, #2
 800138a:	eeb0 0a67 	vmov.f32	s0, s15
 800138e:	f001 fc08 	bl	8002ba2 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001392:	ec55 4b10 	vmov	r4, r5, d0
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f7ff f8e0 	bl	800055c <__aeabi_f2d>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4620      	mov	r0, r4
 80013a2:	4629      	mov	r1, r5
 80013a4:	f7fe ff7c 	bl	80002a0 <__adddf3>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fc24 	bl	8000bfc <__aeabi_d2f>
 80013b4:	4603      	mov	r3, r0
 80013b6:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	3301      	adds	r3, #1
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	e7d1      	b.n	8001364 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x16>
    }
    return sqrt(dist) - cluster->max_error;
 80013c0:	ed97 0a05 	vldr	s0, [r7, #20]
 80013c4:	f7ff ff70 	bl	80012a8 <_ZSt4sqrtf>
 80013c8:	eeb0 7a40 	vmov.f32	s14, s0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80013d2:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80013d6:	eeb0 0a67 	vmov.f32	s0, s15
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bdb0      	pop	{r4, r5, r7, pc}

080013e0 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>:
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param clusters Array of clusters
 * @param cluster_size Size of cluster array
 */
float get_min_distance_to_cluster(float *input, size_t input_size, const ei_classifier_anom_cluster_t *clusters, size_t cluster_size) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	603b      	str	r3, [r7, #0]
    float min = 1000.0f;
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x68>)
 80013f0:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d21b      	bcs.n	8001436 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x56>
        float dist = calculate_cluster_distance(input, input_size, &clusters[ix]);
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	224c      	movs	r2, #76	; 0x4c
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	461a      	mov	r2, r3
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f7ff ff9d 	bl	800134e <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>
 8001414:	ed87 0a05 	vstr	s0, [r7, #20]
        if (dist < min) {
 8001418:	ed97 7a05 	vldr	s14, [r7, #20]
 800141c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001420:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	d501      	bpl.n	800142e <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x4e>
            min = dist;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	3301      	adds	r3, #1
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	e7df      	b.n	80013f6 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x16>
        }
    }
    return min;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	ee07 3a90 	vmov	s15, r3
}
 800143c:	eeb0 0a67 	vmov.f32	s0, s15
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	447a0000 	.word	0x447a0000

0800144c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	2203      	movs	r2, #3
 80014c6:	4798      	blx	r3
    }
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bf0c      	ite	eq
 80014e2:	2301      	moveq	r3, #1
 80014e4:	2300      	movne	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d006      	beq.n	8001516 <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	731a      	strb	r2, [r3, #12]
 8001514:	e00e      	b.n	8001534 <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	2101      	movs	r1, #1
 8001522:	4618      	mov	r0, r3
 8001524:	f00f fd14 	bl	8010f50 <_Z9ei_callocjj>
 8001528:	4602      	mov	r2, r0
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2201      	movs	r2, #1
 8001532:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d008      	beq.n	800156c <_ZN2ei9ei_matrixD1Ev+0x22>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7b1b      	ldrb	r3, [r3, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d004      	beq.n	800156c <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f00f fd00 	bl	8010f6c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d006      	beq.n	8001598 <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	731a      	strb	r2, [r3, #12]
 8001596:	e00d      	b.n	80015b4 <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	fb02 f303 	mul.w	r3, r2, r3
 80015a0:	2101      	movs	r1, #1
 80015a2:	4618      	mov	r0, r3
 80015a4:	f00f fcd4 	bl	8010f50 <_Z9ei_callocjj>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2201      	movs	r2, #1
 80015b2:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d008      	beq.n	80015ec <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7b1b      	ldrb	r3, [r3, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d004      	beq.n	80015ec <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f00f fcc0 	bl	8010f6c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	e7fe      	b.n	80015fa <_ZSt25__throw_bad_function_callv+0x4>

080015fc <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	1e5a      	subs	r2, r3, #1
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 8001618:	4a17      	ldr	r2, [pc, #92]	; (8001678 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 800161a:	213c      	movs	r1, #60	; 0x3c
 800161c:	4817      	ldr	r0, [pc, #92]	; (800167c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 800161e:	f018 fe11 	bl	801a244 <__assert_func>

	if(align && size)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01f      	beq.n	8001668 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d01c      	beq.n	8001668 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3301      	adds	r3, #1
 8001632:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	4413      	add	r3, r2
 800163a:	2101      	movs	r1, #1
 800163c:	4618      	mov	r0, r3
 800163e:	f00f fc87 	bl	8010f50 <_Z9ei_callocjj>
 8001642:	60f8      	str	r0, [r7, #12]

		if(p)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00e      	beq.n	8001668 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	425b      	negs	r3, r3
 8001656:	4013      	ands	r3, r2
 8001658:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	1ad2      	subs	r2, r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	3b02      	subs	r3, #2
 8001664:	b292      	uxth	r2, r2
 8001666:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 8001668:	697b      	ldr	r3, [r7, #20]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	0801d1dc 	.word	0x0801d1dc
 8001678:	0801d1f8 	.word	0x0801d1f8
 800167c:	0801d230 	.word	0x0801d230

08001680 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	assert(ptr);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d105      	bne.n	800169a <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8001690:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8001692:	215f      	movs	r1, #95	; 0x5f
 8001694:	480b      	ldr	r0, [pc, #44]	; (80016c4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 8001696:	f018 fdd5 	bl	801a244 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 80016a0:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 80016a2:	89fb      	ldrh	r3, [r7, #14]
 80016a4:	425b      	negs	r3, r3
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 80016ac:	68b8      	ldr	r0, [r7, #8]
 80016ae:	f00f fc5d 	bl	8010f6c <_Z7ei_freePv>
}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	0801d2b8 	.word	0x0801d2b8
 80016c0:	0801d2bc 	.word	0x0801d2bc
 80016c4:	0801d230 	.word	0x0801d230

080016c8 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 80016d4:	edd7 7a00 	vldr	s15, [r7]
 80016d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016dc:	eef4 7a47 	vcmp.f32	s15, s14
 80016e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e4:	d101      	bne.n	80016ea <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 80016e6:	2300      	movs	r3, #0
 80016e8:	e033      	b.n	8001752 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f2:	d204      	bcs.n	80016fe <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fc:	d301      	bcc.n	8001702 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001700:	e027      	b.n	8001752 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	b29b      	uxth	r3, r3
 8001708:	82bb      	strh	r3, [r7, #20]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	b29b      	uxth	r3, r3
 8001710:	82fb      	strh	r3, [r7, #22]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	b29b      	uxth	r3, r3
 800171e:	81bb      	strh	r3, [r7, #12]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	b29b      	uxth	r3, r3
 8001726:	81fb      	strh	r3, [r7, #14]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 800172e:	f107 020c 	add.w	r2, r7, #12
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4611      	mov	r1, r2
 8001738:	ed97 0a00 	vldr	s0, [r7]
 800173c:	4618      	mov	r0, r3
 800173e:	f008 fb8b 	bl	8009e58 <arm_mat_scale_f32>
 8001742:	4603      	mov	r3, r0
 8001744:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	e000      	b.n	8001752 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 8001750:	2300      	movs	r3, #0
    }
 8001752:	4618      	mov	r0, r3
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	fffffc0c 	.word	0xfffffc0c

08001760 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fe9e 	bl	80014ac <_ZNSt14_Function_baseD1Ev>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4618      	mov	r0, r3
 8001786:	f001 fa5b 	bl	8002c40 <_ZNSt8functionIFijjPfEEC1Ev>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <_ZN2ei11ei_signal_tD1Ev>:
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ffde 	bl	8001760 <_ZNSt8functionIFijjPfEED1Ev>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
    return EIDSP_OK;
}



__attribute__((unused)) int extract_raw_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b08f      	sub	sp, #60	; 0x3c
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_raw_t config = *((ei_dsp_config_raw_t*)config_ptr);
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80017c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80017d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d8:	461a      	mov	r2, r3
 80017da:	f107 0014 	add.w	r0, r7, #20
 80017de:	2300      	movs	r3, #0
 80017e0:	f7ff fe88 	bl	80014f4 <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80017ea:	4c1f      	ldr	r4, [pc, #124]	; (8001868 <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb8>)
 80017ec:	e031      	b.n	8001852 <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xa2>
    }
    signal->get_data(0, signal->total_length, input_matrix.buffer);
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	691a      	ldr	r2, [r3, #16]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2100      	movs	r1, #0
 80017f8:	f001 f9f4 	bl	8002be4 <_ZNKSt8functionIFijjPfEEclEjjS0_>

    // scale the signal
    int ret = numpy::scale(&input_matrix, config.scale_axes);
 80017fc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	eeb0 0a67 	vmov.f32	s0, s15
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff5d 	bl	80016c8 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 800180e:	6338      	str	r0, [r7, #48]	; 0x30
    if (ret != EIDSP_OK) {
 8001810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
        EIDSP_ERR(ret);
 8001816:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001818:	e01b      	b.n	8001852 <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xa2>

    // Because of rounding errors during re-sampling the output size of the block might be
    // smaller than the input of the block. Make sure we don't write outside of the bounds
    // of the array:
    // https://forum.edgeimpulse.com/t/using-custom-sensors-on-raspberry-pi-4/3506/7
    size_t els_to_copy = signal->total_length;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	637b      	str	r3, [r7, #52]	; 0x34
    if (els_to_copy > output_matrix->rows * output_matrix->cols) {
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	6892      	ldr	r2, [r2, #8]
 8001828:	fb02 f303 	mul.w	r3, r2, r3
 800182c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800182e:	429a      	cmp	r2, r3
 8001830:	d906      	bls.n	8001840 <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
        els_to_copy = output_matrix->rows * output_matrix->cols;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	6892      	ldr	r2, [r2, #8]
 800183a:	fb02 f303 	mul.w	r3, r2, r3
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
    }

    memcpy(output_matrix->buffer, input_matrix.buffer, els_to_copy * sizeof(float));
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	6979      	ldr	r1, [r7, #20]
 8001846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	461a      	mov	r2, r3
 800184c:	f018 fd70 	bl	801a330 <memcpy>

    return EIDSP_OK;
 8001850:	2400      	movs	r4, #0
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fe77 	bl	800154a <_ZN2ei9ei_matrixD1Ev>
}
 800185c:	4623      	mov	r3, r4
 800185e:	4618      	mov	r0, r3
 8001860:	373c      	adds	r7, #60	; 0x3c
 8001862:	46bd      	mov	sp, r7
 8001864:	bd90      	pop	{r4, r7, pc}
 8001866:	bf00      	nop
 8001868:	fffffc16 	.word	0xfffffc16
 800186c:	00000000 	.word	0x00000000

08001870 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf>:
    return EIDSP_OK;
}

#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 8001870:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001874:	b09e      	sub	sp, #120	; 0x78
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001888:	ca07      	ldmia	r2, {r0, r1, r2}
 800188a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 800188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001890:	49c3      	ldr	r1, [pc, #780]	; (8001ba0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x330>)
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fcec 	bl	8000270 <strcmp>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x32>
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x34>
 80018a2:	2303      	movs	r3, #3
 80018a4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	6892      	ldr	r2, [r2, #8]
 80018b0:	fb02 f303 	mul.w	r3, r2, r3
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00f      	beq.n	80018d8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x68>
        ei_printf("out_matrix = %d items\n", static_cast<int>(output_matrix->rows * output_matrix->cols));
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	6892      	ldr	r2, [r2, #8]
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	4619      	mov	r1, r3
 80018c6:	48b7      	ldr	r0, [pc, #732]	; (8001ba4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x334>)
 80018c8:	f000 ff87 	bl	80027da <_Z9ei_printfPKcz>
        ei_printf("calculated size = %d items\n", static_cast<int>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
 80018cc:	2100      	movs	r1, #0
 80018ce:	48b6      	ldr	r0, [pc, #728]	; (8001ba8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x338>)
 80018d0:	f000 ff83 	bl	80027da <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80018d4:	4cb5      	ldr	r4, [pc, #724]	; (8001bac <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x33c>)
 80018d6:	e189      	b.n	8001bec <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x37c>
    }

    size_t output_ix = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	673b      	str	r3, [r7, #112]	; 0x70

    const int32_t iRedToGray = (int32_t)(0.299f * 65536.0f);
 80018dc:	f644 438b 	movw	r3, #19595	; 0x4c8b
 80018e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    const int32_t iGreenToGray = (int32_t)(0.587f * 65536.0f);
 80018e2:	f249 6345 	movw	r3, #38469	; 0x9645
 80018e6:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t iBlueToGray = (int32_t)(0.114f * 65536.0f);
 80018e8:	f641 532f 	movw	r3, #7471	; 0x1d2f
 80018ec:	667b      	str	r3, [r7, #100]	; 0x64

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 80018ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f2:	663b      	str	r3, [r7, #96]	; 0x60
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80018fa:	2300      	movs	r3, #0
 80018fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001904:	429a      	cmp	r2, r3
 8001906:	f080 8170 	bcs.w	8001bea <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x37a>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001910:	d803      	bhi.n	800191a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xaa>
 8001912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	e001      	b.n	800191e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xae>
 800191a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800191e:	65bb      	str	r3, [r7, #88]	; 0x58

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8001920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001922:	461a      	mov	r2, r3
 8001924:	f107 0014 	add.w	r0, r7, #20
 8001928:	2300      	movs	r3, #0
 800192a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800192c:	f7ff fde2 	bl	80014f4 <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xcc>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001936:	4c9e      	ldr	r4, [pc, #632]	; (8001bb0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x340>)
 8001938:	2500      	movs	r5, #0
 800193a:	e14a      	b.n	8001bd2 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x362>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001942:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001944:	f001 f94e 	bl	8002be4 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8001948:	2300      	movs	r3, #0
 800194a:	657b      	str	r3, [r7, #84]	; 0x54
 800194c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800194e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001950:	429a      	cmp	r2, r3
 8001952:	f080 8139 	bcs.w	8001bc8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x358>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	edd3 7a00 	vldr	s15, [r3]
 8001962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001966:	ee17 3a90 	vmov	r3, s15
 800196a:	653b      	str	r3, [r7, #80]	; 0x50

            if (channel_count == 3) {
 800196c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8001970:	2b03      	cmp	r3, #3
 8001972:	f040 80a5 	bne.w	8001ac0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x250>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8001976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001978:	0c1b      	lsrs	r3, r3, #16
 800197a:	b2db      	uxtb	r3, r3
 800197c:	ee07 3a90 	vmov	s15, r3
 8001980:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001984:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8001bb4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8001988:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800198c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8001990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001992:	0a1b      	lsrs	r3, r3, #8
 8001994:	b2db      	uxtb	r3, r3
 8001996:	ee07 3a90 	vmov	s15, r3
 800199a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800199e:	eddf 6a85 	vldr	s13, [pc, #532]	; 8001bb4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 80019a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 80019aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019b6:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8001bb4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 80019ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019be:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 80019c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80019c4:	f7fe fdca 	bl	800055c <__aeabi_f2d>
 80019c8:	a373      	add	r3, pc, #460	; (adr r3, 8001b98 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 80019ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ce:	f7fe ff47 	bl	8000860 <__aeabi_ddiv>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	ec43 2b17 	vmov	d7, r2, r3
 80019da:	eeb0 0a47 	vmov.f32	s0, s14
 80019de:	eef0 0a67 	vmov.f32	s1, s15
 80019e2:	f017 f9d1 	bl	8018d88 <round>
 80019e6:	ec51 0b10 	vmov	r0, r1, d0
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	4b72      	ldr	r3, [pc, #456]	; (8001bb8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 80019f0:	f7fe fc54 	bl	800029c <__aeabi_dsub>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4690      	mov	r8, r2
 80019fa:	4699      	mov	r9, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a02:	1c59      	adds	r1, r3, #1
 8001a04:	6739      	str	r1, [r7, #112]	; 0x70
 8001a06:	18d5      	adds	r5, r2, r3
 8001a08:	4640      	mov	r0, r8
 8001a0a:	4649      	mov	r1, r9
 8001a0c:	f7ff f8ae 	bl	8000b6c <__aeabi_d2iz>
 8001a10:	4603      	mov	r3, r0
 8001a12:	b25b      	sxtb	r3, r3
 8001a14:	702b      	strb	r3, [r5, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8001a16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001a18:	f7fe fda0 	bl	800055c <__aeabi_f2d>
 8001a1c:	a35e      	add	r3, pc, #376	; (adr r3, 8001b98 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe ff1d 	bl	8000860 <__aeabi_ddiv>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	ec43 2b17 	vmov	d7, r2, r3
 8001a2e:	eeb0 0a47 	vmov.f32	s0, s14
 8001a32:	eef0 0a67 	vmov.f32	s1, s15
 8001a36:	f017 f9a7 	bl	8018d88 <round>
 8001a3a:	ec51 0b10 	vmov	r0, r1, d0
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	4b5d      	ldr	r3, [pc, #372]	; (8001bb8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 8001a44:	f7fe fc2a 	bl	800029c <__aeabi_dsub>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4690      	mov	r8, r2
 8001a4e:	4699      	mov	r9, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a56:	1c59      	adds	r1, r3, #1
 8001a58:	6739      	str	r1, [r7, #112]	; 0x70
 8001a5a:	18d5      	adds	r5, r2, r3
 8001a5c:	4640      	mov	r0, r8
 8001a5e:	4649      	mov	r1, r9
 8001a60:	f7ff f884 	bl	8000b6c <__aeabi_d2iz>
 8001a64:	4603      	mov	r3, r0
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	702b      	strb	r3, [r5, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8001a6a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a6c:	f7fe fd76 	bl	800055c <__aeabi_f2d>
 8001a70:	a349      	add	r3, pc, #292	; (adr r3, 8001b98 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 8001a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a76:	f7fe fef3 	bl	8000860 <__aeabi_ddiv>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	ec43 2b17 	vmov	d7, r2, r3
 8001a82:	eeb0 0a47 	vmov.f32	s0, s14
 8001a86:	eef0 0a67 	vmov.f32	s1, s15
 8001a8a:	f017 f97d 	bl	8018d88 <round>
 8001a8e:	ec51 0b10 	vmov	r0, r1, d0
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	4b48      	ldr	r3, [pc, #288]	; (8001bb8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 8001a98:	f7fe fc00 	bl	800029c <__aeabi_dsub>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4690      	mov	r8, r2
 8001aa2:	4699      	mov	r9, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001aaa:	1c59      	adds	r1, r3, #1
 8001aac:	6739      	str	r1, [r7, #112]	; 0x70
 8001aae:	18d5      	adds	r5, r2, r3
 8001ab0:	4640      	mov	r0, r8
 8001ab2:	4649      	mov	r1, r9
 8001ab4:	f7ff f85a 	bl	8000b6c <__aeabi_d2iz>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	702b      	strb	r3, [r5, #0]
 8001abe:	e067      	b.n	8001b90 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x320>
                    else if (gray > 127) gray = 127;
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8001ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ac2:	0c1b      	lsrs	r3, r3, #16
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ace:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001bb4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8001ad2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8001ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001adc:	0a1b      	lsrs	r3, r3, #8
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ae8:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001bb4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8001aec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8001af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	ee07 3a90 	vmov	s15, r3
 8001afc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b00:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001bb4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8001b04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b08:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8001b0c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001b10:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001bbc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x34c>
 8001b14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b18:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b1c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001bc0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x350>
 8001b20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b28:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b2c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001bc4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x354>
 8001b30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8001b3c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001b3e:	f7fe fd0d 	bl	800055c <__aeabi_f2d>
 8001b42:	a315      	add	r3, pc, #84	; (adr r3, 8001b98 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	f7fe fe8a 	bl	8000860 <__aeabi_ddiv>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	ec43 2b17 	vmov	d7, r2, r3
 8001b54:	eeb0 0a47 	vmov.f32	s0, s14
 8001b58:	eef0 0a67 	vmov.f32	s1, s15
 8001b5c:	f017 f914 	bl	8018d88 <round>
 8001b60:	ec51 0b10 	vmov	r0, r1, d0
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 8001b6a:	f7fe fb97 	bl	800029c <__aeabi_dsub>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4690      	mov	r8, r2
 8001b74:	4699      	mov	r9, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b7c:	1c59      	adds	r1, r3, #1
 8001b7e:	6739      	str	r1, [r7, #112]	; 0x70
 8001b80:	18d5      	adds	r5, r2, r3
 8001b82:	4640      	mov	r0, r8
 8001b84:	4649      	mov	r1, r9
 8001b86:	f7fe fff1 	bl	8000b6c <__aeabi_d2iz>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	b25b      	sxtb	r3, r3
 8001b8e:	702b      	strb	r3, [r5, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8001b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b92:	3301      	adds	r3, #1
 8001b94:	657b      	str	r3, [r7, #84]	; 0x54
 8001b96:	e6d9      	b.n	800194c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xdc>
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	40182424 	.word	0x40182424
 8001ba0:	0801d584 	.word	0x0801d584
 8001ba4:	0801d590 	.word	0x0801d590
 8001ba8:	0801d5a8 	.word	0x0801d5a8
 8001bac:	fffffc14 	.word	0xfffffc14
 8001bb0:	fffffc16 	.word	0xfffffc16
 8001bb4:	437f0000 	.word	0x437f0000
 8001bb8:	405c8000 	.word	0x405c8000
 8001bbc:	3e991687 	.word	0x3e991687
 8001bc0:	3f1645a2 	.word	0x3f1645a2
 8001bc4:	3de978d5 	.word	0x3de978d5
                }
            }
        }

        bytes_left -= elements_to_read;
 8001bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd0:	2501      	movs	r5, #1
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fcb7 	bl	800154a <_ZN2ei9ei_matrixD1Ev>
 8001bdc:	2d01      	cmp	r5, #1
 8001bde:	d105      	bne.n	8001bec <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x37c>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8001be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001be6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001be8:	e689      	b.n	80018fe <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x8e>
    }

    return EIDSP_OK;
 8001bea:	2400      	movs	r4, #0
}
 8001bec:	4623      	mov	r3, r4
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3778      	adds	r7, #120	; 0x78
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001bf8 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhj>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count):
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	330c      	adds	r3, #12
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fdac 	bl	800177a <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	68b9      	ldr	r1, [r7, #8]
 8001c44:	f000 f832 	bl	8001cac <_ZN14SignalWithAxes8get_dataEjjPf>
 8001c48:	4603      	mov	r3, r0
        };
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d102      	bne.n	8001c6a <_ZN14SignalWithAxes10get_signalEv+0x16>
            return this->_original_signal;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	e019      	b.n	8001c9e <_ZN14SignalWithAxes10get_signalEv+0x4a>
        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	4a0d      	ldr	r2, [pc, #52]	; (8001ca8 <_ZN14SignalWithAxes10get_signalEv+0x54>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	085b      	lsrs	r3, r3, #1
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6892      	ldr	r2, [r2, #8]
 8001c7c:	fb03 f202 	mul.w	r2, r3, r2
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	61da      	str	r2, [r3, #28]
        };
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f103 020c 	add.w	r2, r3, #12
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	4619      	mov	r1, r3
 8001c94:	4610      	mov	r0, r2
 8001c96:	f001 f800 	bl	8002c9a <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	330c      	adds	r3, #12
    }
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	aaaaaaab 	.word	0xaaaaaaab

08001cac <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	623b      	str	r3, [r7, #32]
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	4413      	add	r3, r2
 8001cec:	6a3a      	ldr	r2, [r7, #32]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d228      	bcs.n	8001d44 <_ZN14SignalWithAxes8get_dataEjjPf+0x98>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d21d      	bcs.n	8001d3c <_ZN14SignalWithAxes8get_dataEjjPf+0x90>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	18d1      	adds	r1, r2, r3
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	627a      	str	r2, [r7, #36]	; 0x24
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	4413      	add	r3, r2
 8001d22:	2201      	movs	r2, #1
 8001d24:	f000 ff5e 	bl	8002be4 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8001d28:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <_ZN14SignalWithAxes8get_dataEjjPf+0x88>
                    return r;
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	e008      	b.n	8001d46 <_ZN14SignalWithAxes8get_dataEjjPf+0x9a>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	3301      	adds	r3, #1
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	e7dc      	b.n	8001cf6 <_ZN14SignalWithAxes8get_dataEjjPf+0x4a>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	3303      	adds	r3, #3
 8001d40:	623b      	str	r3, [r7, #32]
 8001d42:	e7d0      	b.n	8001ce6 <_ZN14SignalWithAxes8get_dataEjjPf+0x3a>
                }
            }
        }

        return 0;
 8001d44:	2300      	movs	r3, #0
    }
 8001d46:	4618      	mov	r0, r3
 8001d48:	3728      	adds	r7, #40	; 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	330c      	adds	r3, #12
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fd1a 	bl	8001794 <_ZN2ei11ei_signal_tD1Ev>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb>:
#else

/**
 * Fill the result structure from a quantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_i8(ei_impulse_result_t *result, int8_t *data, float zero_point, float scale, bool debug) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6178      	str	r0, [r7, #20]
 8001d74:	6139      	str	r1, [r7, #16]
 8001d76:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d7a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d837      	bhi.n	8001dfc <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x90>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	4413      	add	r3, r2
 8001d92:	f993 3000 	ldrsb.w	r3, [r3]
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001da6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dae:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00e      	beq.n	8001dd6 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x6a>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 8001db8:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x98>)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4811      	ldr	r0, [pc, #68]	; (8001e08 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x9c>)
 8001dc4:	f000 fd09 	bl	80027da <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8001dc8:	ed97 0a06 	vldr	s0, [r7, #24]
 8001dcc:	f00e ffb0 	bl	8010d30 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8001dd0:	480e      	ldr	r0, [pc, #56]	; (8001e0c <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0xa0>)
 8001dd2:	f000 fd02 	bl	80027da <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 8001dd6:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x98>)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	69fa      	ldr	r2, [r7, #28]
 8001de2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4413      	add	r3, r2
 8001dee:	3304      	adds	r3, #4
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	3301      	adds	r3, #1
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e7c4      	b.n	8001d86 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x1a>
    }
}
 8001dfc:	bf00      	nop
 8001dfe:	3720      	adds	r7, #32
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000004 	.word	0x20000004
 8001e08:	0801d6b4 	.word	0x0801d6b4
 8001e0c:	0801d694 	.word	0x0801d694

08001e10 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb>:

/**
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_f32(ei_impulse_result_t *result, float *data, bool debug) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d82a      	bhi.n	8001e7e <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x6e>
        float value = data[ix];
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	4413      	add	r3, r2
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	613b      	str	r3, [r7, #16]

        if (debug) {
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00e      	beq.n	8001e58 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x48>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 8001e3a:	4a13      	ldr	r2, [pc, #76]	; (8001e88 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x78>)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e42:	4619      	mov	r1, r3
 8001e44:	4811      	ldr	r0, [pc, #68]	; (8001e8c <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x7c>)
 8001e46:	f000 fcc8 	bl	80027da <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8001e4a:	ed97 0a04 	vldr	s0, [r7, #16]
 8001e4e:	f00e ff6f 	bl	8010d30 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8001e52:	480f      	ldr	r0, [pc, #60]	; (8001e90 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x80>)
 8001e54:	f000 fcc1 	bl	80027da <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 8001e58:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x78>)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	3304      	adds	r3, #4
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	e7d1      	b.n	8001e22 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x12>
    }
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000004 	.word	0x20000004
 8001e8c:	0801d6b4 	.word	0x0801d6b4
 8001e90:	0801d694 	.word	0x0801d694

08001e94 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE>:
    TfLiteTensor** output_scores,
#endif
#if (EI_CLASSIFIER_COMPILED != 1)
    tflite::MicroInterpreter** micro_interpreter,
#endif
    ei_unique_ptr_t& p_tensor_arena) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
#if (EI_CLASSIFIER_COMPILED == 1)
    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
 8001ea2:	4842      	ldr	r0, [pc, #264]	; (8001fac <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x118>)
 8001ea4:	f014 fbe4 	bl	8016670 <_Z18trained_model_initPFPvjjE>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d007      	beq.n	8001ec2 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x2e>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	483e      	ldr	r0, [pc, #248]	; (8001fb0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8001eb8:	f000 fc8f 	bl	80027da <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 8001ebc:	f06f 0305 	mvn.w	r3, #5
 8001ec0:	e070      	b.n	8001fa4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x110>
    }
    p_tensor_arena = ei_unique_ptr_t(tensor_arena, ei_aligned_free);
#endif
#endif

    *ctx_start_us = ei_read_timer_us();
 8001ec2:	f00e ff23 	bl	8010d0c <_Z16ei_read_timer_usv>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	68f9      	ldr	r1, [r7, #12]
 8001ecc:	e9c1 2300 	strd	r2, r3, [r1]
    resolver.AddCustom("TFLite_Detection_PostProcess", &post_process_op);
#endif
#endif // EI_CLASSIFIER_COMPILED != 1

#if (EI_CLASSIFIER_COMPILED == 1)
    *input = trained_model_input(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f014 fe0d 	bl	8016af0 <_Z19trained_model_inputi>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	601a      	str	r2, [r3, #0]
    *output = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
 8001edc:	2000      	movs	r0, #0
 8001ede:	f014 fe19 	bl	8016b14 <_Z20trained_model_outputi>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	601a      	str	r2, [r3, #0]
    *output_labels = interpreter->output(EI_CLASSIFIER_TFLITE_OUTPUT_LABELS_TENSOR);
#endif // EI_CLASSIFIER_OBJECT_DETECTION
#endif

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 8001ee8:	4b32      	ldr	r3, [pc, #200]	; (8001fb4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x120>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d058      	beq.n	8001fa2 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x10e>
        assert((*input)->type == EI_CLASSIFIER_TFLITE_INPUT_DATATYPE);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b09      	cmp	r3, #9
 8001ef8:	d006      	beq.n	8001f08 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x74>
 8001efa:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x124>)
 8001efc:	4a2f      	ldr	r2, [pc, #188]	; (8001fbc <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x128>)
 8001efe:	f240 21aa 	movw	r1, #682	; 0x2aa
 8001f02:	482f      	ldr	r0, [pc, #188]	; (8001fc0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x12c>)
 8001f04:	f018 f99e 	bl	801a244 <__assert_func>
        assert((*output)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b09      	cmp	r3, #9
 8001f10:	d006      	beq.n	8001f20 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x8c>
 8001f12:	4b2c      	ldr	r3, [pc, #176]	; (8001fc4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x130>)
 8001f14:	4a29      	ldr	r2, [pc, #164]	; (8001fbc <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x128>)
 8001f16:	f240 21ab 	movw	r1, #683	; 0x2ab
 8001f1a:	4829      	ldr	r0, [pc, #164]	; (8001fc0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x12c>)
 8001f1c:	f018 f992 	bl	801a244 <__assert_func>
        assert((*output_scores)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
        assert((*output_labels)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
#endif
#if defined(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) || defined(EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED)
        if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) {
            assert((*input)->params.scale == EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f28:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001fc8 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x134>
 8001f2c:	eef4 7a47 	vcmp.f32	s15, s14
 8001f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f34:	d006      	beq.n	8001f44 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0xb0>
 8001f36:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x138>)
 8001f38:	4a20      	ldr	r2, [pc, #128]	; (8001fbc <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x128>)
 8001f3a:	f240 21b2 	movw	r1, #690	; 0x2b2
 8001f3e:	4820      	ldr	r0, [pc, #128]	; (8001fc0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x12c>)
 8001f40:	f018 f980 	bl	801a244 <__assert_func>
            assert((*input)->params.zero_point == EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f113 0f72 	cmn.w	r3, #114	; 0x72
 8001f4e:	d006      	beq.n	8001f5e <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0xca>
 8001f50:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x13c>)
 8001f52:	4a1a      	ldr	r2, [pc, #104]	; (8001fbc <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x128>)
 8001f54:	f240 21b3 	movw	r1, #691	; 0x2b3
 8001f58:	4819      	ldr	r0, [pc, #100]	; (8001fc0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x12c>)
 8001f5a:	f018 f973 	bl	801a244 <__assert_func>
        }
        if (EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED) {
            assert((*output)->params.scale == EI_CLASSIFIER_TFLITE_OUTPUT_SCALE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f66:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001fd4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x140>
 8001f6a:	eef4 7a47 	vcmp.f32	s15, s14
 8001f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f72:	d006      	beq.n	8001f82 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0xee>
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x144>)
 8001f76:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x128>)
 8001f78:	f240 21b6 	movw	r1, #694	; 0x2b6
 8001f7c:	4810      	ldr	r0, [pc, #64]	; (8001fc0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x12c>)
 8001f7e:	f018 f961 	bl	801a244 <__assert_func>
            assert((*output)->params.zero_point == EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001f8c:	d006      	beq.n	8001f9c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x108>
 8001f8e:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x148>)
 8001f90:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x128>)
 8001f92:	f240 21b7 	movw	r1, #695	; 0x2b7
 8001f96:	480a      	ldr	r0, [pc, #40]	; (8001fc0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x12c>)
 8001f98:	f018 f954 	bl	801a244 <__assert_func>
        }
#endif
        tflite_first_run = false;
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x120>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	080015fd 	.word	0x080015fd
 8001fb0:	0801d6bc 	.word	0x0801d6bc
 8001fb4:	2000003c 	.word	0x2000003c
 8001fb8:	0801d6f0 	.word	0x0801d6f0
 8001fbc:	0801d728 	.word	0x0801d728
 8001fc0:	0801d79c 	.word	0x0801d79c
 8001fc4:	0801d824 	.word	0x0801d824
 8001fc8:	40c12120 	.word	0x40c12120
 8001fcc:	0801d85c 	.word	0x0801d85c
 8001fd0:	0801d898 	.word	0x0801d898
 8001fd4:	3b800000 	.word	0x3b800000
 8001fd8:	0801d8dc 	.word	0x0801d8dc
 8001fdc:	0801d91c 	.word	0x0801d91c

08001fe0 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb>:
#if (EI_CLASSIFIER_COMPILED != 1)
    tflite::MicroInterpreter* interpreter,
#endif
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 8001fe0:	b5b0      	push	{r4, r5, r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	603b      	str	r3, [r7, #0]
#if (EI_CLASSIFIER_COMPILED == 1)
    if(trained_model_invoke() != kTfLiteOk) {
 8001fee:	f014 fda3 	bl	8016b38 <_Z20trained_model_invokev>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf14      	ite	ne
 8001ff8:	2301      	movne	r3, #1
 8001ffa:	2300      	moveq	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0x28>
        return EI_IMPULSE_TFLITE_ERROR;
 8002002:	f06f 0302 	mvn.w	r3, #2
 8002006:	e060      	b.n	80020ca <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xea>
        return EI_IMPULSE_TFLITE_ERROR;
    }
    delete interpreter;
#endif

    uint64_t ctx_end_us = ei_read_timer_us();
 8002008:	f00e fe80 	bl	8010d0c <_Z16ei_read_timer_usv>
 800200c:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 8002010:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002014:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002018:	1a84      	subs	r4, r0, r2
 800201a:	eb61 0503 	sbc.w	r5, r1, r3
 800201e:	4622      	mov	r2, r4
 8002020:	462b      	mov	r3, r5
 8002022:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002024:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 8002028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800202e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	f7fe fe31 	bl	8000c9c <__aeabi_ldivmod>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002040:	639a      	str	r2, [r3, #56]	; 0x38

    // Read the predicted y value from the model's output tensor
    if (debug) {
 8002042:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0x76>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 800204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204e:	4619      	mov	r1, r3
 8002050:	4820      	ldr	r0, [pc, #128]	; (80020d4 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xf4>)
 8002052:	f000 fbc2 	bl	80027da <_Z9ei_printfPKcz>
    }
#elif EI_CLASSIFIER_OBJECT_DETECTION == 1
    fill_result_struct_f32(result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
    // fill_result_struct_f32(result, output->data.f, scores_tensor->data.f, labels_tensor->data.f, debug);
#else
    bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b09      	cmp	r3, #9
 800205c:	bf0c      	ite	eq
 800205e:	2301      	moveq	r3, #1
 8002060:	2300      	movne	r3, #0
 8002062:	75fb      	strb	r3, [r7, #23]
    if (int8_output) {
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d015      	beq.n	8002096 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xb6>
        fill_result_struct_i8(result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6859      	ldr	r1, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002080:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002084:	461a      	mov	r2, r3
 8002086:	eef0 0a47 	vmov.f32	s1, s14
 800208a:	eeb0 0a67 	vmov.f32	s0, s15
 800208e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002090:	f7ff fe6c 	bl	8001d6c <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb>
 8002094:	e007      	b.n	80020a6 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xc6>
    }
    else {
        fill_result_struct_f32(result, output->data.f, debug);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800209e:	4619      	mov	r1, r3
 80020a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020a2:	f7ff feb5 	bl	8001e10 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb>
    }
#endif

#if (EI_CLASSIFIER_COMPILED == 1)
    trained_model_reset(ei_aligned_free);
 80020a6:	480c      	ldr	r0, [pc, #48]	; (80020d8 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xf8>)
 80020a8:	f014 fd7c 	bl	8016ba4 <_Z19trained_model_resetPFvPvE>
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80020ac:	f00e fe26 	bl	8010cfc <_Z29ei_run_impulse_check_canceledv>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f113 0f02 	cmn.w	r3, #2
 80020b6:	bf0c      	ite	eq
 80020b8:	2301      	moveq	r3, #1
 80020ba:	2300      	movne	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xe8>
        return EI_IMPULSE_CANCELED;
 80020c2:	f06f 0301 	mvn.w	r3, #1
 80020c6:	e000      	b.n	80020ca <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xea>
    }

    return EI_IMPULSE_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3720      	adds	r7, #32
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bdb0      	pop	{r4, r5, r7, pc}
 80020d2:	bf00      	nop
 80020d4:	0801d964 	.word	0x0801d964
 80020d8:	08001681 	.word	0x08001681

080020dc <run_inference>:
 */
extern "C" EI_IMPULSE_ERROR run_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80020dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020e0:	b0ac      	sub	sp, #176	; 0xb0
 80020e2:	af02      	add	r7, sp, #8
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	4613      	mov	r3, r2
 80020ea:	71fb      	strb	r3, [r7, #7]
 80020ec:	2400      	movs	r4, #0
        TfLiteTensor* output;
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
        TfLiteTensor* output_scores;
        TfLiteTensor* output_labels;
#endif
        uint64_t ctx_start_us = ei_read_timer_us();
 80020ee:	f00e fe0d 	bl	8010d0c <_Z16ei_read_timer_usv>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
        ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 80020fa:	4b8f      	ldr	r3, [pc, #572]	; (8002338 <run_inference+0x25c>)
 80020fc:	677b      	str	r3, [r7, #116]	; 0x74
 80020fe:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8002102:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fdf6 	bl	8002cfa <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

#if (EI_CLASSIFIER_COMPILED == 1)
        EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
 800210e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002112:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002116:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800211a:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800211e:	f7ff feb9 	bl	8001e94 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE>
 8002122:	4603      	mov	r3, r0
 8002124:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
            &output_labels,
            &output_scores,
    #endif
            &interpreter, p_tensor_arena);
#endif
        if (init_res != EI_IMPULSE_OK) {
 8002128:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <run_inference+0x5c>
            return init_res;
 8002130:	f997 409f 	ldrsb.w	r4, [r7, #159]	; 0x9f
 8002134:	2500      	movs	r5, #0
 8002136:	e07f      	b.n	8002238 <run_inference+0x15c>
        }

        uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 8002138:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fe12 	bl	8002d66 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8002142:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
            else {
                input->data.f[ix] = fmatrix->buffer[ix];
            }
        }
#else
        bool int8_input = input->type == TfLiteType::kTfLiteInt8;
 8002146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b09      	cmp	r3, #9
 800214c:	bf0c      	ite	eq
 800214e:	2301      	moveq	r3, #1
 8002150:	2300      	movne	r3, #0
 8002152:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	6892      	ldr	r2, [r2, #8]
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800216c:	429a      	cmp	r2, r3
 800216e:	d23f      	bcs.n	80021f0 <run_inference+0x114>
            // Quantize the input if it is int8
            if (int8_input) {
 8002170:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002174:	2b00      	cmp	r3, #0
 8002176:	d027      	beq.n	80021c8 <run_inference+0xec>
                input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	ed93 7a00 	vldr	s14, [r3]
 8002188:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800218a:	edd3 7a03 	vldr	s15, [r3, #12]
 800218e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002192:	eeb0 0a66 	vmov.f32	s0, s13
 8002196:	f7ff f897 	bl	80012c8 <_ZSt5roundf>
 800219a:	eeb0 7a40 	vmov.f32	s14, s0
 800219e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021b6:	4413      	add	r3, r2
 80021b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021bc:	edc7 7a00 	vstr	s15, [r7]
 80021c0:	783a      	ldrb	r2, [r7, #0]
 80021c2:	b252      	sxtb	r2, r2
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	e00d      	b.n	80021e4 <run_inference+0x108>
                // printf("float %ld : %d\r\n", ix, input->data.int8[ix]);
            } else {
                input->data.f[ix] = fmatrix->buffer[ix];
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	441a      	add	r2, r3
 80021d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80021e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021e8:	3301      	adds	r3, #1
 80021ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80021ee:	e7b5      	b.n	800215c <run_inference+0x80>
            }
        }
#endif

#if (EI_CLASSIFIER_COMPILED == 1)
        EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
 80021f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80021f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002202:	f7ff feed 	bl	8001fe0 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb>
 8002206:	4603      	mov	r3, r0
 8002208:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
            output_scores,
    #endif
            interpreter, tensor_arena, result, debug);
#endif

        result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 800220c:	f00e fd7e 	bl	8010d0c <_Z16ei_read_timer_usv>
 8002210:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002214:	ebb0 0a02 	subs.w	sl, r0, r2
 8002218:	eb61 0b03 	sbc.w	fp, r1, r3
 800221c:	4652      	mov	r2, sl
 800221e:	465b      	mov	r3, fp
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

        if (run_res != EI_IMPULSE_OK) {
 8002226:	f997 3096 	ldrsb.w	r3, [r7, #150]	; 0x96
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <run_inference+0x15a>
            return run_res;
 800222e:	f997 4096 	ldrsb.w	r4, [r7, #150]	; 0x96
 8002232:	2500      	movs	r5, #0
 8002234:	e000      	b.n	8002238 <run_inference+0x15c>
 8002236:	2501      	movs	r5, #1
 8002238:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800223c:	4618      	mov	r0, r3
 800223e:	f000 fd71 	bl	8002d24 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 8002242:	2d01      	cmp	r5, #1
 8002244:	d172      	bne.n	800232c <run_inference+0x250>

#if EI_CLASSIFIER_HAS_ANOMALY == 1

    // Anomaly detection
    {
        uint64_t anomaly_start_us = ei_read_timer_us();
 8002246:	f00e fd61 	bl	8010d0c <_Z16ei_read_timer_usv>
 800224a:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88

        float input[EI_CLASSIFIER_ANOM_AXIS_SIZE];
        for (size_t ix = 0; ix < EI_CLASSIFIER_ANOM_AXIS_SIZE; ix++) {
 800224e:	2300      	movs	r3, #0
 8002250:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002254:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002258:	2b11      	cmp	r3, #17
 800225a:	d816      	bhi.n	800228a <run_inference+0x1ae>
            input[ix] = fmatrix->buffer[EI_CLASSIFIER_ANOM_AXIS[ix]];
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4936      	ldr	r1, [pc, #216]	; (800233c <run_inference+0x260>)
 8002262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002266:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	33a8      	adds	r3, #168	; 0xa8
 8002278:	443b      	add	r3, r7
 800227a:	3b98      	subs	r3, #152	; 0x98
 800227c:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < EI_CLASSIFIER_ANOM_AXIS_SIZE; ix++) {
 800227e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002282:	3301      	adds	r3, #1
 8002284:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002288:	e7e4      	b.n	8002254 <run_inference+0x178>
        }
        standard_scaler(input, ei_classifier_anom_scale, ei_classifier_anom_mean, EI_CLASSIFIER_ANOM_AXIS_SIZE);
 800228a:	f107 0010 	add.w	r0, r7, #16
 800228e:	2312      	movs	r3, #18
 8002290:	4a2b      	ldr	r2, [pc, #172]	; (8002340 <run_inference+0x264>)
 8002292:	492c      	ldr	r1, [pc, #176]	; (8002344 <run_inference+0x268>)
 8002294:	f7ff f828 	bl	80012e8 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>
        float anomaly = get_min_distance_to_cluster(
 8002298:	f107 0010 	add.w	r0, r7, #16
 800229c:	2320      	movs	r3, #32
 800229e:	4a2a      	ldr	r2, [pc, #168]	; (8002348 <run_inference+0x26c>)
 80022a0:	2112      	movs	r1, #18
 80022a2:	f7ff f89d 	bl	80013e0 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>
 80022a6:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            input, EI_CLASSIFIER_ANOM_AXIS_SIZE, ei_classifier_anom_clusters, EI_CLASSIFIER_ANOM_CLUSTER_COUNT);

        uint64_t anomaly_end_us = ei_read_timer_us();
 80022aa:	f00e fd2f 	bl	8010d0c <_Z16ei_read_timer_usv>
 80022ae:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78

        result->timing.anomaly_us = anomaly_end_us - anomaly_start_us;
 80022b2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80022b6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80022ba:	ebb0 0802 	subs.w	r8, r0, r2
 80022be:	eb61 0903 	sbc.w	r9, r1, r3
 80022c2:	4642      	mov	r2, r8
 80022c4:	464b      	mov	r3, r9
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        result->timing.anomaly = (int)(result->timing.anomaly_us / 1000);
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80022d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	f7fe fcdf 	bl	8000c9c <__aeabi_ldivmod>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	63da      	str	r2, [r3, #60]	; 0x3c
        result->anomaly = anomaly;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28

        if (debug) {
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00c      	beq.n	800230e <run_inference+0x232>
            ei_printf("Anomaly score (time: %d ms.): ", result->timing.anomaly);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f8:	4619      	mov	r1, r3
 80022fa:	4814      	ldr	r0, [pc, #80]	; (800234c <run_inference+0x270>)
 80022fc:	f000 fa6d 	bl	80027da <_Z9ei_printfPKcz>
            ei_printf_float(anomaly);
 8002300:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 8002304:	f00e fd14 	bl	8010d30 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8002308:	4811      	ldr	r0, [pc, #68]	; (8002350 <run_inference+0x274>)
 800230a:	f000 fa66 	bl	80027da <_Z9ei_printfPKcz>
        }
    }

#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800230e:	f00e fcf5 	bl	8010cfc <_Z29ei_run_impulse_check_canceledv>
 8002312:	4603      	mov	r3, r0
 8002314:	f113 0f02 	cmn.w	r3, #2
 8002318:	bf0c      	ite	eq
 800231a:	2301      	moveq	r3, #1
 800231c:	2300      	movne	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <run_inference+0x24e>
        return EI_IMPULSE_CANCELED;
 8002324:	f06f 0401 	mvn.w	r4, #1
 8002328:	e000      	b.n	800232c <run_inference+0x250>
    }

    return EI_IMPULSE_OK;
 800232a:	2400      	movs	r4, #0
}
 800232c:	4623      	mov	r3, r4
 800232e:	4618      	mov	r0, r3
 8002330:	37a8      	adds	r7, #168	; 0xa8
 8002332:	46bd      	mov	sp, r7
 8002334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002338:	08001681 	.word	0x08001681
 800233c:	0801eba8 	.word	0x0801eba8
 8002340:	0801ec14 	.word	0x0801ec14
 8002344:	0801ebcc 	.word	0x0801ebcc
 8002348:	0801ec5c 	.word	0x0801ec5c
 800234c:	0801d984 	.word	0x0801d984
 8002350:	0801d694 	.word	0x0801d694

08002354 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8002354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002358:	b0a1      	sub	sp, #132	; 0x84
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	4613      	mov	r3, r2
 8002362:	71fb      	strb	r3, [r7, #7]
 8002364:	2600      	movs	r6, #0
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW)

    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized() == EI_IMPULSE_OK) {
 8002366:	f000 f8fd 	bl	8002564 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <run_classifier+0x38>
        return run_classifier_image_quantized(signal, result, debug);
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	461a      	mov	r2, r3
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 f8f9 	bl	8002578 <run_classifier_image_quantized>
 8002386:	4603      	mov	r3, r0
 8002388:	461e      	mov	r6, r3
 800238a:	e0d6      	b.n	800253a <run_classifier+0x1e6>
    //     }
    // }
    // printf("\n");
    // }

    memset(result, 0, sizeof(ei_impulse_result_t));
 800238c:	2260      	movs	r2, #96	; 0x60
 800238e:	2100      	movs	r1, #0
 8002390:	68b8      	ldr	r0, [r7, #8]
 8002392:	f017 fff5 	bl	801a380 <memset>

    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8002396:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800239a:	2300      	movs	r3, #0
 800239c:	2212      	movs	r2, #18
 800239e:	2101      	movs	r1, #1
 80023a0:	f7ff f8a8 	bl	80014f4 <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_us = ei_read_timer_us();
 80023a4:	f00e fcb2 	bl	8010d0c <_Z16ei_read_timer_usv>
 80023a8:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

    size_t out_features_index = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	67fb      	str	r3, [r7, #124]	; 0x7c

    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 80023b0:	2300      	movs	r3, #0
 80023b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80023b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d16c      	bne.n	8002494 <run_classifier+0x140>
        ei_model_dsp_t block = ei_dsp_blocks[ix];
 80023ba:	4963      	ldr	r1, [pc, #396]	; (8002548 <run_classifier+0x1f4>)
 80023bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80023cc:	461d      	mov	r5, r3
 80023ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023d2:	682b      	ldr	r3, [r5, #0]
 80023d4:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
 80023d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023da:	4413      	add	r3, r2
 80023dc:	2b12      	cmp	r3, #18
 80023de:	d905      	bls.n	80023ec <run_classifier+0x98>
            ei_printf("ERR: Would write outside feature buffer\n");
 80023e0:	485a      	ldr	r0, [pc, #360]	; (800254c <run_classifier+0x1f8>)
 80023e2:	f000 f9fa 	bl	80027da <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 80023e6:	f06f 0604 	mvn.w	r6, #4
 80023ea:	e0a0      	b.n	800252e <run_classifier+0x1da>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 80023ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80023ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80023fa:	460a      	mov	r2, r1
 80023fc:	2101      	movs	r1, #1
 80023fe:	f7ff f879 	bl	80014f4 <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, EI_CLASSIFIER_FREQUENCY);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size);
 8002402:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002406:	f107 0010 	add.w	r0, r7, #16
 800240a:	68f9      	ldr	r1, [r7, #12]
 800240c:	f7ff fbf4 	bl	8001bf8 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhj>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, EI_CLASSIFIER_FREQUENCY);
 8002410:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8002412:	f107 0310 	add.w	r3, r7, #16
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fc1c 	bl	8001c54 <_ZN14SignalWithAxes10get_signalEv>
 800241c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800241e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002422:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002426:	4619      	mov	r1, r3
 8002428:	47a0      	blx	r4
 800242a:	6678      	str	r0, [r7, #100]	; 0x64
#endif

        if (ret != EIDSP_OK) {
 800242c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <run_classifier+0xee>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8002432:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002434:	4846      	ldr	r0, [pc, #280]	; (8002550 <run_classifier+0x1fc>)
 8002436:	f000 f9d0 	bl	80027da <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 800243a:	f06f 0604 	mvn.w	r6, #4
 800243e:	2400      	movs	r4, #0
 8002440:	e013      	b.n	800246a <run_classifier+0x116>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8002442:	f00e fc5b 	bl	8010cfc <_Z29ei_run_impulse_check_canceledv>
 8002446:	4603      	mov	r3, r0
 8002448:	f113 0f02 	cmn.w	r3, #2
 800244c:	bf0c      	ite	eq
 800244e:	2301      	moveq	r3, #1
 8002450:	2300      	movne	r3, #0
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <run_classifier+0x10c>
            return EI_IMPULSE_CANCELED;
 8002458:	f06f 0601 	mvn.w	r6, #1
 800245c:	2400      	movs	r4, #0
 800245e:	e004      	b.n	800246a <run_classifier+0x116>
        }

        out_features_index += block.n_output_features;
 8002460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002462:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002464:	4413      	add	r3, r2
 8002466:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002468:	2401      	movs	r4, #1
 800246a:	f107 0310 	add.w	r3, r7, #16
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fc6d 	bl	8001d4e <_ZN14SignalWithAxesD1Ev>
 8002474:	2c01      	cmp	r4, #1
 8002476:	d001      	beq.n	800247c <run_classifier+0x128>
 8002478:	2400      	movs	r4, #0
 800247a:	e000      	b.n	800247e <run_classifier+0x12a>
 800247c:	2401      	movs	r4, #1
 800247e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff f861 	bl	800154a <_ZN2ei9ei_matrixD1Ev>
 8002488:	2c01      	cmp	r4, #1
 800248a:	d150      	bne.n	800252e <run_classifier+0x1da>
    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 800248c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800248e:	3301      	adds	r3, #1
 8002490:	67bb      	str	r3, [r7, #120]	; 0x78
 8002492:	e78f      	b.n	80023b4 <run_classifier+0x60>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8002494:	f00e fc3a 	bl	8010d0c <_Z16ei_read_timer_usv>
 8002498:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800249c:	ebb0 0802 	subs.w	r8, r0, r2
 80024a0:	eb61 0903 	sbc.w	r9, r1, r3
 80024a4:	4642      	mov	r2, r8
 80024a6:	464b      	mov	r3, r9
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80024b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	f7fe fbee 	bl	8000c9c <__aeabi_ldivmod>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	635a      	str	r2, [r3, #52]	; 0x34

    if (debug) {
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01f      	beq.n	800250e <run_classifier+0x1ba>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d2:	4619      	mov	r1, r3
 80024d4:	481f      	ldr	r0, [pc, #124]	; (8002554 <run_classifier+0x200>)
 80024d6:	f000 f980 	bl	80027da <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80024da:	2300      	movs	r3, #0
 80024dc:	677b      	str	r3, [r7, #116]	; 0x74
 80024de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d210      	bcs.n	8002508 <run_classifier+0x1b4>
            ei_printf_float(features_matrix.buffer[ix]);
 80024e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	eeb0 0a67 	vmov.f32	s0, s15
 80024f6:	f00e fc1b 	bl	8010d30 <_Z15ei_printf_floatf>
            ei_printf(" ");
 80024fa:	4817      	ldr	r0, [pc, #92]	; (8002558 <run_classifier+0x204>)
 80024fc:	f000 f96d 	bl	80027da <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8002500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002502:	3301      	adds	r3, #1
 8002504:	677b      	str	r3, [r7, #116]	; 0x74
 8002506:	e7ea      	b.n	80024de <run_classifier+0x18a>
        }
        ei_printf("\n");
 8002508:	4814      	ldr	r0, [pc, #80]	; (800255c <run_classifier+0x208>)
 800250a:	f000 f966 	bl	80027da <_Z9ei_printfPKcz>
    }

#if EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE
    if (debug) {
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <run_classifier+0x1c6>
        ei_printf("Running neural network...\n");
 8002514:	4812      	ldr	r0, [pc, #72]	; (8002560 <run_classifier+0x20c>)
 8002516:	f000 f960 	bl	80027da <_Z9ei_printfPKcz>
    }
#endif

    return run_inference(&features_matrix, result, debug);
 800251a:	79fa      	ldrb	r2, [r7, #7]
 800251c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fdda 	bl	80020dc <run_inference>
 8002528:	4603      	mov	r3, r0
 800252a:	461e      	mov	r6, r3
 800252c:	e000      	b.n	8002530 <run_classifier+0x1dc>
            return EI_IMPULSE_DSP_ERROR;
 800252e:	bf00      	nop
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8002530:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff f808 	bl	800154a <_ZN2ei9ei_matrixD1Ev>
}
 800253a:	4633      	mov	r3, r6
 800253c:	4618      	mov	r0, r3
 800253e:	3784      	adds	r7, #132	; 0x84
 8002540:	46bd      	mov	sp, r7
 8002542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002546:	bf00      	nop
 8002548:	20000028 	.word	0x20000028
 800254c:	0801d5d8 	.word	0x0801d5d8
 8002550:	0801d650 	.word	0x0801d650
 8002554:	0801d9a4 	.word	0x0801d9a4
 8002558:	0801d690 	.word	0x0801d690
 800255c:	0801d694 	.word	0x0801d694
 8002560:	0801d698 	.word	0x0801d698

08002564 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>:
}

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized() {
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TFLITE) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TENSAIFLOW)
    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
#endif

#if EI_CLASSIFIER_HAS_ANOMALY == 1
    return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8002568:	f06f 0308 	mvn.w	r3, #8
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    return EI_IMPULSE_OK;
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <run_classifier_image_quantized>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8002578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800257c:	b099      	sub	sp, #100	; 0x64
 800257e:	af02      	add	r7, sp, #8
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	4613      	mov	r3, r2
 8002586:	71fb      	strb	r3, [r7, #7]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized();
 8002588:	f7ff ffec 	bl	8002564 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>
 800258c:	4603      	mov	r3, r0
 800258e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if (verify_res != EI_IMPULSE_OK) {
 8002592:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <run_classifier_image_quantized+0x28>
        return verify_res;
 800259a:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 800259e:	e0de      	b.n	800275e <run_classifier_image_quantized+0x1e6>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 80025a0:	2260      	movs	r2, #96	; 0x60
 80025a2:	2100      	movs	r1, #0
 80025a4:	68b8      	ldr	r0, [r7, #8]
 80025a6:	f017 feeb 	bl	801a380 <memset>
    TfLiteTensor* output;
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;
#endif
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 80025aa:	4b73      	ldr	r3, [pc, #460]	; (8002778 <run_classifier_image_quantized+0x200>)
 80025ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80025b2:	f107 0320 	add.w	r3, r7, #32
 80025b6:	2100      	movs	r1, #0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 fb9e 	bl	8002cfa <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

#if (EI_CLASSIFIER_COMPILED == 1)
    EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
 80025be:	f107 0320 	add.w	r3, r7, #32
 80025c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025c6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80025ca:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80025ce:	f7ff fc61 	bl	8001e94 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        &output_scores,
    #endif
        &interpreter,
        p_tensor_arena);
#endif
    if (init_res != EI_IMPULSE_OK) {
 80025d8:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <run_classifier_image_quantized+0x6e>
        return init_res;
 80025e0:	f997 4052 	ldrsb.w	r4, [r7, #82]	; 0x52
 80025e4:	e0b6      	b.n	8002754 <run_classifier_image_quantized+0x1dc>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 80025e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b09      	cmp	r3, #9
 80025ec:	d002      	beq.n	80025f4 <run_classifier_image_quantized+0x7c>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 80025ee:	f06f 0408 	mvn.w	r4, #8
 80025f2:	e0af      	b.n	8002754 <run_classifier_image_quantized+0x1dc>
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 80025f4:	f00e fb8a 	bl	8010d0c <_Z16ei_read_timer_usv>
 80025f8:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f107 0010 	add.w	r0, r7, #16
 8002604:	2212      	movs	r2, #18
 8002606:	2101      	movs	r1, #1
 8002608:	f7fe ffb5 	bl	8001576 <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, ei_dsp_blocks[0].config, EI_CLASSIFIER_FREQUENCY);
 800260c:	4b5b      	ldr	r3, [pc, #364]	; (800277c <run_classifier_image_quantized+0x204>)
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	f107 0310 	add.w	r3, r7, #16
 8002614:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002618:	4619      	mov	r1, r3
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f7ff f928 	bl	8001870 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf>
 8002620:	6478      	str	r0, [r7, #68]	; 0x44
    if (ret != EIDSP_OK) {
 8002622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002624:	2b00      	cmp	r3, #0
 8002626:	d006      	beq.n	8002636 <run_classifier_image_quantized+0xbe>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8002628:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800262a:	4855      	ldr	r0, [pc, #340]	; (8002780 <run_classifier_image_quantized+0x208>)
 800262c:	f000 f8d5 	bl	80027da <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 8002630:	f06f 0404 	mvn.w	r4, #4
 8002634:	e089      	b.n	800274a <run_classifier_image_quantized+0x1d2>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8002636:	f00e fb61 	bl	8010cfc <_Z29ei_run_impulse_check_canceledv>
 800263a:	4603      	mov	r3, r0
 800263c:	f113 0f02 	cmn.w	r3, #2
 8002640:	bf0c      	ite	eq
 8002642:	2301      	moveq	r3, #1
 8002644:	2300      	movne	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <run_classifier_image_quantized+0xda>
        return EI_IMPULSE_CANCELED;
 800264c:	f06f 0401 	mvn.w	r4, #1
 8002650:	e07b      	b.n	800274a <run_classifier_image_quantized+0x1d2>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8002652:	f00e fb5b 	bl	8010d0c <_Z16ei_read_timer_usv>
 8002656:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800265a:	ebb0 0802 	subs.w	r8, r0, r2
 800265e:	eb61 0903 	sbc.w	r9, r1, r3
 8002662:	4642      	mov	r2, r8
 8002664:	464b      	mov	r3, r9
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002672:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	f7fe fb0f 	bl	8000c9c <__aeabi_ldivmod>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	635a      	str	r2, [r3, #52]	; 0x34

    if (debug) {
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d02e      	beq.n	80026ea <run_classifier_image_quantized+0x172>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002690:	4619      	mov	r1, r3
 8002692:	483c      	ldr	r0, [pc, #240]	; (8002784 <run_classifier_image_quantized+0x20c>)
 8002694:	f000 f8a1 	bl	80027da <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8002698:	2300      	movs	r3, #0
 800269a:	657b      	str	r3, [r7, #84]	; 0x54
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d21f      	bcs.n	80026e4 <run_classifier_image_quantized+0x16c>
            ei_printf_float((features_matrix.buffer[ix] - EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT) * EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a8:	4413      	add	r3, r2
 80026aa:	f993 3000 	ldrsb.w	r3, [r3]
 80026ae:	3372      	adds	r3, #114	; 0x72
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fd ff41 	bl	8000538 <__aeabi_i2d>
 80026b6:	a32e      	add	r3, pc, #184	; (adr r3, 8002770 <run_classifier_image_quantized+0x1f8>)
 80026b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026bc:	f7fd ffa6 	bl	800060c <__aeabi_dmul>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	f7fe fa98 	bl	8000bfc <__aeabi_d2f>
 80026cc:	4603      	mov	r3, r0
 80026ce:	ee00 3a10 	vmov	s0, r3
 80026d2:	f00e fb2d 	bl	8010d30 <_Z15ei_printf_floatf>
            ei_printf(" ");
 80026d6:	482c      	ldr	r0, [pc, #176]	; (8002788 <run_classifier_image_quantized+0x210>)
 80026d8:	f000 f87f 	bl	80027da <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80026dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026de:	3301      	adds	r3, #1
 80026e0:	657b      	str	r3, [r7, #84]	; 0x54
 80026e2:	e7db      	b.n	800269c <run_classifier_image_quantized+0x124>
        }
        ei_printf("\n");
 80026e4:	4829      	ldr	r0, [pc, #164]	; (800278c <run_classifier_image_quantized+0x214>)
 80026e6:	f000 f878 	bl	80027da <_Z9ei_printfPKcz>
    }

    ctx_start_us = ei_read_timer_us();
 80026ea:	f00e fb0f 	bl	8010d0c <_Z16ei_read_timer_usv>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

#if (EI_CLASSIFIER_COMPILED == 1)
    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
 80026f6:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 80026fa:	6abe      	ldr	r6, [r7, #40]	; 0x28
    #if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
        output_labels,
        output_scores,
    #endif
        static_cast<uint8_t*>(p_tensor_arena.get()),
 80026fc:	f107 0320 	add.w	r3, r7, #32
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fb30 	bl	8002d66 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8002706:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	4632      	mov	r2, r6
 8002714:	4640      	mov	r0, r8
 8002716:	4649      	mov	r1, r9
 8002718:	f7ff fc62 	bl	8001fe0 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb>
 800271c:	4603      	mov	r3, r0
 800271e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        interpreter,
        static_cast<uint8_t*>(p_tensor_arena.get()),
        result, debug);
#endif

    if (run_res != EI_IMPULSE_OK) {
 8002722:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <run_classifier_image_quantized+0x1b8>
        return run_res;
 800272a:	f997 4043 	ldrsb.w	r4, [r7, #67]	; 0x43
 800272e:	e00c      	b.n	800274a <run_classifier_image_quantized+0x1d2>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8002730:	f00e faec 	bl	8010d0c <_Z16ei_read_timer_usv>
 8002734:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002738:	1a84      	subs	r4, r0, r2
 800273a:	eb61 0503 	sbc.w	r5, r1, r3
 800273e:	4622      	mov	r2, r4
 8002740:	462b      	mov	r3, r5
 8002742:	68b9      	ldr	r1, [r7, #8]
 8002744:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

    return EI_IMPULSE_OK;
 8002748:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
 800274a:	f107 0310 	add.w	r3, r7, #16
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe ff3b 	bl	80015ca <_ZN2ei12ei_matrix_i8D1Ev>
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 8002754:	f107 0320 	add.w	r3, r7, #32
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fae3 	bl	8002d24 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
        result->classification[ix].value = value;
    }

    return EI_IMPULSE_OK;
#endif // (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TENSAIFLOW)
}
 800275e:	4623      	mov	r3, r4
 8002760:	4618      	mov	r0, r3
 8002762:	375c      	adds	r7, #92	; 0x5c
 8002764:	46bd      	mov	sp, r7
 8002766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800276a:	bf00      	nop
 800276c:	f3af 8000 	nop.w
 8002770:	00000000 	.word	0x00000000
 8002774:	40182424 	.word	0x40182424
 8002778:	08001681 	.word	0x08001681
 800277c:	20000028 	.word	0x20000028
 8002780:	0801d650 	.word	0x0801d650
 8002784:	0801d9a4 	.word	0x0801d9a4
 8002788:	0801d690 	.word	0x0801d690
 800278c:	0801d694 	.word	0x0801d694

08002790 <_Z6vprintPKcSt9__va_list>:
#include <stdio.h>
#include <stdarg.h>
#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

void vprint(const char *fmt, va_list argp)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b0b4      	sub	sp, #208	; 0xd0
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 800279a:	f107 0308 	add.w	r3, r7, #8
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f018 fda6 	bl	801b2f4 <vsiprintf>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bfcc      	ite	gt
 80027ae:	2301      	movgt	r3, #1
 80027b0:	2300      	movle	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00c      	beq.n	80027d2 <_Z6vprintPKcSt9__va_list+0x42>
    {
        //HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    	 CDC_Transmit_FS((uint8_t*)string, strlen(string));
 80027b8:	f107 0308 	add.w	r3, r7, #8
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd fd61 	bl	8000284 <strlen>
 80027c2:	4603      	mov	r3, r0
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	f107 0308 	add.w	r3, r7, #8
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f015 fd9d 	bl	801830c <CDC_Transmit_FS>
    }
}
 80027d2:	bf00      	nop
 80027d4:	37d0      	adds	r7, #208	; 0xd0
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 80027da:	b40f      	push	{r0, r1, r2, r3}
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 80027e2:	f107 0314 	add.w	r3, r7, #20
 80027e6:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	6938      	ldr	r0, [r7, #16]
 80027ec:	f7ff ffd0 	bl	8002790 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027fa:	b004      	add	sp, #16
 80027fc:	4770      	bx	lr
	...

08002800 <_Z16get_feature_datajjPf>:
// paste the raw features here
static const float features[] = {
		-30.6000, -0.2400, 485.4000, -1.3200, -1.3200, 484.9200, -0.4800, -0.1200, 485.8800, -0.1200, -0.2400, 486.2400, -0.7200, -0.3600, 485.8800, -0.4800, -1.3200, 484.5600
};

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4a06      	ldr	r2, [pc, #24]	; (800282c <_Z16get_feature_datajjPf+0x2c>)
 8002812:	1899      	adds	r1, r3, r2
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	461a      	mov	r2, r3
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f017 fd88 	bl	801a330 <memcpy>
    return 0;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	0801f5dc 	.word	0x0801f5dc

08002830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b0a4      	sub	sp, #144	; 0x90
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002836:	f001 fa03 	bl	8003c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800283a:	f000 f887 	bl	800294c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800283e:	f000 f94d 	bl	8002adc <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 8002842:	f015 fc8f 	bl	8018164 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8002846:	f000 f90d 	bl	8002a64 <_ZL12MX_SPI1_Initv>
  MX_CRC_Init();
 800284a:	f000 f8f3 	bl	8002a34 <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */
  myAccConfigDef.dataRate = LIS3DSH_DATARATE_25;
 800284e:	4b37      	ldr	r3, [pc, #220]	; (800292c <main+0xfc>)
 8002850:	2240      	movs	r2, #64	; 0x40
 8002852:	701a      	strb	r2, [r3, #0]
  	myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 8002854:	4b35      	ldr	r3, [pc, #212]	; (800292c <main+0xfc>)
 8002856:	2208      	movs	r2, #8
 8002858:	705a      	strb	r2, [r3, #1]
  	myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;//update rate
 800285a:	4b34      	ldr	r3, [pc, #208]	; (800292c <main+0xfc>)
 800285c:	22c0      	movs	r2, #192	; 0xc0
 800285e:	709a      	strb	r2, [r3, #2]
  	myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8002860:	4b32      	ldr	r3, [pc, #200]	; (800292c <main+0xfc>)
 8002862:	2207      	movs	r2, #7
 8002864:	70da      	strb	r2, [r3, #3]
  	myAccConfigDef.interruptEnable = false;
 8002866:	4b31      	ldr	r3, [pc, #196]	; (800292c <main+0xfc>)
 8002868:	2200      	movs	r2, #0
 800286a:	711a      	strb	r2, [r3, #4]
  	LIS3DSH_Init(&hspi1, &myAccConfigDef);
 800286c:	492f      	ldr	r1, [pc, #188]	; (800292c <main+0xfc>)
 800286e:	4830      	ldr	r0, [pc, #192]	; (8002930 <main+0x100>)
 8002870:	f7fe fc46 	bl	8001100 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>
  	LIS3DSH_DataScaled myscaledata;
  /* USER CODE END 2 */
  	signal_t signal;
 8002874:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe ff7e 	bl	800177a <_ZN2ei11ei_signal_tC1Ev>
  	signal.total_length = sizeof(features) / sizeof(features[0]);
 800287e:	2312      	movs	r3, #18
 8002880:	677b      	str	r3, [r7, #116]	; 0x74
  	signal.get_data = &get_feature_data;
 8002882:	4b2c      	ldr	r3, [pc, #176]	; (8002934 <main+0x104>)
 8002884:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002888:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800288c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f9e1 	bl	8002c5a <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ei_impulse_result_t result = { 0 };
 8002898:	463b      	mov	r3, r7
 800289a:	2260      	movs	r2, #96	; 0x60
 800289c:	2100      	movs	r1, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f017 fd6e 	bl	801a380 <memset>
	      EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 80028a4:	4639      	mov	r1, r7
 80028a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028aa:	2201      	movs	r2, #1
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff fd51 	bl	8002354 <run_classifier>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	      ei_printf("run_classifier returned: %d\n", res);
 80028b8:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 80028bc:	4619      	mov	r1, r3
 80028be:	481e      	ldr	r0, [pc, #120]	; (8002938 <main+0x108>)
 80028c0:	f7ff ff8b 	bl	80027da <_Z9ei_printfPKcz>

	      ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
 80028c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ca:	481c      	ldr	r0, [pc, #112]	; (800293c <main+0x10c>)
 80028cc:	f7ff ff85 	bl	80027da <_Z9ei_printfPKcz>
	          result.timing.dsp, result.timing.classification, result.timing.anomaly);

	      // print the predictions
	      ei_printf("[");
 80028d0:	481b      	ldr	r0, [pc, #108]	; (8002940 <main+0x110>)
 80028d2:	f7ff ff82 	bl	80027da <_Z9ei_printfPKcz>
	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 80028d6:	2300      	movs	r3, #0
 80028d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80028dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d814      	bhi.n	800290e <main+0xde>
	    	  ei_printf_float(result.classification[ix].value);
 80028e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	3390      	adds	r3, #144	; 0x90
 80028ec:	443b      	add	r3, r7
 80028ee:	3b8c      	subs	r3, #140	; 0x8c
 80028f0:	edd3 7a00 	vldr	s15, [r3]
 80028f4:	eeb0 0a67 	vmov.f32	s0, s15
 80028f8:	f00e fa1a 	bl	8010d30 <_Z15ei_printf_floatf>
	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
	          ei_printf(", ");
 80028fc:	4811      	ldr	r0, [pc, #68]	; (8002944 <main+0x114>)
 80028fe:	f7ff ff6c 	bl	80027da <_Z9ei_printfPKcz>
	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8002902:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002906:	3301      	adds	r3, #1
 8002908:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800290c:	e7e6      	b.n	80028dc <main+0xac>
	              ei_printf(", ");
	          }
	  #endif
	      }
	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
	      ei_printf_float(result.anomaly);
 800290e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002912:	eeb0 0a67 	vmov.f32	s0, s15
 8002916:	f00e fa0b 	bl	8010d30 <_Z15ei_printf_floatf>
	  #endif
	      ei_printf("]\n\n\n");
 800291a:	480b      	ldr	r0, [pc, #44]	; (8002948 <main+0x118>)
 800291c:	f7ff ff5d 	bl	80027da <_Z9ei_printfPKcz>

	    HAL_Delay(5000);
 8002920:	f241 3088 	movw	r0, #5000	; 0x1388
 8002924:	f001 f9fe 	bl	8003d24 <HAL_Delay>
	 			  	    {
	     /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 			  	    }
  }
 8002928:	e7b6      	b.n	8002898 <main+0x68>
 800292a:	bf00      	nop
 800292c:	20000494 	.word	0x20000494
 8002930:	200004a4 	.word	0x200004a4
 8002934:	08002801 	.word	0x08002801
 8002938:	0801d9e8 	.word	0x0801d9e8
 800293c:	0801da08 	.word	0x0801da08
 8002940:	0801da50 	.word	0x0801da50
 8002944:	0801da54 	.word	0x0801da54
 8002948:	0801da58 	.word	0x0801da58

0800294c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b094      	sub	sp, #80	; 0x50
 8002950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002952:	f107 0320 	add.w	r3, r7, #32
 8002956:	2230      	movs	r2, #48	; 0x30
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f017 fd10 	bl	801a380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002960:	f107 030c 	add.w	r3, r7, #12
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002970:	2300      	movs	r3, #0
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <_Z18SystemClock_Configv+0xe0>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	4a2c      	ldr	r2, [pc, #176]	; (8002a2c <_Z18SystemClock_Configv+0xe0>)
 800297a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297e:	6413      	str	r3, [r2, #64]	; 0x40
 8002980:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <_Z18SystemClock_Configv+0xe0>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800298c:	2300      	movs	r3, #0
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	4b27      	ldr	r3, [pc, #156]	; (8002a30 <_Z18SystemClock_Configv+0xe4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a26      	ldr	r2, [pc, #152]	; (8002a30 <_Z18SystemClock_Configv+0xe4>)
 8002996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <_Z18SystemClock_Configv+0xe4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029a8:	2301      	movs	r3, #1
 80029aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029b2:	2302      	movs	r3, #2
 80029b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80029bc:	2304      	movs	r3, #4
 80029be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80029c0:	23a8      	movs	r3, #168	; 0xa8
 80029c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029c4:	2302      	movs	r3, #2
 80029c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80029c8:	2307      	movs	r3, #7
 80029ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029cc:	f107 0320 	add.w	r3, r7, #32
 80029d0:	4618      	mov	r0, r3
 80029d2:	f002 ff2b 	bl	800582c <HAL_RCC_OscConfig>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf14      	ite	ne
 80029dc:	2301      	movne	r3, #1
 80029de:	2300      	moveq	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80029e6:	f000 f8d7 	bl	8002b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ea:	230f      	movs	r3, #15
 80029ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029ee:	2302      	movs	r3, #2
 80029f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a02:	f107 030c 	add.w	r3, r7, #12
 8002a06:	2105      	movs	r1, #5
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 f987 	bl	8005d1c <HAL_RCC_ClockConfig>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf14      	ite	ne
 8002a14:	2301      	movne	r3, #1
 8002a16:	2300      	moveq	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8002a1e:	f000 f8bb 	bl	8002b98 <Error_Handler>
  }
}
 8002a22:	bf00      	nop
 8002a24:	3750      	adds	r7, #80	; 0x50
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40007000 	.word	0x40007000

08002a34 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <_ZL11MX_CRC_Initv+0x28>)
 8002a3a:	4a09      	ldr	r2, [pc, #36]	; (8002a60 <_ZL11MX_CRC_Initv+0x2c>)
 8002a3c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002a3e:	4807      	ldr	r0, [pc, #28]	; (8002a5c <_ZL11MX_CRC_Initv+0x28>)
 8002a40:	f001 faa5 	bl	8003f8e <HAL_CRC_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf14      	ite	ne
 8002a4a:	2301      	movne	r3, #1
 8002a4c:	2300      	moveq	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 8002a54:	f000 f8a0 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	2000049c 	.word	0x2000049c
 8002a60:	40023000 	.word	0x40023000

08002a64 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a68:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <_ZL12MX_SPI1_Initv+0x70>)
 8002a6a:	4a1b      	ldr	r2, [pc, #108]	; (8002ad8 <_ZL12MX_SPI1_Initv+0x74>)
 8002a6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a6e:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <_ZL12MX_SPI1_Initv+0x70>)
 8002a70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a76:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <_ZL12MX_SPI1_Initv+0x70>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a7c:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <_ZL12MX_SPI1_Initv+0x70>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a82:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <_ZL12MX_SPI1_Initv+0x70>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <_ZL12MX_SPI1_Initv+0x70>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a8e:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <_ZL12MX_SPI1_Initv+0x70>)
 8002a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <_ZL12MX_SPI1_Initv+0x70>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <_ZL12MX_SPI1_Initv+0x70>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <_ZL12MX_SPI1_Initv+0x70>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <_ZL12MX_SPI1_Initv+0x70>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <_ZL12MX_SPI1_Initv+0x70>)
 8002ab0:	220a      	movs	r2, #10
 8002ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ab4:	4807      	ldr	r0, [pc, #28]	; (8002ad4 <_ZL12MX_SPI1_Initv+0x70>)
 8002ab6:	f003 fb29 	bl	800610c <HAL_SPI_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf14      	ite	ne
 8002ac0:	2301      	movne	r3, #1
 8002ac2:	2300      	moveq	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8002aca:	f000 f865 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200004a4 	.word	0x200004a4
 8002ad8:	40013000 	.word	0x40013000

08002adc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	609a      	str	r2, [r3, #8]
 8002aee:	60da      	str	r2, [r3, #12]
 8002af0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	4b26      	ldr	r3, [pc, #152]	; (8002b90 <_ZL12MX_GPIO_Initv+0xb4>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	4a25      	ldr	r2, [pc, #148]	; (8002b90 <_ZL12MX_GPIO_Initv+0xb4>)
 8002afc:	f043 0310 	orr.w	r3, r3, #16
 8002b00:	6313      	str	r3, [r2, #48]	; 0x30
 8002b02:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <_ZL12MX_GPIO_Initv+0xb4>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <_ZL12MX_GPIO_Initv+0xb4>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a1e      	ldr	r2, [pc, #120]	; (8002b90 <_ZL12MX_GPIO_Initv+0xb4>)
 8002b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <_ZL12MX_GPIO_Initv+0xb4>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <_ZL12MX_GPIO_Initv+0xb4>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a17      	ldr	r2, [pc, #92]	; (8002b90 <_ZL12MX_GPIO_Initv+0xb4>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <_ZL12MX_GPIO_Initv+0xb4>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <_ZL12MX_GPIO_Initv+0xb4>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a10      	ldr	r2, [pc, #64]	; (8002b90 <_ZL12MX_GPIO_Initv+0xb4>)
 8002b50:	f043 0302 	orr.w	r3, r3, #2
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <_ZL12MX_GPIO_Initv+0xb4>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2109      	movs	r1, #9
 8002b66:	480b      	ldr	r0, [pc, #44]	; (8002b94 <_ZL12MX_GPIO_Initv+0xb8>)
 8002b68:	f001 fbca 	bl	8004300 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 8002b6c:	2309      	movs	r3, #9
 8002b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b70:	2301      	movs	r3, #1
 8002b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	4619      	mov	r1, r3
 8002b82:	4804      	ldr	r0, [pc, #16]	; (8002b94 <_ZL12MX_GPIO_Initv+0xb8>)
 8002b84:	f001 fa20 	bl	8003fc8 <HAL_GPIO_Init>

}
 8002b88:	bf00      	nop
 8002b8a:	3728      	adds	r7, #40	; 0x28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40021000 	.word	0x40021000

08002b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b9c:	b672      	cpsid	i
}
 8002b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ba0:	e7fe      	b.n	8002ba0 <Error_Handler+0x8>

08002ba2 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8002ba2:	b5b0      	push	{r4, r5, r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	ed87 0a01 	vstr	s0, [r7, #4]
 8002bac:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fd fcd4 	bl	800055c <__aeabi_f2d>
 8002bb4:	4604      	mov	r4, r0
 8002bb6:	460d      	mov	r5, r1
 8002bb8:	6838      	ldr	r0, [r7, #0]
 8002bba:	f7fd fcbd 	bl	8000538 <__aeabi_i2d>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	ec43 2b11 	vmov	d1, r2, r3
 8002bc6:	ec45 4b10 	vmov	d0, r4, r5
 8002bca:	f016 f947 	bl	8018e5c <pow>
 8002bce:	eeb0 7a40 	vmov.f32	s14, s0
 8002bd2:	eef0 7a60 	vmov.f32	s15, s1
    }
 8002bd6:	eeb0 0a47 	vmov.f32	s0, s14
 8002bda:	eef0 0a67 	vmov.f32	s1, s15
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bdb0      	pop	{r4, r5, r7, pc}

08002be4 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8002be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fc6b 	bl	80014d2 <_ZNKSt14_Function_base8_M_emptyEv>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 8002c02:	f7fe fcf8 	bl	80015f6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	68dc      	ldr	r4, [r3, #12]
 8002c0a:	68fd      	ldr	r5, [r7, #12]
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 f8d6 	bl	8002dc2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002c16:	4606      	mov	r6, r0
 8002c18:	1d3b      	adds	r3, r7, #4
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f8d1 	bl	8002dc2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002c20:	4680      	mov	r8, r0
 8002c22:	463b      	mov	r3, r7
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 f8d7 	bl	8002dd8 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4642      	mov	r2, r8
 8002c2e:	4631      	mov	r1, r6
 8002c30:	4628      	mov	r0, r5
 8002c32:	47a0      	blx	r4
 8002c34:	4603      	mov	r3, r0
    }
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002c40 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe fc20 	bl	8001490 <_ZNSt14_Function_baseC1Ev>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8002c64:	6838      	ldr	r0, [r7, #0]
 8002c66:	f000 f8c2 	bl	8002dee <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	f107 0308 	add.w	r3, r7, #8
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 f8c5 	bl	8002e04 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 8002c7a:	f107 0308 	add.w	r3, r7, #8
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f87d 	bl	8002d80 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8002c86:	f107 0308 	add.w	r3, r7, #8
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe fd68 	bl	8001760 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8002c90:	687b      	ldr	r3, [r7, #4]
	}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b086      	sub	sp, #24
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8002ca4:	6838      	ldr	r0, [r7, #0]
 8002ca6:	f000 f8d7 	bl	8002e58 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8002caa:	4602      	mov	r2, r0
 8002cac:	f107 0308 	add.w	r3, r7, #8
 8002cb0:	6811      	ldr	r1, [r2, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f8dc 	bl	8002e70 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 8002cb8:	f107 0308 	add.w	r3, r7, #8
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f85e 	bl	8002d80 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8002cc4:	f107 0308 	add.w	r3, r7, #8
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe fd49 	bl	8001760 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8002cce:	687b      	ldr	r3, [r7, #4]
	}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	68b9      	ldr	r1, [r7, #8]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f8f5 	bl	8002eda <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
       *
       * The deleter will be initialized with @p std::move(__d)
       */
      template<typename _Del = deleter_type,
	       typename = _Require<is_move_constructible<_Del>>>
	unique_ptr(pointer __p,
 8002cfa:	b590      	push	{r4, r7, lr}
 8002cfc:	b085      	sub	sp, #20
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
		   __enable_if_t<!is_lvalue_reference<_Del>::value,
				 _Del&&> __d) noexcept
	: _M_t(__p, std::move(__d))
 8002d06:	68fc      	ldr	r4, [r7, #12]
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f8db 	bl	8002ec4 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461a      	mov	r2, r3
 8002d12:	68b9      	ldr	r1, [r7, #8]
 8002d14:	4620      	mov	r0, r4
 8002d16:	f7ff ffdf 	bl	8002cd8 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd90      	pop	{r4, r7, pc}

08002d24 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f8e9 	bl	8002f06 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8002d34:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f8ee 	bl	8002f20 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 8002d44:	4603      	mov	r3, r0
 8002d46:	681c      	ldr	r4, [r3, #0]
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f8f6 	bl	8002f3a <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	47a0      	blx	r4
	__ptr = pointer();
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
      }
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd90      	pop	{r4, r7, pc}

08002d66 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
	return get();
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 f8ed 	bl	8002f50 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 f8f6 	bl	8002f82 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f103 0208 	add.w	r2, r3, #8
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	3308      	adds	r3, #8
 8002da0:	4619      	mov	r1, r3
 8002da2:	4610      	mov	r0, r2
 8002da4:	f000 f91f 	bl	8002fe6 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f103 020c 	add.w	r2, r3, #12
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	330c      	adds	r3, #12
 8002db2:	4619      	mov	r1, r3
 8002db4:	4610      	mov	r0, r2
 8002db6:	f000 f940 	bl	800303a <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe fb3d 	bl	8001490 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 f92d 	bl	8003078 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00f      	beq.n	8002e44 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8002e24:	687c      	ldr	r4, [r7, #4]
 8002e26:	463b      	mov	r3, r7
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 f935 	bl	8003098 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4619      	mov	r1, r3
 8002e32:	4620      	mov	r0, r4
 8002e34:	f000 f93b 	bl	80030ae <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a05      	ldr	r2, [pc, #20]	; (8002e50 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 8002e3c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 8002e42:	609a      	str	r2, [r3, #8]
      }
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4618      	mov	r0, r3
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd90      	pop	{r4, r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	080030d3 	.word	0x080030d3
 8002e54:	08003115 	.word	0x08003115

08002e58 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fe fb07 	bl	8001490 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8002e82:	463b      	mov	r3, r7
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 f964 	bl	8003152 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00f      	beq.n	8002eb0 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8002e90:	687c      	ldr	r4, [r7, #4]
 8002e92:	463b      	mov	r3, r7
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 f967 	bl	8003168 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f000 f96d 	bl	800317e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a05      	ldr	r2, [pc, #20]	; (8002ebc <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 8002ea8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a04      	ldr	r2, [pc, #16]	; (8002ec0 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 8002eae:	609a      	str	r2, [r3, #8]
      }
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd90      	pop	{r4, r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	080031a3 	.word	0x080031a3
 8002ec0:	080031e5 	.word	0x080031e5

08002ec4 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8002eda:	b590      	push	{r4, r7, lr}
 8002edc:	b085      	sub	sp, #20
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8002ee6:	68fc      	ldr	r4, [r7, #12]
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f99a 	bl	8003222 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	f107 0308 	add.w	r3, r7, #8
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f000 f99e 	bl	8003238 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd90      	pop	{r4, r7, pc}

08002f06 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 f9aa 	bl	800326a <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 f9aa 	bl	8003284 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 8002f30:	4603      	mov	r3, r0
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 f99f 	bl	800329e <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 8002f60:	4603      	mov	r3, r0
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4618      	mov	r0, r3
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ffed 	bl	8002f6c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002f92:	4602      	mov	r2, r0
 8002f94:	f107 0308 	add.w	r3, r7, #8
 8002f98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f9c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8002fa0:	6838      	ldr	r0, [r7, #0]
 8002fa2:	f7ff ffe3 	bl	8002f6c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fae:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8002fb2:	f107 0308 	add.w	r3, r7, #8
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff ffd8 	bl	8002f6c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fc4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ffed 	bl	8002fd0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002ffc:	6838      	ldr	r0, [r7, #0]
 8002ffe:	f7ff ffe7 	bl	8002fd0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8003002:	4603      	mov	r3, r0
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800300a:	f107 030c 	add.w	r3, r7, #12
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff ffde 	bl	8002fd0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8003014:	4603      	mov	r3, r0
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	601a      	str	r2, [r3, #0]
    }
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff ffed 	bl	8003024 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800304a:	4603      	mov	r3, r0
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003050:	6838      	ldr	r0, [r7, #0]
 8003052:	f7ff ffe7 	bl	8003024 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8003056:	4603      	mov	r3, r0
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800305e:	f107 030c 	add.w	r3, r7, #12
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff ffde 	bl	8003024 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8003068:	4603      	mov	r3, r0
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	601a      	str	r2, [r3, #0]
    }
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	bf14      	ite	ne
 8003086:	2301      	movne	r3, #1
 8003088:	2300      	moveq	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80030ae:	b590      	push	{r4, r7, lr}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80030b8:	6838      	ldr	r0, [r7, #0]
 80030ba:	f7ff ffed 	bl	8003098 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 80030be:	4603      	mov	r3, r0
 80030c0:	4622      	mov	r2, r4
 80030c2:	4619      	mov	r1, r3
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f90b 	bl	80032e0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd90      	pop	{r4, r7, pc}

080030d2 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80030d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
 80030de:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f916 	bl	8003312 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 80030e6:	4604      	mov	r4, r0
 80030e8:	68b8      	ldr	r0, [r7, #8]
 80030ea:	f7ff fe6a 	bl	8002dc2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80030ee:	4605      	mov	r5, r0
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff fe66 	bl	8002dc2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80030f6:	4606      	mov	r6, r0
 80030f8:	6838      	ldr	r0, [r7, #0]
 80030fa:	f7ff fe6d 	bl	8002dd8 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80030fe:	4603      	mov	r3, r0
 8003100:	4632      	mov	r2, r6
 8003102:	4629      	mov	r1, r5
 8003104:	4620      	mov	r0, r4
 8003106:	f000 f915 	bl	8003334 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 800310a:	4603      	mov	r3, r0
      }
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003114 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	4613      	mov	r3, r2
 8003120:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d109      	bne.n	800313c <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f928 	bl	800337e <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 800312e:	4604      	mov	r4, r0
 8003130:	68b8      	ldr	r0, [r7, #8]
 8003132:	f000 f8ee 	bl	8003312 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8003136:	4603      	mov	r3, r0
 8003138:	6023      	str	r3, [r4, #0]
	    break;
 800313a:	e005      	b.n	8003148 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	461a      	mov	r2, r3
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f927 	bl	8003396 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8003148:	2300      	movs	r3, #0
      }
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	bd90      	pop	{r4, r7, pc}

08003152 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
	  { return true; }
 800315a:	2301      	movs	r3, #1
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800317e:	b590      	push	{r4, r7, lr}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8003188:	6838      	ldr	r0, [r7, #0]
 800318a:	f7ff ffed 	bl	8003168 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 800318e:	4603      	mov	r3, r0
 8003190:	4622      	mov	r2, r4
 8003192:	4619      	mov	r1, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f929 	bl	80033ec <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd90      	pop	{r4, r7, pc}

080031a2 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80031a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031a4:	b085      	sub	sp, #20
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f934 	bl	800341e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 80031b6:	4604      	mov	r4, r0
 80031b8:	68b8      	ldr	r0, [r7, #8]
 80031ba:	f7ff fe02 	bl	8002dc2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80031be:	4605      	mov	r5, r0
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff fdfe 	bl	8002dc2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80031c6:	4606      	mov	r6, r0
 80031c8:	6838      	ldr	r0, [r7, #0]
 80031ca:	f7ff fe05 	bl	8002dd8 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4632      	mov	r2, r6
 80031d2:	4629      	mov	r1, r5
 80031d4:	4620      	mov	r0, r4
 80031d6:	f000 f933 	bl	8003440 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 80031da:	4603      	mov	r3, r0
      }
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031e4 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	4613      	mov	r3, r2
 80031f0:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d109      	bne.n	800320c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f946 	bl	800348a <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 80031fe:	4604      	mov	r4, r0
 8003200:	68b8      	ldr	r0, [r7, #8]
 8003202:	f000 f90c 	bl	800341e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8003206:	4603      	mov	r3, r0
 8003208:	6023      	str	r3, [r4, #0]
	    break;
 800320a:	e005      	b.n	8003218 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	461a      	mov	r2, r3
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f945 	bl	80034a2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8003218:	2300      	movs	r3, #0
      }
 800321a:	4618      	mov	r0, r3
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	bd90      	pop	{r4, r7, pc}

08003222 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 8003238:	b5b0      	push	{r4, r5, r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8003244:	68fc      	ldr	r4, [r7, #12]
 8003246:	68b8      	ldr	r0, [r7, #8]
 8003248:	f000 f956 	bl	80034f8 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800324c:	4605      	mov	r5, r0
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff ffe7 	bl	8003222 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003254:	4603      	mov	r3, r0
 8003256:	461a      	mov	r2, r3
 8003258:	4629      	mov	r1, r5
 800325a:	4620      	mov	r0, r4
 800325c:	f000 f957 	bl	800350e <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bdb0      	pop	{r4, r5, r7, pc}

0800326a <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f968 	bl	800354a <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800327a:	4603      	mov	r3, r0
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 f967 	bl	8003562 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8003294:	4603      	mov	r3, r0
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 f967 	bl	800357c <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80032ae:	4603      	mov	r3, r0
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d201      	bcs.n	80032d2 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	e000      	b.n	80032d4 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80032d2:	687b      	ldr	r3, [r7, #4]
    }
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80032ec:	68b8      	ldr	r0, [r7, #8]
 80032ee:	f7ff fed3 	bl	8003098 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 80032f2:	4603      	mov	r3, r0
 80032f4:	681c      	ldr	r4, [r3, #0]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f7fe f8b4 	bl	8001464 <_ZNSt9_Any_data9_M_accessEv>
 80032fc:	4603      	mov	r3, r0
 80032fe:	4619      	mov	r1, r3
 8003300:	2004      	movs	r0, #4
 8003302:	f7fe f8a3 	bl	800144c <_ZnwjPv>
 8003306:	4603      	mov	r3, r0
 8003308:	601c      	str	r4, [r3, #0]
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bd90      	pop	{r4, r7, pc}

08003312 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f93a 	bl	8003594 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8003320:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f942 	bl	80035ac <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8003328:	4603      	mov	r3, r0
 800332a:	bf00      	nop
	}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8003334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003338:	b086      	sub	sp, #24
 800333a:	af02      	add	r7, sp, #8
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f93c 	bl	80035c2 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 800334a:	4604      	mov	r4, r0
 800334c:	68b8      	ldr	r0, [r7, #8]
 800334e:	f7ff fd38 	bl	8002dc2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003352:	4605      	mov	r5, r0
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff fd34 	bl	8002dc2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800335a:	4606      	mov	r6, r0
 800335c:	6838      	ldr	r0, [r7, #0]
 800335e:	f7ff fd3b 	bl	8002dd8 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003362:	4603      	mov	r3, r0
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	4633      	mov	r3, r6
 8003368:	462a      	mov	r2, r5
 800336a:	4621      	mov	r1, r4
 800336c:	4640      	mov	r0, r8
 800336e:	f000 f933 	bl	80035d8 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 8003372:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800337e <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fe f86c 	bl	8001464 <_ZNSt9_Any_data9_M_accessEv>
 800338c:	4603      	mov	r3, r0
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8003396:	b5b0      	push	{r4, r5, r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	4613      	mov	r3, r2
 80033a2:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d016      	beq.n	80033d8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	dc19      	bgt.n	80033e2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d002      	beq.n	80033b8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d00a      	beq.n	80033cc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 80033b6:	e014      	b.n	80033e2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f7ff ffe0 	bl	800337e <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 80033be:	4604      	mov	r4, r0
 80033c0:	68b8      	ldr	r0, [r7, #8]
 80033c2:	f7ff ffa6 	bl	8003312 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 80033c6:	4603      	mov	r3, r0
 80033c8:	6023      	str	r3, [r4, #0]
	      break;
 80033ca:	e00a      	b.n	80033e2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80033cc:	462a      	mov	r2, r5
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f925 	bl	8003620 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 80033d6:	e004      	b.n	80033e2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80033d8:	4621      	mov	r1, r4
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f939 	bl	8003652 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80033e0:	bf00      	nop
	  return false;
 80033e2:	2300      	movs	r3, #0
	}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bdb0      	pop	{r4, r5, r7, pc}

080033ec <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80033f8:	68b8      	ldr	r0, [r7, #8]
 80033fa:	f7ff feb5 	bl	8003168 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 80033fe:	4604      	mov	r4, r0
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f7fe f82f 	bl	8001464 <_ZNSt9_Any_data9_M_accessEv>
 8003406:	4603      	mov	r3, r0
 8003408:	4619      	mov	r1, r3
 800340a:	2004      	movs	r0, #4
 800340c:	f7fe f81e 	bl	800144c <_ZnwjPv>
 8003410:	4602      	mov	r2, r0
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	bd90      	pop	{r4, r7, pc}

0800341e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f91f 	bl	800366a <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 800342c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f927 	bl	8003682 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 8003434:	4603      	mov	r3, r0
 8003436:	bf00      	nop
	}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8003440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003444:	b086      	sub	sp, #24
 8003446:	af02      	add	r7, sp, #8
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f921 	bl	8003698 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8003456:	4604      	mov	r4, r0
 8003458:	68b8      	ldr	r0, [r7, #8]
 800345a:	f7ff fcb2 	bl	8002dc2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800345e:	4605      	mov	r5, r0
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff fcae 	bl	8002dc2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003466:	4606      	mov	r6, r0
 8003468:	6838      	ldr	r0, [r7, #0]
 800346a:	f7ff fcb5 	bl	8002dd8 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800346e:	4603      	mov	r3, r0
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	4633      	mov	r3, r6
 8003474:	462a      	mov	r2, r5
 8003476:	4621      	mov	r1, r4
 8003478:	4640      	mov	r0, r8
 800347a:	f000 f918 	bl	80036ae <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 800347e:	4603      	mov	r3, r0
    }
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800348a <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fd ffe6 	bl	8001464 <_ZNSt9_Any_data9_M_accessEv>
 8003498:	4603      	mov	r3, r0
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80034a2:	b5b0      	push	{r4, r5, r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	4613      	mov	r3, r2
 80034ae:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d016      	beq.n	80034e4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	dc19      	bgt.n	80034ee <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d002      	beq.n	80034c4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d00a      	beq.n	80034d8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 80034c2:	e014      	b.n	80034ee <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f7ff ffe0 	bl	800348a <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 80034ca:	4604      	mov	r4, r0
 80034cc:	68b8      	ldr	r0, [r7, #8]
 80034ce:	f7ff ffa6 	bl	800341e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 80034d2:	4603      	mov	r3, r0
 80034d4:	6023      	str	r3, [r4, #0]
	      break;
 80034d6:	e00a      	b.n	80034ee <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80034d8:	462a      	mov	r2, r5
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f90a 	bl	80036f6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 80034e2:	e004      	b.n	80034ee <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80034e4:	4621      	mov	r1, r4
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f91e 	bl	8003728 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80034ec:	bf00      	nop
	  return false;
 80034ee:	2300      	movs	r3, #0
	}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bdb0      	pop	{r4, r5, r7, pc}

080034f8 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800350e:	b590      	push	{r4, r7, lr}
 8003510:	b085      	sub	sp, #20
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800351a:	68fc      	ldr	r4, [r7, #12]
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff fe80 	bl	8003222 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003522:	4603      	mov	r3, r0
 8003524:	4619      	mov	r1, r3
 8003526:	4620      	mov	r0, r4
 8003528:	f000 f90a 	bl	8003740 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1d1c      	adds	r4, r3, #4
 8003530:	68b8      	ldr	r0, [r7, #8]
 8003532:	f7ff ffe1 	bl	80034f8 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8003536:	4603      	mov	r3, r0
 8003538:	4619      	mov	r1, r3
 800353a:	4620      	mov	r0, r4
 800353c:	f000 f913 	bl	8003766 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	bd90      	pop	{r4, r7, pc}

0800354a <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f918 	bl	8003788 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 8003558:	4603      	mov	r3, r0
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f919 	bl	80037a4 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8003572:	4603      	mov	r3, r0
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f919 	bl	80037bc <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 800358a:	4603      	mov	r3, r0
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7fd ff6c 	bl	800147a <_ZNKSt9_Any_data9_M_accessEv>
 80035a2:	4603      	mov	r3, r0
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4618      	mov	r0, r3
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4618      	mov	r0, r3
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80035d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	7338      	strb	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80035e6:	68b8      	ldr	r0, [r7, #8]
 80035e8:	f7ff ffeb 	bl	80035c2 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 80035ec:	4603      	mov	r3, r0
 80035ee:	681c      	ldr	r4, [r3, #0]
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff fbe6 	bl	8002dc2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80035f6:	4603      	mov	r3, r0
 80035f8:	681d      	ldr	r5, [r3, #0]
 80035fa:	6838      	ldr	r0, [r7, #0]
 80035fc:	f7ff fbe1 	bl	8002dc2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003600:	4603      	mov	r3, r0
 8003602:	681e      	ldr	r6, [r3, #0]
 8003604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003606:	f7ff fbe7 	bl	8002dd8 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800360a:	4603      	mov	r3, r0
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	4631      	mov	r1, r6
 8003612:	4628      	mov	r0, r5
 8003614:	47a0      	blx	r4
 8003616:	4603      	mov	r3, r0
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003620 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8003620:	b590      	push	{r4, r7, lr}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800362c:	68b8      	ldr	r0, [r7, #8]
 800362e:	f7ff ffb1 	bl	8003594 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8003632:	4603      	mov	r3, r0
 8003634:	681c      	ldr	r4, [r3, #0]
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f7fd ff14 	bl	8001464 <_ZNSt9_Any_data9_M_accessEv>
 800363c:	4603      	mov	r3, r0
 800363e:	4619      	mov	r1, r3
 8003640:	2004      	movs	r0, #4
 8003642:	f7fd ff03 	bl	800144c <_ZnwjPv>
 8003646:	4603      	mov	r3, r0
 8003648:	601c      	str	r4, [r3, #0]
	}
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	bd90      	pop	{r4, r7, pc}

08003652 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f8cf 	bl	8003800 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 800366a:	b580      	push	{r7, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd ff01 	bl	800147a <_ZNKSt9_Any_data9_M_accessEv>
 8003678:	4603      	mov	r3, r0
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80036ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b0:	b085      	sub	sp, #20
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	7338      	strb	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80036bc:	68b8      	ldr	r0, [r7, #8]
 80036be:	f7ff ffeb 	bl	8003698 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 80036c2:	4606      	mov	r6, r0
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff fb7c 	bl	8002dc2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80036ca:	4603      	mov	r3, r0
 80036cc:	681c      	ldr	r4, [r3, #0]
 80036ce:	6838      	ldr	r0, [r7, #0]
 80036d0:	f7ff fb77 	bl	8002dc2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80036d4:	4603      	mov	r3, r0
 80036d6:	681d      	ldr	r5, [r3, #0]
 80036d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036da:	f7ff fb7d 	bl	8002dd8 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80036de:	4603      	mov	r3, r0
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	462a      	mov	r2, r5
 80036e4:	4621      	mov	r1, r4
 80036e6:	4630      	mov	r0, r6
 80036e8:	f7fe faa0 	bl	8001c2c <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 80036ec:	4603      	mov	r3, r0
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036f6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80036f6:	b590      	push	{r4, r7, lr}
 80036f8:	b085      	sub	sp, #20
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8003702:	68b8      	ldr	r0, [r7, #8]
 8003704:	f7ff ffb1 	bl	800366a <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8003708:	4604      	mov	r4, r0
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f7fd feaa 	bl	8001464 <_ZNSt9_Any_data9_M_accessEv>
 8003710:	4603      	mov	r3, r0
 8003712:	4619      	mov	r1, r3
 8003714:	2004      	movs	r0, #4
 8003716:	f7fd fe99 	bl	800144c <_ZnwjPv>
 800371a:	4602      	mov	r2, r0
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	6013      	str	r3, [r2, #0]
	}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	bd90      	pop	{r4, r7, pc}

08003728 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f870 	bl	8003818 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 800374a:	687c      	ldr	r4, [r7, #4]
 800374c:	6838      	ldr	r0, [r7, #0]
 800374e:	f7ff fd68 	bl	8003222 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003752:	4603      	mov	r3, r0
 8003754:	4619      	mov	r1, r3
 8003756:	4620      	mov	r0, r4
 8003758:	f000 f86a 	bl	8003830 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bd90      	pop	{r4, r7, pc}

08003766 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8003770:	6838      	ldr	r0, [r7, #0]
 8003772:	f7ff fec1 	bl	80034f8 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8003776:	4603      	mov	r3, r0
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3304      	adds	r3, #4
 8003794:	4618      	mov	r0, r3
 8003796:	f000 f85c 	bl	8003852 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 800379a:	4603      	mov	r3, r0
 800379c:	4618      	mov	r0, r3
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f85b 	bl	8003868 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 80037b2:	4603      	mov	r3, r0
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 f85a 	bl	8003882 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 80037ce:	4603      	mov	r3, r0
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d201      	bcs.n	80037f2 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	e000      	b.n	80037f4 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80037f2:	687b      	ldr	r3, [r7, #4]
    }
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7fd fe2b 	bl	8001464 <_ZNSt9_Any_data9_M_accessEv>
 800380e:	4603      	mov	r3, r0
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7fd fe1f 	bl	8001464 <_ZNSt9_Any_data9_M_accessEv>
 8003826:	4603      	mov	r3, r0
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800383a:	6838      	ldr	r0, [r7, #0]
 800383c:	f7ff fcf1 	bl	8003222 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003840:	4603      	mov	r3, r0
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4618      	mov	r0, r3
 8003874:	f000 f810 	bl	8003898 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 8003878:	4603      	mov	r3, r0
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4618      	mov	r0, r3
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	607b      	str	r3, [r7, #4]
 80038ba:	4b10      	ldr	r3, [pc, #64]	; (80038fc <HAL_MspInit+0x4c>)
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	4a0f      	ldr	r2, [pc, #60]	; (80038fc <HAL_MspInit+0x4c>)
 80038c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c4:	6453      	str	r3, [r2, #68]	; 0x44
 80038c6:	4b0d      	ldr	r3, [pc, #52]	; (80038fc <HAL_MspInit+0x4c>)
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ce:	607b      	str	r3, [r7, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038d2:	2300      	movs	r3, #0
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <HAL_MspInit+0x4c>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	4a08      	ldr	r2, [pc, #32]	; (80038fc <HAL_MspInit+0x4c>)
 80038dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e0:	6413      	str	r3, [r2, #64]	; 0x40
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <HAL_MspInit+0x4c>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40023800 	.word	0x40023800

08003900 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a0b      	ldr	r2, [pc, #44]	; (800393c <HAL_CRC_MspInit+0x3c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d10d      	bne.n	800392e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <HAL_CRC_MspInit+0x40>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	4a09      	ldr	r2, [pc, #36]	; (8003940 <HAL_CRC_MspInit+0x40>)
 800391c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003920:	6313      	str	r3, [r2, #48]	; 0x30
 8003922:	4b07      	ldr	r3, [pc, #28]	; (8003940 <HAL_CRC_MspInit+0x40>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40023000 	.word	0x40023000
 8003940:	40023800 	.word	0x40023800

08003944 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08a      	sub	sp, #40	; 0x28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394c:	f107 0314 	add.w	r3, r7, #20
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a19      	ldr	r2, [pc, #100]	; (80039c8 <HAL_SPI_MspInit+0x84>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d12b      	bne.n	80039be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	4b18      	ldr	r3, [pc, #96]	; (80039cc <HAL_SPI_MspInit+0x88>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	4a17      	ldr	r2, [pc, #92]	; (80039cc <HAL_SPI_MspInit+0x88>)
 8003970:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003974:	6453      	str	r3, [r2, #68]	; 0x44
 8003976:	4b15      	ldr	r3, [pc, #84]	; (80039cc <HAL_SPI_MspInit+0x88>)
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	4b11      	ldr	r3, [pc, #68]	; (80039cc <HAL_SPI_MspInit+0x88>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	4a10      	ldr	r2, [pc, #64]	; (80039cc <HAL_SPI_MspInit+0x88>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	6313      	str	r3, [r2, #48]	; 0x30
 8003992:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <HAL_SPI_MspInit+0x88>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800399e:	23e0      	movs	r3, #224	; 0xe0
 80039a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a2:	2302      	movs	r3, #2
 80039a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039aa:	2303      	movs	r3, #3
 80039ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039ae:	2305      	movs	r3, #5
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b2:	f107 0314 	add.w	r3, r7, #20
 80039b6:	4619      	mov	r1, r3
 80039b8:	4805      	ldr	r0, [pc, #20]	; (80039d0 <HAL_SPI_MspInit+0x8c>)
 80039ba:	f000 fb05 	bl	8003fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80039be:	bf00      	nop
 80039c0:	3728      	adds	r7, #40	; 0x28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40013000 	.word	0x40013000
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40020000 	.word	0x40020000

080039d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039d8:	e7fe      	b.n	80039d8 <NMI_Handler+0x4>

080039da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039da:	b480      	push	{r7}
 80039dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039de:	e7fe      	b.n	80039de <HardFault_Handler+0x4>

080039e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039e4:	e7fe      	b.n	80039e4 <MemManage_Handler+0x4>

080039e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039e6:	b480      	push	{r7}
 80039e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039ea:	e7fe      	b.n	80039ea <BusFault_Handler+0x4>

080039ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039f0:	e7fe      	b.n	80039f0 <UsageFault_Handler+0x4>

080039f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039f2:	b480      	push	{r7}
 80039f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a04:	bf00      	nop
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a20:	f000 f960 	bl	8003ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a24:	bf00      	nop
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003a2c:	4802      	ldr	r0, [pc, #8]	; (8003a38 <OTG_FS_IRQHandler+0x10>)
 8003a2e:	f000 fdd0 	bl	80045d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20001f94 	.word	0x20001f94

08003a3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
	return 1;
 8003a40:	2301      	movs	r3, #1
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <_kill>:

int _kill(int pid, int sig)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a56:	f016 fc1b 	bl	801a290 <__errno>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2216      	movs	r2, #22
 8003a5e:	601a      	str	r2, [r3, #0]
	return -1;
 8003a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <_exit>:

void _exit (int status)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a74:	f04f 31ff 	mov.w	r1, #4294967295
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff ffe7 	bl	8003a4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a7e:	e7fe      	b.n	8003a7e <_exit+0x12>

08003a80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e00a      	b.n	8003aa8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a92:	f3af 8000 	nop.w
 8003a96:	4601      	mov	r1, r0
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	60ba      	str	r2, [r7, #8]
 8003a9e:	b2ca      	uxtb	r2, r1
 8003aa0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	dbf0      	blt.n	8003a92 <_read+0x12>
	}

return len;
 8003ab0:	687b      	ldr	r3, [r7, #4]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b086      	sub	sp, #24
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	e009      	b.n	8003ae0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	60ba      	str	r2, [r7, #8]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	3301      	adds	r3, #1
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	dbf1      	blt.n	8003acc <_write+0x12>
	}
	return len;
 8003ae8:	687b      	ldr	r3, [r7, #4]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <_close>:

int _close(int file)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
	return -1;
 8003afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b1a:	605a      	str	r2, [r3, #4]
	return 0;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <_isatty>:

int _isatty(int file)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
	return 1;
 8003b32:	2301      	movs	r3, #1
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
	return 0;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b64:	4a14      	ldr	r2, [pc, #80]	; (8003bb8 <_sbrk+0x5c>)
 8003b66:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <_sbrk+0x60>)
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b70:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <_sbrk+0x64>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b78:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <_sbrk+0x64>)
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <_sbrk+0x68>)
 8003b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b7e:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <_sbrk+0x64>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4413      	add	r3, r2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d207      	bcs.n	8003b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b8c:	f016 fb80 	bl	801a290 <__errno>
 8003b90:	4603      	mov	r3, r0
 8003b92:	220c      	movs	r2, #12
 8003b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b96:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9a:	e009      	b.n	8003bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b9c:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <_sbrk+0x64>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ba2:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <_sbrk+0x64>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	4a05      	ldr	r2, [pc, #20]	; (8003bc0 <_sbrk+0x64>)
 8003bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bae:	68fb      	ldr	r3, [r7, #12]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20020000 	.word	0x20020000
 8003bbc:	00000400 	.word	0x00000400
 8003bc0:	200005fc 	.word	0x200005fc
 8003bc4:	200026d8 	.word	0x200026d8

08003bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <SystemInit+0x20>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd2:	4a05      	ldr	r2, [pc, #20]	; (8003be8 <SystemInit+0x20>)
 8003bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bf0:	480d      	ldr	r0, [pc, #52]	; (8003c28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bf2:	490e      	ldr	r1, [pc, #56]	; (8003c2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bf4:	4a0e      	ldr	r2, [pc, #56]	; (8003c30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bf8:	e002      	b.n	8003c00 <LoopCopyDataInit>

08003bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bfe:	3304      	adds	r3, #4

08003c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c04:	d3f9      	bcc.n	8003bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c06:	4a0b      	ldr	r2, [pc, #44]	; (8003c34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c08:	4c0b      	ldr	r4, [pc, #44]	; (8003c38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c0c:	e001      	b.n	8003c12 <LoopFillZerobss>

08003c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c10:	3204      	adds	r2, #4

08003c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c14:	d3fb      	bcc.n	8003c0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c16:	f7ff ffd7 	bl	8003bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c1a:	f016 fb51 	bl	801a2c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c1e:	f7fe fe07 	bl	8002830 <main>
  bx  lr    
 8003c22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c2c:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 8003c30:	0802045c 	.word	0x0802045c
  ldr r2, =_sbss
 8003c34:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 8003c38:	200026d4 	.word	0x200026d4

08003c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c3c:	e7fe      	b.n	8003c3c <ADC_IRQHandler>
	...

08003c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c44:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <HAL_Init+0x40>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a0d      	ldr	r2, [pc, #52]	; (8003c80 <HAL_Init+0x40>)
 8003c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_Init+0x40>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <HAL_Init+0x40>)
 8003c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c5c:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_Init+0x40>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a07      	ldr	r2, [pc, #28]	; (8003c80 <HAL_Init+0x40>)
 8003c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c68:	2003      	movs	r0, #3
 8003c6a:	f000 f94f 	bl	8003f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c6e:	200f      	movs	r0, #15
 8003c70:	f000 f808 	bl	8003c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c74:	f7ff fe1c 	bl	80038b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023c00 	.word	0x40023c00

08003c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c8c:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <HAL_InitTick+0x54>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <HAL_InitTick+0x58>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	4619      	mov	r1, r3
 8003c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 f967 	bl	8003f76 <HAL_SYSTICK_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e00e      	b.n	8003cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b0f      	cmp	r3, #15
 8003cb6:	d80a      	bhi.n	8003cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc0:	f000 f92f 	bl	8003f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cc4:	4a06      	ldr	r2, [pc, #24]	; (8003ce0 <HAL_InitTick+0x5c>)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000040 	.word	0x20000040
 8003cdc:	20000048 	.word	0x20000048
 8003ce0:	20000044 	.word	0x20000044

08003ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_IncTick+0x20>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_IncTick+0x24>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <HAL_IncTick+0x24>)
 8003cf6:	6013      	str	r3, [r2, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20000048 	.word	0x20000048
 8003d08:	20000600 	.word	0x20000600

08003d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d10:	4b03      	ldr	r3, [pc, #12]	; (8003d20 <HAL_GetTick+0x14>)
 8003d12:	681b      	ldr	r3, [r3, #0]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000600 	.word	0x20000600

08003d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d2c:	f7ff ffee 	bl	8003d0c <HAL_GetTick>
 8003d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d005      	beq.n	8003d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <HAL_Delay+0x44>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d4a:	bf00      	nop
 8003d4c:	f7ff ffde 	bl	8003d0c <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d8f7      	bhi.n	8003d4c <HAL_Delay+0x28>
  {
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000048 	.word	0x20000048

08003d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d88:	4013      	ands	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d9e:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <__NVIC_SetPriorityGrouping+0x44>)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	60d3      	str	r3, [r2, #12]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	e000ed00 	.word	0xe000ed00

08003db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <__NVIC_GetPriorityGrouping+0x18>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	0a1b      	lsrs	r3, r3, #8
 8003dbe:	f003 0307 	and.w	r3, r3, #7
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	db0b      	blt.n	8003dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	f003 021f 	and.w	r2, r3, #31
 8003de8:	4907      	ldr	r1, [pc, #28]	; (8003e08 <__NVIC_EnableIRQ+0x38>)
 8003dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	2001      	movs	r0, #1
 8003df2:	fa00 f202 	lsl.w	r2, r0, r2
 8003df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	e000e100 	.word	0xe000e100

08003e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	6039      	str	r1, [r7, #0]
 8003e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	db0a      	blt.n	8003e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	490c      	ldr	r1, [pc, #48]	; (8003e58 <__NVIC_SetPriority+0x4c>)
 8003e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2a:	0112      	lsls	r2, r2, #4
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	440b      	add	r3, r1
 8003e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e34:	e00a      	b.n	8003e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	4908      	ldr	r1, [pc, #32]	; (8003e5c <__NVIC_SetPriority+0x50>)
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	3b04      	subs	r3, #4
 8003e44:	0112      	lsls	r2, r2, #4
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	440b      	add	r3, r1
 8003e4a:	761a      	strb	r2, [r3, #24]
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	e000e100 	.word	0xe000e100
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b089      	sub	sp, #36	; 0x24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f1c3 0307 	rsb	r3, r3, #7
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	bf28      	it	cs
 8003e7e:	2304      	movcs	r3, #4
 8003e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3304      	adds	r3, #4
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d902      	bls.n	8003e90 <NVIC_EncodePriority+0x30>
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3b03      	subs	r3, #3
 8003e8e:	e000      	b.n	8003e92 <NVIC_EncodePriority+0x32>
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e94:	f04f 32ff 	mov.w	r2, #4294967295
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb2:	43d9      	mvns	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb8:	4313      	orrs	r3, r2
         );
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3724      	adds	r7, #36	; 0x24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ed8:	d301      	bcc.n	8003ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eda:	2301      	movs	r3, #1
 8003edc:	e00f      	b.n	8003efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ede:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <SysTick_Config+0x40>)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ee6:	210f      	movs	r1, #15
 8003ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eec:	f7ff ff8e 	bl	8003e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <SysTick_Config+0x40>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ef6:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <SysTick_Config+0x40>)
 8003ef8:	2207      	movs	r2, #7
 8003efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	e000e010 	.word	0xe000e010

08003f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff ff29 	bl	8003d6c <__NVIC_SetPriorityGrouping>
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b086      	sub	sp, #24
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	4603      	mov	r3, r0
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f34:	f7ff ff3e 	bl	8003db4 <__NVIC_GetPriorityGrouping>
 8003f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68b9      	ldr	r1, [r7, #8]
 8003f3e:	6978      	ldr	r0, [r7, #20]
 8003f40:	f7ff ff8e 	bl	8003e60 <NVIC_EncodePriority>
 8003f44:	4602      	mov	r2, r0
 8003f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff ff5d 	bl	8003e0c <__NVIC_SetPriority>
}
 8003f52:	bf00      	nop
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	4603      	mov	r3, r0
 8003f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff ff31 	bl	8003dd0 <__NVIC_EnableIRQ>
}
 8003f6e:	bf00      	nop
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff ffa2 	bl	8003ec8 <SysTick_Config>
 8003f84:	4603      	mov	r3, r0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e00e      	b.n	8003fbe <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	795b      	ldrb	r3, [r3, #5]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d105      	bne.n	8003fb6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff fca5 	bl	8003900 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b089      	sub	sp, #36	; 0x24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	e16b      	b.n	80042bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	f040 815a 	bne.w	80042b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b01      	cmp	r3, #1
 800400c:	d005      	beq.n	800401a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004016:	2b02      	cmp	r3, #2
 8004018:	d130      	bne.n	800407c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	2203      	movs	r2, #3
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4313      	orrs	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004050:	2201      	movs	r2, #1
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 0201 	and.w	r2, r3, #1
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	2b03      	cmp	r3, #3
 8004086:	d017      	beq.n	80040b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	2203      	movs	r2, #3
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4013      	ands	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d123      	bne.n	800410c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	08da      	lsrs	r2, r3, #3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3208      	adds	r2, #8
 80040cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	220f      	movs	r2, #15
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	08da      	lsrs	r2, r3, #3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3208      	adds	r2, #8
 8004106:	69b9      	ldr	r1, [r7, #24]
 8004108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	2203      	movs	r2, #3
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	43db      	mvns	r3, r3
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4013      	ands	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 0203 	and.w	r2, r3, #3
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4313      	orrs	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80b4 	beq.w	80042b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	4b60      	ldr	r3, [pc, #384]	; (80042d4 <HAL_GPIO_Init+0x30c>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	4a5f      	ldr	r2, [pc, #380]	; (80042d4 <HAL_GPIO_Init+0x30c>)
 8004158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800415c:	6453      	str	r3, [r2, #68]	; 0x44
 800415e:	4b5d      	ldr	r3, [pc, #372]	; (80042d4 <HAL_GPIO_Init+0x30c>)
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800416a:	4a5b      	ldr	r2, [pc, #364]	; (80042d8 <HAL_GPIO_Init+0x310>)
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	089b      	lsrs	r3, r3, #2
 8004170:	3302      	adds	r3, #2
 8004172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	220f      	movs	r2, #15
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	43db      	mvns	r3, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4013      	ands	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a52      	ldr	r2, [pc, #328]	; (80042dc <HAL_GPIO_Init+0x314>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d02b      	beq.n	80041ee <HAL_GPIO_Init+0x226>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a51      	ldr	r2, [pc, #324]	; (80042e0 <HAL_GPIO_Init+0x318>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d025      	beq.n	80041ea <HAL_GPIO_Init+0x222>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a50      	ldr	r2, [pc, #320]	; (80042e4 <HAL_GPIO_Init+0x31c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01f      	beq.n	80041e6 <HAL_GPIO_Init+0x21e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a4f      	ldr	r2, [pc, #316]	; (80042e8 <HAL_GPIO_Init+0x320>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d019      	beq.n	80041e2 <HAL_GPIO_Init+0x21a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a4e      	ldr	r2, [pc, #312]	; (80042ec <HAL_GPIO_Init+0x324>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <HAL_GPIO_Init+0x216>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a4d      	ldr	r2, [pc, #308]	; (80042f0 <HAL_GPIO_Init+0x328>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00d      	beq.n	80041da <HAL_GPIO_Init+0x212>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a4c      	ldr	r2, [pc, #304]	; (80042f4 <HAL_GPIO_Init+0x32c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d007      	beq.n	80041d6 <HAL_GPIO_Init+0x20e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a4b      	ldr	r2, [pc, #300]	; (80042f8 <HAL_GPIO_Init+0x330>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d101      	bne.n	80041d2 <HAL_GPIO_Init+0x20a>
 80041ce:	2307      	movs	r3, #7
 80041d0:	e00e      	b.n	80041f0 <HAL_GPIO_Init+0x228>
 80041d2:	2308      	movs	r3, #8
 80041d4:	e00c      	b.n	80041f0 <HAL_GPIO_Init+0x228>
 80041d6:	2306      	movs	r3, #6
 80041d8:	e00a      	b.n	80041f0 <HAL_GPIO_Init+0x228>
 80041da:	2305      	movs	r3, #5
 80041dc:	e008      	b.n	80041f0 <HAL_GPIO_Init+0x228>
 80041de:	2304      	movs	r3, #4
 80041e0:	e006      	b.n	80041f0 <HAL_GPIO_Init+0x228>
 80041e2:	2303      	movs	r3, #3
 80041e4:	e004      	b.n	80041f0 <HAL_GPIO_Init+0x228>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e002      	b.n	80041f0 <HAL_GPIO_Init+0x228>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <HAL_GPIO_Init+0x228>
 80041ee:	2300      	movs	r3, #0
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	f002 0203 	and.w	r2, r2, #3
 80041f6:	0092      	lsls	r2, r2, #2
 80041f8:	4093      	lsls	r3, r2
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004200:	4935      	ldr	r1, [pc, #212]	; (80042d8 <HAL_GPIO_Init+0x310>)
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	089b      	lsrs	r3, r3, #2
 8004206:	3302      	adds	r3, #2
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800420e:	4b3b      	ldr	r3, [pc, #236]	; (80042fc <HAL_GPIO_Init+0x334>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	43db      	mvns	r3, r3
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	4013      	ands	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004232:	4a32      	ldr	r2, [pc, #200]	; (80042fc <HAL_GPIO_Init+0x334>)
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004238:	4b30      	ldr	r3, [pc, #192]	; (80042fc <HAL_GPIO_Init+0x334>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	43db      	mvns	r3, r3
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4013      	ands	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800425c:	4a27      	ldr	r2, [pc, #156]	; (80042fc <HAL_GPIO_Init+0x334>)
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004262:	4b26      	ldr	r3, [pc, #152]	; (80042fc <HAL_GPIO_Init+0x334>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	43db      	mvns	r3, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4013      	ands	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004286:	4a1d      	ldr	r2, [pc, #116]	; (80042fc <HAL_GPIO_Init+0x334>)
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800428c:	4b1b      	ldr	r3, [pc, #108]	; (80042fc <HAL_GPIO_Init+0x334>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	43db      	mvns	r3, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4013      	ands	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042b0:	4a12      	ldr	r2, [pc, #72]	; (80042fc <HAL_GPIO_Init+0x334>)
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	3301      	adds	r3, #1
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	2b0f      	cmp	r3, #15
 80042c0:	f67f ae90 	bls.w	8003fe4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	3724      	adds	r7, #36	; 0x24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40013800 	.word	0x40013800
 80042dc:	40020000 	.word	0x40020000
 80042e0:	40020400 	.word	0x40020400
 80042e4:	40020800 	.word	0x40020800
 80042e8:	40020c00 	.word	0x40020c00
 80042ec:	40021000 	.word	0x40021000
 80042f0:	40021400 	.word	0x40021400
 80042f4:	40021800 	.word	0x40021800
 80042f8:	40021c00 	.word	0x40021c00
 80042fc:	40013c00 	.word	0x40013c00

08004300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	807b      	strh	r3, [r7, #2]
 800430c:	4613      	mov	r3, r2
 800430e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004310:	787b      	ldrb	r3, [r7, #1]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004316:	887a      	ldrh	r2, [r7, #2]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800431c:	e003      	b.n	8004326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800431e:	887b      	ldrh	r3, [r7, #2]
 8004320:	041a      	lsls	r2, r3, #16
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	619a      	str	r2, [r3, #24]
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004332:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004334:	b08f      	sub	sp, #60	; 0x3c
 8004336:	af0a      	add	r7, sp, #40	; 0x28
 8004338:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e10f      	b.n	8004564 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f014 f91c 	bl	801859c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2203      	movs	r2, #3
 8004368:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d102      	bne.n	800437e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f002 fa67 	bl	8006856 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	603b      	str	r3, [r7, #0]
 800438e:	687e      	ldr	r6, [r7, #4]
 8004390:	466d      	mov	r5, sp
 8004392:	f106 0410 	add.w	r4, r6, #16
 8004396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800439a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800439c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800439e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80043a6:	1d33      	adds	r3, r6, #4
 80043a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043aa:	6838      	ldr	r0, [r7, #0]
 80043ac:	f002 f93e 	bl	800662c <USB_CoreInit>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e0d0      	b.n	8004564 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f002 fa55 	bl	8006878 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
 80043d2:	e04a      	b.n	800446a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043d4:	7bfa      	ldrb	r2, [r7, #15]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	333d      	adds	r3, #61	; 0x3d
 80043e4:	2201      	movs	r2, #1
 80043e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043e8:	7bfa      	ldrb	r2, [r7, #15]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	4413      	add	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	333c      	adds	r3, #60	; 0x3c
 80043f8:	7bfa      	ldrb	r2, [r7, #15]
 80043fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043fc:	7bfa      	ldrb	r2, [r7, #15]
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	b298      	uxth	r0, r3
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	3344      	adds	r3, #68	; 0x44
 8004410:	4602      	mov	r2, r0
 8004412:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004414:	7bfa      	ldrb	r2, [r7, #15]
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	3340      	adds	r3, #64	; 0x40
 8004424:	2200      	movs	r2, #0
 8004426:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004428:	7bfa      	ldrb	r2, [r7, #15]
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	4613      	mov	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	3348      	adds	r3, #72	; 0x48
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800443c:	7bfa      	ldrb	r2, [r7, #15]
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	334c      	adds	r3, #76	; 0x4c
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004450:	7bfa      	ldrb	r2, [r7, #15]
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	3354      	adds	r3, #84	; 0x54
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	3301      	adds	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
 800446a:	7bfa      	ldrb	r2, [r7, #15]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	429a      	cmp	r2, r3
 8004472:	d3af      	bcc.n	80043d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004474:	2300      	movs	r3, #0
 8004476:	73fb      	strb	r3, [r7, #15]
 8004478:	e044      	b.n	8004504 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800447a:	7bfa      	ldrb	r2, [r7, #15]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800448c:	2200      	movs	r2, #0
 800448e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004490:	7bfa      	ldrb	r2, [r7, #15]
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80044a2:	7bfa      	ldrb	r2, [r7, #15]
 80044a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044a6:	7bfa      	ldrb	r2, [r7, #15]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044bc:	7bfa      	ldrb	r2, [r7, #15]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044d2:	7bfa      	ldrb	r2, [r7, #15]
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044e8:	7bfa      	ldrb	r2, [r7, #15]
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	4613      	mov	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	3301      	adds	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
 8004504:	7bfa      	ldrb	r2, [r7, #15]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	429a      	cmp	r2, r3
 800450c:	d3b5      	bcc.n	800447a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	687e      	ldr	r6, [r7, #4]
 8004516:	466d      	mov	r5, sp
 8004518:	f106 0410 	add.w	r4, r6, #16
 800451c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800451e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004524:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004528:	e885 0003 	stmia.w	r5, {r0, r1}
 800452c:	1d33      	adds	r3, r6, #4
 800452e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004530:	6838      	ldr	r0, [r7, #0]
 8004532:	f002 f9ed 	bl	8006910 <USB_DevInit>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e00d      	b.n	8004564 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f003 fb3c 	bl	8007bda <USB_DevDisconnect>

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800456c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_PCD_Start+0x1c>
 8004584:	2302      	movs	r3, #2
 8004586:	e020      	b.n	80045ca <HAL_PCD_Start+0x5e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	2b01      	cmp	r3, #1
 8004596:	d109      	bne.n	80045ac <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800459c:	2b01      	cmp	r3, #1
 800459e:	d005      	beq.n	80045ac <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f002 f93f 	bl	8006834 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f003 faec 	bl	8007b98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80045d2:	b590      	push	{r4, r7, lr}
 80045d4:	b08d      	sub	sp, #52	; 0x34
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f003 fbaa 	bl	8007d42 <USB_GetMode>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f040 848a 	bne.w	8004f0a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f003 fb0e 	bl	8007c1c <USB_ReadInterrupts>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 8480 	beq.w	8004f08 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	0a1b      	lsrs	r3, r3, #8
 8004612:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f003 fafb 	bl	8007c1c <USB_ReadInterrupts>
 8004626:	4603      	mov	r3, r0
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b02      	cmp	r3, #2
 800462e:	d107      	bne.n	8004640 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f002 0202 	and.w	r2, r2, #2
 800463e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f003 fae9 	bl	8007c1c <USB_ReadInterrupts>
 800464a:	4603      	mov	r3, r0
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b10      	cmp	r3, #16
 8004652:	d161      	bne.n	8004718 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0210 	bic.w	r2, r2, #16
 8004662:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	f003 020f 	and.w	r2, r3, #15
 8004670:	4613      	mov	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	4413      	add	r3, r2
 8004680:	3304      	adds	r3, #4
 8004682:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	0c5b      	lsrs	r3, r3, #17
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	2b02      	cmp	r3, #2
 800468e:	d124      	bne.n	80046da <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004696:	4013      	ands	r3, r2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d035      	beq.n	8004708 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	091b      	lsrs	r3, r3, #4
 80046a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80046a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	461a      	mov	r2, r3
 80046ae:	6a38      	ldr	r0, [r7, #32]
 80046b0:	f003 f920 	bl	80078f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	091b      	lsrs	r3, r3, #4
 80046bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046c0:	441a      	add	r2, r3
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	6a1a      	ldr	r2, [r3, #32]
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046d2:	441a      	add	r2, r3
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	621a      	str	r2, [r3, #32]
 80046d8:	e016      	b.n	8004708 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	0c5b      	lsrs	r3, r3, #17
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	2b06      	cmp	r3, #6
 80046e4:	d110      	bne.n	8004708 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046ec:	2208      	movs	r2, #8
 80046ee:	4619      	mov	r1, r3
 80046f0:	6a38      	ldr	r0, [r7, #32]
 80046f2:	f003 f8ff 	bl	80078f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	6a1a      	ldr	r2, [r3, #32]
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004702:	441a      	add	r2, r3
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0210 	orr.w	r2, r2, #16
 8004716:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f003 fa7d 	bl	8007c1c <USB_ReadInterrupts>
 8004722:	4603      	mov	r3, r0
 8004724:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004728:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800472c:	f040 80a7 	bne.w	800487e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f003 fa82 	bl	8007c42 <USB_ReadDevAllOutEpInterrupt>
 800473e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004740:	e099      	b.n	8004876 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 808e 	beq.w	800486a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	4611      	mov	r1, r2
 8004758:	4618      	mov	r0, r3
 800475a:	f003 faa6 	bl	8007caa <USB_ReadDevOutEPInterrupt>
 800475e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00c      	beq.n	8004784 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004776:	461a      	mov	r2, r3
 8004778:	2301      	movs	r3, #1
 800477a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800477c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fec2 	bl	8005508 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00c      	beq.n	80047a8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479a:	461a      	mov	r2, r3
 800479c:	2308      	movs	r3, #8
 800479e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80047a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 ff98 	bl	80056d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047be:	461a      	mov	r2, r3
 80047c0:	2310      	movs	r3, #16
 80047c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d030      	beq.n	8004830 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d6:	2b80      	cmp	r3, #128	; 0x80
 80047d8:	d109      	bne.n	80047ee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047ec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80047ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f0:	4613      	mov	r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	4413      	add	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	4413      	add	r3, r2
 8004800:	3304      	adds	r3, #4
 8004802:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	78db      	ldrb	r3, [r3, #3]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d108      	bne.n	800481e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2200      	movs	r2, #0
 8004810:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	b2db      	uxtb	r3, r3
 8004816:	4619      	mov	r1, r3
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f013 ffc5 	bl	80187a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482a:	461a      	mov	r2, r3
 800482c:	2302      	movs	r3, #2
 800482e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d008      	beq.n	800484c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004846:	461a      	mov	r2, r3
 8004848:	2320      	movs	r3, #32
 800484a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004862:	461a      	mov	r2, r3
 8004864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004868:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	3301      	adds	r3, #1
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	2b00      	cmp	r3, #0
 800487a:	f47f af62 	bne.w	8004742 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f003 f9ca 	bl	8007c1c <USB_ReadInterrupts>
 8004888:	4603      	mov	r3, r0
 800488a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800488e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004892:	f040 80db 	bne.w	8004a4c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f003 f9eb 	bl	8007c76 <USB_ReadDevAllInEpInterrupt>
 80048a0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80048a6:	e0cd      	b.n	8004a44 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80c2 	beq.w	8004a38 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	4611      	mov	r1, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f003 fa11 	bl	8007ce6 <USB_ReadDevInEPInterrupt>
 80048c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d057      	beq.n	8004980 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	2201      	movs	r2, #1
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	43db      	mvns	r3, r3
 80048ea:	69f9      	ldr	r1, [r7, #28]
 80048ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048f0:	4013      	ands	r3, r2
 80048f2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004900:	461a      	mov	r2, r3
 8004902:	2301      	movs	r3, #1
 8004904:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d132      	bne.n	8004974 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004912:	4613      	mov	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	4413      	add	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	440b      	add	r3, r1
 800491c:	334c      	adds	r3, #76	; 0x4c
 800491e:	6819      	ldr	r1, [r3, #0]
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004924:	4613      	mov	r3, r2
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	4413      	add	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4403      	add	r3, r0
 800492e:	3348      	adds	r3, #72	; 0x48
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4419      	add	r1, r3
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004938:	4613      	mov	r3, r2
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	4413      	add	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4403      	add	r3, r0
 8004942:	334c      	adds	r3, #76	; 0x4c
 8004944:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	2b00      	cmp	r3, #0
 800494a:	d113      	bne.n	8004974 <HAL_PCD_IRQHandler+0x3a2>
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004950:	4613      	mov	r3, r2
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	3354      	adds	r3, #84	; 0x54
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d108      	bne.n	8004974 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800496c:	461a      	mov	r2, r3
 800496e:	2101      	movs	r1, #1
 8004970:	f003 fa18 	bl	8007da4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	b2db      	uxtb	r3, r3
 8004978:	4619      	mov	r1, r3
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f013 fe8f 	bl	801869e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d008      	beq.n	800499c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004996:	461a      	mov	r2, r3
 8004998:	2308      	movs	r3, #8
 800499a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b2:	461a      	mov	r2, r3
 80049b4:	2310      	movs	r3, #16
 80049b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d008      	beq.n	80049d4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ce:	461a      	mov	r2, r3
 80049d0:	2340      	movs	r3, #64	; 0x40
 80049d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d023      	beq.n	8004a26 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80049de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049e0:	6a38      	ldr	r0, [r7, #32]
 80049e2:	f002 f8f9 	bl	8006bd8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80049e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e8:	4613      	mov	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	4413      	add	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	3338      	adds	r3, #56	; 0x38
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	4413      	add	r3, r2
 80049f6:	3304      	adds	r3, #4
 80049f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	78db      	ldrb	r3, [r3, #3]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d108      	bne.n	8004a14 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2200      	movs	r2, #0
 8004a06:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f013 fedc 	bl	80187cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	461a      	mov	r2, r3
 8004a22:	2302      	movs	r3, #2
 8004a24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004a30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fcdb 	bl	80053ee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	085b      	lsrs	r3, r3, #1
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f47f af2e 	bne.w	80048a8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f003 f8e3 	bl	8007c1c <USB_ReadInterrupts>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a60:	d122      	bne.n	8004aa8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	69fa      	ldr	r2, [r7, #28]
 8004a6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a70:	f023 0301 	bic.w	r3, r3, #1
 8004a74:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d108      	bne.n	8004a92 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004a88:	2100      	movs	r1, #0
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fec2 	bl	8005814 <HAL_PCDEx_LPM_Callback>
 8004a90:	e002      	b.n	8004a98 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f013 fe7a 	bl	801878c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695a      	ldr	r2, [r3, #20]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f003 f8b5 	bl	8007c1c <USB_ReadInterrupts>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004abc:	d112      	bne.n	8004ae4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d102      	bne.n	8004ad4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f013 fe36 	bl	8018740 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695a      	ldr	r2, [r3, #20]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004ae2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f003 f897 	bl	8007c1c <USB_ReadInterrupts>
 8004aee:	4603      	mov	r3, r0
 8004af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af8:	f040 80b7 	bne.w	8004c6a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2110      	movs	r1, #16
 8004b16:	4618      	mov	r0, r3
 8004b18:	f002 f85e 	bl	8006bd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b20:	e046      	b.n	8004bb0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b34:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b46:	0151      	lsls	r1, r2, #5
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	440a      	add	r2, r1
 8004b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b62:	461a      	mov	r2, r3
 8004b64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b68:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b7a:	0151      	lsls	r1, r2, #5
 8004b7c:	69fa      	ldr	r2, [r7, #28]
 8004b7e:	440a      	add	r2, r1
 8004b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b9a:	0151      	lsls	r1, r2, #5
 8004b9c:	69fa      	ldr	r2, [r7, #28]
 8004b9e:	440a      	add	r2, r1
 8004ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ba8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bac:	3301      	adds	r3, #1
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d3b3      	bcc.n	8004b22 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004bcc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d016      	beq.n	8004c04 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004be6:	f043 030b 	orr.w	r3, r3, #11
 8004bea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bfc:	f043 030b 	orr.w	r3, r3, #11
 8004c00:	6453      	str	r3, [r2, #68]	; 0x44
 8004c02:	e015      	b.n	8004c30 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	69fa      	ldr	r2, [r7, #28]
 8004c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c16:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004c1a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c2a:	f043 030b 	orr.w	r3, r3, #11
 8004c2e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c3e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c42:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6818      	ldr	r0, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c54:	461a      	mov	r2, r3
 8004c56:	f003 f8a5 	bl	8007da4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695a      	ldr	r2, [r3, #20]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f002 ffd4 	bl	8007c1c <USB_ReadInterrupts>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c7e:	d124      	bne.n	8004cca <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f003 f86a 	bl	8007d5e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f002 f81f 	bl	8006cd2 <USB_GetDevSpeed>
 8004c94:	4603      	mov	r3, r0
 8004c96:	461a      	mov	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681c      	ldr	r4, [r3, #0]
 8004ca0:	f001 fa28 	bl	80060f4 <HAL_RCC_GetHCLKFreq>
 8004ca4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f001 fd1e 	bl	80066f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f013 fd1a 	bl	80186ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695a      	ldr	r2, [r3, #20]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004cc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f002 ffa4 	bl	8007c1c <USB_ReadInterrupts>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d10a      	bne.n	8004cf4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f013 fcf7 	bl	80186d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695a      	ldr	r2, [r3, #20]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f002 0208 	and.w	r2, r2, #8
 8004cf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f002 ff8f 	bl	8007c1c <USB_ReadInterrupts>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d04:	2b80      	cmp	r3, #128	; 0x80
 8004d06:	d122      	bne.n	8004d4e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d14:	2301      	movs	r3, #1
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
 8004d18:	e014      	b.n	8004d44 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1e:	4613      	mov	r3, r2
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	4413      	add	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	440b      	add	r3, r1
 8004d28:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d105      	bne.n	8004d3e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	4619      	mov	r1, r3
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fb27 	bl	800538c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	3301      	adds	r3, #1
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d3e5      	bcc.n	8004d1a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f002 ff62 	bl	8007c1c <USB_ReadInterrupts>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d62:	d13b      	bne.n	8004ddc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d64:	2301      	movs	r3, #1
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
 8004d68:	e02b      	b.n	8004dc2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7e:	4613      	mov	r3, r2
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	3340      	adds	r3, #64	; 0x40
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d115      	bne.n	8004dbc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004d90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	da12      	bge.n	8004dbc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	333f      	adds	r3, #63	; 0x3f
 8004da6:	2201      	movs	r2, #1
 8004da8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	4619      	mov	r1, r3
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fae8 	bl	800538c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d3ce      	bcc.n	8004d6a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695a      	ldr	r2, [r3, #20]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f002 ff1b 	bl	8007c1c <USB_ReadInterrupts>
 8004de6:	4603      	mov	r3, r0
 8004de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004df0:	d155      	bne.n	8004e9e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004df2:	2301      	movs	r3, #1
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
 8004df6:	e045      	b.n	8004e84 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d12e      	bne.n	8004e7e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004e20:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	da2b      	bge.n	8004e7e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004e32:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d121      	bne.n	8004e7e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3e:	4613      	mov	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e7a:	6053      	str	r3, [r2, #4]
            break;
 8004e7c:	e007      	b.n	8004e8e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	3301      	adds	r3, #1
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d3b4      	bcc.n	8004df8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004e9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f002 feba 	bl	8007c1c <USB_ReadInterrupts>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb2:	d10a      	bne.n	8004eca <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f013 fc9b 	bl	80187f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	695a      	ldr	r2, [r3, #20]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f002 fea4 	bl	8007c1c <USB_ReadInterrupts>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d115      	bne.n	8004f0a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f013 fc8b 	bl	801880c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6859      	ldr	r1, [r3, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
 8004f06:	e000      	b.n	8004f0a <HAL_PCD_IRQHandler+0x938>
      return;
 8004f08:	bf00      	nop
    }
  }
}
 8004f0a:	3734      	adds	r7, #52	; 0x34
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd90      	pop	{r4, r7, pc}

08004f10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_PCD_SetAddress+0x1a>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e013      	b.n	8004f52 <HAL_PCD_SetAddress+0x42>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	78fa      	ldrb	r2, [r7, #3]
 8004f36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	78fa      	ldrb	r2, [r7, #3]
 8004f40:	4611      	mov	r1, r2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f002 fe02 	bl	8007b4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	4608      	mov	r0, r1
 8004f64:	4611      	mov	r1, r2
 8004f66:	461a      	mov	r2, r3
 8004f68:	4603      	mov	r3, r0
 8004f6a:	70fb      	strb	r3, [r7, #3]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	803b      	strh	r3, [r7, #0]
 8004f70:	4613      	mov	r3, r2
 8004f72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	da0f      	bge.n	8004fa0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	f003 020f 	and.w	r2, r3, #15
 8004f86:	4613      	mov	r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	3338      	adds	r3, #56	; 0x38
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	4413      	add	r3, r2
 8004f94:	3304      	adds	r3, #4
 8004f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	705a      	strb	r2, [r3, #1]
 8004f9e:	e00f      	b.n	8004fc0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	f003 020f 	and.w	r2, r3, #15
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004fcc:	883a      	ldrh	r2, [r7, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	78ba      	ldrb	r2, [r7, #2]
 8004fd6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	785b      	ldrb	r3, [r3, #1]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d004      	beq.n	8004fea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004fea:	78bb      	ldrb	r3, [r7, #2]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d102      	bne.n	8004ff6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_PCD_EP_Open+0xaa>
 8005000:	2302      	movs	r3, #2
 8005002:	e00e      	b.n	8005022 <HAL_PCD_EP_Open+0xc8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68f9      	ldr	r1, [r7, #12]
 8005012:	4618      	mov	r0, r3
 8005014:	f001 fe82 	bl	8006d1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005020:	7afb      	ldrb	r3, [r7, #11]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	460b      	mov	r3, r1
 8005034:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800503a:	2b00      	cmp	r3, #0
 800503c:	da0f      	bge.n	800505e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	f003 020f 	and.w	r2, r3, #15
 8005044:	4613      	mov	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	3338      	adds	r3, #56	; 0x38
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	4413      	add	r3, r2
 8005052:	3304      	adds	r3, #4
 8005054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2201      	movs	r2, #1
 800505a:	705a      	strb	r2, [r3, #1]
 800505c:	e00f      	b.n	800507e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800505e:	78fb      	ldrb	r3, [r7, #3]
 8005060:	f003 020f 	and.w	r2, r3, #15
 8005064:	4613      	mov	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	4413      	add	r3, r2
 8005074:	3304      	adds	r3, #4
 8005076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800507e:	78fb      	ldrb	r3, [r7, #3]
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	b2da      	uxtb	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_PCD_EP_Close+0x6e>
 8005094:	2302      	movs	r3, #2
 8005096:	e00e      	b.n	80050b6 <HAL_PCD_EP_Close+0x8c>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68f9      	ldr	r1, [r7, #12]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f001 fec0 	bl	8006e2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b086      	sub	sp, #24
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	460b      	mov	r3, r1
 80050cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050ce:	7afb      	ldrb	r3, [r7, #11]
 80050d0:	f003 020f 	and.w	r2, r3, #15
 80050d4:	4613      	mov	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	3304      	adds	r3, #4
 80050e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2200      	movs	r2, #0
 80050f8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2200      	movs	r2, #0
 80050fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005100:	7afb      	ldrb	r3, [r7, #11]
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	b2da      	uxtb	r2, r3
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d102      	bne.n	800511a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800511a:	7afb      	ldrb	r3, [r7, #11]
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	2b00      	cmp	r3, #0
 8005122:	d109      	bne.n	8005138 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6818      	ldr	r0, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	461a      	mov	r2, r3
 8005130:	6979      	ldr	r1, [r7, #20]
 8005132:	f002 f99f 	bl	8007474 <USB_EP0StartXfer>
 8005136:	e008      	b.n	800514a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6818      	ldr	r0, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	461a      	mov	r2, r3
 8005144:	6979      	ldr	r1, [r7, #20]
 8005146:	f001 ff4d 	bl	8006fe4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	f003 020f 	and.w	r2, r3, #15
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4613      	mov	r3, r2
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005176:	681b      	ldr	r3, [r3, #0]
}
 8005178:	4618      	mov	r0, r3
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	607a      	str	r2, [r7, #4]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	460b      	mov	r3, r1
 8005192:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005194:	7afb      	ldrb	r3, [r7, #11]
 8005196:	f003 020f 	and.w	r2, r3, #15
 800519a:	4613      	mov	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	3338      	adds	r3, #56	; 0x38
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4413      	add	r3, r2
 80051a8:	3304      	adds	r3, #4
 80051aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2200      	movs	r2, #0
 80051bc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2201      	movs	r2, #1
 80051c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051c4:	7afb      	ldrb	r3, [r7, #11]
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d102      	bne.n	80051de <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051de:	7afb      	ldrb	r3, [r7, #11]
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d109      	bne.n	80051fc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6818      	ldr	r0, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	6979      	ldr	r1, [r7, #20]
 80051f6:	f002 f93d 	bl	8007474 <USB_EP0StartXfer>
 80051fa:	e008      	b.n	800520e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6818      	ldr	r0, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	b2db      	uxtb	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	6979      	ldr	r1, [r7, #20]
 800520a:	f001 feeb 	bl	8006fe4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	460b      	mov	r3, r1
 8005222:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	f003 020f 	and.w	r2, r3, #15
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	429a      	cmp	r2, r3
 8005230:	d901      	bls.n	8005236 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e050      	b.n	80052d8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800523a:	2b00      	cmp	r3, #0
 800523c:	da0f      	bge.n	800525e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800523e:	78fb      	ldrb	r3, [r7, #3]
 8005240:	f003 020f 	and.w	r2, r3, #15
 8005244:	4613      	mov	r3, r2
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	3338      	adds	r3, #56	; 0x38
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	4413      	add	r3, r2
 8005252:	3304      	adds	r3, #4
 8005254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2201      	movs	r2, #1
 800525a:	705a      	strb	r2, [r3, #1]
 800525c:	e00d      	b.n	800527a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800525e:	78fa      	ldrb	r2, [r7, #3]
 8005260:	4613      	mov	r3, r2
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	4413      	add	r3, r2
 8005270:	3304      	adds	r3, #4
 8005272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005280:	78fb      	ldrb	r3, [r7, #3]
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	b2da      	uxtb	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005292:	2b01      	cmp	r3, #1
 8005294:	d101      	bne.n	800529a <HAL_PCD_EP_SetStall+0x82>
 8005296:	2302      	movs	r3, #2
 8005298:	e01e      	b.n	80052d8 <HAL_PCD_EP_SetStall+0xc0>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68f9      	ldr	r1, [r7, #12]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f002 fb7b 	bl	80079a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80052ae:	78fb      	ldrb	r3, [r7, #3]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10a      	bne.n	80052ce <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	b2d9      	uxtb	r1, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80052c8:	461a      	mov	r2, r3
 80052ca:	f002 fd6b 	bl	8007da4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80052ec:	78fb      	ldrb	r3, [r7, #3]
 80052ee:	f003 020f 	and.w	r2, r3, #15
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d901      	bls.n	80052fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e042      	b.n	8005384 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005302:	2b00      	cmp	r3, #0
 8005304:	da0f      	bge.n	8005326 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005306:	78fb      	ldrb	r3, [r7, #3]
 8005308:	f003 020f 	and.w	r2, r3, #15
 800530c:	4613      	mov	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	3338      	adds	r3, #56	; 0x38
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	4413      	add	r3, r2
 800531a:	3304      	adds	r3, #4
 800531c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	705a      	strb	r2, [r3, #1]
 8005324:	e00f      	b.n	8005346 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005326:	78fb      	ldrb	r3, [r7, #3]
 8005328:	f003 020f 	and.w	r2, r3, #15
 800532c:	4613      	mov	r3, r2
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	4413      	add	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	4413      	add	r3, r2
 800533c:	3304      	adds	r3, #4
 800533e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	b2da      	uxtb	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_PCD_EP_ClrStall+0x86>
 8005362:	2302      	movs	r3, #2
 8005364:	e00e      	b.n	8005384 <HAL_PCD_EP_ClrStall+0xa4>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68f9      	ldr	r1, [r7, #12]
 8005374:	4618      	mov	r0, r3
 8005376:	f002 fb83 	bl	8007a80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800539c:	2b00      	cmp	r3, #0
 800539e:	da0c      	bge.n	80053ba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	f003 020f 	and.w	r2, r3, #15
 80053a6:	4613      	mov	r3, r2
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	3338      	adds	r3, #56	; 0x38
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	4413      	add	r3, r2
 80053b4:	3304      	adds	r3, #4
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	e00c      	b.n	80053d4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	f003 020f 	and.w	r2, r3, #15
 80053c0:	4613      	mov	r3, r2
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	4413      	add	r3, r2
 80053d0:	3304      	adds	r3, #4
 80053d2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68f9      	ldr	r1, [r7, #12]
 80053da:	4618      	mov	r0, r3
 80053dc:	f002 f9a2 	bl	8007724 <USB_EPStopXfer>
 80053e0:	4603      	mov	r3, r0
 80053e2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80053e4:	7afb      	ldrb	r3, [r7, #11]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b08a      	sub	sp, #40	; 0x28
 80053f2:	af02      	add	r7, sp, #8
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	4613      	mov	r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	3338      	adds	r3, #56	; 0x38
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4413      	add	r3, r2
 8005412:	3304      	adds	r3, #4
 8005414:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1a      	ldr	r2, [r3, #32]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	429a      	cmp	r2, r3
 8005420:	d901      	bls.n	8005426 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e06c      	b.n	8005500 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	429a      	cmp	r2, r3
 800543a:	d902      	bls.n	8005442 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	3303      	adds	r3, #3
 8005446:	089b      	lsrs	r3, r3, #2
 8005448:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800544a:	e02b      	b.n	80054a4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	699a      	ldr	r2, [r3, #24]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	429a      	cmp	r2, r3
 8005460:	d902      	bls.n	8005468 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	3303      	adds	r3, #3
 800546c:	089b      	lsrs	r3, r3, #2
 800546e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6919      	ldr	r1, [r3, #16]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	b2da      	uxtb	r2, r3
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005480:	b2db      	uxtb	r3, r3
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	4603      	mov	r3, r0
 8005486:	6978      	ldr	r0, [r7, #20]
 8005488:	f002 f9f6 	bl	8007878 <USB_WritePacket>

    ep->xfer_buff  += len;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	441a      	add	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a1a      	ldr	r2, [r3, #32]
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	441a      	add	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d809      	bhi.n	80054ce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6a1a      	ldr	r2, [r3, #32]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d203      	bcs.n	80054ce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1be      	bne.n	800544c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d811      	bhi.n	80054fe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	2201      	movs	r2, #1
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	43db      	mvns	r3, r3
 80054f4:	6939      	ldr	r1, [r7, #16]
 80054f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054fa:	4013      	ands	r3, r2
 80054fc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3720      	adds	r7, #32
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	333c      	adds	r3, #60	; 0x3c
 8005520:	3304      	adds	r3, #4
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d17b      	bne.n	8005636 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b00      	cmp	r3, #0
 8005546:	d015      	beq.n	8005574 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	4a61      	ldr	r2, [pc, #388]	; (80056d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	f240 80b9 	bls.w	80056c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 80b3 	beq.w	80056c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556a:	461a      	mov	r2, r3
 800556c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005570:	6093      	str	r3, [r2, #8]
 8005572:	e0a7      	b.n	80056c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	d009      	beq.n	8005592 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558a:	461a      	mov	r2, r3
 800558c:	2320      	movs	r3, #32
 800558e:	6093      	str	r3, [r2, #8]
 8005590:	e098      	b.n	80056c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005598:	2b00      	cmp	r3, #0
 800559a:	f040 8093 	bne.w	80056c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	4a4b      	ldr	r2, [pc, #300]	; (80056d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d90f      	bls.n	80055c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055bc:	461a      	mov	r2, r3
 80055be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055c2:	6093      	str	r3, [r2, #8]
 80055c4:	e07e      	b.n	80056c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	4613      	mov	r3, r2
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	4413      	add	r3, r2
 80055d8:	3304      	adds	r3, #4
 80055da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	0159      	lsls	r1, r3, #5
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	440b      	add	r3, r1
 80055e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055f2:	1ad2      	subs	r2, r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d114      	bne.n	8005628 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005610:	461a      	mov	r2, r3
 8005612:	2101      	movs	r1, #1
 8005614:	f002 fbc6 	bl	8007da4 <USB_EP0_OutStart>
 8005618:	e006      	b.n	8005628 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	441a      	add	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f013 f81a 	bl	8018668 <HAL_PCD_DataOutStageCallback>
 8005634:	e046      	b.n	80056c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	4a26      	ldr	r2, [pc, #152]	; (80056d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d124      	bne.n	8005688 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005654:	461a      	mov	r2, r3
 8005656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800565a:	6093      	str	r3, [r2, #8]
 800565c:	e032      	b.n	80056c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b00      	cmp	r3, #0
 8005666:	d008      	beq.n	800567a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005674:	461a      	mov	r2, r3
 8005676:	2320      	movs	r3, #32
 8005678:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	b2db      	uxtb	r3, r3
 800567e:	4619      	mov	r1, r3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f012 fff1 	bl	8018668 <HAL_PCD_DataOutStageCallback>
 8005686:	e01d      	b.n	80056c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d114      	bne.n	80056b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	4613      	mov	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d108      	bne.n	80056b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80056b0:	461a      	mov	r2, r3
 80056b2:	2100      	movs	r1, #0
 80056b4:	f002 fb76 	bl	8007da4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f012 ffd2 	bl	8018668 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	4f54300a 	.word	0x4f54300a
 80056d4:	4f54310a 	.word	0x4f54310a

080056d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	333c      	adds	r3, #60	; 0x3c
 80056f0:	3304      	adds	r3, #4
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4a15      	ldr	r2, [pc, #84]	; (8005760 <PCD_EP_OutSetupPacket_int+0x88>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d90e      	bls.n	800572c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005714:	2b00      	cmp	r3, #0
 8005716:	d009      	beq.n	800572c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005724:	461a      	mov	r2, r3
 8005726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800572a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f012 ff89 	bl	8018644 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4a0a      	ldr	r2, [pc, #40]	; (8005760 <PCD_EP_OutSetupPacket_int+0x88>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d90c      	bls.n	8005754 <PCD_EP_OutSetupPacket_int+0x7c>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d108      	bne.n	8005754 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800574c:	461a      	mov	r2, r3
 800574e:	2101      	movs	r1, #1
 8005750:	f002 fb28 	bl	8007da4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	4f54300a 	.word	0x4f54300a

08005764 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	70fb      	strb	r3, [r7, #3]
 8005770:	4613      	mov	r3, r2
 8005772:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d107      	bne.n	8005792 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005782:	883b      	ldrh	r3, [r7, #0]
 8005784:	0419      	lsls	r1, r3, #16
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	430a      	orrs	r2, r1
 800578e:	629a      	str	r2, [r3, #40]	; 0x28
 8005790:	e028      	b.n	80057e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	0c1b      	lsrs	r3, r3, #16
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	4413      	add	r3, r2
 800579e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80057a0:	2300      	movs	r3, #0
 80057a2:	73fb      	strb	r3, [r7, #15]
 80057a4:	e00d      	b.n	80057c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	3340      	adds	r3, #64	; 0x40
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	0c1b      	lsrs	r3, r3, #16
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	4413      	add	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	3301      	adds	r3, #1
 80057c0:	73fb      	strb	r3, [r7, #15]
 80057c2:	7bfa      	ldrb	r2, [r7, #15]
 80057c4:	78fb      	ldrb	r3, [r7, #3]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d3ec      	bcc.n	80057a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80057cc:	883b      	ldrh	r3, [r7, #0]
 80057ce:	0418      	lsls	r0, r3, #16
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6819      	ldr	r1, [r3, #0]
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	4302      	orrs	r2, r0
 80057dc:	3340      	adds	r3, #64	; 0x40
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	460b      	mov	r3, r1
 80057fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	887a      	ldrh	r2, [r7, #2]
 8005804:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e267      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d075      	beq.n	8005936 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800584a:	4b88      	ldr	r3, [pc, #544]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f003 030c 	and.w	r3, r3, #12
 8005852:	2b04      	cmp	r3, #4
 8005854:	d00c      	beq.n	8005870 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005856:	4b85      	ldr	r3, [pc, #532]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800585e:	2b08      	cmp	r3, #8
 8005860:	d112      	bne.n	8005888 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005862:	4b82      	ldr	r3, [pc, #520]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800586a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800586e:	d10b      	bne.n	8005888 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005870:	4b7e      	ldr	r3, [pc, #504]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d05b      	beq.n	8005934 <HAL_RCC_OscConfig+0x108>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d157      	bne.n	8005934 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e242      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005890:	d106      	bne.n	80058a0 <HAL_RCC_OscConfig+0x74>
 8005892:	4b76      	ldr	r3, [pc, #472]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a75      	ldr	r2, [pc, #468]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 8005898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	e01d      	b.n	80058dc <HAL_RCC_OscConfig+0xb0>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058a8:	d10c      	bne.n	80058c4 <HAL_RCC_OscConfig+0x98>
 80058aa:	4b70      	ldr	r3, [pc, #448]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a6f      	ldr	r2, [pc, #444]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 80058b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	4b6d      	ldr	r3, [pc, #436]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a6c      	ldr	r2, [pc, #432]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 80058bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	e00b      	b.n	80058dc <HAL_RCC_OscConfig+0xb0>
 80058c4:	4b69      	ldr	r3, [pc, #420]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a68      	ldr	r2, [pc, #416]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 80058ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	4b66      	ldr	r3, [pc, #408]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a65      	ldr	r2, [pc, #404]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 80058d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d013      	beq.n	800590c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e4:	f7fe fa12 	bl	8003d0c <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058ec:	f7fe fa0e 	bl	8003d0c <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b64      	cmp	r3, #100	; 0x64
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e207      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058fe:	4b5b      	ldr	r3, [pc, #364]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f0      	beq.n	80058ec <HAL_RCC_OscConfig+0xc0>
 800590a:	e014      	b.n	8005936 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800590c:	f7fe f9fe 	bl	8003d0c <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005914:	f7fe f9fa 	bl	8003d0c <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b64      	cmp	r3, #100	; 0x64
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e1f3      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005926:	4b51      	ldr	r3, [pc, #324]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1f0      	bne.n	8005914 <HAL_RCC_OscConfig+0xe8>
 8005932:	e000      	b.n	8005936 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d063      	beq.n	8005a0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005942:	4b4a      	ldr	r3, [pc, #296]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 030c 	and.w	r3, r3, #12
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800594e:	4b47      	ldr	r3, [pc, #284]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005956:	2b08      	cmp	r3, #8
 8005958:	d11c      	bne.n	8005994 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800595a:	4b44      	ldr	r3, [pc, #272]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d116      	bne.n	8005994 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005966:	4b41      	ldr	r3, [pc, #260]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d005      	beq.n	800597e <HAL_RCC_OscConfig+0x152>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d001      	beq.n	800597e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e1c7      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800597e:	4b3b      	ldr	r3, [pc, #236]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	4937      	ldr	r1, [pc, #220]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 800598e:	4313      	orrs	r3, r2
 8005990:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005992:	e03a      	b.n	8005a0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d020      	beq.n	80059de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800599c:	4b34      	ldr	r3, [pc, #208]	; (8005a70 <HAL_RCC_OscConfig+0x244>)
 800599e:	2201      	movs	r2, #1
 80059a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a2:	f7fe f9b3 	bl	8003d0c <HAL_GetTick>
 80059a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a8:	e008      	b.n	80059bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059aa:	f7fe f9af 	bl	8003d0c <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d901      	bls.n	80059bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e1a8      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059bc:	4b2b      	ldr	r3, [pc, #172]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0f0      	beq.n	80059aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c8:	4b28      	ldr	r3, [pc, #160]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	4925      	ldr	r1, [pc, #148]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	600b      	str	r3, [r1, #0]
 80059dc:	e015      	b.n	8005a0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059de:	4b24      	ldr	r3, [pc, #144]	; (8005a70 <HAL_RCC_OscConfig+0x244>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e4:	f7fe f992 	bl	8003d0c <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ec:	f7fe f98e 	bl	8003d0c <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e187      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059fe:	4b1b      	ldr	r3, [pc, #108]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f0      	bne.n	80059ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0308 	and.w	r3, r3, #8
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d036      	beq.n	8005a84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d016      	beq.n	8005a4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a1e:	4b15      	ldr	r3, [pc, #84]	; (8005a74 <HAL_RCC_OscConfig+0x248>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a24:	f7fe f972 	bl	8003d0c <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a2c:	f7fe f96e 	bl	8003d0c <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e167      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a3e:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <HAL_RCC_OscConfig+0x240>)
 8005a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0f0      	beq.n	8005a2c <HAL_RCC_OscConfig+0x200>
 8005a4a:	e01b      	b.n	8005a84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a4c:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <HAL_RCC_OscConfig+0x248>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a52:	f7fe f95b 	bl	8003d0c <HAL_GetTick>
 8005a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a58:	e00e      	b.n	8005a78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a5a:	f7fe f957 	bl	8003d0c <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d907      	bls.n	8005a78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e150      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	42470000 	.word	0x42470000
 8005a74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a78:	4b88      	ldr	r3, [pc, #544]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1ea      	bne.n	8005a5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8097 	beq.w	8005bc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a92:	2300      	movs	r3, #0
 8005a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a96:	4b81      	ldr	r3, [pc, #516]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10f      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60bb      	str	r3, [r7, #8]
 8005aa6:	4b7d      	ldr	r3, [pc, #500]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	4a7c      	ldr	r2, [pc, #496]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ab2:	4b7a      	ldr	r3, [pc, #488]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aba:	60bb      	str	r3, [r7, #8]
 8005abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac2:	4b77      	ldr	r3, [pc, #476]	; (8005ca0 <HAL_RCC_OscConfig+0x474>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d118      	bne.n	8005b00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ace:	4b74      	ldr	r3, [pc, #464]	; (8005ca0 <HAL_RCC_OscConfig+0x474>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a73      	ldr	r2, [pc, #460]	; (8005ca0 <HAL_RCC_OscConfig+0x474>)
 8005ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ada:	f7fe f917 	bl	8003d0c <HAL_GetTick>
 8005ade:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae0:	e008      	b.n	8005af4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ae2:	f7fe f913 	bl	8003d0c <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e10c      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005af4:	4b6a      	ldr	r3, [pc, #424]	; (8005ca0 <HAL_RCC_OscConfig+0x474>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0f0      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d106      	bne.n	8005b16 <HAL_RCC_OscConfig+0x2ea>
 8005b08:	4b64      	ldr	r3, [pc, #400]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0c:	4a63      	ldr	r2, [pc, #396]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005b0e:	f043 0301 	orr.w	r3, r3, #1
 8005b12:	6713      	str	r3, [r2, #112]	; 0x70
 8005b14:	e01c      	b.n	8005b50 <HAL_RCC_OscConfig+0x324>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2b05      	cmp	r3, #5
 8005b1c:	d10c      	bne.n	8005b38 <HAL_RCC_OscConfig+0x30c>
 8005b1e:	4b5f      	ldr	r3, [pc, #380]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b22:	4a5e      	ldr	r2, [pc, #376]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005b24:	f043 0304 	orr.w	r3, r3, #4
 8005b28:	6713      	str	r3, [r2, #112]	; 0x70
 8005b2a:	4b5c      	ldr	r3, [pc, #368]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2e:	4a5b      	ldr	r2, [pc, #364]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005b30:	f043 0301 	orr.w	r3, r3, #1
 8005b34:	6713      	str	r3, [r2, #112]	; 0x70
 8005b36:	e00b      	b.n	8005b50 <HAL_RCC_OscConfig+0x324>
 8005b38:	4b58      	ldr	r3, [pc, #352]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3c:	4a57      	ldr	r2, [pc, #348]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005b3e:	f023 0301 	bic.w	r3, r3, #1
 8005b42:	6713      	str	r3, [r2, #112]	; 0x70
 8005b44:	4b55      	ldr	r3, [pc, #340]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b48:	4a54      	ldr	r2, [pc, #336]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005b4a:	f023 0304 	bic.w	r3, r3, #4
 8005b4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d015      	beq.n	8005b84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b58:	f7fe f8d8 	bl	8003d0c <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b5e:	e00a      	b.n	8005b76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b60:	f7fe f8d4 	bl	8003d0c <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e0cb      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b76:	4b49      	ldr	r3, [pc, #292]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0ee      	beq.n	8005b60 <HAL_RCC_OscConfig+0x334>
 8005b82:	e014      	b.n	8005bae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b84:	f7fe f8c2 	bl	8003d0c <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b8a:	e00a      	b.n	8005ba2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b8c:	f7fe f8be 	bl	8003d0c <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e0b5      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ba2:	4b3e      	ldr	r3, [pc, #248]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1ee      	bne.n	8005b8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bae:	7dfb      	ldrb	r3, [r7, #23]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d105      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bb4:	4b39      	ldr	r3, [pc, #228]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	4a38      	ldr	r2, [pc, #224]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 80a1 	beq.w	8005d0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bca:	4b34      	ldr	r3, [pc, #208]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 030c 	and.w	r3, r3, #12
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d05c      	beq.n	8005c90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d141      	bne.n	8005c62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bde:	4b31      	ldr	r3, [pc, #196]	; (8005ca4 <HAL_RCC_OscConfig+0x478>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be4:	f7fe f892 	bl	8003d0c <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bec:	f7fe f88e 	bl	8003d0c <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e087      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bfe:	4b27      	ldr	r3, [pc, #156]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f0      	bne.n	8005bec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	69da      	ldr	r2, [r3, #28]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	019b      	lsls	r3, r3, #6
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c20:	085b      	lsrs	r3, r3, #1
 8005c22:	3b01      	subs	r3, #1
 8005c24:	041b      	lsls	r3, r3, #16
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	061b      	lsls	r3, r3, #24
 8005c2e:	491b      	ldr	r1, [pc, #108]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c34:	4b1b      	ldr	r3, [pc, #108]	; (8005ca4 <HAL_RCC_OscConfig+0x478>)
 8005c36:	2201      	movs	r2, #1
 8005c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c3a:	f7fe f867 	bl	8003d0c <HAL_GetTick>
 8005c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c40:	e008      	b.n	8005c54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c42:	f7fe f863 	bl	8003d0c <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d901      	bls.n	8005c54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e05c      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c54:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0f0      	beq.n	8005c42 <HAL_RCC_OscConfig+0x416>
 8005c60:	e054      	b.n	8005d0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c62:	4b10      	ldr	r3, [pc, #64]	; (8005ca4 <HAL_RCC_OscConfig+0x478>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c68:	f7fe f850 	bl	8003d0c <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c70:	f7fe f84c 	bl	8003d0c <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e045      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c82:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <HAL_RCC_OscConfig+0x470>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1f0      	bne.n	8005c70 <HAL_RCC_OscConfig+0x444>
 8005c8e:	e03d      	b.n	8005d0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d107      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e038      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	40007000 	.word	0x40007000
 8005ca4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ca8:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <HAL_RCC_OscConfig+0x4ec>)
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d028      	beq.n	8005d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d121      	bne.n	8005d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d11a      	bne.n	8005d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cd8:	4013      	ands	r3, r2
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d111      	bne.n	8005d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cee:	085b      	lsrs	r3, r3, #1
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d107      	bne.n	8005d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d001      	beq.n	8005d0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	40023800 	.word	0x40023800

08005d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e0cc      	b.n	8005eca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d30:	4b68      	ldr	r3, [pc, #416]	; (8005ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d90c      	bls.n	8005d58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d3e:	4b65      	ldr	r3, [pc, #404]	; (8005ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d46:	4b63      	ldr	r3, [pc, #396]	; (8005ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0307 	and.w	r3, r3, #7
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d001      	beq.n	8005d58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e0b8      	b.n	8005eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d020      	beq.n	8005da6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d005      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d70:	4b59      	ldr	r3, [pc, #356]	; (8005ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	4a58      	ldr	r2, [pc, #352]	; (8005ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0308 	and.w	r3, r3, #8
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d005      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d88:	4b53      	ldr	r3, [pc, #332]	; (8005ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	4a52      	ldr	r2, [pc, #328]	; (8005ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d94:	4b50      	ldr	r3, [pc, #320]	; (8005ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	494d      	ldr	r1, [pc, #308]	; (8005ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d044      	beq.n	8005e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d107      	bne.n	8005dca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dba:	4b47      	ldr	r3, [pc, #284]	; (8005ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d119      	bne.n	8005dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e07f      	b.n	8005eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d003      	beq.n	8005dda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d107      	bne.n	8005dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dda:	4b3f      	ldr	r3, [pc, #252]	; (8005ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d109      	bne.n	8005dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e06f      	b.n	8005eca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dea:	4b3b      	ldr	r3, [pc, #236]	; (8005ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e067      	b.n	8005eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dfa:	4b37      	ldr	r3, [pc, #220]	; (8005ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f023 0203 	bic.w	r2, r3, #3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	4934      	ldr	r1, [pc, #208]	; (8005ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e0c:	f7fd ff7e 	bl	8003d0c <HAL_GetTick>
 8005e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e12:	e00a      	b.n	8005e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e14:	f7fd ff7a 	bl	8003d0c <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e04f      	b.n	8005eca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e2a:	4b2b      	ldr	r3, [pc, #172]	; (8005ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 020c 	and.w	r2, r3, #12
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d1eb      	bne.n	8005e14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e3c:	4b25      	ldr	r3, [pc, #148]	; (8005ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d20c      	bcs.n	8005e64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e4a:	4b22      	ldr	r3, [pc, #136]	; (8005ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e52:	4b20      	ldr	r3, [pc, #128]	; (8005ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d001      	beq.n	8005e64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e032      	b.n	8005eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d008      	beq.n	8005e82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e70:	4b19      	ldr	r3, [pc, #100]	; (8005ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	4916      	ldr	r1, [pc, #88]	; (8005ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0308 	and.w	r3, r3, #8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d009      	beq.n	8005ea2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e8e:	4b12      	ldr	r3, [pc, #72]	; (8005ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	490e      	ldr	r1, [pc, #56]	; (8005ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ea2:	f000 f821 	bl	8005ee8 <HAL_RCC_GetSysClockFreq>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	091b      	lsrs	r3, r3, #4
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	490a      	ldr	r1, [pc, #40]	; (8005edc <HAL_RCC_ClockConfig+0x1c0>)
 8005eb4:	5ccb      	ldrb	r3, [r1, r3]
 8005eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eba:	4a09      	ldr	r2, [pc, #36]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ebe:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fd fede 	bl	8003c84 <HAL_InitTick>

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40023c00 	.word	0x40023c00
 8005ed8:	40023800 	.word	0x40023800
 8005edc:	0801f624 	.word	0x0801f624
 8005ee0:	20000040 	.word	0x20000040
 8005ee4:	20000044 	.word	0x20000044

08005ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eec:	b094      	sub	sp, #80	; 0x50
 8005eee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ef8:	2300      	movs	r3, #0
 8005efa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f00:	4b79      	ldr	r3, [pc, #484]	; (80060e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f003 030c 	and.w	r3, r3, #12
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d00d      	beq.n	8005f28 <HAL_RCC_GetSysClockFreq+0x40>
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	f200 80e1 	bhi.w	80060d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <HAL_RCC_GetSysClockFreq+0x34>
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d003      	beq.n	8005f22 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f1a:	e0db      	b.n	80060d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f1c:	4b73      	ldr	r3, [pc, #460]	; (80060ec <HAL_RCC_GetSysClockFreq+0x204>)
 8005f1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005f20:	e0db      	b.n	80060da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f22:	4b73      	ldr	r3, [pc, #460]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005f24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f26:	e0d8      	b.n	80060da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f28:	4b6f      	ldr	r3, [pc, #444]	; (80060e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f32:	4b6d      	ldr	r3, [pc, #436]	; (80060e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d063      	beq.n	8006006 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f3e:	4b6a      	ldr	r3, [pc, #424]	; (80060e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	099b      	lsrs	r3, r3, #6
 8005f44:	2200      	movs	r2, #0
 8005f46:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f50:	633b      	str	r3, [r7, #48]	; 0x30
 8005f52:	2300      	movs	r3, #0
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34
 8005f56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f5a:	4622      	mov	r2, r4
 8005f5c:	462b      	mov	r3, r5
 8005f5e:	f04f 0000 	mov.w	r0, #0
 8005f62:	f04f 0100 	mov.w	r1, #0
 8005f66:	0159      	lsls	r1, r3, #5
 8005f68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f6c:	0150      	lsls	r0, r2, #5
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4621      	mov	r1, r4
 8005f74:	1a51      	subs	r1, r2, r1
 8005f76:	6139      	str	r1, [r7, #16]
 8005f78:	4629      	mov	r1, r5
 8005f7a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	f04f 0200 	mov.w	r2, #0
 8005f84:	f04f 0300 	mov.w	r3, #0
 8005f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f8c:	4659      	mov	r1, fp
 8005f8e:	018b      	lsls	r3, r1, #6
 8005f90:	4651      	mov	r1, sl
 8005f92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f96:	4651      	mov	r1, sl
 8005f98:	018a      	lsls	r2, r1, #6
 8005f9a:	4651      	mov	r1, sl
 8005f9c:	ebb2 0801 	subs.w	r8, r2, r1
 8005fa0:	4659      	mov	r1, fp
 8005fa2:	eb63 0901 	sbc.w	r9, r3, r1
 8005fa6:	f04f 0200 	mov.w	r2, #0
 8005faa:	f04f 0300 	mov.w	r3, #0
 8005fae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fba:	4690      	mov	r8, r2
 8005fbc:	4699      	mov	r9, r3
 8005fbe:	4623      	mov	r3, r4
 8005fc0:	eb18 0303 	adds.w	r3, r8, r3
 8005fc4:	60bb      	str	r3, [r7, #8]
 8005fc6:	462b      	mov	r3, r5
 8005fc8:	eb49 0303 	adc.w	r3, r9, r3
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	f04f 0200 	mov.w	r2, #0
 8005fd2:	f04f 0300 	mov.w	r3, #0
 8005fd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005fda:	4629      	mov	r1, r5
 8005fdc:	024b      	lsls	r3, r1, #9
 8005fde:	4621      	mov	r1, r4
 8005fe0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	024a      	lsls	r2, r1, #9
 8005fe8:	4610      	mov	r0, r2
 8005fea:	4619      	mov	r1, r3
 8005fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fee:	2200      	movs	r2, #0
 8005ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ff4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ff8:	f7fa fea0 	bl	8000d3c <__aeabi_uldivmod>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4613      	mov	r3, r2
 8006002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006004:	e058      	b.n	80060b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006006:	4b38      	ldr	r3, [pc, #224]	; (80060e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	099b      	lsrs	r3, r3, #6
 800600c:	2200      	movs	r2, #0
 800600e:	4618      	mov	r0, r3
 8006010:	4611      	mov	r1, r2
 8006012:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006016:	623b      	str	r3, [r7, #32]
 8006018:	2300      	movs	r3, #0
 800601a:	627b      	str	r3, [r7, #36]	; 0x24
 800601c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006020:	4642      	mov	r2, r8
 8006022:	464b      	mov	r3, r9
 8006024:	f04f 0000 	mov.w	r0, #0
 8006028:	f04f 0100 	mov.w	r1, #0
 800602c:	0159      	lsls	r1, r3, #5
 800602e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006032:	0150      	lsls	r0, r2, #5
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4641      	mov	r1, r8
 800603a:	ebb2 0a01 	subs.w	sl, r2, r1
 800603e:	4649      	mov	r1, r9
 8006040:	eb63 0b01 	sbc.w	fp, r3, r1
 8006044:	f04f 0200 	mov.w	r2, #0
 8006048:	f04f 0300 	mov.w	r3, #0
 800604c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006050:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006054:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006058:	ebb2 040a 	subs.w	r4, r2, sl
 800605c:	eb63 050b 	sbc.w	r5, r3, fp
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	00eb      	lsls	r3, r5, #3
 800606a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800606e:	00e2      	lsls	r2, r4, #3
 8006070:	4614      	mov	r4, r2
 8006072:	461d      	mov	r5, r3
 8006074:	4643      	mov	r3, r8
 8006076:	18e3      	adds	r3, r4, r3
 8006078:	603b      	str	r3, [r7, #0]
 800607a:	464b      	mov	r3, r9
 800607c:	eb45 0303 	adc.w	r3, r5, r3
 8006080:	607b      	str	r3, [r7, #4]
 8006082:	f04f 0200 	mov.w	r2, #0
 8006086:	f04f 0300 	mov.w	r3, #0
 800608a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800608e:	4629      	mov	r1, r5
 8006090:	028b      	lsls	r3, r1, #10
 8006092:	4621      	mov	r1, r4
 8006094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006098:	4621      	mov	r1, r4
 800609a:	028a      	lsls	r2, r1, #10
 800609c:	4610      	mov	r0, r2
 800609e:	4619      	mov	r1, r3
 80060a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a2:	2200      	movs	r2, #0
 80060a4:	61bb      	str	r3, [r7, #24]
 80060a6:	61fa      	str	r2, [r7, #28]
 80060a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060ac:	f7fa fe46 	bl	8000d3c <__aeabi_uldivmod>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4613      	mov	r3, r2
 80060b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060b8:	4b0b      	ldr	r3, [pc, #44]	; (80060e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	0c1b      	lsrs	r3, r3, #16
 80060be:	f003 0303 	and.w	r3, r3, #3
 80060c2:	3301      	adds	r3, #1
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80060c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060d2:	e002      	b.n	80060da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <HAL_RCC_GetSysClockFreq+0x204>)
 80060d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3750      	adds	r7, #80	; 0x50
 80060e0:	46bd      	mov	sp, r7
 80060e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060e6:	bf00      	nop
 80060e8:	40023800 	.word	0x40023800
 80060ec:	00f42400 	.word	0x00f42400
 80060f0:	007a1200 	.word	0x007a1200

080060f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060f8:	4b03      	ldr	r3, [pc, #12]	; (8006108 <HAL_RCC_GetHCLKFreq+0x14>)
 80060fa:	681b      	ldr	r3, [r3, #0]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	20000040 	.word	0x20000040

0800610c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e07b      	b.n	8006216 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	2b00      	cmp	r3, #0
 8006124:	d108      	bne.n	8006138 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800612e:	d009      	beq.n	8006144 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	61da      	str	r2, [r3, #28]
 8006136:	e005      	b.n	8006144 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fd fbf0 	bl	8003944 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2202      	movs	r2, #2
 8006168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800617a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800618c:	431a      	orrs	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	431a      	orrs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c8:	ea42 0103 	orr.w	r1, r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	0c1b      	lsrs	r3, r3, #16
 80061e2:	f003 0104 	and.w	r1, r3, #4
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	f003 0210 	and.w	r2, r3, #16
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69da      	ldr	r2, [r3, #28]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006204:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b088      	sub	sp, #32
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	603b      	str	r3, [r7, #0]
 800622a:	4613      	mov	r3, r2
 800622c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_SPI_Transmit+0x22>
 800623c:	2302      	movs	r3, #2
 800623e:	e126      	b.n	800648e <HAL_SPI_Transmit+0x270>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006248:	f7fd fd60 	bl	8003d0c <HAL_GetTick>
 800624c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800624e:	88fb      	ldrh	r3, [r7, #6]
 8006250:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b01      	cmp	r3, #1
 800625c:	d002      	beq.n	8006264 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800625e:	2302      	movs	r3, #2
 8006260:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006262:	e10b      	b.n	800647c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <HAL_SPI_Transmit+0x52>
 800626a:	88fb      	ldrh	r3, [r7, #6]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d102      	bne.n	8006276 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006274:	e102      	b.n	800647c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2203      	movs	r2, #3
 800627a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	88fa      	ldrh	r2, [r7, #6]
 800628e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	88fa      	ldrh	r2, [r7, #6]
 8006294:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062bc:	d10f      	bne.n	80062de <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e8:	2b40      	cmp	r3, #64	; 0x40
 80062ea:	d007      	beq.n	80062fc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006304:	d14b      	bne.n	800639e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <HAL_SPI_Transmit+0xf6>
 800630e:	8afb      	ldrh	r3, [r7, #22]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d13e      	bne.n	8006392 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006318:	881a      	ldrh	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	1c9a      	adds	r2, r3, #2
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800632e:	b29b      	uxth	r3, r3
 8006330:	3b01      	subs	r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006338:	e02b      	b.n	8006392 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b02      	cmp	r3, #2
 8006346:	d112      	bne.n	800636e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634c:	881a      	ldrh	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006358:	1c9a      	adds	r2, r3, #2
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006362:	b29b      	uxth	r3, r3
 8006364:	3b01      	subs	r3, #1
 8006366:	b29a      	uxth	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	86da      	strh	r2, [r3, #54]	; 0x36
 800636c:	e011      	b.n	8006392 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800636e:	f7fd fccd 	bl	8003d0c <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d803      	bhi.n	8006386 <HAL_SPI_Transmit+0x168>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006384:	d102      	bne.n	800638c <HAL_SPI_Transmit+0x16e>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006390:	e074      	b.n	800647c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1ce      	bne.n	800633a <HAL_SPI_Transmit+0x11c>
 800639c:	e04c      	b.n	8006438 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <HAL_SPI_Transmit+0x18e>
 80063a6:	8afb      	ldrh	r3, [r7, #22]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d140      	bne.n	800642e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	330c      	adds	r3, #12
 80063b6:	7812      	ldrb	r2, [r2, #0]
 80063b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	3b01      	subs	r3, #1
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063d2:	e02c      	b.n	800642e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d113      	bne.n	800640a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	330c      	adds	r3, #12
 80063ec:	7812      	ldrb	r2, [r2, #0]
 80063ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	86da      	strh	r2, [r3, #54]	; 0x36
 8006408:	e011      	b.n	800642e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800640a:	f7fd fc7f 	bl	8003d0c <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d803      	bhi.n	8006422 <HAL_SPI_Transmit+0x204>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006420:	d102      	bne.n	8006428 <HAL_SPI_Transmit+0x20a>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d102      	bne.n	800642e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800642c:	e026      	b.n	800647c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006432:	b29b      	uxth	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1cd      	bne.n	80063d4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f8b3 	bl	80065a8 <SPI_EndRxTxTransaction>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006456:	2300      	movs	r3, #0
 8006458:	613b      	str	r3, [r7, #16]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	613b      	str	r3, [r7, #16]
 800646a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	77fb      	strb	r3, [r7, #31]
 8006478:	e000      	b.n	800647c <HAL_SPI_Transmit+0x25e>
  }

error:
 800647a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800648c:	7ffb      	ldrb	r3, [r7, #31]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3720      	adds	r7, #32
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	4613      	mov	r3, r2
 80064a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064a8:	f7fd fc30 	bl	8003d0c <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	1a9b      	subs	r3, r3, r2
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	4413      	add	r3, r2
 80064b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064b8:	f7fd fc28 	bl	8003d0c <HAL_GetTick>
 80064bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064be:	4b39      	ldr	r3, [pc, #228]	; (80065a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	015b      	lsls	r3, r3, #5
 80064c4:	0d1b      	lsrs	r3, r3, #20
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	fb02 f303 	mul.w	r3, r2, r3
 80064cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064ce:	e054      	b.n	800657a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d6:	d050      	beq.n	800657a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064d8:	f7fd fc18 	bl	8003d0c <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	69fa      	ldr	r2, [r7, #28]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d902      	bls.n	80064ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d13d      	bne.n	800656a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006506:	d111      	bne.n	800652c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006510:	d004      	beq.n	800651c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800651a:	d107      	bne.n	800652c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800652a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006534:	d10f      	bne.n	8006556 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006554:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e017      	b.n	800659a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006570:	2300      	movs	r3, #0
 8006572:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	3b01      	subs	r3, #1
 8006578:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4013      	ands	r3, r2
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	429a      	cmp	r2, r3
 8006588:	bf0c      	ite	eq
 800658a:	2301      	moveq	r3, #1
 800658c:	2300      	movne	r3, #0
 800658e:	b2db      	uxtb	r3, r3
 8006590:	461a      	mov	r2, r3
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	429a      	cmp	r2, r3
 8006596:	d19b      	bne.n	80064d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3720      	adds	r7, #32
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20000040 	.word	0x20000040

080065a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af02      	add	r7, sp, #8
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80065b4:	4b1b      	ldr	r3, [pc, #108]	; (8006624 <SPI_EndRxTxTransaction+0x7c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1b      	ldr	r2, [pc, #108]	; (8006628 <SPI_EndRxTxTransaction+0x80>)
 80065ba:	fba2 2303 	umull	r2, r3, r2, r3
 80065be:	0d5b      	lsrs	r3, r3, #21
 80065c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065c4:	fb02 f303 	mul.w	r3, r2, r3
 80065c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065d2:	d112      	bne.n	80065fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2200      	movs	r2, #0
 80065dc:	2180      	movs	r1, #128	; 0x80
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f7ff ff5a 	bl	8006498 <SPI_WaitFlagStateUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d016      	beq.n	8006618 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ee:	f043 0220 	orr.w	r2, r3, #32
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e00f      	b.n	800661a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00a      	beq.n	8006616 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	3b01      	subs	r3, #1
 8006604:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006610:	2b80      	cmp	r3, #128	; 0x80
 8006612:	d0f2      	beq.n	80065fa <SPI_EndRxTxTransaction+0x52>
 8006614:	e000      	b.n	8006618 <SPI_EndRxTxTransaction+0x70>
        break;
 8006616:	bf00      	nop
  }

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20000040 	.word	0x20000040
 8006628:	165e9f81 	.word	0x165e9f81

0800662c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800662c:	b084      	sub	sp, #16
 800662e:	b580      	push	{r7, lr}
 8006630:	b084      	sub	sp, #16
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	f107 001c 	add.w	r0, r7, #28
 800663a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	2b01      	cmp	r3, #1
 8006642:	d122      	bne.n	800668a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800666c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666e:	2b01      	cmp	r3, #1
 8006670:	d105      	bne.n	800667e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f001 fbee 	bl	8007e60 <USB_CoreReset>
 8006684:	4603      	mov	r3, r0
 8006686:	73fb      	strb	r3, [r7, #15]
 8006688:	e01a      	b.n	80066c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f001 fbe2 	bl	8007e60 <USB_CoreReset>
 800669c:	4603      	mov	r3, r0
 800669e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80066a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d106      	bne.n	80066b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	639a      	str	r2, [r3, #56]	; 0x38
 80066b2:	e005      	b.n	80066c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d10b      	bne.n	80066de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f043 0206 	orr.w	r2, r3, #6
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f043 0220 	orr.w	r2, r3, #32
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80066de:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066ea:	b004      	add	sp, #16
 80066ec:	4770      	bx	lr
	...

080066f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	4613      	mov	r3, r2
 80066fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	2b02      	cmp	r3, #2
 8006702:	d165      	bne.n	80067d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4a41      	ldr	r2, [pc, #260]	; (800680c <USB_SetTurnaroundTime+0x11c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d906      	bls.n	800671a <USB_SetTurnaroundTime+0x2a>
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4a40      	ldr	r2, [pc, #256]	; (8006810 <USB_SetTurnaroundTime+0x120>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d202      	bcs.n	800671a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006714:	230f      	movs	r3, #15
 8006716:	617b      	str	r3, [r7, #20]
 8006718:	e062      	b.n	80067e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	4a3c      	ldr	r2, [pc, #240]	; (8006810 <USB_SetTurnaroundTime+0x120>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d306      	bcc.n	8006730 <USB_SetTurnaroundTime+0x40>
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	4a3b      	ldr	r2, [pc, #236]	; (8006814 <USB_SetTurnaroundTime+0x124>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d202      	bcs.n	8006730 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800672a:	230e      	movs	r3, #14
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	e057      	b.n	80067e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	4a38      	ldr	r2, [pc, #224]	; (8006814 <USB_SetTurnaroundTime+0x124>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d306      	bcc.n	8006746 <USB_SetTurnaroundTime+0x56>
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4a37      	ldr	r2, [pc, #220]	; (8006818 <USB_SetTurnaroundTime+0x128>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d202      	bcs.n	8006746 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006740:	230d      	movs	r3, #13
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	e04c      	b.n	80067e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	4a33      	ldr	r2, [pc, #204]	; (8006818 <USB_SetTurnaroundTime+0x128>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d306      	bcc.n	800675c <USB_SetTurnaroundTime+0x6c>
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	4a32      	ldr	r2, [pc, #200]	; (800681c <USB_SetTurnaroundTime+0x12c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d802      	bhi.n	800675c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006756:	230c      	movs	r3, #12
 8006758:	617b      	str	r3, [r7, #20]
 800675a:	e041      	b.n	80067e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4a2f      	ldr	r2, [pc, #188]	; (800681c <USB_SetTurnaroundTime+0x12c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d906      	bls.n	8006772 <USB_SetTurnaroundTime+0x82>
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	4a2e      	ldr	r2, [pc, #184]	; (8006820 <USB_SetTurnaroundTime+0x130>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d802      	bhi.n	8006772 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800676c:	230b      	movs	r3, #11
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	e036      	b.n	80067e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	4a2a      	ldr	r2, [pc, #168]	; (8006820 <USB_SetTurnaroundTime+0x130>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d906      	bls.n	8006788 <USB_SetTurnaroundTime+0x98>
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	4a29      	ldr	r2, [pc, #164]	; (8006824 <USB_SetTurnaroundTime+0x134>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d802      	bhi.n	8006788 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006782:	230a      	movs	r3, #10
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	e02b      	b.n	80067e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	4a26      	ldr	r2, [pc, #152]	; (8006824 <USB_SetTurnaroundTime+0x134>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d906      	bls.n	800679e <USB_SetTurnaroundTime+0xae>
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	4a25      	ldr	r2, [pc, #148]	; (8006828 <USB_SetTurnaroundTime+0x138>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d202      	bcs.n	800679e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006798:	2309      	movs	r3, #9
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	e020      	b.n	80067e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	4a21      	ldr	r2, [pc, #132]	; (8006828 <USB_SetTurnaroundTime+0x138>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d306      	bcc.n	80067b4 <USB_SetTurnaroundTime+0xc4>
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	4a20      	ldr	r2, [pc, #128]	; (800682c <USB_SetTurnaroundTime+0x13c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d802      	bhi.n	80067b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80067ae:	2308      	movs	r3, #8
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	e015      	b.n	80067e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	4a1d      	ldr	r2, [pc, #116]	; (800682c <USB_SetTurnaroundTime+0x13c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d906      	bls.n	80067ca <USB_SetTurnaroundTime+0xda>
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4a1c      	ldr	r2, [pc, #112]	; (8006830 <USB_SetTurnaroundTime+0x140>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d202      	bcs.n	80067ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80067c4:	2307      	movs	r3, #7
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	e00a      	b.n	80067e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80067ca:	2306      	movs	r3, #6
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	e007      	b.n	80067e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80067d0:	79fb      	ldrb	r3, [r7, #7]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d102      	bne.n	80067dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80067d6:	2309      	movs	r3, #9
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	e001      	b.n	80067e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80067dc:	2309      	movs	r3, #9
 80067de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	029b      	lsls	r3, r3, #10
 80067f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80067f8:	431a      	orrs	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	00d8acbf 	.word	0x00d8acbf
 8006810:	00e4e1c0 	.word	0x00e4e1c0
 8006814:	00f42400 	.word	0x00f42400
 8006818:	01067380 	.word	0x01067380
 800681c:	011a499f 	.word	0x011a499f
 8006820:	01312cff 	.word	0x01312cff
 8006824:	014ca43f 	.word	0x014ca43f
 8006828:	016e3600 	.word	0x016e3600
 800682c:	01a6ab1f 	.word	0x01a6ab1f
 8006830:	01e84800 	.word	0x01e84800

08006834 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f043 0201 	orr.w	r2, r3, #1
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f023 0201 	bic.w	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d115      	bne.n	80068c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068a6:	2001      	movs	r0, #1
 80068a8:	f7fd fa3c 	bl	8003d24 <HAL_Delay>
      ms++;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	3301      	adds	r3, #1
 80068b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 fa45 	bl	8007d42 <USB_GetMode>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d01e      	beq.n	80068fc <USB_SetCurrentMode+0x84>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b31      	cmp	r3, #49	; 0x31
 80068c2:	d9f0      	bls.n	80068a6 <USB_SetCurrentMode+0x2e>
 80068c4:	e01a      	b.n	80068fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068c6:	78fb      	ldrb	r3, [r7, #3]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d115      	bne.n	80068f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068d8:	2001      	movs	r0, #1
 80068da:	f7fd fa23 	bl	8003d24 <HAL_Delay>
      ms++;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3301      	adds	r3, #1
 80068e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f001 fa2c 	bl	8007d42 <USB_GetMode>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <USB_SetCurrentMode+0x84>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2b31      	cmp	r3, #49	; 0x31
 80068f4:	d9f0      	bls.n	80068d8 <USB_SetCurrentMode+0x60>
 80068f6:	e001      	b.n	80068fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e005      	b.n	8006908 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2b32      	cmp	r3, #50	; 0x32
 8006900:	d101      	bne.n	8006906 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e000      	b.n	8006908 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006910:	b084      	sub	sp, #16
 8006912:	b580      	push	{r7, lr}
 8006914:	b086      	sub	sp, #24
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800691e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800692a:	2300      	movs	r3, #0
 800692c:	613b      	str	r3, [r7, #16]
 800692e:	e009      	b.n	8006944 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	3340      	adds	r3, #64	; 0x40
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	2200      	movs	r2, #0
 800693c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	3301      	adds	r3, #1
 8006942:	613b      	str	r3, [r7, #16]
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	2b0e      	cmp	r3, #14
 8006948:	d9f2      	bls.n	8006930 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800694a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800694c:	2b00      	cmp	r3, #0
 800694e:	d11c      	bne.n	800698a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800695e:	f043 0302 	orr.w	r3, r3, #2
 8006962:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006968:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006974:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006980:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	639a      	str	r2, [r3, #56]	; 0x38
 8006988:	e00b      	b.n	80069a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069a8:	461a      	mov	r2, r3
 80069aa:	2300      	movs	r3, #0
 80069ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b4:	4619      	mov	r1, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069bc:	461a      	mov	r2, r3
 80069be:	680b      	ldr	r3, [r1, #0]
 80069c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d10c      	bne.n	80069e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80069c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d104      	bne.n	80069d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80069ce:	2100      	movs	r1, #0
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f965 	bl	8006ca0 <USB_SetDevSpeed>
 80069d6:	e008      	b.n	80069ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80069d8:	2101      	movs	r1, #1
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f960 	bl	8006ca0 <USB_SetDevSpeed>
 80069e0:	e003      	b.n	80069ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069e2:	2103      	movs	r1, #3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f95b 	bl	8006ca0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069ea:	2110      	movs	r1, #16
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f8f3 	bl	8006bd8 <USB_FlushTxFifo>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f91f 	bl	8006c40 <USB_FlushRxFifo>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a12:	461a      	mov	r2, r3
 8006a14:	2300      	movs	r3, #0
 8006a16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1e:	461a      	mov	r2, r3
 8006a20:	2300      	movs	r3, #0
 8006a22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a30:	2300      	movs	r3, #0
 8006a32:	613b      	str	r3, [r7, #16]
 8006a34:	e043      	b.n	8006abe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a4c:	d118      	bne.n	8006a80 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a60:	461a      	mov	r2, r3
 8006a62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a66:	6013      	str	r3, [r2, #0]
 8006a68:	e013      	b.n	8006a92 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a76:	461a      	mov	r2, r3
 8006a78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	e008      	b.n	8006a92 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	2300      	movs	r3, #0
 8006a90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ab6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	3301      	adds	r3, #1
 8006abc:	613b      	str	r3, [r7, #16]
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d3b7      	bcc.n	8006a36 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	613b      	str	r3, [r7, #16]
 8006aca:	e043      	b.n	8006b54 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ae2:	d118      	bne.n	8006b16 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10a      	bne.n	8006b00 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af6:	461a      	mov	r2, r3
 8006af8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	e013      	b.n	8006b28 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b12:	6013      	str	r3, [r2, #0]
 8006b14:	e008      	b.n	8006b28 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b22:	461a      	mov	r2, r3
 8006b24:	2300      	movs	r3, #0
 8006b26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b34:	461a      	mov	r2, r3
 8006b36:	2300      	movs	r3, #0
 8006b38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b46:	461a      	mov	r2, r3
 8006b48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	3301      	adds	r3, #1
 8006b52:	613b      	str	r3, [r7, #16]
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d3b7      	bcc.n	8006acc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d105      	bne.n	8006b90 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	f043 0210 	orr.w	r2, r3, #16
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	699a      	ldr	r2, [r3, #24]
 8006b94:	4b0f      	ldr	r3, [pc, #60]	; (8006bd4 <USB_DevInit+0x2c4>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d005      	beq.n	8006bae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	f043 0208 	orr.w	r2, r3, #8
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d107      	bne.n	8006bc4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bbc:	f043 0304 	orr.w	r3, r3, #4
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bd0:	b004      	add	sp, #16
 8006bd2:	4770      	bx	lr
 8006bd4:	803c3800 	.word	0x803c3800

08006bd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3301      	adds	r3, #1
 8006bea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4a13      	ldr	r2, [pc, #76]	; (8006c3c <USB_FlushTxFifo+0x64>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d901      	bls.n	8006bf8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e01b      	b.n	8006c30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	daf2      	bge.n	8006be6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	019b      	lsls	r3, r3, #6
 8006c08:	f043 0220 	orr.w	r2, r3, #32
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3301      	adds	r3, #1
 8006c14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <USB_FlushTxFifo+0x64>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d901      	bls.n	8006c22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e006      	b.n	8006c30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	d0f0      	beq.n	8006c10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	00030d40 	.word	0x00030d40

08006c40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4a11      	ldr	r2, [pc, #68]	; (8006c9c <USB_FlushRxFifo+0x5c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d901      	bls.n	8006c5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e018      	b.n	8006c90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	daf2      	bge.n	8006c4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2210      	movs	r2, #16
 8006c6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	3301      	adds	r3, #1
 8006c74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4a08      	ldr	r2, [pc, #32]	; (8006c9c <USB_FlushRxFifo+0x5c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d901      	bls.n	8006c82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e006      	b.n	8006c90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	f003 0310 	and.w	r3, r3, #16
 8006c8a:	2b10      	cmp	r3, #16
 8006c8c:	d0f0      	beq.n	8006c70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	00030d40 	.word	0x00030d40

08006ca0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	68f9      	ldr	r1, [r7, #12]
 8006cbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b087      	sub	sp, #28
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f003 0306 	and.w	r3, r3, #6
 8006cea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d102      	bne.n	8006cf8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	75fb      	strb	r3, [r7, #23]
 8006cf6:	e00a      	b.n	8006d0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d002      	beq.n	8006d04 <USB_GetDevSpeed+0x32>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b06      	cmp	r3, #6
 8006d02:	d102      	bne.n	8006d0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006d04:	2302      	movs	r3, #2
 8006d06:	75fb      	strb	r3, [r7, #23]
 8006d08:	e001      	b.n	8006d0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006d0a:	230f      	movs	r3, #15
 8006d0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	371c      	adds	r7, #28
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	785b      	ldrb	r3, [r3, #1]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d13a      	bne.n	8006dae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3e:	69da      	ldr	r2, [r3, #28]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	f003 030f 	and.w	r3, r3, #15
 8006d48:	2101      	movs	r1, #1
 8006d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	68f9      	ldr	r1, [r7, #12]
 8006d52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d56:	4313      	orrs	r3, r2
 8006d58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d155      	bne.n	8006e1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	791b      	ldrb	r3, [r3, #4]
 8006d8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	059b      	lsls	r3, r3, #22
 8006d92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d94:	4313      	orrs	r3, r2
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	0151      	lsls	r1, r2, #5
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	440a      	add	r2, r1
 8006d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	e036      	b.n	8006e1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db4:	69da      	ldr	r2, [r3, #28]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	f003 030f 	and.w	r3, r3, #15
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc4:	041b      	lsls	r3, r3, #16
 8006dc6:	68f9      	ldr	r1, [r7, #12]
 8006dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d11a      	bne.n	8006e1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	791b      	ldrb	r3, [r3, #4]
 8006e00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006e02:	430b      	orrs	r3, r1
 8006e04:	4313      	orrs	r3, r2
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	0151      	lsls	r1, r2, #5
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	440a      	add	r2, r1
 8006e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
	...

08006e2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d161      	bne.n	8006f0c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e5e:	d11f      	bne.n	8006ea0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	0151      	lsls	r1, r2, #5
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	440a      	add	r2, r1
 8006e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	0151      	lsls	r1, r2, #5
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	440a      	add	r2, r1
 8006e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	f003 030f 	and.w	r3, r3, #15
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	43db      	mvns	r3, r3
 8006eba:	68f9      	ldr	r1, [r7, #12]
 8006ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eca:	69da      	ldr	r2, [r3, #28]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	f003 030f 	and.w	r3, r3, #15
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	43db      	mvns	r3, r3
 8006ede:	68f9      	ldr	r1, [r7, #12]
 8006ee0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	0159      	lsls	r1, r3, #5
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	440b      	add	r3, r1
 8006efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f02:	4619      	mov	r1, r3
 8006f04:	4b35      	ldr	r3, [pc, #212]	; (8006fdc <USB_DeactivateEndpoint+0x1b0>)
 8006f06:	4013      	ands	r3, r2
 8006f08:	600b      	str	r3, [r1, #0]
 8006f0a:	e060      	b.n	8006fce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f22:	d11f      	bne.n	8006f64 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	0151      	lsls	r1, r2, #5
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	440a      	add	r2, r1
 8006f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f42:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	f003 030f 	and.w	r3, r3, #15
 8006f74:	2101      	movs	r1, #1
 8006f76:	fa01 f303 	lsl.w	r3, r1, r3
 8006f7a:	041b      	lsls	r3, r3, #16
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	68f9      	ldr	r1, [r7, #12]
 8006f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f84:	4013      	ands	r3, r2
 8006f86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8e:	69da      	ldr	r2, [r3, #28]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	f003 030f 	and.w	r3, r3, #15
 8006f98:	2101      	movs	r1, #1
 8006f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f9e:	041b      	lsls	r3, r3, #16
 8006fa0:	43db      	mvns	r3, r3
 8006fa2:	68f9      	ldr	r1, [r7, #12]
 8006fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fa8:	4013      	ands	r3, r2
 8006faa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	0159      	lsls	r1, r3, #5
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	440b      	add	r3, r1
 8006fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <USB_DeactivateEndpoint+0x1b4>)
 8006fca:	4013      	ands	r3, r2
 8006fcc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	ec337800 	.word	0xec337800
 8006fe0:	eff37800 	.word	0xeff37800

08006fe4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08a      	sub	sp, #40	; 0x28
 8006fe8:	af02      	add	r7, sp, #8
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	785b      	ldrb	r3, [r3, #1]
 8007000:	2b01      	cmp	r3, #1
 8007002:	f040 815c 	bne.w	80072be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d132      	bne.n	8007074 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	0151      	lsls	r1, r2, #5
 8007020:	69fa      	ldr	r2, [r7, #28]
 8007022:	440a      	add	r2, r1
 8007024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007028:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800702c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007030:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	0151      	lsls	r1, r2, #5
 8007044:	69fa      	ldr	r2, [r7, #28]
 8007046:	440a      	add	r2, r1
 8007048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800704c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007050:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	4413      	add	r3, r2
 800705a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	0151      	lsls	r1, r2, #5
 8007064:	69fa      	ldr	r2, [r7, #28]
 8007066:	440a      	add	r2, r1
 8007068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800706c:	0cdb      	lsrs	r3, r3, #19
 800706e:	04db      	lsls	r3, r3, #19
 8007070:	6113      	str	r3, [r2, #16]
 8007072:	e074      	b.n	800715e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	4413      	add	r3, r2
 800707c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	0151      	lsls	r1, r2, #5
 8007086:	69fa      	ldr	r2, [r7, #28]
 8007088:	440a      	add	r2, r1
 800708a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800708e:	0cdb      	lsrs	r3, r3, #19
 8007090:	04db      	lsls	r3, r3, #19
 8007092:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	0151      	lsls	r1, r2, #5
 80070a6:	69fa      	ldr	r2, [r7, #28]
 80070a8:	440a      	add	r2, r1
 80070aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	6999      	ldr	r1, [r3, #24]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	440b      	add	r3, r1
 80070d0:	1e59      	subs	r1, r3, #1
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80070da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80070dc:	4b9d      	ldr	r3, [pc, #628]	; (8007354 <USB_EPStartXfer+0x370>)
 80070de:	400b      	ands	r3, r1
 80070e0:	69b9      	ldr	r1, [r7, #24]
 80070e2:	0148      	lsls	r0, r1, #5
 80070e4:	69f9      	ldr	r1, [r7, #28]
 80070e6:	4401      	add	r1, r0
 80070e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070ec:	4313      	orrs	r3, r2
 80070ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fc:	691a      	ldr	r2, [r3, #16]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007106:	69b9      	ldr	r1, [r7, #24]
 8007108:	0148      	lsls	r0, r1, #5
 800710a:	69f9      	ldr	r1, [r7, #28]
 800710c:	4401      	add	r1, r0
 800710e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007112:	4313      	orrs	r3, r2
 8007114:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	791b      	ldrb	r3, [r3, #4]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d11f      	bne.n	800715e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	0151      	lsls	r1, r2, #5
 8007130:	69fa      	ldr	r2, [r7, #28]
 8007132:	440a      	add	r2, r1
 8007134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007138:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800713c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	4413      	add	r3, r2
 8007146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	0151      	lsls	r1, r2, #5
 8007150:	69fa      	ldr	r2, [r7, #28]
 8007152:	440a      	add	r2, r1
 8007154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007158:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800715c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800715e:	79fb      	ldrb	r3, [r7, #7]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d14b      	bne.n	80071fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d009      	beq.n	8007180 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007178:	461a      	mov	r2, r3
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	791b      	ldrb	r3, [r3, #4]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d128      	bne.n	80071da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007194:	2b00      	cmp	r3, #0
 8007196:	d110      	bne.n	80071ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	0151      	lsls	r1, r2, #5
 80071aa:	69fa      	ldr	r2, [r7, #28]
 80071ac:	440a      	add	r2, r1
 80071ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	e00f      	b.n	80071da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	69ba      	ldr	r2, [r7, #24]
 80071ca:	0151      	lsls	r1, r2, #5
 80071cc:	69fa      	ldr	r2, [r7, #28]
 80071ce:	440a      	add	r2, r1
 80071d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	015a      	lsls	r2, r3, #5
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	0151      	lsls	r1, r2, #5
 80071ec:	69fa      	ldr	r2, [r7, #28]
 80071ee:	440a      	add	r2, r1
 80071f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	e133      	b.n	8007464 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	0151      	lsls	r1, r2, #5
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	440a      	add	r2, r1
 8007212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007216:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800721a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	791b      	ldrb	r3, [r3, #4]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d015      	beq.n	8007250 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 811b 	beq.w	8007464 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	f003 030f 	and.w	r3, r3, #15
 800723e:	2101      	movs	r1, #1
 8007240:	fa01 f303 	lsl.w	r3, r1, r3
 8007244:	69f9      	ldr	r1, [r7, #28]
 8007246:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800724a:	4313      	orrs	r3, r2
 800724c:	634b      	str	r3, [r1, #52]	; 0x34
 800724e:	e109      	b.n	8007464 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725c:	2b00      	cmp	r3, #0
 800725e:	d110      	bne.n	8007282 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	0151      	lsls	r1, r2, #5
 8007272:	69fa      	ldr	r2, [r7, #28]
 8007274:	440a      	add	r2, r1
 8007276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800727e:	6013      	str	r3, [r2, #0]
 8007280:	e00f      	b.n	80072a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	0151      	lsls	r1, r2, #5
 8007294:	69fa      	ldr	r2, [r7, #28]
 8007296:	440a      	add	r2, r1
 8007298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800729c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	6919      	ldr	r1, [r3, #16]
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	781a      	ldrb	r2, [r3, #0]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	b298      	uxth	r0, r3
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	4603      	mov	r3, r0
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 fade 	bl	8007878 <USB_WritePacket>
 80072bc:	e0d2      	b.n	8007464 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	0151      	lsls	r1, r2, #5
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	440a      	add	r2, r1
 80072d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d8:	0cdb      	lsrs	r3, r3, #19
 80072da:	04db      	lsls	r3, r3, #19
 80072dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	0151      	lsls	r1, r2, #5
 80072f0:	69fa      	ldr	r2, [r7, #28]
 80072f2:	440a      	add	r2, r1
 80072f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007300:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d126      	bne.n	8007358 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007316:	691a      	ldr	r2, [r3, #16]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007320:	69b9      	ldr	r1, [r7, #24]
 8007322:	0148      	lsls	r0, r1, #5
 8007324:	69f9      	ldr	r1, [r7, #28]
 8007326:	4401      	add	r1, r0
 8007328:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800732c:	4313      	orrs	r3, r2
 800732e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	0151      	lsls	r1, r2, #5
 8007342:	69fa      	ldr	r2, [r7, #28]
 8007344:	440a      	add	r2, r1
 8007346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800734a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800734e:	6113      	str	r3, [r2, #16]
 8007350:	e03a      	b.n	80073c8 <USB_EPStartXfer+0x3e4>
 8007352:	bf00      	nop
 8007354:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	699a      	ldr	r2, [r3, #24]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	4413      	add	r3, r2
 8007362:	1e5a      	subs	r2, r3, #1
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	fbb2 f3f3 	udiv	r3, r2, r3
 800736c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	8afa      	ldrh	r2, [r7, #22]
 8007374:	fb03 f202 	mul.w	r2, r3, r2
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007388:	691a      	ldr	r2, [r3, #16]
 800738a:	8afb      	ldrh	r3, [r7, #22]
 800738c:	04d9      	lsls	r1, r3, #19
 800738e:	4b38      	ldr	r3, [pc, #224]	; (8007470 <USB_EPStartXfer+0x48c>)
 8007390:	400b      	ands	r3, r1
 8007392:	69b9      	ldr	r1, [r7, #24]
 8007394:	0148      	lsls	r0, r1, #5
 8007396:	69f9      	ldr	r1, [r7, #28]
 8007398:	4401      	add	r1, r0
 800739a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800739e:	4313      	orrs	r3, r2
 80073a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ae:	691a      	ldr	r2, [r3, #16]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073b8:	69b9      	ldr	r1, [r7, #24]
 80073ba:	0148      	lsls	r0, r1, #5
 80073bc:	69f9      	ldr	r1, [r7, #28]
 80073be:	4401      	add	r1, r0
 80073c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073c4:	4313      	orrs	r3, r2
 80073c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d10d      	bne.n	80073ea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d009      	beq.n	80073ea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	6919      	ldr	r1, [r3, #16]
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e6:	460a      	mov	r2, r1
 80073e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	791b      	ldrb	r3, [r3, #4]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d128      	bne.n	8007444 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d110      	bne.n	8007424 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	0151      	lsls	r1, r2, #5
 8007414:	69fa      	ldr	r2, [r7, #28]
 8007416:	440a      	add	r2, r1
 8007418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800741c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	e00f      	b.n	8007444 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	69ba      	ldr	r2, [r7, #24]
 8007434:	0151      	lsls	r1, r2, #5
 8007436:	69fa      	ldr	r2, [r7, #28]
 8007438:	440a      	add	r2, r1
 800743a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800743e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007442:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	0151      	lsls	r1, r2, #5
 8007456:	69fa      	ldr	r2, [r7, #28]
 8007458:	440a      	add	r2, r1
 800745a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800745e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007462:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3720      	adds	r7, #32
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	1ff80000 	.word	0x1ff80000

08007474 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	4613      	mov	r3, r2
 8007480:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	785b      	ldrb	r3, [r3, #1]
 8007490:	2b01      	cmp	r3, #1
 8007492:	f040 80ce 	bne.w	8007632 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d132      	bne.n	8007504 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	0151      	lsls	r1, r2, #5
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	440a      	add	r2, r1
 80074b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	0151      	lsls	r1, r2, #5
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	440a      	add	r2, r1
 80074d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	0151      	lsls	r1, r2, #5
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	440a      	add	r2, r1
 80074f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074fc:	0cdb      	lsrs	r3, r3, #19
 80074fe:	04db      	lsls	r3, r3, #19
 8007500:	6113      	str	r3, [r2, #16]
 8007502:	e04e      	b.n	80075a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	0151      	lsls	r1, r2, #5
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	440a      	add	r2, r1
 800751a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800751e:	0cdb      	lsrs	r3, r3, #19
 8007520:	04db      	lsls	r3, r3, #19
 8007522:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	0151      	lsls	r1, r2, #5
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	440a      	add	r2, r1
 800753a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800753e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007542:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007546:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	699a      	ldr	r2, [r3, #24]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	429a      	cmp	r2, r3
 8007552:	d903      	bls.n	800755c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	4413      	add	r3, r2
 8007564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	0151      	lsls	r1, r2, #5
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	440a      	add	r2, r1
 8007572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007576:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800757a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	4413      	add	r3, r2
 8007584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007588:	691a      	ldr	r2, [r3, #16]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007592:	6939      	ldr	r1, [r7, #16]
 8007594:	0148      	lsls	r0, r1, #5
 8007596:	6979      	ldr	r1, [r7, #20]
 8007598:	4401      	add	r1, r0
 800759a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800759e:	4313      	orrs	r3, r2
 80075a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80075a2:	79fb      	ldrb	r3, [r7, #7]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d11e      	bne.n	80075e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d009      	beq.n	80075c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075bc:	461a      	mov	r2, r3
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	0151      	lsls	r1, r2, #5
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	440a      	add	r2, r1
 80075da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	e097      	b.n	8007716 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	0151      	lsls	r1, r2, #5
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	440a      	add	r2, r1
 80075fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007600:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007604:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	2b00      	cmp	r3, #0
 800760c:	f000 8083 	beq.w	8007716 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	f003 030f 	and.w	r3, r3, #15
 8007620:	2101      	movs	r1, #1
 8007622:	fa01 f303 	lsl.w	r3, r1, r3
 8007626:	6979      	ldr	r1, [r7, #20]
 8007628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800762c:	4313      	orrs	r3, r2
 800762e:	634b      	str	r3, [r1, #52]	; 0x34
 8007630:	e071      	b.n	8007716 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	4413      	add	r3, r2
 800763a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	0151      	lsls	r1, r2, #5
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	440a      	add	r2, r1
 8007648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800764c:	0cdb      	lsrs	r3, r3, #19
 800764e:	04db      	lsls	r3, r3, #19
 8007650:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	4413      	add	r3, r2
 800765a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	0151      	lsls	r1, r2, #5
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	440a      	add	r2, r1
 8007668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800766c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007670:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007674:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	68da      	ldr	r2, [r3, #12]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	68da      	ldr	r2, [r3, #12]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	0151      	lsls	r1, r2, #5
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	440a      	add	r2, r1
 80076a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ba:	691a      	ldr	r2, [r3, #16]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076c4:	6939      	ldr	r1, [r7, #16]
 80076c6:	0148      	lsls	r0, r1, #5
 80076c8:	6979      	ldr	r1, [r7, #20]
 80076ca:	4401      	add	r1, r0
 80076cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076d0:	4313      	orrs	r3, r2
 80076d2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80076d4:	79fb      	ldrb	r3, [r7, #7]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d10d      	bne.n	80076f6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	6919      	ldr	r1, [r3, #16]
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f2:	460a      	mov	r2, r1
 80076f4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	0151      	lsls	r1, r2, #5
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	440a      	add	r2, r1
 800770c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007710:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007714:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	371c      	adds	r7, #28
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	785b      	ldrb	r3, [r3, #1]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d14a      	bne.n	80077d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800775a:	f040 8086 	bne.w	800786a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	7812      	ldrb	r2, [r2, #0]
 8007772:	0151      	lsls	r1, r2, #5
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	440a      	add	r2, r1
 8007778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800777c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007780:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	7812      	ldrb	r2, [r2, #0]
 8007796:	0151      	lsls	r1, r2, #5
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	440a      	add	r2, r1
 800779c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3301      	adds	r3, #1
 80077aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d902      	bls.n	80077bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	75fb      	strb	r3, [r7, #23]
          break;
 80077ba:	e056      	b.n	800786a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077d4:	d0e7      	beq.n	80077a6 <USB_EPStopXfer+0x82>
 80077d6:	e048      	b.n	800786a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	015a      	lsls	r2, r3, #5
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	4413      	add	r3, r2
 80077e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077f0:	d13b      	bne.n	800786a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	7812      	ldrb	r2, [r2, #0]
 8007806:	0151      	lsls	r1, r2, #5
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	440a      	add	r2, r1
 800780c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007810:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007814:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	4413      	add	r3, r2
 8007820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	7812      	ldrb	r2, [r2, #0]
 800782a:	0151      	lsls	r1, r2, #5
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	440a      	add	r2, r1
 8007830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007834:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007838:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3301      	adds	r3, #1
 800783e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f242 7210 	movw	r2, #10000	; 0x2710
 8007846:	4293      	cmp	r3, r2
 8007848:	d902      	bls.n	8007850 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	75fb      	strb	r3, [r7, #23]
          break;
 800784e:	e00c      	b.n	800786a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	4413      	add	r3, r2
 800785a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007868:	d0e7      	beq.n	800783a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800786a:	7dfb      	ldrb	r3, [r7, #23]
}
 800786c:	4618      	mov	r0, r3
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007878:	b480      	push	{r7}
 800787a:	b089      	sub	sp, #36	; 0x24
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	4611      	mov	r1, r2
 8007884:	461a      	mov	r2, r3
 8007886:	460b      	mov	r3, r1
 8007888:	71fb      	strb	r3, [r7, #7]
 800788a:	4613      	mov	r3, r2
 800788c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007896:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800789a:	2b00      	cmp	r3, #0
 800789c:	d123      	bne.n	80078e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800789e:	88bb      	ldrh	r3, [r7, #4]
 80078a0:	3303      	adds	r3, #3
 80078a2:	089b      	lsrs	r3, r3, #2
 80078a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80078a6:	2300      	movs	r3, #0
 80078a8:	61bb      	str	r3, [r7, #24]
 80078aa:	e018      	b.n	80078de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	031a      	lsls	r2, r3, #12
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b8:	461a      	mov	r2, r3
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	3301      	adds	r3, #1
 80078c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	3301      	adds	r3, #1
 80078ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	3301      	adds	r3, #1
 80078d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	3301      	adds	r3, #1
 80078d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	3301      	adds	r3, #1
 80078dc:	61bb      	str	r3, [r7, #24]
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d3e2      	bcc.n	80078ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3724      	adds	r7, #36	; 0x24
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b08b      	sub	sp, #44	; 0x2c
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	4613      	mov	r3, r2
 8007900:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	089b      	lsrs	r3, r3, #2
 800790e:	b29b      	uxth	r3, r3
 8007910:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007912:	88fb      	ldrh	r3, [r7, #6]
 8007914:	f003 0303 	and.w	r3, r3, #3
 8007918:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800791a:	2300      	movs	r3, #0
 800791c:	623b      	str	r3, [r7, #32]
 800791e:	e014      	b.n	800794a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	601a      	str	r2, [r3, #0]
    pDest++;
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	3301      	adds	r3, #1
 8007930:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	3301      	adds	r3, #1
 8007936:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	3301      	adds	r3, #1
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	3301      	adds	r3, #1
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	3301      	adds	r3, #1
 8007948:	623b      	str	r3, [r7, #32]
 800794a:	6a3a      	ldr	r2, [r7, #32]
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	429a      	cmp	r2, r3
 8007950:	d3e6      	bcc.n	8007920 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007952:	8bfb      	ldrh	r3, [r7, #30]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01e      	beq.n	8007996 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007958:	2300      	movs	r3, #0
 800795a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007962:	461a      	mov	r2, r3
 8007964:	f107 0310 	add.w	r3, r7, #16
 8007968:	6812      	ldr	r2, [r2, #0]
 800796a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	b2db      	uxtb	r3, r3
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	fa22 f303 	lsr.w	r3, r2, r3
 8007978:	b2da      	uxtb	r2, r3
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	701a      	strb	r2, [r3, #0]
      i++;
 800797e:	6a3b      	ldr	r3, [r7, #32]
 8007980:	3301      	adds	r3, #1
 8007982:	623b      	str	r3, [r7, #32]
      pDest++;
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	3301      	adds	r3, #1
 8007988:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800798a:	8bfb      	ldrh	r3, [r7, #30]
 800798c:	3b01      	subs	r3, #1
 800798e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007990:	8bfb      	ldrh	r3, [r7, #30]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1ea      	bne.n	800796c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007998:	4618      	mov	r0, r3
 800799a:	372c      	adds	r7, #44	; 0x2c
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	785b      	ldrb	r3, [r3, #1]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d12c      	bne.n	8007a1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	db12      	blt.n	80079f8 <USB_EPSetStall+0x54>
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00f      	beq.n	80079f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	0151      	lsls	r1, r2, #5
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	440a      	add	r2, r1
 80079ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	0151      	lsls	r1, r2, #5
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	e02b      	b.n	8007a72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	db12      	blt.n	8007a52 <USB_EPSetStall+0xae>
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00f      	beq.n	8007a52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	0151      	lsls	r1, r2, #5
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	440a      	add	r2, r1
 8007a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	0151      	lsls	r1, r2, #5
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	440a      	add	r2, r1
 8007a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	785b      	ldrb	r3, [r3, #1]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d128      	bne.n	8007aee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ab6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007aba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	791b      	ldrb	r3, [r3, #4]
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d003      	beq.n	8007acc <USB_EPClearStall+0x4c>
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	791b      	ldrb	r3, [r3, #4]
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d138      	bne.n	8007b3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	0151      	lsls	r1, r2, #5
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	440a      	add	r2, r1
 8007ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aea:	6013      	str	r3, [r2, #0]
 8007aec:	e027      	b.n	8007b3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	0151      	lsls	r1, r2, #5
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	440a      	add	r2, r1
 8007b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	791b      	ldrb	r3, [r3, #4]
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d003      	beq.n	8007b1e <USB_EPClearStall+0x9e>
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	791b      	ldrb	r3, [r3, #4]
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d10f      	bne.n	8007b3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	0151      	lsls	r1, r2, #5
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	440a      	add	r2, r1
 8007b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007b6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007b80:	68f9      	ldr	r1, [r7, #12]
 8007b82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b86:	4313      	orrs	r3, r2
 8007b88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bb2:	f023 0303 	bic.w	r3, r3, #3
 8007bb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bc6:	f023 0302 	bic.w	r3, r3, #2
 8007bca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b085      	sub	sp, #20
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bf4:	f023 0303 	bic.w	r3, r3, #3
 8007bf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c08:	f043 0302 	orr.w	r3, r3, #2
 8007c0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	4013      	ands	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c34:	68fb      	ldr	r3, [r7, #12]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b085      	sub	sp, #20
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	4013      	ands	r3, r2
 8007c64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	0c1b      	lsrs	r3, r3, #16
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b085      	sub	sp, #20
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	4013      	ands	r3, r2
 8007c98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	b29b      	uxth	r3, r3
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b085      	sub	sp, #20
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007cba:	78fb      	ldrb	r3, [r7, #3]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007cd8:	68bb      	ldr	r3, [r7, #8]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b087      	sub	sp, #28
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	460b      	mov	r3, r1
 8007cf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d08:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d0a:	78fb      	ldrb	r3, [r7, #3]
 8007d0c:	f003 030f 	and.w	r3, r3, #15
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	fa22 f303 	lsr.w	r3, r2, r3
 8007d16:	01db      	lsls	r3, r3, #7
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	4013      	ands	r3, r2
 8007d32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d34:	68bb      	ldr	r3, [r7, #8]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	371c      	adds	r7, #28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b083      	sub	sp, #12
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	f003 0301 	and.w	r3, r3, #1
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b085      	sub	sp, #20
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007d7c:	f023 0307 	bic.w	r3, r3, #7
 8007d80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	460b      	mov	r3, r1
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	333c      	adds	r3, #60	; 0x3c
 8007dba:	3304      	adds	r3, #4
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	4a26      	ldr	r2, [pc, #152]	; (8007e5c <USB_EP0_OutStart+0xb8>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d90a      	bls.n	8007dde <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dd8:	d101      	bne.n	8007dde <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	e037      	b.n	8007e4e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de4:	461a      	mov	r2, r3
 8007de6:	2300      	movs	r3, #0
 8007de8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007df8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e0c:	f043 0318 	orr.w	r3, r3, #24
 8007e10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e20:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007e24:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007e26:	7afb      	ldrb	r3, [r7, #11]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d10f      	bne.n	8007e4c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e32:	461a      	mov	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e46:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007e4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	4f54300a 	.word	0x4f54300a

08007e60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	4a13      	ldr	r2, [pc, #76]	; (8007ec4 <USB_CoreReset+0x64>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d901      	bls.n	8007e7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e01b      	b.n	8007eb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	daf2      	bge.n	8007e6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	f043 0201 	orr.w	r2, r3, #1
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4a09      	ldr	r2, [pc, #36]	; (8007ec4 <USB_CoreReset+0x64>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d901      	bls.n	8007ea8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e006      	b.n	8007eb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d0f0      	beq.n	8007e96 <USB_CoreReset+0x36>

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	00030d40 	.word	0x00030d40

08007ec8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ed4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ed8:	f010 fe30 	bl	8018b3c <USBD_static_malloc>
 8007edc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d109      	bne.n	8007ef8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	32b0      	adds	r2, #176	; 0xb0
 8007eee:	2100      	movs	r1, #0
 8007ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	e0d4      	b.n	80080a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007ef8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007efc:	2100      	movs	r1, #0
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f012 fa3e 	bl	801a380 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	32b0      	adds	r2, #176	; 0xb0
 8007f0e:	68f9      	ldr	r1, [r7, #12]
 8007f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	32b0      	adds	r2, #176	; 0xb0
 8007f1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	7c1b      	ldrb	r3, [r3, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d138      	bne.n	8007fa2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f30:	4b5e      	ldr	r3, [pc, #376]	; (80080ac <USBD_CDC_Init+0x1e4>)
 8007f32:	7819      	ldrb	r1, [r3, #0]
 8007f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f38:	2202      	movs	r2, #2
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f010 fcdb 	bl	80188f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f40:	4b5a      	ldr	r3, [pc, #360]	; (80080ac <USBD_CDC_Init+0x1e4>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	f003 020f 	and.w	r2, r3, #15
 8007f48:	6879      	ldr	r1, [r7, #4]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	440b      	add	r3, r1
 8007f54:	3324      	adds	r3, #36	; 0x24
 8007f56:	2201      	movs	r2, #1
 8007f58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007f5a:	4b55      	ldr	r3, [pc, #340]	; (80080b0 <USBD_CDC_Init+0x1e8>)
 8007f5c:	7819      	ldrb	r1, [r3, #0]
 8007f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f62:	2202      	movs	r2, #2
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f010 fcc6 	bl	80188f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007f6a:	4b51      	ldr	r3, [pc, #324]	; (80080b0 <USBD_CDC_Init+0x1e8>)
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	f003 020f 	and.w	r2, r3, #15
 8007f72:	6879      	ldr	r1, [r7, #4]
 8007f74:	4613      	mov	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4413      	add	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	440b      	add	r3, r1
 8007f7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f82:	2201      	movs	r2, #1
 8007f84:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007f86:	4b4b      	ldr	r3, [pc, #300]	; (80080b4 <USBD_CDC_Init+0x1ec>)
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	f003 020f 	and.w	r2, r3, #15
 8007f8e:	6879      	ldr	r1, [r7, #4]
 8007f90:	4613      	mov	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	440b      	add	r3, r1
 8007f9a:	3326      	adds	r3, #38	; 0x26
 8007f9c:	2210      	movs	r2, #16
 8007f9e:	801a      	strh	r2, [r3, #0]
 8007fa0:	e035      	b.n	800800e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007fa2:	4b42      	ldr	r3, [pc, #264]	; (80080ac <USBD_CDC_Init+0x1e4>)
 8007fa4:	7819      	ldrb	r1, [r3, #0]
 8007fa6:	2340      	movs	r3, #64	; 0x40
 8007fa8:	2202      	movs	r2, #2
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f010 fca3 	bl	80188f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007fb0:	4b3e      	ldr	r3, [pc, #248]	; (80080ac <USBD_CDC_Init+0x1e4>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	f003 020f 	and.w	r2, r3, #15
 8007fb8:	6879      	ldr	r1, [r7, #4]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	440b      	add	r3, r1
 8007fc4:	3324      	adds	r3, #36	; 0x24
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007fca:	4b39      	ldr	r3, [pc, #228]	; (80080b0 <USBD_CDC_Init+0x1e8>)
 8007fcc:	7819      	ldrb	r1, [r3, #0]
 8007fce:	2340      	movs	r3, #64	; 0x40
 8007fd0:	2202      	movs	r2, #2
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f010 fc8f 	bl	80188f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007fd8:	4b35      	ldr	r3, [pc, #212]	; (80080b0 <USBD_CDC_Init+0x1e8>)
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	f003 020f 	and.w	r2, r3, #15
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	440b      	add	r3, r1
 8007fec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007ff4:	4b2f      	ldr	r3, [pc, #188]	; (80080b4 <USBD_CDC_Init+0x1ec>)
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	f003 020f 	and.w	r2, r3, #15
 8007ffc:	6879      	ldr	r1, [r7, #4]
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	440b      	add	r3, r1
 8008008:	3326      	adds	r3, #38	; 0x26
 800800a:	2210      	movs	r2, #16
 800800c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800800e:	4b29      	ldr	r3, [pc, #164]	; (80080b4 <USBD_CDC_Init+0x1ec>)
 8008010:	7819      	ldrb	r1, [r3, #0]
 8008012:	2308      	movs	r3, #8
 8008014:	2203      	movs	r2, #3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f010 fc6d 	bl	80188f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800801c:	4b25      	ldr	r3, [pc, #148]	; (80080b4 <USBD_CDC_Init+0x1ec>)
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	f003 020f 	and.w	r2, r3, #15
 8008024:	6879      	ldr	r1, [r7, #4]
 8008026:	4613      	mov	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	440b      	add	r3, r1
 8008030:	3324      	adds	r3, #36	; 0x24
 8008032:	2201      	movs	r2, #1
 8008034:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	33b0      	adds	r3, #176	; 0xb0
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800806c:	2302      	movs	r3, #2
 800806e:	e018      	b.n	80080a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	7c1b      	ldrb	r3, [r3, #16]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10a      	bne.n	800808e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008078:	4b0d      	ldr	r3, [pc, #52]	; (80080b0 <USBD_CDC_Init+0x1e8>)
 800807a:	7819      	ldrb	r1, [r3, #0]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008082:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f010 fd24 	bl	8018ad4 <USBD_LL_PrepareReceive>
 800808c:	e008      	b.n	80080a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800808e:	4b08      	ldr	r3, [pc, #32]	; (80080b0 <USBD_CDC_Init+0x1e8>)
 8008090:	7819      	ldrb	r1, [r3, #0]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008098:	2340      	movs	r3, #64	; 0x40
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f010 fd1a 	bl	8018ad4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	200000d3 	.word	0x200000d3
 80080b0:	200000d4 	.word	0x200000d4
 80080b4:	200000d5 	.word	0x200000d5

080080b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80080c4:	4b3a      	ldr	r3, [pc, #232]	; (80081b0 <USBD_CDC_DeInit+0xf8>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f010 fc39 	bl	8018942 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80080d0:	4b37      	ldr	r3, [pc, #220]	; (80081b0 <USBD_CDC_DeInit+0xf8>)
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	f003 020f 	and.w	r2, r3, #15
 80080d8:	6879      	ldr	r1, [r7, #4]
 80080da:	4613      	mov	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4413      	add	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	440b      	add	r3, r1
 80080e4:	3324      	adds	r3, #36	; 0x24
 80080e6:	2200      	movs	r2, #0
 80080e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80080ea:	4b32      	ldr	r3, [pc, #200]	; (80081b4 <USBD_CDC_DeInit+0xfc>)
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f010 fc26 	bl	8018942 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80080f6:	4b2f      	ldr	r3, [pc, #188]	; (80081b4 <USBD_CDC_DeInit+0xfc>)
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	f003 020f 	and.w	r2, r3, #15
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	4613      	mov	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	440b      	add	r3, r1
 800810a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800810e:	2200      	movs	r2, #0
 8008110:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008112:	4b29      	ldr	r3, [pc, #164]	; (80081b8 <USBD_CDC_DeInit+0x100>)
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f010 fc12 	bl	8018942 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800811e:	4b26      	ldr	r3, [pc, #152]	; (80081b8 <USBD_CDC_DeInit+0x100>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	f003 020f 	and.w	r2, r3, #15
 8008126:	6879      	ldr	r1, [r7, #4]
 8008128:	4613      	mov	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	440b      	add	r3, r1
 8008132:	3324      	adds	r3, #36	; 0x24
 8008134:	2200      	movs	r2, #0
 8008136:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008138:	4b1f      	ldr	r3, [pc, #124]	; (80081b8 <USBD_CDC_DeInit+0x100>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	f003 020f 	and.w	r2, r3, #15
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	4613      	mov	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	440b      	add	r3, r1
 800814c:	3326      	adds	r3, #38	; 0x26
 800814e:	2200      	movs	r2, #0
 8008150:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	32b0      	adds	r2, #176	; 0xb0
 800815c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d01f      	beq.n	80081a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	33b0      	adds	r3, #176	; 0xb0
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	32b0      	adds	r2, #176	; 0xb0
 8008182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008186:	4618      	mov	r0, r3
 8008188:	f010 fce6 	bl	8018b58 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	32b0      	adds	r2, #176	; 0xb0
 8008196:	2100      	movs	r1, #0
 8008198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	200000d3 	.word	0x200000d3
 80081b4:	200000d4 	.word	0x200000d4
 80081b8:	200000d5 	.word	0x200000d5

080081bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	32b0      	adds	r2, #176	; 0xb0
 80081d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80081da:	2300      	movs	r3, #0
 80081dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e0bf      	b.n	800836c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d050      	beq.n	800829a <USBD_CDC_Setup+0xde>
 80081f8:	2b20      	cmp	r3, #32
 80081fa:	f040 80af 	bne.w	800835c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	88db      	ldrh	r3, [r3, #6]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d03a      	beq.n	800827c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	b25b      	sxtb	r3, r3
 800820c:	2b00      	cmp	r3, #0
 800820e:	da1b      	bge.n	8008248 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	33b0      	adds	r3, #176	; 0xb0
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4413      	add	r3, r2
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008226:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	88d2      	ldrh	r2, [r2, #6]
 800822c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	88db      	ldrh	r3, [r3, #6]
 8008232:	2b07      	cmp	r3, #7
 8008234:	bf28      	it	cs
 8008236:	2307      	movcs	r3, #7
 8008238:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	89fa      	ldrh	r2, [r7, #14]
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f001 fd89 	bl	8009d58 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008246:	e090      	b.n	800836a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	785a      	ldrb	r2, [r3, #1]
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	88db      	ldrh	r3, [r3, #6]
 8008256:	2b3f      	cmp	r3, #63	; 0x3f
 8008258:	d803      	bhi.n	8008262 <USBD_CDC_Setup+0xa6>
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	88db      	ldrh	r3, [r3, #6]
 800825e:	b2da      	uxtb	r2, r3
 8008260:	e000      	b.n	8008264 <USBD_CDC_Setup+0xa8>
 8008262:	2240      	movs	r2, #64	; 0x40
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800826a:	6939      	ldr	r1, [r7, #16]
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008272:	461a      	mov	r2, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 fd9b 	bl	8009db0 <USBD_CtlPrepareRx>
      break;
 800827a:	e076      	b.n	800836a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	33b0      	adds	r3, #176	; 0xb0
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	7850      	ldrb	r0, [r2, #1]
 8008292:	2200      	movs	r2, #0
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	4798      	blx	r3
      break;
 8008298:	e067      	b.n	800836a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	785b      	ldrb	r3, [r3, #1]
 800829e:	2b0b      	cmp	r3, #11
 80082a0:	d851      	bhi.n	8008346 <USBD_CDC_Setup+0x18a>
 80082a2:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <USBD_CDC_Setup+0xec>)
 80082a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a8:	080082d9 	.word	0x080082d9
 80082ac:	08008355 	.word	0x08008355
 80082b0:	08008347 	.word	0x08008347
 80082b4:	08008347 	.word	0x08008347
 80082b8:	08008347 	.word	0x08008347
 80082bc:	08008347 	.word	0x08008347
 80082c0:	08008347 	.word	0x08008347
 80082c4:	08008347 	.word	0x08008347
 80082c8:	08008347 	.word	0x08008347
 80082cc:	08008347 	.word	0x08008347
 80082d0:	08008303 	.word	0x08008303
 80082d4:	0800832d 	.word	0x0800832d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d107      	bne.n	80082f4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80082e4:	f107 030a 	add.w	r3, r7, #10
 80082e8:	2202      	movs	r2, #2
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 fd33 	bl	8009d58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082f2:	e032      	b.n	800835a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 fcbd 	bl	8009c76 <USBD_CtlError>
            ret = USBD_FAIL;
 80082fc:	2303      	movs	r3, #3
 80082fe:	75fb      	strb	r3, [r7, #23]
          break;
 8008300:	e02b      	b.n	800835a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b03      	cmp	r3, #3
 800830c:	d107      	bne.n	800831e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800830e:	f107 030d 	add.w	r3, r7, #13
 8008312:	2201      	movs	r2, #1
 8008314:	4619      	mov	r1, r3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f001 fd1e 	bl	8009d58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800831c:	e01d      	b.n	800835a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f001 fca8 	bl	8009c76 <USBD_CtlError>
            ret = USBD_FAIL;
 8008326:	2303      	movs	r3, #3
 8008328:	75fb      	strb	r3, [r7, #23]
          break;
 800832a:	e016      	b.n	800835a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b03      	cmp	r3, #3
 8008336:	d00f      	beq.n	8008358 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 fc9b 	bl	8009c76 <USBD_CtlError>
            ret = USBD_FAIL;
 8008340:	2303      	movs	r3, #3
 8008342:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008344:	e008      	b.n	8008358 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f001 fc94 	bl	8009c76 <USBD_CtlError>
          ret = USBD_FAIL;
 800834e:	2303      	movs	r3, #3
 8008350:	75fb      	strb	r3, [r7, #23]
          break;
 8008352:	e002      	b.n	800835a <USBD_CDC_Setup+0x19e>
          break;
 8008354:	bf00      	nop
 8008356:	e008      	b.n	800836a <USBD_CDC_Setup+0x1ae>
          break;
 8008358:	bf00      	nop
      }
      break;
 800835a:	e006      	b.n	800836a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f001 fc89 	bl	8009c76 <USBD_CtlError>
      ret = USBD_FAIL;
 8008364:	2303      	movs	r3, #3
 8008366:	75fb      	strb	r3, [r7, #23]
      break;
 8008368:	bf00      	nop
  }

  return (uint8_t)ret;
 800836a:	7dfb      	ldrb	r3, [r7, #23]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3718      	adds	r7, #24
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008386:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	32b0      	adds	r2, #176	; 0xb0
 8008392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d101      	bne.n	800839e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800839a:	2303      	movs	r3, #3
 800839c:	e065      	b.n	800846a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	32b0      	adds	r2, #176	; 0xb0
 80083a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80083ae:	78fb      	ldrb	r3, [r7, #3]
 80083b0:	f003 020f 	and.w	r2, r3, #15
 80083b4:	6879      	ldr	r1, [r7, #4]
 80083b6:	4613      	mov	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4413      	add	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	440b      	add	r3, r1
 80083c0:	3318      	adds	r3, #24
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d02f      	beq.n	8008428 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80083c8:	78fb      	ldrb	r3, [r7, #3]
 80083ca:	f003 020f 	and.w	r2, r3, #15
 80083ce:	6879      	ldr	r1, [r7, #4]
 80083d0:	4613      	mov	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	440b      	add	r3, r1
 80083da:	3318      	adds	r3, #24
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	78fb      	ldrb	r3, [r7, #3]
 80083e0:	f003 010f 	and.w	r1, r3, #15
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	460b      	mov	r3, r1
 80083e8:	00db      	lsls	r3, r3, #3
 80083ea:	440b      	add	r3, r1
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4403      	add	r3, r0
 80083f0:	3348      	adds	r3, #72	; 0x48
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80083f8:	fb01 f303 	mul.w	r3, r1, r3
 80083fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d112      	bne.n	8008428 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008402:	78fb      	ldrb	r3, [r7, #3]
 8008404:	f003 020f 	and.w	r2, r3, #15
 8008408:	6879      	ldr	r1, [r7, #4]
 800840a:	4613      	mov	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	440b      	add	r3, r1
 8008414:	3318      	adds	r3, #24
 8008416:	2200      	movs	r2, #0
 8008418:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800841a:	78f9      	ldrb	r1, [r7, #3]
 800841c:	2300      	movs	r3, #0
 800841e:	2200      	movs	r2, #0
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f010 fb36 	bl	8018a92 <USBD_LL_Transmit>
 8008426:	e01f      	b.n	8008468 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2200      	movs	r2, #0
 800842c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	33b0      	adds	r3, #176	; 0xb0
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d010      	beq.n	8008468 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	33b0      	adds	r3, #176	; 0xb0
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008464:	78fa      	ldrb	r2, [r7, #3]
 8008466:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	460b      	mov	r3, r1
 800847c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	32b0      	adds	r2, #176	; 0xb0
 8008488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800848c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	32b0      	adds	r2, #176	; 0xb0
 8008498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d101      	bne.n	80084a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80084a0:	2303      	movs	r3, #3
 80084a2:	e01a      	b.n	80084da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80084a4:	78fb      	ldrb	r3, [r7, #3]
 80084a6:	4619      	mov	r1, r3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f010 fb34 	bl	8018b16 <USBD_LL_GetRxDataSize>
 80084ae:	4602      	mov	r2, r0
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	33b0      	adds	r3, #176	; 0xb0
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80084d4:	4611      	mov	r1, r2
 80084d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	32b0      	adds	r2, #176	; 0xb0
 80084f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008500:	2303      	movs	r3, #3
 8008502:	e025      	b.n	8008550 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	33b0      	adds	r3, #176	; 0xb0
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d01a      	beq.n	800854e <USBD_CDC_EP0_RxReady+0x6c>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800851e:	2bff      	cmp	r3, #255	; 0xff
 8008520:	d015      	beq.n	800854e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	33b0      	adds	r3, #176	; 0xb0
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800853a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008542:	b292      	uxth	r2, r2
 8008544:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	22ff      	movs	r2, #255	; 0xff
 800854a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008560:	2182      	movs	r1, #130	; 0x82
 8008562:	4818      	ldr	r0, [pc, #96]	; (80085c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008564:	f000 fd4f 	bl	8009006 <USBD_GetEpDesc>
 8008568:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800856a:	2101      	movs	r1, #1
 800856c:	4815      	ldr	r0, [pc, #84]	; (80085c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800856e:	f000 fd4a 	bl	8009006 <USBD_GetEpDesc>
 8008572:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008574:	2181      	movs	r1, #129	; 0x81
 8008576:	4813      	ldr	r0, [pc, #76]	; (80085c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008578:	f000 fd45 	bl	8009006 <USBD_GetEpDesc>
 800857c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2210      	movs	r2, #16
 8008588:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d006      	beq.n	800859e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	2200      	movs	r2, #0
 8008594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008598:	711a      	strb	r2, [r3, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d006      	beq.n	80085b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085ac:	711a      	strb	r2, [r3, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2243      	movs	r2, #67	; 0x43
 80085b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80085b8:	4b02      	ldr	r3, [pc, #8]	; (80085c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3718      	adds	r7, #24
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	20000090 	.word	0x20000090

080085c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80085d0:	2182      	movs	r1, #130	; 0x82
 80085d2:	4818      	ldr	r0, [pc, #96]	; (8008634 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80085d4:	f000 fd17 	bl	8009006 <USBD_GetEpDesc>
 80085d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80085da:	2101      	movs	r1, #1
 80085dc:	4815      	ldr	r0, [pc, #84]	; (8008634 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80085de:	f000 fd12 	bl	8009006 <USBD_GetEpDesc>
 80085e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80085e4:	2181      	movs	r1, #129	; 0x81
 80085e6:	4813      	ldr	r0, [pc, #76]	; (8008634 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80085e8:	f000 fd0d 	bl	8009006 <USBD_GetEpDesc>
 80085ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	2210      	movs	r2, #16
 80085f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d006      	beq.n	800860e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	2200      	movs	r2, #0
 8008604:	711a      	strb	r2, [r3, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f042 0202 	orr.w	r2, r2, #2
 800860c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d006      	beq.n	8008622 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	711a      	strb	r2, [r3, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	f042 0202 	orr.w	r2, r2, #2
 8008620:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2243      	movs	r2, #67	; 0x43
 8008626:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008628:	4b02      	ldr	r3, [pc, #8]	; (8008634 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800862a:	4618      	mov	r0, r3
 800862c:	3718      	adds	r7, #24
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20000090 	.word	0x20000090

08008638 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008640:	2182      	movs	r1, #130	; 0x82
 8008642:	4818      	ldr	r0, [pc, #96]	; (80086a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008644:	f000 fcdf 	bl	8009006 <USBD_GetEpDesc>
 8008648:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800864a:	2101      	movs	r1, #1
 800864c:	4815      	ldr	r0, [pc, #84]	; (80086a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800864e:	f000 fcda 	bl	8009006 <USBD_GetEpDesc>
 8008652:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008654:	2181      	movs	r1, #129	; 0x81
 8008656:	4813      	ldr	r0, [pc, #76]	; (80086a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008658:	f000 fcd5 	bl	8009006 <USBD_GetEpDesc>
 800865c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d002      	beq.n	800866a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	2210      	movs	r2, #16
 8008668:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d006      	beq.n	800867e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	2200      	movs	r2, #0
 8008674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008678:	711a      	strb	r2, [r3, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d006      	beq.n	8008692 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800868c:	711a      	strb	r2, [r3, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2243      	movs	r2, #67	; 0x43
 8008696:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008698:	4b02      	ldr	r3, [pc, #8]	; (80086a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800869a:	4618      	mov	r0, r3
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	20000090 	.word	0x20000090

080086a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	220a      	movs	r2, #10
 80086b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80086b6:	4b03      	ldr	r3, [pc, #12]	; (80086c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	2000004c 	.word	0x2000004c

080086c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d101      	bne.n	80086dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80086d8:	2303      	movs	r3, #3
 80086da:	e009      	b.n	80086f0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	33b0      	adds	r3, #176	; 0xb0
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	32b0      	adds	r2, #176	; 0xb0
 8008712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008716:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800871e:	2303      	movs	r3, #3
 8008720:	e008      	b.n	8008734 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	371c      	adds	r7, #28
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	32b0      	adds	r2, #176	; 0xb0
 8008754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008758:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008760:	2303      	movs	r3, #3
 8008762:	e004      	b.n	800876e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
	...

0800877c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	32b0      	adds	r2, #176	; 0xb0
 800878e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008792:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008794:	2301      	movs	r3, #1
 8008796:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	32b0      	adds	r2, #176	; 0xb0
 80087a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e025      	b.n	80087fa <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d11f      	bne.n	80087f8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80087c0:	4b10      	ldr	r3, [pc, #64]	; (8008804 <USBD_CDC_TransmitPacket+0x88>)
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	f003 020f 	and.w	r2, r3, #15
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	4613      	mov	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4403      	add	r3, r0
 80087da:	3318      	adds	r3, #24
 80087dc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80087de:	4b09      	ldr	r3, [pc, #36]	; (8008804 <USBD_CDC_TransmitPacket+0x88>)
 80087e0:	7819      	ldrb	r1, [r3, #0]
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f010 f94f 	bl	8018a92 <USBD_LL_Transmit>

    ret = USBD_OK;
 80087f4:	2300      	movs	r3, #0
 80087f6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	200000d3 	.word	0x200000d3

08008808 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	32b0      	adds	r2, #176	; 0xb0
 800881a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800881e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	32b0      	adds	r2, #176	; 0xb0
 800882a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008832:	2303      	movs	r3, #3
 8008834:	e018      	b.n	8008868 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	7c1b      	ldrb	r3, [r3, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10a      	bne.n	8008854 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800883e:	4b0c      	ldr	r3, [pc, #48]	; (8008870 <USBD_CDC_ReceivePacket+0x68>)
 8008840:	7819      	ldrb	r1, [r3, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f010 f941 	bl	8018ad4 <USBD_LL_PrepareReceive>
 8008852:	e008      	b.n	8008866 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008854:	4b06      	ldr	r3, [pc, #24]	; (8008870 <USBD_CDC_ReceivePacket+0x68>)
 8008856:	7819      	ldrb	r1, [r3, #0]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800885e:	2340      	movs	r3, #64	; 0x40
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f010 f937 	bl	8018ad4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	200000d4 	.word	0x200000d4

08008874 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	4613      	mov	r3, r2
 8008880:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008888:	2303      	movs	r3, #3
 800888a:	e01f      	b.n	80088cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d003      	beq.n	80088b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	79fa      	ldrb	r2, [r7, #7]
 80088be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f00f ffb1 	bl	8018828 <USBD_LL_Init>
 80088c6:	4603      	mov	r3, r0
 80088c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088de:	2300      	movs	r3, #0
 80088e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80088e8:	2303      	movs	r3, #3
 80088ea:	e025      	b.n	8008938 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	32ae      	adds	r2, #174	; 0xae
 80088fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00f      	beq.n	8008928 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	32ae      	adds	r2, #174	; 0xae
 8008912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008918:	f107 020e 	add.w	r2, r7, #14
 800891c:	4610      	mov	r0, r2
 800891e:	4798      	blx	r3
 8008920:	4602      	mov	r2, r0
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800892e:	1c5a      	adds	r2, r3, #1
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f00f ffb9 	bl	80188c0 <USBD_LL_Start>
 800894e:	4603      	mov	r3, r0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008960:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008962:	4618      	mov	r0, r3
 8008964:	370c      	adds	r7, #12
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	460b      	mov	r3, r1
 8008978:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008984:	2b00      	cmp	r3, #0
 8008986:	d009      	beq.n	800899c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	78fa      	ldrb	r2, [r7, #3]
 8008992:	4611      	mov	r1, r2
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	4798      	blx	r3
 8008998:	4603      	mov	r3, r0
 800899a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800899c:	7bfb      	ldrb	r3, [r7, #15]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	460b      	mov	r3, r1
 80089b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	78fa      	ldrb	r2, [r7, #3]
 80089c0:	4611      	mov	r1, r2
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	4798      	blx	r3
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d001      	beq.n	80089d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80089cc:	2303      	movs	r3, #3
 80089ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b084      	sub	sp, #16
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f001 f908 	bl	8009c02 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008a00:	461a      	mov	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a0e:	f003 031f 	and.w	r3, r3, #31
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d01a      	beq.n	8008a4c <USBD_LL_SetupStage+0x72>
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d822      	bhi.n	8008a60 <USBD_LL_SetupStage+0x86>
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <USBD_LL_SetupStage+0x4a>
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d00a      	beq.n	8008a38 <USBD_LL_SetupStage+0x5e>
 8008a22:	e01d      	b.n	8008a60 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fb5f 	bl	80090f0 <USBD_StdDevReq>
 8008a32:	4603      	mov	r3, r0
 8008a34:	73fb      	strb	r3, [r7, #15]
      break;
 8008a36:	e020      	b.n	8008a7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fbc7 	bl	80091d4 <USBD_StdItfReq>
 8008a46:	4603      	mov	r3, r0
 8008a48:	73fb      	strb	r3, [r7, #15]
      break;
 8008a4a:	e016      	b.n	8008a7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fc29 	bl	80092ac <USBD_StdEPReq>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a5e:	e00c      	b.n	8008a7a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f00f ff86 	bl	8018980 <USBD_LL_StallEP>
 8008a74:	4603      	mov	r3, r0
 8008a76:	73fb      	strb	r3, [r7, #15]
      break;
 8008a78:	bf00      	nop
  }

  return ret;
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	607a      	str	r2, [r7, #4]
 8008a90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008a96:	7afb      	ldrb	r3, [r7, #11]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d16e      	bne.n	8008b7a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008aa2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008aaa:	2b03      	cmp	r3, #3
 8008aac:	f040 8098 	bne.w	8008be0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d913      	bls.n	8008ae4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	689a      	ldr	r2, [r3, #8]
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	1ad2      	subs	r2, r2, r3
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	68da      	ldr	r2, [r3, #12]
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	bf28      	it	cs
 8008ad6:	4613      	movcs	r3, r2
 8008ad8:	461a      	mov	r2, r3
 8008ada:	6879      	ldr	r1, [r7, #4]
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f001 f984 	bl	8009dea <USBD_CtlContinueRx>
 8008ae2:	e07d      	b.n	8008be0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008aea:	f003 031f 	and.w	r3, r3, #31
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d014      	beq.n	8008b1c <USBD_LL_DataOutStage+0x98>
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d81d      	bhi.n	8008b32 <USBD_LL_DataOutStage+0xae>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d002      	beq.n	8008b00 <USBD_LL_DataOutStage+0x7c>
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d003      	beq.n	8008b06 <USBD_LL_DataOutStage+0x82>
 8008afe:	e018      	b.n	8008b32 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	75bb      	strb	r3, [r7, #22]
            break;
 8008b04:	e018      	b.n	8008b38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	4619      	mov	r1, r3
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 fa5e 	bl	8008fd2 <USBD_CoreFindIF>
 8008b16:	4603      	mov	r3, r0
 8008b18:	75bb      	strb	r3, [r7, #22]
            break;
 8008b1a:	e00d      	b.n	8008b38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	4619      	mov	r1, r3
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 fa60 	bl	8008fec <USBD_CoreFindEP>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	75bb      	strb	r3, [r7, #22]
            break;
 8008b30:	e002      	b.n	8008b38 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	75bb      	strb	r3, [r7, #22]
            break;
 8008b36:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008b38:	7dbb      	ldrb	r3, [r7, #22]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d119      	bne.n	8008b72 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d113      	bne.n	8008b72 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008b4a:	7dba      	ldrb	r2, [r7, #22]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	32ae      	adds	r2, #174	; 0xae
 8008b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00b      	beq.n	8008b72 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008b5a:	7dba      	ldrb	r2, [r7, #22]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008b62:	7dba      	ldrb	r2, [r7, #22]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	32ae      	adds	r2, #174	; 0xae
 8008b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f001 f94a 	bl	8009e0c <USBD_CtlSendStatus>
 8008b78:	e032      	b.n	8008be0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008b7a:	7afb      	ldrb	r3, [r7, #11]
 8008b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	4619      	mov	r1, r3
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f000 fa31 	bl	8008fec <USBD_CoreFindEP>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b8e:	7dbb      	ldrb	r3, [r7, #22]
 8008b90:	2bff      	cmp	r3, #255	; 0xff
 8008b92:	d025      	beq.n	8008be0 <USBD_LL_DataOutStage+0x15c>
 8008b94:	7dbb      	ldrb	r3, [r7, #22]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d122      	bne.n	8008be0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	d117      	bne.n	8008bd6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008ba6:	7dba      	ldrb	r2, [r7, #22]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	32ae      	adds	r2, #174	; 0xae
 8008bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00f      	beq.n	8008bd6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008bb6:	7dba      	ldrb	r2, [r7, #22]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008bbe:	7dba      	ldrb	r2, [r7, #22]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	32ae      	adds	r2, #174	; 0xae
 8008bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	7afa      	ldrb	r2, [r7, #11]
 8008bcc:	4611      	mov	r1, r2
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	4798      	blx	r3
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
 8008bde:	e000      	b.n	8008be2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b086      	sub	sp, #24
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	60f8      	str	r0, [r7, #12]
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	607a      	str	r2, [r7, #4]
 8008bf6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008bf8:	7afb      	ldrb	r3, [r7, #11]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d16f      	bne.n	8008cde <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3314      	adds	r3, #20
 8008c02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d15a      	bne.n	8008cc4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	689a      	ldr	r2, [r3, #8]
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d914      	bls.n	8008c44 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	689a      	ldr	r2, [r3, #8]
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	1ad2      	subs	r2, r2, r3
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	6879      	ldr	r1, [r7, #4]
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f001 f8ac 	bl	8009d8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c36:	2300      	movs	r3, #0
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f00f ff49 	bl	8018ad4 <USBD_LL_PrepareReceive>
 8008c42:	e03f      	b.n	8008cc4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	68da      	ldr	r2, [r3, #12]
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d11c      	bne.n	8008c8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d316      	bcc.n	8008c8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d20f      	bcs.n	8008c8a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f001 f88d 	bl	8009d8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	2200      	movs	r2, #0
 8008c80:	2100      	movs	r1, #0
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f00f ff26 	bl	8018ad4 <USBD_LL_PrepareReceive>
 8008c88:	e01c      	b.n	8008cc4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b03      	cmp	r3, #3
 8008c94:	d10f      	bne.n	8008cb6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d009      	beq.n	8008cb6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cb6:	2180      	movs	r1, #128	; 0x80
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f00f fe61 	bl	8018980 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f001 f8b7 	bl	8009e32 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d03a      	beq.n	8008d44 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f7ff fe42 	bl	8008958 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008cdc:	e032      	b.n	8008d44 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008cde:	7afb      	ldrb	r3, [r7, #11]
 8008ce0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 f97f 	bl	8008fec <USBD_CoreFindEP>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	2bff      	cmp	r3, #255	; 0xff
 8008cf6:	d025      	beq.n	8008d44 <USBD_LL_DataInStage+0x15a>
 8008cf8:	7dfb      	ldrb	r3, [r7, #23]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d122      	bne.n	8008d44 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d11c      	bne.n	8008d44 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008d0a:	7dfa      	ldrb	r2, [r7, #23]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	32ae      	adds	r2, #174	; 0xae
 8008d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d014      	beq.n	8008d44 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008d1a:	7dfa      	ldrb	r2, [r7, #23]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008d22:	7dfa      	ldrb	r2, [r7, #23]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	32ae      	adds	r2, #174	; 0xae
 8008d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	7afa      	ldrb	r2, [r7, #11]
 8008d30:	4611      	mov	r1, r2
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	4798      	blx	r3
 8008d36:	4603      	mov	r3, r0
 8008d38:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008d3a:	7dbb      	ldrb	r3, [r7, #22]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008d40:	7dbb      	ldrb	r3, [r7, #22]
 8008d42:	e000      	b.n	8008d46 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d014      	beq.n	8008db4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00e      	beq.n	8008db4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6852      	ldr	r2, [r2, #4]
 8008da2:	b2d2      	uxtb	r2, r2
 8008da4:	4611      	mov	r1, r2
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	4798      	blx	r3
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d001      	beq.n	8008db4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008db0:	2303      	movs	r3, #3
 8008db2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008db4:	2340      	movs	r3, #64	; 0x40
 8008db6:	2200      	movs	r2, #0
 8008db8:	2100      	movs	r1, #0
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f00f fd9b 	bl	80188f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2240      	movs	r2, #64	; 0x40
 8008dcc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dd0:	2340      	movs	r3, #64	; 0x40
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2180      	movs	r1, #128	; 0x80
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f00f fd8d 	bl	80188f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2240      	movs	r2, #64	; 0x40
 8008de6:	621a      	str	r2, [r3, #32]

  return ret;
 8008de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	78fa      	ldrb	r2, [r7, #3]
 8008e02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b083      	sub	sp, #12
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e20:	b2da      	uxtb	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2204      	movs	r2, #4
 8008e2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b083      	sub	sp, #12
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d106      	bne.n	8008e60 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b082      	sub	sp, #8
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d110      	bne.n	8008ea4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00b      	beq.n	8008ea4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e92:	69db      	ldr	r3, [r3, #28]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d005      	beq.n	8008ea4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e9e:	69db      	ldr	r3, [r3, #28]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	32ae      	adds	r2, #174	; 0xae
 8008ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d101      	bne.n	8008ed0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e01c      	b.n	8008f0a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	d115      	bne.n	8008f08 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	32ae      	adds	r2, #174	; 0xae
 8008ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eea:	6a1b      	ldr	r3, [r3, #32]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00b      	beq.n	8008f08 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	32ae      	adds	r2, #174	; 0xae
 8008efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008efe:	6a1b      	ldr	r3, [r3, #32]
 8008f00:	78fa      	ldrb	r2, [r7, #3]
 8008f02:	4611      	mov	r1, r2
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b082      	sub	sp, #8
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	32ae      	adds	r2, #174	; 0xae
 8008f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e01c      	b.n	8008f6e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	d115      	bne.n	8008f6c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	32ae      	adds	r2, #174	; 0xae
 8008f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00b      	beq.n	8008f6c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	32ae      	adds	r2, #174	; 0xae
 8008f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f64:	78fa      	ldrb	r2, [r7, #3]
 8008f66:	4611      	mov	r1, r2
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b083      	sub	sp, #12
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00e      	beq.n	8008fc8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	6852      	ldr	r2, [r2, #4]
 8008fb6:	b2d2      	uxtb	r2, r2
 8008fb8:	4611      	mov	r1, r2
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	4798      	blx	r3
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b083      	sub	sp, #12
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008fde:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ff8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr

08009006 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b086      	sub	sp, #24
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	460b      	mov	r3, r1
 8009010:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800901a:	2300      	movs	r3, #0
 800901c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	885b      	ldrh	r3, [r3, #2]
 8009022:	b29a      	uxth	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	b29b      	uxth	r3, r3
 800902a:	429a      	cmp	r2, r3
 800902c:	d920      	bls.n	8009070 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	b29b      	uxth	r3, r3
 8009034:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009036:	e013      	b.n	8009060 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009038:	f107 030a 	add.w	r3, r7, #10
 800903c:	4619      	mov	r1, r3
 800903e:	6978      	ldr	r0, [r7, #20]
 8009040:	f000 f81b 	bl	800907a <USBD_GetNextDesc>
 8009044:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	785b      	ldrb	r3, [r3, #1]
 800904a:	2b05      	cmp	r3, #5
 800904c:	d108      	bne.n	8009060 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	789b      	ldrb	r3, [r3, #2]
 8009056:	78fa      	ldrb	r2, [r7, #3]
 8009058:	429a      	cmp	r2, r3
 800905a:	d008      	beq.n	800906e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800905c:	2300      	movs	r3, #0
 800905e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	885b      	ldrh	r3, [r3, #2]
 8009064:	b29a      	uxth	r2, r3
 8009066:	897b      	ldrh	r3, [r7, #10]
 8009068:	429a      	cmp	r2, r3
 800906a:	d8e5      	bhi.n	8009038 <USBD_GetEpDesc+0x32>
 800906c:	e000      	b.n	8009070 <USBD_GetEpDesc+0x6a>
          break;
 800906e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009070:	693b      	ldr	r3, [r7, #16]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3718      	adds	r7, #24
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800907a:	b480      	push	{r7}
 800907c:	b085      	sub	sp, #20
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	881a      	ldrh	r2, [r3, #0]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	b29b      	uxth	r3, r3
 8009092:	4413      	add	r3, r2
 8009094:	b29a      	uxth	r2, r3
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4413      	add	r3, r2
 80090a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80090a6:	68fb      	ldr	r3, [r7, #12]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	3301      	adds	r3, #1
 80090ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80090d2:	8a3b      	ldrh	r3, [r7, #16]
 80090d4:	021b      	lsls	r3, r3, #8
 80090d6:	b21a      	sxth	r2, r3
 80090d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80090dc:	4313      	orrs	r3, r2
 80090de:	b21b      	sxth	r3, r3
 80090e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80090e2:	89fb      	ldrh	r3, [r7, #14]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	371c      	adds	r7, #28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009106:	2b40      	cmp	r3, #64	; 0x40
 8009108:	d005      	beq.n	8009116 <USBD_StdDevReq+0x26>
 800910a:	2b40      	cmp	r3, #64	; 0x40
 800910c:	d857      	bhi.n	80091be <USBD_StdDevReq+0xce>
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00f      	beq.n	8009132 <USBD_StdDevReq+0x42>
 8009112:	2b20      	cmp	r3, #32
 8009114:	d153      	bne.n	80091be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	32ae      	adds	r2, #174	; 0xae
 8009120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	6839      	ldr	r1, [r7, #0]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	4798      	blx	r3
 800912c:	4603      	mov	r3, r0
 800912e:	73fb      	strb	r3, [r7, #15]
      break;
 8009130:	e04a      	b.n	80091c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	785b      	ldrb	r3, [r3, #1]
 8009136:	2b09      	cmp	r3, #9
 8009138:	d83b      	bhi.n	80091b2 <USBD_StdDevReq+0xc2>
 800913a:	a201      	add	r2, pc, #4	; (adr r2, 8009140 <USBD_StdDevReq+0x50>)
 800913c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009140:	08009195 	.word	0x08009195
 8009144:	080091a9 	.word	0x080091a9
 8009148:	080091b3 	.word	0x080091b3
 800914c:	0800919f 	.word	0x0800919f
 8009150:	080091b3 	.word	0x080091b3
 8009154:	08009173 	.word	0x08009173
 8009158:	08009169 	.word	0x08009169
 800915c:	080091b3 	.word	0x080091b3
 8009160:	0800918b 	.word	0x0800918b
 8009164:	0800917d 	.word	0x0800917d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 fa3c 	bl	80095e8 <USBD_GetDescriptor>
          break;
 8009170:	e024      	b.n	80091bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fba1 	bl	80098bc <USBD_SetAddress>
          break;
 800917a:	e01f      	b.n	80091bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fbe0 	bl	8009944 <USBD_SetConfig>
 8009184:	4603      	mov	r3, r0
 8009186:	73fb      	strb	r3, [r7, #15]
          break;
 8009188:	e018      	b.n	80091bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fc83 	bl	8009a98 <USBD_GetConfig>
          break;
 8009192:	e013      	b.n	80091bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fcb4 	bl	8009b04 <USBD_GetStatus>
          break;
 800919c:	e00e      	b.n	80091bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fce3 	bl	8009b6c <USBD_SetFeature>
          break;
 80091a6:	e009      	b.n	80091bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fd07 	bl	8009bbe <USBD_ClrFeature>
          break;
 80091b0:	e004      	b.n	80091bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fd5e 	bl	8009c76 <USBD_CtlError>
          break;
 80091ba:	bf00      	nop
      }
      break;
 80091bc:	e004      	b.n	80091c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fd58 	bl	8009c76 <USBD_CtlError>
      break;
 80091c6:	bf00      	nop
  }

  return ret;
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop

080091d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091ea:	2b40      	cmp	r3, #64	; 0x40
 80091ec:	d005      	beq.n	80091fa <USBD_StdItfReq+0x26>
 80091ee:	2b40      	cmp	r3, #64	; 0x40
 80091f0:	d852      	bhi.n	8009298 <USBD_StdItfReq+0xc4>
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <USBD_StdItfReq+0x26>
 80091f6:	2b20      	cmp	r3, #32
 80091f8:	d14e      	bne.n	8009298 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009200:	b2db      	uxtb	r3, r3
 8009202:	3b01      	subs	r3, #1
 8009204:	2b02      	cmp	r3, #2
 8009206:	d840      	bhi.n	800928a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	889b      	ldrh	r3, [r3, #4]
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b01      	cmp	r3, #1
 8009210:	d836      	bhi.n	8009280 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	889b      	ldrh	r3, [r3, #4]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7ff fed9 	bl	8008fd2 <USBD_CoreFindIF>
 8009220:	4603      	mov	r3, r0
 8009222:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009224:	7bbb      	ldrb	r3, [r7, #14]
 8009226:	2bff      	cmp	r3, #255	; 0xff
 8009228:	d01d      	beq.n	8009266 <USBD_StdItfReq+0x92>
 800922a:	7bbb      	ldrb	r3, [r7, #14]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d11a      	bne.n	8009266 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009230:	7bba      	ldrb	r2, [r7, #14]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	32ae      	adds	r2, #174	; 0xae
 8009236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00f      	beq.n	8009260 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009240:	7bba      	ldrb	r2, [r7, #14]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009248:	7bba      	ldrb	r2, [r7, #14]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	32ae      	adds	r2, #174	; 0xae
 800924e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	4798      	blx	r3
 800925a:	4603      	mov	r3, r0
 800925c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800925e:	e004      	b.n	800926a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009260:	2303      	movs	r3, #3
 8009262:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009264:	e001      	b.n	800926a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009266:	2303      	movs	r3, #3
 8009268:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	88db      	ldrh	r3, [r3, #6]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d110      	bne.n	8009294 <USBD_StdItfReq+0xc0>
 8009272:	7bfb      	ldrb	r3, [r7, #15]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10d      	bne.n	8009294 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fdc7 	bl	8009e0c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800927e:	e009      	b.n	8009294 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fcf7 	bl	8009c76 <USBD_CtlError>
          break;
 8009288:	e004      	b.n	8009294 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fcf2 	bl	8009c76 <USBD_CtlError>
          break;
 8009292:	e000      	b.n	8009296 <USBD_StdItfReq+0xc2>
          break;
 8009294:	bf00      	nop
      }
      break;
 8009296:	e004      	b.n	80092a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fceb 	bl	8009c76 <USBD_CtlError>
      break;
 80092a0:	bf00      	nop
  }

  return ret;
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	889b      	ldrh	r3, [r3, #4]
 80092be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092c8:	2b40      	cmp	r3, #64	; 0x40
 80092ca:	d007      	beq.n	80092dc <USBD_StdEPReq+0x30>
 80092cc:	2b40      	cmp	r3, #64	; 0x40
 80092ce:	f200 817f 	bhi.w	80095d0 <USBD_StdEPReq+0x324>
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d02a      	beq.n	800932c <USBD_StdEPReq+0x80>
 80092d6:	2b20      	cmp	r3, #32
 80092d8:	f040 817a 	bne.w	80095d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80092dc:	7bbb      	ldrb	r3, [r7, #14]
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7ff fe83 	bl	8008fec <USBD_CoreFindEP>
 80092e6:	4603      	mov	r3, r0
 80092e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092ea:	7b7b      	ldrb	r3, [r7, #13]
 80092ec:	2bff      	cmp	r3, #255	; 0xff
 80092ee:	f000 8174 	beq.w	80095da <USBD_StdEPReq+0x32e>
 80092f2:	7b7b      	ldrb	r3, [r7, #13]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f040 8170 	bne.w	80095da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80092fa:	7b7a      	ldrb	r2, [r7, #13]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009302:	7b7a      	ldrb	r2, [r7, #13]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	32ae      	adds	r2, #174	; 0xae
 8009308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	2b00      	cmp	r3, #0
 8009310:	f000 8163 	beq.w	80095da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009314:	7b7a      	ldrb	r2, [r7, #13]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	32ae      	adds	r2, #174	; 0xae
 800931a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	4798      	blx	r3
 8009326:	4603      	mov	r3, r0
 8009328:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800932a:	e156      	b.n	80095da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	785b      	ldrb	r3, [r3, #1]
 8009330:	2b03      	cmp	r3, #3
 8009332:	d008      	beq.n	8009346 <USBD_StdEPReq+0x9a>
 8009334:	2b03      	cmp	r3, #3
 8009336:	f300 8145 	bgt.w	80095c4 <USBD_StdEPReq+0x318>
 800933a:	2b00      	cmp	r3, #0
 800933c:	f000 809b 	beq.w	8009476 <USBD_StdEPReq+0x1ca>
 8009340:	2b01      	cmp	r3, #1
 8009342:	d03c      	beq.n	80093be <USBD_StdEPReq+0x112>
 8009344:	e13e      	b.n	80095c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b02      	cmp	r3, #2
 8009350:	d002      	beq.n	8009358 <USBD_StdEPReq+0xac>
 8009352:	2b03      	cmp	r3, #3
 8009354:	d016      	beq.n	8009384 <USBD_StdEPReq+0xd8>
 8009356:	e02c      	b.n	80093b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009358:	7bbb      	ldrb	r3, [r7, #14]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00d      	beq.n	800937a <USBD_StdEPReq+0xce>
 800935e:	7bbb      	ldrb	r3, [r7, #14]
 8009360:	2b80      	cmp	r3, #128	; 0x80
 8009362:	d00a      	beq.n	800937a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009364:	7bbb      	ldrb	r3, [r7, #14]
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f00f fb09 	bl	8018980 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800936e:	2180      	movs	r1, #128	; 0x80
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f00f fb05 	bl	8018980 <USBD_LL_StallEP>
 8009376:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009378:	e020      	b.n	80093bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800937a:	6839      	ldr	r1, [r7, #0]
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fc7a 	bl	8009c76 <USBD_CtlError>
              break;
 8009382:	e01b      	b.n	80093bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	885b      	ldrh	r3, [r3, #2]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d10e      	bne.n	80093aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800938c:	7bbb      	ldrb	r3, [r7, #14]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00b      	beq.n	80093aa <USBD_StdEPReq+0xfe>
 8009392:	7bbb      	ldrb	r3, [r7, #14]
 8009394:	2b80      	cmp	r3, #128	; 0x80
 8009396:	d008      	beq.n	80093aa <USBD_StdEPReq+0xfe>
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	88db      	ldrh	r3, [r3, #6]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d104      	bne.n	80093aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80093a0:	7bbb      	ldrb	r3, [r7, #14]
 80093a2:	4619      	mov	r1, r3
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f00f faeb 	bl	8018980 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 fd2e 	bl	8009e0c <USBD_CtlSendStatus>

              break;
 80093b0:	e004      	b.n	80093bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fc5e 	bl	8009c76 <USBD_CtlError>
              break;
 80093ba:	bf00      	nop
          }
          break;
 80093bc:	e107      	b.n	80095ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d002      	beq.n	80093d0 <USBD_StdEPReq+0x124>
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d016      	beq.n	80093fc <USBD_StdEPReq+0x150>
 80093ce:	e04b      	b.n	8009468 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00d      	beq.n	80093f2 <USBD_StdEPReq+0x146>
 80093d6:	7bbb      	ldrb	r3, [r7, #14]
 80093d8:	2b80      	cmp	r3, #128	; 0x80
 80093da:	d00a      	beq.n	80093f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	4619      	mov	r1, r3
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f00f facd 	bl	8018980 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093e6:	2180      	movs	r1, #128	; 0x80
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f00f fac9 	bl	8018980 <USBD_LL_StallEP>
 80093ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093f0:	e040      	b.n	8009474 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fc3e 	bl	8009c76 <USBD_CtlError>
              break;
 80093fa:	e03b      	b.n	8009474 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	885b      	ldrh	r3, [r3, #2]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d136      	bne.n	8009472 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009404:	7bbb      	ldrb	r3, [r7, #14]
 8009406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800940a:	2b00      	cmp	r3, #0
 800940c:	d004      	beq.n	8009418 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800940e:	7bbb      	ldrb	r3, [r7, #14]
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f00f fad3 	bl	80189be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fcf7 	bl	8009e0c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800941e:	7bbb      	ldrb	r3, [r7, #14]
 8009420:	4619      	mov	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7ff fde2 	bl	8008fec <USBD_CoreFindEP>
 8009428:	4603      	mov	r3, r0
 800942a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800942c:	7b7b      	ldrb	r3, [r7, #13]
 800942e:	2bff      	cmp	r3, #255	; 0xff
 8009430:	d01f      	beq.n	8009472 <USBD_StdEPReq+0x1c6>
 8009432:	7b7b      	ldrb	r3, [r7, #13]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d11c      	bne.n	8009472 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009438:	7b7a      	ldrb	r2, [r7, #13]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009440:	7b7a      	ldrb	r2, [r7, #13]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	32ae      	adds	r2, #174	; 0xae
 8009446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d010      	beq.n	8009472 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009450:	7b7a      	ldrb	r2, [r7, #13]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	32ae      	adds	r2, #174	; 0xae
 8009456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	4798      	blx	r3
 8009462:	4603      	mov	r3, r0
 8009464:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009466:	e004      	b.n	8009472 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fc03 	bl	8009c76 <USBD_CtlError>
              break;
 8009470:	e000      	b.n	8009474 <USBD_StdEPReq+0x1c8>
              break;
 8009472:	bf00      	nop
          }
          break;
 8009474:	e0ab      	b.n	80095ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b02      	cmp	r3, #2
 8009480:	d002      	beq.n	8009488 <USBD_StdEPReq+0x1dc>
 8009482:	2b03      	cmp	r3, #3
 8009484:	d032      	beq.n	80094ec <USBD_StdEPReq+0x240>
 8009486:	e097      	b.n	80095b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009488:	7bbb      	ldrb	r3, [r7, #14]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d007      	beq.n	800949e <USBD_StdEPReq+0x1f2>
 800948e:	7bbb      	ldrb	r3, [r7, #14]
 8009490:	2b80      	cmp	r3, #128	; 0x80
 8009492:	d004      	beq.n	800949e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fbed 	bl	8009c76 <USBD_CtlError>
                break;
 800949c:	e091      	b.n	80095c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800949e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	da0b      	bge.n	80094be <USBD_StdEPReq+0x212>
 80094a6:	7bbb      	ldrb	r3, [r7, #14]
 80094a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094ac:	4613      	mov	r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	3310      	adds	r3, #16
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	4413      	add	r3, r2
 80094ba:	3304      	adds	r3, #4
 80094bc:	e00b      	b.n	80094d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094be:	7bbb      	ldrb	r3, [r7, #14]
 80094c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094c4:	4613      	mov	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	4413      	add	r3, r2
 80094d4:	3304      	adds	r3, #4
 80094d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	2200      	movs	r2, #0
 80094dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	2202      	movs	r2, #2
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fc37 	bl	8009d58 <USBD_CtlSendData>
              break;
 80094ea:	e06a      	b.n	80095c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	da11      	bge.n	8009518 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094f4:	7bbb      	ldrb	r3, [r7, #14]
 80094f6:	f003 020f 	and.w	r2, r3, #15
 80094fa:	6879      	ldr	r1, [r7, #4]
 80094fc:	4613      	mov	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4413      	add	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	440b      	add	r3, r1
 8009506:	3324      	adds	r3, #36	; 0x24
 8009508:	881b      	ldrh	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d117      	bne.n	800953e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fbb0 	bl	8009c76 <USBD_CtlError>
                  break;
 8009516:	e054      	b.n	80095c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009518:	7bbb      	ldrb	r3, [r7, #14]
 800951a:	f003 020f 	and.w	r2, r3, #15
 800951e:	6879      	ldr	r1, [r7, #4]
 8009520:	4613      	mov	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4413      	add	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	440b      	add	r3, r1
 800952a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800952e:	881b      	ldrh	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d104      	bne.n	800953e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fb9d 	bl	8009c76 <USBD_CtlError>
                  break;
 800953c:	e041      	b.n	80095c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800953e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009542:	2b00      	cmp	r3, #0
 8009544:	da0b      	bge.n	800955e <USBD_StdEPReq+0x2b2>
 8009546:	7bbb      	ldrb	r3, [r7, #14]
 8009548:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800954c:	4613      	mov	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	3310      	adds	r3, #16
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	4413      	add	r3, r2
 800955a:	3304      	adds	r3, #4
 800955c:	e00b      	b.n	8009576 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800955e:	7bbb      	ldrb	r3, [r7, #14]
 8009560:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009564:	4613      	mov	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4413      	add	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	4413      	add	r3, r2
 8009574:	3304      	adds	r3, #4
 8009576:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009578:	7bbb      	ldrb	r3, [r7, #14]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <USBD_StdEPReq+0x2d8>
 800957e:	7bbb      	ldrb	r3, [r7, #14]
 8009580:	2b80      	cmp	r3, #128	; 0x80
 8009582:	d103      	bne.n	800958c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2200      	movs	r2, #0
 8009588:	601a      	str	r2, [r3, #0]
 800958a:	e00e      	b.n	80095aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800958c:	7bbb      	ldrb	r3, [r7, #14]
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f00f fa33 	bl	80189fc <USBD_LL_IsStallEP>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d003      	beq.n	80095a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	2201      	movs	r2, #1
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	e002      	b.n	80095aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	2200      	movs	r2, #0
 80095a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	2202      	movs	r2, #2
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fbd1 	bl	8009d58 <USBD_CtlSendData>
              break;
 80095b6:	e004      	b.n	80095c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fb5b 	bl	8009c76 <USBD_CtlError>
              break;
 80095c0:	bf00      	nop
          }
          break;
 80095c2:	e004      	b.n	80095ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fb55 	bl	8009c76 <USBD_CtlError>
          break;
 80095cc:	bf00      	nop
      }
      break;
 80095ce:	e005      	b.n	80095dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80095d0:	6839      	ldr	r1, [r7, #0]
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fb4f 	bl	8009c76 <USBD_CtlError>
      break;
 80095d8:	e000      	b.n	80095dc <USBD_StdEPReq+0x330>
      break;
 80095da:	bf00      	nop
  }

  return ret;
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
	...

080095e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095f2:	2300      	movs	r3, #0
 80095f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095f6:	2300      	movs	r3, #0
 80095f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095fa:	2300      	movs	r3, #0
 80095fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	885b      	ldrh	r3, [r3, #2]
 8009602:	0a1b      	lsrs	r3, r3, #8
 8009604:	b29b      	uxth	r3, r3
 8009606:	3b01      	subs	r3, #1
 8009608:	2b06      	cmp	r3, #6
 800960a:	f200 8128 	bhi.w	800985e <USBD_GetDescriptor+0x276>
 800960e:	a201      	add	r2, pc, #4	; (adr r2, 8009614 <USBD_GetDescriptor+0x2c>)
 8009610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009614:	08009631 	.word	0x08009631
 8009618:	08009649 	.word	0x08009649
 800961c:	08009689 	.word	0x08009689
 8009620:	0800985f 	.word	0x0800985f
 8009624:	0800985f 	.word	0x0800985f
 8009628:	080097ff 	.word	0x080097ff
 800962c:	0800982b 	.word	0x0800982b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	7c12      	ldrb	r2, [r2, #16]
 800963c:	f107 0108 	add.w	r1, r7, #8
 8009640:	4610      	mov	r0, r2
 8009642:	4798      	blx	r3
 8009644:	60f8      	str	r0, [r7, #12]
      break;
 8009646:	e112      	b.n	800986e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	7c1b      	ldrb	r3, [r3, #16]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10d      	bne.n	800966c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009658:	f107 0208 	add.w	r2, r7, #8
 800965c:	4610      	mov	r0, r2
 800965e:	4798      	blx	r3
 8009660:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	3301      	adds	r3, #1
 8009666:	2202      	movs	r2, #2
 8009668:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800966a:	e100      	b.n	800986e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009674:	f107 0208 	add.w	r2, r7, #8
 8009678:	4610      	mov	r0, r2
 800967a:	4798      	blx	r3
 800967c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	3301      	adds	r3, #1
 8009682:	2202      	movs	r2, #2
 8009684:	701a      	strb	r2, [r3, #0]
      break;
 8009686:	e0f2      	b.n	800986e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	885b      	ldrh	r3, [r3, #2]
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b05      	cmp	r3, #5
 8009690:	f200 80ac 	bhi.w	80097ec <USBD_GetDescriptor+0x204>
 8009694:	a201      	add	r2, pc, #4	; (adr r2, 800969c <USBD_GetDescriptor+0xb4>)
 8009696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969a:	bf00      	nop
 800969c:	080096b5 	.word	0x080096b5
 80096a0:	080096e9 	.word	0x080096e9
 80096a4:	0800971d 	.word	0x0800971d
 80096a8:	08009751 	.word	0x08009751
 80096ac:	08009785 	.word	0x08009785
 80096b0:	080097b9 	.word	0x080097b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00b      	beq.n	80096d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	7c12      	ldrb	r2, [r2, #16]
 80096cc:	f107 0108 	add.w	r1, r7, #8
 80096d0:	4610      	mov	r0, r2
 80096d2:	4798      	blx	r3
 80096d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096d6:	e091      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 facb 	bl	8009c76 <USBD_CtlError>
            err++;
 80096e0:	7afb      	ldrb	r3, [r7, #11]
 80096e2:	3301      	adds	r3, #1
 80096e4:	72fb      	strb	r3, [r7, #11]
          break;
 80096e6:	e089      	b.n	80097fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00b      	beq.n	800970c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	7c12      	ldrb	r2, [r2, #16]
 8009700:	f107 0108 	add.w	r1, r7, #8
 8009704:	4610      	mov	r0, r2
 8009706:	4798      	blx	r3
 8009708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800970a:	e077      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fab1 	bl	8009c76 <USBD_CtlError>
            err++;
 8009714:	7afb      	ldrb	r3, [r7, #11]
 8009716:	3301      	adds	r3, #1
 8009718:	72fb      	strb	r3, [r7, #11]
          break;
 800971a:	e06f      	b.n	80097fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00b      	beq.n	8009740 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	7c12      	ldrb	r2, [r2, #16]
 8009734:	f107 0108 	add.w	r1, r7, #8
 8009738:	4610      	mov	r0, r2
 800973a:	4798      	blx	r3
 800973c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800973e:	e05d      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fa97 	bl	8009c76 <USBD_CtlError>
            err++;
 8009748:	7afb      	ldrb	r3, [r7, #11]
 800974a:	3301      	adds	r3, #1
 800974c:	72fb      	strb	r3, [r7, #11]
          break;
 800974e:	e055      	b.n	80097fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00b      	beq.n	8009774 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	7c12      	ldrb	r2, [r2, #16]
 8009768:	f107 0108 	add.w	r1, r7, #8
 800976c:	4610      	mov	r0, r2
 800976e:	4798      	blx	r3
 8009770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009772:	e043      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fa7d 	bl	8009c76 <USBD_CtlError>
            err++;
 800977c:	7afb      	ldrb	r3, [r7, #11]
 800977e:	3301      	adds	r3, #1
 8009780:	72fb      	strb	r3, [r7, #11]
          break;
 8009782:	e03b      	b.n	80097fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00b      	beq.n	80097a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009796:	695b      	ldr	r3, [r3, #20]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	7c12      	ldrb	r2, [r2, #16]
 800979c:	f107 0108 	add.w	r1, r7, #8
 80097a0:	4610      	mov	r0, r2
 80097a2:	4798      	blx	r3
 80097a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097a6:	e029      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fa63 	bl	8009c76 <USBD_CtlError>
            err++;
 80097b0:	7afb      	ldrb	r3, [r7, #11]
 80097b2:	3301      	adds	r3, #1
 80097b4:	72fb      	strb	r3, [r7, #11]
          break;
 80097b6:	e021      	b.n	80097fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00b      	beq.n	80097dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	7c12      	ldrb	r2, [r2, #16]
 80097d0:	f107 0108 	add.w	r1, r7, #8
 80097d4:	4610      	mov	r0, r2
 80097d6:	4798      	blx	r3
 80097d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097da:	e00f      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fa49 	bl	8009c76 <USBD_CtlError>
            err++;
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	3301      	adds	r3, #1
 80097e8:	72fb      	strb	r3, [r7, #11]
          break;
 80097ea:	e007      	b.n	80097fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fa41 	bl	8009c76 <USBD_CtlError>
          err++;
 80097f4:	7afb      	ldrb	r3, [r7, #11]
 80097f6:	3301      	adds	r3, #1
 80097f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80097fa:	bf00      	nop
      }
      break;
 80097fc:	e037      	b.n	800986e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	7c1b      	ldrb	r3, [r3, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d109      	bne.n	800981a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800980c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800980e:	f107 0208 	add.w	r2, r7, #8
 8009812:	4610      	mov	r0, r2
 8009814:	4798      	blx	r3
 8009816:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009818:	e029      	b.n	800986e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 fa2a 	bl	8009c76 <USBD_CtlError>
        err++;
 8009822:	7afb      	ldrb	r3, [r7, #11]
 8009824:	3301      	adds	r3, #1
 8009826:	72fb      	strb	r3, [r7, #11]
      break;
 8009828:	e021      	b.n	800986e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	7c1b      	ldrb	r3, [r3, #16]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10d      	bne.n	800984e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983a:	f107 0208 	add.w	r2, r7, #8
 800983e:	4610      	mov	r0, r2
 8009840:	4798      	blx	r3
 8009842:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	3301      	adds	r3, #1
 8009848:	2207      	movs	r2, #7
 800984a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800984c:	e00f      	b.n	800986e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800984e:	6839      	ldr	r1, [r7, #0]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fa10 	bl	8009c76 <USBD_CtlError>
        err++;
 8009856:	7afb      	ldrb	r3, [r7, #11]
 8009858:	3301      	adds	r3, #1
 800985a:	72fb      	strb	r3, [r7, #11]
      break;
 800985c:	e007      	b.n	800986e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fa08 	bl	8009c76 <USBD_CtlError>
      err++;
 8009866:	7afb      	ldrb	r3, [r7, #11]
 8009868:	3301      	adds	r3, #1
 800986a:	72fb      	strb	r3, [r7, #11]
      break;
 800986c:	bf00      	nop
  }

  if (err != 0U)
 800986e:	7afb      	ldrb	r3, [r7, #11]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d11e      	bne.n	80098b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	88db      	ldrh	r3, [r3, #6]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d016      	beq.n	80098aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800987c:	893b      	ldrh	r3, [r7, #8]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00e      	beq.n	80098a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	88da      	ldrh	r2, [r3, #6]
 8009886:	893b      	ldrh	r3, [r7, #8]
 8009888:	4293      	cmp	r3, r2
 800988a:	bf28      	it	cs
 800988c:	4613      	movcs	r3, r2
 800988e:	b29b      	uxth	r3, r3
 8009890:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009892:	893b      	ldrh	r3, [r7, #8]
 8009894:	461a      	mov	r2, r3
 8009896:	68f9      	ldr	r1, [r7, #12]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fa5d 	bl	8009d58 <USBD_CtlSendData>
 800989e:	e009      	b.n	80098b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f9e7 	bl	8009c76 <USBD_CtlError>
 80098a8:	e004      	b.n	80098b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 faae 	bl	8009e0c <USBD_CtlSendStatus>
 80098b0:	e000      	b.n	80098b4 <USBD_GetDescriptor+0x2cc>
    return;
 80098b2:	bf00      	nop
  }
}
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop

080098bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	889b      	ldrh	r3, [r3, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d131      	bne.n	8009932 <USBD_SetAddress+0x76>
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	88db      	ldrh	r3, [r3, #6]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d12d      	bne.n	8009932 <USBD_SetAddress+0x76>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	885b      	ldrh	r3, [r3, #2]
 80098da:	2b7f      	cmp	r3, #127	; 0x7f
 80098dc:	d829      	bhi.n	8009932 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	885b      	ldrh	r3, [r3, #2]
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	d104      	bne.n	8009900 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80098f6:	6839      	ldr	r1, [r7, #0]
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f9bc 	bl	8009c76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098fe:	e01d      	b.n	800993c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	7bfa      	ldrb	r2, [r7, #15]
 8009904:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009908:	7bfb      	ldrb	r3, [r7, #15]
 800990a:	4619      	mov	r1, r3
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f00f f8a1 	bl	8018a54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fa7a 	bl	8009e0c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009918:	7bfb      	ldrb	r3, [r7, #15]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d004      	beq.n	8009928 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2202      	movs	r2, #2
 8009922:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009926:	e009      	b.n	800993c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009930:	e004      	b.n	800993c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009932:	6839      	ldr	r1, [r7, #0]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f99e 	bl	8009c76 <USBD_CtlError>
  }
}
 800993a:	bf00      	nop
 800993c:	bf00      	nop
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	885b      	ldrh	r3, [r3, #2]
 8009956:	b2da      	uxtb	r2, r3
 8009958:	4b4e      	ldr	r3, [pc, #312]	; (8009a94 <USBD_SetConfig+0x150>)
 800995a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800995c:	4b4d      	ldr	r3, [pc, #308]	; (8009a94 <USBD_SetConfig+0x150>)
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d905      	bls.n	8009970 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009964:	6839      	ldr	r1, [r7, #0]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 f985 	bl	8009c76 <USBD_CtlError>
    return USBD_FAIL;
 800996c:	2303      	movs	r3, #3
 800996e:	e08c      	b.n	8009a8a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b02      	cmp	r3, #2
 800997a:	d002      	beq.n	8009982 <USBD_SetConfig+0x3e>
 800997c:	2b03      	cmp	r3, #3
 800997e:	d029      	beq.n	80099d4 <USBD_SetConfig+0x90>
 8009980:	e075      	b.n	8009a6e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009982:	4b44      	ldr	r3, [pc, #272]	; (8009a94 <USBD_SetConfig+0x150>)
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d020      	beq.n	80099cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800998a:	4b42      	ldr	r3, [pc, #264]	; (8009a94 <USBD_SetConfig+0x150>)
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009994:	4b3f      	ldr	r3, [pc, #252]	; (8009a94 <USBD_SetConfig+0x150>)
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7fe ffe7 	bl	800896e <USBD_SetClassConfig>
 80099a0:	4603      	mov	r3, r0
 80099a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d008      	beq.n	80099bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f962 	bl	8009c76 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2202      	movs	r2, #2
 80099b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099ba:	e065      	b.n	8009a88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fa25 	bl	8009e0c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2203      	movs	r2, #3
 80099c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80099ca:	e05d      	b.n	8009a88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fa1d 	bl	8009e0c <USBD_CtlSendStatus>
      break;
 80099d2:	e059      	b.n	8009a88 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80099d4:	4b2f      	ldr	r3, [pc, #188]	; (8009a94 <USBD_SetConfig+0x150>)
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d112      	bne.n	8009a02 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2202      	movs	r2, #2
 80099e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80099e4:	4b2b      	ldr	r3, [pc, #172]	; (8009a94 <USBD_SetConfig+0x150>)
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	461a      	mov	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099ee:	4b29      	ldr	r3, [pc, #164]	; (8009a94 <USBD_SetConfig+0x150>)
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	4619      	mov	r1, r3
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7fe ffd6 	bl	80089a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fa06 	bl	8009e0c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a00:	e042      	b.n	8009a88 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009a02:	4b24      	ldr	r3, [pc, #144]	; (8009a94 <USBD_SetConfig+0x150>)
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d02a      	beq.n	8009a66 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f7fe ffc4 	bl	80089a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a1e:	4b1d      	ldr	r3, [pc, #116]	; (8009a94 <USBD_SetConfig+0x150>)
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	461a      	mov	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a28:	4b1a      	ldr	r3, [pc, #104]	; (8009a94 <USBD_SetConfig+0x150>)
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7fe ff9d 	bl	800896e <USBD_SetClassConfig>
 8009a34:	4603      	mov	r3, r0
 8009a36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00f      	beq.n	8009a5e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009a3e:	6839      	ldr	r1, [r7, #0]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f918 	bl	8009c76 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7fe ffa9 	bl	80089a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2202      	movs	r2, #2
 8009a58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a5c:	e014      	b.n	8009a88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f9d4 	bl	8009e0c <USBD_CtlSendStatus>
      break;
 8009a64:	e010      	b.n	8009a88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f9d0 	bl	8009e0c <USBD_CtlSendStatus>
      break;
 8009a6c:	e00c      	b.n	8009a88 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f900 	bl	8009c76 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a76:	4b07      	ldr	r3, [pc, #28]	; (8009a94 <USBD_SetConfig+0x150>)
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7fe ff92 	bl	80089a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a82:	2303      	movs	r3, #3
 8009a84:	73fb      	strb	r3, [r7, #15]
      break;
 8009a86:	bf00      	nop
  }

  return ret;
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20000604 	.word	0x20000604

08009a98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	88db      	ldrh	r3, [r3, #6]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d004      	beq.n	8009ab4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009aaa:	6839      	ldr	r1, [r7, #0]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f8e2 	bl	8009c76 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ab2:	e023      	b.n	8009afc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	dc02      	bgt.n	8009ac6 <USBD_GetConfig+0x2e>
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	dc03      	bgt.n	8009acc <USBD_GetConfig+0x34>
 8009ac4:	e015      	b.n	8009af2 <USBD_GetConfig+0x5a>
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	d00b      	beq.n	8009ae2 <USBD_GetConfig+0x4a>
 8009aca:	e012      	b.n	8009af2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	4619      	mov	r1, r3
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f93c 	bl	8009d58 <USBD_CtlSendData>
        break;
 8009ae0:	e00c      	b.n	8009afc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f934 	bl	8009d58 <USBD_CtlSendData>
        break;
 8009af0:	e004      	b.n	8009afc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f8be 	bl	8009c76 <USBD_CtlError>
        break;
 8009afa:	bf00      	nop
}
 8009afc:	bf00      	nop
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	3b01      	subs	r3, #1
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d81e      	bhi.n	8009b5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	88db      	ldrh	r3, [r3, #6]
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d004      	beq.n	8009b2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f8a5 	bl	8009c76 <USBD_CtlError>
        break;
 8009b2c:	e01a      	b.n	8009b64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d005      	beq.n	8009b4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	f043 0202 	orr.w	r2, r3, #2
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	330c      	adds	r3, #12
 8009b4e:	2202      	movs	r2, #2
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f900 	bl	8009d58 <USBD_CtlSendData>
      break;
 8009b58:	e004      	b.n	8009b64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f88a 	bl	8009c76 <USBD_CtlError>
      break;
 8009b62:	bf00      	nop
  }
}
 8009b64:	bf00      	nop
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	885b      	ldrh	r3, [r3, #2]
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d107      	bne.n	8009b8e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f940 	bl	8009e0c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009b8c:	e013      	b.n	8009bb6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	885b      	ldrh	r3, [r3, #2]
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d10b      	bne.n	8009bae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	889b      	ldrh	r3, [r3, #4]
 8009b9a:	0a1b      	lsrs	r3, r3, #8
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	b2da      	uxtb	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f930 	bl	8009e0c <USBD_CtlSendStatus>
}
 8009bac:	e003      	b.n	8009bb6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f860 	bl	8009c76 <USBD_CtlError>
}
 8009bb6:	bf00      	nop
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b082      	sub	sp, #8
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
 8009bc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d80b      	bhi.n	8009bee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	885b      	ldrh	r3, [r3, #2]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d10c      	bne.n	8009bf8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f910 	bl	8009e0c <USBD_CtlSendStatus>
      }
      break;
 8009bec:	e004      	b.n	8009bf8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 f840 	bl	8009c76 <USBD_CtlError>
      break;
 8009bf6:	e000      	b.n	8009bfa <USBD_ClrFeature+0x3c>
      break;
 8009bf8:	bf00      	nop
  }
}
 8009bfa:	bf00      	nop
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b084      	sub	sp, #16
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	781a      	ldrb	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	781a      	ldrb	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f7ff fa41 	bl	80090b4 <SWAPBYTE>
 8009c32:	4603      	mov	r3, r0
 8009c34:	461a      	mov	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	3301      	adds	r3, #1
 8009c44:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f7ff fa34 	bl	80090b4 <SWAPBYTE>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	461a      	mov	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	3301      	adds	r3, #1
 8009c58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f7ff fa27 	bl	80090b4 <SWAPBYTE>
 8009c66:	4603      	mov	r3, r0
 8009c68:	461a      	mov	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	80da      	strh	r2, [r3, #6]
}
 8009c6e:	bf00      	nop
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b082      	sub	sp, #8
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c80:	2180      	movs	r1, #128	; 0x80
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f00e fe7c 	bl	8018980 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c88:	2100      	movs	r1, #0
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f00e fe78 	bl	8018980 <USBD_LL_StallEP>
}
 8009c90:	bf00      	nop
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d036      	beq.n	8009d1c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009cb2:	6938      	ldr	r0, [r7, #16]
 8009cb4:	f000 f836 	bl	8009d24 <USBD_GetLen>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	3301      	adds	r3, #1
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	005b      	lsls	r3, r3, #1
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009cc6:	7dfb      	ldrb	r3, [r7, #23]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	4413      	add	r3, r2
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	7812      	ldrb	r2, [r2, #0]
 8009cd0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cd2:	7dfb      	ldrb	r3, [r7, #23]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009cd8:	7dfb      	ldrb	r3, [r7, #23]
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	4413      	add	r3, r2
 8009cde:	2203      	movs	r2, #3
 8009ce0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ce2:	7dfb      	ldrb	r3, [r7, #23]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009ce8:	e013      	b.n	8009d12 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	4413      	add	r3, r2
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	7812      	ldrb	r2, [r2, #0]
 8009cf4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	613b      	str	r3, [r7, #16]
    idx++;
 8009cfc:	7dfb      	ldrb	r3, [r7, #23]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d02:	7dfb      	ldrb	r3, [r7, #23]
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	4413      	add	r3, r2
 8009d08:	2200      	movs	r2, #0
 8009d0a:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1e7      	bne.n	8009cea <USBD_GetString+0x52>
 8009d1a:	e000      	b.n	8009d1e <USBD_GetString+0x86>
    return;
 8009d1c:	bf00      	nop
  }
}
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d34:	e005      	b.n	8009d42 <USBD_GetLen+0x1e>
  {
    len++;
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1f5      	bne.n	8009d36 <USBD_GetLen+0x12>
  }

  return len;
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3714      	adds	r7, #20
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2202      	movs	r2, #2
 8009d68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f00e fe87 	bl	8018a92 <USBD_LL_Transmit>

  return USBD_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b084      	sub	sp, #16
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	60f8      	str	r0, [r7, #12]
 8009d96:	60b9      	str	r1, [r7, #8]
 8009d98:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	2100      	movs	r1, #0
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f00e fe76 	bl	8018a92 <USBD_LL_Transmit>

  return USBD_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2203      	movs	r2, #3
 8009dc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	2100      	movs	r1, #0
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f00e fe7a 	bl	8018ad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b084      	sub	sp, #16
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	60f8      	str	r0, [r7, #12]
 8009df2:	60b9      	str	r1, [r7, #8]
 8009df4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f00e fe69 	bl	8018ad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2204      	movs	r2, #4
 8009e18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	2200      	movs	r2, #0
 8009e20:	2100      	movs	r1, #0
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f00e fe35 	bl	8018a92 <USBD_LL_Transmit>

  return USBD_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b082      	sub	sp, #8
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2205      	movs	r2, #5
 8009e3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e42:	2300      	movs	r3, #0
 8009e44:	2200      	movs	r2, #0
 8009e46:	2100      	movs	r1, #0
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f00e fe43 	bl	8018ad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b08b      	sub	sp, #44	; 0x2c
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	ed87 0a02 	vstr	s0, [r7, #8]
 8009e64:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	461a      	mov	r2, r3
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	885b      	ldrh	r3, [r3, #2]
 8009e7c:	fb02 f303 	mul.w	r3, r2, r3
 8009e80:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8009e86:	e010      	b.n	8009eaa <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	1d1a      	adds	r2, r3, #4
 8009e8c:	627a      	str	r2, [r7, #36]	; 0x24
 8009e8e:	ed93 7a00 	vldr	s14, [r3]
 8009e92:	6a3b      	ldr	r3, [r7, #32]
 8009e94:	1d1a      	adds	r2, r3, #4
 8009e96:	623a      	str	r2, [r7, #32]
 8009e98:	edd7 7a02 	vldr	s15, [r7, #8]
 8009e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ea0:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1eb      	bne.n	8009e88 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8009eb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	372c      	adds	r7, #44	; 0x2c
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 8009ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ec6:	b093      	sub	sp, #76	; 0x4c
 8009ec8:	af0a      	add	r7, sp, #40	; 0x28
 8009eca:	6178      	str	r0, [r7, #20]
 8009ecc:	6139      	str	r1, [r7, #16]
 8009ece:	60fa      	str	r2, [r7, #12]
 8009ed0:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 8009ed8:	e033      	b.n	8009f42 <arm_fully_connected_s8+0x7e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	607b      	str	r3, [r7, #4]
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	6852      	ldr	r2, [r2, #4]
 8009ee4:	6939      	ldr	r1, [r7, #16]
 8009ee6:	6889      	ldr	r1, [r1, #8]
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	6800      	ldr	r0, [r0, #0]
 8009eec:	68fc      	ldr	r4, [r7, #12]
 8009eee:	6864      	ldr	r4, [r4, #4]
 8009ef0:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8009ef2:	682d      	ldr	r5, [r5, #0]
 8009ef4:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8009ef6:	68f6      	ldr	r6, [r6, #12]
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	603b      	str	r3, [r7, #0]
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	9308      	str	r3, [sp, #32]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	9307      	str	r3, [sp, #28]
 8009f08:	9606      	str	r6, [sp, #24]
 8009f0a:	9505      	str	r5, [sp, #20]
 8009f0c:	9404      	str	r4, [sp, #16]
 8009f0e:	9003      	str	r0, [sp, #12]
 8009f10:	9102      	str	r1, [sp, #8]
 8009f12:	9201      	str	r2, [sp, #4]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f20:	f000 f822 	bl	8009f68 <arm_nn_vec_mat_mult_t_s8>
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 8009f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2c:	4413      	add	r3, r2
 8009f2e:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 8009f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	461a      	mov	r2, r3
 8009f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f38:	4413      	add	r3, r2
 8009f3a:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1c8      	bne.n	8009eda <arm_fully_connected_s8+0x16>
    }
    return (ARM_MATH_SUCCESS);
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3724      	adds	r7, #36	; 0x24
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f52 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b083      	sub	sp, #12
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 8009f68:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009f6c:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	f507 64c6 	add.w	r4, r7, #1584	; 0x630
 8009f76:	f2a4 54dc 	subw	r4, r4, #1500	; 0x5dc
 8009f7a:	6020      	str	r0, [r4, #0]
 8009f7c:	f507 60c6 	add.w	r0, r7, #1584	; 0x630
 8009f80:	f5a0 60bc 	sub.w	r0, r0, #1504	; 0x5e0
 8009f84:	6001      	str	r1, [r0, #0]
 8009f86:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8009f8a:	f2a1 51e4 	subw	r1, r1, #1508	; 0x5e4
 8009f8e:	600a      	str	r2, [r1, #0]
 8009f90:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8009f94:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 8009f98:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst++;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 8009f9a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009f9e:	3b04      	subs	r3, #4
 8009fa0:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
    const int16_t lhs_offset_s16 = lhs_offset;
 8009fa4:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8009fa8:	f8a7 3612 	strh.w	r3, [r7, #1554]	; 0x612
    const int16_t rhs_offset_s16 = rhs_offset;
 8009fac:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8009fb0:	f8a7 3610 	strh.w	r3, [r7, #1552]	; 0x610

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 8009fb4:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 8009fb8:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 8009fbc:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 8009fc0:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 8009fc4:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 8009fc8:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8009fcc:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 8009fd0:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 8009fd4:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 8009fd8:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 8009fdc:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 8009fe0:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 8009fe4:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 8009fe8:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 8009fec:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8009ff0:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 8009ff4:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 8009ff8:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8009ffc:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 800a000:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800a004:	2300      	movs	r3, #0
 800a006:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800a00a:	f001 bd13 	b.w	800ba34 <arm_nn_vec_mat_mult_t_s8+0x1acc>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800a00e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a012:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 800a016:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a01a:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6013      	str	r3, [r2, #0]
        const q7_t *rhs_ptr = &rhs[0];
 800a022:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a026:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 800a02a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a02e:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6013      	str	r3, [r2, #0]

        q31_t res00 = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        q31_t res01 = 0;
 800a03c:	2300      	movs	r3, #0
 800a03e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        if (bias)
 800a042:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a046:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d01b      	beq.n	800a088 <arm_nn_vec_mat_mult_t_s8+0x120>
        {
            res00 = *bias++;
 800a050:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a054:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800a058:	6819      	ldr	r1, [r3, #0]
 800a05a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a05e:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 800a062:	1d0b      	adds	r3, r1, #4
 800a064:	6013      	str	r3, [r2, #0]
 800a066:	680b      	ldr	r3, [r1, #0]
 800a068:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 = *bias++;
 800a06c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a070:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800a074:	6819      	ldr	r1, [r3, #0]
 800a076:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a07a:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 800a07e:	1d0b      	adds	r3, r1, #4
 800a080:	6013      	str	r3, [r2, #0]
 800a082:	680b      	ldr	r3, [r1, #0]
 800a084:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        }

        int32_t rhs_cols_idx = 0;
 800a088:	2300      	movs	r3, #0
 800a08a:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

        q31_t val0, val1, val2, val3, val4, val5;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800a08e:	f001 b9db 	b.w	800b448 <arm_nn_vec_mat_mult_t_s8+0x14e0>
 800a092:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a096:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 800a09a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a09e:	6013      	str	r3, [r2, #0]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 800a0a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a0a4:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a0b4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800a0b8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800a0ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a0be:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	1d1a      	adds	r2, r3, #4
 800a0c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a0cc:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	601a      	str	r2, [r3, #0]

    return (val);
 800a0d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a0d8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800a0dc:	681b      	ldr	r3, [r3, #0]
        {
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800a0de:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800a0e2:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800a0e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a0ea:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 800a0ee:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800a0f2:	6013      	str	r3, [r2, #0]
 800a0f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a0f8:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800a0fc:	6019      	str	r1, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800a0fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a102:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a10c:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	fa22 f283 	sxtab16	r2, r2, r3
 800a116:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a11a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800a11e:	601a      	str	r2, [r3, #0]
  return(result);
 800a120:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a124:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800a12e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a132:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 800a136:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800a13a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800a13c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a140:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	461a      	mov	r2, r3
 800a14c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a150:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800a154:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800a156:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a15a:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	1d1a      	adds	r2, r3, #4
 800a164:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a168:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	601a      	str	r2, [r3, #0]
    return (val);
 800a170:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a174:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800a178:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800a17a:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800a17e:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800a182:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a186:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800a18a:	601a      	str	r2, [r3, #0]
 800a18c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a190:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 800a194:	2308      	movs	r3, #8
 800a196:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800a198:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a19c:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 800a1a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a1a4:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 031f 	and.w	r3, r3, #31
 800a1ae:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800a1b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a1b4:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d105      	bne.n	800a1ca <arm_nn_vec_mat_mult_t_s8+0x262>
    return op1;
 800a1be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a1c2:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800a1c6:	6819      	ldr	r1, [r3, #0]
 800a1c8:	e00b      	b.n	800a1e2 <arm_nn_vec_mat_mult_t_s8+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800a1ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a1ce:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 800a1d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a1d6:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800a1da:	6812      	ldr	r2, [r2, #0]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	fa62 f103 	ror.w	r1, r2, r3
 800a1e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a1e6:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 800a1ea:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800a1ee:	6013      	str	r3, [r2, #0]
 800a1f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a1f4:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800a1f8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800a1fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a1fe:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a208:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	fa22 f283 	sxtab16	r2, r2, r3
 800a212:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a216:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800a21a:	601a      	str	r2, [r3, #0]
  return(result);
 800a21c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a220:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800a22a:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800a22e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a232:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 800a236:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800a23a:	6013      	str	r3, [r2, #0]
 800a23c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a240:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800a244:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800a246:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a24a:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a254:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	fa22 f283 	sxtab16	r2, r2, r3
 800a25e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a262:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800a266:	601a      	str	r2, [r3, #0]
  return(result);
 800a268:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a26c:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800a276:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a27a:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800a284:	441a      	add	r2, r3
 800a286:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a28a:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a294:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	461a      	mov	r2, r3
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 800a29e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a2a2:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800a2a6:	601a      	str	r2, [r3, #0]

    return (val);
 800a2a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a2ac:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800a2b6:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800a2ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a2be:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a2c8:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 800a2cc:	2308      	movs	r3, #8
 800a2ce:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800a2d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a2d4:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 800a2d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a2dc:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f003 031f 	and.w	r3, r3, #31
 800a2e6:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800a2e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a2ec:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d105      	bne.n	800a302 <arm_nn_vec_mat_mult_t_s8+0x39a>
    return op1;
 800a2f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a2fa:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800a2fe:	6819      	ldr	r1, [r3, #0]
 800a300:	e00b      	b.n	800a31a <arm_nn_vec_mat_mult_t_s8+0x3b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800a302:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a306:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 800a30a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a30e:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800a312:	6812      	ldr	r2, [r2, #0]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	fa62 f103 	ror.w	r1, r2, r3
 800a31a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a31e:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 800a322:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a32c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800a330:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800a332:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a336:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a340:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	fa22 f283 	sxtab16	r2, r2, r3
 800a34a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a34e:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800a352:	601a      	str	r2, [r3, #0]
  return(result);
 800a354:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a358:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800a362:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800a366:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800a36a:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800a36e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a372:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800a376:	601a      	str	r2, [r3, #0]
 800a378:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a37c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800a380:	6019      	str	r1, [r3, #0]
 800a382:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a386:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800a38a:	6018      	str	r0, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800a38c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a390:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800a394:	6819      	ldr	r1, [r3, #0]
 800a396:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a39a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a3a4:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	fb21 3202 	smlad	r2, r1, r2, r3
 800a3ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a3b2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a3b6:	601a      	str	r2, [r3, #0]
  return(result);
 800a3b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a3bc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800a3c6:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800a3ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a3ce:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 800a3d2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800a3d6:	6013      	str	r3, [r2, #0]
 800a3d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a3dc:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800a3e0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800a3e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a3e6:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a3f0:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	fa22 f283 	sxtab16	r2, r2, r3
 800a3fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a3fe:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800a402:	601a      	str	r2, [r3, #0]
  return(result);
 800a404:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a408:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800a412:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800a416:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800a41a:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800a41e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a422:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800a426:	601a      	str	r2, [r3, #0]
 800a428:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a42c:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800a430:	6019      	str	r1, [r3, #0]
 800a432:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a436:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800a43a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800a43c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a440:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800a444:	6819      	ldr	r1, [r3, #0]
 800a446:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a44a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a454:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	fb21 3202 	smlad	r2, r1, r2, r3
 800a45e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a462:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800a466:	601a      	str	r2, [r3, #0]
  return(result);
 800a468:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a46c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800a476:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800a47a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a47e:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a488:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 800a48c:	2308      	movs	r3, #8
 800a48e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800a490:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a494:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 800a498:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a49c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 031f 	and.w	r3, r3, #31
 800a4a6:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800a4a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a4ac:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d105      	bne.n	800a4c2 <arm_nn_vec_mat_mult_t_s8+0x55a>
    return op1;
 800a4b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a4ba:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800a4be:	6819      	ldr	r1, [r3, #0]
 800a4c0:	e00b      	b.n	800a4da <arm_nn_vec_mat_mult_t_s8+0x572>
  return (op1 >> op2) | (op1 << (32U - op2));
 800a4c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a4c6:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 800a4ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a4ce:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800a4d2:	6812      	ldr	r2, [r2, #0]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	fa62 f103 	ror.w	r1, r2, r3
 800a4da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a4de:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 800a4e2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800a4e6:	6013      	str	r3, [r2, #0]
 800a4e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a4ec:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800a4f0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800a4f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a4f6:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a500:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	fa22 f283 	sxtab16	r2, r2, r3
 800a50a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a50e:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800a512:	601a      	str	r2, [r3, #0]
  return(result);
 800a514:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a518:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800a522:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a526:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 800a52a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a52e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800a530:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a534:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	461a      	mov	r2, r3
 800a540:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a544:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800a548:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800a54a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a54e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	1d1a      	adds	r2, r3, #4
 800a558:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a55c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	601a      	str	r2, [r3, #0]
    return (val);
 800a564:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a568:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800a56c:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800a56e:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800a572:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800a576:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800a57a:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800a57e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a582:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800a586:	601a      	str	r2, [r3, #0]
 800a588:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a58c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800a590:	6019      	str	r1, [r3, #0]
 800a592:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a596:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800a59a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800a59c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a5a0:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800a5a4:	6819      	ldr	r1, [r3, #0]
 800a5a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a5aa:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a5b4:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	fb21 3202 	smlad	r2, r1, r2, r3
 800a5be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a5c2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800a5c6:	601a      	str	r2, [r3, #0]
  return(result);
 800a5c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a5cc:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800a5d6:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800a5da:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800a5de:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800a5e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a5e6:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800a5ea:	601a      	str	r2, [r3, #0]
 800a5ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a5f0:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800a5f4:	6019      	str	r1, [r3, #0]
 800a5f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a5fa:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800a5fe:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800a600:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a604:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800a608:	6819      	ldr	r1, [r3, #0]
 800a60a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a60e:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a618:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	fb21 3202 	smlad	r2, r1, r2, r3
 800a622:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a626:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800a62a:	601a      	str	r2, [r3, #0]
  return(result);
 800a62c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a630:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800a63a:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800a63e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a642:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 800a646:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800a64a:	6013      	str	r3, [r2, #0]
 800a64c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a650:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800a654:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800a656:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a65a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a664:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	fa22 f283 	sxtab16	r2, r2, r3
 800a66e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a672:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800a676:	601a      	str	r2, [r3, #0]
  return(result);
 800a678:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a67c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800a686:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a68a:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 800a68e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800a692:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800a694:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a698:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a6a8:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 800a6ac:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800a6ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a6b2:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	1d1a      	adds	r2, r3, #4
 800a6bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a6c0:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	601a      	str	r2, [r3, #0]
    return (val);
 800a6c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a6cc:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 800a6d0:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800a6d2:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800a6d6:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800a6da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a6de:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a6e8:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 800a6ec:	2308      	movs	r3, #8
 800a6ee:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800a6f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a6f4:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 800a6f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a6fc:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f003 031f 	and.w	r3, r3, #31
 800a706:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800a708:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a70c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d105      	bne.n	800a722 <arm_nn_vec_mat_mult_t_s8+0x7ba>
    return op1;
 800a716:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a71a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800a71e:	6819      	ldr	r1, [r3, #0]
 800a720:	e00b      	b.n	800a73a <arm_nn_vec_mat_mult_t_s8+0x7d2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800a722:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a726:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 800a72a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a72e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800a732:	6812      	ldr	r2, [r2, #0]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	fa62 f103 	ror.w	r1, r2, r3
 800a73a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a73e:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 800a742:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800a746:	6013      	str	r3, [r2, #0]
 800a748:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a74c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800a750:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800a752:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a756:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a760:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	fa22 f283 	sxtab16	r2, r2, r3
 800a76a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a76e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800a772:	601a      	str	r2, [r3, #0]
  return(result);
 800a774:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a778:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800a782:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800a786:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a78a:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 800a78e:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800a792:	6013      	str	r3, [r2, #0]
 800a794:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a798:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800a79c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800a79e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a7a2:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a7ac:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	fa22 f283 	sxtab16	r2, r2, r3
 800a7b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a7ba:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800a7be:	601a      	str	r2, [r3, #0]
  return(result);
 800a7c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a7c4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800a7ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a7d2:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800a7dc:	441a      	add	r2, r3
 800a7de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a7e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800a7e6:	601a      	str	r2, [r3, #0]
 800a7e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a7ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800a7f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a7fa:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800a7fe:	601a      	str	r2, [r3, #0]
    return (val);
 800a800:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a804:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800a80e:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800a812:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a816:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a81a:	601a      	str	r2, [r3, #0]
 800a81c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a820:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800a824:	2308      	movs	r3, #8
 800a826:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800a828:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a82c:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800a830:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a834:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f003 031f 	and.w	r3, r3, #31
 800a83e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800a840:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a844:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d105      	bne.n	800a85a <arm_nn_vec_mat_mult_t_s8+0x8f2>
    return op1;
 800a84e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a852:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a856:	6819      	ldr	r1, [r3, #0]
 800a858:	e00b      	b.n	800a872 <arm_nn_vec_mat_mult_t_s8+0x90a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800a85a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a85e:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 800a862:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a866:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800a86a:	6812      	ldr	r2, [r2, #0]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	fa62 f103 	ror.w	r1, r2, r3
 800a872:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a876:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 800a87a:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800a87e:	6013      	str	r3, [r2, #0]
 800a880:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a884:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800a888:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800a88a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a88e:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a898:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	fa22 f283 	sxtab16	r2, r2, r3
 800a8a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a8a6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800a8aa:	601a      	str	r2, [r3, #0]
  return(result);
 800a8ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a8b0:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800a8ba:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800a8be:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800a8c2:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800a8c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a8ca:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800a8ce:	601a      	str	r2, [r3, #0]
 800a8d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a8d4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800a8d8:	6019      	str	r1, [r3, #0]
 800a8da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a8de:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a8e2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800a8e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a8e8:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800a8ec:	6819      	ldr	r1, [r3, #0]
 800a8ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a8f2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a8fc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	fb21 3202 	smlad	r2, r1, r2, r3
 800a906:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a90a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a90e:	601a      	str	r2, [r3, #0]
  return(result);
 800a910:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a914:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800a91e:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800a922:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a926:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 800a92a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800a92e:	6013      	str	r3, [r2, #0]
 800a930:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a934:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800a938:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800a93a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a93e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a948:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	fa22 f283 	sxtab16	r2, r2, r3
 800a952:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a956:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800a95a:	601a      	str	r2, [r3, #0]
  return(result);
 800a95c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a960:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800a96a:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800a96e:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800a972:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800a976:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a97a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800a97e:	601a      	str	r2, [r3, #0]
 800a980:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a984:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800a988:	6019      	str	r1, [r3, #0]
 800a98a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a98e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800a992:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800a994:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a998:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800a99c:	6819      	ldr	r1, [r3, #0]
 800a99e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a9a2:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a9ac:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	fb21 3202 	smlad	r2, r1, r2, r3
 800a9b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a9ba:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800a9be:	601a      	str	r2, [r3, #0]
  return(result);
 800a9c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a9c4:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800a9ce:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800a9d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a9d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800a9da:	601a      	str	r2, [r3, #0]
 800a9dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a9e0:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800a9e4:	2308      	movs	r3, #8
 800a9e6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800a9e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a9ec:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800a9f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a9f4:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 031f 	and.w	r3, r3, #31
 800a9fe:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800aa00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa04:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d105      	bne.n	800aa1a <arm_nn_vec_mat_mult_t_s8+0xab2>
    return op1;
 800aa0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800aa16:	6819      	ldr	r1, [r3, #0]
 800aa18:	e00b      	b.n	800aa32 <arm_nn_vec_mat_mult_t_s8+0xaca>
  return (op1 >> op2) | (op1 << (32U - op2));
 800aa1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa1e:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 800aa22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa26:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800aa2a:	6812      	ldr	r2, [r2, #0]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	fa62 f103 	ror.w	r1, r2, r3
 800aa32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa36:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800aa3a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800aa3e:	6013      	str	r3, [r2, #0]
 800aa40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800aa48:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800aa4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa4e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	fa22 f283 	sxtab16	r2, r2, r3
 800aa62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa66:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800aa6a:	601a      	str	r2, [r3, #0]
  return(result);
 800aa6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa70:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800aa7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa7e:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800aa82:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800aa86:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800aa88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa8c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	461a      	mov	r2, r3
 800aa98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa9c:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800aaa0:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800aaa2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aaa6:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	1d1a      	adds	r2, r3, #4
 800aab0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aab4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	601a      	str	r2, [r3, #0]
    return (val);
 800aabc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aac0:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800aac4:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800aac6:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800aaca:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800aace:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800aad2:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800aad6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aada:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800aade:	601a      	str	r2, [r3, #0]
 800aae0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aae4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800aae8:	6019      	str	r1, [r3, #0]
 800aaea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aaee:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800aaf2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800aaf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aaf8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800aafc:	6819      	ldr	r1, [r3, #0]
 800aafe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab02:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab0c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	fb21 3202 	smlad	r2, r1, r2, r3
 800ab16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab1a:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800ab1e:	601a      	str	r2, [r3, #0]
  return(result);
 800ab20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab24:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800ab2e:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800ab32:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800ab36:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800ab3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab3e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800ab42:	601a      	str	r2, [r3, #0]
 800ab44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab48:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800ab4c:	6019      	str	r1, [r3, #0]
 800ab4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab52:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800ab56:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ab58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab5c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800ab60:	6819      	ldr	r1, [r3, #0]
 800ab62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab66:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab70:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	fb21 3202 	smlad	r2, r1, r2, r3
 800ab7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab7e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800ab82:	601a      	str	r2, [r3, #0]
  return(result);
 800ab84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab88:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800ab92:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800ab96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab9a:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 800ab9e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800aba2:	6013      	str	r3, [r2, #0]
 800aba4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aba8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800abac:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800abae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800abb2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800abbc:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	fa22 f283 	sxtab16	r2, r2, r3
 800abc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800abca:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800abce:	601a      	str	r2, [r3, #0]
  return(result);
 800abd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800abd4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800abde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800abe2:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800abe6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800abea:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800abec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800abf0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	461a      	mov	r2, r3
 800abfc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac00:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800ac04:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800ac06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac0a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	1d1a      	adds	r2, r3, #4
 800ac14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac18:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	601a      	str	r2, [r3, #0]
    return (val);
 800ac20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac24:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800ac28:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800ac2a:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800ac2e:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800ac32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac36:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ac3a:	601a      	str	r2, [r3, #0]
 800ac3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac40:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 800ac44:	2308      	movs	r3, #8
 800ac46:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800ac48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac4c:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 800ac50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac54:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 031f 	and.w	r3, r3, #31
 800ac5e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800ac60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac64:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d105      	bne.n	800ac7a <arm_nn_vec_mat_mult_t_s8+0xd12>
    return op1;
 800ac6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac72:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ac76:	6819      	ldr	r1, [r3, #0]
 800ac78:	e00b      	b.n	800ac92 <arm_nn_vec_mat_mult_t_s8+0xd2a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ac7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac7e:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800ac82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac86:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800ac8a:	6812      	ldr	r2, [r2, #0]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	fa62 f103 	ror.w	r1, r2, r3
 800ac92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac96:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 800ac9a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800ac9e:	6013      	str	r3, [r2, #0]
 800aca0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aca4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800aca8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800acaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800acae:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800acb8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	fa22 f283 	sxtab16	r2, r2, r3
 800acc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800acc6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800acca:	601a      	str	r2, [r3, #0]
  return(result);
 800accc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800acd0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800acda:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800acde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ace2:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 800ace6:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800acea:	6013      	str	r3, [r2, #0]
 800acec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800acf0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800acf4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800acf6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800acfa:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad04:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	fa22 f283 	sxtab16	r2, r2, r3
 800ad0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad12:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800ad16:	601a      	str	r2, [r3, #0]
  return(result);
 800ad18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad1c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800ad26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad2a:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800ad34:	441a      	add	r2, r3
 800ad36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad3a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800ad3e:	601a      	str	r2, [r3, #0]
 800ad40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad44:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800ad4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad52:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 800ad56:	601a      	str	r2, [r3, #0]
    return (val);
 800ad58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad5c:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800ad66:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800ad6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad6e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800ad72:	601a      	str	r2, [r3, #0]
 800ad74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad78:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800ad7c:	2308      	movs	r3, #8
 800ad7e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800ad80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad84:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800ad88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad8c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 031f 	and.w	r3, r3, #31
 800ad96:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800ad98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad9c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d105      	bne.n	800adb2 <arm_nn_vec_mat_mult_t_s8+0xe4a>
    return op1;
 800ada6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800adaa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800adae:	6819      	ldr	r1, [r3, #0]
 800adb0:	e00b      	b.n	800adca <arm_nn_vec_mat_mult_t_s8+0xe62>
  return (op1 >> op2) | (op1 << (32U - op2));
 800adb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800adb6:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 800adba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800adbe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800adc2:	6812      	ldr	r2, [r2, #0]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	fa62 f103 	ror.w	r1, r2, r3
 800adca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800adce:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800add2:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800add6:	6013      	str	r3, [r2, #0]
 800add8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800addc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800ade0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ade2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ade6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800adf0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	fa22 f283 	sxtab16	r2, r2, r3
 800adfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800adfe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800ae02:	601a      	str	r2, [r3, #0]
  return(result);
 800ae04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae08:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800ae12:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800ae16:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800ae1a:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800ae1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae22:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800ae26:	601a      	str	r2, [r3, #0]
 800ae28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae2c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800ae30:	6019      	str	r1, [r3, #0]
 800ae32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae36:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800ae3a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ae3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae40:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800ae44:	6819      	ldr	r1, [r3, #0]
 800ae46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae4a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae54:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	fb21 3202 	smlad	r2, r1, r2, r3
 800ae5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae62:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800ae66:	601a      	str	r2, [r3, #0]
  return(result);
 800ae68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae6c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800ae76:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800ae7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae7e:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 800ae82:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800ae86:	6013      	str	r3, [r2, #0]
 800ae88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae8c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800ae90:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ae92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae96:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aea0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	fa22 f283 	sxtab16	r2, r2, r3
 800aeaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aeae:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800aeb2:	601a      	str	r2, [r3, #0]
  return(result);
 800aeb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aeb8:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800aec2:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800aec6:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800aeca:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800aece:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aed2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800aed6:	601a      	str	r2, [r3, #0]
 800aed8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aedc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800aee0:	6019      	str	r1, [r3, #0]
 800aee2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aee6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800aeea:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800aeec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aef0:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800aef4:	6819      	ldr	r1, [r3, #0]
 800aef6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aefa:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af04:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	fb21 3202 	smlad	r2, r1, r2, r3
 800af0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af12:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800af16:	601a      	str	r2, [r3, #0]
  return(result);
 800af18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af1c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800af26:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800af2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af2e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800af32:	601a      	str	r2, [r3, #0]
 800af34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af38:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800af3c:	2308      	movs	r3, #8
 800af3e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800af40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af44:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800af48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af4c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 031f 	and.w	r3, r3, #31
 800af56:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800af58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af5c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d105      	bne.n	800af72 <arm_nn_vec_mat_mult_t_s8+0x100a>
    return op1;
 800af66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af6a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800af6e:	6819      	ldr	r1, [r3, #0]
 800af70:	e00b      	b.n	800af8a <arm_nn_vec_mat_mult_t_s8+0x1022>
  return (op1 >> op2) | (op1 << (32U - op2));
 800af72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af76:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 800af7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af7e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800af82:	6812      	ldr	r2, [r2, #0]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	fa62 f103 	ror.w	r1, r2, r3
 800af8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af8e:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800af92:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800af96:	6013      	str	r3, [r2, #0]
 800af98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af9c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800afa0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800afa2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800afa6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800afb0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	fa22 f283 	sxtab16	r2, r2, r3
 800afba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800afbe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800afc2:	601a      	str	r2, [r3, #0]
  return(result);
 800afc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800afc8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800afd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800afd6:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 800afda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800afde:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800afe0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800afe4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	461a      	mov	r2, r3
 800aff0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aff4:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 800aff8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800affa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800affe:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	1d1a      	adds	r2, r3, #4
 800b008:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b00c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	601a      	str	r2, [r3, #0]
    return (val);
 800b014:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b018:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 800b01c:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800b01e:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800b022:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800b026:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800b02a:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800b02e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b032:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b036:	601a      	str	r2, [r3, #0]
 800b038:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b03c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800b040:	6019      	str	r1, [r3, #0]
 800b042:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b046:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800b04a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b04c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b050:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b054:	6819      	ldr	r1, [r3, #0]
 800b056:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b05a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b064:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	fb21 3202 	smlad	r2, r1, r2, r3
 800b06e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b072:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800b076:	601a      	str	r2, [r3, #0]
  return(result);
 800b078:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b07c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800b086:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800b08a:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800b08e:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800b092:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b096:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b0a4:	6019      	str	r1, [r3, #0]
 800b0a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b0ae:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b0b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0b4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b0b8:	6819      	ldr	r1, [r3, #0]
 800b0ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	fb21 3202 	smlad	r2, r1, r2, r3
 800b0d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0d6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b0da:	601a      	str	r2, [r3, #0]
  return(result);
 800b0dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800b0ea:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800b0ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0f2:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800b0f6:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b0fa:	6013      	str	r3, [r2, #0]
 800b0fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b100:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800b104:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b106:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b10a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b114:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	fa22 f283 	sxtab16	r2, r2, r3
 800b11e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b122:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800b126:	601a      	str	r2, [r3, #0]
  return(result);
 800b128:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b12c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800b136:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b13a:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800b13e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800b142:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800b144:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b148:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	461a      	mov	r2, r3
 800b154:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b158:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800b15c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800b15e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b162:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	1d1a      	adds	r2, r3, #4
 800b16c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b170:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	601a      	str	r2, [r3, #0]
    return (val);
 800b178:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b17c:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800b180:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800b182:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800b186:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800b18a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b18e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b192:	601a      	str	r2, [r3, #0]
 800b194:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b198:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800b19c:	2308      	movs	r3, #8
 800b19e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b1a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1a4:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800b1a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 031f 	and.w	r3, r3, #31
 800b1b6:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b1b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1bc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d105      	bne.n	800b1d2 <arm_nn_vec_mat_mult_t_s8+0x126a>
    return op1;
 800b1c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1ca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b1ce:	6819      	ldr	r1, [r3, #0]
 800b1d0:	e00b      	b.n	800b1ea <arm_nn_vec_mat_mult_t_s8+0x1282>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b1d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1d6:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800b1da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b1e2:	6812      	ldr	r2, [r2, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	fa62 f103 	ror.w	r1, r2, r3
 800b1ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1ee:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 800b1f2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b1f6:	6013      	str	r3, [r2, #0]
 800b1f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b200:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b202:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b206:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	fa22 f283 	sxtab16	r2, r2, r3
 800b21a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b21e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b222:	601a      	str	r2, [r3, #0]
  return(result);
 800b224:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b228:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800b232:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800b236:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800b23a:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 800b23e:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b242:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 800b246:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800b24a:	fa22 f283 	sxtab16	r2, r2, r3
 800b24e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b252:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b256:	601a      	str	r2, [r3, #0]
  return(result);
 800b258:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b25c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800b266:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b26a:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800b274:	4413      	add	r3, r2
 800b276:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800b27a:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800b282:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b286:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800b28a:	601a      	str	r2, [r3, #0]
    return (val);
 800b28c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b290:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800b29a:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 800b29e:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800b2a2:	2308      	movs	r3, #8
 800b2a4:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  op2 %= 32U;
 800b2a8:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800b2ac:	f003 031f 	and.w	r3, r3, #31
 800b2b0:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  if (op2 == 0U)
 800b2b4:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d102      	bne.n	800b2c2 <arm_nn_vec_mat_mult_t_s8+0x135a>
    return op1;
 800b2bc:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800b2c0:	e004      	b.n	800b2cc <arm_nn_vec_mat_mult_t_s8+0x1364>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b2c2:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800b2c6:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800b2ca:	41da      	rors	r2, r3
 800b2cc:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800b2d0:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 800b2d4:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b2d8:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 800b2dc:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 800b2e0:	fa22 f383 	sxtab16	r3, r2, r3
 800b2e4:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  return(result);
 800b2e8:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 800b2ec:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800b2f0:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800b2f4:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	; 0x5c4
 800b2f8:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800b2fc:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 800b300:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 800b304:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b308:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 800b30c:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 800b310:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 800b314:	fb21 3302 	smlad	r3, r1, r2, r3
 800b318:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
  return(result);
 800b31c:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 800b320:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800b324:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800b328:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b32c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800b330:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b334:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 800b338:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 800b33c:	fa22 f383 	sxtab16	r3, r2, r3
 800b340:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  return(result);
 800b344:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 800b348:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800b34c:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800b350:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800b354:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800b358:	f8c7 157c 	str.w	r1, [r7, #1404]	; 0x57c
 800b35c:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 800b360:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b364:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 800b368:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 800b36c:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800b370:	fb21 3302 	smlad	r3, r1, r2, r3
 800b374:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  return(result);
 800b378:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800b37c:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800b380:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 800b384:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800b388:	2308      	movs	r3, #8
 800b38a:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  op2 %= 32U;
 800b38e:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800b392:	f003 031f 	and.w	r3, r3, #31
 800b396:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  if (op2 == 0U)
 800b39a:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d102      	bne.n	800b3a8 <arm_nn_vec_mat_mult_t_s8+0x1440>
    return op1;
 800b3a2:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800b3a6:	e004      	b.n	800b3b2 <arm_nn_vec_mat_mult_t_s8+0x144a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b3a8:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800b3ac:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800b3b0:	41da      	rors	r2, r3
 800b3b2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b3b6:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 800b3ba:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b3be:	f8d7 2590 	ldr.w	r2, [r7, #1424]	; 0x590
 800b3c2:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 800b3c6:	fa22 f383 	sxtab16	r3, r2, r3
 800b3ca:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
  return(result);
 800b3ce:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 800b3d2:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            res01 = __SMLAD(val3, val5, res01);
 800b3d6:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800b3da:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	; 0x5b4
 800b3de:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800b3e2:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 800b3e6:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
 800b3ea:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b3ee:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800b3f2:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 800b3f6:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 800b3fa:	fb21 3302 	smlad	r3, r1, r2, r3
 800b3fe:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
  return(result);
 800b402:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 800b406:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800b40a:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800b40e:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800b412:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800b416:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 800b41a:	f8c7 25ac 	str.w	r2, [r7, #1452]	; 0x5ac
 800b41e:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b422:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800b426:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 800b42a:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800b42e:	fb21 3302 	smlad	r3, r1, r2, r3
 800b432:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
  return(result);
 800b436:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800b43a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800b43e:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800b442:	3310      	adds	r3, #16
 800b444:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800b448:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800b44c:	f1a3 020f 	sub.w	r2, r3, #15
 800b450:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800b454:	4293      	cmp	r3, r2
 800b456:	f6fe ae1c 	blt.w	800a092 <arm_nn_vec_mat_mult_t_s8+0x12a>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800b45a:	e05a      	b.n	800b512 <arm_nn_vec_mat_mult_t_s8+0x15aa>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800b45c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b460:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f993 3000 	ldrsb.w	r3, [r3]
 800b46a:	461a      	mov	r2, r3
 800b46c:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800b470:	4413      	add	r3, r2
 800b472:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800b476:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b47a:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800b484:	4413      	add	r3, r2
 800b486:	f993 3000 	ldrsb.w	r3, [r3]
 800b48a:	461a      	mov	r2, r3
 800b48c:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800b490:	4413      	add	r3, r2
 800b492:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800b496:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b49a:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f993 3000 	ldrsb.w	r3, [r3]
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800b4aa:	4413      	add	r3, r2
 800b4ac:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc

            res00 += lhs_value * rhs_value0;
 800b4b0:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800b4b4:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800b4b8:	fb03 f202 	mul.w	r2, r3, r2
 800b4bc:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800b4c0:	4413      	add	r3, r2
 800b4c2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 += lhs_value * rhs_value1;
 800b4c6:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800b4ca:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800b4ce:	fb03 f202 	mul.w	r2, r3, r2
 800b4d2:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800b4d6:	4413      	add	r3, r2
 800b4d8:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            ++rhs_ptr;
 800b4dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4e0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	1c5a      	adds	r2, r3, #1
 800b4e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4ec:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800b4f0:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 800b4f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4f6:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	1c5a      	adds	r2, r3, #1
 800b4fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b502:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800b506:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800b508:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800b50c:	3301      	adds	r3, #1
 800b50e:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800b512:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 800b516:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800b51a:	429a      	cmp	r2, r3
 800b51c:	db9e      	blt.n	800b45c <arm_nn_vec_mat_mult_t_s8+0x14f4>
 800b51e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b522:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800b526:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800b52a:	6013      	str	r3, [r2, #0]
 800b52c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b530:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 800b534:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800b538:	6013      	str	r3, [r2, #0]
 800b53a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b53e:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 800b542:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800b546:	6013      	str	r3, [r2, #0]
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800b548:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b54c:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800b556:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b55a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	fa03 f202 	lsl.w	r2, r3, r2
 800b564:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b568:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800b56c:	601a      	str	r2, [r3, #0]
 800b56e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b572:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 800b576:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b57a:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800b582:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b586:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 800b58a:	2300      	movs	r3, #0
 800b58c:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800b58e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800b592:	461a      	mov	r2, r3
 800b594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b598:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800b59a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800b59e:	461a      	mov	r2, r3
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800b5a4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800b5a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5b0:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	17da      	asrs	r2, r3, #31
 800b5b8:	633b      	str	r3, [r7, #48]	; 0x30
 800b5ba:	637a      	str	r2, [r7, #52]	; 0x34
 800b5bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5c0:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	17da      	asrs	r2, r3, #31
 800b5c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5d0:	fb02 f203 	mul.w	r2, r2, r3
 800b5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800b5d8:	fb04 f303 	mul.w	r3, r4, r3
 800b5dc:	4413      	add	r3, r2
 800b5de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5e0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800b5e2:	fba2 5604 	umull	r5, r6, r2, r4
 800b5e6:	4433      	add	r3, r6
 800b5e8:	461e      	mov	r6, r3
 800b5ea:	1943      	adds	r3, r0, r5
 800b5ec:	61bb      	str	r3, [r7, #24]
 800b5ee:	eb41 0306 	adc.w	r3, r1, r6
 800b5f2:	61fb      	str	r3, [r7, #28]
 800b5f4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800b5f8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b5fc:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 800b600:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	f04f 0000 	mov.w	r0, #0
 800b60c:	f04f 0100 	mov.w	r1, #0
 800b610:	0fd0      	lsrs	r0, r2, #31
 800b612:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800b616:	17d9      	asrs	r1, r3, #31
 800b618:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b61c:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 800b620:	4603      	mov	r3, r0
 800b622:	6013      	str	r3, [r2, #0]
    return result;
 800b624:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b628:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 800b62c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800b62e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b632:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	dc06      	bgt.n	800b64a <arm_nn_vec_mat_mult_t_s8+0x16e2>
 800b63c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b640:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	425a      	negs	r2, r3
 800b648:	e000      	b.n	800b64c <arm_nn_vec_mat_mult_t_s8+0x16e4>
 800b64a:	2200      	movs	r2, #0
 800b64c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b650:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 800b654:	6019      	str	r1, [r3, #0]
 800b656:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b65a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800b65e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800b660:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b664:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 800b668:	2300      	movs	r3, #0
 800b66a:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800b66c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b670:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800b674:	2201      	movs	r2, #1
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	fa02 f103 	lsl.w	r1, r2, r3
 800b67c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b680:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 800b684:	1e4b      	subs	r3, r1, #1
 800b686:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800b688:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b68c:	f5a3 7162 	sub.w	r1, r3, #904	; 0x388
 800b690:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b694:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 800b698:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b69c:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b6a0:	6812      	ldr	r2, [r2, #0]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4013      	ands	r3, r2
 800b6a6:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800b6a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6ac:	f5a3 7160 	sub.w	r1, r3, #896	; 0x380
 800b6b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6b4:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 800b6b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6bc:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800b6c0:	6812      	ldr	r2, [r2, #0]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	fa42 f303 	asr.w	r3, r2, r3
 800b6c8:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800b6ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6ce:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 800b6d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6d6:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	105b      	asrs	r3, r3, #1
 800b6de:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800b6e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6e4:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	da0a      	bge.n	800b704 <arm_nn_vec_mat_mult_t_s8+0x179c>
        threshold++;
 800b6ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6f2:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 800b6f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6fa:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	3301      	adds	r3, #1
 800b702:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800b704:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b708:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 800b70c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b710:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800b714:	6812      	ldr	r2, [r2, #0]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	429a      	cmp	r2, r3
 800b71a:	dd0a      	ble.n	800b732 <arm_nn_vec_mat_mult_t_s8+0x17ca>
        result++;
 800b71c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b720:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 800b724:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b728:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	3301      	adds	r3, #1
 800b730:	6013      	str	r3, [r2, #0]
    return result;
 800b732:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b736:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800b73a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800b73c:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 800b73e:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 800b742:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b746:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 800b74a:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800b74e:	6013      	str	r3, [r2, #0]
 800b750:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b754:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 800b758:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800b75c:	6013      	str	r3, [r2, #0]
 800b75e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b762:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 800b766:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800b76a:	6013      	str	r3, [r2, #0]
 800b76c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b770:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800b77a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b77e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	fa03 f202 	lsl.w	r2, r3, r2
 800b788:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b78c:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800b790:	601a      	str	r2, [r3, #0]
 800b792:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b796:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 800b79a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b79e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800b7a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7aa:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800b7b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7bc:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 800b7c0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800b7cc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800b7d0:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b7d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7d8:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	17da      	asrs	r2, r3, #31
 800b7e0:	643b      	str	r3, [r7, #64]	; 0x40
 800b7e2:	647a      	str	r2, [r7, #68]	; 0x44
 800b7e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7e8:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	17da      	asrs	r2, r3, #31
 800b7f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7f2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b7f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7f8:	fb02 f203 	mul.w	r2, r2, r3
 800b7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7fe:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800b800:	fb04 f303 	mul.w	r3, r4, r3
 800b804:	4413      	add	r3, r2
 800b806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b808:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800b80a:	fba2 ab04 	umull	sl, fp, r2, r4
 800b80e:	445b      	add	r3, fp
 800b810:	469b      	mov	fp, r3
 800b812:	eb10 030a 	adds.w	r3, r0, sl
 800b816:	623b      	str	r3, [r7, #32]
 800b818:	eb41 030b 	adc.w	r3, r1, fp
 800b81c:	627b      	str	r3, [r7, #36]	; 0x24
 800b81e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800b822:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b826:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 800b82a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800b82e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b832:	f04f 0000 	mov.w	r0, #0
 800b836:	f04f 0100 	mov.w	r1, #0
 800b83a:	0fd0      	lsrs	r0, r2, #31
 800b83c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800b840:	17d9      	asrs	r1, r3, #31
 800b842:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b846:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800b84a:	4603      	mov	r3, r0
 800b84c:	6013      	str	r3, [r2, #0]
    return result;
 800b84e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b852:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 800b856:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800b858:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b85c:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	dc06      	bgt.n	800b874 <arm_nn_vec_mat_mult_t_s8+0x190c>
 800b866:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b86a:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	425a      	negs	r2, r3
 800b872:	e000      	b.n	800b876 <arm_nn_vec_mat_mult_t_s8+0x190e>
 800b874:	2200      	movs	r2, #0
 800b876:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b87a:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800b87e:	6019      	str	r1, [r3, #0]
 800b880:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b884:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800b888:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800b88a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b88e:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800b892:	2300      	movs	r3, #0
 800b894:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800b896:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b89a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800b89e:	2201      	movs	r2, #1
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	fa02 f103 	lsl.w	r1, r2, r3
 800b8a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8aa:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 800b8ae:	1e4b      	subs	r3, r1, #1
 800b8b0:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800b8b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8b6:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 800b8ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8be:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 800b8c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8c6:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800b8ca:	6812      	ldr	r2, [r2, #0]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800b8d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8d6:	f5a3 7154 	sub.w	r1, r3, #848	; 0x350
 800b8da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8de:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 800b8e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8e6:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800b8ea:	6812      	ldr	r2, [r2, #0]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	fa42 f303 	asr.w	r3, r2, r3
 800b8f2:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800b8f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8f8:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 800b8fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b900:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	105b      	asrs	r3, r3, #1
 800b908:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800b90a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b90e:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	da0a      	bge.n	800b92e <arm_nn_vec_mat_mult_t_s8+0x19c6>
        threshold++;
 800b918:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b91c:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 800b920:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b924:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	3301      	adds	r3, #1
 800b92c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800b92e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b932:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 800b936:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b93a:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800b93e:	6812      	ldr	r2, [r2, #0]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	429a      	cmp	r2, r3
 800b944:	dd0a      	ble.n	800b95c <arm_nn_vec_mat_mult_t_s8+0x19f4>
        result++;
 800b946:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b94a:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800b94e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b952:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	3301      	adds	r3, #1
 800b95a:	6013      	str	r3, [r2, #0]
    return result;
 800b95c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b960:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800b964:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800b966:	bf00      	nop
        res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 800b968:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Add offset
        res00 += dst_offset;
 800b96c:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800b970:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800b974:	4413      	add	r3, r2
 800b976:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 += dst_offset;
 800b97a:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800b97e:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800b982:	4413      	add	r3, r2
 800b984:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800b988:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800b98c:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800b990:	4293      	cmp	r3, r2
 800b992:	bfb8      	it	lt
 800b994:	4613      	movlt	r3, r2
 800b996:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res00 = MIN(res00, activation_max);
 800b99a:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800b99e:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	bfa8      	it	ge
 800b9a6:	4613      	movge	r3, r2
 800b9a8:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 = MAX(res01, activation_min);
 800b9ac:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800b9b0:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	bfb8      	it	lt
 800b9b8:	4613      	movlt	r3, r2
 800b9ba:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        res01 = MIN(res01, activation_max);
 800b9be:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800b9c2:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	bfa8      	it	ge
 800b9ca:	4613      	movge	r3, r2
 800b9cc:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        *dst++ = (q7_t)res00;
 800b9d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9d4:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800b9d8:	6819      	ldr	r1, [r3, #0]
 800b9da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9de:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 800b9e2:	1c4b      	adds	r3, r1, #1
 800b9e4:	6013      	str	r3, [r2, #0]
 800b9e6:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800b9ea:	b25b      	sxtb	r3, r3
 800b9ec:	700b      	strb	r3, [r1, #0]
        *dst++ = (q7_t)res01;
 800b9ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9f2:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800b9f6:	6819      	ldr	r1, [r3, #0]
 800b9f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9fc:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 800ba00:	1c4b      	adds	r3, r1, #1
 800ba02:	6013      	str	r3, [r2, #0]
 800ba04:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800ba08:	b25b      	sxtb	r3, r3
 800ba0a:	700b      	strb	r3, [r1, #0]

        rhs += 2 * rhs_cols;
 800ba0c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800ba10:	005b      	lsls	r3, r3, #1
 800ba12:	4619      	mov	r1, r3
 800ba14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba18:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 800ba1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba20:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	440b      	add	r3, r1
 800ba28:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800ba2a:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800ba2e:	3302      	adds	r3, #2
 800ba30:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800ba34:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800ba38:	1e5a      	subs	r2, r3, #1
 800ba3a:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	f6fe aae5 	blt.w	800a00e <arm_nn_vec_mat_mult_t_s8+0xa6>
    }

    if (rhs_rows % 2)
 800ba44:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800ba48:	f003 0301 	and.w	r3, r3, #1
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f001 806e 	beq.w	800cb2e <arm_nn_vec_mat_mult_t_s8+0x2bc6>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800ba52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba56:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800ba5a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ba5e:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 800ba62:	6812      	ldr	r2, [r2, #0]
 800ba64:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 800ba66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba6a:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800ba6e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ba72:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 800ba76:	6812      	ldr	r2, [r2, #0]
 800ba78:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        if (bias)
 800ba80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba84:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00d      	beq.n	800baaa <arm_nn_vec_mat_mult_t_s8+0x1b42>
        {
            res00 = *bias++;
 800ba8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba92:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ba9c:	f2a2 52e4 	subw	r2, r2, #1508	; 0x5e4
 800baa0:	1d19      	adds	r1, r3, #4
 800baa2:	6011      	str	r1, [r2, #0]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        }

        int32_t rhs_cols_idx = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800bab0:	f000 beb5 	b.w	800c81e <arm_nn_vec_mat_mult_t_s8+0x28b6>
 800bab4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bab8:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800babc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800bac0:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800bac2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bac6:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	461a      	mov	r2, r3
 800bad2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bad6:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 800bada:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800badc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bae0:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	1d1a      	adds	r2, r3, #4
 800baea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800baee:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	601a      	str	r2, [r3, #0]
    return (val);
 800baf6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bafa:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 800bafe:	681b      	ldr	r3, [r3, #0]
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800bb00:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800bb04:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800bb08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb0c:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800bb10:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800bb14:	6019      	str	r1, [r3, #0]
 800bb16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb1a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800bb1e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bb20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb24:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bb2e:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 800bb32:	6812      	ldr	r2, [r2, #0]
 800bb34:	fa23 f282 	sxtab16	r2, r3, r2
 800bb38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb3c:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800bb40:	601a      	str	r2, [r3, #0]
  return(result);
 800bb42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb46:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800bb50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb54:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800bb58:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800bb5c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800bb5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb62:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb72:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800bb76:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800bb78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb7c:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	1d1a      	adds	r2, r3, #4
 800bb86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb8a:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	601a      	str	r2, [r3, #0]
    return (val);
 800bb92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb96:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800bb9a:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800bb9c:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800bba0:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800bba4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bba8:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800bbac:	601a      	str	r2, [r3, #0]
 800bbae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbb2:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800bbb6:	2208      	movs	r2, #8
 800bbb8:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800bbba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbbe:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800bbc2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bbc6:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 800bbca:	6812      	ldr	r2, [r2, #0]
 800bbcc:	f002 021f 	and.w	r2, r2, #31
 800bbd0:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800bbd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbd6:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d105      	bne.n	800bbec <arm_nn_vec_mat_mult_t_s8+0x1c84>
    return op1;
 800bbe0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbe4:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	e00b      	b.n	800bc04 <arm_nn_vec_mat_mult_t_s8+0x1c9c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bbec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbf0:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 800bbf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbf8:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800bbfc:	6812      	ldr	r2, [r2, #0]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	fa62 f303 	ror.w	r3, r2, r3
 800bc04:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bc08:	f5a2 62a1 	sub.w	r2, r2, #1288	; 0x508
 800bc0c:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800bc10:	6011      	str	r1, [r2, #0]
 800bc12:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bc16:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 800bc1a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bc1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc20:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bc2a:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 800bc2e:	6812      	ldr	r2, [r2, #0]
 800bc30:	fa23 f282 	sxtab16	r2, r3, r2
 800bc34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc38:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800bc3c:	601a      	str	r2, [r3, #0]
  return(result);
 800bc3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc42:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800bc4c:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800bc50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc54:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800bc58:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800bc5c:	6019      	str	r1, [r3, #0]
 800bc5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc62:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 800bc66:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bc68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc6c:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bc76:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 800bc7a:	6812      	ldr	r2, [r2, #0]
 800bc7c:	fa23 f282 	sxtab16	r2, r3, r2
 800bc80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc84:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800bc88:	601a      	str	r2, [r3, #0]
  return(result);
 800bc8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc8e:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800bc98:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800bc9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bca0:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800bca4:	601a      	str	r2, [r3, #0]
 800bca6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bcaa:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800bcae:	2208      	movs	r2, #8
 800bcb0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800bcb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bcb6:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800bcba:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bcbe:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 800bcc2:	6812      	ldr	r2, [r2, #0]
 800bcc4:	f002 021f 	and.w	r2, r2, #31
 800bcc8:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800bcca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bcce:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d105      	bne.n	800bce4 <arm_nn_vec_mat_mult_t_s8+0x1d7c>
    return op1;
 800bcd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bcdc:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	e00b      	b.n	800bcfc <arm_nn_vec_mat_mult_t_s8+0x1d94>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bce4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bce8:	f2a3 42f4 	subw	r2, r3, #1268	; 0x4f4
 800bcec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bcf0:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800bcf4:	6812      	ldr	r2, [r2, #0]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	fa62 f303 	ror.w	r3, r2, r3
 800bcfc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bd00:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 800bd04:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800bd08:	6011      	str	r1, [r2, #0]
 800bd0a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bd0e:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 800bd12:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bd14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd18:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bd22:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 800bd26:	6812      	ldr	r2, [r2, #0]
 800bd28:	fa23 f282 	sxtab16	r2, r3, r2
 800bd2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd30:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800bd34:	601a      	str	r2, [r3, #0]
  return(result);
 800bd36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd3a:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800bd44:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800bd48:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800bd4c:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800bd50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd54:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800bd58:	6018      	str	r0, [r3, #0]
 800bd5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd5e:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 800bd62:	6019      	str	r1, [r3, #0]
 800bd64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd68:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800bd6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800bd6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd72:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bd7c:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 800bd80:	6812      	ldr	r2, [r2, #0]
 800bd82:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800bd86:	f5a1 619c 	sub.w	r1, r1, #1248	; 0x4e0
 800bd8a:	6809      	ldr	r1, [r1, #0]
 800bd8c:	fb23 1202 	smlad	r2, r3, r2, r1
 800bd90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd94:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800bd98:	601a      	str	r2, [r3, #0]
  return(result);
 800bd9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd9e:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800bda8:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800bdac:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800bdb0:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800bdb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bdb8:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800bdbc:	6018      	str	r0, [r3, #0]
 800bdbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bdc2:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 800bdc6:	6019      	str	r1, [r3, #0]
 800bdc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bdcc:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 800bdd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800bdd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bdd6:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bde0:	f2a2 42cc 	subw	r2, r2, #1228	; 0x4cc
 800bde4:	6812      	ldr	r2, [r2, #0]
 800bde6:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800bdea:	f5a1 619a 	sub.w	r1, r1, #1232	; 0x4d0
 800bdee:	6809      	ldr	r1, [r1, #0]
 800bdf0:	fb23 1202 	smlad	r2, r3, r2, r1
 800bdf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bdf8:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800bdfc:	601a      	str	r2, [r3, #0]
  return(result);
 800bdfe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be02:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800be0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be10:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800be14:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800be18:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800be1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be1e:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	461a      	mov	r2, r3
 800be2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be2e:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 800be32:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800be34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be38:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	1d1a      	adds	r2, r3, #4
 800be42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be46:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	601a      	str	r2, [r3, #0]
    return (val);
 800be4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be52:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 800be56:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800be58:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800be5c:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800be60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be64:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800be68:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800be6c:	6019      	str	r1, [r3, #0]
 800be6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be72:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 800be76:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800be78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be7c:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800be86:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 800be8a:	6812      	ldr	r2, [r2, #0]
 800be8c:	fa23 f282 	sxtab16	r2, r3, r2
 800be90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be94:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800be98:	601a      	str	r2, [r3, #0]
  return(result);
 800be9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be9e:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800bea8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800beac:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800beb0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800beb4:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800beb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800beba:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	461a      	mov	r2, r3
 800bec6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800beca:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800bece:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800bed0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bed4:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	1d1a      	adds	r2, r3, #4
 800bede:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bee2:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	601a      	str	r2, [r3, #0]
    return (val);
 800beea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800beee:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800bef2:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800bef4:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800bef8:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800befc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf00:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800bf04:	601a      	str	r2, [r3, #0]
 800bf06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf0a:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800bf0e:	2208      	movs	r2, #8
 800bf10:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800bf12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf16:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800bf1a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bf1e:	f5a2 6296 	sub.w	r2, r2, #1200	; 0x4b0
 800bf22:	6812      	ldr	r2, [r2, #0]
 800bf24:	f002 021f 	and.w	r2, r2, #31
 800bf28:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800bf2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf2e:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d105      	bne.n	800bf44 <arm_nn_vec_mat_mult_t_s8+0x1fdc>
    return op1;
 800bf38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf3c:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	e00b      	b.n	800bf5c <arm_nn_vec_mat_mult_t_s8+0x1ff4>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bf44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf48:	f2a3 42ac 	subw	r2, r3, #1196	; 0x4ac
 800bf4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf50:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800bf54:	6812      	ldr	r2, [r2, #0]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	fa62 f303 	ror.w	r3, r2, r3
 800bf5c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bf60:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 800bf64:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800bf68:	6011      	str	r1, [r2, #0]
 800bf6a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bf6e:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 800bf72:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bf74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf78:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bf82:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 800bf86:	6812      	ldr	r2, [r2, #0]
 800bf88:	fa23 f282 	sxtab16	r2, r3, r2
 800bf8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf90:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800bf94:	601a      	str	r2, [r3, #0]
  return(result);
 800bf96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf9a:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800bfa4:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800bfa8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfac:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800bfb0:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800bfb4:	6019      	str	r1, [r3, #0]
 800bfb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfba:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 800bfbe:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bfc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfc4:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bfce:	f5a2 6293 	sub.w	r2, r2, #1176	; 0x498
 800bfd2:	6812      	ldr	r2, [r2, #0]
 800bfd4:	fa23 f282 	sxtab16	r2, r3, r2
 800bfd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfdc:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800bfe0:	601a      	str	r2, [r3, #0]
  return(result);
 800bfe2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfe6:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800bff0:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800bff4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bff8:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800bffc:	601a      	str	r2, [r3, #0]
 800bffe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c002:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800c006:	2208      	movs	r2, #8
 800c008:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800c00a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c00e:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800c012:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c016:	f5a2 6292 	sub.w	r2, r2, #1168	; 0x490
 800c01a:	6812      	ldr	r2, [r2, #0]
 800c01c:	f002 021f 	and.w	r2, r2, #31
 800c020:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800c022:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c026:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d105      	bne.n	800c03c <arm_nn_vec_mat_mult_t_s8+0x20d4>
    return op1;
 800c030:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c034:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	e00b      	b.n	800c054 <arm_nn_vec_mat_mult_t_s8+0x20ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c03c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c040:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 800c044:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c048:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800c04c:	6812      	ldr	r2, [r2, #0]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	fa62 f303 	ror.w	r3, r2, r3
 800c054:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c058:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 800c05c:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800c060:	6011      	str	r1, [r2, #0]
 800c062:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c066:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 800c06a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c06c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c070:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c07a:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 800c07e:	6812      	ldr	r2, [r2, #0]
 800c080:	fa23 f282 	sxtab16	r2, r3, r2
 800c084:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c088:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800c08c:	601a      	str	r2, [r3, #0]
  return(result);
 800c08e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c092:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800c09c:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800c0a0:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800c0a4:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800c0a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0ac:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800c0b0:	6018      	str	r0, [r3, #0]
 800c0b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0b6:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800c0ba:	6019      	str	r1, [r3, #0]
 800c0bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0c0:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800c0c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c0c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0ca:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c0d4:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 800c0d8:	6812      	ldr	r2, [r2, #0]
 800c0da:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800c0de:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 800c0e2:	6809      	ldr	r1, [r1, #0]
 800c0e4:	fb23 1202 	smlad	r2, r3, r2, r1
 800c0e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0ec:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800c0f0:	601a      	str	r2, [r3, #0]
  return(result);
 800c0f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0f6:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800c100:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800c104:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800c108:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800c10c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c110:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 800c114:	6018      	str	r0, [r3, #0]
 800c116:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c11a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800c11e:	6019      	str	r1, [r3, #0]
 800c120:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c124:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 800c128:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c12a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c12e:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c138:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 800c13c:	6812      	ldr	r2, [r2, #0]
 800c13e:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800c142:	f5a1 618d 	sub.w	r1, r1, #1128	; 0x468
 800c146:	6809      	ldr	r1, [r1, #0]
 800c148:	fb23 1202 	smlad	r2, r3, r2, r1
 800c14c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c150:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800c154:	601a      	str	r2, [r3, #0]
  return(result);
 800c156:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c15a:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800c164:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c168:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800c16c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800c170:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800c172:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c176:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	461a      	mov	r2, r3
 800c182:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c186:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800c18a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c18c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c190:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	1d1a      	adds	r2, r3, #4
 800c19a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c19e:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	601a      	str	r2, [r3, #0]
    return (val);
 800c1a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1aa:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800c1ae:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800c1b0:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800c1b4:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800c1b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1bc:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800c1c0:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800c1c4:	6019      	str	r1, [r3, #0]
 800c1c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1ca:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 800c1ce:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c1d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1d4:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c1de:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 800c1e2:	6812      	ldr	r2, [r2, #0]
 800c1e4:	fa23 f282 	sxtab16	r2, r3, r2
 800c1e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1ec:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800c1f0:	601a      	str	r2, [r3, #0]
  return(result);
 800c1f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1f6:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800c200:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c204:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c208:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800c20c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800c20e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c212:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	461a      	mov	r2, r3
 800c21e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c222:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800c226:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c228:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c22c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	1d1a      	adds	r2, r3, #4
 800c236:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c23a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	601a      	str	r2, [r3, #0]
    return (val);
 800c242:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c246:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800c24a:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800c24c:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800c250:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800c254:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c258:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c262:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800c266:	2208      	movs	r2, #8
 800c268:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800c26a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c26e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800c272:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c276:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800c27a:	6812      	ldr	r2, [r2, #0]
 800c27c:	f002 021f 	and.w	r2, r2, #31
 800c280:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800c282:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c286:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d105      	bne.n	800c29c <arm_nn_vec_mat_mult_t_s8+0x2334>
    return op1;
 800c290:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c294:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	e00b      	b.n	800c2b4 <arm_nn_vec_mat_mult_t_s8+0x234c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c29c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2a0:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 800c2a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2a8:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800c2ac:	6812      	ldr	r2, [r2, #0]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	fa62 f303 	ror.w	r3, r2, r3
 800c2b4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c2b8:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 800c2bc:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800c2c0:	6011      	str	r1, [r2, #0]
 800c2c2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c2c6:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800c2ca:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c2cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2d0:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c2da:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800c2de:	6812      	ldr	r2, [r2, #0]
 800c2e0:	fa23 f282 	sxtab16	r2, r3, r2
 800c2e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2e8:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800c2ec:	601a      	str	r2, [r3, #0]
  return(result);
 800c2ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2f2:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800c2fc:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800c300:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c304:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800c308:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800c30c:	6019      	str	r1, [r3, #0]
 800c30e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c312:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800c316:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c318:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c31c:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c326:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 800c32a:	6812      	ldr	r2, [r2, #0]
 800c32c:	fa23 f282 	sxtab16	r2, r3, r2
 800c330:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c334:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800c338:	601a      	str	r2, [r3, #0]
  return(result);
 800c33a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c33e:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800c348:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800c34c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c350:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800c354:	601a      	str	r2, [r3, #0]
 800c356:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c35a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800c35e:	2208      	movs	r2, #8
 800c360:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800c362:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c366:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800c36a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c36e:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 800c372:	6812      	ldr	r2, [r2, #0]
 800c374:	f002 021f 	and.w	r2, r2, #31
 800c378:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800c37a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c37e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d105      	bne.n	800c394 <arm_nn_vec_mat_mult_t_s8+0x242c>
    return op1;
 800c388:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c38c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	e00b      	b.n	800c3ac <arm_nn_vec_mat_mult_t_s8+0x2444>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c394:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c398:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 800c39c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3a0:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800c3a4:	6812      	ldr	r2, [r2, #0]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	fa62 f303 	ror.w	r3, r2, r3
 800c3ac:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c3b0:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 800c3b4:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800c3b8:	6011      	str	r1, [r2, #0]
 800c3ba:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c3be:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 800c3c2:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c3c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3c8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c3d2:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 800c3d6:	6812      	ldr	r2, [r2, #0]
 800c3d8:	fa23 f282 	sxtab16	r2, r3, r2
 800c3dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3e0:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800c3e4:	601a      	str	r2, [r3, #0]
  return(result);
 800c3e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3ea:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800c3f4:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800c3f8:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800c3fc:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800c400:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c404:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800c408:	6018      	str	r0, [r3, #0]
 800c40a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c40e:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800c412:	6019      	str	r1, [r3, #0]
 800c414:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c418:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800c41c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c41e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c422:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c42c:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 800c430:	6812      	ldr	r2, [r2, #0]
 800c432:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800c436:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 800c43a:	6809      	ldr	r1, [r1, #0]
 800c43c:	fb23 1202 	smlad	r2, r3, r2, r1
 800c440:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c444:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800c448:	601a      	str	r2, [r3, #0]
  return(result);
 800c44a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c44e:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800c458:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800c45c:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800c460:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800c464:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c468:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800c46c:	6018      	str	r0, [r3, #0]
 800c46e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c472:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800c476:	6019      	str	r1, [r3, #0]
 800c478:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c47c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800c480:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c482:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c486:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c490:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 800c494:	6812      	ldr	r2, [r2, #0]
 800c496:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800c49a:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800c49e:	6809      	ldr	r1, [r1, #0]
 800c4a0:	fb23 1202 	smlad	r2, r3, r2, r1
 800c4a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4a8:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800c4ac:	601a      	str	r2, [r3, #0]
  return(result);
 800c4ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4b2:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800c4bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4c0:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800c4c4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800c4c8:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800c4ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4ce:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	461a      	mov	r2, r3
 800c4da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4de:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800c4e2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c4e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4e8:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	1d1a      	adds	r2, r3, #4
 800c4f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4f6:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	601a      	str	r2, [r3, #0]
    return (val);
 800c4fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c502:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800c506:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800c508:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800c50c:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800c510:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c514:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800c518:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800c51c:	6019      	str	r1, [r3, #0]
 800c51e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c522:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800c526:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c528:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c52c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c536:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 800c53a:	6812      	ldr	r2, [r2, #0]
 800c53c:	fa23 f282 	sxtab16	r2, r3, r2
 800c540:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c544:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800c548:	601a      	str	r2, [r3, #0]
  return(result);
 800c54a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c54e:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800c558:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c55c:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800c560:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800c564:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800c566:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c56a:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	461a      	mov	r2, r3
 800c576:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c57a:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800c57e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c580:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c584:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	1d1a      	adds	r2, r3, #4
 800c58e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c592:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	601a      	str	r2, [r3, #0]
    return (val);
 800c59a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c59e:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800c5a2:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800c5a4:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800c5a8:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800c5ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5b0:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5ba:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800c5be:	2208      	movs	r2, #8
 800c5c0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800c5c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5c6:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800c5ca:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c5ce:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 800c5d2:	6812      	ldr	r2, [r2, #0]
 800c5d4:	f002 021f 	and.w	r2, r2, #31
 800c5d8:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800c5da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5de:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d105      	bne.n	800c5f4 <arm_nn_vec_mat_mult_t_s8+0x268c>
    return op1;
 800c5e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5ec:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	e00b      	b.n	800c60c <arm_nn_vec_mat_mult_t_s8+0x26a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c5f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5f8:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 800c5fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c600:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800c604:	6812      	ldr	r2, [r2, #0]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	fa62 f303 	ror.w	r3, r2, r3
 800c60c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c610:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800c614:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800c618:	6011      	str	r1, [r2, #0]
 800c61a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c61e:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 800c622:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c624:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c628:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c632:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 800c636:	6812      	ldr	r2, [r2, #0]
 800c638:	fa23 f282 	sxtab16	r2, r3, r2
 800c63c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c640:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800c644:	601a      	str	r2, [r3, #0]
  return(result);
 800c646:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c64a:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800c654:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800c658:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c65c:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800c660:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800c664:	6019      	str	r1, [r3, #0]
 800c666:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c66a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800c66e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c670:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c674:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c67e:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 800c682:	6812      	ldr	r2, [r2, #0]
 800c684:	fa23 f282 	sxtab16	r2, r3, r2
 800c688:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c68c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800c690:	601a      	str	r2, [r3, #0]
  return(result);
 800c692:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c696:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800c6a0:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800c6a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6a8:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800c6ac:	601a      	str	r2, [r3, #0]
 800c6ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6b2:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800c6b6:	2208      	movs	r2, #8
 800c6b8:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800c6ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6be:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800c6c2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c6c6:	f5a2 7270 	sub.w	r2, r2, #960	; 0x3c0
 800c6ca:	6812      	ldr	r2, [r2, #0]
 800c6cc:	f002 021f 	and.w	r2, r2, #31
 800c6d0:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800c6d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6d6:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d105      	bne.n	800c6ec <arm_nn_vec_mat_mult_t_s8+0x2784>
    return op1;
 800c6e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6e4:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	e00b      	b.n	800c704 <arm_nn_vec_mat_mult_t_s8+0x279c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c6ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6f0:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 800c6f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6f8:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800c6fc:	6812      	ldr	r2, [r2, #0]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	fa62 f303 	ror.w	r3, r2, r3
 800c704:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c708:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 800c70c:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800c710:	6011      	str	r1, [r2, #0]
 800c712:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c716:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 800c71a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c71c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c720:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c72a:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 800c72e:	6812      	ldr	r2, [r2, #0]
 800c730:	fa23 f282 	sxtab16	r2, r3, r2
 800c734:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c738:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800c73c:	601a      	str	r2, [r3, #0]
  return(result);
 800c73e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c742:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800c74c:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800c750:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800c754:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800c758:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c75c:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800c760:	6018      	str	r0, [r3, #0]
 800c762:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c766:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800c76a:	6019      	str	r1, [r3, #0]
 800c76c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c770:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800c774:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c776:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c77a:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c784:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 800c788:	6812      	ldr	r2, [r2, #0]
 800c78a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800c78e:	f5a1 716a 	sub.w	r1, r1, #936	; 0x3a8
 800c792:	6809      	ldr	r1, [r1, #0]
 800c794:	fb23 1202 	smlad	r2, r3, r2, r1
 800c798:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c79c:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800c7a0:	601a      	str	r2, [r3, #0]
  return(result);
 800c7a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7a6:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800c7b0:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800c7b4:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800c7b8:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800c7bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7c0:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800c7c4:	6018      	str	r0, [r3, #0]
 800c7c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7ca:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 800c7ce:	6019      	str	r1, [r3, #0]
 800c7d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7d4:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 800c7d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c7da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7de:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c7e8:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 800c7ec:	6812      	ldr	r2, [r2, #0]
 800c7ee:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800c7f2:	f5a1 7166 	sub.w	r1, r1, #920	; 0x398
 800c7f6:	6809      	ldr	r1, [r1, #0]
 800c7f8:	fb23 1202 	smlad	r2, r3, r2, r1
 800c7fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c800:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800c804:	601a      	str	r2, [r3, #0]
  return(result);
 800c806:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c80a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800c814:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800c818:	3310      	adds	r3, #16
 800c81a:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800c81e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800c822:	3b0f      	subs	r3, #15
 800c824:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 800c828:	429a      	cmp	r2, r3
 800c82a:	f6ff a943 	blt.w	800bab4 <arm_nn_vec_mat_mult_t_s8+0x1b4c>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800c82e:	e03f      	b.n	800c8b0 <arm_nn_vec_mat_mult_t_s8+0x2948>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800c830:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c834:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f993 3000 	ldrsb.w	r3, [r3]
 800c83e:	461a      	mov	r2, r3
 800c840:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800c844:	4413      	add	r3, r2
 800c846:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800c84a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c84e:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f993 3000 	ldrsb.w	r3, [r3]
 800c858:	461a      	mov	r2, r3
 800c85a:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800c85e:	4413      	add	r3, r2
 800c860:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

            res00 += lhs_value * rhs_value0;
 800c864:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 800c868:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 800c86c:	fb02 f303 	mul.w	r3, r2, r3
 800c870:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800c874:	4413      	add	r3, r2
 800c876:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

            ++rhs_ptr;
 800c87a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c87e:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	1c5a      	adds	r2, r3, #1
 800c886:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c88a:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800c88e:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 800c890:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c894:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	1c5a      	adds	r2, r3, #1
 800c89c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8a0:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800c8a4:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800c8a6:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800c8b0:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 800c8b4:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	dbb9      	blt.n	800c830 <arm_nn_vec_mat_mult_t_s8+0x28c8>
 800c8bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8c0:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 800c8c4:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800c8c8:	601a      	str	r2, [r3, #0]
 800c8ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8ce:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 800c8d2:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 800c8d6:	601a      	str	r2, [r3, #0]
 800c8d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8dc:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800c8e0:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 800c8e4:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c8e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8ea:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c8f4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c8f8:	f5a2 62a6 	sub.w	r2, r2, #1328	; 0x530
 800c8fc:	6812      	ldr	r2, [r2, #0]
 800c8fe:	409a      	lsls	r2, r3
 800c900:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c904:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 800c908:	601a      	str	r2, [r3, #0]
 800c90a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c90e:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 800c912:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c916:	f2a2 5234 	subw	r2, r2, #1332	; 0x534
 800c91a:	6812      	ldr	r2, [r2, #0]
 800c91c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800c91e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c922:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800c926:	2200      	movs	r2, #0
 800c928:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 800c92a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800c92e:	461a      	mov	r2, r3
 800c930:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c934:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 800c938:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800c93c:	461a      	mov	r2, r3
 800c93e:	2300      	movs	r3, #0
 800c940:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800c944:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800c948:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c94c:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800c950:	f2a1 513c 	subw	r1, r1, #1340	; 0x53c
 800c954:	6809      	ldr	r1, [r1, #0]
 800c956:	17c8      	asrs	r0, r1, #31
 800c958:	6139      	str	r1, [r7, #16]
 800c95a:	6178      	str	r0, [r7, #20]
 800c95c:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800c960:	f5a1 61a8 	sub.w	r1, r1, #1344	; 0x540
 800c964:	6809      	ldr	r1, [r1, #0]
 800c966:	17c8      	asrs	r0, r1, #31
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800c970:	4631      	mov	r1, r6
 800c972:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800c976:	4650      	mov	r0, sl
 800c978:	fb00 f001 	mul.w	r0, r0, r1
 800c97c:	4659      	mov	r1, fp
 800c97e:	462c      	mov	r4, r5
 800c980:	fb04 f101 	mul.w	r1, r4, r1
 800c984:	4401      	add	r1, r0
 800c986:	4628      	mov	r0, r5
 800c988:	4654      	mov	r4, sl
 800c98a:	fba0 8904 	umull	r8, r9, r0, r4
 800c98e:	4449      	add	r1, r9
 800c990:	4689      	mov	r9, r1
 800c992:	eb12 0108 	adds.w	r1, r2, r8
 800c996:	6039      	str	r1, [r7, #0]
 800c998:	eb43 0309 	adc.w	r3, r3, r9
 800c99c:	607b      	str	r3, [r7, #4]
 800c99e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800c9a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c9a6:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 800c9aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800c9ae:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c9b2:	f04f 0200 	mov.w	r2, #0
 800c9b6:	f04f 0300 	mov.w	r3, #0
 800c9ba:	0fc2      	lsrs	r2, r0, #31
 800c9bc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800c9c0:	17cb      	asrs	r3, r1, #31
 800c9c2:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800c9c6:	f2a1 5144 	subw	r1, r1, #1348	; 0x544
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	600b      	str	r3, [r1, #0]
    return result;
 800c9ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9d2:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800c9d6:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c9d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9dc:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	dc06      	bgt.n	800c9f4 <arm_nn_vec_mat_mult_t_s8+0x2a8c>
 800c9e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9ea:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	425b      	negs	r3, r3
 800c9f2:	e000      	b.n	800c9f6 <arm_nn_vec_mat_mult_t_s8+0x2a8e>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c9fa:	f5a2 62a9 	sub.w	r2, r2, #1352	; 0x548
 800c9fe:	6011      	str	r1, [r2, #0]
 800ca00:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ca04:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 800ca08:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800ca0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca0e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800ca12:	2200      	movs	r2, #0
 800ca14:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800ca16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca1a:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 800ca1e:	2201      	movs	r2, #1
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	409a      	lsls	r2, r3
 800ca24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca28:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 800ca2c:	3a01      	subs	r2, #1
 800ca2e:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 800ca30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca34:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800ca38:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ca3c:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 800ca40:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ca44:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 800ca48:	6809      	ldr	r1, [r1, #0]
 800ca4a:	6812      	ldr	r2, [r2, #0]
 800ca4c:	400a      	ands	r2, r1
 800ca4e:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 800ca50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca54:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800ca58:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ca5c:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 800ca60:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ca64:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 800ca68:	6809      	ldr	r1, [r1, #0]
 800ca6a:	6812      	ldr	r2, [r2, #0]
 800ca6c:	fa41 f202 	asr.w	r2, r1, r2
 800ca70:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 800ca72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca76:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800ca7a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ca7e:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 800ca82:	6812      	ldr	r2, [r2, #0]
 800ca84:	1052      	asrs	r2, r2, #1
 800ca86:	601a      	str	r2, [r3, #0]
    if (result < 0)
 800ca88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca8c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	da0a      	bge.n	800caac <arm_nn_vec_mat_mult_t_s8+0x2b44>
        threshold++;
 800ca96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca9a:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800ca9e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800caa2:	f2a2 525c 	subw	r2, r2, #1372	; 0x55c
 800caa6:	6812      	ldr	r2, [r2, #0]
 800caa8:	3201      	adds	r2, #1
 800caaa:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 800caac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cab0:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 800cab4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cab8:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800cabc:	6812      	ldr	r2, [r2, #0]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	dd0a      	ble.n	800cada <arm_nn_vec_mat_mult_t_s8+0x2b72>
        result++;
 800cac4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cac8:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800cacc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cad0:	f5a2 62aa 	sub.w	r2, r2, #1360	; 0x550
 800cad4:	6812      	ldr	r2, [r2, #0]
 800cad6:	3201      	adds	r2, #1
 800cad8:	601a      	str	r2, [r3, #0]
    return result;
 800cada:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cade:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800cae2:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800cae4:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 800cae6:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Add offset
        res00 += dst_offset;
 800caea:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800caee:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800caf2:	4413      	add	r3, r2
 800caf4:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800caf8:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800cafc:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800cb00:	4293      	cmp	r3, r2
 800cb02:	bfb8      	it	lt
 800cb04:	4613      	movlt	r3, r2
 800cb06:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        res00 = MIN(res00, activation_max);
 800cb0a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800cb0e:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800cb12:	4293      	cmp	r3, r2
 800cb14:	bfa8      	it	ge
 800cb16:	4613      	movge	r3, r2
 800cb18:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        *dst = (q7_t)res00;
 800cb1c:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 800cb20:	b25a      	sxtb	r2, r3
 800cb22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb26:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	701a      	strb	r2, [r3, #0]

        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	f507 67c6 	add.w	r7, r7, #1584	; 0x630
 800cb36:	46bd      	mov	sp, r7
 800cb38:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cb3c:	4770      	bx	lr
	...

0800cb40 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 800cb40:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cb44:	f6ad 1da8 	subw	sp, sp, #2472	; 0x9a8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	f607 14a8 	addw	r4, r7, #2472	; 0x9a8
 800cb4e:	f5a4 7471 	sub.w	r4, r4, #964	; 0x3c4
 800cb52:	6020      	str	r0, [r4, #0]
 800cb54:	f607 10a8 	addw	r0, r7, #2472	; 0x9a8
 800cb58:	f5a0 7072 	sub.w	r0, r0, #968	; 0x3c8
 800cb5c:	6001      	str	r1, [r0, #0]
 800cb5e:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 800cb62:	f5a1 7173 	sub.w	r1, r1, #972	; 0x3cc
 800cb66:	600a      	str	r2, [r1, #0]
 800cb68:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 800cb6c:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800cb70:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 800cb72:	2201      	movs	r2, #1
 800cb74:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 800cb78:	fa02 f303 	lsl.w	r3, r2, r3
 800cb7c:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994

    int32_t col = 0;
 800cb80:	2300      	movs	r3, #0
 800cb82:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 800cb86:	2300      	movs	r3, #0
 800cb88:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 800cb8c:	f004 b863 	b.w	8010c56 <arm_softmax_s8+0x4116>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 800cb90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800cb94:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f

        for (col = 1; col < row_size; ++col)
 800cba0:	2301      	movs	r3, #1
 800cba2:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800cba6:	e015      	b.n	800cbd4 <arm_softmax_s8+0x94>
        {
            max = MAX(max, input[col]);
 800cba8:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800cbac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800cbb0:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4413      	add	r3, r2
 800cbb8:	f993 2000 	ldrsb.w	r2, [r3]
 800cbbc:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	bfb8      	it	lt
 800cbc4:	4613      	movlt	r3, r2
 800cbc6:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f
        for (col = 1; col < row_size; ++col)
 800cbca:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 800cbce:	3301      	adds	r3, #1
 800cbd0:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800cbd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800cbd8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800cbdc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	dbe0      	blt.n	800cba8 <arm_softmax_s8+0x68>
        }

        int32_t diff = 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
        int32_t sum = 0;
 800cbec:	2300      	movs	r3, #0
 800cbee:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998

        for (col = 0; col < row_size; ++col)
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800cbf8:	f001 ba24 	b.w	800e044 <arm_softmax_s8+0x1504>
        {
            diff = input[col] - max;
 800cbfc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800cc00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800cc04:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	f993 3000 	ldrsb.w	r3, [r3]
 800cc10:	461a      	mov	r2, r3
 800cc12:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 800cc1c:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800cc20:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 800cc24:	429a      	cmp	r2, r3
 800cc26:	f2c1 8208 	blt.w	800e03a <arm_softmax_s8+0x14fa>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 800cc2a:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800cc2e:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 800cc32:	fb03 f202 	mul.w	r2, r3, r2
 800cc36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800cc3a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800cc3e:	601a      	str	r2, [r3, #0]
 800cc40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800cc44:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 800cc48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800cc4c:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800cc54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800cc58:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800cc60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cc64:	f04f 0300 	mov.w	r3, #0
 800cc68:	f607 0138 	addw	r1, r7, #2104	; 0x838
 800cc6c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800cc70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800cc74:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	0fdb      	lsrs	r3, r3, #31
 800cc7c:	b2da      	uxtb	r2, r3
 800cc7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800cc82:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	0fdb      	lsrs	r3, r3, #31
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	4053      	eors	r3, r2
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d012      	beq.n	800ccba <arm_softmax_s8+0x17a>
        mult = 1 - mult;
 800cc94:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800cc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	f1d2 0001 	rsbs	r0, r2, #1
 800cca2:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 800cca6:	eb61 0303 	sbc.w	r3, r1, r3
 800ccaa:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800ccae:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 800ccb2:	f607 0238 	addw	r2, r7, #2104	; 0x838
 800ccb6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ccba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ccbe:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	17da      	asrs	r2, r3, #31
 800ccc6:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800ccca:	f8c7 2464 	str.w	r2, [r7, #1124]	; 0x464
 800ccce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ccd2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	17da      	asrs	r2, r3, #31
 800ccda:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800ccde:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 800cce2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800cce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ccea:	460b      	mov	r3, r1
 800ccec:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 800ccf0:	fb02 f203 	mul.w	r2, r2, r3
 800ccf4:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800ccf8:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 800ccfc:	e9c4 0100 	strd	r0, r1, [r4]
 800cd00:	4601      	mov	r1, r0
 800cd02:	fb01 f303 	mul.w	r3, r1, r3
 800cd06:	4413      	add	r3, r2
 800cd08:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 800cd0c:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 800cd10:	fba2 1201 	umull	r1, r2, r2, r1
 800cd14:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
 800cd18:	460a      	mov	r2, r1
 800cd1a:	f8c7 2588 	str.w	r2, [r7, #1416]	; 0x588
 800cd1e:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 800cd22:	4413      	add	r3, r2
 800cd24:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 800cd28:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800cd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd30:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 800cd34:	1851      	adds	r1, r2, r1
 800cd36:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 800cd3a:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 800cd3e:	414b      	adcs	r3, r1
 800cd40:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800cd44:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 800cd48:	f607 0238 	addw	r2, r7, #2104	; 0x838
 800cd4c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800cd50:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800cd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	da0a      	bge.n	800cd72 <arm_softmax_s8+0x232>
 800cd5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd60:	1851      	adds	r1, r2, r1
 800cd62:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 800cd66:	f143 0300 	adc.w	r3, r3, #0
 800cd6a:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800cd6e:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 800cd72:	f04f 0000 	mov.w	r0, #0
 800cd76:	f04f 0100 	mov.w	r1, #0
 800cd7a:	0fd0      	lsrs	r0, r2, #31
 800cd7c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800cd80:	17d9      	asrs	r1, r3, #31
 800cd82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800cd86:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800cd8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800cd92:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800cd96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800cd9a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800cd9e:	6812      	ldr	r2, [r2, #0]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d10e      	bne.n	800cdc4 <arm_softmax_s8+0x284>
 800cda6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800cdaa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cdb4:	d106      	bne.n	800cdc4 <arm_softmax_s8+0x284>
        result = Q31_MAX;
 800cdb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800cdba:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800cdbe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cdc2:	6013      	str	r3, [r2, #0]
    return result;
 800cdc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800cdc8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968

// @note The following functions are used only for softmax layer, scaled bits = 5 assumed

__STATIC_FORCEINLINE int32_t arm_nn_exp_on_negative_values(int32_t val)
{
    int32_t mask = 0;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    int32_t shift = 24;
 800cdd8:	2318      	movs	r3, #24
 800cdda:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960

    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 800cdde:	2201      	movs	r2, #1
 800cde0:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 800cde4:	fa02 f303 	lsl.w	r3, r2, r3
 800cde8:	1e5a      	subs	r2, r3, #1
 800cdea:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800cdee:	ea02 0103 	and.w	r1, r2, r3
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 800cdf8:	fa02 f303 	lsl.w	r3, r2, r3
 800cdfc:	1acb      	subs	r3, r1, r3
 800cdfe:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
    const int32_t remainder = val_mod_minus_quarter - val;
 800ce02:	f8d7 295c 	ldr.w	r2, [r7, #2396]	; 0x95c
 800ce06:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800ce0a:	1ad3      	subs	r3, r2, r3
 800ce0c:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 800ce10:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 800ce14:	015b      	lsls	r3, r3, #5
 800ce16:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800ce1a:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 800ce1e:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800ce22:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 800ce26:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800ce2a:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    q31_t result = 0;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    q63_t mult = 1 << 30;
 800ce34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ce38:	f04f 0300 	mov.w	r3, #0
 800ce3c:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 800ce40:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800ce44:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800ce48:	0fdb      	lsrs	r3, r3, #31
 800ce4a:	b2da      	uxtb	r2, r3
 800ce4c:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800ce50:	0fdb      	lsrs	r3, r3, #31
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	4053      	eors	r3, r2
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d012      	beq.n	800ce82 <arm_softmax_s8+0x342>
        mult = 1 - mult;
 800ce5c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800ce60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce64:	2100      	movs	r1, #0
 800ce66:	f1d2 0001 	rsbs	r0, r2, #1
 800ce6a:	f8c7 0318 	str.w	r0, [r7, #792]	; 0x318
 800ce6e:	eb61 0303 	sbc.w	r3, r1, r3
 800ce72:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800ce76:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 800ce7a:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800ce7e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ce82:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800ce86:	17da      	asrs	r2, r3, #31
 800ce88:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 800ce8c:	f8c7 24dc 	str.w	r2, [r7, #1244]	; 0x4dc
 800ce90:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800ce94:	17da      	asrs	r2, r3, #31
 800ce96:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 800ce9a:	f8c7 24d4 	str.w	r2, [r7, #1236]	; 0x4d4
 800ce9e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800cea2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cea6:	460b      	mov	r3, r1
 800cea8:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 800ceac:	fb02 f203 	mul.w	r2, r2, r3
 800ceb0:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 800ceb4:	f507 649b 	add.w	r4, r7, #1240	; 0x4d8
 800ceb8:	e9c4 0100 	strd	r0, r1, [r4]
 800cebc:	4601      	mov	r1, r0
 800cebe:	fb01 f303 	mul.w	r3, r1, r3
 800cec2:	4413      	add	r3, r2
 800cec4:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 800cec8:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 800cecc:	fba2 8901 	umull	r8, r9, r2, r1
 800ced0:	444b      	add	r3, r9
 800ced2:	4699      	mov	r9, r3
 800ced4:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800ced8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cedc:	eb12 0108 	adds.w	r1, r2, r8
 800cee0:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 800cee4:	eb43 0309 	adc.w	r3, r3, r9
 800cee8:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800ceec:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 800cef0:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800cef4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800cef8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800cefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	da0a      	bge.n	800cf1a <arm_softmax_s8+0x3da>
 800cf04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cf08:	1851      	adds	r1, r2, r1
 800cf0a:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 800cf0e:	f143 0300 	adc.w	r3, r3, #0
 800cf12:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800cf16:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800cf1a:	f04f 0000 	mov.w	r0, #0
 800cf1e:	f04f 0100 	mov.w	r1, #0
 800cf22:	0fd0      	lsrs	r0, r2, #31
 800cf24:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800cf28:	17d9      	asrs	r1, r3, #31
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	4613      	mov	r3, r2
 800cf30:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800cf34:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 800cf38:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d108      	bne.n	800cf52 <arm_softmax_s8+0x412>
 800cf40:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800cf44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf48:	d103      	bne.n	800cf52 <arm_softmax_s8+0x412>
        result = Q31_MAX;
 800cf4a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cf4e:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    return result;
 800cf52:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
    const int32_t x2 = MUL_SAT(x, x);
 800cf56:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 800cf5a:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800cf5e:	f8c7 3938 	str.w	r3, [r7, #2360]	; 0x938
 800cf62:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800cf66:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    q31_t result = 0;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    q63_t mult = 1 << 30;
 800cf70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cf74:	f04f 0300 	mov.w	r3, #0
 800cf78:	f607 1128 	addw	r1, r7, #2344	; 0x928
 800cf7c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800cf80:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 800cf84:	0fdb      	lsrs	r3, r3, #31
 800cf86:	b2da      	uxtb	r2, r3
 800cf88:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 800cf8c:	0fdb      	lsrs	r3, r3, #31
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	4053      	eors	r3, r2
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d012      	beq.n	800cfbe <arm_softmax_s8+0x47e>
        mult = 1 - mult;
 800cf98:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800cf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa0:	2100      	movs	r1, #0
 800cfa2:	f1d2 0001 	rsbs	r0, r2, #1
 800cfa6:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300
 800cfaa:	eb61 0303 	sbc.w	r3, r1, r3
 800cfae:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800cfb2:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 800cfb6:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800cfba:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800cfbe:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 800cfc2:	17da      	asrs	r2, r3, #31
 800cfc4:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 800cfc8:	f8c7 24cc 	str.w	r2, [r7, #1228]	; 0x4cc
 800cfcc:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 800cfd0:	17da      	asrs	r2, r3, #31
 800cfd2:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 800cfd6:	f8c7 24c4 	str.w	r2, [r7, #1220]	; 0x4c4
 800cfda:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800cfde:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 800cfe8:	fb02 f203 	mul.w	r2, r2, r3
 800cfec:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 800cff0:	f507 6499 	add.w	r4, r7, #1224	; 0x4c8
 800cff4:	e9c4 0100 	strd	r0, r1, [r4]
 800cff8:	4601      	mov	r1, r0
 800cffa:	fb01 f303 	mul.w	r3, r1, r3
 800cffe:	4413      	add	r3, r2
 800d000:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 800d004:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 800d008:	fba2 ab01 	umull	sl, fp, r2, r1
 800d00c:	445b      	add	r3, fp
 800d00e:	469b      	mov	fp, r3
 800d010:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800d014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d018:	eb12 010a 	adds.w	r1, r2, sl
 800d01c:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 800d020:	eb43 030b 	adc.w	r3, r3, fp
 800d024:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800d028:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 800d02c:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800d030:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800d034:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800d038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	da0a      	bge.n	800d056 <arm_softmax_s8+0x516>
 800d040:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d044:	1851      	adds	r1, r2, r1
 800d046:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 800d04a:	f143 0300 	adc.w	r3, r3, #0
 800d04e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800d052:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800d056:	f04f 0000 	mov.w	r0, #0
 800d05a:	f04f 0100 	mov.w	r1, #0
 800d05e:	0fd0      	lsrs	r0, r2, #31
 800d060:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800d064:	17d9      	asrs	r1, r3, #31
 800d066:	4602      	mov	r2, r0
 800d068:	460b      	mov	r3, r1
 800d06a:	4613      	mov	r3, r2
 800d06c:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800d070:	f8d7 2938 	ldr.w	r2, [r7, #2360]	; 0x938
 800d074:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 800d078:	429a      	cmp	r2, r3
 800d07a:	d108      	bne.n	800d08e <arm_softmax_s8+0x54e>
 800d07c:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 800d080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d084:	d103      	bne.n	800d08e <arm_softmax_s8+0x54e>
        result = Q31_MAX;
 800d086:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d08a:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    return result;
 800d08e:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 800d092:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
    q31_t result = 0;
 800d096:	2300      	movs	r3, #0
 800d098:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    const q31_t remainder_mask = (1 << exponent) - 1;
 800d09c:	2304      	movs	r3, #4
 800d09e:	3b01      	subs	r3, #1
 800d0a0:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    int32_t remainder = remainder_mask & dividend;
 800d0a4:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 800d0a8:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800d0ac:	4013      	ands	r3, r2
 800d0ae:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    result = dividend >> exponent;
 800d0b2:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800d0b6:	109b      	asrs	r3, r3, #2
 800d0b8:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    q31_t threshold = remainder_mask >> 1;
 800d0bc:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800d0c0:	105b      	asrs	r3, r3, #1
 800d0c2:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (result < 0)
 800d0c6:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	da04      	bge.n	800d0d8 <arm_softmax_s8+0x598>
        threshold++;
 800d0ce:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (remainder > threshold)
 800d0d8:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 800d0dc:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	dd04      	ble.n	800d0ee <arm_softmax_s8+0x5ae>
        result++;
 800d0e4:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800d0e8:	3301      	adds	r3, #1
 800d0ea:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    return result;
 800d0ee:	f8d7 4920 	ldr.w	r4, [r7, #2336]	; 0x920
 800d0f2:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800d0f6:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 800d0fa:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800d0fe:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
    q31_t result = 0;
 800d102:	2300      	movs	r3, #0
 800d104:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    q63_t mult = 1 << 30;
 800d108:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d10c:	f04f 0300 	mov.w	r3, #0
 800d110:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800d114:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800d118:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800d11c:	0fdb      	lsrs	r3, r3, #31
 800d11e:	b2da      	uxtb	r2, r3
 800d120:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 800d124:	0fdb      	lsrs	r3, r3, #31
 800d126:	b2db      	uxtb	r3, r3
 800d128:	4053      	eors	r3, r2
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d012      	beq.n	800d156 <arm_softmax_s8+0x616>
        mult = 1 - mult;
 800d130:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800d134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d138:	2100      	movs	r1, #0
 800d13a:	f1d2 0001 	rsbs	r0, r2, #1
 800d13e:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
 800d142:	eb61 0303 	sbc.w	r3, r1, r3
 800d146:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800d14a:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800d14e:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800d152:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 800d156:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800d15a:	17da      	asrs	r2, r3, #31
 800d15c:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 800d160:	f8c7 24bc 	str.w	r2, [r7, #1212]	; 0x4bc
 800d164:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 800d168:	17da      	asrs	r2, r3, #31
 800d16a:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 800d16e:	f8c7 24b4 	str.w	r2, [r7, #1204]	; 0x4b4
 800d172:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800d176:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d17a:	460b      	mov	r3, r1
 800d17c:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 800d180:	fb02 f203 	mul.w	r2, r2, r3
 800d184:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800d188:	f507 6c97 	add.w	ip, r7, #1208	; 0x4b8
 800d18c:	e9cc 0100 	strd	r0, r1, [ip]
 800d190:	4601      	mov	r1, r0
 800d192:	fb01 f303 	mul.w	r3, r1, r3
 800d196:	4413      	add	r3, r2
 800d198:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 800d19c:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 800d1a0:	fba2 5601 	umull	r5, r6, r2, r1
 800d1a4:	4433      	add	r3, r6
 800d1a6:	461e      	mov	r6, r3
 800d1a8:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800d1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b0:	1951      	adds	r1, r2, r5
 800d1b2:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 800d1b6:	4173      	adcs	r3, r6
 800d1b8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800d1bc:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 800d1c0:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800d1c4:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 800d1c8:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800d1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	da0a      	bge.n	800d1ea <arm_softmax_s8+0x6aa>
 800d1d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d1d8:	1851      	adds	r1, r2, r1
 800d1da:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 800d1de:	f143 0300 	adc.w	r3, r3, #0
 800d1e2:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 800d1e6:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 800d1ea:	f04f 0000 	mov.w	r0, #0
 800d1ee:	f04f 0100 	mov.w	r1, #0
 800d1f2:	0fd0      	lsrs	r0, r2, #31
 800d1f4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800d1f8:	17d9      	asrs	r1, r3, #31
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	4613      	mov	r3, r2
 800d200:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800d204:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 800d208:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d108      	bne.n	800d222 <arm_softmax_s8+0x6e2>
 800d210:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800d214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d218:	d103      	bne.n	800d222 <arm_softmax_s8+0x6e2>
        result = Q31_MAX;
 800d21a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d21e:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    return result;
 800d222:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908

    int32_t result = 1895147668 +
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800d226:	4423      	add	r3, r4
 800d228:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
    q31_t result = 0;
 800d22c:	2300      	movs	r3, #0
 800d22e:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    q63_t mult = 1 << 30;
 800d232:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d236:	f04f 0300 	mov.w	r3, #0
 800d23a:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 800d23e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800d242:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 800d246:	0fdb      	lsrs	r3, r3, #31
 800d248:	b2da      	uxtb	r2, r3
 800d24a:	2300      	movs	r3, #0
 800d24c:	4053      	eors	r3, r2
 800d24e:	b2db      	uxtb	r3, r3
 800d250:	2b00      	cmp	r3, #0
 800d252:	d012      	beq.n	800d27a <arm_softmax_s8+0x73a>
        mult = 1 - mult;
 800d254:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800d258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25c:	2100      	movs	r1, #0
 800d25e:	f1d2 0001 	rsbs	r0, r2, #1
 800d262:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
 800d266:	eb61 0303 	sbc.w	r3, r1, r3
 800d26a:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800d26e:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 800d272:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 800d276:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800d27a:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 800d27e:	17da      	asrs	r2, r3, #31
 800d280:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 800d284:	f8c7 24ac 	str.w	r2, [r7, #1196]	; 0x4ac
 800d288:	a3f0      	add	r3, pc, #960	; (adr r3, 800d64c <arm_softmax_s8+0xb0c>)
 800d28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28e:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	; 0x4ac
 800d292:	fb02 f001 	mul.w	r0, r2, r1
 800d296:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 800d29a:	fb01 f103 	mul.w	r1, r1, r3
 800d29e:	4401      	add	r1, r0
 800d2a0:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 800d2a4:	fba0 2302 	umull	r2, r3, r0, r2
 800d2a8:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 800d2b2:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800d2b6:	18cb      	adds	r3, r1, r3
 800d2b8:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800d2bc:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800d2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c4:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 800d2c8:	1851      	adds	r1, r2, r1
 800d2ca:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 800d2ce:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 800d2d2:	414b      	adcs	r3, r1
 800d2d4:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800d2d8:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 800d2dc:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 800d2e0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800d2e4:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800d2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	da0a      	bge.n	800d306 <arm_softmax_s8+0x7c6>
 800d2f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d2f4:	1851      	adds	r1, r2, r1
 800d2f6:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 800d2fa:	f143 0300 	adc.w	r3, r3, #0
 800d2fe:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800d302:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800d306:	f04f 0000 	mov.w	r0, #0
 800d30a:	f04f 0100 	mov.w	r1, #0
 800d30e:	0fd0      	lsrs	r0, r2, #31
 800d310:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800d314:	17d9      	asrs	r1, r3, #31
 800d316:	4602      	mov	r2, r0
 800d318:	460b      	mov	r3, r1
 800d31a:	4613      	mov	r3, r2
 800d31c:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800d320:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 800d324:	4bc6      	ldr	r3, [pc, #792]	; (800d640 <arm_softmax_s8+0xb00>)
 800d326:	429a      	cmp	r2, r3
 800d328:	d108      	bne.n	800d33c <arm_softmax_s8+0x7fc>
 800d32a:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 800d32e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d332:	d103      	bne.n	800d33c <arm_softmax_s8+0x7fc>
        result = Q31_MAX;
 800d334:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d338:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    return result;
 800d33c:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800d340:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800d344:	4413      	add	r3, r2
 800d346:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
    q31_t result = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    const q31_t remainder_mask = (1 << exponent) - 1;
 800d350:	2302      	movs	r3, #2
 800d352:	3b01      	subs	r3, #1
 800d354:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
    int32_t remainder = remainder_mask & dividend;
 800d358:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 800d35c:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 800d360:	4013      	ands	r3, r2
 800d362:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
    result = dividend >> exponent;
 800d366:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 800d36a:	105b      	asrs	r3, r3, #1
 800d36c:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    q31_t threshold = remainder_mask >> 1;
 800d370:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 800d374:	105b      	asrs	r3, r3, #1
 800d376:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (result < 0)
 800d37a:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 800d37e:	2b00      	cmp	r3, #0
 800d380:	da04      	bge.n	800d38c <arm_softmax_s8+0x84c>
        threshold++;
 800d382:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 800d386:	3301      	adds	r3, #1
 800d388:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (remainder > threshold)
 800d38c:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 800d390:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 800d394:	429a      	cmp	r2, r3
 800d396:	dd04      	ble.n	800d3a2 <arm_softmax_s8+0x862>
        result++;
 800d398:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 800d39c:	3301      	adds	r3, #1
 800d39e:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    return result;
 800d3a2:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800d3a6:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800d3aa:	4413      	add	r3, r2
 800d3ac:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
    q31_t result = 0;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    q63_t mult = 1 << 30;
 800d3b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d3ba:	f04f 0300 	mov.w	r3, #0
 800d3be:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 800d3c2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 800d3cc:	0fdb      	lsrs	r3, r3, #31
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	4053      	eors	r3, r2
 800d3d2:	b2db      	uxtb	r3, r3
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d012      	beq.n	800d3fe <arm_softmax_s8+0x8be>
        mult = 1 - mult;
 800d3d8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800d3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	f1d2 0001 	rsbs	r0, r2, #1
 800d3e6:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 800d3ea:	eb61 0303 	sbc.w	r3, r1, r3
 800d3ee:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800d3f2:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 800d3f6:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800d3fa:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800d3fe:	a18c      	add	r1, pc, #560	; (adr r1, 800d630 <arm_softmax_s8+0xaf0>)
 800d400:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d404:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 800d408:	17da      	asrs	r2, r3, #31
 800d40a:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 800d40e:	f8c7 24a4 	str.w	r2, [r7, #1188]	; 0x4a4
 800d412:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 800d416:	fb03 f201 	mul.w	r2, r3, r1
 800d41a:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 800d41e:	fb00 f303 	mul.w	r3, r0, r3
 800d422:	4413      	add	r3, r2
 800d424:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 800d428:	fba0 1202 	umull	r1, r2, r0, r2
 800d42c:	f8c7 25cc 	str.w	r2, [r7, #1484]	; 0x5cc
 800d430:	460a      	mov	r2, r1
 800d432:	f8c7 25c8 	str.w	r2, [r7, #1480]	; 0x5c8
 800d436:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800d43a:	4413      	add	r3, r2
 800d43c:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 800d440:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800d444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d448:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800d44c:	1851      	adds	r1, r2, r1
 800d44e:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 800d452:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 800d456:	414b      	adcs	r3, r1
 800d458:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800d45c:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 800d460:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800d464:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800d468:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800d46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d470:	2b00      	cmp	r3, #0
 800d472:	da0a      	bge.n	800d48a <arm_softmax_s8+0x94a>
 800d474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d478:	1851      	adds	r1, r2, r1
 800d47a:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 800d47e:	f143 0300 	adc.w	r3, r3, #0
 800d482:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800d486:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800d48a:	f04f 0000 	mov.w	r0, #0
 800d48e:	f04f 0100 	mov.w	r1, #0
 800d492:	0fd0      	lsrs	r0, r2, #31
 800d494:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800d498:	17d9      	asrs	r1, r3, #31
 800d49a:	4602      	mov	r2, r0
 800d49c:	460b      	mov	r3, r1
 800d49e:	4613      	mov	r3, r2
 800d4a0:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    return result;
 800d4a4:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
    int32_t result = 1895147668 +
 800d4a8:	4b66      	ldr	r3, [pc, #408]	; (800d644 <arm_softmax_s8+0xb04>)
 800d4aa:	4413      	add	r3, r2
 800d4ac:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    {                                                                                                                  \
        mask = MASK_IF_NON_ZERO(remainder & (1 << shift++));                                                           \
        result = SELECT_USING_MASK(mask, MUL_SAT(result, x), result);                                                  \
    }

    SELECT_IF_NON_ZERO(1672461947)
 800d4b0:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800d4b4:	1c53      	adds	r3, r2, #1
 800d4b6:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	fa03 f202 	lsl.w	r2, r3, r2
 800d4c0:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800d4c4:	4013      	ands	r3, r2
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d002      	beq.n	800d4d0 <arm_softmax_s8+0x990>
 800d4ca:	f04f 33ff 	mov.w	r3, #4294967295
 800d4ce:	e000      	b.n	800d4d2 <arm_softmax_s8+0x992>
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800d4d6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800d4da:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
    q31_t result = 0;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    q63_t mult = 1 << 30;
 800d4e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d4e8:	f04f 0300 	mov.w	r3, #0
 800d4ec:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800d4f0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800d4f4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800d4f8:	0fdb      	lsrs	r3, r3, #31
 800d4fa:	b2da      	uxtb	r2, r3
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	4053      	eors	r3, r2
 800d500:	b2db      	uxtb	r3, r3
 800d502:	2b00      	cmp	r3, #0
 800d504:	d012      	beq.n	800d52c <arm_softmax_s8+0x9ec>
        mult = 1 - mult;
 800d506:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800d50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50e:	2100      	movs	r1, #0
 800d510:	f1d2 0001 	rsbs	r0, r2, #1
 800d514:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 800d518:	eb61 0303 	sbc.w	r3, r1, r3
 800d51c:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 800d520:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 800d524:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800d528:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800d52c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800d530:	17da      	asrs	r2, r3, #31
 800d532:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 800d536:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
 800d53a:	a33f      	add	r3, pc, #252	; (adr r3, 800d638 <arm_softmax_s8+0xaf8>)
 800d53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d540:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 800d544:	fb02 f001 	mul.w	r0, r2, r1
 800d548:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 800d54c:	fb01 f103 	mul.w	r1, r1, r3
 800d550:	4401      	add	r1, r0
 800d552:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 800d556:	fba0 2302 	umull	r2, r3, r0, r2
 800d55a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800d55e:	4613      	mov	r3, r2
 800d560:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 800d564:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 800d568:	18cb      	adds	r3, r1, r3
 800d56a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800d56e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800d572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d576:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800d57a:	1851      	adds	r1, r2, r1
 800d57c:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 800d580:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800d584:	414b      	adcs	r3, r1
 800d586:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800d58a:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 800d58e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800d592:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800d596:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800d59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	da0a      	bge.n	800d5b8 <arm_softmax_s8+0xa78>
 800d5a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d5a6:	1851      	adds	r1, r2, r1
 800d5a8:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 800d5ac:	f143 0300 	adc.w	r3, r3, #0
 800d5b0:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800d5b4:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800d5b8:	f04f 0000 	mov.w	r0, #0
 800d5bc:	f04f 0100 	mov.w	r1, #0
 800d5c0:	0fd0      	lsrs	r0, r2, #31
 800d5c2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800d5c6:	17d9      	asrs	r1, r3, #31
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800d5d2:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 800d5d6:	4b1c      	ldr	r3, [pc, #112]	; (800d648 <arm_softmax_s8+0xb08>)
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d108      	bne.n	800d5ee <arm_softmax_s8+0xaae>
 800d5dc:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800d5e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d5e4:	d103      	bne.n	800d5ee <arm_softmax_s8+0xaae>
        result = Q31_MAX;
 800d5e6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d5ea:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    return result;
 800d5ee:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
    SELECT_IF_NON_ZERO(1672461947)
 800d5f2:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800d5f6:	ea02 0103 	and.w	r1, r2, r3
 800d5fa:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800d5fe:	43da      	mvns	r2, r3
 800d600:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800d604:	4013      	ands	r3, r2
 800d606:	404b      	eors	r3, r1
 800d608:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1302514674)
 800d60c:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800d610:	1c53      	adds	r3, r2, #1
 800d612:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800d616:	2301      	movs	r3, #1
 800d618:	fa03 f202 	lsl.w	r2, r3, r2
 800d61c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800d620:	4013      	ands	r3, r2
 800d622:	2b00      	cmp	r3, #0
 800d624:	d016      	beq.n	800d654 <arm_softmax_s8+0xb14>
 800d626:	f04f 33ff 	mov.w	r3, #4294967295
 800d62a:	e014      	b.n	800d656 <arm_softmax_s8+0xb16>
 800d62c:	f3af 8000 	nop.w
 800d630:	70f5a894 	.word	0x70f5a894
 800d634:	00000000 	.word	0x00000000
 800d638:	63afbe7b 	.word	0x63afbe7b
 800d63c:	00000000 	.word	0x00000000
 800d640:	2aaaaaab 	.word	0x2aaaaaab
 800d644:	70f5a894 	.word	0x70f5a894
 800d648:	63afbe7b 	.word	0x63afbe7b
 800d64c:	2aaaaaab 	.word	0x2aaaaaab
 800d650:	00000000 	.word	0x00000000
 800d654:	2300      	movs	r3, #0
 800d656:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800d65a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800d65e:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
    q31_t result = 0;
 800d662:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d666:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800d66a:	2300      	movs	r3, #0
 800d66c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800d66e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d672:	f04f 0300 	mov.w	r3, #0
 800d676:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 800d67a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800d67e:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800d682:	0fdb      	lsrs	r3, r3, #31
 800d684:	b2da      	uxtb	r2, r3
 800d686:	2300      	movs	r3, #0
 800d688:	4053      	eors	r3, r2
 800d68a:	b2db      	uxtb	r3, r3
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d012      	beq.n	800d6b6 <arm_softmax_s8+0xb76>
        mult = 1 - mult;
 800d690:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800d694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d698:	2100      	movs	r1, #0
 800d69a:	f1d2 0001 	rsbs	r0, r2, #1
 800d69e:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 800d6a2:	eb61 0303 	sbc.w	r3, r1, r3
 800d6a6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800d6aa:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 800d6ae:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 800d6b2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800d6b6:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800d6ba:	17da      	asrs	r2, r3, #31
 800d6bc:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 800d6c0:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 800d6c4:	a3a8      	add	r3, pc, #672	; (adr r3, 800d968 <arm_softmax_s8+0xe28>)
 800d6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ca:	f8d7 1494 	ldr.w	r1, [r7, #1172]	; 0x494
 800d6ce:	fb02 f001 	mul.w	r0, r2, r1
 800d6d2:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 800d6d6:	fb01 f103 	mul.w	r1, r1, r3
 800d6da:	4401      	add	r1, r0
 800d6dc:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 800d6e0:	fba0 2302 	umull	r2, r3, r0, r2
 800d6e4:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800d6e8:	4613      	mov	r3, r2
 800d6ea:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800d6ee:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 800d6f2:	18cb      	adds	r3, r1, r3
 800d6f4:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800d6f8:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800d6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d700:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800d704:	1851      	adds	r1, r2, r1
 800d706:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 800d70a:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800d70e:	414b      	adcs	r3, r1
 800d710:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800d714:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 800d718:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 800d71c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800d720:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800d724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	da0a      	bge.n	800d742 <arm_softmax_s8+0xc02>
 800d72c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d730:	1851      	adds	r1, r2, r1
 800d732:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 800d736:	f143 0300 	adc.w	r3, r3, #0
 800d73a:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800d73e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800d742:	f04f 0000 	mov.w	r0, #0
 800d746:	f04f 0100 	mov.w	r1, #0
 800d74a:	0fd0      	lsrs	r0, r2, #31
 800d74c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800d750:	17d9      	asrs	r1, r3, #31
 800d752:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d756:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800d75a:	4603      	mov	r3, r0
 800d75c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800d75e:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 800d762:	4b7f      	ldr	r3, [pc, #508]	; (800d960 <arm_softmax_s8+0xe20>)
 800d764:	429a      	cmp	r2, r3
 800d766:	d10b      	bne.n	800d780 <arm_softmax_s8+0xc40>
 800d768:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800d76c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d770:	d106      	bne.n	800d780 <arm_softmax_s8+0xc40>
        result = Q31_MAX;
 800d772:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d776:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800d77a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d77e:	6013      	str	r3, [r2, #0]
    return result;
 800d780:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d784:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d788:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 800d78a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800d78e:	ea02 0103 	and.w	r1, r2, r3
 800d792:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800d796:	43da      	mvns	r2, r3
 800d798:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800d79c:	4013      	ands	r3, r2
 800d79e:	404b      	eors	r3, r1
 800d7a0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(790015084)
 800d7a4:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800d7a8:	1c53      	adds	r3, r2, #1
 800d7aa:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	fa03 f202 	lsl.w	r2, r3, r2
 800d7b4:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800d7b8:	4013      	ands	r3, r2
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d002      	beq.n	800d7c4 <arm_softmax_s8+0xc84>
 800d7be:	f04f 33ff 	mov.w	r3, #4294967295
 800d7c2:	e000      	b.n	800d7c6 <arm_softmax_s8+0xc86>
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800d7ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d7ce:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800d7d2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800d7d6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800d7d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d7dc:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800d7e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d7e8:	f04f 0300 	mov.w	r3, #0
 800d7ec:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 800d7f0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800d7f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d7f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	0fdb      	lsrs	r3, r3, #31
 800d800:	b2da      	uxtb	r2, r3
 800d802:	2300      	movs	r3, #0
 800d804:	4053      	eors	r3, r2
 800d806:	b2db      	uxtb	r3, r3
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d012      	beq.n	800d832 <arm_softmax_s8+0xcf2>
        mult = 1 - mult;
 800d80c:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800d810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d814:	2100      	movs	r1, #0
 800d816:	f1d2 0001 	rsbs	r0, r2, #1
 800d81a:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 800d81e:	eb61 0303 	sbc.w	r3, r1, r3
 800d822:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800d826:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 800d82a:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 800d82e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800d832:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d836:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	17da      	asrs	r2, r3, #31
 800d83e:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 800d842:	f8c7 248c 	str.w	r2, [r7, #1164]	; 0x48c
 800d846:	a344      	add	r3, pc, #272	; (adr r3, 800d958 <arm_softmax_s8+0xe18>)
 800d848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84c:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 800d850:	fb02 f001 	mul.w	r0, r2, r1
 800d854:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 800d858:	fb01 f103 	mul.w	r1, r1, r3
 800d85c:	4401      	add	r1, r0
 800d85e:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 800d862:	fba0 2302 	umull	r2, r3, r0, r2
 800d866:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800d86a:	4613      	mov	r3, r2
 800d86c:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 800d870:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800d874:	18cb      	adds	r3, r1, r3
 800d876:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800d87a:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800d87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d882:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800d886:	1851      	adds	r1, r2, r1
 800d888:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 800d88c:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800d890:	414b      	adcs	r3, r1
 800d892:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800d896:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 800d89a:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 800d89e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800d8a2:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800d8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	da0a      	bge.n	800d8c4 <arm_softmax_s8+0xd84>
 800d8ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d8b2:	1851      	adds	r1, r2, r1
 800d8b4:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 800d8b8:	f143 0300 	adc.w	r3, r3, #0
 800d8bc:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800d8c0:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800d8c4:	f04f 0000 	mov.w	r0, #0
 800d8c8:	f04f 0100 	mov.w	r1, #0
 800d8cc:	0fd0      	lsrs	r0, r2, #31
 800d8ce:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800d8d2:	17d9      	asrs	r1, r3, #31
 800d8d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d8d8:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800d8dc:	4603      	mov	r3, r0
 800d8de:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800d8e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d8e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	4b1e      	ldr	r3, [pc, #120]	; (800d964 <arm_softmax_s8+0xe24>)
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d10e      	bne.n	800d90e <arm_softmax_s8+0xdce>
 800d8f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d8f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d8fe:	d106      	bne.n	800d90e <arm_softmax_s8+0xdce>
        result = Q31_MAX;
 800d900:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d904:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800d908:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d90c:	6013      	str	r3, [r2, #0]
    return result;
 800d90e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d912:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d916:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 800d918:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800d91c:	ea02 0103 	and.w	r1, r2, r3
 800d920:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800d924:	43da      	mvns	r2, r3
 800d926:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800d92a:	4013      	ands	r3, r2
 800d92c:	404b      	eors	r3, r1
 800d92e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(290630308)
 800d932:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800d936:	1c53      	adds	r3, r2, #1
 800d938:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800d93c:	2301      	movs	r3, #1
 800d93e:	fa03 f202 	lsl.w	r2, r3, r2
 800d942:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800d946:	4013      	ands	r3, r2
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d011      	beq.n	800d970 <arm_softmax_s8+0xe30>
 800d94c:	f04f 33ff 	mov.w	r3, #4294967295
 800d950:	e00f      	b.n	800d972 <arm_softmax_s8+0xe32>
 800d952:	bf00      	nop
 800d954:	f3af 8000 	nop.w
 800d958:	2f16ac6c 	.word	0x2f16ac6c
 800d95c:	00000000 	.word	0x00000000
 800d960:	4da2cbf2 	.word	0x4da2cbf2
 800d964:	2f16ac6c 	.word	0x2f16ac6c
 800d968:	4da2cbf2 	.word	0x4da2cbf2
 800d96c:	00000000 	.word	0x00000000
 800d970:	2300      	movs	r3, #0
 800d972:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800d976:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d97a:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800d97e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800d982:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800d984:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d988:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800d98c:	2300      	movs	r3, #0
 800d98e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800d990:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d994:	f04f 0300 	mov.w	r3, #0
 800d998:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 800d99c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800d9a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d9a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	0fdb      	lsrs	r3, r3, #31
 800d9ac:	b2da      	uxtb	r2, r3
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	4053      	eors	r3, r2
 800d9b2:	b2db      	uxtb	r3, r3
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d012      	beq.n	800d9de <arm_softmax_s8+0xe9e>
        mult = 1 - mult;
 800d9b8:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800d9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c0:	2100      	movs	r1, #0
 800d9c2:	f1d2 0001 	rsbs	r0, r2, #1
 800d9c6:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 800d9ca:	eb61 0303 	sbc.w	r3, r1, r3
 800d9ce:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800d9d2:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800d9d6:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800d9da:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800d9de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d9e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	17da      	asrs	r2, r3, #31
 800d9ea:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 800d9ee:	f8c7 2484 	str.w	r2, [r7, #1156]	; 0x484
 800d9f2:	a3ab      	add	r3, pc, #684	; (adr r3, 800dca0 <arm_softmax_s8+0x1160>)
 800d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f8:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 800d9fc:	fb02 f001 	mul.w	r0, r2, r1
 800da00:	f8d7 1480 	ldr.w	r1, [r7, #1152]	; 0x480
 800da04:	fb01 f103 	mul.w	r1, r1, r3
 800da08:	4401      	add	r1, r0
 800da0a:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 800da0e:	fba0 2302 	umull	r2, r3, r0, r2
 800da12:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800da16:	4613      	mov	r3, r2
 800da18:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 800da1c:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 800da20:	18cb      	adds	r3, r1, r3
 800da22:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800da26:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800da2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da2e:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 800da32:	1851      	adds	r1, r2, r1
 800da34:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 800da38:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 800da3c:	414b      	adcs	r3, r1
 800da3e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800da42:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800da46:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800da4a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800da4e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800da52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da56:	2b00      	cmp	r3, #0
 800da58:	da0a      	bge.n	800da70 <arm_softmax_s8+0xf30>
 800da5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800da5e:	1851      	adds	r1, r2, r1
 800da60:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 800da64:	f143 0300 	adc.w	r3, r3, #0
 800da68:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800da6c:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800da70:	f04f 0000 	mov.w	r0, #0
 800da74:	f04f 0100 	mov.w	r1, #0
 800da78:	0fd0      	lsrs	r0, r2, #31
 800da7a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800da7e:	17d9      	asrs	r1, r3, #31
 800da80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800da84:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800da88:	4603      	mov	r3, r0
 800da8a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800da8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800da90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	4b80      	ldr	r3, [pc, #512]	; (800dc98 <arm_softmax_s8+0x1158>)
 800da98:	429a      	cmp	r2, r3
 800da9a:	d10e      	bne.n	800daba <arm_softmax_s8+0xf7a>
 800da9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800daa0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800daaa:	d106      	bne.n	800daba <arm_softmax_s8+0xf7a>
        result = Q31_MAX;
 800daac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dab0:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800dab4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dab8:	6013      	str	r3, [r2, #0]
    return result;
 800daba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dabe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800dac2:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 800dac4:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800dac8:	ea02 0103 	and.w	r1, r2, r3
 800dacc:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800dad0:	43da      	mvns	r2, r3
 800dad2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800dad6:	4013      	ands	r3, r2
 800dad8:	404b      	eors	r3, r1
 800dada:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(39332535)
 800dade:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800dae2:	1c53      	adds	r3, r2, #1
 800dae4:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800dae8:	2301      	movs	r3, #1
 800daea:	fa03 f202 	lsl.w	r2, r3, r2
 800daee:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800daf2:	4013      	ands	r3, r2
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d002      	beq.n	800dafe <arm_softmax_s8+0xfbe>
 800daf8:	f04f 33ff 	mov.w	r3, #4294967295
 800dafc:	e000      	b.n	800db00 <arm_softmax_s8+0xfc0>
 800dafe:	2300      	movs	r3, #0
 800db00:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800db04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800db08:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 800db0c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800db10:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800db12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800db16:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800db1a:	2300      	movs	r3, #0
 800db1c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800db1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800db22:	f04f 0300 	mov.w	r3, #0
 800db26:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 800db2a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800db2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800db32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	0fdb      	lsrs	r3, r3, #31
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	2300      	movs	r3, #0
 800db3e:	4053      	eors	r3, r2
 800db40:	b2db      	uxtb	r3, r3
 800db42:	2b00      	cmp	r3, #0
 800db44:	d012      	beq.n	800db6c <arm_softmax_s8+0x102c>
        mult = 1 - mult;
 800db46:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800db4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4e:	2100      	movs	r1, #0
 800db50:	f1d2 0001 	rsbs	r0, r2, #1
 800db54:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 800db58:	eb61 0303 	sbc.w	r3, r1, r3
 800db5c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800db60:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800db64:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 800db68:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800db6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800db70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	17da      	asrs	r2, r3, #31
 800db78:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800db7c:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 800db80:	a343      	add	r3, pc, #268	; (adr r3, 800dc90 <arm_softmax_s8+0x1150>)
 800db82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db86:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 800db8a:	fb02 f001 	mul.w	r0, r2, r1
 800db8e:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 800db92:	fb01 f103 	mul.w	r1, r1, r3
 800db96:	4401      	add	r1, r0
 800db98:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 800db9c:	fba0 2302 	umull	r2, r3, r0, r2
 800dba0:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800dba4:	4613      	mov	r3, r2
 800dba6:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 800dbaa:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800dbae:	18cb      	adds	r3, r1, r3
 800dbb0:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800dbb4:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800dbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbbc:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800dbc0:	1851      	adds	r1, r2, r1
 800dbc2:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 800dbc6:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 800dbca:	414b      	adcs	r3, r1
 800dbcc:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800dbd0:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 800dbd4:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 800dbd8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800dbdc:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800dbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	da0a      	bge.n	800dbfe <arm_softmax_s8+0x10be>
 800dbe8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dbec:	1851      	adds	r1, r2, r1
 800dbee:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 800dbf2:	f143 0300 	adc.w	r3, r3, #0
 800dbf6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800dbfa:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800dbfe:	f04f 0000 	mov.w	r0, #0
 800dc02:	f04f 0100 	mov.w	r1, #0
 800dc06:	0fd0      	lsrs	r0, r2, #31
 800dc08:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800dc0c:	17d9      	asrs	r1, r3, #31
 800dc0e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dc12:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800dc16:	4603      	mov	r3, r0
 800dc18:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800dc1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dc1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	4b1d      	ldr	r3, [pc, #116]	; (800dc9c <arm_softmax_s8+0x115c>)
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d10e      	bne.n	800dc48 <arm_softmax_s8+0x1108>
 800dc2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dc2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc38:	d106      	bne.n	800dc48 <arm_softmax_s8+0x1108>
        result = Q31_MAX;
 800dc3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dc3e:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800dc42:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dc46:	6013      	str	r3, [r2, #0]
    return result;
 800dc48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dc4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dc50:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 800dc52:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800dc56:	ea02 0103 	and.w	r1, r2, r3
 800dc5a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800dc5e:	43da      	mvns	r2, r3
 800dc60:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800dc64:	4013      	ands	r3, r2
 800dc66:	404b      	eors	r3, r1
 800dc68:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(720401)
 800dc6c:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800dc70:	1c53      	adds	r3, r2, #1
 800dc72:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800dc76:	2301      	movs	r3, #1
 800dc78:	fa03 f202 	lsl.w	r2, r3, r2
 800dc7c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800dc80:	4013      	ands	r3, r2
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d010      	beq.n	800dca8 <arm_softmax_s8+0x1168>
 800dc86:	f04f 33ff 	mov.w	r3, #4294967295
 800dc8a:	e00e      	b.n	800dcaa <arm_softmax_s8+0x116a>
 800dc8c:	f3af 8000 	nop.w
 800dc90:	02582ab7 	.word	0x02582ab7
 800dc94:	00000000 	.word	0x00000000
 800dc98:	1152aaa4 	.word	0x1152aaa4
 800dc9c:	02582ab7 	.word	0x02582ab7
 800dca0:	1152aaa4 	.word	0x1152aaa4
 800dca4:	00000000 	.word	0x00000000
 800dca8:	2300      	movs	r3, #0
 800dcaa:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800dcae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dcb2:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800dcb6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800dcba:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800dcbc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dcc0:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800dcc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dccc:	f04f 0300 	mov.w	r3, #0
 800dcd0:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 800dcd4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800dcd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dcdc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	0fdb      	lsrs	r3, r3, #31
 800dce4:	b2da      	uxtb	r2, r3
 800dce6:	2300      	movs	r3, #0
 800dce8:	4053      	eors	r3, r2
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d012      	beq.n	800dd16 <arm_softmax_s8+0x11d6>
        mult = 1 - mult;
 800dcf0:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800dcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	f1d2 0001 	rsbs	r0, r2, #1
 800dcfe:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
 800dd02:	eb61 0303 	sbc.w	r3, r1, r3
 800dd06:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800dd0a:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 800dd0e:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 800dd12:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800dd16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dd1a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	17da      	asrs	r2, r3, #31
 800dd22:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 800dd26:	f8c7 2474 	str.w	r2, [r7, #1140]	; 0x474
 800dd2a:	4ad3      	ldr	r2, [pc, #844]	; (800e078 <arm_softmax_s8+0x1538>)
 800dd2c:	f04f 0300 	mov.w	r3, #0
 800dd30:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 800dd34:	fb02 f001 	mul.w	r0, r2, r1
 800dd38:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 800dd3c:	fb01 f103 	mul.w	r1, r1, r3
 800dd40:	4401      	add	r1, r0
 800dd42:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 800dd46:	fba0 2302 	umull	r2, r3, r0, r2
 800dd4a:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800dd4e:	4613      	mov	r3, r2
 800dd50:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 800dd54:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 800dd58:	18cb      	adds	r3, r1, r3
 800dd5a:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800dd5e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800dd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd66:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 800dd6a:	1851      	adds	r1, r2, r1
 800dd6c:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 800dd70:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 800dd74:	414b      	adcs	r3, r1
 800dd76:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800dd7a:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 800dd7e:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 800dd82:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800dd86:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800dd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	da0a      	bge.n	800dda8 <arm_softmax_s8+0x1268>
 800dd92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dd96:	1851      	adds	r1, r2, r1
 800dd98:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 800dd9c:	f143 0300 	adc.w	r3, r3, #0
 800dda0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800dda4:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 800dda8:	f04f 0000 	mov.w	r0, #0
 800ddac:	f04f 0100 	mov.w	r1, #0
 800ddb0:	0fd0      	lsrs	r0, r2, #31
 800ddb2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800ddb6:	17d9      	asrs	r1, r3, #31
 800ddb8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ddbc:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ddc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ddc8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	4baa      	ldr	r3, [pc, #680]	; (800e078 <arm_softmax_s8+0x1538>)
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d10e      	bne.n	800ddf2 <arm_softmax_s8+0x12b2>
 800ddd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ddd8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dde2:	d106      	bne.n	800ddf2 <arm_softmax_s8+0x12b2>
        result = Q31_MAX;
 800dde4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dde8:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800ddec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ddf0:	6013      	str	r3, [r2, #0]
    return result;
 800ddf2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ddf6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800ddfa:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 800ddfc:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800de00:	ea02 0103 	and.w	r1, r2, r3
 800de04:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800de08:	43da      	mvns	r2, r3
 800de0a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800de0e:	4013      	ands	r3, r2
 800de10:	404b      	eors	r3, r1
 800de12:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(242)
 800de16:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800de1a:	1c53      	adds	r3, r2, #1
 800de1c:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800de20:	2301      	movs	r3, #1
 800de22:	fa03 f202 	lsl.w	r2, r3, r2
 800de26:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800de2a:	4013      	ands	r3, r2
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d002      	beq.n	800de36 <arm_softmax_s8+0x12f6>
 800de30:	f04f 33ff 	mov.w	r3, #4294967295
 800de34:	e000      	b.n	800de38 <arm_softmax_s8+0x12f8>
 800de36:	2300      	movs	r3, #0
 800de38:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800de3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800de40:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800de44:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800de48:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800de4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800de4e:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800de52:	2300      	movs	r3, #0
 800de54:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800de56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800de5a:	f04f 0300 	mov.w	r3, #0
 800de5e:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 800de62:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800de66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800de6a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	0fdb      	lsrs	r3, r3, #31
 800de72:	b2da      	uxtb	r2, r3
 800de74:	2300      	movs	r3, #0
 800de76:	4053      	eors	r3, r2
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d012      	beq.n	800dea4 <arm_softmax_s8+0x1364>
        mult = 1 - mult;
 800de7e:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800de82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de86:	2100      	movs	r1, #0
 800de88:	f1d2 0001 	rsbs	r0, r2, #1
 800de8c:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 800de90:	eb61 0303 	sbc.w	r3, r1, r3
 800de94:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800de98:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 800de9c:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 800dea0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800dea4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dea8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	17da      	asrs	r2, r3, #31
 800deb0:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800deb4:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 800deb8:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 800debc:	f04f 0300 	mov.w	r3, #0
 800dec0:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 800dec4:	fb02 f001 	mul.w	r0, r2, r1
 800dec8:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 800decc:	fb01 f103 	mul.w	r1, r1, r3
 800ded0:	4401      	add	r1, r0
 800ded2:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 800ded6:	fba0 2302 	umull	r2, r3, r0, r2
 800deda:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800dede:	4613      	mov	r3, r2
 800dee0:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 800dee4:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 800dee8:	18cb      	adds	r3, r1, r3
 800deea:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800deee:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800def2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def6:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 800defa:	1851      	adds	r1, r2, r1
 800defc:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 800df00:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 800df04:	414b      	adcs	r3, r1
 800df06:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800df0a:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800df0e:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 800df12:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800df16:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800df1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	da0a      	bge.n	800df38 <arm_softmax_s8+0x13f8>
 800df22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800df26:	1851      	adds	r1, r2, r1
 800df28:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 800df2c:	f143 0300 	adc.w	r3, r3, #0
 800df30:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800df34:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 800df38:	f04f 0000 	mov.w	r0, #0
 800df3c:	f04f 0100 	mov.w	r1, #0
 800df40:	0fd0      	lsrs	r0, r2, #31
 800df42:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800df46:	17d9      	asrs	r1, r3, #31
 800df48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800df4c:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800df50:	4603      	mov	r3, r0
 800df52:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800df54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800df58:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2bf2      	cmp	r3, #242	; 0xf2
 800df60:	d10e      	bne.n	800df80 <arm_softmax_s8+0x1440>
 800df62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800df66:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df70:	d106      	bne.n	800df80 <arm_softmax_s8+0x1440>
        result = Q31_MAX;
 800df72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800df76:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800df7a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800df7e:	6013      	str	r3, [r2, #0]
    return result;
 800df80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800df84:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800df88:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 800df8a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800df8e:	ea02 0103 	and.w	r1, r2, r3
 800df92:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800df96:	43da      	mvns	r2, r3
 800df98:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800df9c:	4013      	ands	r3, r2
 800df9e:	404b      	eors	r3, r1
 800dfa0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4

#undef SELECT_IF_NON_ZERO

    mask = MASK_IF_ZERO(val);
 800dfa4:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d102      	bne.n	800dfb2 <arm_softmax_s8+0x1472>
 800dfac:	f04f 33ff 	mov.w	r3, #4294967295
 800dfb0:	e000      	b.n	800dfb4 <arm_softmax_s8+0x1474>
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 800dfb8:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800dfbc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dfc0:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800dfc4:	43da      	mvns	r2, r3
 800dfc6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800dfca:	4013      	ands	r3, r2
 800dfcc:	404b      	eors	r3, r1
 800dfce:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    q31_t result = 0;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    const q31_t remainder_mask = (1 << exponent) - 1;
 800dfd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfdc:	3b01      	subs	r3, #1
 800dfde:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
    int32_t remainder = remainder_mask & dividend;
 800dfe2:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 800dfe6:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 800dfea:	4013      	ands	r3, r2
 800dfec:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
    result = dividend >> exponent;
 800dff0:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 800dff4:	131b      	asrs	r3, r3, #12
 800dff6:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    q31_t threshold = remainder_mask >> 1;
 800dffa:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 800dffe:	105b      	asrs	r3, r3, #1
 800e000:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (result < 0)
 800e004:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 800e008:	2b00      	cmp	r3, #0
 800e00a:	da04      	bge.n	800e016 <arm_softmax_s8+0x14d6>
        threshold++;
 800e00c:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800e010:	3301      	adds	r3, #1
 800e012:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (remainder > threshold)
 800e016:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 800e01a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800e01e:	429a      	cmp	r2, r3
 800e020:	dd04      	ble.n	800e02c <arm_softmax_s8+0x14ec>
        result++;
 800e022:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 800e026:	3301      	adds	r3, #1
 800e028:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    return result;
 800e02c:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 800e030:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 800e034:	4413      	add	r3, r2
 800e036:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
        for (col = 0; col < row_size; ++col)
 800e03a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 800e03e:	3301      	adds	r3, #1
 800e040:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800e044:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e048:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800e04c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	429a      	cmp	r2, r3
 800e054:	f6fe add2 	blt.w	800cbfc <arm_softmax_s8+0xbc>
            }
        }

        const int32_t headroom = __CLZ(sum);
 800e058:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 800e05c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e060:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e064:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 800e066:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e06a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d103      	bne.n	800e07c <arm_softmax_s8+0x153c>
    return 32U;
 800e074:	2320      	movs	r3, #32
 800e076:	e009      	b.n	800e08c <arm_softmax_s8+0x154c>
 800e078:	000afe11 	.word	0x000afe11
  return __builtin_clz(value);
 800e07c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e080:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	fab3 f383 	clz	r3, r3
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 800e090:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 800e094:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 800e098:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 800e09c:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 800e0a0:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 800e0a4:	fa02 f303 	lsl.w	r3, r2, r3
 800e0a8:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 800e0ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e0b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800e0b4:	601a      	str	r2, [r3, #0]
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 800e0b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e0ba:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	17da      	asrs	r2, r3, #31
 800e0c2:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 800e0c6:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 800e0ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e0ce:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	18d3      	adds	r3, r2, r3
 800e0d6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800e0da:	460b      	mov	r3, r1
 800e0dc:	f143 0300 	adc.w	r3, r3, #0
 800e0e0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800e0e4:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 800e0e8:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800e0ec:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 800e0f0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800e0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	db04      	blt.n	800e106 <arm_softmax_s8+0x15c6>
 800e0fc:	f04f 0001 	mov.w	r0, #1
 800e100:	f04f 0100 	mov.w	r1, #0
 800e104:	e003      	b.n	800e10e <arm_softmax_s8+0x15ce>
 800e106:	f04f 30ff 	mov.w	r0, #4294967295
 800e10a:	f04f 31ff 	mov.w	r1, #4294967295
 800e10e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800e112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e116:	1884      	adds	r4, r0, r2
 800e118:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 800e11c:	eb41 0303 	adc.w	r3, r1, r3
 800e120:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800e124:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 800e128:	460b      	mov	r3, r1
 800e12a:	0fdb      	lsrs	r3, r3, #31
 800e12c:	2200      	movs	r2, #0
 800e12e:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 800e132:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 800e136:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 800e13a:	4602      	mov	r2, r0
 800e13c:	189b      	adds	r3, r3, r2
 800e13e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800e142:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e146:	460a      	mov	r2, r1
 800e148:	4153      	adcs	r3, r2
 800e14a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800e14e:	f04f 0200 	mov.w	r2, #0
 800e152:	f04f 0300 	mov.w	r3, #0
 800e156:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 800e15a:	084a      	lsrs	r2, r1, #1
 800e15c:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 800e160:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800e164:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 800e168:	104b      	asrs	r3, r1, #1
 800e16a:	4610      	mov	r0, r2
 800e16c:	4619      	mov	r1, r3
 800e16e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e172:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 800e176:	4603      	mov	r3, r0
 800e178:	6013      	str	r3, [r2, #0]
 800e17a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e17e:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 800e182:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e186:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800e18e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e192:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800e196:	2300      	movs	r3, #0
 800e198:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e19a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e19e:	f04f 0300 	mov.w	r3, #0
 800e1a2:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 800e1a6:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800e1aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e1ae:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	0fdb      	lsrs	r3, r3, #31
 800e1b6:	b2da      	uxtb	r2, r3
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	4053      	eors	r3, r2
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d012      	beq.n	800e1e8 <arm_softmax_s8+0x16a8>
        mult = 1 - mult;
 800e1c2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800e1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ca:	2100      	movs	r1, #0
 800e1cc:	f1d2 0001 	rsbs	r0, r2, #1
 800e1d0:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 800e1d4:	eb61 0303 	sbc.w	r3, r1, r3
 800e1d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800e1dc:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800e1e0:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800e1e4:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800e1e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e1ec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	17da      	asrs	r2, r3, #31
 800e1f4:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 800e1f8:	f8c7 2454 	str.w	r2, [r7, #1108]	; 0x454
 800e1fc:	f60f 53a0 	addw	r3, pc, #3488	; 0xda0
 800e200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e204:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 800e208:	fb02 f001 	mul.w	r0, r2, r1
 800e20c:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 800e210:	fb01 f103 	mul.w	r1, r1, r3
 800e214:	4401      	add	r1, r0
 800e216:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 800e21a:	fba0 2302 	umull	r2, r3, r0, r2
 800e21e:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800e222:	4613      	mov	r3, r2
 800e224:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 800e228:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 800e22c:	18cb      	adds	r3, r1, r3
 800e22e:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800e232:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800e236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23a:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 800e23e:	1851      	adds	r1, r2, r1
 800e240:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 800e244:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 800e248:	414b      	adcs	r3, r1
 800e24a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800e24e:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800e252:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800e256:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800e25a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800e25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e262:	2b00      	cmp	r3, #0
 800e264:	da0a      	bge.n	800e27c <arm_softmax_s8+0x173c>
 800e266:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e26a:	1851      	adds	r1, r2, r1
 800e26c:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 800e270:	f143 0300 	adc.w	r3, r3, #0
 800e274:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800e278:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800e27c:	f04f 0000 	mov.w	r0, #0
 800e280:	f04f 0100 	mov.w	r1, #0
 800e284:	0fd0      	lsrs	r0, r2, #31
 800e286:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e28a:	17d9      	asrs	r1, r3, #31
 800e28c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e290:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800e294:	4603      	mov	r3, r0
 800e296:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e298:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e29c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 800e2a6:	d10e      	bne.n	800e2c6 <arm_softmax_s8+0x1786>
 800e2a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e2ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e2b6:	d106      	bne.n	800e2c6 <arm_softmax_s8+0x1786>
        result = Q31_MAX;
 800e2b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e2bc:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800e2c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e2c4:	6013      	str	r3, [r2, #0]
    return result;
 800e2c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e2ca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800e2ce:	6819      	ldr	r1, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 800e2d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e2d4:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800e2d8:	f101 335a 	add.w	r3, r1, #1515870810	; 0x5a5a5a5a
 800e2dc:	6013      	str	r3, [r2, #0]

    const int32_t shift = (1 << 29);
 800e2de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e2e2:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 800e2e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800e2ea:	6013      	str	r3, [r2, #0]
 800e2ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e2f0:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 800e2f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e2f8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	6013      	str	r3, [r2, #0]
 800e300:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e304:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 800e308:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e30c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800e314:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e318:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800e31c:	2300      	movs	r3, #0
 800e31e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e320:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e324:	f04f 0300 	mov.w	r3, #0
 800e328:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 800e32c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800e330:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e334:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	0fdb      	lsrs	r3, r3, #31
 800e33c:	b2da      	uxtb	r2, r3
 800e33e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e342:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	0fdb      	lsrs	r3, r3, #31
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	4053      	eors	r3, r2
 800e34e:	b2db      	uxtb	r3, r3
 800e350:	2b00      	cmp	r3, #0
 800e352:	d012      	beq.n	800e37a <arm_softmax_s8+0x183a>
        mult = 1 - mult;
 800e354:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35c:	2100      	movs	r1, #0
 800e35e:	f1d2 0001 	rsbs	r0, r2, #1
 800e362:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 800e366:	eb61 0303 	sbc.w	r3, r1, r3
 800e36a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800e36e:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800e372:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800e376:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800e37a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e37e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	17da      	asrs	r2, r3, #31
 800e386:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 800e38a:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 800e38e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e392:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	17da      	asrs	r2, r3, #31
 800e39a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 800e39e:	f8c7 2444 	str.w	r2, [r7, #1092]	; 0x444
 800e3a2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800e3a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 800e3b0:	fb02 f203 	mul.w	r2, r2, r3
 800e3b4:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800e3b8:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 800e3bc:	e9c4 0100 	strd	r0, r1, [r4]
 800e3c0:	4601      	mov	r1, r0
 800e3c2:	fb01 f303 	mul.w	r3, r1, r3
 800e3c6:	4413      	add	r3, r2
 800e3c8:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 800e3cc:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 800e3d0:	fba2 1201 	umull	r1, r2, r2, r1
 800e3d4:	f8c7 257c 	str.w	r2, [r7, #1404]	; 0x57c
 800e3d8:	460a      	mov	r2, r1
 800e3da:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 800e3de:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 800e3e2:	4413      	add	r3, r2
 800e3e4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 800e3e8:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f0:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 800e3f4:	1851      	adds	r1, r2, r1
 800e3f6:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 800e3fa:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 800e3fe:	414b      	adcs	r3, r1
 800e400:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800e404:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 800e408:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800e40c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800e410:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	da0a      	bge.n	800e432 <arm_softmax_s8+0x18f2>
 800e41c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e420:	1851      	adds	r1, r2, r1
 800e422:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 800e426:	f143 0300 	adc.w	r3, r3, #0
 800e42a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800e42e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800e432:	f04f 0000 	mov.w	r0, #0
 800e436:	f04f 0100 	mov.w	r1, #0
 800e43a:	0fd0      	lsrs	r0, r2, #31
 800e43c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e440:	17d9      	asrs	r1, r3, #31
 800e442:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e446:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800e44a:	4603      	mov	r3, r0
 800e44c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e44e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e452:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 800e456:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e45a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800e45e:	6812      	ldr	r2, [r2, #0]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	429a      	cmp	r2, r3
 800e464:	d10e      	bne.n	800e484 <arm_softmax_s8+0x1944>
 800e466:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e46a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e474:	d106      	bne.n	800e484 <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 800e476:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e47a:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800e47e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e482:	6013      	str	r3, [r2, #0]
    return result;
 800e484:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e488:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800e48c:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800e48e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e492:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	1a99      	subs	r1, r3, r2
 800e49a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e49e:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800e4a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e4a6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	6013      	str	r3, [r2, #0]
 800e4ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e4b2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800e4b6:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 800e4b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e4bc:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e4c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e4c8:	f04f 0300 	mov.w	r3, #0
 800e4cc:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 800e4d0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800e4d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e4d8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	0fdb      	lsrs	r3, r3, #31
 800e4e0:	b2da      	uxtb	r2, r3
 800e4e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e4e6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	0fdb      	lsrs	r3, r3, #31
 800e4ee:	b2db      	uxtb	r3, r3
 800e4f0:	4053      	eors	r3, r2
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d012      	beq.n	800e51e <arm_softmax_s8+0x19de>
        mult = 1 - mult;
 800e4f8:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800e4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e500:	2100      	movs	r1, #0
 800e502:	f1d2 0001 	rsbs	r0, r2, #1
 800e506:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
 800e50a:	eb61 0303 	sbc.w	r3, r1, r3
 800e50e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800e512:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 800e516:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800e51a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800e51e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e522:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	17da      	asrs	r2, r3, #31
 800e52a:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 800e52e:	f8c7 243c 	str.w	r2, [r7, #1084]	; 0x43c
 800e532:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e536:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	17da      	asrs	r2, r3, #31
 800e53e:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 800e542:	f8c7 2434 	str.w	r2, [r7, #1076]	; 0x434
 800e546:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800e54a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e54e:	460b      	mov	r3, r1
 800e550:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 800e554:	fb02 f203 	mul.w	r2, r2, r3
 800e558:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800e55c:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 800e560:	e9c4 0100 	strd	r0, r1, [r4]
 800e564:	4601      	mov	r1, r0
 800e566:	fb01 f303 	mul.w	r3, r1, r3
 800e56a:	4413      	add	r3, r2
 800e56c:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 800e570:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 800e574:	fba2 1201 	umull	r1, r2, r2, r1
 800e578:	f8c7 2574 	str.w	r2, [r7, #1396]	; 0x574
 800e57c:	460a      	mov	r2, r1
 800e57e:	f8c7 2570 	str.w	r2, [r7, #1392]	; 0x570
 800e582:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 800e586:	4413      	add	r3, r2
 800e588:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800e58c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800e590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e594:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 800e598:	1851      	adds	r1, r2, r1
 800e59a:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 800e59e:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 800e5a2:	414b      	adcs	r3, r1
 800e5a4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800e5a8:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 800e5ac:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800e5b0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800e5b4:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800e5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	da0a      	bge.n	800e5d6 <arm_softmax_s8+0x1a96>
 800e5c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e5c4:	1851      	adds	r1, r2, r1
 800e5c6:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 800e5ca:	f143 0300 	adc.w	r3, r3, #0
 800e5ce:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800e5d2:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800e5d6:	f04f 0000 	mov.w	r0, #0
 800e5da:	f04f 0100 	mov.w	r1, #0
 800e5de:	0fd0      	lsrs	r0, r2, #31
 800e5e0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e5e4:	17d9      	asrs	r1, r3, #31
 800e5e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e5ea:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e5f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e5f6:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800e5fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e5fe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800e602:	6812      	ldr	r2, [r2, #0]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	429a      	cmp	r2, r3
 800e608:	d10e      	bne.n	800e628 <arm_softmax_s8+0x1ae8>
 800e60a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e60e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e618:	d106      	bne.n	800e628 <arm_softmax_s8+0x1ae8>
        result = Q31_MAX;
 800e61a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e61e:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800e622:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e626:	6013      	str	r3, [r2, #0]
    return result;
 800e628:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e62c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800e630:	681a      	ldr	r2, [r3, #0]
 800e632:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e636:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800e63a:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 800e63c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800e640:	4619      	mov	r1, r3
 800e642:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e646:	f5a3 72ec 	sub.w	r2, r3, #472	; 0x1d8
 800e64a:	1e4b      	subs	r3, r1, #1
 800e64c:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 800e64e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e652:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 800e656:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e65a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 800e664:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e668:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 800e66c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e670:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800e674:	6812      	ldr	r2, [r2, #0]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	429a      	cmp	r2, r3
 800e67a:	dd02      	ble.n	800e682 <arm_softmax_s8+0x1b42>
 800e67c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800e680:	e000      	b.n	800e684 <arm_softmax_s8+0x1b44>
 800e682:	2000      	movs	r0, #0
 800e684:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e688:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 800e68c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e690:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800e694:	6812      	ldr	r2, [r2, #0]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	429a      	cmp	r2, r3
 800e69a:	dd01      	ble.n	800e6a0 <arm_softmax_s8+0x1b60>
 800e69c:	2200      	movs	r2, #0
 800e69e:	e001      	b.n	800e6a4 <arm_softmax_s8+0x1b64>
 800e6a0:	f04f 32ff 	mov.w	r2, #4294967295
 800e6a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e6a8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	ea02 0103 	and.w	r1, r2, r3
 800e6b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e6b6:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 800e6ba:	ea81 0300 	eor.w	r3, r1, r0
 800e6be:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 800e6c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e6c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	425a      	negs	r2, r3
 800e6cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e6d0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	da02      	bge.n	800e6e0 <arm_softmax_s8+0x1ba0>
 800e6da:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800e6de:	e000      	b.n	800e6e2 <arm_softmax_s8+0x1ba2>
 800e6e0:	2000      	movs	r0, #0
 800e6e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e6e6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	425a      	negs	r2, r3
 800e6ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e6f2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4293      	cmp	r3, r2
 800e6fa:	da01      	bge.n	800e700 <arm_softmax_s8+0x1bc0>
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	e001      	b.n	800e704 <arm_softmax_s8+0x1bc4>
 800e700:	f04f 32ff 	mov.w	r2, #4294967295
 800e704:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e708:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	ea02 0103 	and.w	r1, r2, r3
 800e712:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e716:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 800e71a:	ea81 0300 	eor.w	r3, r1, r0
 800e71e:	6013      	str	r3, [r2, #0]
    return result;
 800e720:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e724:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800e728:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800e72a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e72e:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800e732:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e736:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	440b      	add	r3, r1
 800e73e:	6013      	str	r3, [r2, #0]
 800e740:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e744:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 800e748:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e74c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	6013      	str	r3, [r2, #0]
 800e754:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e758:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 800e75c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e760:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800e768:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e76c:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 800e770:	2300      	movs	r3, #0
 800e772:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e774:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e778:	f04f 0300 	mov.w	r3, #0
 800e77c:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 800e780:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800e784:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e788:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	0fdb      	lsrs	r3, r3, #31
 800e790:	b2da      	uxtb	r2, r3
 800e792:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e796:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	0fdb      	lsrs	r3, r3, #31
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	4053      	eors	r3, r2
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d012      	beq.n	800e7ce <arm_softmax_s8+0x1c8e>
        mult = 1 - mult;
 800e7a8:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800e7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b0:	2100      	movs	r1, #0
 800e7b2:	f1d2 0001 	rsbs	r0, r2, #1
 800e7b6:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 800e7ba:	eb61 0303 	sbc.w	r3, r1, r3
 800e7be:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800e7c2:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 800e7c6:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800e7ca:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800e7ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e7d2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	17da      	asrs	r2, r3, #31
 800e7da:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 800e7de:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 800e7e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e7e6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	17da      	asrs	r2, r3, #31
 800e7ee:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 800e7f2:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 800e7f6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800e7fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e7fe:	460b      	mov	r3, r1
 800e800:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 800e804:	fb02 f203 	mul.w	r2, r2, r3
 800e808:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800e80c:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 800e810:	e9c4 0100 	strd	r0, r1, [r4]
 800e814:	4601      	mov	r1, r0
 800e816:	fb01 f303 	mul.w	r3, r1, r3
 800e81a:	4413      	add	r3, r2
 800e81c:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 800e820:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 800e824:	fba2 1201 	umull	r1, r2, r2, r1
 800e828:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 800e82c:	460a      	mov	r2, r1
 800e82e:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 800e832:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 800e836:	4413      	add	r3, r2
 800e838:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800e83c:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 800e848:	1851      	adds	r1, r2, r1
 800e84a:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 800e84e:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 800e852:	414b      	adcs	r3, r1
 800e854:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800e858:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 800e85c:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800e860:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800e864:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800e868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	da0a      	bge.n	800e886 <arm_softmax_s8+0x1d46>
 800e870:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e874:	1851      	adds	r1, r2, r1
 800e876:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 800e87a:	f143 0300 	adc.w	r3, r3, #0
 800e87e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800e882:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e886:	f04f 0000 	mov.w	r0, #0
 800e88a:	f04f 0100 	mov.w	r1, #0
 800e88e:	0fd0      	lsrs	r0, r2, #31
 800e890:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e894:	17d9      	asrs	r1, r3, #31
 800e896:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e89a:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 800e89e:	4603      	mov	r3, r0
 800e8a0:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e8a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e8a6:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 800e8aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e8ae:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e8b2:	6812      	ldr	r2, [r2, #0]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d10e      	bne.n	800e8d8 <arm_softmax_s8+0x1d98>
 800e8ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e8be:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e8c8:	d106      	bne.n	800e8d8 <arm_softmax_s8+0x1d98>
        result = Q31_MAX;
 800e8ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e8ce:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 800e8d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e8d6:	6013      	str	r3, [r2, #0]
    return result;
 800e8d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e8dc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800e8e0:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800e8e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e8e6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	1a99      	subs	r1, r3, r2
 800e8ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e8f2:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800e8f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e8fa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	6013      	str	r3, [r2, #0]
 800e902:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e906:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800e90a:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 800e90c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e910:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 800e914:	2300      	movs	r3, #0
 800e916:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e918:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e91c:	f04f 0300 	mov.w	r3, #0
 800e920:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 800e924:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800e928:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e92c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	0fdb      	lsrs	r3, r3, #31
 800e934:	b2da      	uxtb	r2, r3
 800e936:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e93a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	0fdb      	lsrs	r3, r3, #31
 800e942:	b2db      	uxtb	r3, r3
 800e944:	4053      	eors	r3, r2
 800e946:	b2db      	uxtb	r3, r3
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d012      	beq.n	800e972 <arm_softmax_s8+0x1e32>
        mult = 1 - mult;
 800e94c:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800e950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e954:	2100      	movs	r1, #0
 800e956:	f1d2 0001 	rsbs	r0, r2, #1
 800e95a:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 800e95e:	eb61 0303 	sbc.w	r3, r1, r3
 800e962:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800e966:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 800e96a:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 800e96e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800e972:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e976:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	17da      	asrs	r2, r3, #31
 800e97e:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 800e982:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
 800e986:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e98a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	17da      	asrs	r2, r3, #31
 800e992:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 800e996:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 800e99a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e99e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 800e9a8:	fb02 f203 	mul.w	r2, r2, r3
 800e9ac:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800e9b0:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 800e9b4:	e9c4 0100 	strd	r0, r1, [r4]
 800e9b8:	4601      	mov	r1, r0
 800e9ba:	fb01 f303 	mul.w	r3, r1, r3
 800e9be:	4413      	add	r3, r2
 800e9c0:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 800e9c4:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 800e9c8:	fba2 1201 	umull	r1, r2, r2, r1
 800e9cc:	f8c7 2564 	str.w	r2, [r7, #1380]	; 0x564
 800e9d0:	460a      	mov	r2, r1
 800e9d2:	f8c7 2560 	str.w	r2, [r7, #1376]	; 0x560
 800e9d6:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 800e9da:	4413      	add	r3, r2
 800e9dc:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 800e9e0:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800e9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e8:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 800e9ec:	1851      	adds	r1, r2, r1
 800e9ee:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 800e9f2:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 800e9f6:	414b      	adcs	r3, r1
 800e9f8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800e9fc:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 800ea00:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 800ea04:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800ea08:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800ea0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	da0a      	bge.n	800ea2a <arm_softmax_s8+0x1eea>
 800ea14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ea18:	1851      	adds	r1, r2, r1
 800ea1a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 800ea1e:	f143 0300 	adc.w	r3, r3, #0
 800ea22:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800ea26:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800ea2a:	f04f 0000 	mov.w	r0, #0
 800ea2e:	f04f 0100 	mov.w	r1, #0
 800ea32:	0fd0      	lsrs	r0, r2, #31
 800ea34:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800ea38:	17d9      	asrs	r1, r3, #31
 800ea3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ea3e:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 800ea42:	4603      	mov	r3, r0
 800ea44:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ea46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ea4a:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800ea4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ea52:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800ea56:	6812      	ldr	r2, [r2, #0]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d10e      	bne.n	800ea7c <arm_softmax_s8+0x1f3c>
 800ea5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ea62:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ea6c:	d106      	bne.n	800ea7c <arm_softmax_s8+0x1f3c>
        result = Q31_MAX;
 800ea6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ea72:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 800ea76:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ea7a:	6013      	str	r3, [r2, #0]
    return result;
 800ea7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ea80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800ea84:	681a      	ldr	r2, [r3, #0]
 800ea86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ea8a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800ea8e:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 800ea90:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800ea94:	4619      	mov	r1, r3
 800ea96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ea9a:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 800ea9e:	1e4b      	subs	r3, r1, #1
 800eaa0:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 800eaa2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eaa6:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 800eaaa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eaae:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 800eab8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eabc:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 800eac0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eac4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800eac8:	6812      	ldr	r2, [r2, #0]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	429a      	cmp	r2, r3
 800eace:	dd02      	ble.n	800ead6 <arm_softmax_s8+0x1f96>
 800ead0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800ead4:	e000      	b.n	800ead8 <arm_softmax_s8+0x1f98>
 800ead6:	2000      	movs	r0, #0
 800ead8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eadc:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 800eae0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eae4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800eae8:	6812      	ldr	r2, [r2, #0]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	429a      	cmp	r2, r3
 800eaee:	dd01      	ble.n	800eaf4 <arm_softmax_s8+0x1fb4>
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	e001      	b.n	800eaf8 <arm_softmax_s8+0x1fb8>
 800eaf4:	f04f 32ff 	mov.w	r2, #4294967295
 800eaf8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eafc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	ea02 0103 	and.w	r1, r2, r3
 800eb06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb0a:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 800eb0e:	ea81 0300 	eor.w	r3, r1, r0
 800eb12:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 800eb14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb18:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	425a      	negs	r2, r3
 800eb20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb24:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	da02      	bge.n	800eb34 <arm_softmax_s8+0x1ff4>
 800eb2e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800eb32:	e000      	b.n	800eb36 <arm_softmax_s8+0x1ff6>
 800eb34:	2000      	movs	r0, #0
 800eb36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb3a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	425a      	negs	r2, r3
 800eb42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb46:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	da01      	bge.n	800eb54 <arm_softmax_s8+0x2014>
 800eb50:	2200      	movs	r2, #0
 800eb52:	e001      	b.n	800eb58 <arm_softmax_s8+0x2018>
 800eb54:	f04f 32ff 	mov.w	r2, #4294967295
 800eb58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb5c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	ea02 0103 	and.w	r1, r2, r3
 800eb66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb6a:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 800eb6e:	ea81 0300 	eor.w	r3, r1, r0
 800eb72:	6013      	str	r3, [r2, #0]
    return result;
 800eb74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb78:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800eb7c:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800eb7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb82:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800eb86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb8a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	440b      	add	r3, r1
 800eb92:	6013      	str	r3, [r2, #0]
 800eb94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb98:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 800eb9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eba0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	6013      	str	r3, [r2, #0]
 800eba8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ebac:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 800ebb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ebb4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800ebbc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ebc0:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800ebc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ebcc:	f04f 0300 	mov.w	r3, #0
 800ebd0:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 800ebd4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800ebd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ebdc:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	0fdb      	lsrs	r3, r3, #31
 800ebe4:	b2da      	uxtb	r2, r3
 800ebe6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ebea:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	0fdb      	lsrs	r3, r3, #31
 800ebf2:	b2db      	uxtb	r3, r3
 800ebf4:	4053      	eors	r3, r2
 800ebf6:	b2db      	uxtb	r3, r3
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d012      	beq.n	800ec22 <arm_softmax_s8+0x20e2>
        mult = 1 - mult;
 800ebfc:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800ec00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec04:	2100      	movs	r1, #0
 800ec06:	f1d2 0001 	rsbs	r0, r2, #1
 800ec0a:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 800ec0e:	eb61 0303 	sbc.w	r3, r1, r3
 800ec12:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800ec16:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800ec1a:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 800ec1e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ec22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec26:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	17da      	asrs	r2, r3, #31
 800ec2e:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 800ec32:	f8c7 240c 	str.w	r2, [r7, #1036]	; 0x40c
 800ec36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec3a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	17da      	asrs	r2, r3, #31
 800ec42:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 800ec46:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 800ec4a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800ec4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ec52:	460b      	mov	r3, r1
 800ec54:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 800ec58:	fb02 f203 	mul.w	r2, r2, r3
 800ec5c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800ec60:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 800ec64:	e9c4 0100 	strd	r0, r1, [r4]
 800ec68:	4601      	mov	r1, r0
 800ec6a:	fb01 f303 	mul.w	r3, r1, r3
 800ec6e:	4413      	add	r3, r2
 800ec70:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 800ec74:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 800ec78:	fba2 1201 	umull	r1, r2, r2, r1
 800ec7c:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 800ec80:	460a      	mov	r2, r1
 800ec82:	f8c7 2558 	str.w	r2, [r7, #1368]	; 0x558
 800ec86:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 800ec8a:	4413      	add	r3, r2
 800ec8c:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 800ec90:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800ec94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec98:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 800ec9c:	1851      	adds	r1, r2, r1
 800ec9e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 800eca2:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 800eca6:	414b      	adcs	r3, r1
 800eca8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800ecac:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800ecb0:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 800ecb4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800ecb8:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800ecbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	da0a      	bge.n	800ecda <arm_softmax_s8+0x219a>
 800ecc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ecc8:	1851      	adds	r1, r2, r1
 800ecca:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 800ecce:	f143 0300 	adc.w	r3, r3, #0
 800ecd2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800ecd6:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800ecda:	f04f 0000 	mov.w	r0, #0
 800ecde:	f04f 0100 	mov.w	r1, #0
 800ece2:	0fd0      	lsrs	r0, r2, #31
 800ece4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800ece8:	17d9      	asrs	r1, r3, #31
 800ecea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ecee:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ecf6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ecfa:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 800ecfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed02:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800ed06:	6812      	ldr	r2, [r2, #0]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d10e      	bne.n	800ed2c <arm_softmax_s8+0x21ec>
 800ed0e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed12:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ed1c:	d106      	bne.n	800ed2c <arm_softmax_s8+0x21ec>
        result = Q31_MAX;
 800ed1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed22:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 800ed26:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ed2a:	6013      	str	r3, [r2, #0]
    return result;
 800ed2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed30:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800ed34:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800ed36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed3a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	1a99      	subs	r1, r3, r2
 800ed42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed46:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 800ed4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed4e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	6013      	str	r3, [r2, #0]
 800ed56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed5a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800ed5e:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 800ed60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed64:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 800ed68:	2300      	movs	r3, #0
 800ed6a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800ed6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ed70:	f04f 0300 	mov.w	r3, #0
 800ed74:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 800ed78:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800ed7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed80:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	0fdb      	lsrs	r3, r3, #31
 800ed88:	b2da      	uxtb	r2, r3
 800ed8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed8e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	0fdb      	lsrs	r3, r3, #31
 800ed96:	b2db      	uxtb	r3, r3
 800ed98:	4053      	eors	r3, r2
 800ed9a:	b2db      	uxtb	r3, r3
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d012      	beq.n	800edc6 <arm_softmax_s8+0x2286>
        mult = 1 - mult;
 800eda0:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800eda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda8:	2100      	movs	r1, #0
 800edaa:	f1d2 0001 	rsbs	r0, r2, #1
 800edae:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
 800edb2:	eb61 0303 	sbc.w	r3, r1, r3
 800edb6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800edba:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 800edbe:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 800edc2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800edc6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800edca:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	17da      	asrs	r2, r3, #31
 800edd2:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 800edd6:	f8c7 23fc 	str.w	r2, [r7, #1020]	; 0x3fc
 800edda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800edde:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	17da      	asrs	r2, r3, #31
 800ede6:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 800edea:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 800edee:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 800edf2:	460b      	mov	r3, r1
 800edf4:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 800edf8:	fb02 f203 	mul.w	r2, r2, r3
 800edfc:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800ee00:	e9c7 01fe 	strd	r0, r1, [r7, #1016]	; 0x3f8
 800ee04:	4601      	mov	r1, r0
 800ee06:	fb01 f303 	mul.w	r3, r1, r3
 800ee0a:	4413      	add	r3, r2
 800ee0c:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 800ee10:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 800ee14:	fba2 1201 	umull	r1, r2, r2, r1
 800ee18:	f8c7 2554 	str.w	r2, [r7, #1364]	; 0x554
 800ee1c:	460a      	mov	r2, r1
 800ee1e:	f8c7 2550 	str.w	r2, [r7, #1360]	; 0x550
 800ee22:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 800ee26:	4413      	add	r3, r2
 800ee28:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 800ee2c:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800ee30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee34:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 800ee38:	1851      	adds	r1, r2, r1
 800ee3a:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 800ee3e:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 800ee42:	414b      	adcs	r3, r1
 800ee44:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800ee48:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 800ee4c:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 800ee50:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800ee54:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800ee58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	da0a      	bge.n	800ee76 <arm_softmax_s8+0x2336>
 800ee60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee64:	1851      	adds	r1, r2, r1
 800ee66:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 800ee6a:	f143 0300 	adc.w	r3, r3, #0
 800ee6e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800ee72:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800ee76:	f04f 0000 	mov.w	r0, #0
 800ee7a:	f04f 0100 	mov.w	r1, #0
 800ee7e:	0fd0      	lsrs	r0, r2, #31
 800ee80:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800ee84:	17d9      	asrs	r1, r3, #31
 800ee86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee8a:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 800ee8e:	4603      	mov	r3, r0
 800ee90:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ee92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee96:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 800ee9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee9e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800eea2:	6812      	ldr	r2, [r2, #0]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d10e      	bne.n	800eec8 <arm_softmax_s8+0x2388>
 800eeaa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eeae:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eeb8:	d106      	bne.n	800eec8 <arm_softmax_s8+0x2388>
        result = Q31_MAX;
 800eeba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eebe:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 800eec2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800eec6:	6013      	str	r3, [r2, #0]
    return result;
 800eec8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eecc:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800eed0:	681a      	ldr	r2, [r3, #0]
 800eed2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eed6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800eeda:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 800eedc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800eee0:	4619      	mov	r1, r3
 800eee2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eee6:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800eeea:	1e4b      	subs	r3, r1, #1
 800eeec:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 800eeee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eef2:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 800eef6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eefa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	009b      	lsls	r3, r3, #2
 800ef02:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 800ef04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ef08:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 800ef0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ef10:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800ef14:	6812      	ldr	r2, [r2, #0]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	dd02      	ble.n	800ef22 <arm_softmax_s8+0x23e2>
 800ef1c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800ef20:	e000      	b.n	800ef24 <arm_softmax_s8+0x23e4>
 800ef22:	2000      	movs	r0, #0
 800ef24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ef28:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 800ef2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ef30:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800ef34:	6812      	ldr	r2, [r2, #0]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	dd01      	ble.n	800ef40 <arm_softmax_s8+0x2400>
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	e001      	b.n	800ef44 <arm_softmax_s8+0x2404>
 800ef40:	f04f 32ff 	mov.w	r2, #4294967295
 800ef44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ef48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	ea02 0103 	and.w	r1, r2, r3
 800ef52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ef56:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 800ef5a:	ea81 0300 	eor.w	r3, r1, r0
 800ef5e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 800ef60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ef64:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	425a      	negs	r2, r3
 800ef6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ef70:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	4293      	cmp	r3, r2
 800ef78:	da02      	bge.n	800ef80 <arm_softmax_s8+0x2440>
 800ef7a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800ef7e:	e000      	b.n	800ef82 <arm_softmax_s8+0x2442>
 800ef80:	2000      	movs	r0, #0
 800ef82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ef86:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	425a      	negs	r2, r3
 800ef8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ef92:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	da05      	bge.n	800efa8 <arm_softmax_s8+0x2468>
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	e005      	b.n	800efac <arm_softmax_s8+0x246c>
 800efa0:	c3c3c3c4 	.word	0xc3c3c3c4
 800efa4:	ffffffff 	.word	0xffffffff
 800efa8:	f04f 32ff 	mov.w	r2, #4294967295
 800efac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800efb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	ea02 0103 	and.w	r1, r2, r3
 800efba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800efbe:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 800efc2:	ea81 0300 	eor.w	r3, r1, r0
 800efc6:	6013      	str	r3, [r2, #0]
    return result;
 800efc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800efcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800efd0:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800efd2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800efd6:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800efda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800efde:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	440b      	add	r3, r1
 800efe6:	6013      	str	r3, [r2, #0]
 800efe8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800efec:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 800eff0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eff4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 800effc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f000:	4619      	mov	r1, r3
 800f002:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f006:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 800f00a:	1e4b      	subs	r3, r1, #1
 800f00c:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 800f00e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f012:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 800f016:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f01a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	005b      	lsls	r3, r3, #1
 800f022:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 800f024:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f028:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 800f02c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f030:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800f034:	6812      	ldr	r2, [r2, #0]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	429a      	cmp	r2, r3
 800f03a:	dd02      	ble.n	800f042 <arm_softmax_s8+0x2502>
 800f03c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800f040:	e000      	b.n	800f044 <arm_softmax_s8+0x2504>
 800f042:	2000      	movs	r0, #0
 800f044:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f048:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 800f04c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f050:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800f054:	6812      	ldr	r2, [r2, #0]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	429a      	cmp	r2, r3
 800f05a:	dd01      	ble.n	800f060 <arm_softmax_s8+0x2520>
 800f05c:	2200      	movs	r2, #0
 800f05e:	e001      	b.n	800f064 <arm_softmax_s8+0x2524>
 800f060:	f04f 32ff 	mov.w	r2, #4294967295
 800f064:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f068:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	ea02 0103 	and.w	r1, r2, r3
 800f072:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f076:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 800f07a:	ea81 0300 	eor.w	r3, r1, r0
 800f07e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 800f080:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f084:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	425a      	negs	r2, r3
 800f08c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f090:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	4293      	cmp	r3, r2
 800f098:	da02      	bge.n	800f0a0 <arm_softmax_s8+0x2560>
 800f09a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800f09e:	e000      	b.n	800f0a2 <arm_softmax_s8+0x2562>
 800f0a0:	2000      	movs	r0, #0
 800f0a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f0a6:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	425a      	negs	r2, r3
 800f0ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f0b2:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	da01      	bge.n	800f0c0 <arm_softmax_s8+0x2580>
 800f0bc:	2200      	movs	r2, #0
 800f0be:	e001      	b.n	800f0c4 <arm_softmax_s8+0x2584>
 800f0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800f0c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f0c8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	ea02 0103 	and.w	r1, r2, r3
 800f0d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f0d6:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 800f0da:	ea81 0300 	eor.w	r3, r1, r0
 800f0de:	6013      	str	r3, [r2, #0]
    return result;
 800f0e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f0e4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f0e8:	681b      	ldr	r3, [r3, #0]

    return MUL_POW2(x, 1);
 800f0ea:	bf00      	nop
 800f0ec:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984

        for (col = 0; col < row_size; ++col)
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800f0f6:	f001 bd85 	b.w	8010c04 <arm_softmax_s8+0x40c4>
        {
            diff = input[col] - max;
 800f0fa:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800f0fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f102:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4413      	add	r3, r2
 800f10a:	f993 3000 	ldrsb.w	r3, [r3]
 800f10e:	461a      	mov	r2, r3
 800f110:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 800f114:	1ad3      	subs	r3, r2, r3
 800f116:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 800f11a:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800f11e:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 800f122:	429a      	cmp	r2, r3
 800f124:	f2c1 8562 	blt.w	8010bec <arm_softmax_s8+0x40ac>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 800f128:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800f12c:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 800f130:	fb03 f202 	mul.w	r2, r3, r2
 800f134:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f138:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800f13c:	601a      	str	r2, [r3, #0]
 800f13e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f142:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 800f146:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f14a:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f152:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f156:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 800f15a:	2300      	movs	r3, #0
 800f15c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f15e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f162:	f04f 0300 	mov.w	r3, #0
 800f166:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 800f16a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f16e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f172:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	0fdb      	lsrs	r3, r3, #31
 800f17a:	b2da      	uxtb	r2, r3
 800f17c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f180:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	0fdb      	lsrs	r3, r3, #31
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	4053      	eors	r3, r2
 800f18c:	b2db      	uxtb	r3, r3
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d012      	beq.n	800f1b8 <arm_softmax_s8+0x2678>
        mult = 1 - mult;
 800f192:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 800f196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19a:	2100      	movs	r1, #0
 800f19c:	f1d2 0001 	rsbs	r0, r2, #1
 800f1a0:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 800f1a4:	eb61 0303 	sbc.w	r3, r1, r3
 800f1a8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800f1ac:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 800f1b0:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 800f1b4:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f1b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f1bc:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	17da      	asrs	r2, r3, #31
 800f1c4:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 800f1c8:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 800f1cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f1d0:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	17da      	asrs	r2, r3, #31
 800f1d8:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 800f1dc:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 800f1e0:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 800f1e4:	460b      	mov	r3, r1
 800f1e6:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 800f1ea:	fb02 f203 	mul.w	r2, r2, r3
 800f1ee:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 800f1f2:	e9c7 01d8 	strd	r0, r1, [r7, #864]	; 0x360
 800f1f6:	4601      	mov	r1, r0
 800f1f8:	fb01 f303 	mul.w	r3, r1, r3
 800f1fc:	4413      	add	r3, r2
 800f1fe:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 800f202:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 800f206:	fba2 1201 	umull	r1, r2, r2, r1
 800f20a:	f8c7 24e4 	str.w	r2, [r7, #1252]	; 0x4e4
 800f20e:	460a      	mov	r2, r1
 800f210:	f8c7 24e0 	str.w	r2, [r7, #1248]	; 0x4e0
 800f214:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 800f218:	4413      	add	r3, r2
 800f21a:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 800f21e:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 800f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f226:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 800f22a:	1851      	adds	r1, r2, r1
 800f22c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800f230:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 800f234:	414b      	adcs	r3, r1
 800f236:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800f23a:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800f23e:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 800f242:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f246:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 800f24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	da0a      	bge.n	800f268 <arm_softmax_s8+0x2728>
 800f252:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f256:	1851      	adds	r1, r2, r1
 800f258:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 800f25c:	f143 0300 	adc.w	r3, r3, #0
 800f260:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800f264:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800f268:	f04f 0000 	mov.w	r0, #0
 800f26c:	f04f 0100 	mov.w	r1, #0
 800f270:	0fd0      	lsrs	r0, r2, #31
 800f272:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f276:	17d9      	asrs	r1, r3, #31
 800f278:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f27c:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 800f280:	4603      	mov	r3, r0
 800f282:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f284:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f288:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 800f28c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f290:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800f294:	6812      	ldr	r2, [r2, #0]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	429a      	cmp	r2, r3
 800f29a:	d10e      	bne.n	800f2ba <arm_softmax_s8+0x277a>
 800f29c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2a0:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f2aa:	d106      	bne.n	800f2ba <arm_softmax_s8+0x277a>
        result = Q31_MAX;
 800f2ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2b0:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 800f2b4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f2b8:	6013      	str	r3, [r2, #0]
    return result;
 800f2ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2be:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2c8:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800f2cc:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 800f2ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2d2:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 800f2da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2de:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 800f2e2:	2318      	movs	r3, #24
 800f2e4:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 800f2e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2ea:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	fa02 f303 	lsl.w	r3, r2, r3
 800f2f6:	1e5a      	subs	r2, r3, #1
 800f2f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2fc:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	ea02 0003 	and.w	r0, r2, r3
 800f306:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f30a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800f30e:	2201      	movs	r2, #1
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	fa02 f103 	lsl.w	r1, r2, r3
 800f316:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f31a:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 800f31e:	1a43      	subs	r3, r0, r1
 800f320:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 800f322:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f326:	f5a3 7127 	sub.w	r1, r3, #668	; 0x29c
 800f32a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f32e:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 800f332:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f336:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800f33a:	6812      	ldr	r2, [r2, #0]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	1ad3      	subs	r3, r2, r3
 800f340:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 800f342:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f346:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	0159      	lsls	r1, r3, #5
 800f34e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f352:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 800f356:	f101 5380 	add.w	r3, r1, #268435456	; 0x10000000
 800f35a:	6013      	str	r3, [r2, #0]
 800f35c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f360:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 800f364:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f368:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	6013      	str	r3, [r2, #0]
 800f370:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f374:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 800f378:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f37c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f384:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f388:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 800f38c:	2300      	movs	r3, #0
 800f38e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f394:	f04f 0300 	mov.w	r3, #0
 800f398:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 800f39c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f3a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f3a4:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	0fdb      	lsrs	r3, r3, #31
 800f3ac:	b2da      	uxtb	r2, r3
 800f3ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f3b2:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	0fdb      	lsrs	r3, r3, #31
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	4053      	eors	r3, r2
 800f3be:	b2db      	uxtb	r3, r3
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d012      	beq.n	800f3ea <arm_softmax_s8+0x28aa>
        mult = 1 - mult;
 800f3c4:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800f3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3cc:	2100      	movs	r1, #0
 800f3ce:	f1d2 0001 	rsbs	r0, r2, #1
 800f3d2:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 800f3d6:	eb61 0303 	sbc.w	r3, r1, r3
 800f3da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800f3de:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800f3e2:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800f3e6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f3ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f3ee:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	17da      	asrs	r2, r3, #31
 800f3f6:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 800f3fa:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 800f3fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f402:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	17da      	asrs	r2, r3, #31
 800f40a:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 800f40e:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 800f412:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 800f416:	460b      	mov	r3, r1
 800f418:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 800f41c:	fb02 f203 	mul.w	r2, r2, r3
 800f420:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 800f424:	e9c7 01f6 	strd	r0, r1, [r7, #984]	; 0x3d8
 800f428:	4601      	mov	r1, r0
 800f42a:	fb01 f303 	mul.w	r3, r1, r3
 800f42e:	4413      	add	r3, r2
 800f430:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 800f434:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 800f438:	fba2 1201 	umull	r1, r2, r2, r1
 800f43c:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 800f440:	460a      	mov	r2, r1
 800f442:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 800f446:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800f44a:	4413      	add	r3, r2
 800f44c:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800f450:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800f454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f458:	f8d7 1540 	ldr.w	r1, [r7, #1344]	; 0x540
 800f45c:	1851      	adds	r1, r2, r1
 800f45e:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 800f462:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 800f466:	414b      	adcs	r3, r1
 800f468:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800f46c:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800f470:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800f474:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f478:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800f47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f480:	2b00      	cmp	r3, #0
 800f482:	da0a      	bge.n	800f49a <arm_softmax_s8+0x295a>
 800f484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f488:	1851      	adds	r1, r2, r1
 800f48a:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 800f48e:	f143 0300 	adc.w	r3, r3, #0
 800f492:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800f496:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800f49a:	f04f 0000 	mov.w	r0, #0
 800f49e:	f04f 0100 	mov.w	r1, #0
 800f4a2:	0fd0      	lsrs	r0, r2, #31
 800f4a4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f4a8:	17d9      	asrs	r1, r3, #31
 800f4aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4ae:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f4b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4ba:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 800f4be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4c2:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800f4c6:	6812      	ldr	r2, [r2, #0]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d10e      	bne.n	800f4ec <arm_softmax_s8+0x29ac>
 800f4ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4d2:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f4dc:	d106      	bne.n	800f4ec <arm_softmax_s8+0x29ac>
        result = Q31_MAX;
 800f4de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4e2:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 800f4e6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f4ea:	6013      	str	r3, [r2, #0]
    return result;
 800f4ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4f0:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800f4f4:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 800f4f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4fa:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800f4fe:	601a      	str	r2, [r3, #0]
 800f500:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f504:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 800f508:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f50c:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	6013      	str	r3, [r2, #0]
 800f514:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f518:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 800f51c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f520:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f528:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f52c:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 800f530:	2300      	movs	r3, #0
 800f532:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f534:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f538:	f04f 0300 	mov.w	r3, #0
 800f53c:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 800f540:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f544:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f548:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	0fdb      	lsrs	r3, r3, #31
 800f550:	b2da      	uxtb	r2, r3
 800f552:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f556:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	0fdb      	lsrs	r3, r3, #31
 800f55e:	b2db      	uxtb	r3, r3
 800f560:	4053      	eors	r3, r2
 800f562:	b2db      	uxtb	r3, r3
 800f564:	2b00      	cmp	r3, #0
 800f566:	d012      	beq.n	800f58e <arm_softmax_s8+0x2a4e>
        mult = 1 - mult;
 800f568:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800f56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f570:	2100      	movs	r1, #0
 800f572:	f1d2 0001 	rsbs	r0, r2, #1
 800f576:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 800f57a:	eb61 0303 	sbc.w	r3, r1, r3
 800f57e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800f582:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800f586:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 800f58a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f58e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f592:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	17da      	asrs	r2, r3, #31
 800f59a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 800f59e:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 800f5a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f5a6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	17da      	asrs	r2, r3, #31
 800f5ae:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 800f5b2:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 800f5b6:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 800f5ba:	460b      	mov	r3, r1
 800f5bc:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 800f5c0:	fb02 f203 	mul.w	r2, r2, r3
 800f5c4:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800f5c8:	e9c7 01f2 	strd	r0, r1, [r7, #968]	; 0x3c8
 800f5cc:	4601      	mov	r1, r0
 800f5ce:	fb01 f303 	mul.w	r3, r1, r3
 800f5d2:	4413      	add	r3, r2
 800f5d4:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800f5d8:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 800f5dc:	fba2 1201 	umull	r1, r2, r2, r1
 800f5e0:	f8c7 253c 	str.w	r2, [r7, #1340]	; 0x53c
 800f5e4:	460a      	mov	r2, r1
 800f5e6:	f8c7 2538 	str.w	r2, [r7, #1336]	; 0x538
 800f5ea:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 800f5ee:	4413      	add	r3, r2
 800f5f0:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800f5f4:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800f5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fc:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 800f600:	1851      	adds	r1, r2, r1
 800f602:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800f606:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 800f60a:	414b      	adcs	r3, r1
 800f60c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800f610:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800f614:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 800f618:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f61c:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800f620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f624:	2b00      	cmp	r3, #0
 800f626:	da0a      	bge.n	800f63e <arm_softmax_s8+0x2afe>
 800f628:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f62c:	1851      	adds	r1, r2, r1
 800f62e:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800f632:	f143 0300 	adc.w	r3, r3, #0
 800f636:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f63a:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800f63e:	f04f 0000 	mov.w	r0, #0
 800f642:	f04f 0100 	mov.w	r1, #0
 800f646:	0fd0      	lsrs	r0, r2, #31
 800f648:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f64c:	17d9      	asrs	r1, r3, #31
 800f64e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f652:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 800f656:	4603      	mov	r3, r0
 800f658:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f65a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f65e:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 800f662:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f666:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800f66a:	6812      	ldr	r2, [r2, #0]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	429a      	cmp	r2, r3
 800f670:	d10e      	bne.n	800f690 <arm_softmax_s8+0x2b50>
 800f672:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f676:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f680:	d106      	bne.n	800f690 <arm_softmax_s8+0x2b50>
        result = Q31_MAX;
 800f682:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f686:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 800f68a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f68e:	6013      	str	r3, [r2, #0]
    return result;
 800f690:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f694:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f69e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800f6a2:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800f6a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6a8:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f6b0:	2104      	movs	r1, #4
 800f6b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6b6:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 800f6ba:	1e4b      	subs	r3, r1, #1
 800f6bc:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800f6be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6c2:	f5a3 7138 	sub.w	r1, r3, #736	; 0x2e0
 800f6c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6ca:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 800f6ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6d2:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800f6d6:	6812      	ldr	r2, [r2, #0]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4013      	ands	r3, r2
 800f6dc:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800f6de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6e2:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 800f6e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6ea:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	109b      	asrs	r3, r3, #2
 800f6f2:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 800f6f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6f8:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 800f6fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f700:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	105b      	asrs	r3, r3, #1
 800f708:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800f70a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f70e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	2b00      	cmp	r3, #0
 800f716:	da0a      	bge.n	800f72e <arm_softmax_s8+0x2bee>
        threshold++;
 800f718:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f71c:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 800f720:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f724:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	3301      	adds	r3, #1
 800f72c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800f72e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f732:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 800f736:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f73a:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 800f73e:	6812      	ldr	r2, [r2, #0]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	429a      	cmp	r2, r3
 800f744:	dd0a      	ble.n	800f75c <arm_softmax_s8+0x2c1c>
        result++;
 800f746:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f74a:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 800f74e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f752:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	3301      	adds	r3, #1
 800f75a:	6013      	str	r3, [r2, #0]
    return result;
 800f75c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f760:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800f764:	681c      	ldr	r4, [r3, #0]
 800f766:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f76a:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 800f76e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f772:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	6013      	str	r3, [r2, #0]
 800f77a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f77e:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 800f782:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f786:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f78e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f792:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 800f796:	2300      	movs	r3, #0
 800f798:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f79a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f79e:	f04f 0300 	mov.w	r3, #0
 800f7a2:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 800f7a6:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f7aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f7ae:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	0fdb      	lsrs	r3, r3, #31
 800f7b6:	b2da      	uxtb	r2, r3
 800f7b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f7bc:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	0fdb      	lsrs	r3, r3, #31
 800f7c4:	b2db      	uxtb	r3, r3
 800f7c6:	4053      	eors	r3, r2
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d012      	beq.n	800f7f4 <arm_softmax_s8+0x2cb4>
        mult = 1 - mult;
 800f7ce:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800f7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d6:	2100      	movs	r1, #0
 800f7d8:	f1d2 0001 	rsbs	r0, r2, #1
 800f7dc:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 800f7e0:	eb61 0303 	sbc.w	r3, r1, r3
 800f7e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f7e8:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800f7ec:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 800f7f0:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 800f7f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f7f8:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	17da      	asrs	r2, r3, #31
 800f800:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 800f804:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 800f808:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f80c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	17da      	asrs	r2, r3, #31
 800f814:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 800f818:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 800f81c:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 800f820:	460b      	mov	r3, r1
 800f822:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 800f826:	fb02 f203 	mul.w	r2, r2, r3
 800f82a:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800f82e:	e9c7 01ee 	strd	r0, r1, [r7, #952]	; 0x3b8
 800f832:	4601      	mov	r1, r0
 800f834:	fb01 f303 	mul.w	r3, r1, r3
 800f838:	4413      	add	r3, r2
 800f83a:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 800f83e:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 800f842:	fba2 1201 	umull	r1, r2, r2, r1
 800f846:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
 800f84a:	460a      	mov	r2, r1
 800f84c:	f8c7 2530 	str.w	r2, [r7, #1328]	; 0x530
 800f850:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 800f854:	4413      	add	r3, r2
 800f856:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 800f85a:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800f85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f862:	f8d7 1530 	ldr.w	r1, [r7, #1328]	; 0x530
 800f866:	1851      	adds	r1, r2, r1
 800f868:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800f86c:	f8d7 1534 	ldr.w	r1, [r7, #1332]	; 0x534
 800f870:	414b      	adcs	r3, r1
 800f872:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f876:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800f87a:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 800f87e:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 800f882:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800f886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	da0a      	bge.n	800f8a4 <arm_softmax_s8+0x2d64>
 800f88e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f892:	1851      	adds	r1, r2, r1
 800f894:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800f898:	f143 0300 	adc.w	r3, r3, #0
 800f89c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f8a0:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800f8a4:	f04f 0000 	mov.w	r0, #0
 800f8a8:	f04f 0100 	mov.w	r1, #0
 800f8ac:	0fd0      	lsrs	r0, r2, #31
 800f8ae:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f8b2:	17d9      	asrs	r1, r3, #31
 800f8b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8b8:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 800f8bc:	4603      	mov	r3, r0
 800f8be:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f8c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8c4:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 800f8c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8cc:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800f8d0:	6812      	ldr	r2, [r2, #0]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d10e      	bne.n	800f8f6 <arm_softmax_s8+0x2db6>
 800f8d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8dc:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f8e6:	d106      	bne.n	800f8f6 <arm_softmax_s8+0x2db6>
        result = Q31_MAX;
 800f8e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8ec:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 800f8f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f8f4:	6013      	str	r3, [r2, #0]
    return result;
 800f8f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8fa:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800f8fe:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800f900:	18e2      	adds	r2, r4, r3
 800f902:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f906:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800f90a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800f90c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f910:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 800f914:	2300      	movs	r3, #0
 800f916:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f918:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f91c:	f04f 0300 	mov.w	r3, #0
 800f920:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 800f924:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f928:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f92c:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	0fdb      	lsrs	r3, r3, #31
 800f934:	b2da      	uxtb	r2, r3
 800f936:	2300      	movs	r3, #0
 800f938:	4053      	eors	r3, r2
 800f93a:	b2db      	uxtb	r3, r3
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d012      	beq.n	800f966 <arm_softmax_s8+0x2e26>
        mult = 1 - mult;
 800f940:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800f944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f948:	2100      	movs	r1, #0
 800f94a:	f1d2 0001 	rsbs	r0, r2, #1
 800f94e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 800f952:	eb61 0303 	sbc.w	r3, r1, r3
 800f956:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f95a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800f95e:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800f962:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f966:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f96a:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	17da      	asrs	r2, r3, #31
 800f972:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 800f976:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 800f97a:	a3c9      	add	r3, pc, #804	; (adr r3, 800fca0 <arm_softmax_s8+0x3160>)
 800f97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f980:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 800f984:	fb02 f001 	mul.w	r0, r2, r1
 800f988:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 800f98c:	fb01 f103 	mul.w	r1, r1, r3
 800f990:	4401      	add	r1, r0
 800f992:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 800f996:	fba0 2302 	umull	r2, r3, r0, r2
 800f99a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 800f99e:	4613      	mov	r3, r2
 800f9a0:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 800f9a4:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800f9a8:	18cb      	adds	r3, r1, r3
 800f9aa:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 800f9ae:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800f9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b6:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 800f9ba:	1851      	adds	r1, r2, r1
 800f9bc:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 800f9c0:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 800f9c4:	414b      	adcs	r3, r1
 800f9c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f9ca:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800f9ce:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800f9d2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f9d6:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800f9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	da0a      	bge.n	800f9f8 <arm_softmax_s8+0x2eb8>
 800f9e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f9e6:	1851      	adds	r1, r2, r1
 800f9e8:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800f9ec:	f143 0300 	adc.w	r3, r3, #0
 800f9f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f9f4:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800f9f8:	f04f 0000 	mov.w	r0, #0
 800f9fc:	f04f 0100 	mov.w	r1, #0
 800fa00:	0fd0      	lsrs	r0, r2, #31
 800fa02:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800fa06:	17d9      	asrs	r1, r3, #31
 800fa08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa0c:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 800fa10:	4603      	mov	r3, r0
 800fa12:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800fa14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa18:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800fa1c:	681a      	ldr	r2, [r3, #0]
 800fa1e:	4b9e      	ldr	r3, [pc, #632]	; (800fc98 <arm_softmax_s8+0x3158>)
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d10e      	bne.n	800fa42 <arm_softmax_s8+0x2f02>
 800fa24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa28:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fa32:	d106      	bne.n	800fa42 <arm_softmax_s8+0x2f02>
        result = Q31_MAX;
 800fa34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa38:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 800fa3c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fa40:	6013      	str	r3, [r2, #0]
    return result;
 800fa42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa46:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800fa4a:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800fa4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa50:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	441a      	add	r2, r3
 800fa58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa5c:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800fa60:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800fa62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa66:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800fa6e:	2102      	movs	r1, #2
 800fa70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa74:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 800fa78:	1e4b      	subs	r3, r1, #1
 800fa7a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800fa7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa80:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 800fa84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa88:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 800fa8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa90:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800fa94:	6812      	ldr	r2, [r2, #0]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4013      	ands	r3, r2
 800fa9a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800fa9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800faa0:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 800faa4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800faa8:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	105b      	asrs	r3, r3, #1
 800fab0:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 800fab2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fab6:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 800faba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fabe:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	105b      	asrs	r3, r3, #1
 800fac6:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800fac8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800facc:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	da0a      	bge.n	800faec <arm_softmax_s8+0x2fac>
        threshold++;
 800fad6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fada:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 800fade:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fae2:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	3301      	adds	r3, #1
 800faea:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800faec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800faf0:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 800faf4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800faf8:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800fafc:	6812      	ldr	r2, [r2, #0]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	429a      	cmp	r2, r3
 800fb02:	dd0a      	ble.n	800fb1a <arm_softmax_s8+0x2fda>
        result++;
 800fb04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb08:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 800fb0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb10:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	3301      	adds	r3, #1
 800fb18:	6013      	str	r3, [r2, #0]
    return result;
 800fb1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb1e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800fb22:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800fb24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb28:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	441a      	add	r2, r3
 800fb30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb34:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800fb38:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800fb3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb3e:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 800fb42:	2300      	movs	r3, #0
 800fb44:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800fb46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fb4a:	f04f 0300 	mov.w	r3, #0
 800fb4e:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 800fb52:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800fb56:	2200      	movs	r2, #0
 800fb58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb5c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	0fdb      	lsrs	r3, r3, #31
 800fb64:	b2db      	uxtb	r3, r3
 800fb66:	4053      	eors	r3, r2
 800fb68:	b2db      	uxtb	r3, r3
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d012      	beq.n	800fb94 <arm_softmax_s8+0x3054>
        mult = 1 - mult;
 800fb6e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 800fb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb76:	2100      	movs	r1, #0
 800fb78:	f1d2 0001 	rsbs	r0, r2, #1
 800fb7c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800fb80:	eb61 0303 	sbc.w	r3, r1, r3
 800fb84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800fb88:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800fb8c:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 800fb90:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800fb94:	a13e      	add	r1, pc, #248	; (adr r1, 800fc90 <arm_softmax_s8+0x3150>)
 800fb96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb9e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	17da      	asrs	r2, r3, #31
 800fba6:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 800fbaa:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 800fbae:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800fbb2:	fb03 f201 	mul.w	r2, r3, r1
 800fbb6:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800fbba:	fb00 f303 	mul.w	r3, r0, r3
 800fbbe:	4413      	add	r3, r2
 800fbc0:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 800fbc4:	fba0 1202 	umull	r1, r2, r0, r2
 800fbc8:	f8c7 2524 	str.w	r2, [r7, #1316]	; 0x524
 800fbcc:	460a      	mov	r2, r1
 800fbce:	f8c7 2520 	str.w	r2, [r7, #1312]	; 0x520
 800fbd2:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800fbd6:	4413      	add	r3, r2
 800fbd8:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 800fbdc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 800fbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe4:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
 800fbe8:	1851      	adds	r1, r2, r1
 800fbea:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800fbee:	f8d7 1524 	ldr.w	r1, [r7, #1316]	; 0x524
 800fbf2:	414b      	adcs	r3, r1
 800fbf4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800fbf8:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800fbfc:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 800fc00:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800fc04:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 800fc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	da0a      	bge.n	800fc26 <arm_softmax_s8+0x30e6>
 800fc10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fc14:	1851      	adds	r1, r2, r1
 800fc16:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800fc1a:	f143 0300 	adc.w	r3, r3, #0
 800fc1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fc22:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800fc26:	f04f 0000 	mov.w	r0, #0
 800fc2a:	f04f 0100 	mov.w	r1, #0
 800fc2e:	0fd0      	lsrs	r0, r2, #31
 800fc30:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800fc34:	17d9      	asrs	r1, r3, #31
 800fc36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fc3a:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 800fc3e:	4603      	mov	r3, r0
 800fc40:	6013      	str	r3, [r2, #0]
    return result;
 800fc42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fc46:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800fc4a:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 800fc4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fc50:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 800fc54:	4b11      	ldr	r3, [pc, #68]	; (800fc9c <arm_softmax_s8+0x315c>)
 800fc56:	440b      	add	r3, r1
 800fc58:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 800fc5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fc5e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800fc62:	6819      	ldr	r1, [r3, #0]
 800fc64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fc68:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 800fc6c:	1c4b      	adds	r3, r1, #1
 800fc6e:	6013      	str	r3, [r2, #0]
 800fc70:	2301      	movs	r3, #1
 800fc72:	fa03 f201 	lsl.w	r2, r3, r1
 800fc76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fc7a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4013      	ands	r3, r2
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d010      	beq.n	800fca8 <arm_softmax_s8+0x3168>
 800fc86:	f04f 32ff 	mov.w	r2, #4294967295
 800fc8a:	e00e      	b.n	800fcaa <arm_softmax_s8+0x316a>
 800fc8c:	f3af 8000 	nop.w
 800fc90:	70f5a894 	.word	0x70f5a894
 800fc94:	00000000 	.word	0x00000000
 800fc98:	2aaaaaab 	.word	0x2aaaaaab
 800fc9c:	70f5a894 	.word	0x70f5a894
 800fca0:	2aaaaaab 	.word	0x2aaaaaab
 800fca4:	00000000 	.word	0x00000000
 800fca8:	2200      	movs	r2, #0
 800fcaa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fcae:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800fcb2:	601a      	str	r2, [r3, #0]
 800fcb4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fcb8:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 800fcbc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fcc0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800fcc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fccc:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800fcd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fcd8:	f04f 0300 	mov.w	r3, #0
 800fcdc:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 800fce0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800fce4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fce8:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	0fdb      	lsrs	r3, r3, #31
 800fcf0:	b2da      	uxtb	r2, r3
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	4053      	eors	r3, r2
 800fcf6:	b2db      	uxtb	r3, r3
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d012      	beq.n	800fd22 <arm_softmax_s8+0x31e2>
        mult = 1 - mult;
 800fcfc:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800fd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd04:	2100      	movs	r1, #0
 800fd06:	f1d2 0001 	rsbs	r0, r2, #1
 800fd0a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 800fd0e:	eb61 0303 	sbc.w	r3, r1, r3
 800fd12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fd16:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800fd1a:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 800fd1e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800fd22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd26:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	17da      	asrs	r2, r3, #31
 800fd2e:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 800fd32:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 800fd36:	a3c4      	add	r3, pc, #784	; (adr r3, 8010048 <arm_softmax_s8+0x3508>)
 800fd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd3c:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 800fd40:	fb02 f001 	mul.w	r0, r2, r1
 800fd44:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 800fd48:	fb01 f103 	mul.w	r1, r1, r3
 800fd4c:	4401      	add	r1, r0
 800fd4e:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 800fd52:	fba0 2302 	umull	r2, r3, r0, r2
 800fd56:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 800fd5a:	4613      	mov	r3, r2
 800fd5c:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 800fd60:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800fd64:	18cb      	adds	r3, r1, r3
 800fd66:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 800fd6a:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800fd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd72:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
 800fd76:	1851      	adds	r1, r2, r1
 800fd78:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800fd7c:	f8d7 151c 	ldr.w	r1, [r7, #1308]	; 0x51c
 800fd80:	414b      	adcs	r3, r1
 800fd82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fd86:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800fd8a:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 800fd8e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800fd92:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800fd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	da0a      	bge.n	800fdb4 <arm_softmax_s8+0x3274>
 800fd9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fda2:	1851      	adds	r1, r2, r1
 800fda4:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800fda8:	f143 0300 	adc.w	r3, r3, #0
 800fdac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fdb0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800fdb4:	f04f 0000 	mov.w	r0, #0
 800fdb8:	f04f 0100 	mov.w	r1, #0
 800fdbc:	0fd0      	lsrs	r0, r2, #31
 800fdbe:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800fdc2:	17d9      	asrs	r1, r3, #31
 800fdc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fdc8:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 800fdcc:	4603      	mov	r3, r0
 800fdce:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800fdd0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fdd4:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800fdd8:	681a      	ldr	r2, [r3, #0]
 800fdda:	4b99      	ldr	r3, [pc, #612]	; (8010040 <arm_softmax_s8+0x3500>)
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d10e      	bne.n	800fdfe <arm_softmax_s8+0x32be>
 800fde0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fde4:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fdee:	d106      	bne.n	800fdfe <arm_softmax_s8+0x32be>
        result = Q31_MAX;
 800fdf0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fdf4:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 800fdf8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fdfc:	6013      	str	r3, [r2, #0]
    return result;
 800fdfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe02:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800fe06:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 800fe08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe0c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	ea02 0003 	and.w	r0, r2, r3
 800fe16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe1a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	43da      	mvns	r2, r3
 800fe22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe26:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	ea02 0103 	and.w	r1, r2, r3
 800fe30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe34:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 800fe38:	ea80 0301 	eor.w	r3, r0, r1
 800fe3c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 800fe3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe42:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800fe46:	6819      	ldr	r1, [r3, #0]
 800fe48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe4c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 800fe50:	1c4b      	adds	r3, r1, #1
 800fe52:	6013      	str	r3, [r2, #0]
 800fe54:	2301      	movs	r3, #1
 800fe56:	fa03 f201 	lsl.w	r2, r3, r1
 800fe5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe5e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	4013      	ands	r3, r2
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d002      	beq.n	800fe70 <arm_softmax_s8+0x3330>
 800fe6a:	f04f 32ff 	mov.w	r2, #4294967295
 800fe6e:	e000      	b.n	800fe72 <arm_softmax_s8+0x3332>
 800fe70:	2200      	movs	r2, #0
 800fe72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe76:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800fe7a:	601a      	str	r2, [r3, #0]
 800fe7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe80:	f5a3 7253 	sub.w	r2, r3, #844	; 0x34c
 800fe84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe88:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800fe90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe94:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800fe98:	2300      	movs	r3, #0
 800fe9a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800fe9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fea0:	f04f 0300 	mov.w	r3, #0
 800fea4:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 800fea8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800feac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800feb0:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	0fdb      	lsrs	r3, r3, #31
 800feb8:	b2da      	uxtb	r2, r3
 800feba:	2300      	movs	r3, #0
 800febc:	4053      	eors	r3, r2
 800febe:	b2db      	uxtb	r3, r3
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d012      	beq.n	800feea <arm_softmax_s8+0x33aa>
        mult = 1 - mult;
 800fec4:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800fec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fecc:	2100      	movs	r1, #0
 800fece:	f1d2 0001 	rsbs	r0, r2, #1
 800fed2:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 800fed6:	eb61 0303 	sbc.w	r3, r1, r3
 800feda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800fede:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800fee2:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 800fee6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800feea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800feee:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	17da      	asrs	r2, r3, #31
 800fef6:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 800fefa:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 800fefe:	a34e      	add	r3, pc, #312	; (adr r3, 8010038 <arm_softmax_s8+0x34f8>)
 800ff00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff04:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 800ff08:	fb02 f001 	mul.w	r0, r2, r1
 800ff0c:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 800ff10:	fb01 f103 	mul.w	r1, r1, r3
 800ff14:	4401      	add	r1, r0
 800ff16:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 800ff1a:	fba0 2302 	umull	r2, r3, r0, r2
 800ff1e:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 800ff22:	4613      	mov	r3, r2
 800ff24:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 800ff28:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800ff2c:	18cb      	adds	r3, r1, r3
 800ff2e:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 800ff32:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800ff36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3a:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 800ff3e:	1851      	adds	r1, r2, r1
 800ff40:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800ff44:	f8d7 1514 	ldr.w	r1, [r7, #1300]	; 0x514
 800ff48:	414b      	adcs	r3, r1
 800ff4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ff4e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800ff52:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 800ff56:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800ff5a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800ff5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	da0a      	bge.n	800ff7c <arm_softmax_s8+0x343c>
 800ff66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ff6a:	1851      	adds	r1, r2, r1
 800ff6c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800ff70:	f143 0300 	adc.w	r3, r3, #0
 800ff74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ff78:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800ff7c:	f04f 0000 	mov.w	r0, #0
 800ff80:	f04f 0100 	mov.w	r1, #0
 800ff84:	0fd0      	lsrs	r0, r2, #31
 800ff86:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800ff8a:	17d9      	asrs	r1, r3, #31
 800ff8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff90:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800ff94:	4603      	mov	r3, r0
 800ff96:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ff98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff9c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800ffa0:	681a      	ldr	r2, [r3, #0]
 800ffa2:	4b28      	ldr	r3, [pc, #160]	; (8010044 <arm_softmax_s8+0x3504>)
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d10e      	bne.n	800ffc6 <arm_softmax_s8+0x3486>
 800ffa8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ffac:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ffb6:	d106      	bne.n	800ffc6 <arm_softmax_s8+0x3486>
        result = Q31_MAX;
 800ffb8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ffbc:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800ffc0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ffc4:	6013      	str	r3, [r2, #0]
    return result;
 800ffc6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ffca:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800ffce:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 800ffd0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ffd4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	ea02 0003 	and.w	r0, r2, r3
 800ffde:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ffe2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	43da      	mvns	r2, r3
 800ffea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ffee:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	ea02 0103 	and.w	r1, r2, r3
 800fff8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fffc:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8010000:	ea80 0301 	eor.w	r3, r0, r1
 8010004:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 8010006:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801000a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801000e:	6819      	ldr	r1, [r3, #0]
 8010010:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010014:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8010018:	1c4b      	adds	r3, r1, #1
 801001a:	6013      	str	r3, [r2, #0]
 801001c:	2301      	movs	r3, #1
 801001e:	fa03 f201 	lsl.w	r2, r3, r1
 8010022:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010026:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4013      	ands	r3, r2
 801002e:	2b00      	cmp	r3, #0
 8010030:	d00e      	beq.n	8010050 <arm_softmax_s8+0x3510>
 8010032:	f04f 32ff 	mov.w	r2, #4294967295
 8010036:	e00c      	b.n	8010052 <arm_softmax_s8+0x3512>
 8010038:	4da2cbf2 	.word	0x4da2cbf2
 801003c:	00000000 	.word	0x00000000
 8010040:	63afbe7b 	.word	0x63afbe7b
 8010044:	4da2cbf2 	.word	0x4da2cbf2
 8010048:	63afbe7b 	.word	0x63afbe7b
 801004c:	00000000 	.word	0x00000000
 8010050:	2200      	movs	r2, #0
 8010052:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010056:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801005a:	601a      	str	r2, [r3, #0]
 801005c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010060:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8010064:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010068:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010070:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010074:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8010078:	2300      	movs	r3, #0
 801007a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801007c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010080:	f04f 0300 	mov.w	r3, #0
 8010084:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8010088:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801008c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010090:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	0fdb      	lsrs	r3, r3, #31
 8010098:	b2da      	uxtb	r2, r3
 801009a:	2300      	movs	r3, #0
 801009c:	4053      	eors	r3, r2
 801009e:	b2db      	uxtb	r3, r3
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d012      	beq.n	80100ca <arm_softmax_s8+0x358a>
        mult = 1 - mult;
 80100a4:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80100a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ac:	2100      	movs	r1, #0
 80100ae:	f1d2 0001 	rsbs	r0, r2, #1
 80100b2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 80100b6:	eb61 0303 	sbc.w	r3, r1, r3
 80100ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80100be:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80100c2:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80100c6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80100ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80100ce:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	17da      	asrs	r2, r3, #31
 80100d6:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 80100da:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 80100de:	a3c0      	add	r3, pc, #768	; (adr r3, 80103e0 <arm_softmax_s8+0x38a0>)
 80100e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e4:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 80100e8:	fb02 f001 	mul.w	r0, r2, r1
 80100ec:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80100f0:	fb01 f103 	mul.w	r1, r1, r3
 80100f4:	4401      	add	r1, r0
 80100f6:	f8d7 0388 	ldr.w	r0, [r7, #904]	; 0x388
 80100fa:	fba0 2302 	umull	r2, r3, r0, r2
 80100fe:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8010102:	4613      	mov	r3, r2
 8010104:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8010108:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 801010c:	18cb      	adds	r3, r1, r3
 801010e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8010112:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8010116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011a:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 801011e:	1851      	adds	r1, r2, r1
 8010120:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8010124:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 8010128:	414b      	adcs	r3, r1
 801012a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801012e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8010132:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8010136:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801013a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801013e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010142:	2b00      	cmp	r3, #0
 8010144:	da08      	bge.n	8010158 <arm_softmax_s8+0x3618>
 8010146:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801014a:	1851      	adds	r1, r2, r1
 801014c:	67b9      	str	r1, [r7, #120]	; 0x78
 801014e:	f143 0300 	adc.w	r3, r3, #0
 8010152:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010154:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010158:	f04f 0000 	mov.w	r0, #0
 801015c:	f04f 0100 	mov.w	r1, #0
 8010160:	0fd0      	lsrs	r0, r2, #31
 8010162:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010166:	17d9      	asrs	r1, r3, #31
 8010168:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801016c:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8010170:	4603      	mov	r3, r0
 8010172:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010174:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010178:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801017c:	681a      	ldr	r2, [r3, #0]
 801017e:	4b96      	ldr	r3, [pc, #600]	; (80103d8 <arm_softmax_s8+0x3898>)
 8010180:	429a      	cmp	r2, r3
 8010182:	d10e      	bne.n	80101a2 <arm_softmax_s8+0x3662>
 8010184:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010188:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010192:	d106      	bne.n	80101a2 <arm_softmax_s8+0x3662>
        result = Q31_MAX;
 8010194:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010198:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 801019c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80101a0:	6013      	str	r3, [r2, #0]
    return result;
 80101a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80101a6:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80101aa:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 80101ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80101b0:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	ea02 0003 	and.w	r0, r2, r3
 80101ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80101be:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	43da      	mvns	r2, r3
 80101c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80101ca:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	ea02 0103 	and.w	r1, r2, r3
 80101d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80101d8:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80101dc:	ea80 0301 	eor.w	r3, r0, r1
 80101e0:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 80101e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80101e6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80101ea:	6819      	ldr	r1, [r3, #0]
 80101ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80101f0:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80101f4:	1c4b      	adds	r3, r1, #1
 80101f6:	6013      	str	r3, [r2, #0]
 80101f8:	2301      	movs	r3, #1
 80101fa:	fa03 f201 	lsl.w	r2, r3, r1
 80101fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010202:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	4013      	ands	r3, r2
 801020a:	2b00      	cmp	r3, #0
 801020c:	d002      	beq.n	8010214 <arm_softmax_s8+0x36d4>
 801020e:	f04f 32ff 	mov.w	r2, #4294967295
 8010212:	e000      	b.n	8010216 <arm_softmax_s8+0x36d6>
 8010214:	2200      	movs	r2, #0
 8010216:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801021a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801021e:	601a      	str	r2, [r3, #0]
 8010220:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010224:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8010228:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801022c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010234:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010238:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 801023c:	2300      	movs	r3, #0
 801023e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010240:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010244:	f04f 0300 	mov.w	r3, #0
 8010248:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801024c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010250:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010254:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	0fdb      	lsrs	r3, r3, #31
 801025c:	b2da      	uxtb	r2, r3
 801025e:	2300      	movs	r3, #0
 8010260:	4053      	eors	r3, r2
 8010262:	b2db      	uxtb	r3, r3
 8010264:	2b00      	cmp	r3, #0
 8010266:	d010      	beq.n	801028a <arm_softmax_s8+0x374a>
        mult = 1 - mult;
 8010268:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801026c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010270:	2100      	movs	r1, #0
 8010272:	f1d2 0001 	rsbs	r0, r2, #1
 8010276:	6738      	str	r0, [r7, #112]	; 0x70
 8010278:	eb61 0303 	sbc.w	r3, r1, r3
 801027c:	677b      	str	r3, [r7, #116]	; 0x74
 801027e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8010282:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8010286:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801028a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801028e:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	17da      	asrs	r2, r3, #31
 8010296:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 801029a:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 801029e:	a34c      	add	r3, pc, #304	; (adr r3, 80103d0 <arm_softmax_s8+0x3890>)
 80102a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a4:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 80102a8:	fb02 f001 	mul.w	r0, r2, r1
 80102ac:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 80102b0:	fb01 f103 	mul.w	r1, r1, r3
 80102b4:	4401      	add	r1, r0
 80102b6:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 80102ba:	fba0 2302 	umull	r2, r3, r0, r2
 80102be:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 80102c2:	4613      	mov	r3, r2
 80102c4:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 80102c8:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 80102cc:	18cb      	adds	r3, r1, r3
 80102ce:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 80102d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80102d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102da:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
 80102de:	1851      	adds	r1, r2, r1
 80102e0:	66b9      	str	r1, [r7, #104]	; 0x68
 80102e2:	f8d7 1504 	ldr.w	r1, [r7, #1284]	; 0x504
 80102e6:	414b      	adcs	r3, r1
 80102e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80102ea:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80102ee:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80102f2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80102f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80102fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	da08      	bge.n	8010314 <arm_softmax_s8+0x37d4>
 8010302:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010306:	1851      	adds	r1, r2, r1
 8010308:	6639      	str	r1, [r7, #96]	; 0x60
 801030a:	f143 0300 	adc.w	r3, r3, #0
 801030e:	667b      	str	r3, [r7, #100]	; 0x64
 8010310:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010314:	f04f 0000 	mov.w	r0, #0
 8010318:	f04f 0100 	mov.w	r1, #0
 801031c:	0fd0      	lsrs	r0, r2, #31
 801031e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010322:	17d9      	asrs	r1, r3, #31
 8010324:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010328:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 801032c:	4603      	mov	r3, r0
 801032e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010330:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010334:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8010338:	681a      	ldr	r2, [r3, #0]
 801033a:	4b28      	ldr	r3, [pc, #160]	; (80103dc <arm_softmax_s8+0x389c>)
 801033c:	429a      	cmp	r2, r3
 801033e:	d10e      	bne.n	801035e <arm_softmax_s8+0x381e>
 8010340:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010344:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801034e:	d106      	bne.n	801035e <arm_softmax_s8+0x381e>
        result = Q31_MAX;
 8010350:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010354:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8010358:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801035c:	6013      	str	r3, [r2, #0]
    return result;
 801035e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010362:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8010366:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8010368:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801036c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	ea02 0003 	and.w	r0, r2, r3
 8010376:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801037a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	43da      	mvns	r2, r3
 8010382:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010386:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	ea02 0103 	and.w	r1, r2, r3
 8010390:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010394:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8010398:	ea80 0301 	eor.w	r3, r0, r1
 801039c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 801039e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103a2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80103a6:	6819      	ldr	r1, [r3, #0]
 80103a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103ac:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80103b0:	1c4b      	adds	r3, r1, #1
 80103b2:	6013      	str	r3, [r2, #0]
 80103b4:	2301      	movs	r3, #1
 80103b6:	fa03 f201 	lsl.w	r2, r3, r1
 80103ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103be:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	4013      	ands	r3, r2
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d00e      	beq.n	80103e8 <arm_softmax_s8+0x38a8>
 80103ca:	f04f 32ff 	mov.w	r2, #4294967295
 80103ce:	e00c      	b.n	80103ea <arm_softmax_s8+0x38aa>
 80103d0:	1152aaa4 	.word	0x1152aaa4
 80103d4:	00000000 	.word	0x00000000
 80103d8:	2f16ac6c 	.word	0x2f16ac6c
 80103dc:	1152aaa4 	.word	0x1152aaa4
 80103e0:	2f16ac6c 	.word	0x2f16ac6c
 80103e4:	00000000 	.word	0x00000000
 80103e8:	2200      	movs	r2, #0
 80103ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103ee:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80103f2:	601a      	str	r2, [r3, #0]
 80103f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103f8:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 80103fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010400:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010408:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801040c:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8010410:	2300      	movs	r3, #0
 8010412:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010418:	f04f 0300 	mov.w	r3, #0
 801041c:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8010420:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010424:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010428:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	0fdb      	lsrs	r3, r3, #31
 8010430:	b2da      	uxtb	r2, r3
 8010432:	2300      	movs	r3, #0
 8010434:	4053      	eors	r3, r2
 8010436:	b2db      	uxtb	r3, r3
 8010438:	2b00      	cmp	r3, #0
 801043a:	d010      	beq.n	801045e <arm_softmax_s8+0x391e>
        mult = 1 - mult;
 801043c:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8010440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010444:	2100      	movs	r1, #0
 8010446:	f1d2 0001 	rsbs	r0, r2, #1
 801044a:	65b8      	str	r0, [r7, #88]	; 0x58
 801044c:	eb61 0303 	sbc.w	r3, r1, r3
 8010450:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010452:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8010456:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 801045a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801045e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010462:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	17da      	asrs	r2, r3, #31
 801046a:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 801046e:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 8010472:	a3bd      	add	r3, pc, #756	; (adr r3, 8010768 <arm_softmax_s8+0x3c28>)
 8010474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010478:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 801047c:	fb02 f001 	mul.w	r0, r2, r1
 8010480:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8010484:	fb01 f103 	mul.w	r1, r1, r3
 8010488:	4401      	add	r1, r0
 801048a:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 801048e:	fba0 2302 	umull	r2, r3, r0, r2
 8010492:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8010496:	4613      	mov	r3, r2
 8010498:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 801049c:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 80104a0:	18cb      	adds	r3, r1, r3
 80104a2:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 80104a6:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80104aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ae:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	; 0x4f8
 80104b2:	1851      	adds	r1, r2, r1
 80104b4:	6539      	str	r1, [r7, #80]	; 0x50
 80104b6:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 80104ba:	414b      	adcs	r3, r1
 80104bc:	657b      	str	r3, [r7, #84]	; 0x54
 80104be:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80104c2:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 80104c6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80104ca:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80104ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	da08      	bge.n	80104e8 <arm_softmax_s8+0x39a8>
 80104d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80104da:	1851      	adds	r1, r2, r1
 80104dc:	64b9      	str	r1, [r7, #72]	; 0x48
 80104de:	f143 0300 	adc.w	r3, r3, #0
 80104e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80104e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80104e8:	f04f 0000 	mov.w	r0, #0
 80104ec:	f04f 0100 	mov.w	r1, #0
 80104f0:	0fd0      	lsrs	r0, r2, #31
 80104f2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80104f6:	17d9      	asrs	r1, r3, #31
 80104f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104fc:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8010500:	4603      	mov	r3, r0
 8010502:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010504:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010508:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801050c:	681a      	ldr	r2, [r3, #0]
 801050e:	4b94      	ldr	r3, [pc, #592]	; (8010760 <arm_softmax_s8+0x3c20>)
 8010510:	429a      	cmp	r2, r3
 8010512:	d10e      	bne.n	8010532 <arm_softmax_s8+0x39f2>
 8010514:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010518:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010522:	d106      	bne.n	8010532 <arm_softmax_s8+0x39f2>
        result = Q31_MAX;
 8010524:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010528:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 801052c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010530:	6013      	str	r3, [r2, #0]
    return result;
 8010532:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010536:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 801053a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 801053c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010540:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	ea02 0003 	and.w	r0, r2, r3
 801054a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801054e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	43da      	mvns	r2, r3
 8010556:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801055a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	ea02 0103 	and.w	r1, r2, r3
 8010564:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010568:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801056c:	ea80 0301 	eor.w	r3, r0, r1
 8010570:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 8010572:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010576:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801057a:	6819      	ldr	r1, [r3, #0]
 801057c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010580:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8010584:	1c4b      	adds	r3, r1, #1
 8010586:	6013      	str	r3, [r2, #0]
 8010588:	2301      	movs	r3, #1
 801058a:	fa03 f201 	lsl.w	r2, r3, r1
 801058e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010592:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	4013      	ands	r3, r2
 801059a:	2b00      	cmp	r3, #0
 801059c:	d002      	beq.n	80105a4 <arm_softmax_s8+0x3a64>
 801059e:	f04f 32ff 	mov.w	r2, #4294967295
 80105a2:	e000      	b.n	80105a6 <arm_softmax_s8+0x3a66>
 80105a4:	2200      	movs	r2, #0
 80105a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80105aa:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80105ae:	601a      	str	r2, [r3, #0]
 80105b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80105b4:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 80105b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80105bc:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80105c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80105c8:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 80105cc:	2300      	movs	r3, #0
 80105ce:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80105d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80105d4:	f04f 0300 	mov.w	r3, #0
 80105d8:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 80105dc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80105e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80105e4:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	0fdb      	lsrs	r3, r3, #31
 80105ec:	b2da      	uxtb	r2, r3
 80105ee:	2300      	movs	r3, #0
 80105f0:	4053      	eors	r3, r2
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d010      	beq.n	801061a <arm_softmax_s8+0x3ada>
        mult = 1 - mult;
 80105f8:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 80105fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010600:	2100      	movs	r1, #0
 8010602:	f1d2 0001 	rsbs	r0, r2, #1
 8010606:	6438      	str	r0, [r7, #64]	; 0x40
 8010608:	eb61 0303 	sbc.w	r3, r1, r3
 801060c:	647b      	str	r3, [r7, #68]	; 0x44
 801060e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8010612:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8010616:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801061a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801061e:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	17da      	asrs	r2, r3, #31
 8010626:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 801062a:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 801062e:	4a4d      	ldr	r2, [pc, #308]	; (8010764 <arm_softmax_s8+0x3c24>)
 8010630:	f04f 0300 	mov.w	r3, #0
 8010634:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 8010638:	fb02 f001 	mul.w	r0, r2, r1
 801063c:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 8010640:	fb01 f103 	mul.w	r1, r1, r3
 8010644:	4401      	add	r1, r0
 8010646:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 801064a:	fba0 2302 	umull	r2, r3, r0, r2
 801064e:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8010652:	4613      	mov	r3, r2
 8010654:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 8010658:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 801065c:	18cb      	adds	r3, r1, r3
 801065e:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8010662:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8010666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801066a:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 801066e:	1851      	adds	r1, r2, r1
 8010670:	63b9      	str	r1, [r7, #56]	; 0x38
 8010672:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 8010676:	414b      	adcs	r3, r1
 8010678:	63fb      	str	r3, [r7, #60]	; 0x3c
 801067a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 801067e:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8010682:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010686:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801068a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068e:	2b00      	cmp	r3, #0
 8010690:	da08      	bge.n	80106a4 <arm_softmax_s8+0x3b64>
 8010692:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010696:	1851      	adds	r1, r2, r1
 8010698:	6339      	str	r1, [r7, #48]	; 0x30
 801069a:	f143 0300 	adc.w	r3, r3, #0
 801069e:	637b      	str	r3, [r7, #52]	; 0x34
 80106a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80106a4:	f04f 0000 	mov.w	r0, #0
 80106a8:	f04f 0100 	mov.w	r1, #0
 80106ac:	0fd0      	lsrs	r0, r2, #31
 80106ae:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80106b2:	17d9      	asrs	r1, r3, #31
 80106b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106b8:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 80106bc:	4603      	mov	r3, r0
 80106be:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80106c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106c4:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80106c8:	681a      	ldr	r2, [r3, #0]
 80106ca:	4b26      	ldr	r3, [pc, #152]	; (8010764 <arm_softmax_s8+0x3c24>)
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d10e      	bne.n	80106ee <arm_softmax_s8+0x3bae>
 80106d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106d4:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80106de:	d106      	bne.n	80106ee <arm_softmax_s8+0x3bae>
        result = Q31_MAX;
 80106e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106e4:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 80106e8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80106ec:	6013      	str	r3, [r2, #0]
    return result;
 80106ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106f2:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80106f6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 80106f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106fc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	ea02 0003 	and.w	r0, r2, r3
 8010706:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801070a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	43da      	mvns	r2, r3
 8010712:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010716:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	ea02 0103 	and.w	r1, r2, r3
 8010720:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010724:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8010728:	ea80 0301 	eor.w	r3, r0, r1
 801072c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 801072e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010732:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8010736:	6819      	ldr	r1, [r3, #0]
 8010738:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801073c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8010740:	1c4b      	adds	r3, r1, #1
 8010742:	6013      	str	r3, [r2, #0]
 8010744:	2301      	movs	r3, #1
 8010746:	fa03 f201 	lsl.w	r2, r3, r1
 801074a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801074e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	4013      	ands	r3, r2
 8010756:	2b00      	cmp	r3, #0
 8010758:	d00a      	beq.n	8010770 <arm_softmax_s8+0x3c30>
 801075a:	f04f 32ff 	mov.w	r2, #4294967295
 801075e:	e008      	b.n	8010772 <arm_softmax_s8+0x3c32>
 8010760:	02582ab7 	.word	0x02582ab7
 8010764:	000afe11 	.word	0x000afe11
 8010768:	02582ab7 	.word	0x02582ab7
 801076c:	00000000 	.word	0x00000000
 8010770:	2200      	movs	r2, #0
 8010772:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010776:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801077a:	601a      	str	r2, [r3, #0]
 801077c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010780:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8010784:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010788:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010790:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010794:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8010798:	2300      	movs	r3, #0
 801079a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801079c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80107a0:	f04f 0300 	mov.w	r3, #0
 80107a4:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 80107a8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80107ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107b0:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	0fdb      	lsrs	r3, r3, #31
 80107b8:	b2da      	uxtb	r2, r3
 80107ba:	2300      	movs	r3, #0
 80107bc:	4053      	eors	r3, r2
 80107be:	b2db      	uxtb	r3, r3
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d010      	beq.n	80107e6 <arm_softmax_s8+0x3ca6>
        mult = 1 - mult;
 80107c4:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80107c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107cc:	2100      	movs	r1, #0
 80107ce:	f1d2 0001 	rsbs	r0, r2, #1
 80107d2:	62b8      	str	r0, [r7, #40]	; 0x28
 80107d4:	eb61 0303 	sbc.w	r3, r1, r3
 80107d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107da:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80107de:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80107e2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80107e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107ea:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	17da      	asrs	r2, r3, #31
 80107f2:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 80107f6:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 80107fa:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 80107fe:	f04f 0300 	mov.w	r3, #0
 8010802:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 8010806:	fb02 f001 	mul.w	r0, r2, r1
 801080a:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 801080e:	fb01 f103 	mul.w	r1, r1, r3
 8010812:	4401      	add	r1, r0
 8010814:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 8010818:	fba0 2302 	umull	r2, r3, r0, r2
 801081c:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8010820:	4613      	mov	r3, r2
 8010822:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8010826:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 801082a:	18cb      	adds	r3, r1, r3
 801082c:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8010830:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8010834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010838:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 801083c:	1851      	adds	r1, r2, r1
 801083e:	6239      	str	r1, [r7, #32]
 8010840:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	; 0x4ec
 8010844:	414b      	adcs	r3, r1
 8010846:	627b      	str	r3, [r7, #36]	; 0x24
 8010848:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801084c:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8010850:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010854:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8010858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801085c:	2b00      	cmp	r3, #0
 801085e:	da08      	bge.n	8010872 <arm_softmax_s8+0x3d32>
 8010860:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010864:	1851      	adds	r1, r2, r1
 8010866:	61b9      	str	r1, [r7, #24]
 8010868:	f143 0300 	adc.w	r3, r3, #0
 801086c:	61fb      	str	r3, [r7, #28]
 801086e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010872:	f04f 0000 	mov.w	r0, #0
 8010876:	f04f 0100 	mov.w	r1, #0
 801087a:	0fd0      	lsrs	r0, r2, #31
 801087c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010880:	17d9      	asrs	r1, r3, #31
 8010882:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010886:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 801088a:	4603      	mov	r3, r0
 801088c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801088e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010892:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	2bf2      	cmp	r3, #242	; 0xf2
 801089a:	d10e      	bne.n	80108ba <arm_softmax_s8+0x3d7a>
 801089c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80108a0:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80108aa:	d106      	bne.n	80108ba <arm_softmax_s8+0x3d7a>
        result = Q31_MAX;
 80108ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80108b0:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 80108b4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80108b8:	6013      	str	r3, [r2, #0]
    return result;
 80108ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80108be:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80108c2:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 80108c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80108c8:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	ea02 0003 	and.w	r0, r2, r3
 80108d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80108d6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	43da      	mvns	r2, r3
 80108de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80108e2:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	ea02 0103 	and.w	r1, r2, r3
 80108ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80108f0:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80108f4:	ea80 0301 	eor.w	r3, r0, r1
 80108f8:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 80108fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80108fe:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d102      	bne.n	801090e <arm_softmax_s8+0x3dce>
 8010908:	f04f 32ff 	mov.w	r2, #4294967295
 801090c:	e000      	b.n	8010910 <arm_softmax_s8+0x3dd0>
 801090e:	2200      	movs	r2, #0
 8010910:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010914:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010918:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 801091a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801091e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010928:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801092c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	43da      	mvns	r2, r3
 8010934:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010938:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	4013      	ands	r3, r2
 8010940:	4059      	eors	r1, r3
 8010942:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010946:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 801094a:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 801094e:	6013      	str	r3, [r2, #0]
 8010950:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010954:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8010958:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 801095a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801095e:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8010962:	2300      	movs	r3, #0
 8010964:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010966:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801096a:	f04f 0300 	mov.w	r3, #0
 801096e:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 8010972:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010976:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801097a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	0fdb      	lsrs	r3, r3, #31
 8010982:	b2da      	uxtb	r2, r3
 8010984:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010988:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	0fdb      	lsrs	r3, r3, #31
 8010990:	b2db      	uxtb	r3, r3
 8010992:	4053      	eors	r3, r2
 8010994:	b2db      	uxtb	r3, r3
 8010996:	2b00      	cmp	r3, #0
 8010998:	d010      	beq.n	80109bc <arm_softmax_s8+0x3e7c>
        mult = 1 - mult;
 801099a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 801099e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a2:	2100      	movs	r1, #0
 80109a4:	f1d2 0001 	rsbs	r0, r2, #1
 80109a8:	6138      	str	r0, [r7, #16]
 80109aa:	eb61 0303 	sbc.w	r3, r1, r3
 80109ae:	617b      	str	r3, [r7, #20]
 80109b0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80109b4:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 80109b8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80109bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109c0:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	17da      	asrs	r2, r3, #31
 80109c8:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 80109cc:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 80109d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109d4:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	17da      	asrs	r2, r3, #31
 80109dc:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 80109e0:	f8c7 23e4 	str.w	r2, [r7, #996]	; 0x3e4
 80109e4:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 80109e8:	460b      	mov	r3, r1
 80109ea:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 80109ee:	fb02 f203 	mul.w	r2, r2, r3
 80109f2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80109f6:	e9c7 01fa 	strd	r0, r1, [r7, #1000]	; 0x3e8
 80109fa:	4601      	mov	r1, r0
 80109fc:	fb01 f303 	mul.w	r3, r1, r3
 8010a00:	4413      	add	r3, r2
 8010a02:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8010a06:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 8010a0a:	fba2 1201 	umull	r1, r2, r2, r1
 8010a0e:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
 8010a12:	460a      	mov	r2, r1
 8010a14:	f8c7 2548 	str.w	r2, [r7, #1352]	; 0x548
 8010a18:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8010a1c:	4413      	add	r3, r2
 8010a1e:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8010a22:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8010a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a2a:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 8010a2e:	1851      	adds	r1, r2, r1
 8010a30:	60b9      	str	r1, [r7, #8]
 8010a32:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 8010a36:	414b      	adcs	r3, r1
 8010a38:	60fb      	str	r3, [r7, #12]
 8010a3a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010a3e:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8010a42:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010a46:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8010a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	da08      	bge.n	8010a64 <arm_softmax_s8+0x3f24>
 8010a52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010a56:	1851      	adds	r1, r2, r1
 8010a58:	6039      	str	r1, [r7, #0]
 8010a5a:	f143 0300 	adc.w	r3, r3, #0
 8010a5e:	607b      	str	r3, [r7, #4]
 8010a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a64:	f04f 0000 	mov.w	r0, #0
 8010a68:	f04f 0100 	mov.w	r1, #0
 8010a6c:	0fd0      	lsrs	r0, r2, #31
 8010a6e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010a72:	17d9      	asrs	r1, r3, #31
 8010a74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a78:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010a80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a84:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8010a88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a8c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8010a90:	6812      	ldr	r2, [r2, #0]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d10e      	bne.n	8010ab6 <arm_softmax_s8+0x3f76>
 8010a98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a9c:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010aa6:	d106      	bne.n	8010ab6 <arm_softmax_s8+0x3f76>
        result = Q31_MAX;
 8010aa8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010aac:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8010ab0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010ab4:	6013      	str	r3, [r2, #0]
    return result;
 8010ab6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010aba:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8010abe:	681a      	ldr	r2, [r3, #0]
 8010ac0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ac4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8010ac8:	601a      	str	r2, [r3, #0]
 8010aca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ace:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 8010ad2:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 8010ad6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010ad8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010adc:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8010ae4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ae8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8010aec:	2201      	movs	r2, #1
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	fa02 f103 	lsl.w	r1, r2, r3
 8010af4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010af8:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8010afc:	1e4b      	subs	r3, r1, #1
 8010afe:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8010b00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b04:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 8010b08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b0c:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8010b10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b14:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8010b18:	6812      	ldr	r2, [r2, #0]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	4013      	ands	r3, r2
 8010b1e:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8010b20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b24:	f5a3 711a 	sub.w	r1, r3, #616	; 0x268
 8010b28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b2c:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8010b30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b34:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8010b38:	6812      	ldr	r2, [r2, #0]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	fa42 f303 	asr.w	r3, r2, r3
 8010b40:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8010b42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b46:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8010b4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b4e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	105b      	asrs	r3, r3, #1
 8010b56:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8010b58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b5c:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	da0a      	bge.n	8010b7c <arm_softmax_s8+0x403c>
        threshold++;
 8010b66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b6a:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8010b6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b72:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	3301      	adds	r3, #1
 8010b7a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8010b7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b80:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8010b84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b88:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8010b8c:	6812      	ldr	r2, [r2, #0]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	dd0a      	ble.n	8010baa <arm_softmax_s8+0x406a>
        result++;
 8010b94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b98:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8010b9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ba0:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	6013      	str	r3, [r2, #0]
    return result;
 8010baa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010bae:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8010bb2:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 8010bb4:	3b80      	subs	r3, #128	; 0x80
 8010bb6:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 8010bba:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8010bbe:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8010bc2:	db09      	blt.n	8010bd8 <arm_softmax_s8+0x4098>
 8010bc4:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8010bc8:	2b7e      	cmp	r3, #126	; 0x7e
 8010bca:	dc03      	bgt.n	8010bd4 <arm_softmax_s8+0x4094>
 8010bcc:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8010bd0:	b259      	sxtb	r1, r3
 8010bd2:	e003      	b.n	8010bdc <arm_softmax_s8+0x409c>
 8010bd4:	217f      	movs	r1, #127	; 0x7f
 8010bd6:	e001      	b.n	8010bdc <arm_softmax_s8+0x409c>
 8010bd8:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8010bdc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8010be0:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8010be4:	441a      	add	r2, r3
 8010be6:	460b      	mov	r3, r1
 8010be8:	7013      	strb	r3, [r2, #0]
 8010bea:	e006      	b.n	8010bfa <arm_softmax_s8+0x40ba>
            }
            else
            {
                output[col] = -128;
 8010bec:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8010bf0:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8010bf4:	441a      	add	r2, r3
 8010bf6:	2380      	movs	r3, #128	; 0x80
 8010bf8:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 8010bfa:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8010bfe:	3301      	adds	r3, #1
 8010c00:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8010c04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c08:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8010c0c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	f6fe aa71 	blt.w	800f0fa <arm_softmax_s8+0x25ba>
            }
        }
        input += row_size;
 8010c18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c1c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8010c20:	6819      	ldr	r1, [r3, #0]
 8010c22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c26:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 8010c2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c2e:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	440b      	add	r3, r1
 8010c36:	6013      	str	r3, [r2, #0]
        output += row_size;
 8010c38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c3c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8010c40:	681a      	ldr	r2, [r3, #0]
 8010c42:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8010c46:	4413      	add	r3, r2
 8010c48:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8010c4c:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 8010c50:	3301      	adds	r3, #1
 8010c52:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 8010c56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c5a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8010c5e:	f8d7 29a0 	ldr.w	r2, [r7, #2464]	; 0x9a0
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	429a      	cmp	r2, r3
 8010c66:	f6fb af93 	blt.w	800cb90 <arm_softmax_s8+0x50>
    }

#endif
}
 8010c6a:	bf00      	nop
 8010c6c:	bf00      	nop
 8010c6e:	f607 17a8 	addw	r7, r7, #2472	; 0x9a8
 8010c72:	46bd      	mov	sp, r7
 8010c74:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop

08010c7c <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b082      	sub	sp, #8
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	ed87 0a01 	vstr	s0, [r7, #4]
 8010c86:	ed97 0a01 	vldr	s0, [r7, #4]
 8010c8a:	f008 f98d 	bl	8018fa8 <log10f>
 8010c8e:	eef0 7a40 	vmov.f32	s15, s0
 8010c92:	eeb0 0a67 	vmov.f32	s0, s15
 8010c96:	3708      	adds	r7, #8
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 8010c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c9e:	b083      	sub	sp, #12
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	ed87 0b00 	vstr	d0, [r7]
 8010ca6:	683c      	ldr	r4, [r7, #0]
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8010cae:	2301      	movs	r3, #1
 8010cb0:	461e      	mov	r6, r3
 8010cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8010cb6:	4b10      	ldr	r3, [pc, #64]	; (8010cf8 <_ZSt5isinfd+0x5c>)
 8010cb8:	4620      	mov	r0, r4
 8010cba:	4629      	mov	r1, r5
 8010cbc:	f7ef ff40 	bl	8000b40 <__aeabi_dcmpun>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d10b      	bne.n	8010cde <_ZSt5isinfd+0x42>
 8010cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8010cca:	4b0b      	ldr	r3, [pc, #44]	; (8010cf8 <_ZSt5isinfd+0x5c>)
 8010ccc:	4620      	mov	r0, r4
 8010cce:	4629      	mov	r1, r5
 8010cd0:	f7ef ff18 	bl	8000b04 <__aeabi_dcmple>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d101      	bne.n	8010cde <_ZSt5isinfd+0x42>
 8010cda:	2300      	movs	r3, #0
 8010cdc:	461e      	mov	r6, r3
 8010cde:	b2f3      	uxtb	r3, r6
 8010ce0:	f083 0301 	eor.w	r3, r3, #1
 8010ce4:	b2db      	uxtb	r3, r3
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	bf14      	ite	ne
 8010cea:	2301      	movne	r3, #1
 8010cec:	2300      	moveq	r3, #0
 8010cee:	b2db      	uxtb	r3, r3
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	370c      	adds	r7, #12
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cf8:	7fefffff 	.word	0x7fefffff

08010cfc <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8010cfc:	b480      	push	{r7}
 8010cfe:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8010d00:	2300      	movs	r3, #0
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	46bd      	mov	sp, r7
 8010d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0a:	4770      	bx	lr

08010d0c <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 8010d0c:	b5b0      	push	{r4, r5, r7, lr}
 8010d0e:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 8010d10:	f7f2 fffc 	bl	8003d0c <HAL_GetTick>
 8010d14:	4603      	mov	r3, r0
 8010d16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010d1a:	fb02 f303 	mul.w	r3, r2, r3
 8010d1e:	2200      	movs	r2, #0
 8010d20:	461c      	mov	r4, r3
 8010d22:	4615      	mov	r5, r2
 8010d24:	4622      	mov	r2, r4
 8010d26:	462b      	mov	r3, r5
}
 8010d28:	4610      	mov	r0, r2
 8010d2a:	4619      	mov	r1, r3
 8010d2c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010d30 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 8010d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d34:	b08c      	sub	sp, #48	; 0x30
 8010d36:	af00      	add	r7, sp, #0
 8010d38:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 8010d3c:	466b      	mov	r3, sp
 8010d3e:	4698      	mov	r8, r3
    float n = f;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 8010d44:	4b7e      	ldr	r3, [pc, #504]	; (8010f40 <_Z15ei_printf_floatf+0x210>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	1e5e      	subs	r6, r3, #1
 8010d4a:	623e      	str	r6, [r7, #32]
 8010d4c:	4633      	mov	r3, r6
 8010d4e:	3301      	adds	r3, #1
 8010d50:	2200      	movs	r2, #0
 8010d52:	461c      	mov	r4, r3
 8010d54:	4615      	mov	r5, r2
 8010d56:	f04f 0200 	mov.w	r2, #0
 8010d5a:	f04f 0300 	mov.w	r3, #0
 8010d5e:	00eb      	lsls	r3, r5, #3
 8010d60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010d64:	00e2      	lsls	r2, r4, #3
 8010d66:	4633      	mov	r3, r6
 8010d68:	3301      	adds	r3, #1
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	4611      	mov	r1, r2
 8010d70:	f04f 0200 	mov.w	r2, #0
 8010d74:	f04f 0300 	mov.w	r3, #0
 8010d78:	00cb      	lsls	r3, r1, #3
 8010d7a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010d7e:	00c2      	lsls	r2, r0, #3
 8010d80:	4633      	mov	r3, r6
 8010d82:	3301      	adds	r3, #1
 8010d84:	3307      	adds	r3, #7
 8010d86:	08db      	lsrs	r3, r3, #3
 8010d88:	00db      	lsls	r3, r3, #3
 8010d8a:	ebad 0d03 	sub.w	sp, sp, r3
 8010d8e:	466b      	mov	r3, sp
 8010d90:	3300      	adds	r3, #0
 8010d92:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 8010d94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010d98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010da0:	d106      	bne.n	8010db0 <_Z15ei_printf_floatf+0x80>
        strcpy(s, "0");
 8010da2:	69fb      	ldr	r3, [r7, #28]
 8010da4:	4967      	ldr	r1, [pc, #412]	; (8010f44 <_Z15ei_printf_floatf+0x214>)
 8010da6:	461a      	mov	r2, r3
 8010da8:	460b      	mov	r3, r1
 8010daa:	881b      	ldrh	r3, [r3, #0]
 8010dac:	8013      	strh	r3, [r2, #0]
 8010dae:	e0b6      	b.n	8010f1e <_Z15ei_printf_floatf+0x1ee>
        char *c = s;
 8010db0:	69fb      	ldr	r3, [r7, #28]
 8010db2:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 8010db4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010db8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc0:	bf4c      	ite	mi
 8010dc2:	2301      	movmi	r3, #1
 8010dc4:	2300      	movpl	r3, #0
 8010dc6:	b2db      	uxtb	r3, r3
 8010dc8:	61bb      	str	r3, [r7, #24]
        if (neg) {
 8010dca:	69bb      	ldr	r3, [r7, #24]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d005      	beq.n	8010ddc <_Z15ei_printf_floatf+0xac>
            n = -n;
 8010dd0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010dd4:	eef1 7a67 	vneg.f32	s15, s15
 8010dd8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 8010ddc:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8010de0:	f7ff ff4c 	bl	8010c7c <_ZSt5log10f>
 8010de4:	eef0 7a40 	vmov.f32	s15, s0
 8010de8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010dec:	ee17 3a90 	vmov	r3, s15
 8010df0:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 8010df2:	69bb      	ldr	r3, [r7, #24]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d004      	beq.n	8010e02 <_Z15ei_printf_floatf+0xd2>
            *(c++) = '-';
 8010df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dfa:	1c5a      	adds	r2, r3, #1
 8010dfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010dfe:	222d      	movs	r2, #45	; 0x2d
 8010e00:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 8010e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	dc01      	bgt.n	8010e0c <_Z15ei_printf_floatf+0xdc>
            m = 0;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8010e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e0e:	f7ef fba5 	bl	800055c <__aeabi_f2d>
 8010e12:	4b4d      	ldr	r3, [pc, #308]	; (8010f48 <_Z15ei_printf_floatf+0x218>)
 8010e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e18:	2401      	movs	r4, #1
 8010e1a:	f7ef fe87 	bl	8000b2c <__aeabi_dcmpgt>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d101      	bne.n	8010e28 <_Z15ei_printf_floatf+0xf8>
 8010e24:	2300      	movs	r3, #0
 8010e26:	461c      	mov	r4, r3
 8010e28:	b2e3      	uxtb	r3, r4
 8010e2a:	f083 0301 	eor.w	r3, r3, #1
 8010e2e:	b2db      	uxtb	r3, r3
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d002      	beq.n	8010e3a <_Z15ei_printf_floatf+0x10a>
 8010e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	db6e      	blt.n	8010f18 <_Z15ei_printf_floatf+0x1e8>
            double weight = pow(10.0, m);
 8010e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e3c:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8010f38 <_Z15ei_printf_floatf+0x208>
 8010e40:	f000 f89f 	bl	8010f82 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8010e44:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8010e48:	f04f 0200 	mov.w	r2, #0
 8010e4c:	f04f 0300 	mov.w	r3, #0
 8010e50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010e54:	f7ef fe6a 	bl	8000b2c <__aeabi_dcmpgt>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d00b      	beq.n	8010e76 <_Z15ei_printf_floatf+0x146>
 8010e5e:	ed97 0b04 	vldr	d0, [r7, #16]
 8010e62:	f7ff ff1b 	bl	8010c9c <_ZSt5isinfd>
 8010e66:	4603      	mov	r3, r0
 8010e68:	f083 0301 	eor.w	r3, r3, #1
 8010e6c:	b2db      	uxtb	r3, r3
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d001      	beq.n	8010e76 <_Z15ei_printf_floatf+0x146>
 8010e72:	2301      	movs	r3, #1
 8010e74:	e000      	b.n	8010e78 <_Z15ei_printf_floatf+0x148>
 8010e76:	2300      	movs	r3, #0
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d03a      	beq.n	8010ef2 <_Z15ei_printf_floatf+0x1c2>
                digit = floor(n / weight);
 8010e7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e7e:	f7ef fb6d 	bl	800055c <__aeabi_f2d>
 8010e82:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010e86:	f7ef fceb 	bl	8000860 <__aeabi_ddiv>
 8010e8a:	4602      	mov	r2, r0
 8010e8c:	460b      	mov	r3, r1
 8010e8e:	ec43 2b17 	vmov	d7, r2, r3
 8010e92:	eeb0 0a47 	vmov.f32	s0, s14
 8010e96:	eef0 0a67 	vmov.f32	s1, s15
 8010e9a:	f007 febd 	bl	8018c18 <floor>
 8010e9e:	ec53 2b10 	vmov	r2, r3, d0
 8010ea2:	4610      	mov	r0, r2
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	f7ef fe61 	bl	8000b6c <__aeabi_d2iz>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 8010eae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010eb0:	f7ef fb54 	bl	800055c <__aeabi_f2d>
 8010eb4:	4604      	mov	r4, r0
 8010eb6:	460d      	mov	r5, r1
 8010eb8:	68f8      	ldr	r0, [r7, #12]
 8010eba:	f7ef fb3d 	bl	8000538 <__aeabi_i2d>
 8010ebe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010ec2:	f7ef fba3 	bl	800060c <__aeabi_dmul>
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	460b      	mov	r3, r1
 8010eca:	4620      	mov	r0, r4
 8010ecc:	4629      	mov	r1, r5
 8010ece:	f7ef f9e5 	bl	800029c <__aeabi_dsub>
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	460b      	mov	r3, r1
 8010ed6:	4610      	mov	r0, r2
 8010ed8:	4619      	mov	r1, r3
 8010eda:	f7ef fe8f 	bl	8000bfc <__aeabi_d2f>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	b2da      	uxtb	r2, r3
 8010ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee8:	1c59      	adds	r1, r3, #1
 8010eea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010eec:	3230      	adds	r2, #48	; 0x30
 8010eee:	b2d2      	uxtb	r2, r2
 8010ef0:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 8010ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d10b      	bne.n	8010f10 <_Z15ei_printf_floatf+0x1e0>
 8010ef8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010efc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f04:	dd04      	ble.n	8010f10 <_Z15ei_printf_floatf+0x1e0>
                *(c++) = '.';
 8010f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f08:	1c5a      	adds	r2, r3, #1
 8010f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010f0c:	222e      	movs	r2, #46	; 0x2e
 8010f0e:	701a      	strb	r2, [r3, #0]
            m--;
 8010f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f12:	3b01      	subs	r3, #1
 8010f14:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8010f16:	e779      	b.n	8010e0c <_Z15ei_printf_floatf+0xdc>
        *(c) = '\0';
 8010f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 8010f1e:	69f9      	ldr	r1, [r7, #28]
 8010f20:	480a      	ldr	r0, [pc, #40]	; (8010f4c <_Z15ei_printf_floatf+0x21c>)
 8010f22:	f7f1 fc5a 	bl	80027da <_Z9ei_printfPKcz>
 8010f26:	46c5      	mov	sp, r8
}
 8010f28:	bf00      	nop
 8010f2a:	3730      	adds	r7, #48	; 0x30
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f32:	bf00      	nop
 8010f34:	f3af 8000 	nop.w
 8010f38:	00000000 	.word	0x00000000
 8010f3c:	40240000 	.word	0x40240000
 8010f40:	200000e0 	.word	0x200000e0
 8010f44:	0801dac8 	.word	0x0801dac8
 8010f48:	200000d8 	.word	0x200000d8
 8010f4c:	0801dacc 	.word	0x0801dacc

08010f50 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    return malloc(size);
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b082      	sub	sp, #8
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 8010f5a:	6839      	ldr	r1, [r7, #0]
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f009 f98f 	bl	801a280 <calloc>
 8010f62:	4603      	mov	r3, r0
}
 8010f64:	4618      	mov	r0, r3
 8010f66:	3708      	adds	r7, #8
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}

08010f6c <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b082      	sub	sp, #8
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
    free(ptr);
 8010f74:	6878      	ldr	r0, [r7, #4]
 8010f76:	f009 f9d3 	bl	801a320 <free>
}
 8010f7a:	bf00      	nop
 8010f7c:	3708      	adds	r7, #8
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}

08010f82 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8010f82:	b580      	push	{r7, lr}
 8010f84:	b084      	sub	sp, #16
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	ed87 0b02 	vstr	d0, [r7, #8]
 8010f8c:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f7ef fad2 	bl	8000538 <__aeabi_i2d>
 8010f94:	4602      	mov	r2, r0
 8010f96:	460b      	mov	r3, r1
 8010f98:	ec43 2b11 	vmov	d1, r2, r3
 8010f9c:	ed97 0b02 	vldr	d0, [r7, #8]
 8010fa0:	f007 ff5c 	bl	8018e5c <pow>
 8010fa4:	eeb0 7a40 	vmov.f32	s14, s0
 8010fa8:	eef0 7a60 	vmov.f32	s15, s1
    }
 8010fac:	eeb0 0a47 	vmov.f32	s0, s14
 8010fb0:	eef0 0a67 	vmov.f32	s1, s15
 8010fb4:	3710      	adds	r7, #16
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
	...

08010fbc <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8010fbc:	b480      	push	{r7}
 8010fbe:	b083      	sub	sp, #12
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8010fc6:	79fb      	ldrb	r3, [r7, #7]
 8010fc8:	2b10      	cmp	r3, #16
 8010fca:	d847      	bhi.n	801105c <TfLiteTypeGetName+0xa0>
 8010fcc:	a201      	add	r2, pc, #4	; (adr r2, 8010fd4 <TfLiteTypeGetName+0x18>)
 8010fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fd2:	bf00      	nop
 8010fd4:	08011019 	.word	0x08011019
 8010fd8:	0801101d 	.word	0x0801101d
 8010fdc:	08011025 	.word	0x08011025
 8010fe0:	0801102d 	.word	0x0801102d
 8010fe4:	08011035 	.word	0x08011035
 8010fe8:	08011049 	.word	0x08011049
 8010fec:	0801103d 	.word	0x0801103d
 8010ff0:	08011021 	.word	0x08011021
 8010ff4:	08011041 	.word	0x08011041
 8010ff8:	08011031 	.word	0x08011031
 8010ffc:	0801104d 	.word	0x0801104d
 8011000:	08011051 	.word	0x08011051
 8011004:	08011045 	.word	0x08011045
 8011008:	08011039 	.word	0x08011039
 801100c:	08011055 	.word	0x08011055
 8011010:	08011059 	.word	0x08011059
 8011014:	08011029 	.word	0x08011029
    case kTfLiteNoType:
      return "NOTYPE";
 8011018:	4b14      	ldr	r3, [pc, #80]	; (801106c <TfLiteTypeGetName+0xb0>)
 801101a:	e020      	b.n	801105e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 801101c:	4b14      	ldr	r3, [pc, #80]	; (8011070 <TfLiteTypeGetName+0xb4>)
 801101e:	e01e      	b.n	801105e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 8011020:	4b14      	ldr	r3, [pc, #80]	; (8011074 <TfLiteTypeGetName+0xb8>)
 8011022:	e01c      	b.n	801105e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 8011024:	4b14      	ldr	r3, [pc, #80]	; (8011078 <TfLiteTypeGetName+0xbc>)
 8011026:	e01a      	b.n	801105e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 8011028:	4b14      	ldr	r3, [pc, #80]	; (801107c <TfLiteTypeGetName+0xc0>)
 801102a:	e018      	b.n	801105e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 801102c:	4b14      	ldr	r3, [pc, #80]	; (8011080 <TfLiteTypeGetName+0xc4>)
 801102e:	e016      	b.n	801105e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 8011030:	4b14      	ldr	r3, [pc, #80]	; (8011084 <TfLiteTypeGetName+0xc8>)
 8011032:	e014      	b.n	801105e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 8011034:	4b14      	ldr	r3, [pc, #80]	; (8011088 <TfLiteTypeGetName+0xcc>)
 8011036:	e012      	b.n	801105e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 8011038:	4b14      	ldr	r3, [pc, #80]	; (801108c <TfLiteTypeGetName+0xd0>)
 801103a:	e010      	b.n	801105e <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 801103c:	4b14      	ldr	r3, [pc, #80]	; (8011090 <TfLiteTypeGetName+0xd4>)
 801103e:	e00e      	b.n	801105e <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8011040:	4b14      	ldr	r3, [pc, #80]	; (8011094 <TfLiteTypeGetName+0xd8>)
 8011042:	e00c      	b.n	801105e <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8011044:	4b14      	ldr	r3, [pc, #80]	; (8011098 <TfLiteTypeGetName+0xdc>)
 8011046:	e00a      	b.n	801105e <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 8011048:	4b14      	ldr	r3, [pc, #80]	; (801109c <TfLiteTypeGetName+0xe0>)
 801104a:	e008      	b.n	801105e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 801104c:	4b14      	ldr	r3, [pc, #80]	; (80110a0 <TfLiteTypeGetName+0xe4>)
 801104e:	e006      	b.n	801105e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 8011050:	4b14      	ldr	r3, [pc, #80]	; (80110a4 <TfLiteTypeGetName+0xe8>)
 8011052:	e004      	b.n	801105e <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 8011054:	4b14      	ldr	r3, [pc, #80]	; (80110a8 <TfLiteTypeGetName+0xec>)
 8011056:	e002      	b.n	801105e <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 8011058:	4b14      	ldr	r3, [pc, #80]	; (80110ac <TfLiteTypeGetName+0xf0>)
 801105a:	e000      	b.n	801105e <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 801105c:	4b14      	ldr	r3, [pc, #80]	; (80110b0 <TfLiteTypeGetName+0xf4>)
}
 801105e:	4618      	mov	r0, r3
 8011060:	370c      	adds	r7, #12
 8011062:	46bd      	mov	sp, r7
 8011064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011068:	4770      	bx	lr
 801106a:	bf00      	nop
 801106c:	0801dad0 	.word	0x0801dad0
 8011070:	0801dad8 	.word	0x0801dad8
 8011074:	0801dae0 	.word	0x0801dae0
 8011078:	0801dae8 	.word	0x0801dae8
 801107c:	0801daf0 	.word	0x0801daf0
 8011080:	0801daf8 	.word	0x0801daf8
 8011084:	0801db00 	.word	0x0801db00
 8011088:	0801db08 	.word	0x0801db08
 801108c:	0801db10 	.word	0x0801db10
 8011090:	0801db18 	.word	0x0801db18
 8011094:	0801db20 	.word	0x0801db20
 8011098:	0801db2c 	.word	0x0801db2c
 801109c:	0801db38 	.word	0x0801db38
 80110a0:	0801db40 	.word	0x0801db40
 80110a4:	0801db48 	.word	0x0801db48
 80110a8:	0801db50 	.word	0x0801db50
 80110ac:	0801db5c 	.word	0x0801db5c
 80110b0:	0801db64 	.word	0x0801db64

080110b4 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 80110b4:	b480      	push	{r7}
 80110b6:	af00      	add	r7, sp, #0
 80110b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80110bc:	4618      	mov	r0, r3
 80110be:	46bd      	mov	sp, r7
 80110c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c4:	4770      	bx	lr
	...

080110c8 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 80110c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80110cc:	b088      	sub	sp, #32
 80110ce:	af00      	add	r7, sp, #0
 80110d0:	ed87 0b02 	vstr	d0, [r7, #8]
 80110d4:	6078      	str	r0, [r7, #4]
 80110d6:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 80110d8:	f04f 0200 	mov.w	r2, #0
 80110dc:	f04f 0300 	mov.w	r3, #0
 80110e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80110e4:	f7ef fcfa 	bl	8000adc <__aeabi_dcmpeq>
 80110e8:	4603      	mov	r3, r0
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d006      	beq.n	80110fc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2200      	movs	r2, #0
 80110f2:	601a      	str	r2, [r3, #0]
    *shift = 0;
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	2200      	movs	r2, #0
 80110f8:	601a      	str	r2, [r3, #0]
    return;
 80110fa:	e068      	b.n	80111ce <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 80110fc:	6838      	ldr	r0, [r7, #0]
 80110fe:	ed97 0b02 	vldr	d0, [r7, #8]
 8011102:	f007 fe09 	bl	8018d18 <frexp>
 8011106:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 801110a:	f04f 0200 	mov.w	r2, #0
 801110e:	4b32      	ldr	r3, [pc, #200]	; (80111d8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8011110:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011114:	f7ef fa7a 	bl	800060c <__aeabi_dmul>
 8011118:	4602      	mov	r2, r0
 801111a:	460b      	mov	r3, r1
 801111c:	ec43 2b17 	vmov	d7, r2, r3
 8011120:	eeb0 0a47 	vmov.f32	s0, s14
 8011124:	eef0 0a67 	vmov.f32	s1, s15
 8011128:	f000 f97b 	bl	8011422 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 801112c:	ec53 2b10 	vmov	r2, r3, d0
 8011130:	4610      	mov	r0, r2
 8011132:	4619      	mov	r1, r3
 8011134:	f7ef fe1a 	bl	8000d6c <__aeabi_d2lz>
 8011138:	4602      	mov	r2, r0
 801113a:	460b      	mov	r3, r1
 801113c:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8011140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011144:	4925      	ldr	r1, [pc, #148]	; (80111dc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 8011146:	428a      	cmp	r2, r1
 8011148:	f173 0300 	sbcs.w	r3, r3, #0
 801114c:	db01      	blt.n	8011152 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 801114e:	f009 f871 	bl	801a234 <abort>
  if (q_fixed == (1ll << 31)) {
 8011152:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011156:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 801115a:	430b      	orrs	r3, r1
 801115c:	d118      	bne.n	8011190 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 801115e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011162:	0fd9      	lsrs	r1, r3, #31
 8011164:	2000      	movs	r0, #0
 8011166:	468a      	mov	sl, r1
 8011168:	4683      	mov	fp, r0
 801116a:	eb1a 0402 	adds.w	r4, sl, r2
 801116e:	eb4b 0503 	adc.w	r5, fp, r3
 8011172:	f04f 0200 	mov.w	r2, #0
 8011176:	f04f 0300 	mov.w	r3, #0
 801117a:	0862      	lsrs	r2, r4, #1
 801117c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8011180:	106b      	asrs	r3, r5, #1
 8011182:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	1c5a      	adds	r2, r3, #1
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8011190:	f7ff ff90 	bl	80110b4 <_ZNSt14numeric_limitsIlE3maxEv>
 8011194:	4603      	mov	r3, r0
 8011196:	17da      	asrs	r2, r3, #31
 8011198:	4698      	mov	r8, r3
 801119a:	4691      	mov	r9, r2
 801119c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80111a0:	4590      	cmp	r8, r2
 80111a2:	eb79 0303 	sbcs.w	r3, r9, r3
 80111a6:	da01      	bge.n	80111ac <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 80111a8:	f009 f844 	bl	801a234 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	f113 0f1f 	cmn.w	r3, #31
 80111b4:	da08      	bge.n	80111c8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	2200      	movs	r2, #0
 80111ba:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 80111bc:	f04f 0200 	mov.w	r2, #0
 80111c0:	f04f 0300 	mov.w	r3, #0
 80111c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 80111c8:	69ba      	ldr	r2, [r7, #24]
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	601a      	str	r2, [r3, #0]
}
 80111ce:	3720      	adds	r7, #32
 80111d0:	46bd      	mov	sp, r7
 80111d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80111d6:	bf00      	nop
 80111d8:	41e00000 	.word	0x41e00000
 80111dc:	80000001 	.word	0x80000001

080111e0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b084      	sub	sp, #16
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	ed87 0b02 	vstr	d0, [r7, #8]
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 80111ee:	f04f 0200 	mov.w	r2, #0
 80111f2:	4b0d      	ldr	r3, [pc, #52]	; (8011228 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 80111f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80111f8:	f7ef fc98 	bl	8000b2c <__aeabi_dcmpgt>
 80111fc:	4603      	mov	r3, r0
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d101      	bne.n	8011206 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 8011202:	f009 f817 	bl	801a234 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 8011206:	6839      	ldr	r1, [r7, #0]
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	ed97 0b02 	vldr	d0, [r7, #8]
 801120e:	f7ff ff5b 	bl	80110c8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	da01      	bge.n	801121e <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 801121a:	f009 f80b 	bl	801a234 <abort>
}
 801121e:	bf00      	nop
 8011220:	3710      	adds	r7, #16
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}
 8011226:	bf00      	nop
 8011228:	3ff00000 	.word	0x3ff00000

0801122c <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801122c:	b580      	push	{r7, lr}
 801122e:	b082      	sub	sp, #8
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
 8011234:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	e9d3 0100 	ldrd	r0, r1, [r3]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011242:	f7ef fc55 	bl	8000af0 <__aeabi_dcmplt>
 8011246:	4603      	mov	r3, r0
 8011248:	2b00      	cmp	r3, #0
 801124a:	d001      	beq.n	8011250 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	e000      	b.n	8011252 <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 8011250:	687b      	ldr	r3, [r7, #4]
    }
 8011252:	4618      	mov	r0, r3
 8011254:	3708      	adds	r7, #8
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}
 801125a:	0000      	movs	r0, r0
 801125c:	0000      	movs	r0, r0
	...

08011260 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 8011260:	b5b0      	push	{r4, r5, r7, lr}
 8011262:	b08e      	sub	sp, #56	; 0x38
 8011264:	af00      	add	r7, sp, #0
 8011266:	ed87 0b06 	vstr	d0, [r7, #24]
 801126a:	ed87 1b04 	vstr	d1, [r7, #16]
 801126e:	60f8      	str	r0, [r7, #12]
 8011270:	60b9      	str	r1, [r7, #8]
 8011272:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 8011274:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011278:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801127c:	f7ef f9c6 	bl	800060c <__aeabi_dmul>
 8011280:	4602      	mov	r2, r0
 8011282:	460b      	mov	r3, r1
 8011284:	4614      	mov	r4, r2
 8011286:	461d      	mov	r5, r3
 8011288:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	fa22 f303 	lsr.w	r3, r2, r3
 8011292:	4618      	mov	r0, r3
 8011294:	f7ef f950 	bl	8000538 <__aeabi_i2d>
 8011298:	4602      	mov	r2, r0
 801129a:	460b      	mov	r3, r1
 801129c:	4620      	mov	r0, r4
 801129e:	4629      	mov	r1, r5
 80112a0:	f7ef f9b4 	bl	800060c <__aeabi_dmul>
 80112a4:	4602      	mov	r2, r0
 80112a6:	460b      	mov	r3, r1
 80112a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80112ac:	a30e      	add	r3, pc, #56	; (adr r3, 80112e8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 80112ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80112b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80112ba:	f107 0320 	add.w	r3, r7, #32
 80112be:	4611      	mov	r1, r2
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7ff ffb3 	bl	801122c <_ZSt3minIdERKT_S2_S2_>
 80112c6:	4603      	mov	r3, r0
 80112c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112cc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 80112d0:	6879      	ldr	r1, [r7, #4]
 80112d2:	68b8      	ldr	r0, [r7, #8]
 80112d4:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80112d8:	f7ff ff82 	bl	80111e0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 80112dc:	bf00      	nop
 80112de:	3738      	adds	r7, #56	; 0x38
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bdb0      	pop	{r4, r5, r7, pc}
 80112e4:	f3af 8000 	nop.w
 80112e8:	ffc00000 	.word	0xffc00000
 80112ec:	41dfffff 	.word	0x41dfffff

080112f0 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 80112f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112f4:	b087      	sub	sp, #28
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	60f8      	str	r0, [r7, #12]
 80112fa:	60b9      	str	r1, [r7, #8]
 80112fc:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 80112fe:	2201      	movs	r2, #1
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	fa02 f303 	lsl.w	r3, r2, r3
 8011306:	3b01      	subs	r3, #1
 8011308:	4618      	mov	r0, r3
 801130a:	f7ef f915 	bl	8000538 <__aeabi_i2d>
 801130e:	4682      	mov	sl, r0
 8011310:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8011312:	687a      	ldr	r2, [r7, #4]
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	1ad1      	subs	r1, r2, r3
 8011318:	f04f 0201 	mov.w	r2, #1
 801131c:	f04f 0300 	mov.w	r3, #0
 8011320:	f1a1 0620 	sub.w	r6, r1, #32
 8011324:	f1c1 0020 	rsb	r0, r1, #32
 8011328:	fa03 f901 	lsl.w	r9, r3, r1
 801132c:	fa02 f606 	lsl.w	r6, r2, r6
 8011330:	ea49 0906 	orr.w	r9, r9, r6
 8011334:	fa22 f000 	lsr.w	r0, r2, r0
 8011338:	ea49 0900 	orr.w	r9, r9, r0
 801133c:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8011340:	4640      	mov	r0, r8
 8011342:	4649      	mov	r1, r9
 8011344:	f7ef f934 	bl	80005b0 <__aeabi_l2d>
 8011348:	4602      	mov	r2, r0
 801134a:	460b      	mov	r3, r1
 801134c:	4650      	mov	r0, sl
 801134e:	4659      	mov	r1, fp
 8011350:	f7ef f95c 	bl	800060c <__aeabi_dmul>
 8011354:	4602      	mov	r2, r0
 8011356:	460b      	mov	r3, r1
 8011358:	4690      	mov	r8, r2
 801135a:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 801135c:	f04f 0201 	mov.w	r2, #1
 8011360:	f04f 0300 	mov.w	r3, #0
 8011364:	68b9      	ldr	r1, [r7, #8]
 8011366:	f1a1 0620 	sub.w	r6, r1, #32
 801136a:	f1c1 0020 	rsb	r0, r1, #32
 801136e:	fa03 f501 	lsl.w	r5, r3, r1
 8011372:	fa02 f606 	lsl.w	r6, r2, r6
 8011376:	4335      	orrs	r5, r6
 8011378:	fa22 f000 	lsr.w	r0, r2, r0
 801137c:	4305      	orrs	r5, r0
 801137e:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8011382:	4620      	mov	r0, r4
 8011384:	4629      	mov	r1, r5
 8011386:	f7ef f913 	bl	80005b0 <__aeabi_l2d>
 801138a:	4602      	mov	r2, r0
 801138c:	460b      	mov	r3, r1
  const double max_input_rescaled =
 801138e:	4640      	mov	r0, r8
 8011390:	4649      	mov	r1, r9
 8011392:	f7ef fa65 	bl	8000860 <__aeabi_ddiv>
 8011396:	4602      	mov	r2, r0
 8011398:	460b      	mov	r3, r1
 801139a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 801139e:	ed97 0b04 	vldr	d0, [r7, #16]
 80113a2:	f007 fc39 	bl	8018c18 <floor>
 80113a6:	ec53 2b10 	vmov	r2, r3, d0
 80113aa:	4610      	mov	r0, r2
 80113ac:	4619      	mov	r1, r3
 80113ae:	f7ef fbdd 	bl	8000b6c <__aeabi_d2iz>
 80113b2:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	371c      	adds	r7, #28
 80113b8:	46bd      	mov	sp, r7
 80113ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080113be <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80113be:	b480      	push	{r7}
 80113c0:	b083      	sub	sp, #12
 80113c2:	af00      	add	r7, sp, #0
 80113c4:	6078      	str	r0, [r7, #4]
 80113c6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	ed93 7a00 	vldr	s14, [r3]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	edd3 7a00 	vldr	s15, [r3]
 80113d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80113d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113dc:	d501      	bpl.n	80113e2 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	e000      	b.n	80113e4 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 80113e2:	687b      	ldr	r3, [r7, #4]
    }
 80113e4:	4618      	mov	r0, r3
 80113e6:	370c      	adds	r7, #12
 80113e8:	46bd      	mov	sp, r7
 80113ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ee:	4770      	bx	lr

080113f0 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80113f0:	b480      	push	{r7}
 80113f2:	b083      	sub	sp, #12
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	ed93 7a00 	vldr	s14, [r3]
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	edd3 7a00 	vldr	s15, [r3]
 8011406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801140e:	d501      	bpl.n	8011414 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	e000      	b.n	8011416 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8011414:	687b      	ldr	r3, [r7, #4]
    }
 8011416:	4618      	mov	r0, r3
 8011418:	370c      	adds	r7, #12
 801141a:	46bd      	mov	sp, r7
 801141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011420:	4770      	bx	lr

08011422 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8011422:	b580      	push	{r7, lr}
 8011424:	b082      	sub	sp, #8
 8011426:	af00      	add	r7, sp, #0
 8011428:	ed87 0b00 	vstr	d0, [r7]
 801142c:	ed97 0b00 	vldr	d0, [r7]
 8011430:	f007 fcaa 	bl	8018d88 <round>
 8011434:	eeb0 7a40 	vmov.f32	s14, s0
 8011438:	eef0 7a60 	vmov.f32	s15, s1
 801143c:	eeb0 0a47 	vmov.f32	s0, s14
 8011440:	eef0 0a67 	vmov.f32	s1, s15
 8011444:	3708      	adds	r7, #8
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}

0801144a <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 801144a:	b580      	push	{r7, lr}
 801144c:	b082      	sub	sp, #8
 801144e:	af00      	add	r7, sp, #0
 8011450:	ed87 0a01 	vstr	s0, [r7, #4]
 8011454:	ed97 0a01 	vldr	s0, [r7, #4]
 8011458:	f7ef ff36 	bl	80012c8 <_ZSt5roundf>
 801145c:	eef0 7a40 	vmov.f32	s15, s0
 8011460:	eeb0 0a67 	vmov.f32	s0, s15
 8011464:	3708      	adds	r7, #8
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}

0801146a <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 801146a:	b480      	push	{r7}
 801146c:	af00      	add	r7, sp, #0
 801146e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8011472:	4618      	mov	r0, r3
 8011474:	46bd      	mov	sp, r7
 8011476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147a:	4770      	bx	lr

0801147c <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 801147c:	b480      	push	{r7}
 801147e:	af00      	add	r7, sp, #0
 8011480:	237f      	movs	r3, #127	; 0x7f
 8011482:	4618      	mov	r0, r3
 8011484:	46bd      	mov	sp, r7
 8011486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148a:	4770      	bx	lr

0801148c <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 801148c:	b480      	push	{r7}
 801148e:	af00      	add	r7, sp, #0
 8011490:	2300      	movs	r3, #0
 8011492:	4618      	mov	r0, r3
 8011494:	46bd      	mov	sp, r7
 8011496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149a:	4770      	bx	lr

0801149c <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 801149c:	b480      	push	{r7}
 801149e:	af00      	add	r7, sp, #0
 80114a0:	23ff      	movs	r3, #255	; 0xff
 80114a2:	4618      	mov	r0, r3
 80114a4:	46bd      	mov	sp, r7
 80114a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114aa:	4770      	bx	lr

080114ac <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 80114ac:	b480      	push	{r7}
 80114ae:	af00      	add	r7, sp, #0
 80114b0:	4b02      	ldr	r3, [pc, #8]	; (80114bc <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 80114b2:	4618      	mov	r0, r3
 80114b4:	46bd      	mov	sp, r7
 80114b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ba:	4770      	bx	lr
 80114bc:	ffff8000 	.word	0xffff8000

080114c0 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 80114c0:	b480      	push	{r7}
 80114c2:	af00      	add	r7, sp, #0
 80114c4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80114c8:	4618      	mov	r0, r3
 80114ca:	46bd      	mov	sp, r7
 80114cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d0:	4770      	bx	lr

080114d2 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 80114d2:	b480      	push	{r7}
 80114d4:	b083      	sub	sp, #12
 80114d6:	af00      	add	r7, sp, #0
 80114d8:	6078      	str	r0, [r7, #4]
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	689b      	ldr	r3, [r3, #8]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	4618      	mov	r0, r3
 80114e2:	370c      	adds	r7, #12
 80114e4:	46bd      	mov	sp, r7
 80114e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ea:	4770      	bx	lr

080114ec <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 80114ec:	b480      	push	{r7}
 80114ee:	b083      	sub	sp, #12
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	ed87 0b00 	vstr	d0, [r7]
 80114f6:	683a      	ldr	r2, [r7, #0]
 80114f8:	6879      	ldr	r1, [r7, #4]
 80114fa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80114fe:	ec43 2b17 	vmov	d7, r2, r3
 8011502:	eeb0 0a47 	vmov.f32	s0, s14
 8011506:	eef0 0a67 	vmov.f32	s1, s15
 801150a:	370c      	adds	r7, #12
 801150c:	46bd      	mov	sp, r7
 801150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011512:	4770      	bx	lr

08011514 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 8011514:	b580      	push	{r7, lr}
 8011516:	b082      	sub	sp, #8
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
 801151c:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	689b      	ldr	r3, [r3, #8]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d005      	beq.n	8011532 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	689a      	ldr	r2, [r3, #8]
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	019b      	lsls	r3, r3, #6
 801152e:	4413      	add	r3, r2
 8011530:	e006      	b.n	8011540 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011536:	6839      	ldr	r1, [r7, #0]
 8011538:	6878      	ldr	r0, [r7, #4]
 801153a:	4798      	blx	r3
 801153c:	4603      	mov	r3, r0
 801153e:	bf00      	nop
  }
}
 8011540:	4618      	mov	r0, r3
 8011542:	3708      	adds	r7, #8
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}

08011548 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 8011548:	b480      	push	{r7}
 801154a:	b087      	sub	sp, #28
 801154c:	af00      	add	r7, sp, #0
 801154e:	60f8      	str	r0, [r7, #12]
 8011550:	60b9      	str	r1, [r7, #8]
 8011552:	607a      	str	r2, [r7, #4]
 8011554:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	2b00      	cmp	r3, #0
 801155a:	db0f      	blt.n	801157c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 801155c:	68ba      	ldr	r2, [r7, #8]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	429a      	cmp	r2, r3
 8011562:	da0b      	bge.n	801157c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	009b      	lsls	r3, r3, #2
 8011568:	683a      	ldr	r2, [r7, #0]
 801156a:	4413      	add	r3, r2
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011576:	d001      	beq.n	801157c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	e001      	b.n	8011580 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 801157c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011580:	4618      	mov	r0, r3
 8011582:	371c      	adds	r7, #28
 8011584:	46bd      	mov	sp, r7
 8011586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158a:	4770      	bx	lr

0801158c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 801158c:	b580      	push	{r7, lr}
 801158e:	b086      	sub	sp, #24
 8011590:	af00      	add	r7, sp, #0
 8011592:	60f8      	str	r0, [r7, #12]
 8011594:	60b9      	str	r1, [r7, #8]
 8011596:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 801159c:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 801159e:	68bb      	ldr	r3, [r7, #8]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 80115a4:	6879      	ldr	r1, [r7, #4]
 80115a6:	68f8      	ldr	r0, [r7, #12]
 80115a8:	f7ff ffce 	bl	8011548 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 80115ac:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	da01      	bge.n	80115b8 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 80115b4:	2300      	movs	r3, #0
 80115b6:	e005      	b.n	80115c4 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 80115b8:	6979      	ldr	r1, [r7, #20]
 80115ba:	68f8      	ldr	r0, [r7, #12]
 80115bc:	f7ff ffaa 	bl	8011514 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 80115c0:	4603      	mov	r3, r0
 80115c2:	bf00      	nop
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	3718      	adds	r7, #24
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}

080115cc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b084      	sub	sp, #16
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	60f8      	str	r0, [r7, #12]
 80115d4:	60b9      	str	r1, [r7, #8]
 80115d6:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	68b9      	ldr	r1, [r7, #8]
 80115dc:	68f8      	ldr	r0, [r7, #12]
 80115de:	f7ff ffd5 	bl	801158c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 80115e2:	4603      	mov	r3, r0
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	3710      	adds	r7, #16
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}

080115ec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b086      	sub	sp, #24
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	60f8      	str	r0, [r7, #12]
 80115f4:	60b9      	str	r1, [r7, #8]
 80115f6:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 80115fc:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8011604:	6879      	ldr	r1, [r7, #4]
 8011606:	68f8      	ldr	r0, [r7, #12]
 8011608:	f7ff ff9e 	bl	8011548 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801160c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	2b00      	cmp	r3, #0
 8011612:	da01      	bge.n	8011618 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8011614:	2300      	movs	r3, #0
 8011616:	e005      	b.n	8011624 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8011618:	6979      	ldr	r1, [r7, #20]
 801161a:	68f8      	ldr	r0, [r7, #12]
 801161c:	f7ff ff7a 	bl	8011514 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8011620:	4603      	mov	r3, r0
 8011622:	bf00      	nop
}
 8011624:	4618      	mov	r0, r3
 8011626:	3718      	adds	r7, #24
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}

0801162c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 801162c:	b580      	push	{r7, lr}
 801162e:	b084      	sub	sp, #16
 8011630:	af00      	add	r7, sp, #0
 8011632:	60f8      	str	r0, [r7, #12]
 8011634:	60b9      	str	r1, [r7, #8]
 8011636:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 8011638:	687a      	ldr	r2, [r7, #4]
 801163a:	68b9      	ldr	r1, [r7, #8]
 801163c:	68f8      	ldr	r0, [r7, #12]
 801163e:	f7ff ffc5 	bl	80115cc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8011642:	4603      	mov	r3, r0
}
 8011644:	4618      	mov	r0, r3
 8011646:	3710      	adds	r7, #16
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}
 801164c:	0000      	movs	r0, r0
	...

08011650 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8011650:	b5b0      	push	{r4, r5, r7, lr}
 8011652:	b08e      	sub	sp, #56	; 0x38
 8011654:	af02      	add	r7, sp, #8
 8011656:	60f8      	str	r0, [r7, #12]
 8011658:	60b9      	str	r1, [r7, #8]
 801165a:	607a      	str	r2, [r7, #4]
 801165c:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801165e:	68bb      	ldr	r3, [r7, #8]
 8011660:	68db      	ldr	r3, [r3, #12]
 8011662:	4618      	mov	r0, r3
 8011664:	f7ee ff7a 	bl	800055c <__aeabi_f2d>
 8011668:	4604      	mov	r4, r0
 801166a:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	68db      	ldr	r3, [r3, #12]
 8011670:	4618      	mov	r0, r3
 8011672:	f7ee ff73 	bl	800055c <__aeabi_f2d>
 8011676:	4602      	mov	r2, r0
 8011678:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801167a:	4620      	mov	r0, r4
 801167c:	4629      	mov	r1, r5
 801167e:	f7ee ffc5 	bl	800060c <__aeabi_dmul>
 8011682:	4602      	mov	r2, r0
 8011684:	460b      	mov	r3, r1
 8011686:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d04b      	beq.n	8011728 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	68db      	ldr	r3, [r3, #12]
 8011694:	4618      	mov	r0, r3
 8011696:	f7ee ff61 	bl	800055c <__aeabi_f2d>
 801169a:	4602      	mov	r2, r0
 801169c:	460b      	mov	r3, r1
 801169e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 80116a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80116a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80116aa:	f7ee fdf7 	bl	800029c <__aeabi_dsub>
 80116ae:	4602      	mov	r2, r0
 80116b0:	460b      	mov	r3, r1
 80116b2:	ec43 2b17 	vmov	d7, r2, r3
 80116b6:	eeb0 0a47 	vmov.f32	s0, s14
 80116ba:	eef0 0a67 	vmov.f32	s1, s15
 80116be:	f7ff ff15 	bl	80114ec <_ZSt3absd>
 80116c2:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 80116c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116c8:	68db      	ldr	r3, [r3, #12]
 80116ca:	4618      	mov	r0, r3
 80116cc:	f7ee ff46 	bl	800055c <__aeabi_f2d>
 80116d0:	4602      	mov	r2, r0
 80116d2:	460b      	mov	r3, r1
 80116d4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 80116d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80116dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80116e0:	f7ef f8be 	bl	8000860 <__aeabi_ddiv>
 80116e4:	4602      	mov	r2, r0
 80116e6:	460b      	mov	r3, r1
 80116e8:	4610      	mov	r0, r2
 80116ea:	4619      	mov	r1, r3
 80116ec:	2301      	movs	r3, #1
 80116ee:	461c      	mov	r4, r3
 80116f0:	a318      	add	r3, pc, #96	; (adr r3, 8011754 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 80116f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f6:	f7ef fa05 	bl	8000b04 <__aeabi_dcmple>
 80116fa:	4603      	mov	r3, r0
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d101      	bne.n	8011704 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8011700:	2300      	movs	r3, #0
 8011702:	461c      	mov	r4, r3
 8011704:	b2e3      	uxtb	r3, r4
 8011706:	f083 0301 	eor.w	r3, r3, #1
 801170a:	b2db      	uxtb	r3, r3
 801170c:	2b00      	cmp	r3, #0
 801170e:	d00b      	beq.n	8011728 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	695c      	ldr	r4, [r3, #20]
 8011714:	4b0c      	ldr	r3, [pc, #48]	; (8011748 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8011716:	9300      	str	r3, [sp, #0]
 8011718:	f44f 73a2 	mov.w	r3, #324	; 0x144
 801171c:	4a0b      	ldr	r2, [pc, #44]	; (801174c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 801171e:	490c      	ldr	r1, [pc, #48]	; (8011750 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8011720:	68f8      	ldr	r0, [r7, #12]
 8011722:	47a0      	blx	r4
 8011724:	2301      	movs	r3, #1
 8011726:	e009      	b.n	801173c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8011728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801172a:	9300      	str	r3, [sp, #0]
 801172c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801172e:	687a      	ldr	r2, [r7, #4]
 8011730:	68b9      	ldr	r1, [r7, #8]
 8011732:	68f8      	ldr	r0, [r7, #12]
 8011734:	f000 f812 	bl	801175c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8011738:	4603      	mov	r3, r0
                                          multiplier);
 801173a:	bf00      	nop
}
 801173c:	4618      	mov	r0, r3
 801173e:	3730      	adds	r7, #48	; 0x30
 8011740:	46bd      	mov	sp, r7
 8011742:	bdb0      	pop	{r4, r5, r7, pc}
 8011744:	f3af 8000 	nop.w
 8011748:	0801ddec 	.word	0x0801ddec
 801174c:	0801dbd4 	.word	0x0801dbd4
 8011750:	0801dcd8 	.word	0x0801dcd8
 8011754:	47ae147b 	.word	0x47ae147b
 8011758:	3f947ae1 	.word	0x3f947ae1

0801175c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 801175c:	b590      	push	{r4, r7, lr}
 801175e:	b089      	sub	sp, #36	; 0x24
 8011760:	af02      	add	r7, sp, #8
 8011762:	60f8      	str	r0, [r7, #12]
 8011764:	60b9      	str	r1, [r7, #8]
 8011766:	607a      	str	r2, [r7, #4]
 8011768:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	ed93 7a03 	vldr	s14, [r3, #12]
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	edd3 7a03 	vldr	s15, [r3, #12]
 8011776:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 801177a:	ee17 0a90 	vmov	r0, s15
 801177e:	f7ee feed 	bl	800055c <__aeabi_f2d>
 8011782:	4602      	mov	r2, r0
 8011784:	460b      	mov	r3, r1
 8011786:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 801178a:	2301      	movs	r3, #1
 801178c:	461c      	mov	r4, r3
 801178e:	f04f 0200 	mov.w	r2, #0
 8011792:	f04f 0300 	mov.w	r3, #0
 8011796:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801179a:	f7ef f9bd 	bl	8000b18 <__aeabi_dcmpge>
 801179e:	4603      	mov	r3, r0
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d101      	bne.n	80117a8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 80117a4:	2300      	movs	r3, #0
 80117a6:	461c      	mov	r4, r3
 80117a8:	b2e3      	uxtb	r3, r4
 80117aa:	f083 0301 	eor.w	r3, r3, #1
 80117ae:	b2db      	uxtb	r3, r3
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d00b      	beq.n	80117cc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	695c      	ldr	r4, [r3, #20]
 80117b8:	4b0f      	ldr	r3, [pc, #60]	; (80117f8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 80117ba:	9300      	str	r3, [sp, #0]
 80117bc:	f240 1351 	movw	r3, #337	; 0x151
 80117c0:	4a0e      	ldr	r2, [pc, #56]	; (80117fc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 80117c2:	490f      	ldr	r1, [pc, #60]	; (8011800 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 80117c4:	68f8      	ldr	r0, [r7, #12]
 80117c6:	47a0      	blx	r4
 80117c8:	2301      	movs	r3, #1
 80117ca:	e010      	b.n	80117ee <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	68db      	ldr	r3, [r3, #12]
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7ee fec3 	bl	800055c <__aeabi_f2d>
 80117d6:	4602      	mov	r2, r0
 80117d8:	460b      	mov	r3, r1
 80117da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80117de:	f7ef f83f 	bl	8000860 <__aeabi_ddiv>
 80117e2:	4602      	mov	r2, r0
 80117e4:	460b      	mov	r3, r1
 80117e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80117e8:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 80117ec:	2300      	movs	r3, #0
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	371c      	adds	r7, #28
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bd90      	pop	{r4, r7, pc}
 80117f6:	bf00      	nop
 80117f8:	0801de10 	.word	0x0801de10
 80117fc:	0801dbd4 	.word	0x0801dbd4
 8011800:	0801dcd8 	.word	0x0801dcd8

08011804 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 8011804:	b580      	push	{r7, lr}
 8011806:	b082      	sub	sp, #8
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
 801180c:	ed87 0a00 	vstr	s0, [r7]
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8011816:	ed97 7a00 	vldr	s14, [r7]
 801181a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801181e:	eeb0 0a66 	vmov.f32	s0, s13
 8011822:	f7ff fe12 	bl	801144a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8011826:	eef0 7a40 	vmov.f32	s15, s0
 801182a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801182e:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8011836:	4413      	add	r3, r2
  };
 8011838:	4618      	mov	r0, r3
 801183a:	3708      	adds	r7, #8
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}

08011840 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 8011840:	b580      	push	{r7, lr}
 8011842:	b08e      	sub	sp, #56	; 0x38
 8011844:	af00      	add	r7, sp, #0
 8011846:	60b9      	str	r1, [r7, #8]
 8011848:	607a      	str	r2, [r7, #4]
 801184a:	603b      	str	r3, [r7, #0]
 801184c:	4603      	mov	r3, r0
 801184e:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	68db      	ldr	r3, [r3, #12]
 8011854:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	691b      	ldr	r3, [r3, #16]
 801185a:	633b      	str	r3, [r7, #48]	; 0x30
  };
 801185c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801185e:	617b      	str	r3, [r7, #20]
 8011860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011862:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 8011864:	7bfb      	ldrb	r3, [r7, #15]
 8011866:	2b01      	cmp	r3, #1
 8011868:	d118      	bne.n	801189c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 801186a:	f107 0314 	add.w	r3, r7, #20
 801186e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8011964 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8011872:	4618      	mov	r0, r3
 8011874:	f7ff ffc6 	bl	8011804 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8011878:	4603      	mov	r3, r0
 801187a:	61fb      	str	r3, [r7, #28]
 801187c:	f107 021c 	add.w	r2, r7, #28
 8011880:	f107 0308 	add.w	r3, r7, #8
 8011884:	4611      	mov	r1, r2
 8011886:	4618      	mov	r0, r3
 8011888:	f000 f8d6 	bl	8011a38 <_ZSt3maxIlERKT_S2_S2_>
 801188c:	4603      	mov	r3, r0
 801188e:	681a      	ldr	r2, [r3, #0]
 8011890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011892:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8011894:	687a      	ldr	r2, [r7, #4]
 8011896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011898:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 801189a:	e05f      	b.n	801195c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 801189c:	7bfb      	ldrb	r3, [r7, #15]
 801189e:	2b03      	cmp	r3, #3
 80118a0:	d129      	bne.n	80118f6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 80118a2:	f107 0314 	add.w	r3, r7, #20
 80118a6:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8011964 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7ff ffaa 	bl	8011804 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80118b0:	4603      	mov	r3, r0
 80118b2:	623b      	str	r3, [r7, #32]
 80118b4:	f107 0220 	add.w	r2, r7, #32
 80118b8:	f107 0308 	add.w	r3, r7, #8
 80118bc:	4611      	mov	r1, r2
 80118be:	4618      	mov	r0, r3
 80118c0:	f000 f8ba 	bl	8011a38 <_ZSt3maxIlERKT_S2_S2_>
 80118c4:	4603      	mov	r3, r0
 80118c6:	681a      	ldr	r2, [r3, #0]
 80118c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118ca:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 80118cc:	f107 0314 	add.w	r3, r7, #20
 80118d0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80118d4:	4618      	mov	r0, r3
 80118d6:	f7ff ff95 	bl	8011804 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80118da:	4603      	mov	r3, r0
 80118dc:	627b      	str	r3, [r7, #36]	; 0x24
 80118de:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80118e2:	1d3b      	adds	r3, r7, #4
 80118e4:	4611      	mov	r1, r2
 80118e6:	4618      	mov	r0, r3
 80118e8:	f000 f892 	bl	8011a10 <_ZSt3minIlERKT_S2_S2_>
 80118ec:	4603      	mov	r3, r0
 80118ee:	681a      	ldr	r2, [r3, #0]
 80118f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118f2:	601a      	str	r2, [r3, #0]
}
 80118f4:	e032      	b.n	801195c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 80118f6:	7bfb      	ldrb	r3, [r7, #15]
 80118f8:	2b02      	cmp	r3, #2
 80118fa:	d129      	bne.n	8011950 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 80118fc:	f107 0314 	add.w	r3, r7, #20
 8011900:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8011904:	4618      	mov	r0, r3
 8011906:	f7ff ff7d 	bl	8011804 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801190a:	4603      	mov	r3, r0
 801190c:	62bb      	str	r3, [r7, #40]	; 0x28
 801190e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011912:	f107 0308 	add.w	r3, r7, #8
 8011916:	4611      	mov	r1, r2
 8011918:	4618      	mov	r0, r3
 801191a:	f000 f88d 	bl	8011a38 <_ZSt3maxIlERKT_S2_S2_>
 801191e:	4603      	mov	r3, r0
 8011920:	681a      	ldr	r2, [r3, #0]
 8011922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011924:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 8011926:	f107 0314 	add.w	r3, r7, #20
 801192a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801192e:	4618      	mov	r0, r3
 8011930:	f7ff ff68 	bl	8011804 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8011934:	4603      	mov	r3, r0
 8011936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011938:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801193c:	1d3b      	adds	r3, r7, #4
 801193e:	4611      	mov	r1, r2
 8011940:	4618      	mov	r0, r3
 8011942:	f000 f865 	bl	8011a10 <_ZSt3minIlERKT_S2_S2_>
 8011946:	4603      	mov	r3, r0
 8011948:	681a      	ldr	r2, [r3, #0]
 801194a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801194c:	601a      	str	r2, [r3, #0]
}
 801194e:	e005      	b.n	801195c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 8011950:	68ba      	ldr	r2, [r7, #8]
 8011952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011954:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8011956:	687a      	ldr	r2, [r7, #4]
 8011958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801195a:	601a      	str	r2, [r3, #0]
}
 801195c:	bf00      	nop
 801195e:	3738      	adds	r7, #56	; 0x38
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}
 8011964:	00000000 	.word	0x00000000

08011968 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8011968:	b590      	push	{r4, r7, lr}
 801196a:	b089      	sub	sp, #36	; 0x24
 801196c:	af02      	add	r7, sp, #8
 801196e:	60f8      	str	r0, [r7, #12]
 8011970:	607a      	str	r2, [r7, #4]
 8011972:	603b      	str	r3, [r7, #0]
 8011974:	460b      	mov	r3, r1
 8011976:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8011978:	2300      	movs	r3, #0
 801197a:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 801197c:	2300      	movs	r3, #0
 801197e:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	781b      	ldrb	r3, [r3, #0]
 8011984:	2b03      	cmp	r3, #3
 8011986:	d108      	bne.n	801199a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8011988:	f7ff fd80 	bl	801148c <_ZNSt14numeric_limitsIhE3minEv>
 801198c:	4603      	mov	r3, r0
 801198e:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8011990:	f7ff fd84 	bl	801149c <_ZNSt14numeric_limitsIhE3maxEv>
 8011994:	4603      	mov	r3, r0
 8011996:	613b      	str	r3, [r7, #16]
 8011998:	e025      	b.n	80119e6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	781b      	ldrb	r3, [r3, #0]
 801199e:	2b09      	cmp	r3, #9
 80119a0:	d108      	bne.n	80119b4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 80119a2:	f7ff fd62 	bl	801146a <_ZNSt14numeric_limitsIaE3minEv>
 80119a6:	4603      	mov	r3, r0
 80119a8:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 80119aa:	f7ff fd67 	bl	801147c <_ZNSt14numeric_limitsIaE3maxEv>
 80119ae:	4603      	mov	r3, r0
 80119b0:	613b      	str	r3, [r7, #16]
 80119b2:	e018      	b.n	80119e6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	781b      	ldrb	r3, [r3, #0]
 80119b8:	2b07      	cmp	r3, #7
 80119ba:	d108      	bne.n	80119ce <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 80119bc:	f7ff fd76 	bl	80114ac <_ZNSt14numeric_limitsIsE3minEv>
 80119c0:	4603      	mov	r3, r0
 80119c2:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 80119c4:	f7ff fd7c 	bl	80114c0 <_ZNSt14numeric_limitsIsE3maxEv>
 80119c8:	4603      	mov	r3, r0
 80119ca:	613b      	str	r3, [r7, #16]
 80119cc:	e00b      	b.n	80119e6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	695c      	ldr	r4, [r3, #20]
 80119d2:	4b0c      	ldr	r3, [pc, #48]	; (8011a04 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 80119d4:	9300      	str	r3, [sp, #0]
 80119d6:	f44f 73c2 	mov.w	r3, #388	; 0x184
 80119da:	4a0b      	ldr	r2, [pc, #44]	; (8011a08 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 80119dc:	490b      	ldr	r1, [pc, #44]	; (8011a0c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 80119de:	68f8      	ldr	r0, [r7, #12]
 80119e0:	47a0      	blx	r4
 80119e2:	2301      	movs	r3, #1
 80119e4:	e00a      	b.n	80119fc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 80119e6:	7af8      	ldrb	r0, [r7, #11]
 80119e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ea:	9301      	str	r3, [sp, #4]
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	9300      	str	r3, [sp, #0]
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	693a      	ldr	r2, [r7, #16]
 80119f4:	6979      	ldr	r1, [r7, #20]
 80119f6:	f7ff ff23 	bl	8011840 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 80119fa:	2300      	movs	r3, #0
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	371c      	adds	r7, #28
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd90      	pop	{r4, r7, pc}
 8011a04:	0801de2c 	.word	0x0801de2c
 8011a08:	0801dbd4 	.word	0x0801dbd4
 8011a0c:	0801dcd8 	.word	0x0801dcd8

08011a10 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8011a10:	b480      	push	{r7}
 8011a12:	b083      	sub	sp, #12
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
 8011a18:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	681a      	ldr	r2, [r3, #0]
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	429a      	cmp	r2, r3
 8011a24:	da01      	bge.n	8011a2a <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	e000      	b.n	8011a2c <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8011a2a:	687b      	ldr	r3, [r7, #4]
    }
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	370c      	adds	r7, #12
 8011a30:	46bd      	mov	sp, r7
 8011a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a36:	4770      	bx	lr

08011a38 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8011a38:	b480      	push	{r7}
 8011a3a:	b083      	sub	sp, #12
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
 8011a40:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681a      	ldr	r2, [r3, #0]
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	da01      	bge.n	8011a52 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8011a4e:	683b      	ldr	r3, [r7, #0]
 8011a50:	e000      	b.n	8011a54 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8011a52:	687b      	ldr	r3, [r7, #4]
    }
 8011a54:	4618      	mov	r0, r3
 8011a56:	370c      	adds	r7, #12
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5e:	4770      	bx	lr

08011a60 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8011a60:	b480      	push	{r7}
 8011a62:	b083      	sub	sp, #12
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	601a      	str	r2, [r3, #0]
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	4618      	mov	r0, r3
 8011a72:	370c      	adds	r7, #12
 8011a74:	46bd      	mov	sp, r7
 8011a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7a:	4770      	bx	lr

08011a7c <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b084      	sub	sp, #16
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	60f8      	str	r0, [r7, #12]
 8011a84:	60b9      	str	r1, [r7, #8]
 8011a86:	607a      	str	r2, [r7, #4]
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8011a8e:	687a      	ldr	r2, [r7, #4]
 8011a90:	68b9      	ldr	r1, [r7, #8]
 8011a92:	68f8      	ldr	r0, [r7, #12]
 8011a94:	f000 f866 	bl	8011b64 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3710      	adds	r7, #16
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}

08011aa2 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 8011aa2:	b580      	push	{r7, lr}
 8011aa4:	b082      	sub	sp, #8
 8011aa6:	af00      	add	r7, sp, #0
 8011aa8:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	2b05      	cmp	r3, #5
 8011ab0:	dd08      	ble.n	8011ac4 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	685b      	ldr	r3, [r3, #4]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d004      	beq.n	8011ac4 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	685b      	ldr	r3, [r3, #4]
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f007 f882 	bl	8018bc8 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3708      	adds	r7, #8
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}

08011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 8011ace:	b480      	push	{r7}
 8011ad0:	b083      	sub	sp, #12
 8011ad2:	af00      	add	r7, sp, #0
 8011ad4:	6078      	str	r0, [r7, #4]
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	4618      	mov	r0, r3
 8011adc:	370c      	adds	r7, #12
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae4:	4770      	bx	lr

08011ae6 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 8011ae6:	b480      	push	{r7}
 8011ae8:	b083      	sub	sp, #12
 8011aea:	af00      	add	r7, sp, #0
 8011aec:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	2b05      	cmp	r3, #5
 8011af4:	dd02      	ble.n	8011afc <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	685b      	ldr	r3, [r3, #4]
 8011afa:	e001      	b.n	8011b00 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	3304      	adds	r3, #4
  }
 8011b00:	4618      	mov	r0, r3
 8011b02:	370c      	adds	r7, #12
 8011b04:	46bd      	mov	sp, r7
 8011b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0a:	4770      	bx	lr

08011b0c <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b082      	sub	sp, #8
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	2b05      	cmp	r3, #5
 8011b1c:	dd08      	ble.n	8011b30 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	685b      	ldr	r3, [r3, #4]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d004      	beq.n	8011b30 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	685b      	ldr	r3, [r3, #4]
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f007 f84c 	bl	8018bc8 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	683a      	ldr	r2, [r7, #0]
 8011b34:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	2b05      	cmp	r3, #5
 8011b3a:	dd0f      	ble.n	8011b5c <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8011b42:	4293      	cmp	r3, r2
 8011b44:	d201      	bcs.n	8011b4a <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 8011b46:	009b      	lsls	r3, r3, #2
 8011b48:	e001      	b.n	8011b4e <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 8011b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f007 f84d 	bl	8018bee <_Znaj>
 8011b54:	4603      	mov	r3, r0
 8011b56:	461a      	mov	r2, r3
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8011b5c:	bf00      	nop
 8011b5e:	3708      	adds	r7, #8
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}

08011b64 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b086      	sub	sp, #24
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	60f8      	str	r0, [r7, #12]
 8011b6c:	60b9      	str	r1, [r7, #8]
 8011b6e:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8011b70:	68b9      	ldr	r1, [r7, #8]
 8011b72:	68f8      	ldr	r0, [r7, #12]
 8011b74:	f7ff ffca 	bl	8011b0c <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 8011b78:	68f8      	ldr	r0, [r7, #12]
 8011b7a:	f7ff ffb4 	bl	8011ae6 <_ZN6tflite12RuntimeShape8DimsDataEv>
 8011b7e:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	009b      	lsls	r3, r3, #2
 8011b84:	461a      	mov	r2, r3
 8011b86:	6879      	ldr	r1, [r7, #4]
 8011b88:	6978      	ldr	r0, [r7, #20]
 8011b8a:	f008 fbd1 	bl	801a330 <memcpy>
  }
 8011b8e:	bf00      	nop
 8011b90:	3718      	adds	r7, #24
 8011b92:	46bd      	mov	sp, r7
 8011b94:	bd80      	pop	{r7, pc}

08011b96 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8011b96:	b580      	push	{r7, lr}
 8011b98:	b086      	sub	sp, #24
 8011b9a:	af00      	add	r7, sp, #0
 8011b9c:	6078      	str	r0, [r7, #4]
 8011b9e:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d103      	bne.n	8011bae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f7ff ff5a 	bl	8011a60 <_ZN6tflite12RuntimeShapeC1Ev>
 8011bac:	e00d      	b.n	8011bca <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	689b      	ldr	r3, [r3, #8]
 8011bb2:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8011bba:	697b      	ldr	r3, [r7, #20]
 8011bbc:	3304      	adds	r3, #4
 8011bbe:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8011bc0:	68fa      	ldr	r2, [r7, #12]
 8011bc2:	6939      	ldr	r1, [r7, #16]
 8011bc4:	6878      	ldr	r0, [r7, #4]
 8011bc6:	f7ff ff59 	bl	8011a7c <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	3718      	adds	r7, #24
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}

08011bd2 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8011bd2:	b480      	push	{r7}
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011bda:	4618      	mov	r0, r3
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be2:	4770      	bx	lr

08011be4 <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 8011be4:	b480      	push	{r7}
 8011be6:	af00      	add	r7, sp, #0
 8011be8:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8011bec:	ee07 3a90 	vmov	s15, r3
 8011bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfa:	4770      	bx	lr

08011bfc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8011bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011c00:	b092      	sub	sp, #72	; 0x48
 8011c02:	af00      	add	r7, sp, #0
 8011c04:	61f8      	str	r0, [r7, #28]
 8011c06:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8011c08:	69fa      	ldr	r2, [r7, #28]
 8011c0a:	69bb      	ldr	r3, [r7, #24]
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d107      	bne.n	8011c20 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8011c10:	f7ff ffdf 	bl	8011bd2 <_ZNSt14numeric_limitsIlE3minEv>
 8011c14:	4602      	mov	r2, r0
 8011c16:	69fb      	ldr	r3, [r7, #28]
 8011c18:	4293      	cmp	r3, r2
 8011c1a:	d101      	bne.n	8011c20 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8011c1c:	2301      	movs	r3, #1
 8011c1e:	e000      	b.n	8011c22 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 8011c20:	2300      	movs	r3, #0
 8011c22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 8011c26:	69fb      	ldr	r3, [r7, #28]
 8011c28:	17da      	asrs	r2, r3, #31
 8011c2a:	60bb      	str	r3, [r7, #8]
 8011c2c:	60fa      	str	r2, [r7, #12]
 8011c2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011c32:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 8011c36:	69bb      	ldr	r3, [r7, #24]
 8011c38:	17da      	asrs	r2, r3, #31
 8011c3a:	603b      	str	r3, [r7, #0]
 8011c3c:	607a      	str	r2, [r7, #4]
 8011c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011c42:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 8011c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c4a:	fb03 f202 	mul.w	r2, r3, r2
 8011c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011c52:	fb01 f303 	mul.w	r3, r1, r3
 8011c56:	4413      	add	r3, r2
 8011c58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c5c:	fba1 4502 	umull	r4, r5, r1, r2
 8011c60:	442b      	add	r3, r5
 8011c62:	461d      	mov	r5, r3
 8011c64:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8011c68:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8011c6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	db02      	blt.n	8011c7a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 8011c74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011c78:	e000      	b.n	8011c7c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 8011c7a:	4b1a      	ldr	r3, [pc, #104]	; (8011ce4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 8011c7c:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8011c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c80:	17da      	asrs	r2, r3, #31
 8011c82:	4698      	mov	r8, r3
 8011c84:	4691      	mov	r9, r2
 8011c86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011c8a:	eb18 0102 	adds.w	r1, r8, r2
 8011c8e:	6139      	str	r1, [r7, #16]
 8011c90:	eb49 0303 	adc.w	r3, r9, r3
 8011c94:	617b      	str	r3, [r7, #20]
 8011c96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	da07      	bge.n	8011cae <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 8011c9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011ca2:	eb12 0a01 	adds.w	sl, r2, r1
 8011ca6:	f143 0b00 	adc.w	fp, r3, #0
 8011caa:	4652      	mov	r2, sl
 8011cac:	465b      	mov	r3, fp
 8011cae:	f04f 0000 	mov.w	r0, #0
 8011cb2:	f04f 0100 	mov.w	r1, #0
 8011cb6:	0fd0      	lsrs	r0, r2, #31
 8011cb8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011cbc:	17d9      	asrs	r1, r3, #31
 8011cbe:	4602      	mov	r2, r0
 8011cc0:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 8011cc2:	4613      	mov	r3, r2
 8011cc4:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8011cc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d003      	beq.n	8011cd6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 8011cce:	f7ff f9f1 	bl	80110b4 <_ZNSt14numeric_limitsIlE3maxEv>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	e000      	b.n	8011cd8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 8011cd6:	6a3b      	ldr	r3, [r7, #32]
}
 8011cd8:	4618      	mov	r0, r3
 8011cda:	3748      	adds	r7, #72	; 0x48
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011ce2:	bf00      	nop
 8011ce4:	c0000001 	.word	0xc0000001

08011ce8 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b082      	sub	sp, #8
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
 8011cf0:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	da01      	bge.n	8011cfc <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8011cf8:	f008 fa9c 	bl	801a234 <abort>
    TFLITE_DCHECK_LT(i, size_);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	683a      	ldr	r2, [r7, #0]
 8011d02:	429a      	cmp	r2, r3
 8011d04:	db01      	blt.n	8011d0a <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8011d06:	f008 fa95 	bl	801a234 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2b05      	cmp	r3, #5
 8011d10:	dd06      	ble.n	8011d20 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	685a      	ldr	r2, [r3, #4]
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	009b      	lsls	r3, r3, #2
 8011d1a:	4413      	add	r3, r2
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	e004      	b.n	8011d2a <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8011d20:	687a      	ldr	r2, [r7, #4]
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	009b      	lsls	r3, r3, #2
 8011d26:	4413      	add	r3, r2
 8011d28:	685b      	ldr	r3, [r3, #4]
  }
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3708      	adds	r7, #8
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}

08011d32 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 8011d32:	b480      	push	{r7}
 8011d34:	b083      	sub	sp, #12
 8011d36:	af00      	add	r7, sp, #0
 8011d38:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	2b05      	cmp	r3, #5
 8011d40:	dd02      	ble.n	8011d48 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	685b      	ldr	r3, [r3, #4]
 8011d46:	e001      	b.n	8011d4c <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	3304      	adds	r3, #4
  }
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	370c      	adds	r7, #12
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr

08011d58 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b086      	sub	sp, #24
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8011d60:	2301      	movs	r3, #1
 8011d62:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8011d64:	6878      	ldr	r0, [r7, #4]
 8011d66:	f7ff ffe4 	bl	8011d32 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8011d6a:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	613b      	str	r3, [r7, #16]
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	693a      	ldr	r2, [r7, #16]
 8011d76:	429a      	cmp	r2, r3
 8011d78:	da0c      	bge.n	8011d94 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 8011d7a:	693b      	ldr	r3, [r7, #16]
 8011d7c:	009b      	lsls	r3, r3, #2
 8011d7e:	68fa      	ldr	r2, [r7, #12]
 8011d80:	4413      	add	r3, r2
 8011d82:	681a      	ldr	r2, [r3, #0]
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	fb02 f303 	mul.w	r3, r2, r3
 8011d8a:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8011d8c:	693b      	ldr	r3, [r7, #16]
 8011d8e:	3301      	adds	r3, #1
 8011d90:	613b      	str	r3, [r7, #16]
 8011d92:	e7ed      	b.n	8011d70 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 8011d94:	697b      	ldr	r3, [r7, #20]
  }
 8011d96:	4618      	mov	r0, r3
 8011d98:	3718      	adds	r7, #24
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}

08011d9e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 8011d9e:	b590      	push	{r4, r7, lr}
 8011da0:	b085      	sub	sp, #20
 8011da2:	af00      	add	r7, sp, #0
 8011da4:	6078      	str	r0, [r7, #4]
 8011da6:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f7ff fe90 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011dae:	4604      	mov	r4, r0
 8011db0:	6838      	ldr	r0, [r7, #0]
 8011db2:	f7ff fe8c 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011db6:	4603      	mov	r3, r0
 8011db8:	429c      	cmp	r4, r3
 8011dba:	d001      	beq.n	8011dc0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 8011dbc:	f008 fa3a 	bl	801a234 <abort>
  const int dims_count = shape.DimensionsCount();
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	f7ff fe84 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011dc6:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 8011dc8:	2300      	movs	r3, #0
 8011dca:	60fb      	str	r3, [r7, #12]
 8011dcc:	68fa      	ldr	r2, [r7, #12]
 8011dce:	68bb      	ldr	r3, [r7, #8]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	da11      	bge.n	8011df8 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8011dd4:	68f9      	ldr	r1, [r7, #12]
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f7ff ff86 	bl	8011ce8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011ddc:	4604      	mov	r4, r0
 8011dde:	68f9      	ldr	r1, [r7, #12]
 8011de0:	6838      	ldr	r0, [r7, #0]
 8011de2:	f7ff ff81 	bl	8011ce8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011de6:	4603      	mov	r3, r0
 8011de8:	429c      	cmp	r4, r3
 8011dea:	d001      	beq.n	8011df0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 8011dec:	f008 fa22 	bl	801a234 <abort>
  for (int i = 0; i < dims_count; ++i) {
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	3301      	adds	r3, #1
 8011df4:	60fb      	str	r3, [r7, #12]
 8011df6:	e7e9      	b.n	8011dcc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	f7ff ffad 	bl	8011d58 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8011dfe:	4603      	mov	r3, r0
}
 8011e00:	4618      	mov	r0, r3
 8011e02:	3714      	adds	r7, #20
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd90      	pop	{r4, r7, pc}

08011e08 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b086      	sub	sp, #24
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	60f8      	str	r0, [r7, #12]
 8011e10:	60b9      	str	r1, [r7, #8]
 8011e12:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011e1a:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	dc02      	bgt.n	8011e28 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	425b      	negs	r3, r3
 8011e26:	e000      	b.n	8011e2a <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 8011e28:	2300      	movs	r3, #0
 8011e2a:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8011e2c:	68fa      	ldr	r2, [r7, #12]
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	fa02 f303 	lsl.w	r3, r2, r3
 8011e34:	68b9      	ldr	r1, [r7, #8]
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7ff fee0 	bl	8011bfc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	6939      	ldr	r1, [r7, #16]
 8011e40:	4618      	mov	r0, r3
 8011e42:	f000 fb4b 	bl	80124dc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8011e46:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	3718      	adds	r7, #24
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}

08011e50 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b084      	sub	sp, #16
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	60f8      	str	r0, [r7, #12]
 8011e58:	60b9      	str	r1, [r7, #8]
 8011e5a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d101      	bne.n	8011e66 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8011e62:	f008 f9e7 	bl	801a234 <abort>
  TFLITE_DCHECK(node != nullptr);
 8011e66:	68bb      	ldr	r3, [r7, #8]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d101      	bne.n	8011e70 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8011e6c:	f008 f9e2 	bl	801a234 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	6819      	ldr	r1, [r3, #0]
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	009b      	lsls	r3, r3, #2
 8011e7c:	440b      	add	r3, r1
 8011e7e:	685b      	ldr	r3, [r3, #4]
 8011e80:	4619      	mov	r1, r3
 8011e82:	68f8      	ldr	r0, [r7, #12]
 8011e84:	4790      	blx	r2
 8011e86:	4603      	mov	r3, r0
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	3710      	adds	r7, #16
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}

08011e90 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b084      	sub	sp, #16
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	60f8      	str	r0, [r7, #12]
 8011e98:	60b9      	str	r1, [r7, #8]
 8011e9a:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8011e9c:	687a      	ldr	r2, [r7, #4]
 8011e9e:	68b9      	ldr	r1, [r7, #8]
 8011ea0:	68f8      	ldr	r0, [r7, #12]
 8011ea2:	f7ff ffd5 	bl	8011e50 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8011ea6:	4603      	mov	r3, r0
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	3710      	adds	r7, #16
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}

08011eb0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b084      	sub	sp, #16
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	60f8      	str	r0, [r7, #12]
 8011eb8:	60b9      	str	r1, [r7, #8]
 8011eba:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d101      	bne.n	8011ec6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8011ec2:	f008 f9b7 	bl	801a234 <abort>
  TFLITE_DCHECK(node != nullptr);
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d101      	bne.n	8011ed0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8011ecc:	f008 f9b2 	bl	801a234 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	6859      	ldr	r1, [r3, #4]
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	009b      	lsls	r3, r3, #2
 8011edc:	440b      	add	r3, r1
 8011ede:	685b      	ldr	r3, [r3, #4]
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	68f8      	ldr	r0, [r7, #12]
 8011ee4:	4790      	blx	r2
 8011ee6:	4603      	mov	r3, r0
}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	3710      	adds	r7, #16
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}

08011ef0 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b08a      	sub	sp, #40	; 0x28
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	60f8      	str	r0, [r7, #12]
 8011ef8:	60b9      	str	r1, [r7, #8]
 8011efa:	607a      	str	r2, [r7, #4]
 8011efc:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8011efe:	6879      	ldr	r1, [r7, #4]
 8011f00:	68f8      	ldr	r0, [r7, #12]
 8011f02:	f7ff ff4c 	bl	8011d9e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8011f06:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8011f08:	2300      	movs	r3, #0
 8011f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8011f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f0e:	6a3b      	ldr	r3, [r7, #32]
 8011f10:	429a      	cmp	r2, r3
 8011f12:	da1d      	bge.n	8011f50 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 8011f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f16:	009b      	lsls	r3, r3, #2
 8011f18:	68ba      	ldr	r2, [r7, #8]
 8011f1a:	4413      	add	r3, r2
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 8011f20:	f04f 0300 	mov.w	r3, #0
 8011f24:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 8011f26:	edd7 7a07 	vldr	s15, [r7, #28]
 8011f2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f32:	d501      	bpl.n	8011f38 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 8011f34:	69bb      	ldr	r3, [r7, #24]
 8011f36:	e000      	b.n	8011f3a <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 8011f38:	69fb      	ldr	r3, [r7, #28]
 8011f3a:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 8011f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f3e:	009b      	lsls	r3, r3, #2
 8011f40:	683a      	ldr	r2, [r7, #0]
 8011f42:	4413      	add	r3, r2
 8011f44:	697a      	ldr	r2, [r7, #20]
 8011f46:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8011f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4a:	3301      	adds	r3, #1
 8011f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8011f4e:	e7dd      	b.n	8011f0c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8011f50:	bf00      	nop
 8011f52:	3728      	adds	r7, #40	; 0x28
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}

08011f58 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b08a      	sub	sp, #40	; 0x28
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	60f8      	str	r0, [r7, #12]
 8011f60:	60b9      	str	r1, [r7, #8]
 8011f62:	607a      	str	r2, [r7, #4]
 8011f64:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8011f66:	6879      	ldr	r1, [r7, #4]
 8011f68:	68f8      	ldr	r0, [r7, #12]
 8011f6a:	f7ff ff18 	bl	8011d9e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8011f6e:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8011f70:	2300      	movs	r3, #0
 8011f72:	627b      	str	r3, [r7, #36]	; 0x24
 8011f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f76:	6a3b      	ldr	r3, [r7, #32]
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	da2a      	bge.n	8011fd2 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 8011f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7e:	009b      	lsls	r3, r3, #2
 8011f80:	68ba      	ldr	r2, [r7, #8]
 8011f82:	4413      	add	r3, r2
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 8011f88:	4b14      	ldr	r3, [pc, #80]	; (8011fdc <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 8011f8a:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 8011f8c:	f04f 0300 	mov.w	r3, #0
 8011f90:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 8011f92:	edd7 7a07 	vldr	s15, [r7, #28]
 8011f96:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8011f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fa2:	dd01      	ble.n	8011fa8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 8011fa4:	69bb      	ldr	r3, [r7, #24]
 8011fa6:	e009      	b.n	8011fbc <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8011fa8:	edd7 7a07 	vldr	s15, [r7, #28]
 8011fac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fb4:	d501      	bpl.n	8011fba <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 8011fb6:	697b      	ldr	r3, [r7, #20]
 8011fb8:	e000      	b.n	8011fbc <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8011fba:	69fb      	ldr	r3, [r7, #28]
 8011fbc:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 8011fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc0:	009b      	lsls	r3, r3, #2
 8011fc2:	683a      	ldr	r2, [r7, #0]
 8011fc4:	4413      	add	r3, r2
 8011fc6:	693a      	ldr	r2, [r7, #16]
 8011fc8:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8011fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fcc:	3301      	adds	r3, #1
 8011fce:	627b      	str	r3, [r7, #36]	; 0x24
 8011fd0:	e7d0      	b.n	8011f74 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8011fd2:	bf00      	nop
 8011fd4:	3728      	adds	r7, #40	; 0x28
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}
 8011fda:	bf00      	nop
 8011fdc:	40c00000 	.word	0x40c00000

08011fe0 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b084      	sub	sp, #16
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	60f8      	str	r0, [r7, #12]
 8011fe8:	60b9      	str	r1, [r7, #8]
 8011fea:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d101      	bne.n	8011ff8 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 8011ff4:	f008 f91e 	bl	801a234 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ffc:	211c      	movs	r1, #28
 8011ffe:	68f8      	ldr	r0, [r7, #12]
 8012000:	4798      	blx	r3
 8012002:	4603      	mov	r3, r0
}
 8012004:	4618      	mov	r0, r3
 8012006:	3710      	adds	r7, #16
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}

0801200c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 801200c:	b590      	push	{r4, r7, lr}
 801200e:	b089      	sub	sp, #36	; 0x24
 8012010:	af02      	add	r7, sp, #8
 8012012:	6078      	str	r0, [r7, #4]
 8012014:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	691b      	ldr	r3, [r3, #16]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d101      	bne.n	8012022 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801201e:	f008 f909 	bl	801a234 <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	691b      	ldr	r3, [r3, #16]
 8012026:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8012028:	2200      	movs	r2, #0
 801202a:	6839      	ldr	r1, [r7, #0]
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f7ff facd 	bl	80115cc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012032:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d10a      	bne.n	8012050 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	695c      	ldr	r4, [r3, #20]
 801203e:	4b1a      	ldr	r3, [pc, #104]	; (80120a8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 8012040:	9300      	str	r3, [sp, #0]
 8012042:	238e      	movs	r3, #142	; 0x8e
 8012044:	4a19      	ldr	r2, [pc, #100]	; (80120ac <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 8012046:	491a      	ldr	r1, [pc, #104]	; (80120b0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	47a0      	blx	r4
 801204c:	2301      	movs	r3, #1
 801204e:	e027      	b.n	80120a0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8012050:	2200      	movs	r2, #0
 8012052:	6839      	ldr	r1, [r7, #0]
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f7ff fac9 	bl	80115ec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801205a:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d10a      	bne.n	8012078 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	695c      	ldr	r4, [r3, #20]
 8012066:	4b13      	ldr	r3, [pc, #76]	; (80120b4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 8012068:	9300      	str	r3, [sp, #0]
 801206a:	2390      	movs	r3, #144	; 0x90
 801206c:	4a0f      	ldr	r2, [pc, #60]	; (80120ac <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 801206e:	4910      	ldr	r1, [pc, #64]	; (80120b0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	47a0      	blx	r4
 8012074:	2301      	movs	r3, #1
 8012076:	e013      	b.n	80120a0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 8012078:	693b      	ldr	r3, [r7, #16]
 801207a:	781b      	ldrb	r3, [r3, #0]
 801207c:	2b09      	cmp	r3, #9
 801207e:	d105      	bne.n	801208c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 8012080:	697a      	ldr	r2, [r7, #20]
 8012082:	68f9      	ldr	r1, [r7, #12]
 8012084:	6938      	ldr	r0, [r7, #16]
 8012086:	f000 fa9d 	bl	80125c4 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 801208a:	e008      	b.n	801209e <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	781b      	ldrb	r3, [r3, #0]
 8012090:	2b03      	cmp	r3, #3
 8012092:	d104      	bne.n	801209e <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 8012094:	697a      	ldr	r2, [r7, #20]
 8012096:	68f9      	ldr	r1, [r7, #12]
 8012098:	6938      	ldr	r0, [r7, #16]
 801209a:	f000 fb35 	bl	8012708 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 801209e:	2300      	movs	r3, #0
}
 80120a0:	4618      	mov	r0, r3
 80120a2:	371c      	adds	r7, #28
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd90      	pop	{r4, r7, pc}
 80120a8:	0801df58 	.word	0x0801df58
 80120ac:	0801deac 	.word	0x0801deac
 80120b0:	0801df40 	.word	0x0801df40
 80120b4:	0801df6c 	.word	0x0801df6c

080120b8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 80120b8:	b590      	push	{r4, r7, lr}
 80120ba:	b0ad      	sub	sp, #180	; 0xb4
 80120bc:	af02      	add	r7, sp, #8
 80120be:	6078      	str	r0, [r7, #4]
 80120c0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	691b      	ldr	r3, [r3, #16]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d101      	bne.n	80120ce <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 80120ca:	f008 f8b3 	bl	801a234 <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	691b      	ldr	r3, [r3, #16]
 80120d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 80120d6:	2200      	movs	r2, #0
 80120d8:	6839      	ldr	r1, [r7, #0]
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	f7ff fed8 	bl	8011e90 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80120e0:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 80120e4:	2200      	movs	r2, #0
 80120e6:	6839      	ldr	r1, [r7, #0]
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f7ff fee1 	bl	8011eb0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80120ee:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 80120f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80120f6:	7a1b      	ldrb	r3, [r3, #8]
 80120f8:	2b09      	cmp	r3, #9
 80120fa:	d032      	beq.n	8012162 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 80120fc:	2b09      	cmp	r3, #9
 80120fe:	f300 808c 	bgt.w	801221a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 8012102:	2b01      	cmp	r3, #1
 8012104:	d002      	beq.n	801210c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 8012106:	2b03      	cmp	r3, #3
 8012108:	d059      	beq.n	80121be <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 801210a:	e086      	b.n	801221a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 801210c:	f107 030c 	add.w	r3, r7, #12
 8012110:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8012114:	4618      	mov	r0, r3
 8012116:	f002 f916 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801211a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801211e:	f000 fb95 	bl	801284c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8012122:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 8012124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012128:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801212c:	4618      	mov	r0, r3
 801212e:	f002 f90a 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 8012132:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8012136:	f000 fb98 	bl	801286a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801213a:	4603      	mov	r3, r0
 801213c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012140:	f107 000c 	add.w	r0, r7, #12
 8012144:	4621      	mov	r1, r4
 8012146:	f7ff fed3 	bl	8011ef0 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 801214a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801214e:	4618      	mov	r0, r3
 8012150:	f7ff fca7 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 8012154:	f107 030c 	add.w	r3, r7, #12
 8012158:	4618      	mov	r0, r3
 801215a:	f7ff fca2 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 801215e:	2300      	movs	r3, #0
 8012160:	e069      	b.n	8012236 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8012162:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012166:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801216a:	4618      	mov	r0, r3
 801216c:	f002 f8eb 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 8012170:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012174:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012178:	4618      	mov	r0, r3
 801217a:	f002 f8e4 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801217e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8012182:	f000 fb83 	bl	801288c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8012186:	4604      	mov	r4, r0
 8012188:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801218c:	f000 fb8d 	bl	80128aa <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8012190:	4603      	mov	r3, r0
 8012192:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8012196:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801219a:	9300      	str	r3, [sp, #0]
 801219c:	4623      	mov	r3, r4
 801219e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80121a2:	f000 fb93 	bl	80128cc <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 80121a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80121aa:	4618      	mov	r0, r3
 80121ac:	f7ff fc79 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 80121b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80121b4:	4618      	mov	r0, r3
 80121b6:	f7ff fc74 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 80121ba:	2300      	movs	r3, #0
 80121bc:	e03b      	b.n	8012236 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 80121be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80121c2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80121c6:	4618      	mov	r0, r3
 80121c8:	f002 f8bd 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 80121cc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80121d0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80121d4:	4618      	mov	r0, r3
 80121d6:	f002 f8b6 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 80121da:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80121de:	f000 fbc1 	bl	8012964 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80121e2:	4604      	mov	r4, r0
 80121e4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80121e8:	f000 fbcb 	bl	8012982 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 80121ec:	4603      	mov	r3, r0
 80121ee:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80121f2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80121f6:	9300      	str	r3, [sp, #0]
 80121f8:	4623      	mov	r3, r4
 80121fa:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80121fe:	f000 fbd1 	bl	80129a4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 8012202:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012206:	4618      	mov	r0, r3
 8012208:	f7ff fc4b 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801220c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012210:	4618      	mov	r0, r3
 8012212:	f7ff fc46 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 8012216:	2300      	movs	r3, #0
 8012218:	e00d      	b.n	8012236 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	695c      	ldr	r4, [r3, #20]
 801221e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012222:	7a1b      	ldrb	r3, [r3, #8]
 8012224:	4618      	mov	r0, r3
 8012226:	f7fe fec9 	bl	8010fbc <TfLiteTypeGetName>
 801222a:	4603      	mov	r3, r0
 801222c:	461a      	mov	r2, r3
 801222e:	4904      	ldr	r1, [pc, #16]	; (8012240 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8012234:	2301      	movs	r3, #1
    }
  }
}
 8012236:	4618      	mov	r0, r3
 8012238:	37ac      	adds	r7, #172	; 0xac
 801223a:	46bd      	mov	sp, r7
 801223c:	bd90      	pop	{r4, r7, pc}
 801223e:	bf00      	nop
 8012240:	0801df80 	.word	0x0801df80

08012244 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 8012244:	b580      	push	{r7, lr}
 8012246:	b084      	sub	sp, #16
 8012248:	af00      	add	r7, sp, #0
 801224a:	60f8      	str	r0, [r7, #12]
 801224c:	60b9      	str	r1, [r7, #8]
 801224e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012254:	2b00      	cmp	r3, #0
 8012256:	d101      	bne.n	801225c <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 8012258:	f007 ffec 	bl	801a234 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012260:	2104      	movs	r1, #4
 8012262:	68f8      	ldr	r0, [r7, #12]
 8012264:	4798      	blx	r3
 8012266:	4603      	mov	r3, r0
}
 8012268:	4618      	mov	r0, r3
 801226a:	3710      	adds	r7, #16
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}

08012270 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 8012270:	b590      	push	{r4, r7, lr}
 8012272:	b087      	sub	sp, #28
 8012274:	af02      	add	r7, sp, #8
 8012276:	6078      	str	r0, [r7, #4]
 8012278:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	691b      	ldr	r3, [r3, #16]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d101      	bne.n	8012286 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8012282:	f007 ffd7 	bl	801a234 <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	691b      	ldr	r3, [r3, #16]
 801228a:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801228c:	2200      	movs	r2, #0
 801228e:	6839      	ldr	r1, [r7, #0]
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f7ff f99b 	bl	80115cc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012296:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d10a      	bne.n	80122b4 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	695c      	ldr	r4, [r3, #20]
 80122a2:	4b20      	ldr	r3, [pc, #128]	; (8012324 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 80122a4:	9300      	str	r3, [sp, #0]
 80122a6:	23cd      	movs	r3, #205	; 0xcd
 80122a8:	4a1f      	ldr	r2, [pc, #124]	; (8012328 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 80122aa:	4920      	ldr	r1, [pc, #128]	; (801232c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	47a0      	blx	r4
 80122b0:	2301      	movs	r3, #1
 80122b2:	e033      	b.n	801231c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 80122b4:	68bb      	ldr	r3, [r7, #8]
 80122b6:	781b      	ldrb	r3, [r3, #0]
 80122b8:	2b09      	cmp	r3, #9
 80122ba:	d115      	bne.n	80122e8 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 80122c6:	4618      	mov	r0, r3
 80122c8:	eef0 0a67 	vmov.f32	s1, s15
 80122cc:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80122d0:	f000 fbb3 	bl	8012a3a <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 80122d4:	4603      	mov	r3, r0
 80122d6:	461a      	mov	r2, r3
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	691b      	ldr	r3, [r3, #16]
 80122e0:	b25a      	sxtb	r2, r3
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	705a      	strb	r2, [r3, #1]
 80122e6:	e018      	b.n	801231a <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 80122e8:	68bb      	ldr	r3, [r7, #8]
 80122ea:	781b      	ldrb	r3, [r3, #0]
 80122ec:	2b03      	cmp	r3, #3
 80122ee:	d114      	bne.n	801231a <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 80122f0:	68bb      	ldr	r3, [r7, #8]
 80122f2:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 80122f6:	68bb      	ldr	r3, [r7, #8]
 80122f8:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 80122fa:	4618      	mov	r0, r3
 80122fc:	eef0 0a67 	vmov.f32	s1, s15
 8012300:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8012304:	f000 fbe8 	bl	8012ad8 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 8012308:	4603      	mov	r3, r0
 801230a:	461a      	mov	r2, r3
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	691b      	ldr	r3, [r3, #16]
 8012314:	b2da      	uxtb	r2, r3
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 801231a:	2300      	movs	r3, #0
}
 801231c:	4618      	mov	r0, r3
 801231e:	3714      	adds	r7, #20
 8012320:	46bd      	mov	sp, r7
 8012322:	bd90      	pop	{r4, r7, pc}
 8012324:	0801df58 	.word	0x0801df58
 8012328:	0801deac 	.word	0x0801deac
 801232c:	0801df40 	.word	0x0801df40

08012330 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 8012330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012332:	b0ad      	sub	sp, #180	; 0xb4
 8012334:	af02      	add	r7, sp, #8
 8012336:	6078      	str	r0, [r7, #4]
 8012338:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	691b      	ldr	r3, [r3, #16]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d101      	bne.n	8012346 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8012342:	f007 ff77 	bl	801a234 <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	691b      	ldr	r3, [r3, #16]
 801234a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801234e:	2200      	movs	r2, #0
 8012350:	6839      	ldr	r1, [r7, #0]
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f7ff fd9c 	bl	8011e90 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8012358:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801235c:	2200      	movs	r2, #0
 801235e:	6839      	ldr	r1, [r7, #0]
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f7ff fda5 	bl	8011eb0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8012366:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 801236a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801236e:	7a1b      	ldrb	r3, [r3, #8]
 8012370:	2b09      	cmp	r3, #9
 8012372:	d032      	beq.n	80123da <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 8012374:	2b09      	cmp	r3, #9
 8012376:	f300 809c 	bgt.w	80124b2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 801237a:	2b01      	cmp	r3, #1
 801237c:	d002      	beq.n	8012384 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 801237e:	2b03      	cmp	r3, #3
 8012380:	d062      	beq.n	8012448 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 8012382:	e096      	b.n	80124b2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 8012384:	f107 030c 	add.w	r3, r7, #12
 8012388:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801238c:	4618      	mov	r0, r3
 801238e:	f001 ffda 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8012392:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8012396:	f000 fa59 	bl	801284c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801239a:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 801239c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80123a0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80123a4:	4618      	mov	r0, r3
 80123a6:	f001 ffce 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 80123aa:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80123ae:	f000 fa5c 	bl	801286a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80123b2:	4603      	mov	r3, r0
 80123b4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80123b8:	f107 000c 	add.w	r0, r7, #12
 80123bc:	4621      	mov	r1, r4
 80123be:	f7ff fdcb 	bl	8011f58 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 80123c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80123c6:	4618      	mov	r0, r3
 80123c8:	f7ff fb6b 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 80123cc:	f107 030c 	add.w	r3, r7, #12
 80123d0:	4618      	mov	r0, r3
 80123d2:	f7ff fb66 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 80123d6:	2300      	movs	r3, #0
 80123d8:	e079      	b.n	80124ce <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 80123da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80123de:	f993 4001 	ldrsb.w	r4, [r3, #1]
 80123e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80123e6:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 80123ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80123ee:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80123f2:	4618      	mov	r0, r3
 80123f4:	f001 ffa7 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 80123f8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80123fc:	f000 fa46 	bl	801288c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8012400:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 8012402:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012406:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801240a:	4618      	mov	r0, r3
 801240c:	f001 ff9b 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8012410:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8012414:	f000 fa49 	bl	80128aa <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8012418:	4603      	mov	r3, r0
 801241a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801241e:	9301      	str	r3, [sp, #4]
 8012420:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012424:	9300      	str	r3, [sp, #0]
 8012426:	4633      	mov	r3, r6
 8012428:	4629      	mov	r1, r5
 801242a:	4620      	mov	r0, r4
 801242c:	f000 fba3 	bl	8012b76 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 8012430:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012434:	4618      	mov	r0, r3
 8012436:	f7ff fb34 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 801243a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801243e:	4618      	mov	r0, r3
 8012440:	f7ff fb2f 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 8012444:	2300      	movs	r3, #0
 8012446:	e042      	b.n	80124ce <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 8012448:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801244c:	78dc      	ldrb	r4, [r3, #3]
 801244e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012452:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 8012454:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012458:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801245c:	4618      	mov	r0, r3
 801245e:	f001 ff72 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 8012462:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8012466:	f000 fa7d 	bl	8012964 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801246a:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 801246c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012470:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012474:	4618      	mov	r0, r3
 8012476:	f001 ff66 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801247a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801247e:	f000 fa80 	bl	8012982 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8012482:	4603      	mov	r3, r0
 8012484:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8012488:	9301      	str	r3, [sp, #4]
 801248a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801248e:	9300      	str	r3, [sp, #0]
 8012490:	4633      	mov	r3, r6
 8012492:	4629      	mov	r1, r5
 8012494:	4620      	mov	r0, r4
 8012496:	f000 fbad 	bl	8012bf4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 801249a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801249e:	4618      	mov	r0, r3
 80124a0:	f7ff faff 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 80124a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80124a8:	4618      	mov	r0, r3
 80124aa:	f7ff fafa 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 80124ae:	2300      	movs	r3, #0
 80124b0:	e00d      	b.n	80124ce <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	695c      	ldr	r4, [r3, #20]
 80124b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80124ba:	7a1b      	ldrb	r3, [r3, #8]
 80124bc:	4618      	mov	r0, r3
 80124be:	f7fe fd7d 	bl	8010fbc <TfLiteTypeGetName>
 80124c2:	4603      	mov	r3, r0
 80124c4:	461a      	mov	r2, r3
 80124c6:	4904      	ldr	r1, [pc, #16]	; (80124d8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 80124cc:	2301      	movs	r3, #1
    }
  }
}
 80124ce:	4618      	mov	r0, r3
 80124d0:	37ac      	adds	r7, #172	; 0xac
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124d6:	bf00      	nop
 80124d8:	0801df80 	.word	0x0801df80

080124dc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 80124dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124de:	b089      	sub	sp, #36	; 0x24
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 80124e6:	6839      	ldr	r1, [r7, #0]
 80124e8:	2900      	cmp	r1, #0
 80124ea:	da06      	bge.n	80124fa <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 80124ec:	4b31      	ldr	r3, [pc, #196]	; (80125b4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 80124ee:	4a32      	ldr	r2, [pc, #200]	; (80125b8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 80124f0:	f44f 71b3 	mov.w	r1, #358	; 0x166
 80124f4:	4831      	ldr	r0, [pc, #196]	; (80125bc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 80124f6:	f007 fea5 	bl	801a244 <__assert_func>
  assert(exponent <= 31);
 80124fa:	6839      	ldr	r1, [r7, #0]
 80124fc:	291f      	cmp	r1, #31
 80124fe:	dd06      	ble.n	801250e <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 8012500:	4b2f      	ldr	r3, [pc, #188]	; (80125c0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 8012502:	4a2d      	ldr	r2, [pc, #180]	; (80125b8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8012504:	f240 1167 	movw	r1, #359	; 0x167
 8012508:	482c      	ldr	r0, [pc, #176]	; (80125bc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 801250a:	f007 fe9b 	bl	801a244 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 801250e:	f04f 0001 	mov.w	r0, #1
 8012512:	f04f 0100 	mov.w	r1, #0
 8012516:	683c      	ldr	r4, [r7, #0]
 8012518:	f1a4 0620 	sub.w	r6, r4, #32
 801251c:	f1c4 0520 	rsb	r5, r4, #32
 8012520:	fa01 f304 	lsl.w	r3, r1, r4
 8012524:	fa00 f606 	lsl.w	r6, r0, r6
 8012528:	4333      	orrs	r3, r6
 801252a:	fa20 f505 	lsr.w	r5, r0, r5
 801252e:	432b      	orrs	r3, r5
 8012530:	fa00 f204 	lsl.w	r2, r0, r4
 8012534:	4613      	mov	r3, r2
 8012536:	3b01      	subs	r3, #1
 8012538:	4618      	mov	r0, r3
 801253a:	f000 fb93 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801253e:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 8012540:	2000      	movs	r0, #0
 8012542:	f000 fb8f 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012546:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8012548:	2001      	movs	r0, #1
 801254a:	f000 fb8b 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801254e:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 8012550:	69f9      	ldr	r1, [r7, #28]
 8012552:	6878      	ldr	r0, [r7, #4]
 8012554:	f000 fb91 	bl	8012c7a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012558:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 801255a:	2101      	movs	r1, #1
 801255c:	69f8      	ldr	r0, [r7, #28]
 801255e:	f000 fb9a 	bl	8012c96 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8012562:	4604      	mov	r4, r0
 8012564:	69b9      	ldr	r1, [r7, #24]
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f000 fba4 	bl	8012cb4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801256c:	4603      	mov	r3, r0
 801256e:	6979      	ldr	r1, [r7, #20]
 8012570:	4618      	mov	r0, r3
 8012572:	f000 fb82 	bl	8012c7a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012576:	4603      	mov	r3, r0
 8012578:	4619      	mov	r1, r3
 801257a:	4620      	mov	r0, r4
 801257c:	f000 fbae 	bl	8012cdc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8012580:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 8012582:	6839      	ldr	r1, [r7, #0]
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f000 fb86 	bl	8012c96 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801258a:	4604      	mov	r4, r0
 801258c:	68f9      	ldr	r1, [r7, #12]
 801258e:	6938      	ldr	r0, [r7, #16]
 8012590:	f000 fbb2 	bl	8012cf8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8012594:	4603      	mov	r3, r0
 8012596:	6979      	ldr	r1, [r7, #20]
 8012598:	4618      	mov	r0, r3
 801259a:	f000 fb6e 	bl	8012c7a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801259e:	4603      	mov	r3, r0
 80125a0:	4619      	mov	r1, r3
 80125a2:	4620      	mov	r0, r4
 80125a4:	f000 fb9a 	bl	8012cdc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80125a8:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 80125aa:	4618      	mov	r0, r3
 80125ac:	3724      	adds	r7, #36	; 0x24
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125b2:	bf00      	nop
 80125b4:	0801dfec 	.word	0x0801dfec
 80125b8:	0801dffc 	.word	0x0801dffc
 80125bc:	0801e058 	.word	0x0801e058
 80125c0:	0801e0ec 	.word	0x0801e0ec

080125c4 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 80125c4:	b590      	push	{r4, r7, lr}
 80125c6:	b099      	sub	sp, #100	; 0x64
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	60f8      	str	r0, [r7, #12]
 80125cc:	60b9      	str	r1, [r7, #8]
 80125ce:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 80125d0:	f04f 0300 	mov.w	r3, #0
 80125d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 80125d6:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80125da:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	ed93 7a03 	vldr	s14, [r3, #12]
 80125e2:	68bb      	ldr	r3, [r7, #8]
 80125e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80125e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 80125ec:	ee16 0a90 	vmov	r0, s13
 80125f0:	f7ed ffb4 	bl	800055c <__aeabi_f2d>
 80125f4:	4602      	mov	r2, r0
 80125f6:	460b      	mov	r3, r1
 80125f8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 80125fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012600:	68f9      	ldr	r1, [r7, #12]
 8012602:	4618      	mov	r0, r3
 8012604:	f7ff fac7 	bl	8011b96 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8012608:	f107 0310 	add.w	r3, r7, #16
 801260c:	68b9      	ldr	r1, [r7, #8]
 801260e:	4618      	mov	r0, r3
 8012610:	f7ff fac1 	bl	8011b96 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f103 0214 	add.w	r2, r3, #20
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	3318      	adds	r3, #24
 801261e:	4619      	mov	r1, r3
 8012620:	4610      	mov	r0, r2
 8012622:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8012626:	f7fe fd4f 	bl	80110c8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 801262a:	f7fe ff1e 	bl	801146a <_ZNSt14numeric_limitsIaE3minEv>
 801262e:	4603      	mov	r3, r0
 8012630:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 8012632:	68bb      	ldr	r3, [r7, #8]
 8012634:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8012636:	68bb      	ldr	r3, [r7, #8]
 8012638:	edd3 7a03 	vldr	s15, [r3, #12]
 801263c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012640:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012644:	eeb0 0a66 	vmov.f32	s0, s13
 8012648:	f006 fbe4 	bl	8018e14 <roundf>
 801264c:	eef0 7a40 	vmov.f32	s15, s0
 8012650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012654:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 8012658:	4423      	add	r3, r4
 801265a:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801265c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012660:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012664:	4611      	mov	r1, r2
 8012666:	4618      	mov	r0, r3
 8012668:	f7ff f9e6 	bl	8011a38 <_ZSt3maxIlERKT_S2_S2_>
 801266c:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801266e:	681a      	ldr	r2, [r3, #0]
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 8012674:	f7ff fab6 	bl	8011be4 <_ZNSt14numeric_limitsIfE8infinityEv>
 8012678:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801267c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8012680:	eef4 7a47 	vcmp.f32	s15, s14
 8012684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012688:	d103      	bne.n	8012692 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 801268a:	f7fe fef7 	bl	801147c <_ZNSt14numeric_limitsIaE3maxEv>
 801268e:	4603      	mov	r3, r0
 8012690:	e022      	b.n	80126d8 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 8012692:	f7fe fef3 	bl	801147c <_ZNSt14numeric_limitsIaE3maxEv>
 8012696:	4603      	mov	r3, r0
 8012698:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801269a:	68bb      	ldr	r3, [r7, #8]
 801269c:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80126a4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80126a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80126ac:	eeb0 0a66 	vmov.f32	s0, s13
 80126b0:	f006 fbb0 	bl	8018e14 <roundf>
 80126b4:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 80126b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80126bc:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 80126c0:	4423      	add	r3, r4
 80126c2:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 80126c4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80126c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80126cc:	4611      	mov	r1, r2
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7ff f99e 	bl	8011a10 <_ZSt3minIlERKT_S2_S2_>
 80126d4:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 80126d6:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 80126d8:	687a      	ldr	r2, [r7, #4]
 80126da:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	691a      	ldr	r2, [r3, #16]
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 80126e4:	68bb      	ldr	r3, [r7, #8]
 80126e6:	691a      	ldr	r2, [r3, #16]
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 80126ec:	f107 0310 	add.w	r3, r7, #16
 80126f0:	4618      	mov	r0, r3
 80126f2:	f7ff f9d6 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 80126f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7ff f9d1 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8012700:	bf00      	nop
 8012702:	3764      	adds	r7, #100	; 0x64
 8012704:	46bd      	mov	sp, r7
 8012706:	bd90      	pop	{r4, r7, pc}

08012708 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 8012708:	b590      	push	{r4, r7, lr}
 801270a:	b099      	sub	sp, #100	; 0x64
 801270c:	af00      	add	r7, sp, #0
 801270e:	60f8      	str	r0, [r7, #12]
 8012710:	60b9      	str	r1, [r7, #8]
 8012712:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 8012714:	f04f 0300 	mov.w	r3, #0
 8012718:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 801271a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801271e:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	ed93 7a03 	vldr	s14, [r3, #12]
 8012726:	68bb      	ldr	r3, [r7, #8]
 8012728:	edd3 7a03 	vldr	s15, [r3, #12]
 801272c:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 8012730:	ee16 0a90 	vmov	r0, s13
 8012734:	f7ed ff12 	bl	800055c <__aeabi_f2d>
 8012738:	4602      	mov	r2, r0
 801273a:	460b      	mov	r3, r1
 801273c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 8012740:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012744:	68f9      	ldr	r1, [r7, #12]
 8012746:	4618      	mov	r0, r3
 8012748:	f7ff fa25 	bl	8011b96 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 801274c:	f107 0310 	add.w	r3, r7, #16
 8012750:	68b9      	ldr	r1, [r7, #8]
 8012752:	4618      	mov	r0, r3
 8012754:	f7ff fa1f 	bl	8011b96 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f103 0214 	add.w	r2, r3, #20
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	3318      	adds	r3, #24
 8012762:	4619      	mov	r1, r3
 8012764:	4610      	mov	r0, r2
 8012766:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801276a:	f7fe fcad 	bl	80110c8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 801276e:	f7fe fe8d 	bl	801148c <_ZNSt14numeric_limitsIhE3minEv>
 8012772:	4603      	mov	r3, r0
 8012774:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	edd3 7a03 	vldr	s15, [r3, #12]
 8012780:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012784:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012788:	eeb0 0a66 	vmov.f32	s0, s13
 801278c:	f006 fb42 	bl	8018e14 <roundf>
 8012790:	eef0 7a40 	vmov.f32	s15, s0
 8012794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012798:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 801279c:	4423      	add	r3, r4
 801279e:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80127a0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80127a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80127a8:	4611      	mov	r1, r2
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7ff f944 	bl	8011a38 <_ZSt3maxIlERKT_S2_S2_>
 80127b0:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 80127b2:	681a      	ldr	r2, [r3, #0]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 80127b8:	f7ff fa14 	bl	8011be4 <_ZNSt14numeric_limitsIfE8infinityEv>
 80127bc:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 80127c0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80127c4:	eef4 7a47 	vcmp.f32	s15, s14
 80127c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127cc:	d103      	bne.n	80127d6 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 80127ce:	f7fe fe65 	bl	801149c <_ZNSt14numeric_limitsIhE3maxEv>
 80127d2:	4603      	mov	r3, r0
 80127d4:	e022      	b.n	801281c <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 80127d6:	f7fe fe61 	bl	801149c <_ZNSt14numeric_limitsIhE3maxEv>
 80127da:	4603      	mov	r3, r0
 80127dc:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80127e8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80127ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80127f0:	eeb0 0a66 	vmov.f32	s0, s13
 80127f4:	f006 fb0e 	bl	8018e14 <roundf>
 80127f8:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 80127fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012800:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 8012804:	4423      	add	r3, r4
 8012806:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 8012808:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801280c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012810:	4611      	mov	r1, r2
 8012812:	4618      	mov	r0, r3
 8012814:	f7ff f8fc 	bl	8011a10 <_ZSt3minIlERKT_S2_S2_>
 8012818:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801281a:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 801281c:	687a      	ldr	r2, [r7, #4]
 801281e:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	691a      	ldr	r2, [r3, #16]
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	691a      	ldr	r2, [r3, #16]
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 8012830:	f107 0310 	add.w	r3, r7, #16
 8012834:	4618      	mov	r0, r3
 8012836:	f7ff f934 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 801283a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801283e:	4618      	mov	r0, r3
 8012840:	f7ff f92f 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8012844:	bf00      	nop
 8012846:	3764      	adds	r7, #100	; 0x64
 8012848:	46bd      	mov	sp, r7
 801284a:	bd90      	pop	{r4, r7, pc}

0801284c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801284c:	b580      	push	{r7, lr}
 801284e:	b082      	sub	sp, #8
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d101      	bne.n	801285e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 801285a:	f007 fceb 	bl	801a234 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
}
 8012862:	4618      	mov	r0, r3
 8012864:	3708      	adds	r7, #8
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}

0801286a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801286a:	b480      	push	{r7}
 801286c:	b083      	sub	sp, #12
 801286e:	af00      	add	r7, sp, #0
 8012870:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d002      	beq.n	801287e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	e000      	b.n	8012880 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 801287e:	2300      	movs	r3, #0
}
 8012880:	4618      	mov	r0, r3
 8012882:	370c      	adds	r7, #12
 8012884:	46bd      	mov	sp, r7
 8012886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288a:	4770      	bx	lr

0801288c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801288c:	b580      	push	{r7, lr}
 801288e:	b082      	sub	sp, #8
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d101      	bne.n	801289e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 801289a:	f007 fccb 	bl	801a234 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	3708      	adds	r7, #8
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}

080128aa <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80128aa:	b480      	push	{r7}
 80128ac:	b083      	sub	sp, #12
 80128ae:	af00      	add	r7, sp, #0
 80128b0:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d002      	beq.n	80128be <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	e000      	b.n	80128c0 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 80128be:	2300      	movs	r3, #0
}
 80128c0:	4618      	mov	r0, r3
 80128c2:	370c      	adds	r7, #12
 80128c4:	46bd      	mov	sp, r7
 80128c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ca:	4770      	bx	lr

080128cc <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 80128cc:	b590      	push	{r4, r7, lr}
 80128ce:	b089      	sub	sp, #36	; 0x24
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	60f8      	str	r0, [r7, #12]
 80128d4:	60b9      	str	r1, [r7, #8]
 80128d6:	607a      	str	r2, [r7, #4]
 80128d8:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80128da:	6879      	ldr	r1, [r7, #4]
 80128dc:	68b8      	ldr	r0, [r7, #8]
 80128de:	f7ff fa5e 	bl	8011d9e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 80128e2:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 80128e4:	2300      	movs	r3, #0
 80128e6:	61fb      	str	r3, [r7, #28]
 80128e8:	69fa      	ldr	r2, [r7, #28]
 80128ea:	69bb      	ldr	r3, [r7, #24]
 80128ec:	429a      	cmp	r2, r3
 80128ee:	da35      	bge.n	801295c <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 80128f0:	69fb      	ldr	r3, [r7, #28]
 80128f2:	683a      	ldr	r2, [r7, #0]
 80128f4:	4413      	add	r3, r2
 80128f6:	f993 3000 	ldrsb.w	r3, [r3]
 80128fa:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	68db      	ldr	r3, [r3, #12]
 8012904:	697a      	ldr	r2, [r7, #20]
 8012906:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8012910:	461a      	mov	r2, r3
 8012912:	f7ff fa79 	bl	8011e08 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8012916:	4603      	mov	r3, r0
        data.params.output_offset +
 8012918:	4423      	add	r3, r4
    int32_t clamped =
 801291a:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	3304      	adds	r3, #4
 8012920:	f107 0210 	add.w	r2, r7, #16
 8012924:	4611      	mov	r1, r2
 8012926:	4618      	mov	r0, r3
 8012928:	f7ff f886 	bl	8011a38 <_ZSt3maxIlERKT_S2_S2_>
 801292c:	4603      	mov	r3, r0
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	3308      	adds	r3, #8
 8012936:	f107 0210 	add.w	r2, r7, #16
 801293a:	4611      	mov	r1, r2
 801293c:	4618      	mov	r0, r3
 801293e:	f7ff f867 	bl	8011a10 <_ZSt3minIlERKT_S2_S2_>
 8012942:	4603      	mov	r3, r0
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8012948:	6939      	ldr	r1, [r7, #16]
 801294a:	69fb      	ldr	r3, [r7, #28]
 801294c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801294e:	4413      	add	r3, r2
 8012950:	b24a      	sxtb	r2, r1
 8012952:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8012954:	69fb      	ldr	r3, [r7, #28]
 8012956:	3301      	adds	r3, #1
 8012958:	61fb      	str	r3, [r7, #28]
 801295a:	e7c5      	b.n	80128e8 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 801295c:	bf00      	nop
 801295e:	3724      	adds	r7, #36	; 0x24
 8012960:	46bd      	mov	sp, r7
 8012962:	bd90      	pop	{r4, r7, pc}

08012964 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8012964:	b580      	push	{r7, lr}
 8012966:	b082      	sub	sp, #8
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d101      	bne.n	8012976 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 8012972:	f007 fc5f 	bl	801a234 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
}
 801297a:	4618      	mov	r0, r3
 801297c:	3708      	adds	r7, #8
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}

08012982 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8012982:	b480      	push	{r7}
 8012984:	b083      	sub	sp, #12
 8012986:	af00      	add	r7, sp, #0
 8012988:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d002      	beq.n	8012996 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	e000      	b.n	8012998 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 8012996:	2300      	movs	r3, #0
}
 8012998:	4618      	mov	r0, r3
 801299a:	370c      	adds	r7, #12
 801299c:	46bd      	mov	sp, r7
 801299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a2:	4770      	bx	lr

080129a4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 80129a4:	b590      	push	{r4, r7, lr}
 80129a6:	b089      	sub	sp, #36	; 0x24
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	60f8      	str	r0, [r7, #12]
 80129ac:	60b9      	str	r1, [r7, #8]
 80129ae:	607a      	str	r2, [r7, #4]
 80129b0:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80129b2:	6879      	ldr	r1, [r7, #4]
 80129b4:	68b8      	ldr	r0, [r7, #8]
 80129b6:	f7ff f9f2 	bl	8011d9e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 80129ba:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 80129bc:	2300      	movs	r3, #0
 80129be:	61fb      	str	r3, [r7, #28]
 80129c0:	69fa      	ldr	r2, [r7, #28]
 80129c2:	69bb      	ldr	r3, [r7, #24]
 80129c4:	429a      	cmp	r2, r3
 80129c6:	da34      	bge.n	8012a32 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 80129c8:	69fb      	ldr	r3, [r7, #28]
 80129ca:	683a      	ldr	r2, [r7, #0]
 80129cc:	4413      	add	r3, r2
 80129ce:	781b      	ldrb	r3, [r3, #0]
 80129d0:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	68db      	ldr	r3, [r3, #12]
 80129da:	697a      	ldr	r2, [r7, #20]
 80129dc:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80129e6:	461a      	mov	r2, r3
 80129e8:	f7ff fa0e 	bl	8011e08 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80129ec:	4603      	mov	r3, r0
        data.params.output_offset +
 80129ee:	4423      	add	r3, r4
    int32_t clamped =
 80129f0:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	3304      	adds	r3, #4
 80129f6:	f107 0210 	add.w	r2, r7, #16
 80129fa:	4611      	mov	r1, r2
 80129fc:	4618      	mov	r0, r3
 80129fe:	f7ff f81b 	bl	8011a38 <_ZSt3maxIlERKT_S2_S2_>
 8012a02:	4603      	mov	r3, r0
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	3308      	adds	r3, #8
 8012a0c:	f107 0210 	add.w	r2, r7, #16
 8012a10:	4611      	mov	r1, r2
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7fe fffc 	bl	8011a10 <_ZSt3minIlERKT_S2_S2_>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8012a1e:	6939      	ldr	r1, [r7, #16]
 8012a20:	69fb      	ldr	r3, [r7, #28]
 8012a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a24:	4413      	add	r3, r2
 8012a26:	b2ca      	uxtb	r2, r1
 8012a28:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8012a2a:	69fb      	ldr	r3, [r7, #28]
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	61fb      	str	r3, [r7, #28]
 8012a30:	e7c6      	b.n	80129c0 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 8012a32:	bf00      	nop
 8012a34:	3724      	adds	r7, #36	; 0x24
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd90      	pop	{r4, r7, pc}

08012a3a <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8012a3a:	b5b0      	push	{r4, r5, r7, lr}
 8012a3c:	b088      	sub	sp, #32
 8012a3e:	af00      	add	r7, sp, #0
 8012a40:	ed87 0a03 	vstr	s0, [r7, #12]
 8012a44:	edc7 0a02 	vstr	s1, [r7, #8]
 8012a48:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8012a4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8012a4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8012a52:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012a56:	ee16 0a90 	vmov	r0, s13
 8012a5a:	f7ed fd7f 	bl	800055c <__aeabi_f2d>
 8012a5e:	4602      	mov	r2, r0
 8012a60:	460b      	mov	r3, r1
 8012a62:	ec43 2b10 	vmov	d0, r2, r3
 8012a66:	f006 f98f 	bl	8018d88 <round>
 8012a6a:	ec55 4b10 	vmov	r4, r5, d0
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f7ed fd62 	bl	8000538 <__aeabi_i2d>
 8012a74:	4602      	mov	r2, r0
 8012a76:	460b      	mov	r3, r1
 8012a78:	4620      	mov	r0, r4
 8012a7a:	4629      	mov	r1, r5
 8012a7c:	f7ed fc10 	bl	80002a0 <__adddf3>
 8012a80:	4602      	mov	r2, r0
 8012a82:	460b      	mov	r3, r1
 8012a84:	4610      	mov	r0, r2
 8012a86:	4619      	mov	r1, r3
 8012a88:	f7ee f870 	bl	8000b6c <__aeabi_d2iz>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8012a90:	f7fe fceb 	bl	801146a <_ZNSt14numeric_limitsIaE3minEv>
 8012a94:	4603      	mov	r3, r0
 8012a96:	61bb      	str	r3, [r7, #24]
 8012a98:	f107 0214 	add.w	r2, r7, #20
 8012a9c:	f107 0318 	add.w	r3, r7, #24
 8012aa0:	4611      	mov	r1, r2
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f7fe ffc8 	bl	8011a38 <_ZSt3maxIlERKT_S2_S2_>
 8012aa8:	4603      	mov	r3, r0
  result =
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8012aae:	f7fe fce5 	bl	801147c <_ZNSt14numeric_limitsIaE3maxEv>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	61fb      	str	r3, [r7, #28]
 8012ab6:	f107 0214 	add.w	r2, r7, #20
 8012aba:	f107 031c 	add.w	r3, r7, #28
 8012abe:	4611      	mov	r1, r2
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7fe ffa5 	bl	8011a10 <_ZSt3minIlERKT_S2_S2_>
 8012ac6:	4603      	mov	r3, r0
  result =
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	617b      	str	r3, [r7, #20]
  return result;
 8012acc:	697b      	ldr	r3, [r7, #20]
 8012ace:	b25b      	sxtb	r3, r3
}
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	3720      	adds	r7, #32
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bdb0      	pop	{r4, r5, r7, pc}

08012ad8 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8012ad8:	b5b0      	push	{r4, r5, r7, lr}
 8012ada:	b088      	sub	sp, #32
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	ed87 0a03 	vstr	s0, [r7, #12]
 8012ae2:	edc7 0a02 	vstr	s1, [r7, #8]
 8012ae6:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8012ae8:	ed97 7a03 	vldr	s14, [r7, #12]
 8012aec:	edd7 7a02 	vldr	s15, [r7, #8]
 8012af0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012af4:	ee16 0a90 	vmov	r0, s13
 8012af8:	f7ed fd30 	bl	800055c <__aeabi_f2d>
 8012afc:	4602      	mov	r2, r0
 8012afe:	460b      	mov	r3, r1
 8012b00:	ec43 2b10 	vmov	d0, r2, r3
 8012b04:	f006 f940 	bl	8018d88 <round>
 8012b08:	ec55 4b10 	vmov	r4, r5, d0
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f7ed fd13 	bl	8000538 <__aeabi_i2d>
 8012b12:	4602      	mov	r2, r0
 8012b14:	460b      	mov	r3, r1
 8012b16:	4620      	mov	r0, r4
 8012b18:	4629      	mov	r1, r5
 8012b1a:	f7ed fbc1 	bl	80002a0 <__adddf3>
 8012b1e:	4602      	mov	r2, r0
 8012b20:	460b      	mov	r3, r1
 8012b22:	4610      	mov	r0, r2
 8012b24:	4619      	mov	r1, r3
 8012b26:	f7ee f821 	bl	8000b6c <__aeabi_d2iz>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8012b2e:	f7fe fcad 	bl	801148c <_ZNSt14numeric_limitsIhE3minEv>
 8012b32:	4603      	mov	r3, r0
 8012b34:	61bb      	str	r3, [r7, #24]
 8012b36:	f107 0214 	add.w	r2, r7, #20
 8012b3a:	f107 0318 	add.w	r3, r7, #24
 8012b3e:	4611      	mov	r1, r2
 8012b40:	4618      	mov	r0, r3
 8012b42:	f7fe ff79 	bl	8011a38 <_ZSt3maxIlERKT_S2_S2_>
 8012b46:	4603      	mov	r3, r0
  result =
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8012b4c:	f7fe fca6 	bl	801149c <_ZNSt14numeric_limitsIhE3maxEv>
 8012b50:	4603      	mov	r3, r0
 8012b52:	61fb      	str	r3, [r7, #28]
 8012b54:	f107 0214 	add.w	r2, r7, #20
 8012b58:	f107 031c 	add.w	r3, r7, #28
 8012b5c:	4611      	mov	r1, r2
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f7fe ff56 	bl	8011a10 <_ZSt3minIlERKT_S2_S2_>
 8012b64:	4603      	mov	r3, r0
  result =
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	617b      	str	r3, [r7, #20]
  return result;
 8012b6a:	697b      	ldr	r3, [r7, #20]
 8012b6c:	b2db      	uxtb	r3, r3
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	3720      	adds	r7, #32
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bdb0      	pop	{r4, r5, r7, pc}

08012b76 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8012b76:	b580      	push	{r7, lr}
 8012b78:	b088      	sub	sp, #32
 8012b7a:	af00      	add	r7, sp, #0
 8012b7c:	60ba      	str	r2, [r7, #8]
 8012b7e:	607b      	str	r3, [r7, #4]
 8012b80:	4603      	mov	r3, r0
 8012b82:	73fb      	strb	r3, [r7, #15]
 8012b84:	460b      	mov	r3, r1
 8012b86:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8012b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012b8a:	68b8      	ldr	r0, [r7, #8]
 8012b8c:	f7ff f907 	bl	8011d9e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8012b90:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8012b92:	2300      	movs	r3, #0
 8012b94:	61fb      	str	r3, [r7, #28]
 8012b96:	69fa      	ldr	r2, [r7, #28]
 8012b98:	69bb      	ldr	r3, [r7, #24]
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	da26      	bge.n	8012bec <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 8012b9e:	69fb      	ldr	r3, [r7, #28]
 8012ba0:	687a      	ldr	r2, [r7, #4]
 8012ba2:	4413      	add	r3, r2
 8012ba4:	781b      	ldrb	r3, [r3, #0]
 8012ba6:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8012ba8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012bac:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	dd04      	ble.n	8012bbe <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 8012bb4:	f107 030e 	add.w	r3, r7, #14
 8012bb8:	f993 3000 	ldrsb.w	r3, [r3]
 8012bbc:	e00c      	b.n	8012bd8 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8012bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012bc2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012bc6:	429a      	cmp	r2, r3
 8012bc8:	da04      	bge.n	8012bd4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 8012bca:	f107 030f 	add.w	r3, r7, #15
 8012bce:	f993 3000 	ldrsb.w	r3, [r3]
 8012bd2:	e001      	b.n	8012bd8 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8012bd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012bd8:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8012bda:	69fb      	ldr	r3, [r7, #28]
 8012bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012bde:	4413      	add	r3, r2
 8012be0:	7dba      	ldrb	r2, [r7, #22]
 8012be2:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8012be4:	69fb      	ldr	r3, [r7, #28]
 8012be6:	3301      	adds	r3, #1
 8012be8:	61fb      	str	r3, [r7, #28]
 8012bea:	e7d4      	b.n	8012b96 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8012bec:	bf00      	nop
 8012bee:	3720      	adds	r7, #32
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}

08012bf4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b088      	sub	sp, #32
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	60ba      	str	r2, [r7, #8]
 8012bfc:	607b      	str	r3, [r7, #4]
 8012bfe:	4603      	mov	r3, r0
 8012c00:	73fb      	strb	r3, [r7, #15]
 8012c02:	460b      	mov	r3, r1
 8012c04:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8012c06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012c08:	68b8      	ldr	r0, [r7, #8]
 8012c0a:	f7ff f8c8 	bl	8011d9e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8012c0e:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8012c10:	2300      	movs	r3, #0
 8012c12:	61fb      	str	r3, [r7, #28]
 8012c14:	69fa      	ldr	r2, [r7, #28]
 8012c16:	69bb      	ldr	r3, [r7, #24]
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	da1f      	bge.n	8012c5c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 8012c1c:	69fb      	ldr	r3, [r7, #28]
 8012c1e:	687a      	ldr	r2, [r7, #4]
 8012c20:	4413      	add	r3, r2
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8012c26:	7bbb      	ldrb	r3, [r7, #14]
 8012c28:	7dfa      	ldrb	r2, [r7, #23]
 8012c2a:	429a      	cmp	r2, r3
 8012c2c:	d903      	bls.n	8012c36 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 8012c2e:	f107 030e 	add.w	r3, r7, #14
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	e008      	b.n	8012c48 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8012c36:	7bfb      	ldrb	r3, [r7, #15]
 8012c38:	7dfa      	ldrb	r2, [r7, #23]
 8012c3a:	429a      	cmp	r2, r3
 8012c3c:	d203      	bcs.n	8012c46 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 8012c3e:	f107 030f 	add.w	r3, r7, #15
 8012c42:	781b      	ldrb	r3, [r3, #0]
 8012c44:	e000      	b.n	8012c48 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8012c46:	7dfb      	ldrb	r3, [r7, #23]
 8012c48:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8012c4a:	69fb      	ldr	r3, [r7, #28]
 8012c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c4e:	4413      	add	r3, r2
 8012c50:	7dba      	ldrb	r2, [r7, #22]
 8012c52:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8012c54:	69fb      	ldr	r3, [r7, #28]
 8012c56:	3301      	adds	r3, #1
 8012c58:	61fb      	str	r3, [r7, #28]
 8012c5a:	e7db      	b.n	8012c14 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8012c5c:	bf00      	nop
 8012c5e:	3720      	adds	r7, #32
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}

08012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8012c64:	b480      	push	{r7}
 8012c66:	b083      	sub	sp, #12
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
  return x;
 8012c6c:	687b      	ldr	r3, [r7, #4]
}
 8012c6e:	4618      	mov	r0, r3
 8012c70:	370c      	adds	r7, #12
 8012c72:	46bd      	mov	sp, r7
 8012c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c78:	4770      	bx	lr

08012c7a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8012c7a:	b480      	push	{r7}
 8012c7c:	b083      	sub	sp, #12
 8012c7e:	af00      	add	r7, sp, #0
 8012c80:	6078      	str	r0, [r7, #4]
 8012c82:	6039      	str	r1, [r7, #0]
  return a & b;
 8012c84:	687a      	ldr	r2, [r7, #4]
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	4013      	ands	r3, r2
}
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	370c      	adds	r7, #12
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c94:	4770      	bx	lr

08012c96 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8012c96:	b480      	push	{r7}
 8012c98:	b083      	sub	sp, #12
 8012c9a:	af00      	add	r7, sp, #0
 8012c9c:	6078      	str	r0, [r7, #4]
 8012c9e:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8012ca0:	687a      	ldr	r2, [r7, #4]
 8012ca2:	683b      	ldr	r3, [r7, #0]
 8012ca4:	fa42 f303 	asr.w	r3, r2, r3
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	370c      	adds	r7, #12
 8012cac:	46bd      	mov	sp, r7
 8012cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb2:	4770      	bx	lr

08012cb4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b082      	sub	sp, #8
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
 8012cbc:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8012cbe:	687a      	ldr	r2, [r7, #4]
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	bfb4      	ite	lt
 8012cc6:	2301      	movlt	r3, #1
 8012cc8:	2300      	movge	r3, #0
 8012cca:	b2db      	uxtb	r3, r3
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f000 f827 	bl	8012d20 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012cd2:	4603      	mov	r3, r0
}
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	3708      	adds	r7, #8
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}

08012cdc <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8012cdc:	b480      	push	{r7}
 8012cde:	b083      	sub	sp, #12
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	6039      	str	r1, [r7, #0]
  return a + b;
 8012ce6:	687a      	ldr	r2, [r7, #4]
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	4413      	add	r3, r2
}
 8012cec:	4618      	mov	r0, r3
 8012cee:	370c      	adds	r7, #12
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf6:	4770      	bx	lr

08012cf8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b082      	sub	sp, #8
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
 8012d00:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8012d02:	687a      	ldr	r2, [r7, #4]
 8012d04:	683b      	ldr	r3, [r7, #0]
 8012d06:	429a      	cmp	r2, r3
 8012d08:	bfcc      	ite	gt
 8012d0a:	2301      	movgt	r3, #1
 8012d0c:	2300      	movle	r3, #0
 8012d0e:	b2db      	uxtb	r3, r3
 8012d10:	4618      	mov	r0, r3
 8012d12:	f000 f805 	bl	8012d20 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012d16:	4603      	mov	r3, r0
}
 8012d18:	4618      	mov	r0, r3
 8012d1a:	3708      	adds	r7, #8
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}

08012d20 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b082      	sub	sp, #8
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d004      	beq.n	8012d38 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8012d2e:	2000      	movs	r0, #0
 8012d30:	f000 f807 	bl	8012d42 <_ZN8gemmlowp6BitNotIlEET_S1_>
 8012d34:	4603      	mov	r3, r0
 8012d36:	e000      	b.n	8012d3a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8012d38:	2300      	movs	r3, #0
}
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	3708      	adds	r7, #8
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bd80      	pop	{r7, pc}

08012d42 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8012d42:	b480      	push	{r7}
 8012d44:	b083      	sub	sp, #12
 8012d46:	af00      	add	r7, sp, #0
 8012d48:	6078      	str	r0, [r7, #4]
  return ~a;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	43db      	mvns	r3, r3
}
 8012d4e:	4618      	mov	r0, r3
 8012d50:	370c      	adds	r7, #12
 8012d52:	46bd      	mov	sp, r7
 8012d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d58:	4770      	bx	lr
	...

08012d5c <_ZNSt14numeric_limitsIfE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8012d5c:	b480      	push	{r7}
 8012d5e:	af00      	add	r7, sp, #0
 8012d60:	4b04      	ldr	r3, [pc, #16]	; (8012d74 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8012d62:	ee07 3a90 	vmov	s15, r3
 8012d66:	eeb0 0a67 	vmov.f32	s0, s15
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d70:	4770      	bx	lr
 8012d72:	bf00      	nop
 8012d74:	7f7fffff 	.word	0x7f7fffff

08012d78 <_ZNSt14numeric_limitsIfE6lowestEv>:
      lowest() noexcept { return -__FLT_MAX__; }
 8012d78:	b480      	push	{r7}
 8012d7a:	af00      	add	r7, sp, #0
 8012d7c:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8012d80:	ee07 3a90 	vmov	s15, r3
 8012d84:	eeb0 0a67 	vmov.f32	s0, s15
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8e:	4770      	bx	lr

08012d90 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b084      	sub	sp, #16
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	ed87 0a03 	vstr	s0, [r7, #12]
 8012d9a:	edc7 0a02 	vstr	s1, [r7, #8]
 8012d9e:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 8012da2:	f107 0208 	add.w	r2, r7, #8
 8012da6:	f107 030c 	add.w	r3, r7, #12
 8012daa:	4611      	mov	r1, r2
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7fe fb1f 	bl	80113f0 <_ZSt3maxIfERKT_S2_S2_>
 8012db2:	4602      	mov	r2, r0
 8012db4:	1d3b      	adds	r3, r7, #4
 8012db6:	4619      	mov	r1, r3
 8012db8:	4610      	mov	r0, r2
 8012dba:	f7fe fb00 	bl	80113be <_ZSt3minIfERKT_S2_S2_>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	ee07 3a90 	vmov	s15, r3
}
 8012dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8012dca:	3710      	adds	r7, #16
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}

08012dd0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b084      	sub	sp, #16
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	60b9      	str	r1, [r7, #8]
 8012dda:	607a      	str	r2, [r7, #4]
 8012ddc:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8012dde:	7bfb      	ldrb	r3, [r7, #15]
 8012de0:	2b01      	cmp	r3, #1
 8012de2:	d10b      	bne.n	8012dfc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	f04f 0200 	mov.w	r2, #0
 8012dea:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8012dec:	f7ff ffb6 	bl	8012d5c <_ZNSt14numeric_limitsIfE3maxEv>
 8012df0:	eef0 7a40 	vmov.f32	s15, s0
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8012dfa:	e023      	b.n	8012e44 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8012dfc:	7bfb      	ldrb	r3, [r7, #15]
 8012dfe:	2b03      	cmp	r3, #3
 8012e00:	d107      	bne.n	8012e12 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	f04f 0200 	mov.w	r2, #0
 8012e08:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	4a0f      	ldr	r2, [pc, #60]	; (8012e4c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8012e0e:	601a      	str	r2, [r3, #0]
}
 8012e10:	e018      	b.n	8012e44 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8012e12:	7bfb      	ldrb	r3, [r7, #15]
 8012e14:	2b02      	cmp	r3, #2
 8012e16:	d107      	bne.n	8012e28 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	4a0d      	ldr	r2, [pc, #52]	; (8012e50 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8012e1c:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012e24:	601a      	str	r2, [r3, #0]
}
 8012e26:	e00d      	b.n	8012e44 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8012e28:	f7ff ffa6 	bl	8012d78 <_ZNSt14numeric_limitsIfE6lowestEv>
 8012e2c:	eef0 7a40 	vmov.f32	s15, s0
 8012e30:	68bb      	ldr	r3, [r7, #8]
 8012e32:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8012e36:	f7ff ff91 	bl	8012d5c <_ZNSt14numeric_limitsIfE3maxEv>
 8012e3a:	eef0 7a40 	vmov.f32	s15, s0
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	edc3 7a00 	vstr	s15, [r3]
}
 8012e44:	bf00      	nop
 8012e46:	3710      	adds	r7, #16
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}
 8012e4c:	40c00000 	.word	0x40c00000
 8012e50:	bf800000 	.word	0xbf800000

08012e54 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8012e54:	b480      	push	{r7}
 8012e56:	b083      	sub	sp, #12
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	4618      	mov	r0, r3
 8012e64:	370c      	adds	r7, #12
 8012e66:	46bd      	mov	sp, r7
 8012e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6c:	4770      	bx	lr

08012e6e <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 8012e6e:	b480      	push	{r7}
 8012e70:	b083      	sub	sp, #12
 8012e72:	af00      	add	r7, sp, #0
 8012e74:	6078      	str	r0, [r7, #4]
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	685b      	ldr	r3, [r3, #4]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	370c      	adds	r7, #12
 8012e80:	46bd      	mov	sp, r7
 8012e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e86:	4770      	bx	lr

08012e88 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d101      	bne.n	8012e9a <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 8012e96:	f007 f9cd 	bl	801a234 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
}
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	3708      	adds	r7, #8
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}

08012ea6 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 8012ea6:	b590      	push	{r4, r7, lr}
 8012ea8:	b087      	sub	sp, #28
 8012eaa:	af00      	add	r7, sp, #0
 8012eac:	60f8      	str	r0, [r7, #12]
 8012eae:	60b9      	str	r1, [r7, #8]
 8012eb0:	607a      	str	r2, [r7, #4]
 8012eb2:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8012eb4:	68b9      	ldr	r1, [r7, #8]
 8012eb6:	68f8      	ldr	r0, [r7, #12]
 8012eb8:	f7fe ff16 	bl	8011ce8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012ebc:	4604      	mov	r4, r0
 8012ebe:	6839      	ldr	r1, [r7, #0]
 8012ec0:	6878      	ldr	r0, [r7, #4]
 8012ec2:	f7fe ff11 	bl	8011ce8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	429c      	cmp	r4, r3
 8012eca:	d001      	beq.n	8012ed0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8012ecc:	f007 f9b2 	bl	801a234 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8012ed0:	68b9      	ldr	r1, [r7, #8]
 8012ed2:	68f8      	ldr	r0, [r7, #12]
 8012ed4:	f7fe ff08 	bl	8011ce8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	613b      	str	r3, [r7, #16]
 8012edc:	6839      	ldr	r1, [r7, #0]
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f7fe ff02 	bl	8011ce8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	617b      	str	r3, [r7, #20]
 8012ee8:	f107 0214 	add.w	r2, r7, #20
 8012eec:	f107 0310 	add.w	r3, r7, #16
 8012ef0:	4611      	mov	r1, r2
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f7fe fd8c 	bl	8011a10 <_ZSt3minIlERKT_S2_S2_>
 8012ef8:	4603      	mov	r3, r0
 8012efa:	681b      	ldr	r3, [r3, #0]
}
 8012efc:	4618      	mov	r0, r3
 8012efe:	371c      	adds	r7, #28
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd90      	pop	{r4, r7, pc}

08012f04 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b082      	sub	sp, #8
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d101      	bne.n	8012f16 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 8012f12:	f007 f98f 	bl	801a234 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3708      	adds	r7, #8
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd80      	pop	{r7, pc}

08012f22 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 8012f22:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012f26:	b090      	sub	sp, #64	; 0x40
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	61f8      	str	r0, [r7, #28]
 8012f2c:	61b9      	str	r1, [r7, #24]
  std::int64_t a64 = a;
 8012f2e:	69fb      	ldr	r3, [r7, #28]
 8012f30:	17da      	asrs	r2, r3, #31
 8012f32:	613b      	str	r3, [r7, #16]
 8012f34:	617a      	str	r2, [r7, #20]
 8012f36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012f3a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b64 = b;
 8012f3e:	69bb      	ldr	r3, [r7, #24]
 8012f40:	17da      	asrs	r2, r3, #31
 8012f42:	60bb      	str	r3, [r7, #8]
 8012f44:	60fa      	str	r2, [r7, #12]
 8012f46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012f4a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t sum = a64 + b64;
 8012f4e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8012f52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8012f56:	1886      	adds	r6, r0, r2
 8012f58:	603e      	str	r6, [r7, #0]
 8012f5a:	eb41 0303 	adc.w	r3, r1, r3
 8012f5e:	607b      	str	r3, [r7, #4]
 8012f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012f64:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  std::int64_t sign = sum >= 0 ? 1 : -1;
 8012f68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	db04      	blt.n	8012f7a <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x58>
 8012f70:	f04f 0201 	mov.w	r2, #1
 8012f74:	f04f 0300 	mov.w	r3, #0
 8012f78:	e003      	b.n	8012f82 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x60>
 8012f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8012f82:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return static_cast<std::int32_t>((sum + sign) / 2);
 8012f86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8012f8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012f8e:	eb10 0802 	adds.w	r8, r0, r2
 8012f92:	eb41 0903 	adc.w	r9, r1, r3
 8012f96:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	469a      	mov	sl, r3
 8012f9e:	4693      	mov	fp, r2
 8012fa0:	eb1a 0408 	adds.w	r4, sl, r8
 8012fa4:	eb4b 0509 	adc.w	r5, fp, r9
 8012fa8:	f04f 0200 	mov.w	r2, #0
 8012fac:	f04f 0300 	mov.w	r3, #0
 8012fb0:	0862      	lsrs	r2, r4, #1
 8012fb2:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8012fb6:	106b      	asrs	r3, r5, #1
 8012fb8:	4613      	mov	r3, r2
}
 8012fba:	4618      	mov	r0, r3
 8012fbc:	3740      	adds	r7, #64	; 0x40
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012fc4:	4770      	bx	lr

08012fc6 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 8012fc6:	b580      	push	{r7, lr}
 8012fc8:	b084      	sub	sp, #16
 8012fca:	af00      	add	r7, sp, #0
 8012fcc:	60f8      	str	r0, [r7, #12]
 8012fce:	60b9      	str	r1, [r7, #8]
 8012fd0:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 8012fd2:	68fa      	ldr	r2, [r7, #12]
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8012fda:	68b9      	ldr	r1, [r7, #8]
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f7fe fe0d 	bl	8011bfc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8012fe2:	4603      	mov	r3, r0
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3710      	adds	r7, #16
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}

08012fec <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b088      	sub	sp, #32
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	60f8      	str	r0, [r7, #12]
 8012ff4:	60b9      	str	r1, [r7, #8]
 8012ff6:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f000 f821 	bl	8013042 <_ZN6tflite17CountLeadingZerosImEEiT_>
 8013000:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 8013002:	68ba      	ldr	r2, [r7, #8]
 8013004:	69fb      	ldr	r3, [r7, #28]
 8013006:	1ad2      	subs	r2, r2, r3
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 801300c:	68fa      	ldr	r2, [r7, #12]
 801300e:	69fb      	ldr	r3, [r7, #28]
 8013010:	fa02 f303 	lsl.w	r3, r2, r3
 8013014:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 8013018:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 801301a:	69b8      	ldr	r0, [r7, #24]
 801301c:	f000 f823 	bl	8013066 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013020:	4603      	mov	r3, r0
 8013022:	4618      	mov	r0, r3
 8013024:	f000 f830 	bl	8013088 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 8013028:	4603      	mov	r3, r0
 801302a:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 801302c:	f107 0314 	add.w	r3, r7, #20
 8013030:	4618      	mov	r0, r3
 8013032:	f000 f889 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013036:	4603      	mov	r3, r0
 8013038:	681b      	ldr	r3, [r3, #0]
}
 801303a:	4618      	mov	r0, r3
 801303c:	3720      	adds	r7, #32
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}

08013042 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 8013042:	b480      	push	{r7}
 8013044:	b083      	sub	sp, #12
 8013046:	af00      	add	r7, sp, #0
 8013048:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d003      	beq.n	8013058 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 8013056:	e000      	b.n	801305a <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 8013058:	2320      	movs	r3, #32
}
 801305a:	4618      	mov	r0, r3
 801305c:	370c      	adds	r7, #12
 801305e:	46bd      	mov	sp, r7
 8013060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013064:	4770      	bx	lr

08013066 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 8013066:	b580      	push	{r7, lr}
 8013068:	b084      	sub	sp, #16
 801306a:	af00      	add	r7, sp, #0
 801306c:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 801306e:	f107 030c 	add.w	r3, r7, #12
 8013072:	4618      	mov	r0, r3
 8013074:	f000 f868 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013078:	4602      	mov	r2, r0
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	6013      	str	r3, [r2, #0]
    return retval;
 801307e:	68fb      	ldr	r3, [r7, #12]
  }
 8013080:	4618      	mov	r0, r3
 8013082:	3710      	adds	r7, #16
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}

08013088 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 8013088:	b580      	push	{r7, lr}
 801308a:	b08a      	sub	sp, #40	; 0x28
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 8013090:	f000 f879 	bl	8013186 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8013094:	4603      	mov	r3, r0
 8013096:	4619      	mov	r1, r3
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	f000 f87f 	bl	801319c <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801309e:	4603      	mov	r3, r0
 80130a0:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 80130a2:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 80130a6:	f000 f8ab 	bl	8013200 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 80130aa:	4603      	mov	r3, r0
 80130ac:	4618      	mov	r0, r3
 80130ae:	f000 f893 	bl	80131d8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 80130b2:	4603      	mov	r3, r0
 80130b4:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 80130b6:	4823      	ldr	r0, [pc, #140]	; (8013144 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 80130b8:	f000 f8a2 	bl	8013200 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 80130bc:	4603      	mov	r3, r0
 80130be:	4618      	mov	r0, r3
 80130c0:	f000 f88a 	bl	80131d8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 80130c4:	4603      	mov	r3, r0
 80130c6:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 80130c8:	69b9      	ldr	r1, [r7, #24]
 80130ca:	6a38      	ldr	r0, [r7, #32]
 80130cc:	f000 f8a5 	bl	801321a <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80130d0:	4603      	mov	r3, r0
 80130d2:	4619      	mov	r1, r3
 80130d4:	69f8      	ldr	r0, [r7, #28]
 80130d6:	f000 f8c2 	bl	801325e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80130da:	4603      	mov	r3, r0
 80130dc:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 80130de:	2300      	movs	r3, #0
 80130e0:	627b      	str	r3, [r7, #36]	; 0x24
 80130e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e4:	2b02      	cmp	r3, #2
 80130e6:	dc21      	bgt.n	801312c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 80130e8:	6979      	ldr	r1, [r7, #20]
 80130ea:	6a38      	ldr	r0, [r7, #32]
 80130ec:	f000 f895 	bl	801321a <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80130f0:	4603      	mov	r3, r0
 80130f2:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 80130f4:	f000 f8d1 	bl	801329a <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 80130f8:	4603      	mov	r3, r0
 80130fa:	6939      	ldr	r1, [r7, #16]
 80130fc:	4618      	mov	r0, r3
 80130fe:	f000 f8d5 	bl	80132ac <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013102:	4603      	mov	r3, r0
 8013104:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 8013106:	68f9      	ldr	r1, [r7, #12]
 8013108:	6978      	ldr	r0, [r7, #20]
 801310a:	f000 f8ed 	bl	80132e8 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801310e:	4603      	mov	r3, r0
 8013110:	4618      	mov	r0, r3
 8013112:	f000 f90b 	bl	801332c <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8013116:	4603      	mov	r3, r0
 8013118:	4619      	mov	r1, r3
 801311a:	6978      	ldr	r0, [r7, #20]
 801311c:	f000 f89f 	bl	801325e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013120:	4603      	mov	r3, r0
 8013122:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8013124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013126:	3301      	adds	r3, #1
 8013128:	627b      	str	r3, [r7, #36]	; 0x24
 801312a:	e7da      	b.n	80130e2 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 801312c:	6978      	ldr	r0, [r7, #20]
 801312e:	f000 f917 	bl	8013360 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 8013132:	4603      	mov	r3, r0
 8013134:	4618      	mov	r0, r3
 8013136:	f000 f929 	bl	801338c <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801313a:	4603      	mov	r3, r0
}
 801313c:	4618      	mov	r0, r3
 801313e:	3728      	adds	r7, #40	; 0x28
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}
 8013144:	c3c3c3c4 	.word	0xc3c3c3c4

08013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 8013148:	b480      	push	{r7}
 801314a:	b083      	sub	sp, #12
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	4618      	mov	r0, r3
 8013154:	370c      	adds	r7, #12
 8013156:	46bd      	mov	sp, r7
 8013158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315c:	4770      	bx	lr

0801315e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801315e:	b590      	push	{r4, r7, lr}
 8013160:	b085      	sub	sp, #20
 8013162:	af00      	add	r7, sp, #0
 8013164:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8013166:	f107 030c 	add.w	r3, r7, #12
 801316a:	4618      	mov	r0, r3
 801316c:	f7ff ffec 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013170:	4604      	mov	r4, r0
 8013172:	6878      	ldr	r0, [r7, #4]
 8013174:	f7ff fd76 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013178:	4603      	mov	r3, r0
 801317a:	6023      	str	r3, [r4, #0]
    return retval;
 801317c:	68fb      	ldr	r3, [r7, #12]
  }
 801317e:	4618      	mov	r0, r3
 8013180:	3714      	adds	r7, #20
 8013182:	46bd      	mov	sp, r7
 8013184:	bd90      	pop	{r4, r7, pc}

08013186 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 8013186:	b580      	push	{r7, lr}
 8013188:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801318a:	f000 f927 	bl	80133dc <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 801318e:	4603      	mov	r3, r0
 8013190:	4618      	mov	r0, r3
 8013192:	f7ff ffe4 	bl	801315e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8013196:	4603      	mov	r3, r0
  }
 8013198:	4618      	mov	r0, r3
 801319a:	bd80      	pop	{r7, pc}

0801319c <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 801319c:	b590      	push	{r4, r7, lr}
 801319e:	b083      	sub	sp, #12
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
 80131a4:	6039      	str	r1, [r7, #0]
 80131a6:	1d3b      	adds	r3, r7, #4
 80131a8:	4618      	mov	r0, r3
 80131aa:	f7ff ffcd 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80131ae:	4603      	mov	r3, r0
 80131b0:	681c      	ldr	r4, [r3, #0]
 80131b2:	463b      	mov	r3, r7
 80131b4:	4618      	mov	r0, r3
 80131b6:	f7ff ffc7 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80131ba:	4603      	mov	r3, r0
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	4619      	mov	r1, r3
 80131c0:	4620      	mov	r0, r4
 80131c2:	f7ff feae 	bl	8012f22 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 80131c6:	4603      	mov	r3, r0
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7ff ff4c 	bl	8013066 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80131ce:	4603      	mov	r3, r0
 80131d0:	4618      	mov	r0, r3
 80131d2:	370c      	adds	r7, #12
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd90      	pop	{r4, r7, pc}

080131d8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 80131d8:	b590      	push	{r4, r7, lr}
 80131da:	b085      	sub	sp, #20
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80131e0:	f107 030c 	add.w	r3, r7, #12
 80131e4:	4618      	mov	r0, r3
 80131e6:	f000 f900 	bl	80133ea <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80131ea:	4604      	mov	r4, r0
 80131ec:	6878      	ldr	r0, [r7, #4]
 80131ee:	f7ff fd39 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80131f2:	4603      	mov	r3, r0
 80131f4:	6023      	str	r3, [r4, #0]
    return retval;
 80131f6:	68fb      	ldr	r3, [r7, #12]
  }
 80131f8:	4618      	mov	r0, r3
 80131fa:	3714      	adds	r7, #20
 80131fc:	46bd      	mov	sp, r7
 80131fe:	bd90      	pop	{r4, r7, pc}

08013200 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8013200:	b580      	push	{r7, lr}
 8013202:	b082      	sub	sp, #8
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8013208:	2100      	movs	r1, #0
 801320a:	6878      	ldr	r0, [r7, #4]
 801320c:	f7ff f966 	bl	80124dc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8013210:	4603      	mov	r3, r0
}
 8013212:	4618      	mov	r0, r3
 8013214:	3708      	adds	r7, #8
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}

0801321a <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801321a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801321c:	b085      	sub	sp, #20
 801321e:	af00      	add	r7, sp, #0
 8013220:	6078      	str	r0, [r7, #4]
 8013222:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8013224:	1d3b      	adds	r3, r7, #4
 8013226:	4618      	mov	r0, r3
 8013228:	f7ff ff8e 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801322c:	4603      	mov	r3, r0
 801322e:	681d      	ldr	r5, [r3, #0]
 8013230:	463b      	mov	r3, r7
 8013232:	4618      	mov	r0, r3
 8013234:	f000 f8d9 	bl	80133ea <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013238:	4603      	mov	r3, r0
 801323a:	681e      	ldr	r6, [r3, #0]
 801323c:	f107 030c 	add.w	r3, r7, #12
 8013240:	4618      	mov	r0, r3
 8013242:	f000 f8d2 	bl	80133ea <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013246:	4604      	mov	r4, r0
 8013248:	4631      	mov	r1, r6
 801324a:	4628      	mov	r0, r5
 801324c:	f7fe fcd6 	bl	8011bfc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8013250:	4603      	mov	r3, r0
 8013252:	6023      	str	r3, [r4, #0]
  return c;
 8013254:	68fb      	ldr	r3, [r7, #12]
}
 8013256:	4618      	mov	r0, r3
 8013258:	3714      	adds	r7, #20
 801325a:	46bd      	mov	sp, r7
 801325c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801325e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801325e:	b590      	push	{r4, r7, lr}
 8013260:	b083      	sub	sp, #12
 8013262:	af00      	add	r7, sp, #0
 8013264:	6078      	str	r0, [r7, #4]
 8013266:	6039      	str	r1, [r7, #0]
 8013268:	1d3b      	adds	r3, r7, #4
 801326a:	4618      	mov	r0, r3
 801326c:	f000 f8bd 	bl	80133ea <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013270:	4603      	mov	r3, r0
 8013272:	681c      	ldr	r4, [r3, #0]
 8013274:	463b      	mov	r3, r7
 8013276:	4618      	mov	r0, r3
 8013278:	f000 f8b7 	bl	80133ea <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801327c:	4603      	mov	r3, r0
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	4619      	mov	r1, r3
 8013282:	4620      	mov	r0, r4
 8013284:	f7ff fd2a 	bl	8012cdc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8013288:	4603      	mov	r3, r0
 801328a:	4618      	mov	r0, r3
 801328c:	f000 f8b8 	bl	8013400 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8013290:	4603      	mov	r3, r0
 8013292:	4618      	mov	r0, r3
 8013294:	370c      	adds	r7, #12
 8013296:	46bd      	mov	sp, r7
 8013298:	bd90      	pop	{r4, r7, pc}

0801329a <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 801329a:	b580      	push	{r7, lr}
 801329c:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801329e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80132a2:	f7ff ff99 	bl	80131d8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 80132a6:	4603      	mov	r3, r0
  }
 80132a8:	4618      	mov	r0, r3
 80132aa:	bd80      	pop	{r7, pc}

080132ac <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 80132ac:	b590      	push	{r4, r7, lr}
 80132ae:	b083      	sub	sp, #12
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
 80132b4:	6039      	str	r1, [r7, #0]
 80132b6:	1d3b      	adds	r3, r7, #4
 80132b8:	4618      	mov	r0, r3
 80132ba:	f000 f896 	bl	80133ea <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80132be:	4603      	mov	r3, r0
 80132c0:	681c      	ldr	r4, [r3, #0]
 80132c2:	463b      	mov	r3, r7
 80132c4:	4618      	mov	r0, r3
 80132c6:	f000 f890 	bl	80133ea <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80132ca:	4603      	mov	r3, r0
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	4619      	mov	r1, r3
 80132d0:	4620      	mov	r0, r4
 80132d2:	f000 f875 	bl	80133c0 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 80132d6:	4603      	mov	r3, r0
 80132d8:	4618      	mov	r0, r3
 80132da:	f000 f891 	bl	8013400 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 80132de:	4603      	mov	r3, r0
 80132e0:	4618      	mov	r0, r3
 80132e2:	370c      	adds	r7, #12
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd90      	pop	{r4, r7, pc}

080132e8 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 80132e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132ea:	b085      	sub	sp, #20
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
 80132f0:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 80132f2:	1d3b      	adds	r3, r7, #4
 80132f4:	4618      	mov	r0, r3
 80132f6:	f000 f878 	bl	80133ea <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80132fa:	4603      	mov	r3, r0
 80132fc:	681d      	ldr	r5, [r3, #0]
 80132fe:	463b      	mov	r3, r7
 8013300:	4618      	mov	r0, r3
 8013302:	f000 f872 	bl	80133ea <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013306:	4603      	mov	r3, r0
 8013308:	681e      	ldr	r6, [r3, #0]
 801330a:	f107 030c 	add.w	r3, r7, #12
 801330e:	4618      	mov	r0, r3
 8013310:	f000 f887 	bl	8013422 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8013314:	4604      	mov	r4, r0
 8013316:	4631      	mov	r1, r6
 8013318:	4628      	mov	r0, r5
 801331a:	f7fe fc6f 	bl	8011bfc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801331e:	4603      	mov	r3, r0
 8013320:	6023      	str	r3, [r4, #0]
  return c;
 8013322:	68fb      	ldr	r3, [r7, #12]
}
 8013324:	4618      	mov	r0, r3
 8013326:	3714      	adds	r7, #20
 8013328:	46bd      	mov	sp, r7
 801332a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801332c <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801332c:	b5b0      	push	{r4, r5, r7, lr}
 801332e:	b084      	sub	sp, #16
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8013334:	1d3b      	adds	r3, r7, #4
 8013336:	4618      	mov	r0, r3
 8013338:	f000 f873 	bl	8013422 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801333c:	4603      	mov	r3, r0
 801333e:	681d      	ldr	r5, [r3, #0]
 8013340:	f107 030c 	add.w	r3, r7, #12
 8013344:	4618      	mov	r0, r3
 8013346:	f000 f850 	bl	80133ea <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801334a:	4604      	mov	r4, r0
 801334c:	4628      	mov	r0, r5
 801334e:	f000 f873 	bl	8013438 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 8013352:	4603      	mov	r3, r0
 8013354:	6023      	str	r3, [r4, #0]
  return result;
 8013356:	68fb      	ldr	r3, [r7, #12]
}
 8013358:	4618      	mov	r0, r3
 801335a:	3710      	adds	r7, #16
 801335c:	46bd      	mov	sp, r7
 801335e:	bdb0      	pop	{r4, r5, r7, pc}

08013360 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 8013360:	b590      	push	{r4, r7, lr}
 8013362:	b085      	sub	sp, #20
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 8013368:	1d3b      	adds	r3, r7, #4
 801336a:	4618      	mov	r0, r3
 801336c:	f000 f83d 	bl	80133ea <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013370:	4604      	mov	r4, r0
 8013372:	f107 030c 	add.w	r3, r7, #12
 8013376:	4618      	mov	r0, r3
 8013378:	f000 f86a 	bl	8013450 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801337c:	4602      	mov	r2, r0
 801337e:	6823      	ldr	r3, [r4, #0]
 8013380:	6013      	str	r3, [r2, #0]
  return c;
 8013382:	68fb      	ldr	r3, [r7, #12]
}
 8013384:	4618      	mov	r0, r3
 8013386:	3714      	adds	r7, #20
 8013388:	46bd      	mov	sp, r7
 801338a:	bd90      	pop	{r4, r7, pc}

0801338c <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801338c:	b5b0      	push	{r4, r5, r7, lr}
 801338e:	b084      	sub	sp, #16
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8013394:	1d3b      	adds	r3, r7, #4
 8013396:	4618      	mov	r0, r3
 8013398:	f000 f85a 	bl	8013450 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801339c:	4603      	mov	r3, r0
 801339e:	681d      	ldr	r5, [r3, #0]
 80133a0:	f107 030c 	add.w	r3, r7, #12
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7ff fecf 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80133aa:	4604      	mov	r4, r0
 80133ac:	4628      	mov	r0, r5
 80133ae:	f000 f85a 	bl	8013466 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 80133b2:	4603      	mov	r3, r0
 80133b4:	6023      	str	r3, [r4, #0]
  return result;
 80133b6:	68fb      	ldr	r3, [r7, #12]
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	3710      	adds	r7, #16
 80133bc:	46bd      	mov	sp, r7
 80133be:	bdb0      	pop	{r4, r5, r7, pc}

080133c0 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 80133c0:	b480      	push	{r7}
 80133c2:	b083      	sub	sp, #12
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	6039      	str	r1, [r7, #0]
  return a - b;
 80133ca:	687a      	ldr	r2, [r7, #4]
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	1ad3      	subs	r3, r2, r3
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	370c      	adds	r7, #12
 80133d4:	46bd      	mov	sp, r7
 80133d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133da:	4770      	bx	lr

080133dc <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 80133dc:	b580      	push	{r7, lr}
 80133de:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 80133e0:	f7fd fe68 	bl	80110b4 <_ZNSt14numeric_limitsIlE3maxEv>
 80133e4:	4603      	mov	r3, r0
  }
 80133e6:	4618      	mov	r0, r3
 80133e8:	bd80      	pop	{r7, pc}

080133ea <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 80133ea:	b480      	push	{r7}
 80133ec:	b083      	sub	sp, #12
 80133ee:	af00      	add	r7, sp, #0
 80133f0:	6078      	str	r0, [r7, #4]
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	4618      	mov	r0, r3
 80133f6:	370c      	adds	r7, #12
 80133f8:	46bd      	mov	sp, r7
 80133fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fe:	4770      	bx	lr

08013400 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8013400:	b580      	push	{r7, lr}
 8013402:	b084      	sub	sp, #16
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8013408:	f107 030c 	add.w	r3, r7, #12
 801340c:	4618      	mov	r0, r3
 801340e:	f7ff ffec 	bl	80133ea <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013412:	4602      	mov	r2, r0
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	6013      	str	r3, [r2, #0]
    return retval;
 8013418:	68fb      	ldr	r3, [r7, #12]
  }
 801341a:	4618      	mov	r0, r3
 801341c:	3710      	adds	r7, #16
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}

08013422 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 8013422:	b480      	push	{r7}
 8013424:	b083      	sub	sp, #12
 8013426:	af00      	add	r7, sp, #0
 8013428:	6078      	str	r0, [r7, #4]
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	4618      	mov	r0, r3
 801342e:	370c      	adds	r7, #12
 8013430:	46bd      	mov	sp, r7
 8013432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013436:	4770      	bx	lr

08013438 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8013438:	b580      	push	{r7, lr}
 801343a:	b082      	sub	sp, #8
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f000 f81d 	bl	8013480 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 8013446:	4603      	mov	r3, r0
}
 8013448:	4618      	mov	r0, r3
 801344a:	3708      	adds	r7, #8
 801344c:	46bd      	mov	sp, r7
 801344e:	bd80      	pop	{r7, pc}

08013450 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 8013450:	b480      	push	{r7}
 8013452:	b083      	sub	sp, #12
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	4618      	mov	r0, r3
 801345c:	370c      	adds	r7, #12
 801345e:	46bd      	mov	sp, r7
 8013460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013464:	4770      	bx	lr

08013466 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8013466:	b580      	push	{r7, lr}
 8013468:	b082      	sub	sp, #8
 801346a:	af00      	add	r7, sp, #0
 801346c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801346e:	6878      	ldr	r0, [r7, #4]
 8013470:	f000 f848 	bl	8013504 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 8013474:	4603      	mov	r3, r0
}
 8013476:	4618      	mov	r0, r3
 8013478:	3708      	adds	r7, #8
 801347a:	46bd      	mov	sp, r7
 801347c:	bd80      	pop	{r7, pc}
	...

08013480 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013480:	b580      	push	{r7, lr}
 8013482:	b08a      	sub	sp, #40	; 0x28
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8013488:	f7fe fba3 	bl	8011bd2 <_ZNSt14numeric_limitsIlE3minEv>
 801348c:	4603      	mov	r3, r0
 801348e:	4618      	mov	r0, r3
 8013490:	f7ff fbe8 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013494:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8013496:	f7fd fe0d 	bl	80110b4 <_ZNSt14numeric_limitsIlE3maxEv>
 801349a:	4603      	mov	r3, r0
 801349c:	4618      	mov	r0, r3
 801349e:	f7ff fbe1 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80134a2:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 80134a4:	2320      	movs	r3, #32
 80134a6:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 80134a8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80134ac:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 80134ae:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 80134b2:	f7ff fbd7 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80134b6:	4603      	mov	r3, r0
 80134b8:	4619      	mov	r1, r3
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f7ff fc1c 	bl	8012cf8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80134c0:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80134c2:	480f      	ldr	r0, [pc, #60]	; (8013500 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 80134c4:	f7ff fbce 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80134c8:	4603      	mov	r3, r0
 80134ca:	4619      	mov	r1, r3
 80134cc:	6878      	ldr	r0, [r7, #4]
 80134ce:	f7ff fbf1 	bl	8012cb4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80134d2:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80134d4:	2102      	movs	r1, #2
 80134d6:	6878      	ldr	r0, [r7, #4]
 80134d8:	f000 f856 	bl	8013588 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80134dc:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80134de:	68fa      	ldr	r2, [r7, #12]
 80134e0:	6a39      	ldr	r1, [r7, #32]
 80134e2:	6978      	ldr	r0, [r7, #20]
 80134e4:	f000 f894 	bl	8013610 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80134e8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 80134ea:	68fa      	ldr	r2, [r7, #12]
 80134ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80134ee:	6938      	ldr	r0, [r7, #16]
 80134f0:	f000 f88e 	bl	8013610 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80134f4:	60f8      	str	r0, [r7, #12]
    return result;
 80134f6:	68fb      	ldr	r3, [r7, #12]
  }
 80134f8:	4618      	mov	r0, r3
 80134fa:	3728      	adds	r7, #40	; 0x28
 80134fc:	46bd      	mov	sp, r7
 80134fe:	bd80      	pop	{r7, pc}
 8013500:	e0000001 	.word	0xe0000001

08013504 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013504:	b580      	push	{r7, lr}
 8013506:	b08a      	sub	sp, #40	; 0x28
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801350c:	f7fe fb61 	bl	8011bd2 <_ZNSt14numeric_limitsIlE3minEv>
 8013510:	4603      	mov	r3, r0
 8013512:	4618      	mov	r0, r3
 8013514:	f7ff fba6 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013518:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801351a:	f7fd fdcb 	bl	80110b4 <_ZNSt14numeric_limitsIlE3maxEv>
 801351e:	4603      	mov	r3, r0
 8013520:	4618      	mov	r0, r3
 8013522:	f7ff fb9f 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013526:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8013528:	2320      	movs	r3, #32
 801352a:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801352c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013530:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8013532:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8013536:	f7ff fb95 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801353a:	4603      	mov	r3, r0
 801353c:	4619      	mov	r1, r3
 801353e:	6878      	ldr	r0, [r7, #4]
 8013540:	f7ff fbda 	bl	8012cf8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8013544:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8013546:	480f      	ldr	r0, [pc, #60]	; (8013584 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 8013548:	f7ff fb8c 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801354c:	4603      	mov	r3, r0
 801354e:	4619      	mov	r1, r3
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f7ff fbaf 	bl	8012cb4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8013556:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8013558:	2101      	movs	r1, #1
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f000 f814 	bl	8013588 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8013560:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8013562:	68fa      	ldr	r2, [r7, #12]
 8013564:	6a39      	ldr	r1, [r7, #32]
 8013566:	6978      	ldr	r0, [r7, #20]
 8013568:	f000 f852 	bl	8013610 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801356c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801356e:	68fa      	ldr	r2, [r7, #12]
 8013570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013572:	6938      	ldr	r0, [r7, #16]
 8013574:	f000 f84c 	bl	8013610 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013578:	60f8      	str	r0, [r7, #12]
    return result;
 801357a:	68fb      	ldr	r3, [r7, #12]
  }
 801357c:	4618      	mov	r0, r3
 801357e:	3728      	adds	r7, #40	; 0x28
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}
 8013584:	c0000001 	.word	0xc0000001

08013588 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 8013588:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 801358c:	b089      	sub	sp, #36	; 0x24
 801358e:	af00      	add	r7, sp, #0
 8013590:	6078      	str	r0, [r7, #4]
 8013592:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 8013594:	6879      	ldr	r1, [r7, #4]
 8013596:	17c8      	asrs	r0, r1, #31
 8013598:	4688      	mov	r8, r1
 801359a:	4681      	mov	r9, r0
 801359c:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 80135a0:	2001      	movs	r0, #1
 80135a2:	6839      	ldr	r1, [r7, #0]
 80135a4:	fa00 f101 	lsl.w	r1, r0, r1
 80135a8:	17c8      	asrs	r0, r1, #31
 80135aa:	460c      	mov	r4, r1
 80135ac:	4605      	mov	r5, r0
 80135ae:	69f9      	ldr	r1, [r7, #28]
 80135b0:	fb04 f001 	mul.w	r0, r4, r1
 80135b4:	69b9      	ldr	r1, [r7, #24]
 80135b6:	fb05 f101 	mul.w	r1, r5, r1
 80135ba:	4401      	add	r1, r0
 80135bc:	69b8      	ldr	r0, [r7, #24]
 80135be:	fba0 2304 	umull	r2, r3, r0, r4
 80135c2:	4419      	add	r1, r3
 80135c4:	460b      	mov	r3, r1
 80135c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80135ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 80135ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80135d2:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 80135d4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80135d8:	60bb      	str	r3, [r7, #8]
             ? min
 80135da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80135de:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80135e2:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80135e6:	db0b      	blt.n	8013600 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 80135e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80135ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80135f0:	f173 0300 	sbcs.w	r3, r3, #0
 80135f4:	da01      	bge.n	80135fa <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 80135f6:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 80135f8:	e004      	b.n	8013604 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 80135fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 80135fe:	e001      	b.n	8013604 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 8013600:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013604:	4618      	mov	r0, r3
 8013606:	3724      	adds	r7, #36	; 0x24
 8013608:	46bd      	mov	sp, r7
 801360a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 801360e:	4770      	bx	lr

08013610 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 8013610:	b590      	push	{r4, r7, lr}
 8013612:	b085      	sub	sp, #20
 8013614:	af00      	add	r7, sp, #0
 8013616:	60f8      	str	r0, [r7, #12]
 8013618:	60b9      	str	r1, [r7, #8]
 801361a:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 801361c:	68b9      	ldr	r1, [r7, #8]
 801361e:	68f8      	ldr	r0, [r7, #12]
 8013620:	f7ff fb2b 	bl	8012c7a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8013624:	4604      	mov	r4, r0
 8013626:	68f8      	ldr	r0, [r7, #12]
 8013628:	f7ff fb8b 	bl	8012d42 <_ZN8gemmlowp6BitNotIlEET_S1_>
 801362c:	4603      	mov	r3, r0
 801362e:	6879      	ldr	r1, [r7, #4]
 8013630:	4618      	mov	r0, r3
 8013632:	f7ff fb22 	bl	8012c7a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8013636:	4603      	mov	r3, r0
 8013638:	4619      	mov	r1, r3
 801363a:	4620      	mov	r0, r4
 801363c:	f000 f805 	bl	801364a <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 8013640:	4603      	mov	r3, r0
}
 8013642:	4618      	mov	r0, r3
 8013644:	3714      	adds	r7, #20
 8013646:	46bd      	mov	sp, r7
 8013648:	bd90      	pop	{r4, r7, pc}

0801364a <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 801364a:	b480      	push	{r7}
 801364c:	b083      	sub	sp, #12
 801364e:	af00      	add	r7, sp, #0
 8013650:	6078      	str	r0, [r7, #4]
 8013652:	6039      	str	r1, [r7, #0]
  return a ^ b;
 8013654:	687a      	ldr	r2, [r7, #4]
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	4053      	eors	r3, r2
}
 801365a:	4618      	mov	r0, r3
 801365c:	370c      	adds	r7, #12
 801365e:	46bd      	mov	sp, r7
 8013660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013664:	4770      	bx	lr

08013666 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8013666:	b580      	push	{r7, lr}
 8013668:	b086      	sub	sp, #24
 801366a:	af00      	add	r7, sp, #0
 801366c:	6078      	str	r0, [r7, #4]
 801366e:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	f7fe fa2c 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013676:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	2b00      	cmp	r3, #0
 801367c:	db03      	blt.n	8013686 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 801367e:	683a      	ldr	r2, [r7, #0]
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	429a      	cmp	r2, r3
 8013684:	db01      	blt.n	801368a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8013686:	f006 fdd5 	bl	801a234 <abort>
  const auto* dims_data = shape.DimsData();
 801368a:	6878      	ldr	r0, [r7, #4]
 801368c:	f7fe fb51 	bl	8011d32 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8013690:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8013692:	2301      	movs	r3, #1
 8013694:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8013696:	2300      	movs	r3, #0
 8013698:	613b      	str	r3, [r7, #16]
 801369a:	693a      	ldr	r2, [r7, #16]
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	429a      	cmp	r2, r3
 80136a0:	da12      	bge.n	80136c8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 80136a2:	693a      	ldr	r2, [r7, #16]
 80136a4:	683b      	ldr	r3, [r7, #0]
 80136a6:	429a      	cmp	r2, r3
 80136a8:	d005      	beq.n	80136b6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	009b      	lsls	r3, r3, #2
 80136ae:	68ba      	ldr	r2, [r7, #8]
 80136b0:	4413      	add	r3, r2
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	e000      	b.n	80136b8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 80136b6:	2301      	movs	r3, #1
 80136b8:	697a      	ldr	r2, [r7, #20]
 80136ba:	fb02 f303 	mul.w	r3, r2, r3
 80136be:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 80136c0:	693b      	ldr	r3, [r7, #16]
 80136c2:	3301      	adds	r3, #1
 80136c4:	613b      	str	r3, [r7, #16]
 80136c6:	e7e8      	b.n	801369a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 80136c8:	697b      	ldr	r3, [r7, #20]
}
 80136ca:	4618      	mov	r0, r3
 80136cc:	3718      	adds	r7, #24
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd80      	pop	{r7, pc}

080136d2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 80136d2:	b590      	push	{r4, r7, lr}
 80136d4:	b091      	sub	sp, #68	; 0x44
 80136d6:	af00      	add	r7, sp, #0
 80136d8:	60f8      	str	r0, [r7, #12]
 80136da:	60b9      	str	r1, [r7, #8]
 80136dc:	607a      	str	r2, [r7, #4]
 80136de:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	69db      	ldr	r3, [r3, #28]
 80136e4:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	6a1b      	ldr	r3, [r3, #32]
 80136ea:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 80136ec:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80136ee:	f7fe f9ee 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80136f2:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 80136f4:	6838      	ldr	r0, [r7, #0]
 80136f6:	f7fe f9ea 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80136fa:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 80136fc:	6a3b      	ldr	r3, [r7, #32]
 80136fe:	3b01      	subs	r3, #1
 8013700:	4619      	mov	r1, r3
 8013702:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013704:	f7ff ffaf 	bl	8013666 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8013708:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 801370a:	69fb      	ldr	r3, [r7, #28]
 801370c:	1e99      	subs	r1, r3, #2
 801370e:	6a3b      	ldr	r3, [r7, #32]
 8013710:	3b01      	subs	r3, #1
 8013712:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013714:	6838      	ldr	r0, [r7, #0]
 8013716:	f7ff fbc6 	bl	8012ea6 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801371a:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 801371c:	69fb      	ldr	r3, [r7, #28]
 801371e:	3b01      	subs	r3, #1
 8013720:	4619      	mov	r1, r3
 8013722:	6838      	ldr	r0, [r7, #0]
 8013724:	f7fe fae0 	bl	8011ce8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013728:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 801372a:	2300      	movs	r3, #0
 801372c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801372e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013730:	69bb      	ldr	r3, [r7, #24]
 8013732:	429a      	cmp	r2, r3
 8013734:	da5f      	bge.n	80137f6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8013736:	2300      	movs	r3, #0
 8013738:	63bb      	str	r3, [r7, #56]	; 0x38
 801373a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	429a      	cmp	r2, r3
 8013740:	da55      	bge.n	80137ee <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 8013742:	f04f 0300 	mov.w	r3, #0
 8013746:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8013748:	2300      	movs	r3, #0
 801374a:	633b      	str	r3, [r7, #48]	; 0x30
 801374c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801374e:	693b      	ldr	r3, [r7, #16]
 8013750:	429a      	cmp	r2, r3
 8013752:	da21      	bge.n	8013798 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 8013754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013756:	693a      	ldr	r2, [r7, #16]
 8013758:	fb03 f202 	mul.w	r2, r3, r2
 801375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801375e:	4413      	add	r3, r2
 8013760:	009b      	lsls	r3, r3, #2
 8013762:	687a      	ldr	r2, [r7, #4]
 8013764:	4413      	add	r3, r2
 8013766:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 801376a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801376c:	693a      	ldr	r2, [r7, #16]
 801376e:	fb03 f202 	mul.w	r2, r3, r2
 8013772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013774:	4413      	add	r3, r2
 8013776:	009b      	lsls	r3, r3, #2
 8013778:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801377a:	4413      	add	r3, r2
 801377c:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 8013780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013784:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8013788:	ee77 7a27 	vadd.f32	s15, s14, s15
 801378c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8013790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013792:	3301      	adds	r3, #1
 8013794:	633b      	str	r3, [r7, #48]	; 0x30
 8013796:	e7d9      	b.n	801374c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 8013798:	f04f 0300 	mov.w	r3, #0
 801379c:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 801379e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d005      	beq.n	80137b0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 80137a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137a6:	009b      	lsls	r3, r3, #2
 80137a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80137aa:	4413      	add	r3, r2
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 80137b0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80137b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80137b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80137c0:	fb03 f202 	mul.w	r2, r3, r2
 80137c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c6:	4413      	add	r3, r2
 80137c8:	009b      	lsls	r3, r3, #2
 80137ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80137cc:	18d4      	adds	r4, r2, r3
 80137ce:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 80137d2:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 80137d6:	eeb0 0a67 	vmov.f32	s0, s15
 80137da:	f7ff fad9 	bl	8012d90 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 80137de:	eef0 7a40 	vmov.f32	s15, s0
 80137e2:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80137e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137e8:	3301      	adds	r3, #1
 80137ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80137ec:	e7a5      	b.n	801373a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 80137ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137f0:	3301      	adds	r3, #1
 80137f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80137f4:	e79b      	b.n	801372e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 80137f6:	bf00      	nop
 80137f8:	3744      	adds	r7, #68	; 0x44
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd90      	pop	{r4, r7, pc}

080137fe <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    uint8_t* output_data) {
 80137fe:	b580      	push	{r7, lr}
 8013800:	b096      	sub	sp, #88	; 0x58
 8013802:	af00      	add	r7, sp, #0
 8013804:	60f8      	str	r0, [r7, #12]
 8013806:	60b9      	str	r1, [r7, #8]
 8013808:	607a      	str	r2, [r7, #4]
 801380a:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	685b      	ldr	r3, [r3, #4]
 8013816:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	689b      	ldr	r3, [r3, #8]
 801381c:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	68db      	ldr	r3, [r3, #12]
 8013822:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	691b      	ldr	r3, [r3, #16]
 8013828:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	695b      	ldr	r3, [r3, #20]
 801382e:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	699b      	ldr	r3, [r3, #24]
 8013834:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 8013836:	6838      	ldr	r0, [r7, #0]
 8013838:	f7fe f949 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801383c:	4603      	mov	r3, r0
 801383e:	2b01      	cmp	r3, #1
 8013840:	dc01      	bgt.n	8013846 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 8013842:	f006 fcf7 	bl	801a234 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 8013846:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013848:	f7fe f941 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801384c:	4603      	mov	r3, r0
 801384e:	2b00      	cmp	r3, #0
 8013850:	dc01      	bgt.n	8013856 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 8013852:	f006 fcef 	bl	801a234 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8013856:	69ba      	ldr	r2, [r7, #24]
 8013858:	697b      	ldr	r3, [r7, #20]
 801385a:	429a      	cmp	r2, r3
 801385c:	dd01      	ble.n	8013862 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 801385e:	f006 fce9 	bl	801a234 <abort>
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 8013862:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013864:	f7fe f933 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013868:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 801386a:	6838      	ldr	r0, [r7, #0]
 801386c:	f7fe f92f 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013870:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8013872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013874:	3b01      	subs	r3, #1
 8013876:	4619      	mov	r1, r3
 8013878:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801387a:	f7ff fef4 	bl	8013666 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801387e:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 8013880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013882:	1e99      	subs	r1, r3, #2
 8013884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013886:	3b01      	subs	r3, #1
 8013888:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801388a:	6838      	ldr	r0, [r7, #0]
 801388c:	f7ff fb0b 	bl	8012ea6 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8013890:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8013892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013894:	3b01      	subs	r3, #1
 8013896:	4619      	mov	r1, r3
 8013898:	6838      	ldr	r0, [r7, #0]
 801389a:	f7fe fa25 	bl	8011ce8 <_ZNK6tflite12RuntimeShape4DimsEi>
 801389e:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 80138a0:	2300      	movs	r3, #0
 80138a2:	657b      	str	r3, [r7, #84]	; 0x54
 80138a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80138a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138a8:	429a      	cmp	r2, r3
 80138aa:	da73      	bge.n	8013994 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80138ac:	2300      	movs	r3, #0
 80138ae:	653b      	str	r3, [r7, #80]	; 0x50
 80138b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80138b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138b4:	429a      	cmp	r2, r3
 80138b6:	da69      	bge.n	801398c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32_t acc = 0;
 80138b8:	2300      	movs	r3, #0
 80138ba:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 80138bc:	2300      	movs	r3, #0
 80138be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80138c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80138c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138c4:	429a      	cmp	r2, r3
 80138c6:	da24      	bge.n	8013912 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32_t input_val = input_data[b * accum_depth + d];
 80138c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138cc:	fb03 f202 	mul.w	r2, r3, r2
 80138d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138d2:	4413      	add	r3, r2
 80138d4:	461a      	mov	r2, r3
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	4413      	add	r3, r2
 80138da:	781b      	ldrb	r3, [r3, #0]
 80138dc:	623b      	str	r3, [r7, #32]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 80138de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138e2:	fb03 f202 	mul.w	r2, r3, r2
 80138e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138e8:	4413      	add	r3, r2
 80138ea:	461a      	mov	r2, r3
 80138ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80138ee:	4413      	add	r3, r2
 80138f0:	781b      	ldrb	r3, [r3, #0]
 80138f2:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 80138f4:	69fa      	ldr	r2, [r7, #28]
 80138f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138f8:	4413      	add	r3, r2
 80138fa:	6a39      	ldr	r1, [r7, #32]
 80138fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80138fe:	440a      	add	r2, r1
 8013900:	fb03 f202 	mul.w	r2, r3, r2
 8013904:	693b      	ldr	r3, [r7, #16]
 8013906:	4413      	add	r3, r2
 8013908:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 801390a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801390c:	3301      	adds	r3, #1
 801390e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013910:	e7d6      	b.n	80138c0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 8013912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013914:	2b00      	cmp	r3, #0
 8013916:	d007      	beq.n	8013928 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 8013918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801391a:	009b      	lsls	r3, r3, #2
 801391c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801391e:	4413      	add	r3, r2
 8013920:	681a      	ldr	r2, [r3, #0]
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	4413      	add	r3, r2
 8013926:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 8013928:	693b      	ldr	r3, [r7, #16]
 801392a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801392c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801392e:	4618      	mov	r0, r3
 8013930:	f7fe fa6a 	bl	8011e08 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8013934:	4603      	mov	r3, r0
 8013936:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 8013938:	693a      	ldr	r2, [r7, #16]
 801393a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801393c:	4413      	add	r3, r2
 801393e:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 8013940:	f107 0218 	add.w	r2, r7, #24
 8013944:	f107 0310 	add.w	r3, r7, #16
 8013948:	4611      	mov	r1, r2
 801394a:	4618      	mov	r0, r3
 801394c:	f7fe f874 	bl	8011a38 <_ZSt3maxIlERKT_S2_S2_>
 8013950:	4603      	mov	r3, r0
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 8013956:	f107 0214 	add.w	r2, r7, #20
 801395a:	f107 0310 	add.w	r3, r7, #16
 801395e:	4611      	mov	r1, r2
 8013960:	4618      	mov	r0, r3
 8013962:	f7fe f855 	bl	8011a10 <_ZSt3minIlERKT_S2_S2_>
 8013966:	4603      	mov	r3, r0
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
 801396c:	6939      	ldr	r1, [r7, #16]
 801396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013970:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013972:	fb03 f202 	mul.w	r2, r3, r2
 8013976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013978:	4413      	add	r3, r2
 801397a:	461a      	mov	r2, r3
 801397c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801397e:	4413      	add	r3, r2
 8013980:	b2ca      	uxtb	r2, r1
 8013982:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8013984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013986:	3301      	adds	r3, #1
 8013988:	653b      	str	r3, [r7, #80]	; 0x50
 801398a:	e791      	b.n	80138b0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 801398c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801398e:	3301      	adds	r3, #1
 8013990:	657b      	str	r3, [r7, #84]	; 0x54
 8013992:	e787      	b.n	80138a4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 8013994:	bf00      	nop
 8013996:	3758      	adds	r7, #88	; 0x58
 8013998:	46bd      	mov	sp, r7
 801399a:	bd80      	pop	{r7, pc}

0801399c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 801399c:	b580      	push	{r7, lr}
 801399e:	b084      	sub	sp, #16
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	60f8      	str	r0, [r7, #12]
 80139a4:	60b9      	str	r1, [r7, #8]
 80139a6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d101      	bne.n	80139b4 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 80139b0:	f006 fc40 	bl	801a234 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139b8:	2124      	movs	r1, #36	; 0x24
 80139ba:	68f8      	ldr	r0, [r7, #12]
 80139bc:	4798      	blx	r3
 80139be:	4603      	mov	r3, r0
}
 80139c0:	4618      	mov	r0, r3
 80139c2:	3710      	adds	r7, #16
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}

080139c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80139c8:	b5b0      	push	{r4, r5, r7, lr}
 80139ca:	b0a0      	sub	sp, #128	; 0x80
 80139cc:	af04      	add	r7, sp, #16
 80139ce:	6078      	str	r0, [r7, #4]
 80139d0:	6039      	str	r1, [r7, #0]
 80139d2:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	691b      	ldr	r3, [r3, #16]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d101      	bne.n	80139e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 80139dc:	f006 fc2a 	bl	801a234 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	695b      	ldr	r3, [r3, #20]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d101      	bne.n	80139ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 80139e8:	f006 fc24 	bl	801a234 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	691b      	ldr	r3, [r3, #16]
 80139f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	695b      	ldr	r3, [r3, #20]
 80139f6:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 80139f8:	4b81      	ldr	r3, [pc, #516]	; (8013c00 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	461a      	mov	r2, r3
 80139fe:	6839      	ldr	r1, [r7, #0]
 8013a00:	6878      	ldr	r0, [r7, #4]
 8013a02:	f7fd fde3 	bl	80115cc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013a06:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, input != nullptr);
 8013a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d10a      	bne.n	8013a24 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	695c      	ldr	r4, [r3, #20]
 8013a12:	4b7c      	ldr	r3, [pc, #496]	; (8013c04 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8013a14:	9300      	str	r3, [sp, #0]
 8013a16:	2340      	movs	r3, #64	; 0x40
 8013a18:	4a7b      	ldr	r2, [pc, #492]	; (8013c08 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8013a1a:	497c      	ldr	r1, [pc, #496]	; (8013c0c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8013a1c:	6878      	ldr	r0, [r7, #4]
 8013a1e:	47a0      	blx	r4
 8013a20:	2401      	movs	r4, #1
 8013a22:	e0e7      	b.n	8013bf4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 8013a24:	4b7a      	ldr	r3, [pc, #488]	; (8013c10 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	461a      	mov	r2, r3
 8013a2a:	6839      	ldr	r1, [r7, #0]
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f7fd fdcd 	bl	80115cc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013a32:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(context, filter != nullptr);
 8013a34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d10a      	bne.n	8013a50 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	695c      	ldr	r4, [r3, #20]
 8013a3e:	4b75      	ldr	r3, [pc, #468]	; (8013c14 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 8013a40:	9300      	str	r3, [sp, #0]
 8013a42:	2343      	movs	r3, #67	; 0x43
 8013a44:	4a70      	ldr	r2, [pc, #448]	; (8013c08 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8013a46:	4971      	ldr	r1, [pc, #452]	; (8013c0c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8013a48:	6878      	ldr	r0, [r7, #4]
 8013a4a:	47a0      	blx	r4
 8013a4c:	2401      	movs	r4, #1
 8013a4e:	e0d1      	b.n	8013bf4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 8013a50:	4b71      	ldr	r3, [pc, #452]	; (8013c18 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	461a      	mov	r2, r3
 8013a56:	6839      	ldr	r1, [r7, #0]
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f7fd fde7 	bl	801162c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 8013a5e:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 8013a60:	4b6e      	ldr	r3, [pc, #440]	; (8013c1c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	461a      	mov	r2, r3
 8013a66:	6839      	ldr	r1, [r7, #0]
 8013a68:	6878      	ldr	r0, [r7, #4]
 8013a6a:	f7fd fdbf 	bl	80115ec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8013a6e:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 8013a70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d10a      	bne.n	8013a8c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	695c      	ldr	r4, [r3, #20]
 8013a7a:	4b69      	ldr	r3, [pc, #420]	; (8013c20 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 8013a7c:	9300      	str	r3, [sp, #0]
 8013a7e:	2347      	movs	r3, #71	; 0x47
 8013a80:	4a61      	ldr	r2, [pc, #388]	; (8013c08 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8013a82:	4962      	ldr	r1, [pc, #392]	; (8013c0c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8013a84:	6878      	ldr	r0, [r7, #4]
 8013a86:	47a0      	blx	r4
 8013a88:	2401      	movs	r4, #1
 8013a8a:	e0b3      	b.n	8013bf4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8013a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013a8e:	781a      	ldrb	r2, [r3, #0]
 8013a90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	429a      	cmp	r2, r3
 8013a96:	d01a      	beq.n	8013ace <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	695c      	ldr	r4, [r3, #20]
 8013a9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013a9e:	781b      	ldrb	r3, [r3, #0]
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	f7fd fa8b 	bl	8010fbc <TfLiteTypeGetName>
 8013aa6:	4605      	mov	r5, r0
 8013aa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013aaa:	781b      	ldrb	r3, [r3, #0]
 8013aac:	4618      	mov	r0, r3
 8013aae:	f7fd fa85 	bl	8010fbc <TfLiteTypeGetName>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	9303      	str	r3, [sp, #12]
 8013ab6:	9502      	str	r5, [sp, #8]
 8013ab8:	4b5a      	ldr	r3, [pc, #360]	; (8013c24 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 8013aba:	9301      	str	r3, [sp, #4]
 8013abc:	4b5a      	ldr	r3, [pc, #360]	; (8013c28 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 8013abe:	9300      	str	r3, [sp, #0]
 8013ac0:	2349      	movs	r3, #73	; 0x49
 8013ac2:	4a51      	ldr	r2, [pc, #324]	; (8013c08 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8013ac4:	4959      	ldr	r1, [pc, #356]	; (8013c2c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	47a0      	blx	r4
 8013aca:	2401      	movs	r4, #1
 8013acc:	e092      	b.n	8013bf4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 8013ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013ad0:	781a      	ldrb	r2, [r3, #0]
 8013ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013ad4:	781b      	ldrb	r3, [r3, #0]
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	d006      	beq.n	8013ae8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	695b      	ldr	r3, [r3, #20]
 8013ade:	4954      	ldr	r1, [pc, #336]	; (8013c30 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	4798      	blx	r3
 8013ae4:	2401      	movs	r4, #1
 8013ae6:	e085      	b.n	8013bf4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
                     "Hybrid models are not supported on TFLite Micro.");

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 8013ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013aea:	f04f 32ff 	mov.w	r2, #4294967295
 8013aee:	621a      	str	r2, [r3, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 8013af0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013af2:	7819      	ldrb	r1, [r3, #0]
 8013af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013af6:	781a      	ldrb	r2, [r3, #0]
 8013af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013afa:	9303      	str	r3, [sp, #12]
 8013afc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013afe:	9302      	str	r3, [sp, #8]
 8013b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b02:	9301      	str	r3, [sp, #4]
 8013b04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013b06:	9300      	str	r3, [sp, #0]
 8013b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013b0a:	6878      	ldr	r0, [r7, #4]
 8013b0c:	f000 fbb5 	bl	801427a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 8013b10:	4603      	mov	r3, r0
 8013b12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013b16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d002      	beq.n	8013b24 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 8013b1e:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8013b22:	e067      	b.n	8013bf4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  if (input->type == kTfLiteInt8) {
 8013b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013b26:	781b      	ldrb	r3, [r3, #0]
 8013b28:	2b09      	cmp	r3, #9
 8013b2a:	d162      	bne.n	8013bf2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
    RuntimeShape filter_shape = GetTensorShape(filter);
 8013b2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013b30:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7fe f82f 	bl	8011b96 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 8013b38:	f107 0318 	add.w	r3, r7, #24
 8013b3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7fe f829 	bl	8011b96 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 8013b44:	f107 0318 	add.w	r3, r7, #24
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f7fd ffc0 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	2b02      	cmp	r3, #2
 8013b52:	d001      	beq.n	8013b58 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 8013b54:	f006 fb6e 	bl	801a234 <abort>
    const int filter_dim_count = filter_shape.DimensionsCount();
 8013b58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7fd ffb6 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013b62:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 8013b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b66:	1e5a      	subs	r2, r3, #1
 8013b68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013b6c:	4611      	mov	r1, r2
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7fe f8ba 	bl	8011ce8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013b74:	4603      	mov	r3, r0
 8013b76:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 8013b78:	2301      	movs	r3, #1
 8013b7a:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 8013b80:	f107 0318 	add.w	r3, r7, #24
 8013b84:	2101      	movs	r1, #1
 8013b86:	4618      	mov	r0, r3
 8013b88:	f7fe f8ae 	bl	8011ce8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013b8c:	4603      	mov	r3, r0
 8013b8e:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 8013b90:	f107 0308 	add.w	r3, r7, #8
 8013b94:	4618      	mov	r0, r3
 8013b96:	f7f6 f9dc 	bl	8009f52 <arm_fully_connected_s8_get_buffer_size>
 8013b9a:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 8013b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	dd11      	ble.n	8013bc6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ba6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013ba8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013baa:	3220      	adds	r2, #32
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	4798      	blx	r3
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8013bb6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d007      	beq.n	8013bce <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
 8013bbe:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 8013bc2:	2500      	movs	r5, #0
 8013bc4:	e004      	b.n	8013bd0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 8013bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8013bcc:	621a      	str	r2, [r3, #32]
 8013bce:	2501      	movs	r5, #1
 8013bd0:	f107 0318 	add.w	r3, r7, #24
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	f7fd ff64 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
 8013bda:	2d01      	cmp	r5, #1
 8013bdc:	d001      	beq.n	8013be2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
 8013bde:	2500      	movs	r5, #0
 8013be0:	e000      	b.n	8013be4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 8013be2:	2501      	movs	r5, #1
 8013be4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013be8:	4618      	mov	r0, r3
 8013bea:	f7fd ff5a 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
 8013bee:	2d01      	cmp	r5, #1
 8013bf0:	d100      	bne.n	8013bf4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
    }
  }
  return kTfLiteOk;
 8013bf2:	2400      	movs	r4, #0
}
 8013bf4:	4623      	mov	r3, r4
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	3770      	adds	r7, #112	; 0x70
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8013bfe:	bf00      	nop
 8013c00:	0801f634 	.word	0x0801f634
 8013c04:	0801e1ac 	.word	0x0801e1ac
 8013c08:	0801e0fc 	.word	0x0801e0fc
 8013c0c:	0801e194 	.word	0x0801e194
 8013c10:	0801f638 	.word	0x0801f638
 8013c14:	0801e1c0 	.word	0x0801e1c0
 8013c18:	0801f63c 	.word	0x0801f63c
 8013c1c:	0801f640 	.word	0x0801f640
 8013c20:	0801e1d4 	.word	0x0801e1d4
 8013c24:	0801e204 	.word	0x0801e204
 8013c28:	0801e214 	.word	0x0801e214
 8013c2c:	0801e1e8 	.word	0x0801e1e8
 8013c30:	0801e220 	.word	0x0801e220

08013c34 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 8013c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c36:	b0bf      	sub	sp, #252	; 0xfc
 8013c38:	af08      	add	r7, sp, #32
 8013c3a:	6178      	str	r0, [r7, #20]
 8013c3c:	6139      	str	r1, [r7, #16]
 8013c3e:	60fa      	str	r2, [r7, #12]
 8013c40:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8013c42:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013c46:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f000 fb7b 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 8013c50:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013c54:	4618      	mov	r0, r3
 8013c56:	f7fd ff3a 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	2b02      	cmp	r3, #2
 8013c5e:	d001      	beq.n	8013c64 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x30>
 8013c60:	f006 fae8 	bl	801a234 <abort>
  const int batches = output_shape.Dims(0);
 8013c64:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013c68:	2100      	movs	r1, #0
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f7fe f83c 	bl	8011ce8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013c70:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int output_depth = output_shape.Dims(1);
 8013c74:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013c78:	2101      	movs	r1, #1
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	f7fe f834 	bl	8011ce8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013c80:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8013c84:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013c88:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	f000 fb5a 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8013c92:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7fd ff19 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013c9c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8013ca0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013ca4:	1e5a      	subs	r2, r3, #1
 8013ca6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013caa:	4611      	mov	r1, r2
 8013cac:	4618      	mov	r0, r3
 8013cae:	f7fe f81b 	bl	8011ce8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013cb2:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8013cb6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013cba:	68b9      	ldr	r1, [r7, #8]
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f000 fb42 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	695b      	ldr	r3, [r3, #20]
 8013cc6:	425b      	negs	r3, r3
 8013cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	69db      	ldr	r3, [r3, #28]
 8013cce:	677b      	str	r3, [r7, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	699b      	ldr	r3, [r3, #24]
 8013cd4:	425b      	negs	r3, r3
 8013cd6:	673b      	str	r3, [r7, #112]	; 0x70
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	689b      	ldr	r3, [r3, #8]
 8013cdc:	67bb      	str	r3, [r7, #120]	; 0x78
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	68db      	ldr	r3, [r3, #12]
 8013ce2:	67fb      	str	r3, [r7, #124]	; 0x7c

  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	667b      	str	r3, [r7, #100]	; 0x64
  quant_params.shift = data.reference_op_data.output_shift;
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	685b      	ldr	r3, [r3, #4]
 8013cee:	66bb      	str	r3, [r7, #104]	; 0x68

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 8013cf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013cf4:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = 1;
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = 1;
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = accum_depth;
 8013cfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013d02:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims filter_dims;
  filter_dims.n = accum_depth;
 8013d04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013d08:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = 1;
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = 1;
 8013d0e:	2301      	movs	r3, #1
 8013d10:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = output_depth;
 8013d12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013d16:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 8013d18:	2301      	movs	r3, #1
 8013d1a:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 8013d20:	2301      	movs	r3, #1
 8013d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 8013d24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013d28:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 8013d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013d2e:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = 1;
 8013d30:	2301      	movs	r3, #1
 8013d32:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = 1;
 8013d34:	2301      	movs	r3, #1
 8013d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 8013d38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013d3c:	633b      	str	r3, [r7, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 8013d3e:	2300      	movs	r3, #0
 8013d40:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 8013d42:	2300      	movs	r3, #0
 8013d44:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	6a1b      	ldr	r3, [r3, #32]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	db08      	blt.n	8013d60 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8013d4e:	697b      	ldr	r3, [r7, #20]
 8013d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d52:	68fa      	ldr	r2, [r7, #12]
 8013d54:	6a12      	ldr	r2, [r2, #32]
 8013d56:	4611      	mov	r1, r2
 8013d58:	6978      	ldr	r0, [r7, #20]
 8013d5a:	4798      	blx	r3
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	61fb      	str	r3, [r7, #28]
  }

  TF_LITE_ENSURE_EQ(
 8013d60:	68b8      	ldr	r0, [r7, #8]
 8013d62:	f7fe fd93 	bl	801288c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8013d66:	4605      	mov	r5, r0
 8013d68:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8013d6c:	f7fe fd8e 	bl	801288c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8013d70:	4606      	mov	r6, r0
 8013d72:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8013d76:	f7ff f887 	bl	8012e88 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8013d7a:	6078      	str	r0, [r7, #4]
 8013d7c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8013d80:	f7fe fd93 	bl	80128aa <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8013d84:	4603      	mov	r3, r0
 8013d86:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8013d8a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8013d8e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8013d92:	f107 001c 	add.w	r0, r7, #28
 8013d96:	9306      	str	r3, [sp, #24]
 8013d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013d9c:	9305      	str	r3, [sp, #20]
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	9304      	str	r3, [sp, #16]
 8013da2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013da6:	9303      	str	r3, [sp, #12]
 8013da8:	9602      	str	r6, [sp, #8]
 8013daa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013dae:	9301      	str	r3, [sp, #4]
 8013db0:	9500      	str	r5, [sp, #0]
 8013db2:	4623      	mov	r3, r4
 8013db4:	f7f6 f886 	bl	8009ec4 <arm_fully_connected_s8>
 8013db8:	4603      	mov	r3, r0
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	bf14      	ite	ne
 8013dbe:	2301      	movne	r3, #1
 8013dc0:	2300      	moveq	r3, #0
 8013dc2:	b2db      	uxtb	r3, r3
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d03e      	beq.n	8013e46 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x212>
 8013dc8:	697b      	ldr	r3, [r7, #20]
 8013dca:	695c      	ldr	r4, [r3, #20]
 8013dcc:	68b8      	ldr	r0, [r7, #8]
 8013dce:	f7fe fd5d 	bl	801288c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8013dd2:	4606      	mov	r6, r0
 8013dd4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8013dd8:	f7fe fd58 	bl	801288c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8013ddc:	6078      	str	r0, [r7, #4]
 8013dde:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8013de2:	f7ff f851 	bl	8012e88 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8013de6:	6038      	str	r0, [r7, #0]
 8013de8:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8013dec:	f7fe fd5d 	bl	80128aa <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8013df0:	4603      	mov	r3, r0
 8013df2:	f107 0554 	add.w	r5, r7, #84	; 0x54
 8013df6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8013dfa:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8013dfe:	f107 001c 	add.w	r0, r7, #28
 8013e02:	9306      	str	r3, [sp, #24]
 8013e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013e08:	9305      	str	r3, [sp, #20]
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	9304      	str	r3, [sp, #16]
 8013e0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013e12:	9303      	str	r3, [sp, #12]
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	9302      	str	r3, [sp, #8]
 8013e18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013e1c:	9301      	str	r3, [sp, #4]
 8013e1e:	9600      	str	r6, [sp, #0]
 8013e20:	462b      	mov	r3, r5
 8013e22:	f7f6 f84f 	bl	8009ec4 <arm_fully_connected_s8>
 8013e26:	4603      	mov	r3, r0
 8013e28:	461a      	mov	r2, r3
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	9303      	str	r3, [sp, #12]
 8013e2e:	9202      	str	r2, [sp, #8]
 8013e30:	4b0f      	ldr	r3, [pc, #60]	; (8013e70 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x23c>)
 8013e32:	9301      	str	r3, [sp, #4]
 8013e34:	4b0f      	ldr	r3, [pc, #60]	; (8013e74 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x240>)
 8013e36:	9300      	str	r3, [sp, #0]
 8013e38:	23a6      	movs	r3, #166	; 0xa6
 8013e3a:	4a0f      	ldr	r2, [pc, #60]	; (8013e78 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x244>)
 8013e3c:	490f      	ldr	r1, [pc, #60]	; (8013e7c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x248>)
 8013e3e:	6978      	ldr	r0, [r7, #20]
 8013e40:	47a0      	blx	r4
 8013e42:	2401      	movs	r4, #1
 8013e44:	e000      	b.n	8013e48 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x214>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 8013e46:	2400      	movs	r4, #0
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8013e48:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f7fd fe28 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8013e52:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7fd fe23 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8013e5c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013e60:	4618      	mov	r0, r3
 8013e62:	f7fd fe1e 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8013e66:	4623      	mov	r3, r4
 8013e68:	4618      	mov	r0, r3
 8013e6a:	37dc      	adds	r7, #220	; 0xdc
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e70:	0801e308 	.word	0x0801e308
 8013e74:	0801e31c 	.word	0x0801e31c
 8013e78:	0801e0fc 	.word	0x0801e0fc
 8013e7c:	0801e2ec 	.word	0x0801e2ec

08013e80 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8013e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e82:	b0d3      	sub	sp, #332	; 0x14c
 8013e84:	af06      	add	r7, sp, #24
 8013e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013e8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013e8e:	6018      	str	r0, [r3, #0]
 8013e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013e98:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8013e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	695b      	ldr	r3, [r3, #20]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d101      	bne.n	8013eae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
 8013eaa:	f006 f9c3 	bl	801a234 <abort>
  const auto* params =
 8013eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013eb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	695b      	ldr	r3, [r3, #20]
 8013eba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 8013ebe:	4bb0      	ldr	r3, [pc, #704]	; (8014180 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x300>)
 8013ec0:	681a      	ldr	r2, [r3, #0]
 8013ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013ec6:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8013eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013ece:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013ed2:	6809      	ldr	r1, [r1, #0]
 8013ed4:	6818      	ldr	r0, [r3, #0]
 8013ed6:	f7fd ffdb 	bl	8011e90 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8013eda:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 8013ede:	4ba9      	ldr	r3, [pc, #676]	; (8014184 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x304>)
 8013ee0:	681a      	ldr	r2, [r3, #0]
 8013ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013ee6:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8013eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013eee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013ef2:	6809      	ldr	r1, [r1, #0]
 8013ef4:	6818      	ldr	r0, [r3, #0]
 8013ef6:	f7fd ffcb 	bl	8011e90 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8013efa:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 8013efe:	4ba2      	ldr	r3, [pc, #648]	; (8014188 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x308>)
 8013f00:	681a      	ldr	r2, [r3, #0]
 8013f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013f06:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8013f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013f0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013f12:	6809      	ldr	r1, [r1, #0]
 8013f14:	6818      	ldr	r0, [r3, #0]
 8013f16:	f7fd ffbb 	bl	8011e90 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8013f1a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 8013f1e:	4b9b      	ldr	r3, [pc, #620]	; (801418c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x30c>)
 8013f20:	681a      	ldr	r2, [r3, #0]
 8013f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013f26:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8013f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013f2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013f32:	6809      	ldr	r1, [r1, #0]
 8013f34:	6818      	ldr	r0, [r3, #0]
 8013f36:	f7fd ffbb 	bl	8011eb0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8013f3a:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 8013f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	691b      	ldr	r3, [r3, #16]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d101      	bne.n	8013f52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
 8013f4e:	f006 f971 	bl	801a234 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8013f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	691b      	ldr	r3, [r3, #16]
 8013f5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8013f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013f66:	7a1b      	ldrb	r3, [r3, #8]
 8013f68:	2b09      	cmp	r3, #9
 8013f6a:	d06d      	beq.n	8014048 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c8>
 8013f6c:	2b09      	cmp	r3, #9
 8013f6e:	f300 80e6 	bgt.w	801413e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2be>
 8013f72:	2b01      	cmp	r3, #1
 8013f74:	d003      	beq.n	8013f7e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfe>
 8013f76:	2b03      	cmp	r3, #3
 8013f78:	f000 8081 	beq.w	801407e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
 8013f7c:	e0df      	b.n	801413e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2be>
    case kTfLiteFloat32: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 8013f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013f82:	781a      	ldrb	r2, [r3, #0]
 8013f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013f88:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013f8c:	4611      	mov	r1, r2
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f000 f95e 	bl	8014250 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 8013f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013f98:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013f9c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	f000 f9d0 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8013fa6:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8013faa:	f7fe fc4f 	bl	801284c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8013fae:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 8013fb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013fb4:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f000 f9c4 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8013fbe:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8013fc2:	f7fe fc43 	bl	801284c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8013fc6:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 8013fc8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013fcc:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f000 f9b8 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8013fd6:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8013fda:	f7fe fc37 	bl	801284c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8013fde:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 8013fe0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013fe4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f000 f9ac 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8013fee:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8013ff2:	f7fe fc3a 	bl	801286a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8013ffc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8014000:	f107 0008 	add.w	r0, r7, #8
 8014004:	9304      	str	r3, [sp, #16]
 8014006:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801400a:	9303      	str	r3, [sp, #12]
 801400c:	9502      	str	r5, [sp, #8]
 801400e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014012:	9301      	str	r3, [sp, #4]
 8014014:	9400      	str	r4, [sp, #0]
 8014016:	4613      	mov	r3, r2
 8014018:	4632      	mov	r2, r6
 801401a:	f7ff fb5a 	bl	80136d2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 801401e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8014022:	4618      	mov	r0, r3
 8014024:	f7fd fd3d 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 8014028:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801402c:	4618      	mov	r0, r3
 801402e:	f7fd fd38 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 8014032:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014036:	4618      	mov	r0, r3
 8014038:	f7fd fd33 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 801403c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014040:	4618      	mov	r0, r3
 8014042:	f7fd fd2e 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 8014046:	e095      	b.n	8014174 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f4>
    }
    case kTfLiteInt8: {
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 8014048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801404c:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8014050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014054:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8014058:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801405c:	9302      	str	r3, [sp, #8]
 801405e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8014062:	9301      	str	r3, [sp, #4]
 8014064:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8014068:	9300      	str	r3, [sp, #0]
 801406a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801406e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8014072:	6809      	ldr	r1, [r1, #0]
 8014074:	6800      	ldr	r0, [r0, #0]
 8014076:	f7ff fddd 	bl	8013c34 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 801407a:	4603      	mov	r3, r0
                               output);
 801407c:	e07b      	b.n	8014176 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f6>
    }
    case kTfLiteUInt8: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsQuantized(data.reference_op_data),
 801407e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8014082:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014086:	4611      	mov	r1, r2
 8014088:	4618      	mov	r0, r3
 801408a:	f000 f8b7 	bl	80141fc <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
 801408e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8014092:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8014096:	4618      	mov	r0, r3
 8014098:	f000 f955 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 801409c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80140a0:	f7fe fc60 	bl	8012964 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80140a4:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<uint8_t>(input),
          tflite::micro::GetTensorShape(filter),
 80140a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80140aa:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80140ae:	4618      	mov	r0, r3
 80140b0:	f000 f949 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 80140b4:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80140b8:	f7fe fc54 	bl	8012964 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80140bc:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<uint8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 80140be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80140c2:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80140c6:	4618      	mov	r0, r3
 80140c8:	f000 f93d 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 80140cc:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80140d0:	f7fe feda 	bl	8012e88 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 80140d4:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<int32_t>(bias),
          tflite::micro::GetTensorShape(output),
 80140d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80140da:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80140de:	4618      	mov	r0, r3
 80140e0:	f000 f931 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 80140e4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80140e8:	f7fe fc4b 	bl	8012982 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 80140ec:	4603      	mov	r3, r0
 80140ee:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80140f2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80140f6:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80140fa:	9304      	str	r3, [sp, #16]
 80140fc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8014100:	9303      	str	r3, [sp, #12]
 8014102:	9502      	str	r5, [sp, #8]
 8014104:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8014108:	9301      	str	r3, [sp, #4]
 801410a:	9400      	str	r4, [sp, #0]
 801410c:	4613      	mov	r3, r2
 801410e:	4632      	mov	r2, r6
 8014110:	f7ff fb75 	bl	80137fe <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
          tflite::micro::GetTensorShape(output),
 8014114:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8014118:	4618      	mov	r0, r3
 801411a:	f7fd fcc2 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 801411e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8014122:	4618      	mov	r0, r3
 8014124:	f7fd fcbd 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 8014128:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801412c:	4618      	mov	r0, r3
 801412e:	f7fd fcb8 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8014132:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8014136:	4618      	mov	r0, r3
 8014138:	f7fd fcb3 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
 801413c:	e01a      	b.n	8014174 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f4>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801413e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014142:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	695c      	ldr	r4, [r3, #20]
 801414a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801414e:	7a1b      	ldrb	r3, [r3, #8]
 8014150:	4618      	mov	r0, r3
 8014152:	f7fc ff33 	bl	8010fbc <TfLiteTypeGetName>
 8014156:	4602      	mov	r2, r0
 8014158:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801415c:	7a1b      	ldrb	r3, [r3, #8]
 801415e:	4619      	mov	r1, r3
 8014160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014164:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8014168:	460b      	mov	r3, r1
 801416a:	4909      	ldr	r1, [pc, #36]	; (8014190 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x310>)
 801416c:	6800      	ldr	r0, [r0, #0]
 801416e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8014170:	2301      	movs	r3, #1
 8014172:	e000      	b.n	8014176 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f6>
    }
  }
  return kTfLiteOk;
 8014174:	2300      	movs	r3, #0
}
 8014176:	4618      	mov	r0, r3
 8014178:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801417c:	46bd      	mov	sp, r7
 801417e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014180:	0801f634 	.word	0x0801f634
 8014184:	0801f638 	.word	0x0801f638
 8014188:	0801f63c 	.word	0x0801f63c
 801418c:	0801f640 	.word	0x0801f640
 8014190:	0801e440 	.word	0x0801e440

08014194 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 8014194:	b4b0      	push	{r4, r5, r7}
 8014196:	b083      	sub	sp, #12
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
  fully_connected_registration.init = Init;
 801419c:	4b13      	ldr	r3, [pc, #76]	; (80141ec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801419e:	4a14      	ldr	r2, [pc, #80]	; (80141f0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x5c>)
 80141a0:	601a      	str	r2, [r3, #0]
  fully_connected_registration.free = nullptr;
 80141a2:	4b12      	ldr	r3, [pc, #72]	; (80141ec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 80141a4:	2200      	movs	r2, #0
 80141a6:	605a      	str	r2, [r3, #4]
  fully_connected_registration.prepare = Prepare;
 80141a8:	4b10      	ldr	r3, [pc, #64]	; (80141ec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 80141aa:	4a12      	ldr	r2, [pc, #72]	; (80141f4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x60>)
 80141ac:	609a      	str	r2, [r3, #8]
  fully_connected_registration.invoke = Eval;
 80141ae:	4b0f      	ldr	r3, [pc, #60]	; (80141ec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 80141b0:	4a11      	ldr	r2, [pc, #68]	; (80141f8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x64>)
 80141b2:	60da      	str	r2, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
 80141b4:	4b0d      	ldr	r3, [pc, #52]	; (80141ec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 80141b6:	2200      	movs	r2, #0
 80141b8:	611a      	str	r2, [r3, #16]
  fully_connected_registration.builtin_code = 0;
 80141ba:	4b0c      	ldr	r3, [pc, #48]	; (80141ec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 80141bc:	2200      	movs	r2, #0
 80141be:	615a      	str	r2, [r3, #20]
  fully_connected_registration.custom_name = nullptr;
 80141c0:	4b0a      	ldr	r3, [pc, #40]	; (80141ec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 80141c2:	2200      	movs	r2, #0
 80141c4:	619a      	str	r2, [r3, #24]
  fully_connected_registration.version = 0;
 80141c6:	4b09      	ldr	r3, [pc, #36]	; (80141ec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 80141c8:	2200      	movs	r2, #0
 80141ca:	61da      	str	r2, [r3, #28]
  return fully_connected_registration;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	4a07      	ldr	r2, [pc, #28]	; (80141ec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 80141d0:	461c      	mov	r4, r3
 80141d2:	4615      	mov	r5, r2
 80141d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80141d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80141d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80141dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80141e0:	6878      	ldr	r0, [r7, #4]
 80141e2:	370c      	adds	r7, #12
 80141e4:	46bd      	mov	sp, r7
 80141e6:	bcb0      	pop	{r4, r5, r7}
 80141e8:	4770      	bx	lr
 80141ea:	bf00      	nop
 80141ec:	20000608 	.word	0x20000608
 80141f0:	0801399d 	.word	0x0801399d
 80141f4:	080139c9 	.word	0x080139c9
 80141f8:	08013e81 	.word	0x08013e81

080141fc <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedWeightsTensor = 1;
const int kFullyConnectedBiasTensor = 2;
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
 80141fc:	b480      	push	{r7}
 80141fe:	b083      	sub	sp, #12
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
 8014204:	6039      	str	r1, [r7, #0]
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	695b      	ldr	r3, [r3, #20]
 801420a:	425a      	negs	r2, r3
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	601a      	str	r2, [r3, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
 8014210:	683b      	ldr	r3, [r7, #0]
 8014212:	699b      	ldr	r3, [r3, #24]
 8014214:	425a      	negs	r2, r3
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	605a      	str	r2, [r3, #4]
  op_params.output_offset = op_data.output_zero_point;
 801421a:	683b      	ldr	r3, [r7, #0]
 801421c:	69da      	ldr	r2, [r3, #28]
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	609a      	str	r2, [r3, #8]
  op_params.output_multiplier = op_data.output_multiplier;
 8014222:	683b      	ldr	r3, [r7, #0]
 8014224:	681a      	ldr	r2, [r3, #0]
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	60da      	str	r2, [r3, #12]
  op_params.output_shift = op_data.output_shift;
 801422a:	683b      	ldr	r3, [r7, #0]
 801422c:	685a      	ldr	r2, [r3, #4]
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	611a      	str	r2, [r3, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
 8014232:	683b      	ldr	r3, [r7, #0]
 8014234:	689a      	ldr	r2, [r3, #8]
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	615a      	str	r2, [r3, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
 801423a:	683b      	ldr	r3, [r7, #0]
 801423c:	68da      	ldr	r2, [r3, #12]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	619a      	str	r2, [r3, #24]
  return op_params;
 8014242:	bf00      	nop
}
 8014244:	6878      	ldr	r0, [r7, #4]
 8014246:	370c      	adds	r7, #12
 8014248:	46bd      	mov	sp, r7
 801424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424e:	4770      	bx	lr

08014250 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 8014250:	b580      	push	{r7, lr}
 8014252:	b082      	sub	sp, #8
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
 8014258:	460b      	mov	r3, r1
 801425a:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	f103 0220 	add.w	r2, r3, #32
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	f103 011c 	add.w	r1, r3, #28
 8014268:	78fb      	ldrb	r3, [r7, #3]
 801426a:	4618      	mov	r0, r3
 801426c:	f7fe fdb0 	bl	8012dd0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 8014270:	bf00      	nop
}
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	3708      	adds	r7, #8
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}

0801427a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 801427a:	b580      	push	{r7, lr}
 801427c:	b08a      	sub	sp, #40	; 0x28
 801427e:	af02      	add	r7, sp, #8
 8014280:	60f8      	str	r0, [r7, #12]
 8014282:	607b      	str	r3, [r7, #4]
 8014284:	460b      	mov	r3, r1
 8014286:	72fb      	strb	r3, [r7, #11]
 8014288:	4613      	mov	r3, r2
 801428a:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 801428c:	7abb      	ldrb	r3, [r7, #10]
 801428e:	2b01      	cmp	r3, #1
 8014290:	d03e      	beq.n	8014310 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x96>
    double real_multiplier = 0.0;
 8014292:	f04f 0200 	mov.w	r2, #0
 8014296:	f04f 0300 	mov.w	r3, #0
 801429a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 801429e:	f107 0310 	add.w	r3, r7, #16
 80142a2:	9301      	str	r3, [sp, #4]
 80142a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a6:	9300      	str	r3, [sp, #0]
 80142a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142ac:	6879      	ldr	r1, [r7, #4]
 80142ae:	68f8      	ldr	r0, [r7, #12]
 80142b0:	f7fd f9ce 	bl	8011650 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 80142b4:	4603      	mov	r3, r0
 80142b6:	77fb      	strb	r3, [r7, #31]
 80142b8:	7ffb      	ldrb	r3, [r7, #31]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d001      	beq.n	80142c2 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 80142be:	7ffb      	ldrb	r3, [r7, #31]
 80142c0:	e027      	b.n	8014312 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 80142c2:	ed97 7b04 	vldr	d7, [r7, #16]
 80142c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142ca:	3304      	adds	r3, #4
 80142cc:	4619      	mov	r1, r3
 80142ce:	4610      	mov	r0, r2
 80142d0:	eeb0 0a47 	vmov.f32	s0, s14
 80142d4:	eef0 0a67 	vmov.f32	s1, s15
 80142d8:	f7fc fef6 	bl	80110c8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	691a      	ldr	r2, [r3, #16]
 80142e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142e2:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 80142e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142e6:	691a      	ldr	r2, [r3, #16]
 80142e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142ea:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 80142ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ee:	691a      	ldr	r2, [r3, #16]
 80142f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142f2:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 80142f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142f6:	f103 0208 	add.w	r2, r3, #8
 80142fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142fc:	330c      	adds	r3, #12
 80142fe:	7af9      	ldrb	r1, [r7, #11]
 8014300:	9300      	str	r3, [sp, #0]
 8014302:	4613      	mov	r3, r2
 8014304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014306:	68f8      	ldr	r0, [r7, #12]
 8014308:	f7fd fb2e 	bl	8011968 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 801430c:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 801430e:	e000      	b.n	8014312 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
  }
  return kTfLiteOk;
 8014310:	2300      	movs	r3, #0
}
 8014312:	4618      	mov	r0, r3
 8014314:	3720      	adds	r7, #32
 8014316:	46bd      	mov	sp, r7
 8014318:	bd80      	pop	{r7, pc}

0801431a <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801431a:	b480      	push	{r7}
 801431c:	b083      	sub	sp, #12
 801431e:	af00      	add	r7, sp, #0
 8014320:	6078      	str	r0, [r7, #4]
 8014322:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	f9b3 2000 	ldrsh.w	r2, [r3]
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014330:	429a      	cmp	r2, r3
 8014332:	da01      	bge.n	8014338 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 8014334:	683b      	ldr	r3, [r7, #0]
 8014336:	e000      	b.n	801433a <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 8014338:	687b      	ldr	r3, [r7, #4]
    }
 801433a:	4618      	mov	r0, r3
 801433c:	370c      	adds	r7, #12
 801433e:	46bd      	mov	sp, r7
 8014340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014344:	4770      	bx	lr

08014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8014346:	b580      	push	{r7, lr}
 8014348:	b086      	sub	sp, #24
 801434a:	af00      	add	r7, sp, #0
 801434c:	6078      	str	r0, [r7, #4]
 801434e:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8014350:	683b      	ldr	r3, [r7, #0]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d003      	beq.n	801435e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	685b      	ldr	r3, [r3, #4]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d103      	bne.n	8014366 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 801435e:	6878      	ldr	r0, [r7, #4]
 8014360:	f7fd fb7e 	bl	8011a60 <_ZN6tflite12RuntimeShapeC1Ev>
 8014364:	e00d      	b.n	8014382 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	685b      	ldr	r3, [r3, #4]
 801436a:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 801436c:	697b      	ldr	r3, [r7, #20]
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8014372:	697b      	ldr	r3, [r7, #20]
 8014374:	3304      	adds	r3, #4
 8014376:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8014378:	68fa      	ldr	r2, [r7, #12]
 801437a:	6939      	ldr	r1, [r7, #16]
 801437c:	6878      	ldr	r0, [r7, #4]
 801437e:	f7fd fb7d 	bl	8011a7c <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8014382:	6878      	ldr	r0, [r7, #4]
 8014384:	3718      	adds	r7, #24
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}

0801438a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 801438a:	b590      	push	{r4, r7, lr}
 801438c:	b087      	sub	sp, #28
 801438e:	af00      	add	r7, sp, #0
 8014390:	60f8      	str	r0, [r7, #12]
 8014392:	60b9      	str	r1, [r7, #8]
 8014394:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 8014396:	68f8      	ldr	r0, [r7, #12]
 8014398:	f7fd fb99 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801439c:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 801439e:	2300      	movs	r3, #0
 80143a0:	617b      	str	r3, [r7, #20]
 80143a2:	697a      	ldr	r2, [r7, #20]
 80143a4:	693b      	ldr	r3, [r7, #16]
 80143a6:	429a      	cmp	r2, r3
 80143a8:	da15      	bge.n	80143d6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 80143aa:	697a      	ldr	r2, [r7, #20]
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	429a      	cmp	r2, r3
 80143b0:	d00d      	beq.n	80143ce <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 80143b2:	6979      	ldr	r1, [r7, #20]
 80143b4:	68f8      	ldr	r0, [r7, #12]
 80143b6:	f7fd fc97 	bl	8011ce8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80143ba:	4604      	mov	r4, r0
 80143bc:	6979      	ldr	r1, [r7, #20]
 80143be:	6878      	ldr	r0, [r7, #4]
 80143c0:	f7fd fc92 	bl	8011ce8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80143c4:	4603      	mov	r3, r0
 80143c6:	429c      	cmp	r4, r3
 80143c8:	d001      	beq.n	80143ce <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 80143ca:	f005 ff33 	bl	801a234 <abort>
  for (int i = 0; i < dims_count; ++i) {
 80143ce:	697b      	ldr	r3, [r7, #20]
 80143d0:	3301      	adds	r3, #1
 80143d2:	617b      	str	r3, [r7, #20]
 80143d4:	e7e5      	b.n	80143a2 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 80143d6:	68b9      	ldr	r1, [r7, #8]
 80143d8:	68f8      	ldr	r0, [r7, #12]
 80143da:	f7ff f944 	bl	8013666 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 80143de:	4603      	mov	r3, r0
}
 80143e0:	4618      	mov	r0, r3
 80143e2:	371c      	adds	r7, #28
 80143e4:	46bd      	mov	sp, r7
 80143e6:	bd90      	pop	{r4, r7, pc}

080143e8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b082      	sub	sp, #8
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 80143f0:	2100      	movs	r1, #0
 80143f2:	6878      	ldr	r0, [r7, #4]
 80143f4:	f7fe f872 	bl	80124dc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80143f8:	4603      	mov	r3, r0
}
 80143fa:	4618      	mov	r0, r3
 80143fc:	3708      	adds	r7, #8
 80143fe:	46bd      	mov	sp, r7
 8014400:	bd80      	pop	{r7, pc}

08014402 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8014402:	b580      	push	{r7, lr}
 8014404:	b082      	sub	sp, #8
 8014406:	af00      	add	r7, sp, #0
 8014408:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801440a:	6878      	ldr	r0, [r7, #4]
 801440c:	f000 f805 	bl	801441a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 8014410:	4603      	mov	r3, r0
}
 8014412:	4618      	mov	r0, r3
 8014414:	3708      	adds	r7, #8
 8014416:	46bd      	mov	sp, r7
 8014418:	bd80      	pop	{r7, pc}

0801441a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801441a:	b580      	push	{r7, lr}
 801441c:	b082      	sub	sp, #8
 801441e:	af00      	add	r7, sp, #0
 8014420:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8014422:	2101      	movs	r1, #1
 8014424:	6878      	ldr	r0, [r7, #4]
 8014426:	f7fe f859 	bl	80124dc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801442a:	4603      	mov	r3, r0
  }
 801442c:	4618      	mov	r0, r3
 801442e:	3708      	adds	r7, #8
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}

08014434 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 8014434:	b590      	push	{r4, r7, lr}
 8014436:	b085      	sub	sp, #20
 8014438:	af00      	add	r7, sp, #0
 801443a:	60f8      	str	r0, [r7, #12]
 801443c:	60b9      	str	r1, [r7, #8]
 801443e:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8014440:	f107 0308 	add.w	r3, r7, #8
 8014444:	4618      	mov	r0, r3
 8014446:	f7fe fe7f 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801444a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801444c:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 801444e:	1d3b      	adds	r3, r7, #4
 8014450:	4618      	mov	r0, r3
 8014452:	f7fe fe79 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014456:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	461a      	mov	r2, r3
 801445c:	4621      	mov	r1, r4
 801445e:	68f8      	ldr	r0, [r7, #12]
 8014460:	f7ff f8d6 	bl	8013610 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8014464:	4603      	mov	r3, r0
 8014466:	4618      	mov	r0, r3
 8014468:	f7fe fdfd 	bl	8013066 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801446c:	4603      	mov	r3, r0
}
 801446e:	4618      	mov	r0, r3
 8014470:	3714      	adds	r7, #20
 8014472:	46bd      	mov	sp, r7
 8014474:	bd90      	pop	{r4, r7, pc}

08014476 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 8014476:	b580      	push	{r7, lr}
 8014478:	b082      	sub	sp, #8
 801447a:	af00      	add	r7, sp, #0
 801447c:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	2b00      	cmp	r3, #0
 8014482:	bf0c      	ite	eq
 8014484:	2301      	moveq	r3, #1
 8014486:	2300      	movne	r3, #0
 8014488:	b2db      	uxtb	r3, r3
 801448a:	4618      	mov	r0, r3
 801448c:	f7fe fc48 	bl	8012d20 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8014490:	4603      	mov	r3, r0
}
 8014492:	4618      	mov	r0, r3
 8014494:	3708      	adds	r7, #8
 8014496:	46bd      	mov	sp, r7
 8014498:	bd80      	pop	{r7, pc}
	...

0801449c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 801449c:	b580      	push	{r7, lr}
 801449e:	b08a      	sub	sp, #40	; 0x28
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 80144a4:	482c      	ldr	r0, [pc, #176]	; (8014558 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 80144a6:	f7ff ff9f 	bl	80143e8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80144aa:	4603      	mov	r3, r0
 80144ac:	4618      	mov	r0, r3
 80144ae:	f7fe fe56 	bl	801315e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80144b2:	4603      	mov	r3, r0
 80144b4:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 80144b6:	4829      	ldr	r0, [pc, #164]	; (801455c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 80144b8:	f7ff ff96 	bl	80143e8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80144bc:	4603      	mov	r3, r0
 80144be:	4618      	mov	r0, r3
 80144c0:	f7fe fe4d 	bl	801315e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80144c4:	4603      	mov	r3, r0
 80144c6:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 80144c8:	f000 f86c 	bl	80145a4 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 80144cc:	4603      	mov	r3, r0
 80144ce:	4619      	mov	r1, r3
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f000 f870 	bl	80145b6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80144d6:	4603      	mov	r3, r0
 80144d8:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 80144da:	69f9      	ldr	r1, [r7, #28]
 80144dc:	69f8      	ldr	r0, [r7, #28]
 80144de:	f000 f83f 	bl	8014560 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80144e2:	4603      	mov	r3, r0
 80144e4:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 80144e6:	69f9      	ldr	r1, [r7, #28]
 80144e8:	69b8      	ldr	r0, [r7, #24]
 80144ea:	f000 f839 	bl	8014560 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80144ee:	4603      	mov	r3, r0
 80144f0:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 80144f2:	69b9      	ldr	r1, [r7, #24]
 80144f4:	69b8      	ldr	r0, [r7, #24]
 80144f6:	f000 f833 	bl	8014560 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80144fa:	4603      	mov	r3, r0
 80144fc:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 80144fe:	6938      	ldr	r0, [r7, #16]
 8014500:	f000 f877 	bl	80145f2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8014504:	4603      	mov	r3, r0
 8014506:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 8014508:	6979      	ldr	r1, [r7, #20]
 801450a:	68f8      	ldr	r0, [r7, #12]
 801450c:	f000 f853 	bl	80145b6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014510:	4603      	mov	r3, r0
 8014512:	6a39      	ldr	r1, [r7, #32]
 8014514:	4618      	mov	r0, r3
 8014516:	f000 f823 	bl	8014560 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801451a:	4603      	mov	r3, r0
 801451c:	69b9      	ldr	r1, [r7, #24]
 801451e:	4618      	mov	r0, r3
 8014520:	f000 f849 	bl	80145b6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014524:	4603      	mov	r3, r0
 8014526:	4618      	mov	r0, r3
 8014528:	f000 f879 	bl	801461e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801452c:	4603      	mov	r3, r0
 801452e:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 8014530:	68b9      	ldr	r1, [r7, #8]
 8014532:	69f8      	ldr	r0, [r7, #28]
 8014534:	f000 f83f 	bl	80145b6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014538:	4603      	mov	r3, r0
 801453a:	4619      	mov	r1, r3
 801453c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801453e:	f000 f80f 	bl	8014560 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014542:	4603      	mov	r3, r0
 8014544:	4619      	mov	r1, r3
 8014546:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014548:	f000 f87f 	bl	801464a <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801454c:	4603      	mov	r3, r0
}
 801454e:	4618      	mov	r0, r3
 8014550:	3728      	adds	r7, #40	; 0x28
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}
 8014556:	bf00      	nop
 8014558:	70f5a894 	.word	0x70f5a894
 801455c:	2aaaaaab 	.word	0x2aaaaaab

08014560 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8014560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014562:	b085      	sub	sp, #20
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
 8014568:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801456a:	1d3b      	adds	r3, r7, #4
 801456c:	4618      	mov	r0, r3
 801456e:	f7fe fdeb 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014572:	4603      	mov	r3, r0
 8014574:	681d      	ldr	r5, [r3, #0]
 8014576:	463b      	mov	r3, r7
 8014578:	4618      	mov	r0, r3
 801457a:	f7fe fde5 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801457e:	4603      	mov	r3, r0
 8014580:	681e      	ldr	r6, [r3, #0]
 8014582:	f107 030c 	add.w	r3, r7, #12
 8014586:	4618      	mov	r0, r3
 8014588:	f7fe fdde 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801458c:	4604      	mov	r4, r0
 801458e:	4631      	mov	r1, r6
 8014590:	4628      	mov	r0, r5
 8014592:	f7fd fb33 	bl	8011bfc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8014596:	4603      	mov	r3, r0
 8014598:	6023      	str	r3, [r4, #0]
  return c;
 801459a:	68fb      	ldr	r3, [r7, #12]
}
 801459c:	4618      	mov	r0, r3
 801459e:	3714      	adds	r7, #20
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080145a4 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 80145a4:	b580      	push	{r7, lr}
 80145a6:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 80145a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80145ac:	f7fe fdd7 	bl	801315e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80145b0:	4603      	mov	r3, r0
  }
 80145b2:	4618      	mov	r0, r3
 80145b4:	bd80      	pop	{r7, pc}

080145b6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 80145b6:	b590      	push	{r4, r7, lr}
 80145b8:	b083      	sub	sp, #12
 80145ba:	af00      	add	r7, sp, #0
 80145bc:	6078      	str	r0, [r7, #4]
 80145be:	6039      	str	r1, [r7, #0]
 80145c0:	1d3b      	adds	r3, r7, #4
 80145c2:	4618      	mov	r0, r3
 80145c4:	f7fe fdc0 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80145c8:	4603      	mov	r3, r0
 80145ca:	681c      	ldr	r4, [r3, #0]
 80145cc:	463b      	mov	r3, r7
 80145ce:	4618      	mov	r0, r3
 80145d0:	f7fe fdba 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80145d4:	4603      	mov	r3, r0
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	4619      	mov	r1, r3
 80145da:	4620      	mov	r0, r4
 80145dc:	f7fe fb7e 	bl	8012cdc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80145e0:	4603      	mov	r3, r0
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7fe fd3f 	bl	8013066 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80145e8:	4603      	mov	r3, r0
 80145ea:	4618      	mov	r0, r3
 80145ec:	370c      	adds	r7, #12
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd90      	pop	{r4, r7, pc}

080145f2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 80145f2:	b580      	push	{r7, lr}
 80145f4:	b082      	sub	sp, #8
 80145f6:	af00      	add	r7, sp, #0
 80145f8:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 80145fa:	1d3b      	adds	r3, r7, #4
 80145fc:	4618      	mov	r0, r3
 80145fe:	f7fe fda3 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014602:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	4618      	mov	r0, r3
 8014608:	f000 f83d 	bl	8014686 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 801460c:	4603      	mov	r3, r0
 801460e:	4618      	mov	r0, r3
 8014610:	f7fe fd29 	bl	8013066 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014614:	4603      	mov	r3, r0
}
 8014616:	4618      	mov	r0, r3
 8014618:	3708      	adds	r7, #8
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}

0801461e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801461e:	b580      	push	{r7, lr}
 8014620:	b082      	sub	sp, #8
 8014622:	af00      	add	r7, sp, #0
 8014624:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8014626:	1d3b      	adds	r3, r7, #4
 8014628:	4618      	mov	r0, r3
 801462a:	f7fe fd8d 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801462e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	4618      	mov	r0, r3
 8014634:	f7ff fee5 	bl	8014402 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 8014638:	4603      	mov	r3, r0
 801463a:	4618      	mov	r0, r3
 801463c:	f7fe fd13 	bl	8013066 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014640:	4603      	mov	r3, r0
}
 8014642:	4618      	mov	r0, r3
 8014644:	3708      	adds	r7, #8
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}

0801464a <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 801464a:	b590      	push	{r4, r7, lr}
 801464c:	b083      	sub	sp, #12
 801464e:	af00      	add	r7, sp, #0
 8014650:	6078      	str	r0, [r7, #4]
 8014652:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8014654:	1d3b      	adds	r3, r7, #4
 8014656:	4618      	mov	r0, r3
 8014658:	f7fe fd76 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801465c:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801465e:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8014660:	463b      	mov	r3, r7
 8014662:	4618      	mov	r0, r3
 8014664:	f7fe fd70 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014668:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	4619      	mov	r1, r3
 801466e:	4620      	mov	r0, r4
 8014670:	f000 f815 	bl	801469e <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 8014674:	4603      	mov	r3, r0
 8014676:	4618      	mov	r0, r3
 8014678:	f7fe fcf5 	bl	8013066 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801467c:	4603      	mov	r3, r0
}
 801467e:	4618      	mov	r0, r3
 8014680:	370c      	adds	r7, #12
 8014682:	46bd      	mov	sp, r7
 8014684:	bd90      	pop	{r4, r7, pc}

08014686 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8014686:	b580      	push	{r7, lr}
 8014688:	b082      	sub	sp, #8
 801468a:	af00      	add	r7, sp, #0
 801468c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801468e:	6878      	ldr	r0, [r7, #4]
 8014690:	f000 f813 	bl	80146ba <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 8014694:	4603      	mov	r3, r0
}
 8014696:	4618      	mov	r0, r3
 8014698:	3708      	adds	r7, #8
 801469a:	46bd      	mov	sp, r7
 801469c:	bd80      	pop	{r7, pc}

0801469e <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 801469e:	b580      	push	{r7, lr}
 80146a0:	b082      	sub	sp, #8
 80146a2:	af00      	add	r7, sp, #0
 80146a4:	6078      	str	r0, [r7, #4]
 80146a6:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 80146a8:	6839      	ldr	r1, [r7, #0]
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f000 f812 	bl	80146d4 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 80146b0:	4603      	mov	r3, r0
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	3708      	adds	r7, #8
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}

080146ba <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80146ba:	b580      	push	{r7, lr}
 80146bc:	b082      	sub	sp, #8
 80146be:	af00      	add	r7, sp, #0
 80146c0:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 80146c2:	2102      	movs	r1, #2
 80146c4:	6878      	ldr	r0, [r7, #4]
 80146c6:	f7fd ff09 	bl	80124dc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80146ca:	4603      	mov	r3, r0
  }
 80146cc:	4618      	mov	r0, r3
 80146ce:	3708      	adds	r7, #8
 80146d0:	46bd      	mov	sp, r7
 80146d2:	bd80      	pop	{r7, pc}

080146d4 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b082      	sub	sp, #8
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
 80146dc:	6039      	str	r1, [r7, #0]
 80146de:	6839      	ldr	r1, [r7, #0]
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f7fe fafb 	bl	8012cdc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80146e6:	4603      	mov	r3, r0
 80146e8:	4618      	mov	r0, r3
 80146ea:	3708      	adds	r7, #8
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bd80      	pop	{r7, pc}

080146f0 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80146f0:	b480      	push	{r7}
 80146f2:	b083      	sub	sp, #12
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
 80146f8:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	781a      	ldrb	r2, [r3, #0]
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	781b      	ldrb	r3, [r3, #0]
 8014702:	429a      	cmp	r2, r3
 8014704:	d201      	bcs.n	801470a <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 8014706:	683b      	ldr	r3, [r7, #0]
 8014708:	e000      	b.n	801470c <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 801470a:	687b      	ldr	r3, [r7, #4]
    }
 801470c:	4618      	mov	r0, r3
 801470e:	370c      	adds	r7, #12
 8014710:	46bd      	mov	sp, r7
 8014712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014716:	4770      	bx	lr

08014718 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8014718:	b480      	push	{r7}
 801471a:	b083      	sub	sp, #12
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d002      	beq.n	801472c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	e000      	b.n	801472e <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 801472c:	2300      	movs	r3, #0
}
 801472e:	4618      	mov	r0, r3
 8014730:	370c      	adds	r7, #12
 8014732:	46bd      	mov	sp, r7
 8014734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014738:	4770      	bx	lr
	...

0801473c <_ZN6tflite26generic_int16_table_lookupEsPKs>:
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 801473c:	b580      	push	{r7, lr}
 801473e:	b086      	sub	sp, #24
 8014740:	af00      	add	r7, sp, #0
 8014742:	4603      	mov	r3, r0
 8014744:	6039      	str	r1, [r7, #0]
 8014746:	80fb      	strh	r3, [r7, #6]
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 8014748:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801474c:	11db      	asrs	r3, r3, #7
 801474e:	b21b      	sxth	r3, r3
 8014750:	b29b      	uxth	r3, r3
 8014752:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014756:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 8014758:	8afb      	ldrh	r3, [r7, #22]
 801475a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801475e:	d306      	bcc.n	801476e <_ZN6tflite26generic_int16_table_lookupEsPKs+0x32>
 8014760:	4b1a      	ldr	r3, [pc, #104]	; (80147cc <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 8014762:	4a1b      	ldr	r2, [pc, #108]	; (80147d0 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 8014764:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014768:	481a      	ldr	r0, [pc, #104]	; (80147d4 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 801476a:	f005 fd6b 	bl	801a244 <__assert_func>
  int16_t offset = value & 0x7f;
 801476e:	88fb      	ldrh	r3, [r7, #6]
 8014770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014774:	82bb      	strh	r3, [r7, #20]
  int16_t base = lut[index];
 8014776:	8afb      	ldrh	r3, [r7, #22]
 8014778:	005b      	lsls	r3, r3, #1
 801477a:	683a      	ldr	r2, [r7, #0]
 801477c:	4413      	add	r3, r2
 801477e:	881b      	ldrh	r3, [r3, #0]
 8014780:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 8014782:	8afb      	ldrh	r3, [r7, #22]
 8014784:	3301      	adds	r3, #1
 8014786:	005b      	lsls	r3, r3, #1
 8014788:	683a      	ldr	r2, [r7, #0]
 801478a:	4413      	add	r3, r2
 801478c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014790:	b29a      	uxth	r2, r3
 8014792:	8afb      	ldrh	r3, [r7, #22]
 8014794:	005b      	lsls	r3, r3, #1
 8014796:	6839      	ldr	r1, [r7, #0]
 8014798:	440b      	add	r3, r1
 801479a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801479e:	b29b      	uxth	r3, r3
 80147a0:	1ad3      	subs	r3, r2, r3
 80147a2:	b29b      	uxth	r3, r3
 80147a4:	823b      	strh	r3, [r7, #16]
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 80147a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80147aa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80147ae:	fb02 f303 	mul.w	r3, r2, r3
 80147b2:	3340      	adds	r3, #64	; 0x40
 80147b4:	11db      	asrs	r3, r3, #7
 80147b6:	60fb      	str	r3, [r7, #12]
  return base + delta;
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	b29a      	uxth	r2, r3
 80147bc:	8a7b      	ldrh	r3, [r7, #18]
 80147be:	4413      	add	r3, r2
 80147c0:	b29b      	uxth	r3, r3
 80147c2:	b21b      	sxth	r3, r3
}
 80147c4:	4618      	mov	r0, r3
 80147c6:	3718      	adds	r7, #24
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}
 80147cc:	0801e56c 	.word	0x0801e56c
 80147d0:	0801e598 	.word	0x0801e598
 80147d4:	0801e5dc 	.word	0x0801e5dc

080147d8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 80147d8:	b580      	push	{r7, lr}
 80147da:	ed2d 8b02 	vpush	{d8}
 80147de:	b08e      	sub	sp, #56	; 0x38
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	60f8      	str	r0, [r7, #12]
 80147e4:	60b9      	str	r1, [r7, #8]
 80147e6:	607a      	str	r2, [r7, #4]
 80147e8:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80147ea:	68b8      	ldr	r0, [r7, #8]
 80147ec:	f7fd f96f 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80147f0:	4603      	mov	r3, r0
 80147f2:	3b01      	subs	r3, #1
 80147f4:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80147f6:	683a      	ldr	r2, [r7, #0]
 80147f8:	6a39      	ldr	r1, [r7, #32]
 80147fa:	68b8      	ldr	r0, [r7, #8]
 80147fc:	f7ff fdc5 	bl	801438a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8014800:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8014802:	6a3b      	ldr	r3, [r7, #32]
 8014804:	683a      	ldr	r2, [r7, #0]
 8014806:	6a39      	ldr	r1, [r7, #32]
 8014808:	68b8      	ldr	r0, [r7, #8]
 801480a:	f7fe fb4c 	bl	8012ea6 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801480e:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 8014810:	2300      	movs	r3, #0
 8014812:	637b      	str	r3, [r7, #52]	; 0x34
 8014814:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014816:	69fb      	ldr	r3, [r7, #28]
 8014818:	429a      	cmp	r2, r3
 801481a:	f280 8087 	bge.w	801492c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x154>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 801481e:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8014822:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 8014824:	2300      	movs	r3, #0
 8014826:	633b      	str	r3, [r7, #48]	; 0x30
 8014828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801482a:	69bb      	ldr	r3, [r7, #24]
 801482c:	429a      	cmp	r2, r3
 801482e:	da15      	bge.n	801485c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 8014830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014832:	69ba      	ldr	r2, [r7, #24]
 8014834:	fb03 f202 	mul.w	r2, r3, r2
 8014838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801483a:	4413      	add	r3, r2
 801483c:	009b      	lsls	r3, r3, #2
 801483e:	687a      	ldr	r2, [r7, #4]
 8014840:	441a      	add	r2, r3
 8014842:	f107 0310 	add.w	r3, r7, #16
 8014846:	4611      	mov	r1, r2
 8014848:	4618      	mov	r0, r3
 801484a:	f7fc fdd1 	bl	80113f0 <_ZSt3maxIfERKT_S2_S2_>
 801484e:	4603      	mov	r3, r0
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 8014854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014856:	3301      	adds	r3, #1
 8014858:	633b      	str	r3, [r7, #48]	; 0x30
 801485a:	e7e5      	b.n	8014828 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 801485c:	f04f 0300 	mov.w	r3, #0
 8014860:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8014862:	2300      	movs	r3, #0
 8014864:	62bb      	str	r3, [r7, #40]	; 0x28
 8014866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014868:	69bb      	ldr	r3, [r7, #24]
 801486a:	429a      	cmp	r2, r3
 801486c:	da36      	bge.n	80148dc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 801486e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014870:	69ba      	ldr	r2, [r7, #24]
 8014872:	fb03 f202 	mul.w	r2, r3, r2
 8014876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014878:	4413      	add	r3, r2
 801487a:	009b      	lsls	r3, r3, #2
 801487c:	687a      	ldr	r2, [r7, #4]
 801487e:	4413      	add	r3, r2
 8014880:	ed93 7a00 	vldr	s14, [r3]
 8014884:	edd7 7a04 	vldr	s15, [r7, #16]
 8014888:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014892:	4610      	mov	r0, r2
 8014894:	4619      	mov	r1, r3
 8014896:	f7ec f9b1 	bl	8000bfc <__aeabi_d2f>
 801489a:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 801489e:	ee68 7a27 	vmul.f32	s15, s16, s15
 80148a2:	eeb0 0a67 	vmov.f32	s0, s15
 80148a6:	f7ec fcef 	bl	8001288 <_ZSt3expf>
 80148aa:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 80148ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148b0:	69ba      	ldr	r2, [r7, #24]
 80148b2:	fb03 f202 	mul.w	r2, r3, r2
 80148b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148b8:	4413      	add	r3, r2
 80148ba:	009b      	lsls	r3, r3, #2
 80148bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80148be:	4413      	add	r3, r2
 80148c0:	697a      	ldr	r2, [r7, #20]
 80148c2:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 80148c4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80148c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80148cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80148d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 80148d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d6:	3301      	adds	r3, #1
 80148d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80148da:	e7c4      	b.n	8014866 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 80148dc:	2300      	movs	r3, #0
 80148de:	627b      	str	r3, [r7, #36]	; 0x24
 80148e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148e2:	69bb      	ldr	r3, [r7, #24]
 80148e4:	429a      	cmp	r2, r3
 80148e6:	da1d      	bge.n	8014924 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 80148e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148ea:	69ba      	ldr	r2, [r7, #24]
 80148ec:	fb03 f202 	mul.w	r2, r3, r2
 80148f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f2:	4413      	add	r3, r2
 80148f4:	009b      	lsls	r3, r3, #2
 80148f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80148f8:	4413      	add	r3, r2
 80148fa:	edd3 6a00 	vldr	s13, [r3]
 80148fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014900:	69ba      	ldr	r2, [r7, #24]
 8014902:	fb03 f202 	mul.w	r2, r3, r2
 8014906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014908:	4413      	add	r3, r2
 801490a:	009b      	lsls	r3, r3, #2
 801490c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801490e:	4413      	add	r3, r2
 8014910:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8014914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014918:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 801491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801491e:	3301      	adds	r3, #1
 8014920:	627b      	str	r3, [r7, #36]	; 0x24
 8014922:	e7dd      	b.n	80148e0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
  for (int i = 0; i < outer_size; ++i) {
 8014924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014926:	3301      	adds	r3, #1
 8014928:	637b      	str	r3, [r7, #52]	; 0x34
 801492a:	e773      	b.n	8014814 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 801492c:	bf00      	nop
 801492e:	3738      	adds	r7, #56	; 0x38
 8014930:	46bd      	mov	sp, r7
 8014932:	ecbd 8b02 	vpop	{d8}
 8014936:	bd80      	pop	{r7, pc}

08014938 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 8014938:	b580      	push	{r7, lr}
 801493a:	b08a      	sub	sp, #40	; 0x28
 801493c:	af00      	add	r7, sp, #0
 801493e:	60f8      	str	r0, [r7, #12]
 8014940:	60b9      	str	r1, [r7, #8]
 8014942:	607a      	str	r2, [r7, #4]
 8014944:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 8014946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014948:	687a      	ldr	r2, [r7, #4]
 801494a:	fb03 f202 	mul.w	r2, r3, r2
 801494e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014950:	4413      	add	r3, r2
 8014952:	005b      	lsls	r3, r3, #1
 8014954:	68ba      	ldr	r2, [r7, #8]
 8014956:	4413      	add	r3, r2
 8014958:	f9b3 3000 	ldrsh.w	r3, [r3]
 801495c:	461a      	mov	r2, r3
 801495e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014962:	1ad3      	subs	r3, r2, r3
 8014964:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	6899      	ldr	r1, [r3, #8]
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 801496e:	461a      	mov	r2, r3
 8014970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014972:	f7fd fa49 	bl	8011e08 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8014976:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 8014978:	6a3b      	ldr	r3, [r7, #32]
 801497a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 801497e:	337f      	adds	r3, #127	; 0x7f
 8014980:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 8014982:	4b12      	ldr	r3, [pc, #72]	; (80149cc <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 8014984:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 8014986:	f107 0214 	add.w	r2, r7, #20
 801498a:	f107 0310 	add.w	r3, r7, #16
 801498e:	4611      	mov	r1, r2
 8014990:	4618      	mov	r0, r3
 8014992:	f7fd f851 	bl	8011a38 <_ZSt3maxIlERKT_S2_S2_>
 8014996:	4602      	mov	r2, r0
 8014998:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801499c:	61bb      	str	r3, [r7, #24]
 801499e:	f107 0318 	add.w	r3, r7, #24
 80149a2:	4619      	mov	r1, r3
 80149a4:	4610      	mov	r0, r2
 80149a6:	f7fd f833 	bl	8011a10 <_ZSt3minIlERKT_S2_S2_>
 80149aa:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 80149ac:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 80149ae:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80149b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80149b8:	4611      	mov	r1, r2
 80149ba:	4618      	mov	r0, r3
 80149bc:	f7ff febe 	bl	801473c <_ZN6tflite26generic_int16_table_lookupEsPKs>
 80149c0:	4603      	mov	r3, r0
}
 80149c2:	4618      	mov	r0, r3
 80149c4:	3728      	adds	r7, #40	; 0x28
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bd80      	pop	{r7, pc}
 80149ca:	bf00      	nop
 80149cc:	ffff8000 	.word	0xffff8000

080149d0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 80149d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149d4:	b0ab      	sub	sp, #172	; 0xac
 80149d6:	af02      	add	r7, sp, #8
 80149d8:	63f8      	str	r0, [r7, #60]	; 0x3c
 80149da:	63b9      	str	r1, [r7, #56]	; 0x38
 80149dc:	637a      	str	r2, [r7, #52]	; 0x34
 80149de:	633b      	str	r3, [r7, #48]	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80149e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80149e2:	f7fd f874 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80149e6:	4603      	mov	r3, r0
 80149e8:	3b01      	subs	r3, #1
 80149ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80149ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149f0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80149f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80149f6:	f7ff fcc8 	bl	801438a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80149fa:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80149fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a04:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8014a08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014a0a:	f7fe fa4c 	bl	8012ea6 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014a0e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

  for (int i = 0; i < outer_size; ++i) {
 8014a12:	2300      	movs	r3, #0
 8014a14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8014a18:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8014a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014a20:	429a      	cmp	r2, r3
 8014a22:	f280 8157 	bge.w	8014cd4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x304>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 8014a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014a2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 8014a2e:	2300      	movs	r3, #0
 8014a30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8014a34:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8014a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014a3c:	429a      	cmp	r2, r3
 8014a3e:	da1c      	bge.n	8014a7a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xaa>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8014a40:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8014a44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014a48:	fb03 f202 	mul.w	r2, r3, r2
 8014a4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014a50:	4413      	add	r3, r2
 8014a52:	005a      	lsls	r2, r3, #1
 8014a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a56:	441a      	add	r2, r3
 8014a58:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 8014a5c:	4611      	mov	r1, r2
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f7ff fc5b 	bl	801431a <_ZSt3maxIsERKT_S2_S2_>
 8014a64:	4603      	mov	r3, r0
 8014a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014a6a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 8014a6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014a72:	3301      	adds	r3, #1
 8014a74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8014a78:	e7dc      	b.n	8014a34 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x64>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int16_t* exp_results_Q015 = output_data + i * depth;
 8014a80:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8014a84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014a88:	fb02 f303 	mul.w	r3, r2, r3
 8014a8c:	005a      	lsls	r2, r3, #1
 8014a8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014a92:	4413      	add	r3, r2
 8014a94:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int c = 0; c < depth; ++c) {
 8014a96:	2300      	movs	r3, #0
 8014a98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014a9c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8014aa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014aa4:	429a      	cmp	r2, r3
 8014aa6:	da28      	bge.n	8014afa <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x12a>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 8014aa8:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
      exp_results_Q015[c] =
 8014aac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014ab0:	005a      	lsls	r2, r3, #1
 8014ab2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014ab4:	189c      	adds	r4, r3, r2
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 8014ab6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014aba:	9301      	str	r3, [sp, #4]
 8014abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014ac0:	9300      	str	r3, [sp, #0]
 8014ac2:	460b      	mov	r3, r1
 8014ac4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014ac8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014aca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014acc:	f7ff ff34 	bl	8014938 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 8014ad0:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 8014ad2:	8023      	strh	r3, [r4, #0]
      sum_of_exps += exp_results_Q015[c];
 8014ad4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014ad8:	005a      	lsls	r2, r3, #1
 8014ada:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014adc:	4413      	add	r3, r2
 8014ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ae2:	461a      	mov	r2, r3
 8014ae4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014ae8:	4413      	add	r3, r2
 8014aea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int c = 0; c < depth; ++c) {
 8014aee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014af2:	3301      	adds	r3, #1
 8014af4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014af8:	e7d0      	b.n	8014a9c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 8014afa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014afe:	4618      	mov	r0, r3
 8014b00:	f7fe fa9f 	bl	8013042 <_ZN6tflite17CountLeadingZerosImEEiT_>
 8014b04:	4603      	mov	r3, r0
 8014b06:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 8014b0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014b0e:	17da      	asrs	r2, r3, #31
 8014b10:	623b      	str	r3, [r7, #32]
 8014b12:	627a      	str	r2, [r7, #36]	; 0x24
 8014b14:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8014b18:	1e59      	subs	r1, r3, #1
 8014b1a:	f1a1 0320 	sub.w	r3, r1, #32
 8014b1e:	f1c1 0220 	rsb	r2, r1, #32
 8014b22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014b24:	fa00 f901 	lsl.w	r9, r0, r1
 8014b28:	6a38      	ldr	r0, [r7, #32]
 8014b2a:	fa00 f303 	lsl.w	r3, r0, r3
 8014b2e:	ea49 0903 	orr.w	r9, r9, r3
 8014b32:	6a3b      	ldr	r3, [r7, #32]
 8014b34:	fa23 f202 	lsr.w	r2, r3, r2
 8014b38:	ea49 0902 	orr.w	r9, r9, r2
 8014b3c:	6a3b      	ldr	r3, [r7, #32]
 8014b3e:	fa03 f801 	lsl.w	r8, r3, r1
 8014b42:	f518 5300 	adds.w	r3, r8, #8192	; 0x2000
 8014b46:	61bb      	str	r3, [r7, #24]
 8014b48:	f149 0300 	adc.w	r3, r9, #0
 8014b4c:	61fb      	str	r3, [r7, #28]
         (1 << 13)) >>
 8014b4e:	f04f 0200 	mov.w	r2, #0
 8014b52:	f04f 0300 	mov.w	r3, #0
 8014b56:	69b9      	ldr	r1, [r7, #24]
 8014b58:	0b8a      	lsrs	r2, r1, #14
 8014b5a:	69f9      	ldr	r1, [r7, #28]
 8014b5c:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8014b60:	69f9      	ldr	r1, [r7, #28]
 8014b62:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 8014b64:	4613      	mov	r3, r2
 8014b66:	677b      	str	r3, [r7, #116]	; 0x74
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 8014b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014b6a:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 8014b6e:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 8014b70:	4b5b      	ldr	r3, [pc, #364]	; (8014ce0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x310>)
 8014b72:	653b      	str	r3, [r7, #80]	; 0x50
                 static_cast<int32_t>(32767)));
 8014b74:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8014b78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014b7c:	4611      	mov	r1, r2
 8014b7e:	4618      	mov	r0, r3
 8014b80:	f7fc ff5a 	bl	8011a38 <_ZSt3maxIlERKT_S2_S2_>
 8014b84:	4602      	mov	r2, r0
 8014b86:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014b8a:	657b      	str	r3, [r7, #84]	; 0x54
 8014b8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014b90:	4619      	mov	r1, r3
 8014b92:	4610      	mov	r0, r2
 8014b94:	f7fc ff3c 	bl	8011a10 <_ZSt3minIlERKT_S2_S2_>
 8014b98:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 8014b9a:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 8014b9c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 8014ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 8014ba4:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8014ba8:	4611      	mov	r1, r2
 8014baa:	4618      	mov	r0, r3
 8014bac:	f7ff fdc6 	bl	801473c <_ZN6tflite26generic_int16_table_lookupEsPKs>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014bbc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8014bc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014bc4:	429a      	cmp	r2, r3
 8014bc6:	da7f      	bge.n	8014cc8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2f8>
      uint8_t right_shift = 31 - headroom_plus_one;
 8014bc8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8014bcc:	f1c3 031f 	rsb	r3, r3, #31
 8014bd0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      int64_t round = 1 << (right_shift - 1);
 8014bd4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014bd8:	1e5a      	subs	r2, r3, #1
 8014bda:	2301      	movs	r3, #1
 8014bdc:	4093      	lsls	r3, r2
 8014bde:	17da      	asrs	r2, r3, #31
 8014be0:	603b      	str	r3, [r7, #0]
 8014be2:	607a      	str	r2, [r7, #4]
 8014be4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8014be8:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8014bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014bf0:	005a      	lsls	r2, r3, #1
 8014bf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014bf4:	4413      	add	r3, r2
 8014bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bfa:	b21b      	sxth	r3, r3
 8014bfc:	17da      	asrs	r2, r3, #31
 8014bfe:	613b      	str	r3, [r7, #16]
 8014c00:	617a      	str	r2, [r7, #20]
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 8014c02:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8014c06:	17da      	asrs	r2, r3, #31
 8014c08:	60bb      	str	r3, [r7, #8]
 8014c0a:	60fa      	str	r2, [r7, #12]
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8014c0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014c10:	460b      	mov	r3, r1
 8014c12:	68ba      	ldr	r2, [r7, #8]
 8014c14:	fb02 f203 	mul.w	r2, r2, r3
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8014c1e:	4601      	mov	r1, r0
 8014c20:	fb01 f303 	mul.w	r3, r1, r3
 8014c24:	4413      	add	r3, r2
 8014c26:	693a      	ldr	r2, [r7, #16]
 8014c28:	68b9      	ldr	r1, [r7, #8]
 8014c2a:	fba2 ab01 	umull	sl, fp, r2, r1
 8014c2e:	445b      	add	r3, fp
 8014c30:	469b      	mov	fp, r3
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 8014c32:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8014c36:	eb1a 0502 	adds.w	r5, sl, r2
 8014c3a:	eb4b 0603 	adc.w	r6, fp, r3
                        round) >>
                       right_shift;
 8014c3e:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
                        round) >>
 8014c42:	f1c1 0320 	rsb	r3, r1, #32
 8014c46:	f1b1 0220 	subs.w	r2, r1, #32
 8014c4a:	fa25 f001 	lsr.w	r0, r5, r1
 8014c4e:	62b8      	str	r0, [r7, #40]	; 0x28
 8014c50:	fa06 f303 	lsl.w	r3, r6, r3
 8014c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c56:	ea40 0003 	orr.w	r0, r0, r3
 8014c5a:	62b8      	str	r0, [r7, #40]	; 0x28
 8014c5c:	d404      	bmi.n	8014c68 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x298>
 8014c5e:	fa46 f202 	asr.w	r2, r6, r2
 8014c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c64:	4313      	orrs	r3, r2
 8014c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8014c68:	fa46 f301 	asr.w	r3, r6, r1
 8014c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8014c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c70:	647b      	str	r3, [r7, #68]	; 0x44
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 8014c72:	2300      	movs	r3, #0
 8014c74:	65bb      	str	r3, [r7, #88]	; 0x58
                   static_cast<int32_t>(32767)));
 8014c76:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014c7a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014c7e:	4611      	mov	r1, r2
 8014c80:	4618      	mov	r0, r3
 8014c82:	f7fc fed9 	bl	8011a38 <_ZSt3maxIlERKT_S2_S2_>
 8014c86:	4602      	mov	r2, r0
 8014c88:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014c8e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014c92:	4619      	mov	r1, r3
 8014c94:	4610      	mov	r0, r2
 8014c96:	f7fc febb 	bl	8011a10 <_ZSt3minIlERKT_S2_S2_>
 8014c9a:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 8014c9c:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 8014c9e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8014ca2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014ca6:	fb03 f202 	mul.w	r2, r3, r2
 8014caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014cae:	4413      	add	r3, r2
 8014cb0:	005a      	lsls	r2, r3, #1
 8014cb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014cb6:	441a      	add	r2, r3
 8014cb8:	b20b      	sxth	r3, r1
 8014cba:	8013      	strh	r3, [r2, #0]
    for (int c = 0; c < depth; ++c) {
 8014cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014cc0:	3301      	adds	r3, #1
 8014cc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014cc6:	e779      	b.n	8014bbc <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1ec>
  for (int i = 0; i < outer_size; ++i) {
 8014cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014ccc:	3301      	adds	r3, #1
 8014cce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8014cd2:	e6a1      	b.n	8014a18 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x48>
    }
  }
}
 8014cd4:	bf00      	nop
 8014cd6:	37a4      	adds	r7, #164	; 0xa4
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cde:	bf00      	nop
 8014ce0:	ffff8000 	.word	0xffff8000

08014ce4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 8014ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ce8:	b0bc      	sub	sp, #240	; 0xf0
 8014cea:	af04      	add	r7, sp, #16
 8014cec:	60f8      	str	r0, [r7, #12]
 8014cee:	60b9      	str	r1, [r7, #8]
 8014cf0:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	7a1b      	ldrb	r3, [r3, #8]
 8014cf6:	2b03      	cmp	r3, #3
 8014cf8:	d127      	bne.n	8014d4a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x66>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 8014cfa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014cfe:	68f9      	ldr	r1, [r7, #12]
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7ff fb20 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 8014d06:	68f8      	ldr	r0, [r7, #12]
 8014d08:	f7fd fe2c 	bl	8012964 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8014d0c:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 8014d0e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014d12:	68b9      	ldr	r1, [r7, #8]
 8014d14:	4618      	mov	r0, r3
 8014d16:	f7ff fb16 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 8014d1a:	68b8      	ldr	r0, [r7, #8]
 8014d1c:	f7fd fe31 	bl	8012982 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8014d20:	4602      	mov	r2, r0
 8014d22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014d26:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8014d2a:	9200      	str	r2, [sp, #0]
 8014d2c:	4622      	mov	r2, r4
 8014d2e:	6878      	ldr	r0, [r7, #4]
 8014d30:	f000 f956 	bl	8014fe0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 8014d34:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014d38:	4618      	mov	r0, r3
 8014d3a:	f7fc feb2 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 8014d3e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014d42:	4618      	mov	r0, r3
 8014d44:	f7fc fead 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 8014d48:	e0a6      	b.n	8014e98 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1b4>
  } else if (input->type == kTfLiteInt8) {
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	7a1b      	ldrb	r3, [r3, #8]
 8014d4e:	2b09      	cmp	r3, #9
 8014d50:	d17b      	bne.n	8014e4a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x166>
    if (output->type == kTfLiteInt16) {
 8014d52:	68bb      	ldr	r3, [r7, #8]
 8014d54:	7a1b      	ldrb	r3, [r3, #8]
 8014d56:	2b07      	cmp	r3, #7
 8014d58:	d127      	bne.n	8014daa <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xc6>
          op_data, tflite::micro::GetTensorShape(input),
 8014d5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8014d5e:	68f9      	ldr	r1, [r7, #12]
 8014d60:	4618      	mov	r0, r3
 8014d62:	f7ff faf0 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8014d66:	68f8      	ldr	r0, [r7, #12]
 8014d68:	f7fd fd90 	bl	801288c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8014d6c:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
 8014d6e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8014d72:	68b9      	ldr	r1, [r7, #8]
 8014d74:	4618      	mov	r0, r3
 8014d76:	f7ff fae6 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8014d7a:	68b8      	ldr	r0, [r7, #8]
 8014d7c:	f7ff fccc 	bl	8014718 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8014d80:	4602      	mov	r2, r0
 8014d82:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8014d86:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8014d8a:	9200      	str	r2, [sp, #0]
 8014d8c:	4622      	mov	r2, r4
 8014d8e:	6878      	ldr	r0, [r7, #4]
 8014d90:	f000 fa41 	bl	8015216 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 8014d94:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f7fc fe82 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 8014d9e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8014da2:	4618      	mov	r0, r3
 8014da4:	f7fc fe7d 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8014da8:	e076      	b.n	8014e98 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1b4>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 8014daa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014dae:	68f9      	ldr	r1, [r7, #12]
 8014db0:	4618      	mov	r0, r3
 8014db2:	f7ff fac8 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 8014db6:	f107 0314 	add.w	r3, r7, #20
 8014dba:	68b9      	ldr	r1, [r7, #8]
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f7ff fac2 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 8014dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f7fc fe81 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014dcc:	4603      	mov	r3, r0
 8014dce:	3b01      	subs	r3, #1
 8014dd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8014dd4:	f107 0214 	add.w	r2, r7, #20
 8014dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014ddc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8014de0:	4618      	mov	r0, r3
 8014de2:	f7ff fad2 	bl	801438a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8014de6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8014dea:	f107 0214 	add.w	r2, r7, #20
 8014dee:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8014df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014df6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8014dfa:	f7fe f854 	bl	8012ea6 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014dfe:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 8014e02:	68f8      	ldr	r0, [r7, #12]
 8014e04:	f7fd fd42 	bl	801288c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8014e08:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	689e      	ldr	r6, [r3, #8]
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 8014e16:	68b8      	ldr	r0, [r7, #8]
 8014e18:	f7fd fd47 	bl	80128aa <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	9302      	str	r3, [sp, #8]
 8014e20:	9501      	str	r5, [sp, #4]
 8014e22:	9400      	str	r4, [sp, #0]
 8014e24:	4633      	mov	r3, r6
 8014e26:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8014e2a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8014e2e:	4640      	mov	r0, r8
 8014e30:	f7f7 fe86 	bl	800cb40 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 8014e34:	f107 0314 	add.w	r3, r7, #20
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f7fc fe32 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 8014e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014e42:	4618      	mov	r0, r3
 8014e44:	f7fc fe2d 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8014e48:	e026      	b.n	8014e98 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1b4>
        op_data, tflite::micro::GetTensorShape(input),
 8014e4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8014e4e:	68f9      	ldr	r1, [r7, #12]
 8014e50:	4618      	mov	r0, r3
 8014e52:	f7ff fa78 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 8014e56:	68f8      	ldr	r0, [r7, #12]
 8014e58:	f7fe f854 	bl	8012f04 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 8014e5c:	4604      	mov	r4, r0
        tflite::micro::GetTensorShape(output),
 8014e5e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014e62:	68b9      	ldr	r1, [r7, #8]
 8014e64:	4618      	mov	r0, r3
 8014e66:	f7ff fa6e 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 8014e6a:	68b8      	ldr	r0, [r7, #8]
 8014e6c:	f7ff fc54 	bl	8014718 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8014e70:	4602      	mov	r2, r0
 8014e72:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014e76:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8014e7a:	9200      	str	r2, [sp, #0]
 8014e7c:	4622      	mov	r2, r4
 8014e7e:	6878      	ldr	r0, [r7, #4]
 8014e80:	f7ff fda6 	bl	80149d0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 8014e84:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7fc fe0a 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 8014e8e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8014e92:	4618      	mov	r0, r3
 8014e94:	f7fc fe05 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8014e98:	bf00      	nop
 8014e9a:	37e0      	adds	r7, #224	; 0xe0
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08014ea4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8014ea4:	b5b0      	push	{r4, r5, r7, lr}
 8014ea6:	b0a0      	sub	sp, #128	; 0x80
 8014ea8:	af02      	add	r7, sp, #8
 8014eaa:	6078      	str	r0, [r7, #4]
 8014eac:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8014eae:	2200      	movs	r2, #0
 8014eb0:	6839      	ldr	r1, [r7, #0]
 8014eb2:	6878      	ldr	r0, [r7, #4]
 8014eb4:	f7fc ffec 	bl	8011e90 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8014eb8:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8014eba:	2200      	movs	r2, #0
 8014ebc:	6839      	ldr	r1, [r7, #0]
 8014ebe:	6878      	ldr	r0, [r7, #4]
 8014ec0:	f7fc fff6 	bl	8011eb0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8014ec4:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	691b      	ldr	r3, [r3, #16]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d101      	bne.n	8014ed2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 8014ece:	f005 f9b1 	bl	801a234 <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 8014ed2:	683b      	ldr	r3, [r7, #0]
 8014ed4:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 8014ed6:	f107 0408 	add.w	r4, r7, #8
 8014eda:	461d      	mov	r5, r3
 8014edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ee8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014eec:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 8014ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014ef2:	7a1b      	ldrb	r3, [r3, #8]
 8014ef4:	3b01      	subs	r3, #1
 8014ef6:	2b08      	cmp	r3, #8
 8014ef8:	d847      	bhi.n	8014f8a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe6>
 8014efa:	a201      	add	r2, pc, #4	; (adr r2, 8014f00 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 8014efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f00:	08014f25 	.word	0x08014f25
 8014f04:	08014f8b 	.word	0x08014f8b
 8014f08:	08014f79 	.word	0x08014f79
 8014f0c:	08014f8b 	.word	0x08014f8b
 8014f10:	08014f8b 	.word	0x08014f8b
 8014f14:	08014f8b 	.word	0x08014f8b
 8014f18:	08014f79 	.word	0x08014f79
 8014f1c:	08014f8b 	.word	0x08014f8b
 8014f20:	08014f79 	.word	0x08014f79
    case kTfLiteFloat32: {
      tflite::reference_ops::Softmax(
          data, tflite::micro::GetTensorShape(input),
 8014f24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014f28:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f7ff fa0b 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8014f30:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8014f32:	f7fd fc8b 	bl	801284c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8014f36:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 8014f38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014f3c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014f3e:	4618      	mov	r0, r3
 8014f40:	f7ff fa01 	bl	8014346 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8014f44:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8014f46:	f7fd fc90 	bl	801286a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8014f4a:	4602      	mov	r2, r0
 8014f4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014f50:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8014f54:	f107 0008 	add.w	r0, r7, #8
 8014f58:	9200      	str	r2, [sp, #0]
 8014f5a:	4622      	mov	r2, r4
 8014f5c:	f7ff fc3c 	bl	80147d8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 8014f60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014f64:	4618      	mov	r0, r3
 8014f66:	f7fc fd9c 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
          data, tflite::micro::GetTensorShape(input),
 8014f6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f7fc fd97 	bl	8011aa2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 8014f74:	2300      	movs	r3, #0
 8014f76:	e016      	b.n	8014fa6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x102>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8:
    case kTfLiteInt16: {
      SoftmaxQuantized(input, output, data);
 8014f78:	f107 0308 	add.w	r3, r7, #8
 8014f7c:	461a      	mov	r2, r3
 8014f7e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014f80:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8014f82:	f7ff feaf 	bl	8014ce4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8014f86:	2300      	movs	r3, #0
 8014f88:	e00d      	b.n	8014fa6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x102>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	695c      	ldr	r4, [r3, #20]
 8014f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014f90:	7a1b      	ldrb	r3, [r3, #8]
 8014f92:	4618      	mov	r0, r3
 8014f94:	f7fc f812 	bl	8010fbc <TfLiteTypeGetName>
 8014f98:	4602      	mov	r2, r0
 8014f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014f9c:	7a1b      	ldrb	r3, [r3, #8]
 8014f9e:	4904      	ldr	r1, [pc, #16]	; (8014fb0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10c>)
 8014fa0:	6878      	ldr	r0, [r7, #4]
 8014fa2:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8014fa4:	2301      	movs	r3, #1
  }
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3778      	adds	r7, #120	; 0x78
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bdb0      	pop	{r4, r5, r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	0801e66c 	.word	0x0801e66c

08014fb4 <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 8014fb4:	b4b0      	push	{r4, r5, r7}
 8014fb6:	b083      	sub	sp, #12
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	4a07      	ldr	r2, [pc, #28]	; (8014fdc <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 8014fc0:	461c      	mov	r4, r3
 8014fc2:	4615      	mov	r5, r2
 8014fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014fc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014fcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014fd0:	6878      	ldr	r0, [r7, #4]
 8014fd2:	370c      	adds	r7, #12
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bcb0      	pop	{r4, r5, r7}
 8014fd8:	4770      	bx	lr
 8014fda:	bf00      	nop
 8014fdc:	0801e688 	.word	0x0801e688

08014fe0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8014fe0:	b590      	push	{r4, r7, lr}
 8014fe2:	b09f      	sub	sp, #124	; 0x7c
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	60f8      	str	r0, [r7, #12]
 8014fe8:	60b9      	str	r1, [r7, #8]
 8014fea:	607a      	str	r2, [r7, #4]
 8014fec:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	689b      	ldr	r3, [r3, #8]
 8014ff2:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	68db      	ldr	r3, [r3, #12]
 8014ff8:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	699b      	ldr	r3, [r3, #24]
 8014ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8015000:	68b8      	ldr	r0, [r7, #8]
 8015002:	f7fc fd64 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015006:	4603      	mov	r3, r0
 8015008:	3b01      	subs	r3, #1
 801500a:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801500c:	683a      	ldr	r2, [r7, #0]
 801500e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015010:	68b8      	ldr	r0, [r7, #8]
 8015012:	f7ff f9ba 	bl	801438a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8015016:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8015018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801501a:	683a      	ldr	r2, [r7, #0]
 801501c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801501e:	68b8      	ldr	r0, [r7, #8]
 8015020:	f7fd ff41 	bl	8012ea6 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015024:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8015026:	2300      	movs	r3, #0
 8015028:	677b      	str	r3, [r7, #116]	; 0x74
 801502a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801502c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801502e:	429a      	cmp	r2, r3
 8015030:	f280 80ed 	bge.w	801520e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8015034:	2300      	movs	r3, #0
 8015036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801503a:	2300      	movs	r3, #0
 801503c:	673b      	str	r3, [r7, #112]	; 0x70
 801503e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015042:	429a      	cmp	r2, r3
 8015044:	da16      	bge.n	8015074 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8015046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015048:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801504a:	fb03 f202 	mul.w	r2, r3, r2
 801504e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015050:	4413      	add	r3, r2
 8015052:	461a      	mov	r2, r3
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	441a      	add	r2, r3
 8015058:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801505c:	4611      	mov	r1, r2
 801505e:	4618      	mov	r0, r3
 8015060:	f7ff fb46 	bl	80146f0 <_ZSt3maxIhERKT_S2_S2_>
 8015064:	4603      	mov	r3, r0
 8015066:	781b      	ldrb	r3, [r3, #0]
 8015068:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801506c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801506e:	3301      	adds	r3, #1
 8015070:	673b      	str	r3, [r7, #112]	; 0x70
 8015072:	e7e4      	b.n	801503e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8015074:	f000 f9ed 	bl	8015452 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8015078:	4603      	mov	r3, r0
 801507a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801507c:	2300      	movs	r3, #0
 801507e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015080:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015084:	429a      	cmp	r2, r3
 8015086:	da2f      	bge.n	80150e8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8015088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801508a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801508c:	fb03 f202 	mul.w	r2, r3, r2
 8015090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015092:	4413      	add	r3, r2
 8015094:	461a      	mov	r2, r3
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	4413      	add	r3, r2
 801509a:	781b      	ldrb	r3, [r3, #0]
 801509c:	461a      	mov	r2, r3
 801509e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 80150a2:	1ad3      	subs	r3, r2, r3
 80150a4:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 80150a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80150a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80150aa:	429a      	cmp	r2, r3
 80150ac:	db18      	blt.n	80150e0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 80150ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80150b0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80150b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80150b4:	f7fd ff87 	bl	8012fc6 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 80150b8:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 80150ba:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80150bc:	f000 f9d1 	bl	8015462 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80150c0:	4603      	mov	r3, r0
 80150c2:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 80150c4:	69f8      	ldr	r0, [r7, #28]
 80150c6:	f000 f9fb 	bl	80154c0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 80150ca:	4603      	mov	r3, r0
 80150cc:	4618      	mov	r0, r3
 80150ce:	f000 fb3f 	bl	8015750 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 80150d2:	4603      	mov	r3, r0
 80150d4:	4619      	mov	r1, r3
 80150d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150d8:	f000 f9d4 	bl	8015484 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80150dc:	4603      	mov	r3, r0
 80150de:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80150e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80150e2:	3301      	adds	r3, #1
 80150e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80150e6:	e7cb      	b.n	8015080 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 80150e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80150ec:	4618      	mov	r0, r3
 80150ee:	f000 fb49 	bl	8015784 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80150f2:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80150fa:	210c      	movs	r1, #12
 80150fc:	4618      	mov	r0, r3
 80150fe:	f7fd ff75 	bl	8012fec <_ZN6tflite13GetReciprocalEliPi>
 8015102:	4603      	mov	r3, r0
 8015104:	4618      	mov	r0, r3
 8015106:	f7fd ffae 	bl	8013066 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801510a:	4603      	mov	r3, r0
 801510c:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 801510e:	2300      	movs	r3, #0
 8015110:	66bb      	str	r3, [r7, #104]	; 0x68
 8015112:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015116:	429a      	cmp	r2, r3
 8015118:	da75      	bge.n	8015206 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801511a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801511c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801511e:	fb03 f202 	mul.w	r2, r3, r2
 8015122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015124:	4413      	add	r3, r2
 8015126:	461a      	mov	r2, r3
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	4413      	add	r3, r2
 801512c:	781b      	ldrb	r3, [r3, #0]
 801512e:	461a      	mov	r2, r3
 8015130:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8015134:	1ad3      	subs	r3, r2, r3
 8015136:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8015138:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801513a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801513c:	429a      	cmp	r2, r3
 801513e:	db50      	blt.n	80151e2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8015140:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015142:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015144:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015146:	f7fd ff3e 	bl	8012fc6 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801514a:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801514c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801514e:	f000 f988 	bl	8015462 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015152:	4603      	mov	r3, r0
 8015154:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8015156:	69b8      	ldr	r0, [r7, #24]
 8015158:	f000 f9b2 	bl	80154c0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801515c:	4603      	mov	r3, r0
 801515e:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8015160:	6979      	ldr	r1, [r7, #20]
 8015162:	6a38      	ldr	r0, [r7, #32]
 8015164:	f7ff f9fc 	bl	8014560 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015168:	4603      	mov	r3, r0
 801516a:	633b      	str	r3, [r7, #48]	; 0x30
 801516c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015170:	4618      	mov	r0, r3
 8015172:	f7fd ffe9 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015176:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8015178:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 801517a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801517c:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801517e:	4611      	mov	r1, r2
 8015180:	4618      	mov	r0, r3
 8015182:	f7fd f9ab 	bl	80124dc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015186:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 8015188:	f7fc f980 	bl	801148c <_ZNSt14numeric_limitsIhE3minEv>
 801518c:	4603      	mov	r3, r0
 801518e:	461a      	mov	r2, r3
            unsat_output +
 8015190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015192:	4413      	add	r3, r2
        const int32_t shifted_output =
 8015194:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 8015196:	f7fc f981 	bl	801149c <_ZNSt14numeric_limitsIhE3maxEv>
 801519a:	4603      	mov	r3, r0
 801519c:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 801519e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80151a2:	f107 0310 	add.w	r3, r7, #16
 80151a6:	4611      	mov	r1, r2
 80151a8:	4618      	mov	r0, r3
 80151aa:	f7fc fc31 	bl	8011a10 <_ZSt3minIlERKT_S2_S2_>
 80151ae:	4604      	mov	r4, r0
 80151b0:	f7fc f96c 	bl	801148c <_ZNSt14numeric_limitsIhE3minEv>
 80151b4:	4603      	mov	r3, r0
 80151b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80151b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80151bc:	4619      	mov	r1, r3
 80151be:	4620      	mov	r0, r4
 80151c0:	f7fc fc3a 	bl	8011a38 <_ZSt3maxIlERKT_S2_S2_>
 80151c4:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 80151c6:	6819      	ldr	r1, [r3, #0]
 80151c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80151ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80151cc:	fb03 f202 	mul.w	r2, r3, r2
 80151d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80151d2:	4413      	add	r3, r2
 80151d4:	461a      	mov	r2, r3
 80151d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80151da:	4413      	add	r3, r2
 80151dc:	b2ca      	uxtb	r2, r1
 80151de:	701a      	strb	r2, [r3, #0]
 80151e0:	e00d      	b.n	80151fe <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 80151e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80151e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80151e6:	fb03 f202 	mul.w	r2, r3, r2
 80151ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80151ec:	4413      	add	r3, r2
 80151ee:	461a      	mov	r2, r3
 80151f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80151f4:	189c      	adds	r4, r3, r2
 80151f6:	f7fc f949 	bl	801148c <_ZNSt14numeric_limitsIhE3minEv>
 80151fa:	4603      	mov	r3, r0
 80151fc:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 80151fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015200:	3301      	adds	r3, #1
 8015202:	66bb      	str	r3, [r7, #104]	; 0x68
 8015204:	e785      	b.n	8015112 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 8015206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015208:	3301      	adds	r3, #1
 801520a:	677b      	str	r3, [r7, #116]	; 0x74
 801520c:	e70d      	b.n	801502a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 801520e:	bf00      	nop
 8015210:	377c      	adds	r7, #124	; 0x7c
 8015212:	46bd      	mov	sp, r7
 8015214:	bd90      	pop	{r4, r7, pc}

08015216 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8015216:	b590      	push	{r4, r7, lr}
 8015218:	b09f      	sub	sp, #124	; 0x7c
 801521a:	af00      	add	r7, sp, #0
 801521c:	60f8      	str	r0, [r7, #12]
 801521e:	60b9      	str	r1, [r7, #8]
 8015220:	607a      	str	r2, [r7, #4]
 8015222:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	689b      	ldr	r3, [r3, #8]
 8015228:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	68db      	ldr	r3, [r3, #12]
 801522e:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	699b      	ldr	r3, [r3, #24]
 8015234:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8015236:	68b8      	ldr	r0, [r7, #8]
 8015238:	f7fc fc49 	bl	8011ace <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801523c:	4603      	mov	r3, r0
 801523e:	3b01      	subs	r3, #1
 8015240:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8015242:	683a      	ldr	r2, [r7, #0]
 8015244:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015246:	68b8      	ldr	r0, [r7, #8]
 8015248:	f7ff f89f 	bl	801438a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801524c:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801524e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015250:	683a      	ldr	r2, [r7, #0]
 8015252:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015254:	68b8      	ldr	r0, [r7, #8]
 8015256:	f7fd fe26 	bl	8012ea6 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801525a:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 801525c:	2300      	movs	r3, #0
 801525e:	677b      	str	r3, [r7, #116]	; 0x74
 8015260:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015264:	429a      	cmp	r2, r3
 8015266:	f280 80f0 	bge.w	801544a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 801526a:	2380      	movs	r3, #128	; 0x80
 801526c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8015270:	2300      	movs	r3, #0
 8015272:	673b      	str	r3, [r7, #112]	; 0x70
 8015274:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015278:	429a      	cmp	r2, r3
 801527a:	da17      	bge.n	80152ac <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801527c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801527e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015280:	fb03 f202 	mul.w	r2, r3, r2
 8015284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015286:	4413      	add	r3, r2
 8015288:	461a      	mov	r2, r3
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	441a      	add	r2, r3
 801528e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8015292:	4611      	mov	r1, r2
 8015294:	4618      	mov	r0, r3
 8015296:	f000 fa80 	bl	801579a <_ZSt3maxIaERKT_S2_S2_>
 801529a:	4603      	mov	r3, r0
 801529c:	f993 3000 	ldrsb.w	r3, [r3]
 80152a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80152a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80152a6:	3301      	adds	r3, #1
 80152a8:	673b      	str	r3, [r7, #112]	; 0x70
 80152aa:	e7e3      	b.n	8015274 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 80152ac:	f000 f8d1 	bl	8015452 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 80152b0:	4603      	mov	r3, r0
 80152b2:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80152b4:	2300      	movs	r3, #0
 80152b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80152b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80152ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152bc:	429a      	cmp	r2, r3
 80152be:	da30      	bge.n	8015322 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 80152c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80152c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80152c4:	fb03 f202 	mul.w	r2, r3, r2
 80152c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80152ca:	4413      	add	r3, r2
 80152cc:	461a      	mov	r2, r3
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	4413      	add	r3, r2
 80152d2:	f993 3000 	ldrsb.w	r3, [r3]
 80152d6:	461a      	mov	r2, r3
 80152d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 80152dc:	1ad3      	subs	r3, r2, r3
 80152de:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 80152e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80152e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80152e4:	429a      	cmp	r2, r3
 80152e6:	db18      	blt.n	801531a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 80152e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80152ea:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80152ec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80152ee:	f7fd fe6a 	bl	8012fc6 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 80152f2:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 80152f4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80152f6:	f000 f8b4 	bl	8015462 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80152fa:	4603      	mov	r3, r0
 80152fc:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 80152fe:	69f8      	ldr	r0, [r7, #28]
 8015300:	f000 f8de 	bl	80154c0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015304:	4603      	mov	r3, r0
 8015306:	4618      	mov	r0, r3
 8015308:	f000 fa22 	bl	8015750 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801530c:	4603      	mov	r3, r0
 801530e:	4619      	mov	r1, r3
 8015310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015312:	f000 f8b7 	bl	8015484 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015316:	4603      	mov	r3, r0
 8015318:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801531a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801531c:	3301      	adds	r3, #1
 801531e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015320:	e7ca      	b.n	80152b8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8015322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015326:	4618      	mov	r0, r3
 8015328:	f000 fa2c 	bl	8015784 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801532c:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015334:	210c      	movs	r1, #12
 8015336:	4618      	mov	r0, r3
 8015338:	f7fd fe58 	bl	8012fec <_ZN6tflite13GetReciprocalEliPi>
 801533c:	4603      	mov	r3, r0
 801533e:	4618      	mov	r0, r3
 8015340:	f7fd fe91 	bl	8013066 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8015344:	4603      	mov	r3, r0
 8015346:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8015348:	2300      	movs	r3, #0
 801534a:	66bb      	str	r3, [r7, #104]	; 0x68
 801534c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801534e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015350:	429a      	cmp	r2, r3
 8015352:	da76      	bge.n	8015442 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8015354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015356:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015358:	fb03 f202 	mul.w	r2, r3, r2
 801535c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801535e:	4413      	add	r3, r2
 8015360:	461a      	mov	r2, r3
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	4413      	add	r3, r2
 8015366:	f993 3000 	ldrsb.w	r3, [r3]
 801536a:	461a      	mov	r2, r3
 801536c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8015370:	1ad3      	subs	r3, r2, r3
 8015372:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8015374:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015378:	429a      	cmp	r2, r3
 801537a:	db50      	blt.n	801541e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801537c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801537e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015380:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015382:	f7fd fe20 	bl	8012fc6 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8015386:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8015388:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801538a:	f000 f86a 	bl	8015462 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801538e:	4603      	mov	r3, r0
 8015390:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8015392:	69b8      	ldr	r0, [r7, #24]
 8015394:	f000 f894 	bl	80154c0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015398:	4603      	mov	r3, r0
 801539a:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 801539c:	6979      	ldr	r1, [r7, #20]
 801539e:	6a38      	ldr	r0, [r7, #32]
 80153a0:	f7ff f8de 	bl	8014560 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80153a4:	4603      	mov	r3, r0
 80153a6:	633b      	str	r3, [r7, #48]	; 0x30
 80153a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80153ac:	4618      	mov	r0, r3
 80153ae:	f7fd fecb 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80153b2:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 80153b4:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 80153b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153b8:	320f      	adds	r2, #15
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 80153ba:	4611      	mov	r1, r2
 80153bc:	4618      	mov	r0, r3
 80153be:	f7fd f88d 	bl	80124dc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80153c2:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 80153c4:	f7fc f872 	bl	80114ac <_ZNSt14numeric_limitsIsE3minEv>
 80153c8:	4603      	mov	r3, r0
 80153ca:	461a      	mov	r2, r3
            unsat_output +
 80153cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153ce:	4413      	add	r3, r2
        const int32_t shifted_output =
 80153d0:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 80153d2:	f7fc f875 	bl	80114c0 <_ZNSt14numeric_limitsIsE3maxEv>
 80153d6:	4603      	mov	r3, r0
 80153d8:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 80153da:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80153de:	f107 0310 	add.w	r3, r7, #16
 80153e2:	4611      	mov	r1, r2
 80153e4:	4618      	mov	r0, r3
 80153e6:	f7fc fb13 	bl	8011a10 <_ZSt3minIlERKT_S2_S2_>
 80153ea:	4604      	mov	r4, r0
 80153ec:	f7fc f85e 	bl	80114ac <_ZNSt14numeric_limitsIsE3minEv>
 80153f0:	4603      	mov	r3, r0
 80153f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80153f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80153f8:	4619      	mov	r1, r3
 80153fa:	4620      	mov	r0, r4
 80153fc:	f7fc fb1c 	bl	8011a38 <_ZSt3maxIlERKT_S2_S2_>
 8015400:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8015402:	6819      	ldr	r1, [r3, #0]
 8015404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015406:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015408:	fb03 f202 	mul.w	r2, r3, r2
 801540c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801540e:	4413      	add	r3, r2
 8015410:	005b      	lsls	r3, r3, #1
 8015412:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015416:	4413      	add	r3, r2
 8015418:	b20a      	sxth	r2, r1
 801541a:	801a      	strh	r2, [r3, #0]
 801541c:	e00d      	b.n	801543a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801541e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015420:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015422:	fb03 f202 	mul.w	r2, r3, r2
 8015426:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015428:	4413      	add	r3, r2
 801542a:	005b      	lsls	r3, r3, #1
 801542c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015430:	18d4      	adds	r4, r2, r3
 8015432:	f7fc f83b 	bl	80114ac <_ZNSt14numeric_limitsIsE3minEv>
 8015436:	4603      	mov	r3, r0
 8015438:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 801543a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801543c:	3301      	adds	r3, #1
 801543e:	66bb      	str	r3, [r7, #104]	; 0x68
 8015440:	e784      	b.n	801534c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 8015442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015444:	3301      	adds	r3, #1
 8015446:	677b      	str	r3, [r7, #116]	; 0x74
 8015448:	e70a      	b.n	8015260 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 801544a:	bf00      	nop
 801544c:	377c      	adds	r7, #124	; 0x7c
 801544e:	46bd      	mov	sp, r7
 8015450:	bd90      	pop	{r4, r7, pc}

08015452 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 8015452:	b580      	push	{r7, lr}
 8015454:	af00      	add	r7, sp, #0
 8015456:	2000      	movs	r0, #0
 8015458:	f000 f9b5 	bl	80157c6 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 801545c:	4603      	mov	r3, r0
 801545e:	4618      	mov	r0, r3
 8015460:	bd80      	pop	{r7, pc}

08015462 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8015462:	b580      	push	{r7, lr}
 8015464:	b084      	sub	sp, #16
 8015466:	af00      	add	r7, sp, #0
 8015468:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801546a:	f107 030c 	add.w	r3, r7, #12
 801546e:	4618      	mov	r0, r3
 8015470:	f000 f9bd 	bl	80157ee <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015474:	4602      	mov	r2, r0
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	6013      	str	r3, [r2, #0]
    return retval;
 801547a:	68fb      	ldr	r3, [r7, #12]
  }
 801547c:	4618      	mov	r0, r3
 801547e:	3710      	adds	r7, #16
 8015480:	46bd      	mov	sp, r7
 8015482:	bd80      	pop	{r7, pc}

08015484 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8015484:	b590      	push	{r4, r7, lr}
 8015486:	b083      	sub	sp, #12
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
 801548c:	6039      	str	r1, [r7, #0]
 801548e:	1d3b      	adds	r3, r7, #4
 8015490:	4618      	mov	r0, r3
 8015492:	f000 f977 	bl	8015784 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015496:	4603      	mov	r3, r0
 8015498:	681c      	ldr	r4, [r3, #0]
 801549a:	463b      	mov	r3, r7
 801549c:	4618      	mov	r0, r3
 801549e:	f000 f971 	bl	8015784 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80154a2:	4603      	mov	r3, r0
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	4619      	mov	r1, r3
 80154a8:	4620      	mov	r0, r4
 80154aa:	f7fd fc17 	bl	8012cdc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80154ae:	4603      	mov	r3, r0
 80154b0:	4618      	mov	r0, r3
 80154b2:	f000 f9a7 	bl	8015804 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 80154b6:	4603      	mov	r3, r0
 80154b8:	4618      	mov	r0, r3
 80154ba:	370c      	adds	r7, #12
 80154bc:	46bd      	mov	sp, r7
 80154be:	bd90      	pop	{r4, r7, pc}

080154c0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 80154c0:	b590      	push	{r4, r7, lr}
 80154c2:	b091      	sub	sp, #68	; 0x44
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 80154c8:	f000 f9ad 	bl	8015826 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 80154cc:	4603      	mov	r3, r0
 80154ce:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 80154d0:	2001      	movs	r0, #1
 80154d2:	f000 f9b1 	bl	8015838 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 80154d6:	4603      	mov	r3, r0
 80154d8:	4619      	mov	r1, r3
 80154da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80154dc:	f000 f9c0 	bl	8015860 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80154e0:	4603      	mov	r3, r0
 80154e2:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 80154e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80154e6:	6878      	ldr	r0, [r7, #4]
 80154e8:	f000 f9d8 	bl	801589c <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80154ec:	4603      	mov	r3, r0
 80154ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80154f0:	4618      	mov	r0, r3
 80154f2:	f000 f9b5 	bl	8015860 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80154f6:	4603      	mov	r3, r0
 80154f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 80154fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80154fc:	f000 f9ec 	bl	80158d8 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8015500:	4603      	mov	r3, r0
 8015502:	4618      	mov	r0, r3
 8015504:	f7fe ffca 	bl	801449c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8015508:	4603      	mov	r3, r0
 801550a:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 801550c:	6879      	ldr	r1, [r7, #4]
 801550e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015510:	f000 f9a6 	bl	8015860 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015514:	4603      	mov	r3, r0
 8015516:	63bb      	str	r3, [r7, #56]	; 0x38
 8015518:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801551c:	4618      	mov	r0, r3
 801551e:	f000 f966 	bl	80157ee <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015522:	4603      	mov	r3, r0
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 8015528:	4883      	ldr	r0, [pc, #524]	; (8015738 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 801552a:	f7fe ff5d 	bl	80143e8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801552e:	4603      	mov	r3, r0
 8015530:	4618      	mov	r0, r3
 8015532:	f7fd fe14 	bl	801315e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015536:	4603      	mov	r3, r0
 8015538:	627b      	str	r3, [r7, #36]	; 0x24
 801553a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801553e:	f7fd fb91 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015542:	4603      	mov	r3, r0
 8015544:	4619      	mov	r1, r3
 8015546:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015548:	f7fd fb97 	bl	8012c7a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801554c:	4603      	mov	r3, r0
 801554e:	4618      	mov	r0, r3
 8015550:	f7fd fbe6 	bl	8012d20 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015554:	4604      	mov	r4, r0
 8015556:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801555a:	f7ff f801 	bl	8014560 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801555e:	4603      	mov	r3, r0
 8015560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015562:	4619      	mov	r1, r3
 8015564:	4620      	mov	r0, r4
 8015566:	f7fe ff65 	bl	8014434 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801556a:	4603      	mov	r3, r0
 801556c:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 801556e:	4873      	ldr	r0, [pc, #460]	; (801573c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8015570:	f7fe ff3a 	bl	80143e8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015574:	4603      	mov	r3, r0
 8015576:	4618      	mov	r0, r3
 8015578:	f7fd fdf1 	bl	801315e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801557c:	4603      	mov	r3, r0
 801557e:	623b      	str	r3, [r7, #32]
 8015580:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8015584:	f7fd fb6e 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015588:	4603      	mov	r3, r0
 801558a:	4619      	mov	r1, r3
 801558c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801558e:	f7fd fb74 	bl	8012c7a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015592:	4603      	mov	r3, r0
 8015594:	4618      	mov	r0, r3
 8015596:	f7fd fbc3 	bl	8012d20 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801559a:	4604      	mov	r4, r0
 801559c:	6a39      	ldr	r1, [r7, #32]
 801559e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80155a0:	f7fe ffde 	bl	8014560 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80155a4:	4603      	mov	r3, r0
 80155a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80155a8:	4619      	mov	r1, r3
 80155aa:	4620      	mov	r0, r4
 80155ac:	f7fe ff42 	bl	8014434 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80155b0:	4603      	mov	r3, r0
 80155b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 80155b4:	4862      	ldr	r0, [pc, #392]	; (8015740 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 80155b6:	f7fe ff17 	bl	80143e8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80155ba:	4603      	mov	r3, r0
 80155bc:	4618      	mov	r0, r3
 80155be:	f7fd fdce 	bl	801315e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80155c2:	4603      	mov	r3, r0
 80155c4:	61fb      	str	r3, [r7, #28]
 80155c6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80155ca:	f7fd fb4b 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80155ce:	4603      	mov	r3, r0
 80155d0:	4619      	mov	r1, r3
 80155d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80155d4:	f7fd fb51 	bl	8012c7a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80155d8:	4603      	mov	r3, r0
 80155da:	4618      	mov	r0, r3
 80155dc:	f7fd fba0 	bl	8012d20 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80155e0:	4604      	mov	r4, r0
 80155e2:	69f9      	ldr	r1, [r7, #28]
 80155e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80155e6:	f7fe ffbb 	bl	8014560 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80155ea:	4603      	mov	r3, r0
 80155ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80155ee:	4619      	mov	r1, r3
 80155f0:	4620      	mov	r0, r4
 80155f2:	f7fe ff1f 	bl	8014434 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80155f6:	4603      	mov	r3, r0
 80155f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 80155fa:	4852      	ldr	r0, [pc, #328]	; (8015744 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 80155fc:	f7fe fef4 	bl	80143e8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015600:	4603      	mov	r3, r0
 8015602:	4618      	mov	r0, r3
 8015604:	f7fd fdab 	bl	801315e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015608:	4603      	mov	r3, r0
 801560a:	61bb      	str	r3, [r7, #24]
 801560c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8015610:	f7fd fb28 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015614:	4603      	mov	r3, r0
 8015616:	4619      	mov	r1, r3
 8015618:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801561a:	f7fd fb2e 	bl	8012c7a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801561e:	4603      	mov	r3, r0
 8015620:	4618      	mov	r0, r3
 8015622:	f7fd fb7d 	bl	8012d20 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015626:	4604      	mov	r4, r0
 8015628:	69b9      	ldr	r1, [r7, #24]
 801562a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801562c:	f7fe ff98 	bl	8014560 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015630:	4603      	mov	r3, r0
 8015632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015634:	4619      	mov	r1, r3
 8015636:	4620      	mov	r0, r4
 8015638:	f7fe fefc 	bl	8014434 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801563c:	4603      	mov	r3, r0
 801563e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 8015640:	4841      	ldr	r0, [pc, #260]	; (8015748 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 8015642:	f7fe fed1 	bl	80143e8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015646:	4603      	mov	r3, r0
 8015648:	4618      	mov	r0, r3
 801564a:	f7fd fd88 	bl	801315e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801564e:	4603      	mov	r3, r0
 8015650:	617b      	str	r3, [r7, #20]
 8015652:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8015656:	f7fd fb05 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801565a:	4603      	mov	r3, r0
 801565c:	4619      	mov	r1, r3
 801565e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015660:	f7fd fb0b 	bl	8012c7a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015664:	4603      	mov	r3, r0
 8015666:	4618      	mov	r0, r3
 8015668:	f7fd fb5a 	bl	8012d20 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801566c:	4604      	mov	r4, r0
 801566e:	6979      	ldr	r1, [r7, #20]
 8015670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015672:	f7fe ff75 	bl	8014560 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015676:	4603      	mov	r3, r0
 8015678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801567a:	4619      	mov	r1, r3
 801567c:	4620      	mov	r0, r4
 801567e:	f7fe fed9 	bl	8014434 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015682:	4603      	mov	r3, r0
 8015684:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 8015686:	4831      	ldr	r0, [pc, #196]	; (801574c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8015688:	f7fe feae 	bl	80143e8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801568c:	4603      	mov	r3, r0
 801568e:	4618      	mov	r0, r3
 8015690:	f7fd fd65 	bl	801315e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015694:	4603      	mov	r3, r0
 8015696:	613b      	str	r3, [r7, #16]
 8015698:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801569c:	f7fd fae2 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80156a0:	4603      	mov	r3, r0
 80156a2:	4619      	mov	r1, r3
 80156a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80156a6:	f7fd fae8 	bl	8012c7a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80156aa:	4603      	mov	r3, r0
 80156ac:	4618      	mov	r0, r3
 80156ae:	f7fd fb37 	bl	8012d20 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80156b2:	4604      	mov	r4, r0
 80156b4:	6939      	ldr	r1, [r7, #16]
 80156b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80156b8:	f7fe ff52 	bl	8014560 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80156bc:	4603      	mov	r3, r0
 80156be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156c0:	4619      	mov	r1, r3
 80156c2:	4620      	mov	r0, r4
 80156c4:	f7fe feb6 	bl	8014434 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80156c8:	4603      	mov	r3, r0
 80156ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 80156cc:	20f2      	movs	r0, #242	; 0xf2
 80156ce:	f7fe fe8b 	bl	80143e8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80156d2:	4603      	mov	r3, r0
 80156d4:	4618      	mov	r0, r3
 80156d6:	f7fd fd42 	bl	801315e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80156da:	4603      	mov	r3, r0
 80156dc:	60fb      	str	r3, [r7, #12]
 80156de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80156e2:	f7fd fabf 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80156e6:	4603      	mov	r3, r0
 80156e8:	4619      	mov	r1, r3
 80156ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80156ec:	f7fd fac5 	bl	8012c7a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80156f0:	4603      	mov	r3, r0
 80156f2:	4618      	mov	r0, r3
 80156f4:	f7fd fb14 	bl	8012d20 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80156f8:	4604      	mov	r4, r0
 80156fa:	68f9      	ldr	r1, [r7, #12]
 80156fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80156fe:	f7fe ff2f 	bl	8014560 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015702:	4603      	mov	r3, r0
 8015704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015706:	4619      	mov	r1, r3
 8015708:	4620      	mov	r0, r4
 801570a:	f7fe fe93 	bl	8014434 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801570e:	4603      	mov	r3, r0
 8015710:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 8015712:	6878      	ldr	r0, [r7, #4]
 8015714:	f000 f8fa 	bl	801590c <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8015718:	4604      	mov	r4, r0
 801571a:	f7fd fd34 	bl	8013186 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 801571e:	4603      	mov	r3, r0
 8015720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015722:	4619      	mov	r1, r3
 8015724:	4620      	mov	r0, r4
 8015726:	f7fe fe85 	bl	8014434 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801572a:	4603      	mov	r3, r0
 801572c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8015730:	4618      	mov	r0, r3
 8015732:	3744      	adds	r7, #68	; 0x44
 8015734:	46bd      	mov	sp, r7
 8015736:	bd90      	pop	{r4, r7, pc}
 8015738:	63afbe7b 	.word	0x63afbe7b
 801573c:	4da2cbf2 	.word	0x4da2cbf2
 8015740:	2f16ac6c 	.word	0x2f16ac6c
 8015744:	1152aaa4 	.word	0x1152aaa4
 8015748:	02582ab7 	.word	0x02582ab7
 801574c:	000afe11 	.word	0x000afe11

08015750 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8015750:	b5b0      	push	{r4, r5, r7, lr}
 8015752:	b084      	sub	sp, #16
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8015758:	1d3b      	adds	r3, r7, #4
 801575a:	4618      	mov	r0, r3
 801575c:	f7fd fcf4 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015760:	4603      	mov	r3, r0
 8015762:	681d      	ldr	r5, [r3, #0]
 8015764:	f107 030c 	add.w	r3, r7, #12
 8015768:	4618      	mov	r0, r3
 801576a:	f000 f80b 	bl	8015784 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801576e:	4604      	mov	r4, r0
 8015770:	4628      	mov	r0, r5
 8015772:	f000 f8dd 	bl	8015930 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 8015776:	4603      	mov	r3, r0
 8015778:	6023      	str	r3, [r4, #0]
  return result;
 801577a:	68fb      	ldr	r3, [r7, #12]
}
 801577c:	4618      	mov	r0, r3
 801577e:	3710      	adds	r7, #16
 8015780:	46bd      	mov	sp, r7
 8015782:	bdb0      	pop	{r4, r5, r7, pc}

08015784 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 8015784:	b480      	push	{r7}
 8015786:	b083      	sub	sp, #12
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	4618      	mov	r0, r3
 8015790:	370c      	adds	r7, #12
 8015792:	46bd      	mov	sp, r7
 8015794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015798:	4770      	bx	lr

0801579a <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801579a:	b480      	push	{r7}
 801579c:	b083      	sub	sp, #12
 801579e:	af00      	add	r7, sp, #0
 80157a0:	6078      	str	r0, [r7, #4]
 80157a2:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	f993 2000 	ldrsb.w	r2, [r3]
 80157aa:	683b      	ldr	r3, [r7, #0]
 80157ac:	f993 3000 	ldrsb.w	r3, [r3]
 80157b0:	429a      	cmp	r2, r3
 80157b2:	da01      	bge.n	80157b8 <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	e000      	b.n	80157ba <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 80157b8:	687b      	ldr	r3, [r7, #4]
    }
 80157ba:	4618      	mov	r0, r3
 80157bc:	370c      	adds	r7, #12
 80157be:	46bd      	mov	sp, r7
 80157c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c4:	4770      	bx	lr

080157c6 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 80157c6:	b590      	push	{r4, r7, lr}
 80157c8:	b085      	sub	sp, #20
 80157ca:	af00      	add	r7, sp, #0
 80157cc:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80157ce:	f107 030c 	add.w	r3, r7, #12
 80157d2:	4618      	mov	r0, r3
 80157d4:	f7ff ffd6 	bl	8015784 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80157d8:	4604      	mov	r4, r0
 80157da:	6878      	ldr	r0, [r7, #4]
 80157dc:	f7fd fa42 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80157e0:	4603      	mov	r3, r0
 80157e2:	6023      	str	r3, [r4, #0]
    return retval;
 80157e4:	68fb      	ldr	r3, [r7, #12]
  }
 80157e6:	4618      	mov	r0, r3
 80157e8:	3714      	adds	r7, #20
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bd90      	pop	{r4, r7, pc}

080157ee <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 80157ee:	b480      	push	{r7}
 80157f0:	b083      	sub	sp, #12
 80157f2:	af00      	add	r7, sp, #0
 80157f4:	6078      	str	r0, [r7, #4]
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	4618      	mov	r0, r3
 80157fa:	370c      	adds	r7, #12
 80157fc:	46bd      	mov	sp, r7
 80157fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015802:	4770      	bx	lr

08015804 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8015804:	b580      	push	{r7, lr}
 8015806:	b084      	sub	sp, #16
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801580c:	f107 030c 	add.w	r3, r7, #12
 8015810:	4618      	mov	r0, r3
 8015812:	f7ff ffb7 	bl	8015784 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015816:	4602      	mov	r2, r0
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	6013      	str	r3, [r2, #0]
    return retval;
 801581c:	68fb      	ldr	r3, [r7, #12]
  }
 801581e:	4618      	mov	r0, r3
 8015820:	3710      	adds	r7, #16
 8015822:	46bd      	mov	sp, r7
 8015824:	bd80      	pop	{r7, pc}

08015826 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 8015826:	b580      	push	{r7, lr}
 8015828:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801582a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801582e:	f000 f803 	bl	8015838 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8015832:	4603      	mov	r3, r0
  }
 8015834:	4618      	mov	r0, r3
 8015836:	bd80      	pop	{r7, pc}

08015838 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8015838:	b590      	push	{r4, r7, lr}
 801583a:	b085      	sub	sp, #20
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8015840:	f107 030c 	add.w	r3, r7, #12
 8015844:	4618      	mov	r0, r3
 8015846:	f7ff ffd2 	bl	80157ee <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801584a:	4604      	mov	r4, r0
 801584c:	6878      	ldr	r0, [r7, #4]
 801584e:	f7fd fa09 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015852:	4603      	mov	r3, r0
 8015854:	6023      	str	r3, [r4, #0]
    return retval;
 8015856:	68fb      	ldr	r3, [r7, #12]
  }
 8015858:	4618      	mov	r0, r3
 801585a:	3714      	adds	r7, #20
 801585c:	46bd      	mov	sp, r7
 801585e:	bd90      	pop	{r4, r7, pc}

08015860 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8015860:	b590      	push	{r4, r7, lr}
 8015862:	b083      	sub	sp, #12
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
 8015868:	6039      	str	r1, [r7, #0]
 801586a:	1d3b      	adds	r3, r7, #4
 801586c:	4618      	mov	r0, r3
 801586e:	f7ff ffbe 	bl	80157ee <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015872:	4603      	mov	r3, r0
 8015874:	681c      	ldr	r4, [r3, #0]
 8015876:	463b      	mov	r3, r7
 8015878:	4618      	mov	r0, r3
 801587a:	f7ff ffb8 	bl	80157ee <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801587e:	4603      	mov	r3, r0
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	4619      	mov	r1, r3
 8015884:	4620      	mov	r0, r4
 8015886:	f7fd fd9b 	bl	80133c0 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801588a:	4603      	mov	r3, r0
 801588c:	4618      	mov	r0, r3
 801588e:	f7ff fde8 	bl	8015462 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015892:	4603      	mov	r3, r0
 8015894:	4618      	mov	r0, r3
 8015896:	370c      	adds	r7, #12
 8015898:	46bd      	mov	sp, r7
 801589a:	bd90      	pop	{r4, r7, pc}

0801589c <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 801589c:	b590      	push	{r4, r7, lr}
 801589e:	b083      	sub	sp, #12
 80158a0:	af00      	add	r7, sp, #0
 80158a2:	6078      	str	r0, [r7, #4]
 80158a4:	6039      	str	r1, [r7, #0]
 80158a6:	1d3b      	adds	r3, r7, #4
 80158a8:	4618      	mov	r0, r3
 80158aa:	f7ff ffa0 	bl	80157ee <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80158ae:	4603      	mov	r3, r0
 80158b0:	681c      	ldr	r4, [r3, #0]
 80158b2:	463b      	mov	r3, r7
 80158b4:	4618      	mov	r0, r3
 80158b6:	f7ff ff9a 	bl	80157ee <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80158ba:	4603      	mov	r3, r0
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	4619      	mov	r1, r3
 80158c0:	4620      	mov	r0, r4
 80158c2:	f7fd f9da 	bl	8012c7a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80158c6:	4603      	mov	r3, r0
 80158c8:	4618      	mov	r0, r3
 80158ca:	f7ff fdca 	bl	8015462 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80158ce:	4603      	mov	r3, r0
 80158d0:	4618      	mov	r0, r3
 80158d2:	370c      	adds	r7, #12
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd90      	pop	{r4, r7, pc}

080158d8 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80158d8:	b5b0      	push	{r4, r5, r7, lr}
 80158da:	b084      	sub	sp, #16
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80158e0:	1d3b      	adds	r3, r7, #4
 80158e2:	4618      	mov	r0, r3
 80158e4:	f7ff ff83 	bl	80157ee <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80158e8:	4603      	mov	r3, r0
 80158ea:	681d      	ldr	r5, [r3, #0]
 80158ec:	f107 030c 	add.w	r3, r7, #12
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7fd fc29 	bl	8013148 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80158f6:	4604      	mov	r4, r0
 80158f8:	4628      	mov	r0, r5
 80158fa:	f000 f825 	bl	8015948 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 80158fe:	4603      	mov	r3, r0
 8015900:	6023      	str	r3, [r4, #0]
  return result;
 8015902:	68fb      	ldr	r3, [r7, #12]
}
 8015904:	4618      	mov	r0, r3
 8015906:	3710      	adds	r7, #16
 8015908:	46bd      	mov	sp, r7
 801590a:	bdb0      	pop	{r4, r5, r7, pc}

0801590c <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 801590c:	b580      	push	{r7, lr}
 801590e:	b082      	sub	sp, #8
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
 8015914:	1d3b      	adds	r3, r7, #4
 8015916:	4618      	mov	r0, r3
 8015918:	f7ff ff69 	bl	80157ee <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801591c:	4603      	mov	r3, r0
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	4618      	mov	r0, r3
 8015922:	f7fe fda8 	bl	8014476 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 8015926:	4603      	mov	r3, r0
 8015928:	4618      	mov	r0, r3
 801592a:	3708      	adds	r7, #8
 801592c:	46bd      	mov	sp, r7
 801592e:	bd80      	pop	{r7, pc}

08015930 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8015930:	b580      	push	{r7, lr}
 8015932:	b082      	sub	sp, #8
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8015938:	6878      	ldr	r0, [r7, #4]
 801593a:	f000 f811 	bl	8015960 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 801593e:	4603      	mov	r3, r0
}
 8015940:	4618      	mov	r0, r3
 8015942:	3708      	adds	r7, #8
 8015944:	46bd      	mov	sp, r7
 8015946:	bd80      	pop	{r7, pc}

08015948 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8015948:	b580      	push	{r7, lr}
 801594a:	b082      	sub	sp, #8
 801594c:	af00      	add	r7, sp, #0
 801594e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8015950:	6878      	ldr	r0, [r7, #4]
 8015952:	f000 f813 	bl	801597c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 8015956:	4603      	mov	r3, r0
}
 8015958:	4618      	mov	r0, r3
 801595a:	3708      	adds	r7, #8
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}

08015960 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8015960:	b580      	push	{r7, lr}
 8015962:	b082      	sub	sp, #8
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8015968:	210c      	movs	r1, #12
 801596a:	6878      	ldr	r0, [r7, #4]
 801596c:	f7fc fdb6 	bl	80124dc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015970:	4603      	mov	r3, r0
  }
 8015972:	4618      	mov	r0, r3
 8015974:	3708      	adds	r7, #8
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}
	...

0801597c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801597c:	b580      	push	{r7, lr}
 801597e:	b08a      	sub	sp, #40	; 0x28
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8015984:	f7fc f925 	bl	8011bd2 <_ZNSt14numeric_limitsIlE3minEv>
 8015988:	4603      	mov	r3, r0
 801598a:	4618      	mov	r0, r3
 801598c:	f7fd f96a 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015990:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8015992:	f7fb fb8f 	bl	80110b4 <_ZNSt14numeric_limitsIlE3maxEv>
 8015996:	4603      	mov	r3, r0
 8015998:	4618      	mov	r0, r3
 801599a:	f7fd f963 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801599e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 80159a0:	2320      	movs	r3, #32
 80159a2:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 80159a4:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 80159a8:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 80159aa:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 80159ae:	f7fd f959 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80159b2:	4603      	mov	r3, r0
 80159b4:	4619      	mov	r1, r3
 80159b6:	6878      	ldr	r0, [r7, #4]
 80159b8:	f7fd f99e 	bl	8012cf8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80159bc:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80159be:	480f      	ldr	r0, [pc, #60]	; (80159fc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 80159c0:	f7fd f950 	bl	8012c64 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80159c4:	4603      	mov	r3, r0
 80159c6:	4619      	mov	r1, r3
 80159c8:	6878      	ldr	r0, [r7, #4]
 80159ca:	f7fd f973 	bl	8012cb4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80159ce:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80159d0:	2105      	movs	r1, #5
 80159d2:	6878      	ldr	r0, [r7, #4]
 80159d4:	f7fd fdd8 	bl	8013588 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80159d8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80159da:	68fa      	ldr	r2, [r7, #12]
 80159dc:	6a39      	ldr	r1, [r7, #32]
 80159de:	6978      	ldr	r0, [r7, #20]
 80159e0:	f7fd fe16 	bl	8013610 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80159e4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 80159e6:	68fa      	ldr	r2, [r7, #12]
 80159e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80159ea:	6938      	ldr	r0, [r7, #16]
 80159ec:	f7fd fe10 	bl	8013610 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80159f0:	60f8      	str	r0, [r7, #12]
    return result;
 80159f2:	68fb      	ldr	r3, [r7, #12]
  }
 80159f4:	4618      	mov	r0, r3
 80159f6:	3728      	adds	r7, #40	; 0x28
 80159f8:	46bd      	mov	sp, r7
 80159fa:	bd80      	pop	{r7, pc}
 80159fc:	fc000001 	.word	0xfc000001

08015a00 <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 8015a00:	b580      	push	{r7, lr}
 8015a02:	ed2d 8b02 	vpush	{d8}
 8015a06:	b094      	sub	sp, #80	; 0x50
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6178      	str	r0, [r7, #20]
 8015a0c:	ed87 0a04 	vstr	s0, [r7, #16]
 8015a10:	edc7 0a03 	vstr	s1, [r7, #12]
 8015a14:	60b9      	str	r1, [r7, #8]
 8015a16:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 8015a18:	ed97 7a03 	vldr	s14, [r7, #12]
 8015a1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8015a20:	ee77 6a67 	vsub.f32	s13, s14, s15
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	3b01      	subs	r3, #1
 8015a28:	ee07 3a90 	vmov	s15, r3
 8015a2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015a34:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 8015a38:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8015a3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8015a40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015a44:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 8015a48:	2300      	movs	r3, #0
 8015a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	3b01      	subs	r3, #1
 8015a50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015a52:	429a      	cmp	r2, r3
 8015a54:	f280 80c0 	bge.w	8015bd8 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 8015a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a5a:	ee07 3a90 	vmov	s15, r3
 8015a5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015a62:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8015a66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015a6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8015a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a72:	697b      	ldr	r3, [r7, #20]
 8015a74:	eeb0 0a67 	vmov.f32	s0, s15
 8015a78:	4798      	blx	r3
 8015a7a:	eef0 7a40 	vmov.f32	s15, s0
 8015a7e:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8015c50 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8015a82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015a86:	eeb0 0a67 	vmov.f32	s0, s15
 8015a8a:	f7fb fcde 	bl	801144a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8015a8e:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 8015a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a94:	3301      	adds	r3, #1
 8015a96:	ee07 3a90 	vmov	s15, r3
 8015a9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015a9e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8015aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015aa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8015aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015aae:	697b      	ldr	r3, [r7, #20]
 8015ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8015ab4:	4798      	blx	r3
 8015ab6:	eef0 7a40 	vmov.f32	s15, s0
 8015aba:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8015c50 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8015abe:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 8015ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ac4:	ee07 3a90 	vmov	s15, r3
 8015ac8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015acc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8015ad0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015ad4:	edd7 7a04 	vldr	s15, [r7, #16]
 8015ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015adc:	697b      	ldr	r3, [r7, #20]
 8015ade:	eeb0 0a67 	vmov.f32	s0, s15
 8015ae2:	4798      	blx	r3
 8015ae4:	eef0 7a40 	vmov.f32	s15, s0
 8015ae8:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8015c50 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8015aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015af0:	eeb0 0a67 	vmov.f32	s0, s15
 8015af4:	f7fb fca9 	bl	801144a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8015af8:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 8015afc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8015b00:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8015b04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015b08:	eeb0 0a47 	vmov.f32	s0, s14
 8015b0c:	f7fb fc9d 	bl	801144a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8015b10:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 8015b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b16:	ee07 3a90 	vmov	s15, r3
 8015b1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015b1e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8015b22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015b26:	edd7 7a04 	vldr	s15, [r7, #16]
 8015b2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015b2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8015b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b36:	697b      	ldr	r3, [r7, #20]
 8015b38:	eeb0 0a67 	vmov.f32	s0, s15
 8015b3c:	4798      	blx	r3
 8015b3e:	eef0 7a40 	vmov.f32	s15, s0
 8015b42:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8015c50 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8015b46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8015b4e:	f7fb fc7c 	bl	801144a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8015b52:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 8015b56:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8015b5a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b62:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 8015b66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8015b6a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8015b6e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015b72:	eeb0 0a47 	vmov.f32	s0, s14
 8015b76:	f7fb fc68 	bl	801144a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8015b7a:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 8015b7e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8015b82:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b8a:	edc7 7a06 	vstr	s15, [r7, #24]
 8015b8e:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8015b92:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 8015b94:	f107 021c 	add.w	r2, r7, #28
 8015b98:	f107 0318 	add.w	r3, r7, #24
 8015b9c:	4611      	mov	r1, r2
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	f7fb fc26 	bl	80113f0 <_ZSt3maxIfERKT_S2_S2_>
 8015ba4:	4602      	mov	r2, r0
 8015ba6:	4b2b      	ldr	r3, [pc, #172]	; (8015c54 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 8015ba8:	623b      	str	r3, [r7, #32]
 8015baa:	f107 0320 	add.w	r3, r7, #32
 8015bae:	4619      	mov	r1, r3
 8015bb0:	4610      	mov	r0, r2
 8015bb2:	f7fb fc04 	bl	80113be <_ZSt3minIfERKT_S2_S2_>
 8015bb6:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 8015bb8:	edd3 7a00 	vldr	s15, [r3]
 8015bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bbe:	005b      	lsls	r3, r3, #1
 8015bc0:	68ba      	ldr	r2, [r7, #8]
 8015bc2:	4413      	add	r3, r2
 8015bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015bc8:	ee17 2a90 	vmov	r2, s15
 8015bcc:	b212      	sxth	r2, r2
 8015bce:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 8015bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bd2:	3301      	adds	r3, #1
 8015bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015bd6:	e739      	b.n	8015a4c <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 8015bd8:	697b      	ldr	r3, [r7, #20]
 8015bda:	ed97 0a03 	vldr	s0, [r7, #12]
 8015bde:	4798      	blx	r3
 8015be0:	eef0 7a40 	vmov.f32	s15, s0
 8015be4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8015c50 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8015be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015bec:	eeb0 0a67 	vmov.f32	s0, s15
 8015bf0:	f7fb fc2b 	bl	801144a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8015bf4:	eef0 7a40 	vmov.f32	s15, s0
 8015bf8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8015bfc:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8015c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8015c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015c0a:	4611      	mov	r1, r2
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f7fb fbef 	bl	80113f0 <_ZSt3maxIfERKT_S2_S2_>
 8015c12:	4602      	mov	r2, r0
 8015c14:	4b0f      	ldr	r3, [pc, #60]	; (8015c54 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 8015c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015c1c:	4619      	mov	r1, r3
 8015c1e:	4610      	mov	r0, r2
 8015c20:	f7fb fbcd 	bl	80113be <_ZSt3minIfERKT_S2_S2_>
 8015c24:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 8015c26:	edd3 7a00 	vldr	s15, [r3]
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015c30:	3b01      	subs	r3, #1
 8015c32:	005b      	lsls	r3, r3, #1
 8015c34:	68ba      	ldr	r2, [r7, #8]
 8015c36:	4413      	add	r3, r2
 8015c38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015c3c:	ee17 2a90 	vmov	r2, s15
 8015c40:	b212      	sxth	r2, r2
 8015c42:	801a      	strh	r2, [r3, #0]
}
 8015c44:	bf00      	nop
 8015c46:	3750      	adds	r7, #80	; 0x50
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	ecbd 8b02 	vpop	{d8}
 8015c4e:	bd80      	pop	{r7, pc}
 8015c50:	47000000 	.word	0x47000000
 8015c54:	46fffe00 	.word	0x46fffe00

08015c58 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8015c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015c5c:	b090      	sub	sp, #64	; 0x40
 8015c5e:	af06      	add	r7, sp, #24
 8015c60:	60f8      	str	r0, [r7, #12]
 8015c62:	60b9      	str	r1, [r7, #8]
 8015c64:	607a      	str	r2, [r7, #4]
 8015c66:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8015c68:	68bb      	ldr	r3, [r7, #8]
 8015c6a:	781b      	ldrb	r3, [r3, #0]
 8015c6c:	2b09      	cmp	r3, #9
 8015c6e:	d004      	beq.n	8015c7a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 8015c70:	68bb      	ldr	r3, [r7, #8]
 8015c72:	781b      	ldrb	r3, [r3, #0]
 8015c74:	2b07      	cmp	r3, #7
 8015c76:	f040 81b6 	bne.w	8015fe6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 8015c7a:	68bb      	ldr	r3, [r7, #8]
 8015c7c:	781b      	ldrb	r3, [r3, #0]
 8015c7e:	2b07      	cmp	r3, #7
 8015c80:	d156      	bne.n	8015d30 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	691b      	ldr	r3, [r3, #16]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d011      	beq.n	8015cae <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	695c      	ldr	r4, [r3, #20]
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	691b      	ldr	r3, [r3, #16]
 8015c92:	2200      	movs	r2, #0
 8015c94:	9203      	str	r2, [sp, #12]
 8015c96:	9302      	str	r3, [sp, #8]
 8015c98:	4ba1      	ldr	r3, [pc, #644]	; (8015f20 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 8015c9a:	9301      	str	r3, [sp, #4]
 8015c9c:	4ba1      	ldr	r3, [pc, #644]	; (8015f24 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8015c9e:	9300      	str	r3, [sp, #0]
 8015ca0:	2325      	movs	r3, #37	; 0x25
 8015ca2:	4aa1      	ldr	r2, [pc, #644]	; (8015f28 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015ca4:	49a1      	ldr	r1, [pc, #644]	; (8015f2c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8015ca6:	68f8      	ldr	r0, [r7, #12]
 8015ca8:	47a0      	blx	r4
 8015caa:	2301      	movs	r3, #1
 8015cac:	e1e0      	b.n	8016070 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	edd3 7a03 	vldr	s15, [r3, #12]
 8015cb4:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8015f30 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8015cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cc0:	dd07      	ble.n	8015cd2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	edd3 7a03 	vldr	s15, [r3, #12]
 8015cc8:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8015f30 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8015ccc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015cd0:	e006      	b.n	8015ce0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	edd3 7a03 	vldr	s15, [r3, #12]
 8015cd8:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8015f30 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8015cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ce0:	edc7 7a08 	vstr	s15, [r7, #32]
 8015ce4:	edd7 7a08 	vldr	s15, [r7, #32]
 8015ce8:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8015f34 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 8015cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cf4:	f340 80dd 	ble.w	8015eb2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	695c      	ldr	r4, [r3, #20]
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	68db      	ldr	r3, [r3, #12]
 8015d00:	4618      	mov	r0, r3
 8015d02:	f7ea fc2b 	bl	800055c <__aeabi_f2d>
 8015d06:	4602      	mov	r2, r0
 8015d08:	460b      	mov	r3, r1
 8015d0a:	f04f 0000 	mov.w	r0, #0
 8015d0e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8015d12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015d16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015d1a:	4b87      	ldr	r3, [pc, #540]	; (8015f38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 8015d1c:	9301      	str	r3, [sp, #4]
 8015d1e:	4b87      	ldr	r3, [pc, #540]	; (8015f3c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8015d20:	9300      	str	r3, [sp, #0]
 8015d22:	2326      	movs	r3, #38	; 0x26
 8015d24:	4a80      	ldr	r2, [pc, #512]	; (8015f28 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015d26:	4986      	ldr	r1, [pc, #536]	; (8015f40 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8015d28:	68f8      	ldr	r0, [r7, #12]
 8015d2a:	47a0      	blx	r4
 8015d2c:	2301      	movs	r3, #1
 8015d2e:	e19f      	b.n	8016070 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 8015d30:	68bb      	ldr	r3, [r7, #8]
 8015d32:	781b      	ldrb	r3, [r3, #0]
 8015d34:	2b09      	cmp	r3, #9
 8015d36:	d018      	beq.n	8015d6a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	695c      	ldr	r4, [r3, #20]
 8015d3c:	68bb      	ldr	r3, [r7, #8]
 8015d3e:	781b      	ldrb	r3, [r3, #0]
 8015d40:	4618      	mov	r0, r3
 8015d42:	f7fb f93b 	bl	8010fbc <TfLiteTypeGetName>
 8015d46:	4605      	mov	r5, r0
 8015d48:	2009      	movs	r0, #9
 8015d4a:	f7fb f937 	bl	8010fbc <TfLiteTypeGetName>
 8015d4e:	4603      	mov	r3, r0
 8015d50:	9303      	str	r3, [sp, #12]
 8015d52:	9502      	str	r5, [sp, #8]
 8015d54:	4b7b      	ldr	r3, [pc, #492]	; (8015f44 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8015d56:	9301      	str	r3, [sp, #4]
 8015d58:	4b7b      	ldr	r3, [pc, #492]	; (8015f48 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 8015d5a:	9300      	str	r3, [sp, #0]
 8015d5c:	2329      	movs	r3, #41	; 0x29
 8015d5e:	4a72      	ldr	r2, [pc, #456]	; (8015f28 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015d60:	497a      	ldr	r1, [pc, #488]	; (8015f4c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8015d62:	68f8      	ldr	r0, [r7, #12]
 8015d64:	47a0      	blx	r4
 8015d66:	2301      	movs	r3, #1
 8015d68:	e182      	b.n	8016070 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	781b      	ldrb	r3, [r3, #0]
 8015d6e:	2b07      	cmp	r3, #7
 8015d70:	d155      	bne.n	8015e1e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	691b      	ldr	r3, [r3, #16]
 8015d76:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015d7a:	d011      	beq.n	8015da0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	695c      	ldr	r4, [r3, #20]
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	691b      	ldr	r3, [r3, #16]
 8015d84:	4a72      	ldr	r2, [pc, #456]	; (8015f50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8015d86:	9203      	str	r2, [sp, #12]
 8015d88:	9302      	str	r3, [sp, #8]
 8015d8a:	4b72      	ldr	r3, [pc, #456]	; (8015f54 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 8015d8c:	9301      	str	r3, [sp, #4]
 8015d8e:	4b65      	ldr	r3, [pc, #404]	; (8015f24 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8015d90:	9300      	str	r3, [sp, #0]
 8015d92:	232b      	movs	r3, #43	; 0x2b
 8015d94:	4a64      	ldr	r2, [pc, #400]	; (8015f28 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015d96:	4965      	ldr	r1, [pc, #404]	; (8015f2c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8015d98:	68f8      	ldr	r0, [r7, #12]
 8015d9a:	47a0      	blx	r4
 8015d9c:	2301      	movs	r3, #1
 8015d9e:	e167      	b.n	8016070 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	edd3 7a03 	vldr	s15, [r3, #12]
 8015da6:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8015f58 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8015daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015db2:	dd07      	ble.n	8015dc4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	edd3 7a03 	vldr	s15, [r3, #12]
 8015dba:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8015f58 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8015dbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015dc2:	e006      	b.n	8015dd2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8015dca:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8015f58 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8015dce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015dd2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8015dd6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015dda:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8015f5c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 8015dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015de6:	dd64      	ble.n	8015eb2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	695c      	ldr	r4, [r3, #20]
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	68db      	ldr	r3, [r3, #12]
 8015df0:	4618      	mov	r0, r3
 8015df2:	f7ea fbb3 	bl	800055c <__aeabi_f2d>
 8015df6:	4602      	mov	r2, r0
 8015df8:	460b      	mov	r3, r1
 8015dfa:	f04f 0000 	mov.w	r0, #0
 8015dfe:	4958      	ldr	r1, [pc, #352]	; (8015f60 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 8015e00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015e04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015e08:	4b56      	ldr	r3, [pc, #344]	; (8015f64 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 8015e0a:	9301      	str	r3, [sp, #4]
 8015e0c:	4b4b      	ldr	r3, [pc, #300]	; (8015f3c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8015e0e:	9300      	str	r3, [sp, #0]
 8015e10:	232c      	movs	r3, #44	; 0x2c
 8015e12:	4a45      	ldr	r2, [pc, #276]	; (8015f28 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015e14:	494a      	ldr	r1, [pc, #296]	; (8015f40 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8015e16:	68f8      	ldr	r0, [r7, #12]
 8015e18:	47a0      	blx	r4
 8015e1a:	2301      	movs	r3, #1
 8015e1c:	e128      	b.n	8016070 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	781b      	ldrb	r3, [r3, #0]
 8015e22:	2b09      	cmp	r3, #9
 8015e24:	d018      	beq.n	8015e58 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	695c      	ldr	r4, [r3, #20]
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	781b      	ldrb	r3, [r3, #0]
 8015e2e:	4618      	mov	r0, r3
 8015e30:	f7fb f8c4 	bl	8010fbc <TfLiteTypeGetName>
 8015e34:	4605      	mov	r5, r0
 8015e36:	2009      	movs	r0, #9
 8015e38:	f7fb f8c0 	bl	8010fbc <TfLiteTypeGetName>
 8015e3c:	4603      	mov	r3, r0
 8015e3e:	9303      	str	r3, [sp, #12]
 8015e40:	9502      	str	r5, [sp, #8]
 8015e42:	4b40      	ldr	r3, [pc, #256]	; (8015f44 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8015e44:	9301      	str	r3, [sp, #4]
 8015e46:	4b48      	ldr	r3, [pc, #288]	; (8015f68 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 8015e48:	9300      	str	r3, [sp, #0]
 8015e4a:	232f      	movs	r3, #47	; 0x2f
 8015e4c:	4a36      	ldr	r2, [pc, #216]	; (8015f28 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015e4e:	493f      	ldr	r1, [pc, #252]	; (8015f4c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8015e50:	68f8      	ldr	r0, [r7, #12]
 8015e52:	47a0      	blx	r4
 8015e54:	2301      	movs	r3, #1
 8015e56:	e10b      	b.n	8016070 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	691b      	ldr	r3, [r3, #16]
 8015e5c:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8015e60:	d012      	beq.n	8015e88 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	695c      	ldr	r4, [r3, #20]
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	691b      	ldr	r3, [r3, #16]
 8015e6a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8015e6e:	9203      	str	r2, [sp, #12]
 8015e70:	9302      	str	r3, [sp, #8]
 8015e72:	4b3e      	ldr	r3, [pc, #248]	; (8015f6c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 8015e74:	9301      	str	r3, [sp, #4]
 8015e76:	4b2b      	ldr	r3, [pc, #172]	; (8015f24 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8015e78:	9300      	str	r3, [sp, #0]
 8015e7a:	2330      	movs	r3, #48	; 0x30
 8015e7c:	4a2a      	ldr	r2, [pc, #168]	; (8015f28 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015e7e:	492b      	ldr	r1, [pc, #172]	; (8015f2c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8015e80:	68f8      	ldr	r0, [r7, #12]
 8015e82:	47a0      	blx	r4
 8015e84:	2301      	movs	r3, #1
 8015e86:	e0f3      	b.n	8016070 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8015e8e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8015f70 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 8015e92:	eef4 7a47 	vcmp.f32	s15, s14
 8015e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e9a:	d00a      	beq.n	8015eb2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	695c      	ldr	r4, [r3, #20]
 8015ea0:	4b34      	ldr	r3, [pc, #208]	; (8015f74 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 8015ea2:	9300      	str	r3, [sp, #0]
 8015ea4:	2331      	movs	r3, #49	; 0x31
 8015ea6:	4a20      	ldr	r2, [pc, #128]	; (8015f28 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015ea8:	4933      	ldr	r1, [pc, #204]	; (8015f78 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 8015eaa:	68f8      	ldr	r0, [r7, #12]
 8015eac:	47a0      	blx	r4
 8015eae:	2301      	movs	r3, #1
 8015eb0:	e0de      	b.n	8016070 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 8015eb2:	68bb      	ldr	r3, [r7, #8]
 8015eb4:	781b      	ldrb	r3, [r3, #0]
 8015eb6:	2b07      	cmp	r3, #7
 8015eb8:	d160      	bne.n	8015f7c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 8015eba:	68bb      	ldr	r3, [r7, #8]
 8015ebc:	68db      	ldr	r3, [r3, #12]
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	f7ea fb4c 	bl	800055c <__aeabi_f2d>
 8015ec4:	4604      	mov	r4, r0
 8015ec6:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 8015ec8:	683b      	ldr	r3, [r7, #0]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f7ea fb45 	bl	800055c <__aeabi_f2d>
 8015ed2:	4602      	mov	r2, r0
 8015ed4:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 8015ed6:	4620      	mov	r0, r4
 8015ed8:	4629      	mov	r1, r5
 8015eda:	f7ea fb97 	bl	800060c <__aeabi_dmul>
 8015ede:	4602      	mov	r2, r0
 8015ee0:	460b      	mov	r3, r1
 8015ee2:	4610      	mov	r0, r2
 8015ee4:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 8015ee6:	a30c      	add	r3, pc, #48	; (adr r3, 8015f18 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8015ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eec:	f7ea fcb8 	bl	8000860 <__aeabi_ddiv>
 8015ef0:	4602      	mov	r2, r0
 8015ef2:	460b      	mov	r3, r1
 8015ef4:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 8015ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015efa:	3308      	adds	r3, #8
 8015efc:	f107 0214 	add.w	r2, r7, #20
 8015f00:	4611      	mov	r1, r2
 8015f02:	4618      	mov	r0, r3
 8015f04:	ed97 0b06 	vldr	d0, [r7, #24]
 8015f08:	f7fb f8de 	bl	80110c8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 8015f0c:	697a      	ldr	r2, [r7, #20]
 8015f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f10:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 8015f12:	e0ac      	b.n	801606e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 8015f14:	f3af 8000 	nop.w
 8015f18:	00140014 	.word	0x00140014
 8015f1c:	3f240014 	.word	0x3f240014
 8015f20:	0801e86c 	.word	0x0801e86c
 8015f24:	0801e870 	.word	0x0801e870
 8015f28:	0801e7b8 	.word	0x0801e7b8
 8015f2c:	0801e850 	.word	0x0801e850
 8015f30:	38000000 	.word	0x38000000
 8015f34:	3303126f 	.word	0x3303126f
 8015f38:	0801e8ac 	.word	0x0801e8ac
 8015f3c:	0801e8b8 	.word	0x0801e8b8
 8015f40:	0801e88c 	.word	0x0801e88c
 8015f44:	0801e8ec 	.word	0x0801e8ec
 8015f48:	0801e8f8 	.word	0x0801e8f8
 8015f4c:	0801e8d0 	.word	0x0801e8d0
 8015f50:	ffff8000 	.word	0xffff8000
 8015f54:	0801e904 	.word	0x0801e904
 8015f58:	37800000 	.word	0x37800000
 8015f5c:	3283126f 	.word	0x3283126f
 8015f60:	3ef00000 	.word	0x3ef00000
 8015f64:	0801e90c 	.word	0x0801e90c
 8015f68:	0801e918 	.word	0x0801e918
 8015f6c:	0801e928 	.word	0x0801e928
 8015f70:	3b800000 	.word	0x3b800000
 8015f74:	0801e948 	.word	0x0801e948
 8015f78:	0801e930 	.word	0x0801e930
          static_cast<double>(params->beta),
 8015f7c:	683b      	ldr	r3, [r7, #0]
 8015f7e:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 8015f80:	4618      	mov	r0, r3
 8015f82:	f7ea faeb 	bl	800055c <__aeabi_f2d>
 8015f86:	4680      	mov	r8, r0
 8015f88:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 8015f8a:	68bb      	ldr	r3, [r7, #8]
 8015f8c:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 8015f8e:	4618      	mov	r0, r3
 8015f90:	f7ea fae4 	bl	800055c <__aeabi_f2d>
 8015f94:	4682      	mov	sl, r0
 8015f96:	468b      	mov	fp, r1
 8015f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f9a:	3308      	adds	r3, #8
 8015f9c:	f107 0210 	add.w	r2, r7, #16
 8015fa0:	4619      	mov	r1, r3
 8015fa2:	2005      	movs	r0, #5
 8015fa4:	ec4b ab11 	vmov	d1, sl, fp
 8015fa8:	ec49 8b10 	vmov	d0, r8, r9
 8015fac:	f7fb f958 	bl	8011260 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 8015fb0:	693a      	ldr	r2, [r7, #16]
 8015fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015fb4:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 8015fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015fb8:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 8015fba:	221f      	movs	r2, #31
 8015fbc:	4619      	mov	r1, r3
 8015fbe:	2005      	movs	r0, #5
 8015fc0:	f7fb f996 	bl	80112f0 <_ZN6tflite20CalculateInputRadiusEiii>
 8015fc4:	4603      	mov	r3, r0
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f7ea fab6 	bl	8000538 <__aeabi_i2d>
 8015fcc:	4602      	mov	r2, r0
 8015fce:	460b      	mov	r3, r1
 8015fd0:	4614      	mov	r4, r2
 8015fd2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 8015fd6:	4620      	mov	r0, r4
 8015fd8:	4629      	mov	r1, r5
 8015fda:	f7ea fdc7 	bl	8000b6c <__aeabi_d2iz>
 8015fde:	4602      	mov	r2, r0
 8015fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015fe2:	619a      	str	r2, [r3, #24]
    }
 8015fe4:	e043      	b.n	801606e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 8015fe6:	68bb      	ldr	r3, [r7, #8]
 8015fe8:	781b      	ldrb	r3, [r3, #0]
 8015fea:	2b01      	cmp	r3, #1
 8015fec:	d018      	beq.n	8016020 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	695c      	ldr	r4, [r3, #20]
 8015ff2:	68bb      	ldr	r3, [r7, #8]
 8015ff4:	781b      	ldrb	r3, [r3, #0]
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	f7fa ffe0 	bl	8010fbc <TfLiteTypeGetName>
 8015ffc:	4605      	mov	r5, r0
 8015ffe:	2001      	movs	r0, #1
 8016000:	f7fa ffdc 	bl	8010fbc <TfLiteTypeGetName>
 8016004:	4603      	mov	r3, r0
 8016006:	9303      	str	r3, [sp, #12]
 8016008:	9502      	str	r5, [sp, #8]
 801600a:	4b1c      	ldr	r3, [pc, #112]	; (801607c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801600c:	9301      	str	r3, [sp, #4]
 801600e:	4b1c      	ldr	r3, [pc, #112]	; (8016080 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 8016010:	9300      	str	r3, [sp, #0]
 8016012:	234e      	movs	r3, #78	; 0x4e
 8016014:	4a1b      	ldr	r2, [pc, #108]	; (8016084 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 8016016:	491c      	ldr	r1, [pc, #112]	; (8016088 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 8016018:	68f8      	ldr	r0, [r7, #12]
 801601a:	47a0      	blx	r4
 801601c:	2301      	movs	r3, #1
 801601e:	e027      	b.n	8016070 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	781b      	ldrb	r3, [r3, #0]
 8016024:	2b01      	cmp	r3, #1
 8016026:	d018      	beq.n	801605a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	695c      	ldr	r4, [r3, #20]
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	781b      	ldrb	r3, [r3, #0]
 8016030:	4618      	mov	r0, r3
 8016032:	f7fa ffc3 	bl	8010fbc <TfLiteTypeGetName>
 8016036:	4605      	mov	r5, r0
 8016038:	2001      	movs	r0, #1
 801603a:	f7fa ffbf 	bl	8010fbc <TfLiteTypeGetName>
 801603e:	4603      	mov	r3, r0
 8016040:	9303      	str	r3, [sp, #12]
 8016042:	9502      	str	r5, [sp, #8]
 8016044:	4b0d      	ldr	r3, [pc, #52]	; (801607c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 8016046:	9301      	str	r3, [sp, #4]
 8016048:	4b10      	ldr	r3, [pc, #64]	; (801608c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 801604a:	9300      	str	r3, [sp, #0]
 801604c:	234f      	movs	r3, #79	; 0x4f
 801604e:	4a0d      	ldr	r2, [pc, #52]	; (8016084 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 8016050:	490d      	ldr	r1, [pc, #52]	; (8016088 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 8016052:	68f8      	ldr	r0, [r7, #12]
 8016054:	47a0      	blx	r4
 8016056:	2301      	movs	r3, #1
 8016058:	e00a      	b.n	8016070 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 801605a:	683b      	ldr	r3, [r7, #0]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	4618      	mov	r0, r3
 8016060:	f7ea fa7c 	bl	800055c <__aeabi_f2d>
 8016064:	4602      	mov	r2, r0
 8016066:	460b      	mov	r3, r1
 8016068:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801606a:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 801606e:	2300      	movs	r3, #0
}
 8016070:	4618      	mov	r0, r3
 8016072:	3728      	adds	r7, #40	; 0x28
 8016074:	46bd      	mov	sp, r7
 8016076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801607a:	bf00      	nop
 801607c:	0801e96c 	.word	0x0801e96c
 8016080:	0801e8f8 	.word	0x0801e8f8
 8016084:	0801e7b8 	.word	0x0801e7b8
 8016088:	0801e8d0 	.word	0x0801e8d0
 801608c:	0801e918 	.word	0x0801e918

08016090 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 8016090:	b580      	push	{r7, lr}
 8016092:	b084      	sub	sp, #16
 8016094:	af00      	add	r7, sp, #0
 8016096:	60f8      	str	r0, [r7, #12]
 8016098:	60b9      	str	r1, [r7, #8]
 801609a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d101      	bne.n	80160a8 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 80160a4:	f004 f8c6 	bl	801a234 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160ac:	2138      	movs	r1, #56	; 0x38
 80160ae:	68f8      	ldr	r0, [r7, #12]
 80160b0:	4798      	blx	r3
 80160b2:	4603      	mov	r3, r0
}
 80160b4:	4618      	mov	r0, r3
 80160b6:	3710      	adds	r7, #16
 80160b8:	46bd      	mov	sp, r7
 80160ba:	bd80      	pop	{r7, pc}

080160bc <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 80160bc:	b580      	push	{r7, lr}
 80160be:	b082      	sub	sp, #8
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
 80160c4:	ed87 0a00 	vstr	s0, [r7]
 80160c8:	ed97 0a00 	vldr	s0, [r7]
 80160cc:	f7eb f8dc 	bl	8001288 <_ZSt3expf>
 80160d0:	eef0 7a40 	vmov.f32	s15, s0
 80160d4:	eeb0 0a67 	vmov.f32	s0, s15
 80160d8:	3708      	adds	r7, #8
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd80      	pop	{r7, pc}

080160de <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 80160de:	b580      	push	{r7, lr}
 80160e0:	b082      	sub	sp, #8
 80160e2:	af00      	add	r7, sp, #0
 80160e4:	ed87 0a01 	vstr	s0, [r7, #4]
 80160e8:	ed97 0a01 	vldr	s0, [r7, #4]
 80160ec:	2000      	movs	r0, #0
 80160ee:	f7ff ffe5 	bl	80160bc <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 80160f2:	eef0 7a40 	vmov.f32	s15, s0
 80160f6:	eeb0 0a67 	vmov.f32	s0, s15
 80160fa:	3708      	adds	r7, #8
 80160fc:	46bd      	mov	sp, r7
 80160fe:	bd80      	pop	{r7, pc}

08016100 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 8016100:	b480      	push	{r7}
 8016102:	b083      	sub	sp, #12
 8016104:	af00      	add	r7, sp, #0
 8016106:	6078      	str	r0, [r7, #4]
 8016108:	4b03      	ldr	r3, [pc, #12]	; (8016118 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 801610a:	4618      	mov	r0, r3
 801610c:	370c      	adds	r7, #12
 801610e:	46bd      	mov	sp, r7
 8016110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016114:	4770      	bx	lr
 8016116:	bf00      	nop
 8016118:	080160df 	.word	0x080160df

0801611c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 801611c:	b480      	push	{r7}
 801611e:	b083      	sub	sp, #12
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
 8016124:	ed87 0a00 	vstr	s0, [r7]
 8016128:	edd7 7a00 	vldr	s15, [r7]
 801612c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016130:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016134:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016138:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801613c:	eef0 7a66 	vmov.f32	s15, s13
 8016140:	eeb0 0a67 	vmov.f32	s0, s15
 8016144:	370c      	adds	r7, #12
 8016146:	46bd      	mov	sp, r7
 8016148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614c:	4770      	bx	lr

0801614e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 801614e:	b580      	push	{r7, lr}
 8016150:	b082      	sub	sp, #8
 8016152:	af00      	add	r7, sp, #0
 8016154:	ed87 0a01 	vstr	s0, [r7, #4]
 8016158:	ed97 0a01 	vldr	s0, [r7, #4]
 801615c:	2000      	movs	r0, #0
 801615e:	f7ff ffdd 	bl	801611c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 8016162:	eef0 7a40 	vmov.f32	s15, s0
 8016166:	eeb0 0a67 	vmov.f32	s0, s15
 801616a:	3708      	adds	r7, #8
 801616c:	46bd      	mov	sp, r7
 801616e:	bd80      	pop	{r7, pc}

08016170 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 8016170:	b480      	push	{r7}
 8016172:	b083      	sub	sp, #12
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
 8016178:	4b03      	ldr	r3, [pc, #12]	; (8016188 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 801617a:	4618      	mov	r0, r3
 801617c:	370c      	adds	r7, #12
 801617e:	46bd      	mov	sp, r7
 8016180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016184:	4770      	bx	lr
 8016186:	bf00      	nop
 8016188:	0801614f 	.word	0x0801614f

0801618c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 801618c:	b590      	push	{r4, r7, lr}
 801618e:	b08f      	sub	sp, #60	; 0x3c
 8016190:	af04      	add	r7, sp, #16
 8016192:	6078      	str	r0, [r7, #4]
 8016194:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 8016196:	6838      	ldr	r0, [r7, #0]
 8016198:	f7fc fe5c 	bl	8012e54 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801619c:	4603      	mov	r3, r0
 801619e:	2b01      	cmp	r3, #1
 80161a0:	bf14      	ite	ne
 80161a2:	2301      	movne	r3, #1
 80161a4:	2300      	moveq	r3, #0
 80161a6:	b2db      	uxtb	r3, r3
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d013      	beq.n	80161d4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	695c      	ldr	r4, [r3, #20]
 80161b0:	6838      	ldr	r0, [r7, #0]
 80161b2:	f7fc fe4f 	bl	8012e54 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80161b6:	4603      	mov	r3, r0
 80161b8:	2201      	movs	r2, #1
 80161ba:	9203      	str	r2, [sp, #12]
 80161bc:	9302      	str	r3, [sp, #8]
 80161be:	4b7c      	ldr	r3, [pc, #496]	; (80163b0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 80161c0:	9301      	str	r3, [sp, #4]
 80161c2:	4b7c      	ldr	r3, [pc, #496]	; (80163b4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 80161c4:	9300      	str	r3, [sp, #0]
 80161c6:	235d      	movs	r3, #93	; 0x5d
 80161c8:	4a7b      	ldr	r2, [pc, #492]	; (80163b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80161ca:	497c      	ldr	r1, [pc, #496]	; (80163bc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 80161cc:	6878      	ldr	r0, [r7, #4]
 80161ce:	47a0      	blx	r4
 80161d0:	2301      	movs	r3, #1
 80161d2:	e146      	b.n	8016462 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 80161d4:	6838      	ldr	r0, [r7, #0]
 80161d6:	f7fc fe4a 	bl	8012e6e <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80161da:	4603      	mov	r3, r0
 80161dc:	2b01      	cmp	r3, #1
 80161de:	bf14      	ite	ne
 80161e0:	2301      	movne	r3, #1
 80161e2:	2300      	moveq	r3, #0
 80161e4:	b2db      	uxtb	r3, r3
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d013      	beq.n	8016212 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	695c      	ldr	r4, [r3, #20]
 80161ee:	6838      	ldr	r0, [r7, #0]
 80161f0:	f7fc fe3d 	bl	8012e6e <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80161f4:	4603      	mov	r3, r0
 80161f6:	2201      	movs	r2, #1
 80161f8:	9203      	str	r2, [sp, #12]
 80161fa:	9302      	str	r3, [sp, #8]
 80161fc:	4b6c      	ldr	r3, [pc, #432]	; (80163b0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 80161fe:	9301      	str	r3, [sp, #4]
 8016200:	4b6f      	ldr	r3, [pc, #444]	; (80163c0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 8016202:	9300      	str	r3, [sp, #0]
 8016204:	235e      	movs	r3, #94	; 0x5e
 8016206:	4a6c      	ldr	r2, [pc, #432]	; (80163b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016208:	496c      	ldr	r1, [pc, #432]	; (80163bc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801620a:	6878      	ldr	r0, [r7, #4]
 801620c:	47a0      	blx	r4
 801620e:	2301      	movs	r3, #1
 8016210:	e127      	b.n	8016462 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 8016212:	2200      	movs	r2, #0
 8016214:	6839      	ldr	r1, [r7, #0]
 8016216:	6878      	ldr	r0, [r7, #4]
 8016218:	f7fb f9d8 	bl	80115cc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801621c:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 801621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016220:	2b00      	cmp	r3, #0
 8016222:	d10a      	bne.n	801623a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	695c      	ldr	r4, [r3, #20]
 8016228:	4b66      	ldr	r3, [pc, #408]	; (80163c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801622a:	9300      	str	r3, [sp, #0]
 801622c:	2360      	movs	r3, #96	; 0x60
 801622e:	4a62      	ldr	r2, [pc, #392]	; (80163b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016230:	4965      	ldr	r1, [pc, #404]	; (80163c8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8016232:	6878      	ldr	r0, [r7, #4]
 8016234:	47a0      	blx	r4
 8016236:	2301      	movs	r3, #1
 8016238:	e113      	b.n	8016462 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 801623a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801623c:	f7fb f949 	bl	80114d2 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8016240:	4603      	mov	r3, r0
 8016242:	2b00      	cmp	r3, #0
 8016244:	bfd4      	ite	le
 8016246:	2301      	movle	r3, #1
 8016248:	2300      	movgt	r3, #0
 801624a:	b2db      	uxtb	r3, r3
 801624c:	2b00      	cmp	r3, #0
 801624e:	d00a      	beq.n	8016266 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	695c      	ldr	r4, [r3, #20]
 8016254:	4b5d      	ldr	r3, [pc, #372]	; (80163cc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8016256:	9300      	str	r3, [sp, #0]
 8016258:	2361      	movs	r3, #97	; 0x61
 801625a:	4a57      	ldr	r2, [pc, #348]	; (80163b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801625c:	495a      	ldr	r1, [pc, #360]	; (80163c8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801625e:	6878      	ldr	r0, [r7, #4]
 8016260:	47a0      	blx	r4
 8016262:	2301      	movs	r3, #1
 8016264:	e0fd      	b.n	8016462 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 8016266:	2200      	movs	r2, #0
 8016268:	6839      	ldr	r1, [r7, #0]
 801626a:	6878      	ldr	r0, [r7, #4]
 801626c:	f7fb f9be 	bl	80115ec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8016270:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 8016272:	6a3b      	ldr	r3, [r7, #32]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d10a      	bne.n	801628e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	695c      	ldr	r4, [r3, #20]
 801627c:	4b54      	ldr	r3, [pc, #336]	; (80163d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801627e:	9300      	str	r3, [sp, #0]
 8016280:	2363      	movs	r3, #99	; 0x63
 8016282:	4a4d      	ldr	r2, [pc, #308]	; (80163b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016284:	4950      	ldr	r1, [pc, #320]	; (80163c8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8016286:	6878      	ldr	r0, [r7, #4]
 8016288:	47a0      	blx	r4
 801628a:	2301      	movs	r3, #1
 801628c:	e0e9      	b.n	8016462 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 801628e:	683b      	ldr	r3, [r7, #0]
 8016290:	691b      	ldr	r3, [r3, #16]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d10a      	bne.n	80162ac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	695c      	ldr	r4, [r3, #20]
 801629a:	4b4e      	ldr	r3, [pc, #312]	; (80163d4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 801629c:	9300      	str	r3, [sp, #0]
 801629e:	2365      	movs	r3, #101	; 0x65
 80162a0:	4a45      	ldr	r2, [pc, #276]	; (80163b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80162a2:	4949      	ldr	r1, [pc, #292]	; (80163c8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80162a4:	6878      	ldr	r0, [r7, #4]
 80162a6:	47a0      	blx	r4
 80162a8:	2301      	movs	r3, #1
 80162aa:	e0da      	b.n	8016462 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 80162ac:	683b      	ldr	r3, [r7, #0]
 80162ae:	691b      	ldr	r3, [r3, #16]
 80162b0:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 80162b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162b4:	781b      	ldrb	r3, [r3, #0]
 80162b6:	2b07      	cmp	r3, #7
 80162b8:	d12f      	bne.n	801631a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162be:	f240 4102 	movw	r1, #1026	; 0x402
 80162c2:	6878      	ldr	r0, [r7, #4]
 80162c4:	4798      	blx	r3
 80162c6:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 80162c8:	69bb      	ldr	r3, [r7, #24]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d10a      	bne.n	80162e4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	695c      	ldr	r4, [r3, #20]
 80162d2:	4b41      	ldr	r3, [pc, #260]	; (80163d8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 80162d4:	9300      	str	r3, [sp, #0]
 80162d6:	236b      	movs	r3, #107	; 0x6b
 80162d8:	4a37      	ldr	r2, [pc, #220]	; (80163b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80162da:	493b      	ldr	r1, [pc, #236]	; (80163c8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80162dc:	6878      	ldr	r0, [r7, #4]
 80162de:	47a0      	blx	r4
 80162e0:	2301      	movs	r3, #1
 80162e2:	e0be      	b.n	8016462 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 80162e4:	69fb      	ldr	r3, [r7, #28]
 80162e6:	69ba      	ldr	r2, [r7, #24]
 80162e8:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162ee:	f240 4102 	movw	r1, #1026	; 0x402
 80162f2:	6878      	ldr	r0, [r7, #4]
 80162f4:	4798      	blx	r3
 80162f6:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 80162f8:	697b      	ldr	r3, [r7, #20]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d10a      	bne.n	8016314 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	695c      	ldr	r4, [r3, #20]
 8016302:	4b36      	ldr	r3, [pc, #216]	; (80163dc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8016304:	9300      	str	r3, [sp, #0]
 8016306:	236f      	movs	r3, #111	; 0x6f
 8016308:	4a2b      	ldr	r2, [pc, #172]	; (80163b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801630a:	492f      	ldr	r1, [pc, #188]	; (80163c8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801630c:	6878      	ldr	r0, [r7, #4]
 801630e:	47a0      	blx	r4
 8016310:	2301      	movs	r3, #1
 8016312:	e0a6      	b.n	8016462 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 8016314:	69fb      	ldr	r3, [r7, #28]
 8016316:	697a      	ldr	r2, [r7, #20]
 8016318:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 801631a:	6a3b      	ldr	r3, [r7, #32]
 801631c:	781b      	ldrb	r3, [r3, #0]
 801631e:	2b07      	cmp	r3, #7
 8016320:	d112      	bne.n	8016348 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 8016322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016324:	781b      	ldrb	r3, [r3, #0]
 8016326:	2b09      	cmp	r3, #9
 8016328:	d028      	beq.n	801637c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801632c:	781b      	ldrb	r3, [r3, #0]
 801632e:	2b07      	cmp	r3, #7
 8016330:	d024      	beq.n	801637c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	695c      	ldr	r4, [r3, #20]
 8016336:	4b2a      	ldr	r3, [pc, #168]	; (80163e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 8016338:	9300      	str	r3, [sp, #0]
 801633a:	2375      	movs	r3, #117	; 0x75
 801633c:	4a1e      	ldr	r2, [pc, #120]	; (80163b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801633e:	4922      	ldr	r1, [pc, #136]	; (80163c8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8016340:	6878      	ldr	r0, [r7, #4]
 8016342:	47a0      	blx	r4
 8016344:	2301      	movs	r3, #1
 8016346:	e08c      	b.n	8016462 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 8016348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801634a:	781a      	ldrb	r2, [r3, #0]
 801634c:	6a3b      	ldr	r3, [r7, #32]
 801634e:	781b      	ldrb	r3, [r3, #0]
 8016350:	429a      	cmp	r2, r3
 8016352:	d013      	beq.n	801637c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	695c      	ldr	r4, [r3, #20]
 8016358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801635a:	781b      	ldrb	r3, [r3, #0]
 801635c:	461a      	mov	r2, r3
 801635e:	6a3b      	ldr	r3, [r7, #32]
 8016360:	781b      	ldrb	r3, [r3, #0]
 8016362:	9303      	str	r3, [sp, #12]
 8016364:	9202      	str	r2, [sp, #8]
 8016366:	4b1f      	ldr	r3, [pc, #124]	; (80163e4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 8016368:	9301      	str	r3, [sp, #4]
 801636a:	4b1f      	ldr	r3, [pc, #124]	; (80163e8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 801636c:	9300      	str	r3, [sp, #0]
 801636e:	2378      	movs	r3, #120	; 0x78
 8016370:	4a11      	ldr	r2, [pc, #68]	; (80163b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016372:	4912      	ldr	r1, [pc, #72]	; (80163bc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8016374:	6878      	ldr	r0, [r7, #4]
 8016376:	47a0      	blx	r4
 8016378:	2301      	movs	r3, #1
 801637a:	e072      	b.n	8016462 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 801637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801637e:	781b      	ldrb	r3, [r3, #0]
 8016380:	2b07      	cmp	r3, #7
 8016382:	d161      	bne.n	8016448 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8016384:	6a3b      	ldr	r3, [r7, #32]
 8016386:	691b      	ldr	r3, [r3, #16]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d035      	beq.n	80163f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	695c      	ldr	r4, [r3, #20]
 8016390:	6a3b      	ldr	r3, [r7, #32]
 8016392:	691b      	ldr	r3, [r3, #16]
 8016394:	2200      	movs	r2, #0
 8016396:	9203      	str	r2, [sp, #12]
 8016398:	9302      	str	r3, [sp, #8]
 801639a:	4b14      	ldr	r3, [pc, #80]	; (80163ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801639c:	9301      	str	r3, [sp, #4]
 801639e:	4b14      	ldr	r3, [pc, #80]	; (80163f0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 80163a0:	9300      	str	r3, [sp, #0]
 80163a2:	237d      	movs	r3, #125	; 0x7d
 80163a4:	4a04      	ldr	r2, [pc, #16]	; (80163b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80163a6:	4905      	ldr	r1, [pc, #20]	; (80163bc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 80163a8:	6878      	ldr	r0, [r7, #4]
 80163aa:	47a0      	blx	r4
 80163ac:	2301      	movs	r3, #1
 80163ae:	e058      	b.n	8016462 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 80163b0:	0801e97c 	.word	0x0801e97c
 80163b4:	0801e980 	.word	0x0801e980
 80163b8:	0801e7b8 	.word	0x0801e7b8
 80163bc:	0801e850 	.word	0x0801e850
 80163c0:	0801e990 	.word	0x0801e990
 80163c4:	0801e9a4 	.word	0x0801e9a4
 80163c8:	0801e930 	.word	0x0801e930
 80163cc:	0801e9b8 	.word	0x0801e9b8
 80163d0:	0801e9d4 	.word	0x0801e9d4
 80163d4:	0801e9e8 	.word	0x0801e9e8
 80163d8:	0801ea04 	.word	0x0801ea04
 80163dc:	0801ea1c 	.word	0x0801ea1c
 80163e0:	0801ea40 	.word	0x0801ea40
 80163e4:	0801e918 	.word	0x0801e918
 80163e8:	0801e8f8 	.word	0x0801e8f8
 80163ec:	0801e86c 	.word	0x0801e86c
 80163f0:	0801e870 	.word	0x0801e870
 80163f4:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 80163f8:	f107 0308 	add.w	r3, r7, #8
 80163fc:	4618      	mov	r0, r3
 80163fe:	f7ff fe7f 	bl	8016100 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 8016402:	69fb      	ldr	r3, [r7, #28]
 8016404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016406:	f240 2201 	movw	r2, #513	; 0x201
 801640a:	4619      	mov	r1, r3
 801640c:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 80163f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8016410:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8016414:	f7ff faf4 	bl	8015a00 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8016418:	f107 030c 	add.w	r3, r7, #12
 801641c:	4618      	mov	r0, r3
 801641e:	f7ff fea7 	bl	8016170 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 8016422:	69fb      	ldr	r3, [r7, #28]
 8016424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016426:	f240 2201 	movw	r2, #513	; 0x201
 801642a:	4619      	mov	r1, r3
 801642c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8016430:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 80163f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8016434:	f7ff fae4 	bl	8015a00 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 8016438:	6a3b      	ldr	r3, [r7, #32]
 801643a:	691a      	ldr	r2, [r3, #16]
 801643c:	69fb      	ldr	r3, [r7, #28]
 801643e:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 8016440:	6a3b      	ldr	r3, [r7, #32]
 8016442:	68da      	ldr	r2, [r3, #12]
 8016444:	69fb      	ldr	r3, [r7, #28]
 8016446:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8016448:	683b      	ldr	r3, [r7, #0]
 801644a:	695b      	ldr	r3, [r3, #20]
 801644c:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 801644e:	69fb      	ldr	r3, [r7, #28]
 8016450:	9300      	str	r3, [sp, #0]
 8016452:	693b      	ldr	r3, [r7, #16]
 8016454:	6a3a      	ldr	r2, [r7, #32]
 8016456:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016458:	6878      	ldr	r0, [r7, #4]
 801645a:	f7ff fbfd 	bl	8015c58 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 801645e:	4603      	mov	r3, r0
 8016460:	bf00      	nop
}
 8016462:	4618      	mov	r0, r3
 8016464:	372c      	adds	r7, #44	; 0x2c
 8016466:	46bd      	mov	sp, r7
 8016468:	bd90      	pop	{r4, r7, pc}
 801646a:	bf00      	nop

0801646c <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 801646c:	b580      	push	{r7, lr}
 801646e:	b082      	sub	sp, #8
 8016470:	af00      	add	r7, sp, #0
 8016472:	6078      	str	r0, [r7, #4]
 8016474:	6878      	ldr	r0, [r7, #4]
 8016476:	f000 fbdb 	bl	8016c30 <_ZNSaIPvED1Ev>
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	4618      	mov	r0, r3
 801647e:	3708      	adds	r7, #8
 8016480:	46bd      	mov	sp, r7
 8016482:	bd80      	pop	{r7, pc}

08016484 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8016484:	b580      	push	{r7, lr}
 8016486:	b082      	sub	sp, #8
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	4618      	mov	r0, r3
 8016490:	f000 fbbe 	bl	8016c10 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	4618      	mov	r0, r3
 8016498:	3708      	adds	r7, #8
 801649a:	46bd      	mov	sp, r7
 801649c:	bd80      	pop	{r7, pc}

0801649e <_ZNSt6vectorIPvSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 801649e:	b580      	push	{r7, lr}
 80164a0:	b082      	sub	sp, #8
 80164a2:	af00      	add	r7, sp, #0
 80164a4:	6078      	str	r0, [r7, #4]
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	4618      	mov	r0, r3
 80164aa:	f7ff ffeb 	bl	8016484 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	4618      	mov	r0, r3
 80164b2:	3708      	adds	r7, #8
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bd80      	pop	{r7, pc}

080164b8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b084      	sub	sp, #16
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
 80164c0:	6039      	str	r1, [r7, #0]
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
 80164c2:	4b1b      	ldr	r3, [pc, #108]	; (8016530 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 80164c4:	681a      	ldr	r2, [r3, #0]
 80164c6:	683b      	ldr	r3, [r7, #0]
 80164c8:	425b      	negs	r3, r3
 80164ca:	441a      	add	r2, r3
 80164cc:	4b19      	ldr	r3, [pc, #100]	; (8016534 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x7c>)
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	429a      	cmp	r2, r3
 80164d2:	d217      	bcs.n	8016504 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x4c>
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 80164d4:	2101      	movs	r1, #1
 80164d6:	6838      	ldr	r0, [r7, #0]
 80164d8:	f7fa fd3a 	bl	8010f50 <_Z9ei_callocjj>
 80164dc:	4603      	mov	r3, r0
 80164de:	60fb      	str	r3, [r7, #12]
    if (ptr == NULL) {
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d106      	bne.n	80164f4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x3c>
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 80164e6:	683b      	ldr	r3, [r7, #0]
 80164e8:	4619      	mov	r1, r3
 80164ea:	4813      	ldr	r0, [pc, #76]	; (8016538 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x80>)
 80164ec:	f004 fe0a 	bl	801b104 <iprintf>
      return NULL;
 80164f0:	2300      	movs	r3, #0
 80164f2:	e018      	b.n	8016526 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6e>
    }
    overflow_buffers.push_back(ptr);
 80164f4:	f107 030c 	add.w	r3, r7, #12
 80164f8:	4619      	mov	r1, r3
 80164fa:	4810      	ldr	r0, [pc, #64]	; (801653c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x84>)
 80164fc:	f000 fbbd 	bl	8016c7a <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>
    return ptr;
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	e010      	b.n	8016526 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6e>
  }

  current_location -= bytes;
 8016504:	4b0a      	ldr	r3, [pc, #40]	; (8016530 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 8016506:	681a      	ldr	r2, [r3, #0]
 8016508:	683b      	ldr	r3, [r7, #0]
 801650a:	425b      	negs	r3, r3
 801650c:	4413      	add	r3, r2
 801650e:	4a08      	ldr	r2, [pc, #32]	; (8016530 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 8016510:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 8016512:	4b07      	ldr	r3, [pc, #28]	; (8016530 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	60fb      	str	r3, [r7, #12]
  memset(ptr, 0, bytes);
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	683a      	ldr	r2, [r7, #0]
 801651c:	2100      	movs	r1, #0
 801651e:	4618      	mov	r0, r3
 8016520:	f003 ff2e 	bl	801a380 <memset>

  return ptr;
 8016524:	68fb      	ldr	r3, [r7, #12]
}
 8016526:	4618      	mov	r0, r3
 8016528:	3710      	adds	r7, #16
 801652a:	46bd      	mov	sp, r7
 801652c:	bd80      	pop	{r7, pc}
 801652e:	bf00      	nop
 8016530:	20000630 	.word	0x20000630
 8016534:	2000062c 	.word	0x2000062c
 8016538:	0801ea90 	.word	0x0801ea90
 801653c:	20000aa0 	.word	0x20000aa0

08016540 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8016540:	b580      	push	{r7, lr}
 8016542:	b082      	sub	sp, #8
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
 8016548:	6878      	ldr	r0, [r7, #4]
 801654a:	f000 fbcb 	bl	8016ce4 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	4618      	mov	r0, r3
 8016552:	3708      	adds	r7, #8
 8016554:	46bd      	mov	sp, r7
 8016556:	bd80      	pop	{r7, pc}

08016558 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>:
      _Vector_base() = default;
 8016558:	b580      	push	{r7, lr}
 801655a:	b082      	sub	sp, #8
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	4618      	mov	r0, r3
 8016564:	f000 fbae 	bl	8016cc4 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	4618      	mov	r0, r3
 801656c:	3708      	adds	r7, #8
 801656e:	46bd      	mov	sp, r7
 8016570:	bd80      	pop	{r7, pc}

08016572 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>:
      vector() = default;
 8016572:	b580      	push	{r7, lr}
 8016574:	b082      	sub	sp, #8
 8016576:	af00      	add	r7, sp, #0
 8016578:	6078      	str	r0, [r7, #4]
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	4618      	mov	r0, r3
 801657e:	f7ff ffeb 	bl	8016558 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	4618      	mov	r0, r3
 8016586:	3708      	adds	r7, #8
 8016588:	46bd      	mov	sp, r7
 801658a:	bd80      	pop	{r7, pc}

0801658c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 801658c:	b580      	push	{r7, lr}
 801658e:	b086      	sub	sp, #24
 8016590:	af00      	add	r7, sp, #0
 8016592:	60f8      	str	r0, [r7, #12]
 8016594:	60b9      	str	r1, [r7, #8]
 8016596:	607a      	str	r2, [r7, #4]
  scratch_buffer_t b;
  b.bytes = bytes;
 8016598:	68bb      	ldr	r3, [r7, #8]
 801659a:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 801659c:	693b      	ldr	r3, [r7, #16]
 801659e:	4619      	mov	r1, r3
 80165a0:	68f8      	ldr	r0, [r7, #12]
 80165a2:	f7ff ff89 	bl	80164b8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
 80165a6:	4603      	mov	r3, r0
 80165a8:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 80165aa:	697b      	ldr	r3, [r7, #20]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d101      	bne.n	80165b4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x28>
    return kTfLiteError;
 80165b0:	2301      	movs	r3, #1
 80165b2:	e00e      	b.n	80165d2 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x46>
  }

  scratch_buffers.push_back(b);
 80165b4:	f107 0310 	add.w	r3, r7, #16
 80165b8:	4619      	mov	r1, r3
 80165ba:	4808      	ldr	r0, [pc, #32]	; (80165dc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x50>)
 80165bc:	f000 fbb7 	bl	8016d2e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>

  *buffer_idx = scratch_buffers.size() - 1;
 80165c0:	4806      	ldr	r0, [pc, #24]	; (80165dc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x50>)
 80165c2:	f000 fbda 	bl	8016d7a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 80165c6:	4603      	mov	r3, r0
 80165c8:	3b01      	subs	r3, #1
 80165ca:	461a      	mov	r2, r3
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 80165d0:	2300      	movs	r3, #0
}
 80165d2:	4618      	mov	r0, r3
 80165d4:	3718      	adds	r7, #24
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bd80      	pop	{r7, pc}
 80165da:	bf00      	nop
 80165dc:	20000aac 	.word	0x20000aac

080165e0 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b082      	sub	sp, #8
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	6078      	str	r0, [r7, #4]
 80165e8:	6039      	str	r1, [r7, #0]
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
 80165ea:	480d      	ldr	r0, [pc, #52]	; (8016620 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 80165ec:	f000 fbc5 	bl	8016d7a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 80165f0:	4603      	mov	r3, r0
 80165f2:	461a      	mov	r2, r3
 80165f4:	683b      	ldr	r3, [r7, #0]
 80165f6:	4293      	cmp	r3, r2
 80165f8:	bfac      	ite	ge
 80165fa:	2301      	movge	r3, #1
 80165fc:	2300      	movlt	r3, #0
 80165fe:	b2db      	uxtb	r3, r3
 8016600:	2b00      	cmp	r3, #0
 8016602:	d001      	beq.n	8016608 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x28>
    return NULL;
 8016604:	2300      	movs	r3, #0
 8016606:	e006      	b.n	8016616 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x36>
  }
  return scratch_buffers[buffer_idx].ptr;
 8016608:	683b      	ldr	r3, [r7, #0]
 801660a:	4619      	mov	r1, r3
 801660c:	4804      	ldr	r0, [pc, #16]	; (8016620 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 801660e:	f000 fbc4 	bl	8016d9a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>
 8016612:	4603      	mov	r3, r0
 8016614:	685b      	ldr	r3, [r3, #4]
}
 8016616:	4618      	mov	r0, r3
 8016618:	3708      	adds	r7, #8
 801661a:	46bd      	mov	sp, r7
 801661c:	bd80      	pop	{r7, pc}
 801661e:	bf00      	nop
 8016620:	20000aac 	.word	0x20000aac

08016624 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
 8016624:	b480      	push	{r7}
 8016626:	b083      	sub	sp, #12
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
 801662c:	6039      	str	r1, [r7, #0]
  return &tflTensors[tensor_idx];
 801662e:	683b      	ldr	r3, [r7, #0]
 8016630:	019b      	lsls	r3, r3, #6
 8016632:	4a04      	ldr	r2, [pc, #16]	; (8016644 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>)
 8016634:	4413      	add	r3, r2
}
 8016636:	4618      	mov	r0, r3
 8016638:	370c      	adds	r7, #12
 801663a:	46bd      	mov	sp, r7
 801663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016640:	4770      	bx	lr
 8016642:	bf00      	nop
 8016644:	2000068c 	.word	0x2000068c

08016648 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 8016648:	b480      	push	{r7}
 801664a:	b083      	sub	sp, #12
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
 8016650:	6039      	str	r1, [r7, #0]
  return &tflEvalTensors[tensor_idx];
 8016652:	683a      	ldr	r2, [r7, #0]
 8016654:	4613      	mov	r3, r2
 8016656:	005b      	lsls	r3, r3, #1
 8016658:	4413      	add	r3, r2
 801665a:	009b      	lsls	r3, r3, #2
 801665c:	4a03      	ldr	r2, [pc, #12]	; (801666c <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x24>)
 801665e:	4413      	add	r3, r2
}
 8016660:	4618      	mov	r0, r3
 8016662:	370c      	adds	r7, #12
 8016664:	46bd      	mov	sp, r7
 8016666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666a:	4770      	bx	lr
 801666c:	2000094c 	.word	0x2000094c

08016670 <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 8016670:	b5b0      	push	{r4, r5, r7, lr}
 8016672:	b092      	sub	sp, #72	; 0x48
 8016674:	af00      	add	r7, sp, #0
 8016676:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 8016678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801667a:	f44f 7188 	mov.w	r1, #272	; 0x110
 801667e:	2010      	movs	r0, #16
 8016680:	4798      	blx	r3
 8016682:	4603      	mov	r3, r0
 8016684:	4aa3      	ldr	r2, [pc, #652]	; (8016914 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8016686:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 8016688:	4ba2      	ldr	r3, [pc, #648]	; (8016914 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d104      	bne.n	801669a <_Z18trained_model_initPFPvjjE+0x2a>
    printf("ERR: failed to allocate tensor arena\n");
 8016690:	48a1      	ldr	r0, [pc, #644]	; (8016918 <_Z18trained_model_initPFPvjjE+0x2a8>)
 8016692:	f004 fdbd 	bl	801b210 <puts>
    return kTfLiteError;
 8016696:	2301      	movs	r3, #1
 8016698:	e21d      	b.n	8016ad6 <_Z18trained_model_initPFPvjjE+0x466>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 801669a:	4b9e      	ldr	r3, [pc, #632]	; (8016914 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	4a9f      	ldr	r2, [pc, #636]	; (801691c <_Z18trained_model_initPFPvjjE+0x2ac>)
 80166a0:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 80166a2:	4b9c      	ldr	r3, [pc, #624]	; (8016914 <_Z18trained_model_initPFPvjjE+0x2a4>)
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80166aa:	4a9d      	ldr	r2, [pc, #628]	; (8016920 <_Z18trained_model_initPFPvjjE+0x2b0>)
 80166ac:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 80166ae:	4b9d      	ldr	r3, [pc, #628]	; (8016924 <_Z18trained_model_initPFPvjjE+0x2b4>)
 80166b0:	4a9d      	ldr	r2, [pc, #628]	; (8016928 <_Z18trained_model_initPFPvjjE+0x2b8>)
 80166b2:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 80166b4:	4b9b      	ldr	r3, [pc, #620]	; (8016924 <_Z18trained_model_initPFPvjjE+0x2b4>)
 80166b6:	4a9d      	ldr	r2, [pc, #628]	; (801692c <_Z18trained_model_initPFPvjjE+0x2bc>)
 80166b8:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 80166ba:	4b9a      	ldr	r3, [pc, #616]	; (8016924 <_Z18trained_model_initPFPvjjE+0x2b4>)
 80166bc:	4a9c      	ldr	r2, [pc, #624]	; (8016930 <_Z18trained_model_initPFPvjjE+0x2c0>)
 80166be:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
 80166c0:	4b98      	ldr	r3, [pc, #608]	; (8016924 <_Z18trained_model_initPFPvjjE+0x2b4>)
 80166c2:	4a9c      	ldr	r2, [pc, #624]	; (8016934 <_Z18trained_model_initPFPvjjE+0x2c4>)
 80166c4:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
 80166c6:	4b97      	ldr	r3, [pc, #604]	; (8016924 <_Z18trained_model_initPFPvjjE+0x2b4>)
 80166c8:	4a9b      	ldr	r2, [pc, #620]	; (8016938 <_Z18trained_model_initPFPvjjE+0x2c8>)
 80166ca:	655a      	str	r2, [r3, #84]	; 0x54
  ctx.tensors = tflTensors;
 80166cc:	4b95      	ldr	r3, [pc, #596]	; (8016924 <_Z18trained_model_initPFPvjjE+0x2b4>)
 80166ce:	4a9b      	ldr	r2, [pc, #620]	; (801693c <_Z18trained_model_initPFPvjjE+0x2cc>)
 80166d0:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 11;
 80166d2:	4b94      	ldr	r3, [pc, #592]	; (8016924 <_Z18trained_model_initPFPvjjE+0x2b4>)
 80166d4:	220b      	movs	r2, #11
 80166d6:	601a      	str	r2, [r3, #0]
  for(size_t i = 0; i < 11; ++i) {
 80166d8:	2300      	movs	r3, #0
 80166da:	647b      	str	r3, [r7, #68]	; 0x44
 80166dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80166de:	2b0a      	cmp	r3, #10
 80166e0:	f200 810c 	bhi.w	80168fc <_Z18trained_model_initPFPvjjE+0x28c>
    tflTensors[i].type = tensorData[i].type;
 80166e4:	4996      	ldr	r1, [pc, #600]	; (8016940 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80166e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80166e8:	4613      	mov	r3, r2
 80166ea:	005b      	lsls	r3, r3, #1
 80166ec:	4413      	add	r3, r2
 80166ee:	00db      	lsls	r3, r3, #3
 80166f0:	440b      	add	r3, r1
 80166f2:	3301      	adds	r3, #1
 80166f4:	7819      	ldrb	r1, [r3, #0]
 80166f6:	4a91      	ldr	r2, [pc, #580]	; (801693c <_Z18trained_model_initPFPvjjE+0x2cc>)
 80166f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80166fa:	019b      	lsls	r3, r3, #6
 80166fc:	4413      	add	r3, r2
 80166fe:	460a      	mov	r2, r1
 8016700:	701a      	strb	r2, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
 8016702:	498f      	ldr	r1, [pc, #572]	; (8016940 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016704:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016706:	4613      	mov	r3, r2
 8016708:	005b      	lsls	r3, r3, #1
 801670a:	4413      	add	r3, r2
 801670c:	00db      	lsls	r3, r3, #3
 801670e:	440b      	add	r3, r1
 8016710:	3301      	adds	r3, #1
 8016712:	7818      	ldrb	r0, [r3, #0]
 8016714:	498b      	ldr	r1, [pc, #556]	; (8016944 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8016716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016718:	4613      	mov	r3, r2
 801671a:	005b      	lsls	r3, r3, #1
 801671c:	4413      	add	r3, r2
 801671e:	009b      	lsls	r3, r3, #2
 8016720:	440b      	add	r3, r1
 8016722:	3308      	adds	r3, #8
 8016724:	4602      	mov	r2, r0
 8016726:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 8016728:	4a84      	ldr	r2, [pc, #528]	; (801693c <_Z18trained_model_initPFPvjjE+0x2cc>)
 801672a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801672c:	019b      	lsls	r3, r3, #6
 801672e:	4413      	add	r3, r2
 8016730:	332d      	adds	r3, #45	; 0x2d
 8016732:	2200      	movs	r2, #0
 8016734:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 8016736:	4982      	ldr	r1, [pc, #520]	; (8016940 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016738:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801673a:	4613      	mov	r3, r2
 801673c:	005b      	lsls	r3, r3, #1
 801673e:	4413      	add	r3, r2
 8016740:	00db      	lsls	r3, r3, #3
 8016742:	440b      	add	r3, r1
 8016744:	7819      	ldrb	r1, [r3, #0]
 8016746:	4a7d      	ldr	r2, [pc, #500]	; (801693c <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801674a:	019b      	lsls	r3, r3, #6
 801674c:	4413      	add	r3, r2
 801674e:	3314      	adds	r3, #20
 8016750:	460a      	mov	r2, r1
 8016752:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 8016754:	497a      	ldr	r1, [pc, #488]	; (8016940 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016758:	4613      	mov	r3, r2
 801675a:	005b      	lsls	r3, r3, #1
 801675c:	4413      	add	r3, r2
 801675e:	00db      	lsls	r3, r3, #3
 8016760:	440b      	add	r3, r1
 8016762:	330c      	adds	r3, #12
 8016764:	681a      	ldr	r2, [r3, #0]
 8016766:	4975      	ldr	r1, [pc, #468]	; (801693c <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801676a:	019b      	lsls	r3, r3, #6
 801676c:	440b      	add	r3, r1
 801676e:	3318      	adds	r3, #24
 8016770:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 8016772:	4973      	ldr	r1, [pc, #460]	; (8016940 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016774:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016776:	4613      	mov	r3, r2
 8016778:	005b      	lsls	r3, r3, #1
 801677a:	4413      	add	r3, r2
 801677c:	00db      	lsls	r3, r3, #3
 801677e:	440b      	add	r3, r1
 8016780:	3308      	adds	r3, #8
 8016782:	681a      	ldr	r2, [r3, #0]
 8016784:	496d      	ldr	r1, [pc, #436]	; (801693c <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016788:	019b      	lsls	r3, r3, #6
 801678a:	440b      	add	r3, r1
 801678c:	3308      	adds	r3, #8
 801678e:	601a      	str	r2, [r3, #0]
    tflEvalTensors[i].dims = tensorData[i].dims;
 8016790:	496b      	ldr	r1, [pc, #428]	; (8016940 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016794:	4613      	mov	r3, r2
 8016796:	005b      	lsls	r3, r3, #1
 8016798:	4413      	add	r3, r2
 801679a:	00db      	lsls	r3, r3, #3
 801679c:	440b      	add	r3, r1
 801679e:	3308      	adds	r3, #8
 80167a0:	6819      	ldr	r1, [r3, #0]
 80167a2:	4868      	ldr	r0, [pc, #416]	; (8016944 <_Z18trained_model_initPFPvjjE+0x2d4>)
 80167a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80167a6:	4613      	mov	r3, r2
 80167a8:	005b      	lsls	r3, r3, #1
 80167aa:	4413      	add	r3, r2
 80167ac:	009b      	lsls	r3, r3, #2
 80167ae:	4403      	add	r3, r0
 80167b0:	3304      	adds	r3, #4
 80167b2:	6019      	str	r1, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 80167b4:	4a61      	ldr	r2, [pc, #388]	; (801693c <_Z18trained_model_initPFPvjjE+0x2cc>)
 80167b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80167b8:	019b      	lsls	r3, r3, #6
 80167ba:	4413      	add	r3, r2
 80167bc:	3314      	adds	r3, #20
 80167be:	781b      	ldrb	r3, [r3, #0]
 80167c0:	2b02      	cmp	r3, #2
 80167c2:	d11e      	bne.n	8016802 <_Z18trained_model_initPFPvjjE+0x192>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 80167c4:	495e      	ldr	r1, [pc, #376]	; (8016940 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80167c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80167c8:	4613      	mov	r3, r2
 80167ca:	005b      	lsls	r3, r3, #1
 80167cc:	4413      	add	r3, r2
 80167ce:	00db      	lsls	r3, r3, #3
 80167d0:	440b      	add	r3, r1
 80167d2:	3304      	adds	r3, #4
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	461a      	mov	r2, r3
 80167d8:	4b4e      	ldr	r3, [pc, #312]	; (8016914 <_Z18trained_model_initPFPvjjE+0x2a4>)
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	4413      	add	r3, r2
 80167de:	63bb      	str	r3, [r7, #56]	; 0x38

     tflTensors[i].data.data =  start;
 80167e0:	4a56      	ldr	r2, [pc, #344]	; (801693c <_Z18trained_model_initPFPvjjE+0x2cc>)
 80167e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80167e4:	019b      	lsls	r3, r3, #6
 80167e6:	4413      	add	r3, r2
 80167e8:	3304      	adds	r3, #4
 80167ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80167ec:	601a      	str	r2, [r3, #0]
     tflEvalTensors[i].data.data =  start;
 80167ee:	4955      	ldr	r1, [pc, #340]	; (8016944 <_Z18trained_model_initPFPvjjE+0x2d4>)
 80167f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80167f2:	4613      	mov	r3, r2
 80167f4:	005b      	lsls	r3, r3, #1
 80167f6:	4413      	add	r3, r2
 80167f8:	009b      	lsls	r3, r3, #2
 80167fa:	440b      	add	r3, r1
 80167fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80167fe:	601a      	str	r2, [r3, #0]
 8016800:	e01f      	b.n	8016842 <_Z18trained_model_initPFPvjjE+0x1d2>
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
 8016802:	494f      	ldr	r1, [pc, #316]	; (8016940 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016804:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016806:	4613      	mov	r3, r2
 8016808:	005b      	lsls	r3, r3, #1
 801680a:	4413      	add	r3, r2
 801680c:	00db      	lsls	r3, r3, #3
 801680e:	440b      	add	r3, r1
 8016810:	3304      	adds	r3, #4
 8016812:	681a      	ldr	r2, [r3, #0]
 8016814:	4949      	ldr	r1, [pc, #292]	; (801693c <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016818:	019b      	lsls	r3, r3, #6
 801681a:	440b      	add	r3, r1
 801681c:	3304      	adds	r3, #4
 801681e:	601a      	str	r2, [r3, #0]
       tflEvalTensors[i].data.data = tensorData[i].data;
 8016820:	4947      	ldr	r1, [pc, #284]	; (8016940 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016822:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016824:	4613      	mov	r3, r2
 8016826:	005b      	lsls	r3, r3, #1
 8016828:	4413      	add	r3, r2
 801682a:	00db      	lsls	r3, r3, #3
 801682c:	440b      	add	r3, r1
 801682e:	3304      	adds	r3, #4
 8016830:	6819      	ldr	r1, [r3, #0]
 8016832:	4844      	ldr	r0, [pc, #272]	; (8016944 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8016834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016836:	4613      	mov	r3, r2
 8016838:	005b      	lsls	r3, r3, #1
 801683a:	4413      	add	r3, r2
 801683c:	009b      	lsls	r3, r3, #2
 801683e:	4403      	add	r3, r0
 8016840:	6019      	str	r1, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 8016842:	4a3e      	ldr	r2, [pc, #248]	; (801693c <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016846:	019b      	lsls	r3, r3, #6
 8016848:	4413      	add	r3, r2
 801684a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801684e:	493c      	ldr	r1, [pc, #240]	; (8016940 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016850:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016852:	4613      	mov	r3, r2
 8016854:	005b      	lsls	r3, r3, #1
 8016856:	4413      	add	r3, r2
 8016858:	00db      	lsls	r3, r3, #3
 801685a:	440b      	add	r3, r1
 801685c:	f103 0210 	add.w	r2, r3, #16
 8016860:	4603      	mov	r3, r0
 8016862:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016866:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 801686a:	4a34      	ldr	r2, [pc, #208]	; (801693c <_Z18trained_model_initPFPvjjE+0x2cc>)
 801686c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801686e:	019b      	lsls	r3, r3, #6
 8016870:	4413      	add	r3, r2
 8016872:	3330      	adds	r3, #48	; 0x30
 8016874:	781b      	ldrb	r3, [r3, #0]
 8016876:	2b01      	cmp	r3, #1
 8016878:	d11b      	bne.n	80168b2 <_Z18trained_model_initPFPvjjE+0x242>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 801687a:	4931      	ldr	r1, [pc, #196]	; (8016940 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801687c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801687e:	4613      	mov	r3, r2
 8016880:	005b      	lsls	r3, r3, #1
 8016882:	4413      	add	r3, r2
 8016884:	00db      	lsls	r3, r3, #3
 8016886:	440b      	add	r3, r1
 8016888:	3314      	adds	r3, #20
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	637b      	str	r3, [r7, #52]	; 0x34
      tflTensors[i].params.scale = quant->scale->data[0];
 801688e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	685a      	ldr	r2, [r3, #4]
 8016894:	4929      	ldr	r1, [pc, #164]	; (801693c <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016898:	019b      	lsls	r3, r3, #6
 801689a:	440b      	add	r3, r1
 801689c:	330c      	adds	r3, #12
 801689e:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 80168a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80168a2:	685b      	ldr	r3, [r3, #4]
 80168a4:	685a      	ldr	r2, [r3, #4]
 80168a6:	4925      	ldr	r1, [pc, #148]	; (801693c <_Z18trained_model_initPFPvjjE+0x2cc>)
 80168a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80168aa:	019b      	lsls	r3, r3, #6
 80168ac:	440b      	add	r3, r1
 80168ae:	3310      	adds	r3, #16
 80168b0:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 80168b2:	4a22      	ldr	r2, [pc, #136]	; (801693c <_Z18trained_model_initPFPvjjE+0x2cc>)
 80168b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80168b6:	019b      	lsls	r3, r3, #6
 80168b8:	4413      	add	r3, r2
 80168ba:	3314      	adds	r3, #20
 80168bc:	781b      	ldrb	r3, [r3, #0]
 80168be:	2b02      	cmp	r3, #2
 80168c0:	d118      	bne.n	80168f4 <_Z18trained_model_initPFPvjjE+0x284>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 80168c2:	4a1e      	ldr	r2, [pc, #120]	; (801693c <_Z18trained_model_initPFPvjjE+0x2cc>)
 80168c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80168c6:	019b      	lsls	r3, r3, #6
 80168c8:	4413      	add	r3, r2
 80168ca:	3304      	adds	r3, #4
 80168cc:	6819      	ldr	r1, [r3, #0]
 80168ce:	481c      	ldr	r0, [pc, #112]	; (8016940 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80168d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80168d2:	4613      	mov	r3, r2
 80168d4:	005b      	lsls	r3, r3, #1
 80168d6:	4413      	add	r3, r2
 80168d8:	00db      	lsls	r3, r3, #3
 80168da:	4403      	add	r3, r0
 80168dc:	330c      	adds	r3, #12
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	440b      	add	r3, r1
 80168e2:	633b      	str	r3, [r7, #48]	; 0x30
      if (data_end_ptr > tensor_boundary) {
 80168e4:	4b0d      	ldr	r3, [pc, #52]	; (801691c <_Z18trained_model_initPFPvjjE+0x2ac>)
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168ea:	429a      	cmp	r2, r3
 80168ec:	d902      	bls.n	80168f4 <_Z18trained_model_initPFPvjjE+0x284>
        tensor_boundary = data_end_ptr;
 80168ee:	4a0b      	ldr	r2, [pc, #44]	; (801691c <_Z18trained_model_initPFPvjjE+0x2ac>)
 80168f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168f2:	6013      	str	r3, [r2, #0]
  for(size_t i = 0; i < 11; ++i) {
 80168f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80168f6:	3301      	adds	r3, #1
 80168f8:	647b      	str	r3, [r7, #68]	; 0x44
 80168fa:	e6ef      	b.n	80166dc <_Z18trained_model_initPFPvjjE+0x6c>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 80168fc:	4b07      	ldr	r3, [pc, #28]	; (801691c <_Z18trained_model_initPFPvjjE+0x2ac>)
 80168fe:	681a      	ldr	r2, [r3, #0]
 8016900:	4b07      	ldr	r3, [pc, #28]	; (8016920 <_Z18trained_model_initPFPvjjE+0x2b0>)
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	429a      	cmp	r2, r3
 8016906:	d921      	bls.n	801694c <_Z18trained_model_initPFPvjjE+0x2dc>
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 8016908:	480f      	ldr	r0, [pc, #60]	; (8016948 <_Z18trained_model_initPFPvjjE+0x2d8>)
 801690a:	f004 fc81 	bl	801b210 <puts>
    return kTfLiteError;
 801690e:	2301      	movs	r3, #1
 8016910:	e0e1      	b.n	8016ad6 <_Z18trained_model_initPFPvjjE+0x466>
 8016912:	bf00      	nop
 8016914:	20000628 	.word	0x20000628
 8016918:	0801eac8 	.word	0x0801eac8
 801691c:	2000062c 	.word	0x2000062c
 8016920:	20000630 	.word	0x20000630
 8016924:	20000634 	.word	0x20000634
 8016928:	080164b9 	.word	0x080164b9
 801692c:	0801658d 	.word	0x0801658d
 8016930:	080165e1 	.word	0x080165e1
 8016934:	08016625 	.word	0x08016625
 8016938:	08016649 	.word	0x08016649
 801693c:	2000068c 	.word	0x2000068c
 8016940:	200000e4 	.word	0x200000e4
 8016944:	2000094c 	.word	0x2000094c
 8016948:	0801eaf0 	.word	0x0801eaf0
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 801694c:	4c64      	ldr	r4, [pc, #400]	; (8016ae0 <_Z18trained_model_initPFPvjjE+0x470>)
 801694e:	463b      	mov	r3, r7
 8016950:	4618      	mov	r0, r3
 8016952:	f7fd fc1f 	bl	8014194 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 8016956:	4625      	mov	r5, r4
 8016958:	463c      	mov	r4, r7
 801695a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801695c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801695e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016962:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 8016966:	4c5e      	ldr	r4, [pc, #376]	; (8016ae0 <_Z18trained_model_initPFPvjjE+0x470>)
 8016968:	463b      	mov	r3, r7
 801696a:	4618      	mov	r0, r3
 801696c:	f7fe fb22 	bl	8014fb4 <_ZN6tflite16Register_SOFTMAXEv>
 8016970:	3420      	adds	r4, #32
 8016972:	463d      	mov	r5, r7
 8016974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016978:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801697c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for(size_t i = 0; i < 4; ++i) {
 8016980:	2300      	movs	r3, #0
 8016982:	643b      	str	r3, [r7, #64]	; 0x40
 8016984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016986:	2b03      	cmp	r3, #3
 8016988:	d86f      	bhi.n	8016a6a <_Z18trained_model_initPFPvjjE+0x3fa>
    tflNodes[i].inputs = nodeData[i].inputs;
 801698a:	4a56      	ldr	r2, [pc, #344]	; (8016ae4 <_Z18trained_model_initPFPvjjE+0x474>)
 801698c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801698e:	011b      	lsls	r3, r3, #4
 8016990:	4413      	add	r3, r2
 8016992:	6819      	ldr	r1, [r3, #0]
 8016994:	4854      	ldr	r0, [pc, #336]	; (8016ae8 <_Z18trained_model_initPFPvjjE+0x478>)
 8016996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016998:	4613      	mov	r3, r2
 801699a:	00db      	lsls	r3, r3, #3
 801699c:	4413      	add	r3, r2
 801699e:	009b      	lsls	r3, r3, #2
 80169a0:	4403      	add	r3, r0
 80169a2:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 80169a4:	4a4f      	ldr	r2, [pc, #316]	; (8016ae4 <_Z18trained_model_initPFPvjjE+0x474>)
 80169a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169a8:	011b      	lsls	r3, r3, #4
 80169aa:	4413      	add	r3, r2
 80169ac:	3304      	adds	r3, #4
 80169ae:	6819      	ldr	r1, [r3, #0]
 80169b0:	484d      	ldr	r0, [pc, #308]	; (8016ae8 <_Z18trained_model_initPFPvjjE+0x478>)
 80169b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80169b4:	4613      	mov	r3, r2
 80169b6:	00db      	lsls	r3, r3, #3
 80169b8:	4413      	add	r3, r2
 80169ba:	009b      	lsls	r3, r3, #2
 80169bc:	4403      	add	r3, r0
 80169be:	3304      	adds	r3, #4
 80169c0:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 80169c2:	4a48      	ldr	r2, [pc, #288]	; (8016ae4 <_Z18trained_model_initPFPvjjE+0x474>)
 80169c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169c6:	011b      	lsls	r3, r3, #4
 80169c8:	4413      	add	r3, r2
 80169ca:	3308      	adds	r3, #8
 80169cc:	6819      	ldr	r1, [r3, #0]
 80169ce:	4846      	ldr	r0, [pc, #280]	; (8016ae8 <_Z18trained_model_initPFPvjjE+0x478>)
 80169d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80169d2:	4613      	mov	r3, r2
 80169d4:	00db      	lsls	r3, r3, #3
 80169d6:	4413      	add	r3, r2
 80169d8:	009b      	lsls	r3, r3, #2
 80169da:	4403      	add	r3, r0
 80169dc:	3314      	adds	r3, #20
 80169de:	6019      	str	r1, [r3, #0]
tflNodes[i].custom_initial_data = nullptr;
 80169e0:	4941      	ldr	r1, [pc, #260]	; (8016ae8 <_Z18trained_model_initPFPvjjE+0x478>)
 80169e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80169e4:	4613      	mov	r3, r2
 80169e6:	00db      	lsls	r3, r3, #3
 80169e8:	4413      	add	r3, r2
 80169ea:	009b      	lsls	r3, r3, #2
 80169ec:	440b      	add	r3, r1
 80169ee:	3318      	adds	r3, #24
 80169f0:	2200      	movs	r2, #0
 80169f2:	601a      	str	r2, [r3, #0]
      tflNodes[i].custom_initial_data_size = 0;
 80169f4:	493c      	ldr	r1, [pc, #240]	; (8016ae8 <_Z18trained_model_initPFPvjjE+0x478>)
 80169f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80169f8:	4613      	mov	r3, r2
 80169fa:	00db      	lsls	r3, r3, #3
 80169fc:	4413      	add	r3, r2
 80169fe:	009b      	lsls	r3, r3, #2
 8016a00:	440b      	add	r3, r1
 8016a02:	331c      	adds	r3, #28
 8016a04:	2200      	movs	r2, #0
 8016a06:	601a      	str	r2, [r3, #0]
if (registrations[nodeData[i].used_op_index].init) {
 8016a08:	4a36      	ldr	r2, [pc, #216]	; (8016ae4 <_Z18trained_model_initPFPvjjE+0x474>)
 8016a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a0c:	011b      	lsls	r3, r3, #4
 8016a0e:	4413      	add	r3, r2
 8016a10:	330c      	adds	r3, #12
 8016a12:	781b      	ldrb	r3, [r3, #0]
 8016a14:	4a32      	ldr	r2, [pc, #200]	; (8016ae0 <_Z18trained_model_initPFPvjjE+0x470>)
 8016a16:	015b      	lsls	r3, r3, #5
 8016a18:	4413      	add	r3, r2
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d020      	beq.n	8016a62 <_Z18trained_model_initPFPvjjE+0x3f2>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 8016a20:	4a30      	ldr	r2, [pc, #192]	; (8016ae4 <_Z18trained_model_initPFPvjjE+0x474>)
 8016a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a24:	011b      	lsls	r3, r3, #4
 8016a26:	4413      	add	r3, r2
 8016a28:	330c      	adds	r3, #12
 8016a2a:	781b      	ldrb	r3, [r3, #0]
 8016a2c:	4a2c      	ldr	r2, [pc, #176]	; (8016ae0 <_Z18trained_model_initPFPvjjE+0x470>)
 8016a2e:	015b      	lsls	r3, r3, #5
 8016a30:	4413      	add	r3, r2
 8016a32:	681c      	ldr	r4, [r3, #0]
 8016a34:	492c      	ldr	r1, [pc, #176]	; (8016ae8 <_Z18trained_model_initPFPvjjE+0x478>)
 8016a36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016a38:	4613      	mov	r3, r2
 8016a3a:	00db      	lsls	r3, r3, #3
 8016a3c:	4413      	add	r3, r2
 8016a3e:	009b      	lsls	r3, r3, #2
 8016a40:	440b      	add	r3, r1
 8016a42:	3314      	adds	r3, #20
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	2200      	movs	r2, #0
 8016a48:	4619      	mov	r1, r3
 8016a4a:	4828      	ldr	r0, [pc, #160]	; (8016aec <_Z18trained_model_initPFPvjjE+0x47c>)
 8016a4c:	47a0      	blx	r4
 8016a4e:	4601      	mov	r1, r0
 8016a50:	4825      	ldr	r0, [pc, #148]	; (8016ae8 <_Z18trained_model_initPFPvjjE+0x478>)
 8016a52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016a54:	4613      	mov	r3, r2
 8016a56:	00db      	lsls	r3, r3, #3
 8016a58:	4413      	add	r3, r2
 8016a5a:	009b      	lsls	r3, r3, #2
 8016a5c:	4403      	add	r3, r0
 8016a5e:	3310      	adds	r3, #16
 8016a60:	6019      	str	r1, [r3, #0]
  for(size_t i = 0; i < 4; ++i) {
 8016a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a64:	3301      	adds	r3, #1
 8016a66:	643b      	str	r3, [r7, #64]	; 0x40
 8016a68:	e78c      	b.n	8016984 <_Z18trained_model_initPFPvjjE+0x314>
    }
  }
  for(size_t i = 0; i < 4; ++i) {
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a70:	2b03      	cmp	r3, #3
 8016a72:	d82f      	bhi.n	8016ad4 <_Z18trained_model_initPFPvjjE+0x464>
    if (registrations[nodeData[i].used_op_index].prepare) {
 8016a74:	4a1b      	ldr	r2, [pc, #108]	; (8016ae4 <_Z18trained_model_initPFPvjjE+0x474>)
 8016a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a78:	011b      	lsls	r3, r3, #4
 8016a7a:	4413      	add	r3, r2
 8016a7c:	330c      	adds	r3, #12
 8016a7e:	781b      	ldrb	r3, [r3, #0]
 8016a80:	4a17      	ldr	r2, [pc, #92]	; (8016ae0 <_Z18trained_model_initPFPvjjE+0x470>)
 8016a82:	015b      	lsls	r3, r3, #5
 8016a84:	4413      	add	r3, r2
 8016a86:	3308      	adds	r3, #8
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d01e      	beq.n	8016acc <_Z18trained_model_initPFPvjjE+0x45c>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 8016a8e:	4a15      	ldr	r2, [pc, #84]	; (8016ae4 <_Z18trained_model_initPFPvjjE+0x474>)
 8016a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a92:	011b      	lsls	r3, r3, #4
 8016a94:	4413      	add	r3, r2
 8016a96:	330c      	adds	r3, #12
 8016a98:	781b      	ldrb	r3, [r3, #0]
 8016a9a:	4a11      	ldr	r2, [pc, #68]	; (8016ae0 <_Z18trained_model_initPFPvjjE+0x470>)
 8016a9c:	015b      	lsls	r3, r3, #5
 8016a9e:	4413      	add	r3, r2
 8016aa0:	3308      	adds	r3, #8
 8016aa2:	681c      	ldr	r4, [r3, #0]
 8016aa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016aa6:	4613      	mov	r3, r2
 8016aa8:	00db      	lsls	r3, r3, #3
 8016aaa:	4413      	add	r3, r2
 8016aac:	009b      	lsls	r3, r3, #2
 8016aae:	4a0e      	ldr	r2, [pc, #56]	; (8016ae8 <_Z18trained_model_initPFPvjjE+0x478>)
 8016ab0:	4413      	add	r3, r2
 8016ab2:	4619      	mov	r1, r3
 8016ab4:	480d      	ldr	r0, [pc, #52]	; (8016aec <_Z18trained_model_initPFPvjjE+0x47c>)
 8016ab6:	47a0      	blx	r4
 8016ab8:	4603      	mov	r3, r0
 8016aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (status != kTfLiteOk) {
 8016abe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d002      	beq.n	8016acc <_Z18trained_model_initPFPvjjE+0x45c>
        return status;
 8016ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016aca:	e004      	b.n	8016ad6 <_Z18trained_model_initPFPvjjE+0x466>
  for(size_t i = 0; i < 4; ++i) {
 8016acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ace:	3301      	adds	r3, #1
 8016ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016ad2:	e7cc      	b.n	8016a6e <_Z18trained_model_initPFPvjjE+0x3fe>
      }
    }
  }
  return kTfLiteOk;
 8016ad4:	2300      	movs	r3, #0
}
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	3748      	adds	r7, #72	; 0x48
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bdb0      	pop	{r4, r5, r7, pc}
 8016ade:	bf00      	nop
 8016ae0:	200009d0 	.word	0x200009d0
 8016ae4:	0801ffe0 	.word	0x0801ffe0
 8016ae8:	20000a10 	.word	0x20000a10
 8016aec:	20000634 	.word	0x20000634

08016af0 <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 8016af0:	b480      	push	{r7}
 8016af2:	b083      	sub	sp, #12
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 8016af8:	4b05      	ldr	r3, [pc, #20]	; (8016b10 <_Z19trained_model_inputi+0x20>)
 8016afa:	689a      	ldr	r2, [r3, #8]
 8016afc:	2300      	movs	r3, #0
 8016afe:	019b      	lsls	r3, r3, #6
 8016b00:	4413      	add	r3, r2
}
 8016b02:	4618      	mov	r0, r3
 8016b04:	370c      	adds	r7, #12
 8016b06:	46bd      	mov	sp, r7
 8016b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b0c:	4770      	bx	lr
 8016b0e:	bf00      	nop
 8016b10:	20000634 	.word	0x20000634

08016b14 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
 8016b14:	b480      	push	{r7}
 8016b16:	b083      	sub	sp, #12
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 8016b1c:	4b05      	ldr	r3, [pc, #20]	; (8016b34 <_Z20trained_model_outputi+0x20>)
 8016b1e:	689a      	ldr	r2, [r3, #8]
 8016b20:	230a      	movs	r3, #10
 8016b22:	019b      	lsls	r3, r3, #6
 8016b24:	4413      	add	r3, r2
}
 8016b26:	4618      	mov	r0, r3
 8016b28:	370c      	adds	r7, #12
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b30:	4770      	bx	lr
 8016b32:	bf00      	nop
 8016b34:	20000634 	.word	0x20000634

08016b38 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 8016b38:	b590      	push	{r4, r7, lr}
 8016b3a:	b083      	sub	sp, #12
 8016b3c:	af00      	add	r7, sp, #0
  for(size_t i = 0; i < 4; ++i) {
 8016b3e:	2300      	movs	r3, #0
 8016b40:	607b      	str	r3, [r7, #4]
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	2b03      	cmp	r3, #3
 8016b46:	d81f      	bhi.n	8016b88 <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 8016b48:	4a12      	ldr	r2, [pc, #72]	; (8016b94 <_Z20trained_model_invokev+0x5c>)
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	011b      	lsls	r3, r3, #4
 8016b4e:	4413      	add	r3, r2
 8016b50:	330c      	adds	r3, #12
 8016b52:	781b      	ldrb	r3, [r3, #0]
 8016b54:	4a10      	ldr	r2, [pc, #64]	; (8016b98 <_Z20trained_model_invokev+0x60>)
 8016b56:	015b      	lsls	r3, r3, #5
 8016b58:	4413      	add	r3, r2
 8016b5a:	330c      	adds	r3, #12
 8016b5c:	681c      	ldr	r4, [r3, #0]
 8016b5e:	687a      	ldr	r2, [r7, #4]
 8016b60:	4613      	mov	r3, r2
 8016b62:	00db      	lsls	r3, r3, #3
 8016b64:	4413      	add	r3, r2
 8016b66:	009b      	lsls	r3, r3, #2
 8016b68:	4a0c      	ldr	r2, [pc, #48]	; (8016b9c <_Z20trained_model_invokev+0x64>)
 8016b6a:	4413      	add	r3, r2
 8016b6c:	4619      	mov	r1, r3
 8016b6e:	480c      	ldr	r0, [pc, #48]	; (8016ba0 <_Z20trained_model_invokev+0x68>)
 8016b70:	47a0      	blx	r4
 8016b72:	4603      	mov	r3, r0
 8016b74:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 8016b76:	78fb      	ldrb	r3, [r7, #3]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d001      	beq.n	8016b80 <_Z20trained_model_invokev+0x48>
      return status;
 8016b7c:	78fb      	ldrb	r3, [r7, #3]
 8016b7e:	e004      	b.n	8016b8a <_Z20trained_model_invokev+0x52>
  for(size_t i = 0; i < 4; ++i) {
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	3301      	adds	r3, #1
 8016b84:	607b      	str	r3, [r7, #4]
 8016b86:	e7dc      	b.n	8016b42 <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 8016b88:	2300      	movs	r3, #0
}
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	370c      	adds	r7, #12
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd90      	pop	{r4, r7, pc}
 8016b92:	bf00      	nop
 8016b94:	0801ffe0 	.word	0x0801ffe0
 8016b98:	200009d0 	.word	0x200009d0
 8016b9c:	20000a10 	.word	0x20000a10
 8016ba0:	20000634 	.word	0x20000634

08016ba4 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 8016ba4:	b580      	push	{r7, lr}
 8016ba6:	b084      	sub	sp, #16
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 8016bac:	4b15      	ldr	r3, [pc, #84]	; (8016c04 <_Z19trained_model_resetPFvPvE+0x60>)
 8016bae:	681a      	ldr	r2, [r3, #0]
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	4610      	mov	r0, r2
 8016bb4:	4798      	blx	r3
#endif
  scratch_buffers.clear();
 8016bb6:	4814      	ldr	r0, [pc, #80]	; (8016c08 <_Z19trained_model_resetPFvPvE+0x64>)
 8016bb8:	f000 f8ff 	bl	8016dba <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	60fb      	str	r3, [r7, #12]
 8016bc0:	4812      	ldr	r0, [pc, #72]	; (8016c0c <_Z19trained_model_resetPFvPvE+0x68>)
 8016bc2:	f000 f908 	bl	8016dd6 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8016bc6:	4602      	mov	r2, r0
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	4293      	cmp	r3, r2
 8016bcc:	bf34      	ite	cc
 8016bce:	2301      	movcc	r3, #1
 8016bd0:	2300      	movcs	r3, #0
 8016bd2:	b2db      	uxtb	r3, r3
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d00c      	beq.n	8016bf2 <_Z19trained_model_resetPFvPvE+0x4e>
    free(overflow_buffers[ix]);
 8016bd8:	68f9      	ldr	r1, [r7, #12]
 8016bda:	480c      	ldr	r0, [pc, #48]	; (8016c0c <_Z19trained_model_resetPFvPvE+0x68>)
 8016bdc:	f000 f90b 	bl	8016df6 <_ZNSt6vectorIPvSaIS0_EEixEj>
 8016be0:	4603      	mov	r3, r0
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	4618      	mov	r0, r3
 8016be6:	f003 fb9b 	bl	801a320 <free>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	3301      	adds	r3, #1
 8016bee:	60fb      	str	r3, [r7, #12]
 8016bf0:	e7e6      	b.n	8016bc0 <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers.clear();
 8016bf2:	4806      	ldr	r0, [pc, #24]	; (8016c0c <_Z19trained_model_resetPFvPvE+0x68>)
 8016bf4:	f000 f90f 	bl	8016e16 <_ZNSt6vectorIPvSaIS0_EE5clearEv>
  return kTfLiteOk;
 8016bf8:	2300      	movs	r3, #0
}
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	3710      	adds	r7, #16
 8016bfe:	46bd      	mov	sp, r7
 8016c00:	bd80      	pop	{r7, pc}
 8016c02:	bf00      	nop
 8016c04:	20000628 	.word	0x20000628
 8016c08:	20000aac 	.word	0x20000aac
 8016c0c:	20000aa0 	.word	0x20000aa0

08016c10 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b082      	sub	sp, #8
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8016c18:	6878      	ldr	r0, [r7, #4]
 8016c1a:	f000 f90a 	bl	8016e32 <_ZNSaIPvEC1Ev>
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	4618      	mov	r0, r3
 8016c22:	f000 f912 	bl	8016e4a <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	4618      	mov	r0, r3
 8016c2a:	3708      	adds	r7, #8
 8016c2c:	46bd      	mov	sp, r7
 8016c2e:	bd80      	pop	{r7, pc}

08016c30 <_ZNSaIPvED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b082      	sub	sp, #8
 8016c34:	af00      	add	r7, sp, #0
 8016c36:	6078      	str	r0, [r7, #4]
 8016c38:	6878      	ldr	r0, [r7, #4]
 8016c3a:	f000 f91a 	bl	8016e72 <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	4618      	mov	r0, r3
 8016c42:	3708      	adds	r7, #8
 8016c44:	46bd      	mov	sp, r7
 8016c46:	bd80      	pop	{r7, pc}

08016c48 <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8016c48:	b580      	push	{r7, lr}
 8016c4a:	b082      	sub	sp, #8
 8016c4c:	af00      	add	r7, sp, #0
 8016c4e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	689a      	ldr	r2, [r3, #8]
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	1ad3      	subs	r3, r2, r3
 8016c5e:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8016c60:	461a      	mov	r2, r3
 8016c62:	6878      	ldr	r0, [r7, #4]
 8016c64:	f000 f910 	bl	8016e88 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      }
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	f7ff fbfe 	bl	801646c <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	4618      	mov	r0, r3
 8016c74:	3708      	adds	r7, #8
 8016c76:	46bd      	mov	sp, r7
 8016c78:	bd80      	pop	{r7, pc}

08016c7a <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8016c7a:	b580      	push	{r7, lr}
 8016c7c:	b082      	sub	sp, #8
 8016c7e:	af00      	add	r7, sp, #0
 8016c80:	6078      	str	r0, [r7, #4]
 8016c82:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	685a      	ldr	r2, [r3, #4]
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	689b      	ldr	r3, [r3, #8]
 8016c8c:	429a      	cmp	r2, r3
 8016c8e:	d00c      	beq.n	8016caa <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	685b      	ldr	r3, [r3, #4]
 8016c96:	683a      	ldr	r2, [r7, #0]
 8016c98:	4619      	mov	r1, r3
 8016c9a:	f000 f908 	bl	8016eae <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	685b      	ldr	r3, [r3, #4]
 8016ca2:	1d1a      	adds	r2, r3, #4
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8016ca8:	e008      	b.n	8016cbc <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x42>
	  _M_realloc_insert(end(), __x);
 8016caa:	6878      	ldr	r0, [r7, #4]
 8016cac:	f000 f912 	bl	8016ed4 <_ZNSt6vectorIPvSaIS0_EE3endEv>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	683a      	ldr	r2, [r7, #0]
 8016cb4:	4619      	mov	r1, r3
 8016cb6:	6878      	ldr	r0, [r7, #4]
 8016cb8:	f000 f934 	bl	8016f24 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8016cbc:	bf00      	nop
 8016cbe:	3708      	adds	r7, #8
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	bd80      	pop	{r7, pc}

08016cc4 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b082      	sub	sp, #8
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8016ccc:	6878      	ldr	r0, [r7, #4]
 8016cce:	f000 f9e5 	bl	801709c <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	f000 f9ed 	bl	80170b4 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>
	{ }
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	4618      	mov	r0, r3
 8016cde:	3708      	adds	r7, #8
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bd80      	pop	{r7, pc}

08016ce4 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b082      	sub	sp, #8
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
 8016cec:	6878      	ldr	r0, [r7, #4]
 8016cee:	f000 f9f5 	bl	80170dc <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	3708      	adds	r7, #8
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	bd80      	pop	{r7, pc}

08016cfc <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b082      	sub	sp, #8
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	689a      	ldr	r2, [r3, #8]
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	1ad3      	subs	r3, r2, r3
 8016d12:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8016d14:	461a      	mov	r2, r3
 8016d16:	6878      	ldr	r0, [r7, #4]
 8016d18:	f000 f9eb 	bl	80170f2 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      }
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f7ff fc0e 	bl	8016540 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	4618      	mov	r0, r3
 8016d28:	3708      	adds	r7, #8
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	bd80      	pop	{r7, pc}

08016d2e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8016d2e:	b580      	push	{r7, lr}
 8016d30:	b082      	sub	sp, #8
 8016d32:	af00      	add	r7, sp, #0
 8016d34:	6078      	str	r0, [r7, #4]
 8016d36:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	685a      	ldr	r2, [r3, #4]
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	689b      	ldr	r3, [r3, #8]
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d00d      	beq.n	8016d60 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8016d44:	6878      	ldr	r0, [r7, #4]
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	685b      	ldr	r3, [r3, #4]
 8016d4a:	683a      	ldr	r2, [r7, #0]
 8016d4c:	4619      	mov	r1, r3
 8016d4e:	f000 f9e3 	bl	8017118 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	685b      	ldr	r3, [r3, #4]
 8016d56:	f103 0208 	add.w	r2, r3, #8
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	605a      	str	r2, [r3, #4]
      }
 8016d5e:	e008      	b.n	8016d72 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x44>
	  _M_realloc_insert(end(), __x);
 8016d60:	6878      	ldr	r0, [r7, #4]
 8016d62:	f000 f9ec 	bl	801713e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>
 8016d66:	4603      	mov	r3, r0
 8016d68:	683a      	ldr	r2, [r7, #0]
 8016d6a:	4619      	mov	r1, r3
 8016d6c:	6878      	ldr	r0, [r7, #4]
 8016d6e:	f000 fa0d 	bl	801718c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8016d72:	bf00      	nop
 8016d74:	3708      	adds	r7, #8
 8016d76:	46bd      	mov	sp, r7
 8016d78:	bd80      	pop	{r7, pc}

08016d7a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8016d7a:	b480      	push	{r7}
 8016d7c:	b083      	sub	sp, #12
 8016d7e:	af00      	add	r7, sp, #0
 8016d80:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	685a      	ldr	r2, [r3, #4]
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	1ad3      	subs	r3, r2, r3
 8016d8c:	10db      	asrs	r3, r3, #3
 8016d8e:	4618      	mov	r0, r3
 8016d90:	370c      	adds	r7, #12
 8016d92:	46bd      	mov	sp, r7
 8016d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d98:	4770      	bx	lr

08016d9a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8016d9a:	b480      	push	{r7}
 8016d9c:	b083      	sub	sp, #12
 8016d9e:	af00      	add	r7, sp, #0
 8016da0:	6078      	str	r0, [r7, #4]
 8016da2:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	681a      	ldr	r2, [r3, #0]
 8016da8:	683b      	ldr	r3, [r7, #0]
 8016daa:	00db      	lsls	r3, r3, #3
 8016dac:	4413      	add	r3, r2
      }
 8016dae:	4618      	mov	r0, r3
 8016db0:	370c      	adds	r7, #12
 8016db2:	46bd      	mov	sp, r7
 8016db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db8:	4770      	bx	lr

08016dba <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8016dba:	b580      	push	{r7, lr}
 8016dbc:	b082      	sub	sp, #8
 8016dbe:	af00      	add	r7, sp, #0
 8016dc0:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	4619      	mov	r1, r3
 8016dc8:	6878      	ldr	r0, [r7, #4]
 8016dca:	f000 fa9b 	bl	8017304 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>
 8016dce:	bf00      	nop
 8016dd0:	3708      	adds	r7, #8
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bd80      	pop	{r7, pc}

08016dd6 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8016dd6:	b480      	push	{r7}
 8016dd8:	b083      	sub	sp, #12
 8016dda:	af00      	add	r7, sp, #0
 8016ddc:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	685a      	ldr	r2, [r3, #4]
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	1ad3      	subs	r3, r2, r3
 8016de8:	109b      	asrs	r3, r3, #2
 8016dea:	4618      	mov	r0, r3
 8016dec:	370c      	adds	r7, #12
 8016dee:	46bd      	mov	sp, r7
 8016df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df4:	4770      	bx	lr

08016df6 <_ZNSt6vectorIPvSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8016df6:	b480      	push	{r7}
 8016df8:	b083      	sub	sp, #12
 8016dfa:	af00      	add	r7, sp, #0
 8016dfc:	6078      	str	r0, [r7, #4]
 8016dfe:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	681a      	ldr	r2, [r3, #0]
 8016e04:	683b      	ldr	r3, [r7, #0]
 8016e06:	009b      	lsls	r3, r3, #2
 8016e08:	4413      	add	r3, r2
      }
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	370c      	adds	r7, #12
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e14:	4770      	bx	lr

08016e16 <_ZNSt6vectorIPvSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8016e16:	b580      	push	{r7, lr}
 8016e18:	b082      	sub	sp, #8
 8016e1a:	af00      	add	r7, sp, #0
 8016e1c:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	4619      	mov	r1, r3
 8016e24:	6878      	ldr	r0, [r7, #4]
 8016e26:	f000 fa8e 	bl	8017346 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>
 8016e2a:	bf00      	nop
 8016e2c:	3708      	adds	r7, #8
 8016e2e:	46bd      	mov	sp, r7
 8016e30:	bd80      	pop	{r7, pc}

08016e32 <_ZNSaIPvEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8016e32:	b580      	push	{r7, lr}
 8016e34:	b082      	sub	sp, #8
 8016e36:	af00      	add	r7, sp, #0
 8016e38:	6078      	str	r0, [r7, #4]
 8016e3a:	6878      	ldr	r0, [r7, #4]
 8016e3c:	f000 faa4 	bl	8017388 <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	4618      	mov	r0, r3
 8016e44:	3708      	adds	r7, #8
 8016e46:	46bd      	mov	sp, r7
 8016e48:	bd80      	pop	{r7, pc}

08016e4a <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8016e4a:	b480      	push	{r7}
 8016e4c:	b083      	sub	sp, #12
 8016e4e:	af00      	add	r7, sp, #0
 8016e50:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	2200      	movs	r2, #0
 8016e56:	601a      	str	r2, [r3, #0]
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	2200      	movs	r2, #0
 8016e5c:	605a      	str	r2, [r3, #4]
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	2200      	movs	r2, #0
 8016e62:	609a      	str	r2, [r3, #8]
	{ }
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	4618      	mov	r0, r3
 8016e68:	370c      	adds	r7, #12
 8016e6a:	46bd      	mov	sp, r7
 8016e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e70:	4770      	bx	lr

08016e72 <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8016e72:	b480      	push	{r7}
 8016e74:	b083      	sub	sp, #12
 8016e76:	af00      	add	r7, sp, #0
 8016e78:	6078      	str	r0, [r7, #4]
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	370c      	adds	r7, #12
 8016e80:	46bd      	mov	sp, r7
 8016e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e86:	4770      	bx	lr

08016e88 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8016e88:	b580      	push	{r7, lr}
 8016e8a:	b084      	sub	sp, #16
 8016e8c:	af00      	add	r7, sp, #0
 8016e8e:	60f8      	str	r0, [r7, #12]
 8016e90:	60b9      	str	r1, [r7, #8]
 8016e92:	607a      	str	r2, [r7, #4]
	if (__p)
 8016e94:	68bb      	ldr	r3, [r7, #8]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d005      	beq.n	8016ea6 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	687a      	ldr	r2, [r7, #4]
 8016e9e:	68b9      	ldr	r1, [r7, #8]
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	f000 fa7c 	bl	801739e <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>
      }
 8016ea6:	bf00      	nop
 8016ea8:	3710      	adds	r7, #16
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	bd80      	pop	{r7, pc}

08016eae <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8016eae:	b580      	push	{r7, lr}
 8016eb0:	b084      	sub	sp, #16
 8016eb2:	af00      	add	r7, sp, #0
 8016eb4:	60f8      	str	r0, [r7, #12]
 8016eb6:	60b9      	str	r1, [r7, #8]
 8016eb8:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8016eba:	6878      	ldr	r0, [r7, #4]
 8016ebc:	f000 fa7e 	bl	80173bc <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8016ec0:	4603      	mov	r3, r0
 8016ec2:	461a      	mov	r2, r3
 8016ec4:	68b9      	ldr	r1, [r7, #8]
 8016ec6:	68f8      	ldr	r0, [r7, #12]
 8016ec8:	f000 fa83 	bl	80173d2 <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8016ecc:	bf00      	nop
 8016ece:	3710      	adds	r7, #16
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	bd80      	pop	{r7, pc}

08016ed4 <_ZNSt6vectorIPvSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b084      	sub	sp, #16
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	1d1a      	adds	r2, r3, #4
 8016ee0:	f107 030c 	add.w	r3, r7, #12
 8016ee4:	4611      	mov	r1, r2
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f000 fa89 	bl	80173fe <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	4618      	mov	r0, r3
 8016ef0:	3710      	adds	r7, #16
 8016ef2:	46bd      	mov	sp, r7
 8016ef4:	bd80      	pop	{r7, pc}

08016ef6 <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8016ef6:	b580      	push	{r7, lr}
 8016ef8:	b082      	sub	sp, #8
 8016efa:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8016efc:	4618      	mov	r0, r3
 8016efe:	f000 f805 	bl	8016f0c <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8016f02:	4603      	mov	r3, r0
      }
 8016f04:	4618      	mov	r0, r3
 8016f06:	3708      	adds	r7, #8
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	bd80      	pop	{r7, pc}

08016f0c <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8016f0c:	b480      	push	{r7}
 8016f0e:	b083      	sub	sp, #12
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8016f14:	2301      	movs	r3, #1
      }
 8016f16:	4618      	mov	r0, r3
 8016f18:	370c      	adds	r7, #12
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f20:	4770      	bx	lr
	...

08016f24 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8016f24:	b5b0      	push	{r4, r5, r7, lr}
 8016f26:	b08c      	sub	sp, #48	; 0x30
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	60f8      	str	r0, [r7, #12]
 8016f2c:	60b9      	str	r1, [r7, #8]
 8016f2e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8016f30:	4a59      	ldr	r2, [pc, #356]	; (8017098 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 8016f32:	2101      	movs	r1, #1
 8016f34:	68f8      	ldr	r0, [r7, #12]
 8016f36:	f000 fa72 	bl	801741e <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>
 8016f3a:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	685b      	ldr	r3, [r3, #4]
 8016f46:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8016f48:	68f8      	ldr	r0, [r7, #12]
 8016f4a:	f000 faaf 	bl	80174ac <_ZNSt6vectorIPvSaIS0_EE5beginEv>
 8016f4e:	4603      	mov	r3, r0
 8016f50:	617b      	str	r3, [r7, #20]
 8016f52:	f107 0214 	add.w	r2, r7, #20
 8016f56:	f107 0308 	add.w	r3, r7, #8
 8016f5a:	4611      	mov	r1, r2
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	f000 fab5 	bl	80174cc <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8016f62:	4603      	mov	r3, r0
 8016f64:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	f000 fac3 	bl	80174f6 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>
 8016f70:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8016f72:	69bb      	ldr	r3, [r7, #24]
 8016f74:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8016f76:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8016f78:	69fb      	ldr	r3, [r7, #28]
 8016f7a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8016f7c:	69ba      	ldr	r2, [r7, #24]
 8016f7e:	18d5      	adds	r5, r2, r3
 8016f80:	6878      	ldr	r0, [r7, #4]
 8016f82:	f000 fa1b 	bl	80173bc <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8016f86:	4603      	mov	r3, r0
 8016f88:	461a      	mov	r2, r3
 8016f8a:	4629      	mov	r1, r5
 8016f8c:	4620      	mov	r0, r4
 8016f8e:	f7ff ff8e 	bl	8016eae <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8016f92:	2300      	movs	r3, #0
 8016f94:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8016f96:	f7ff ffae 	bl	8016ef6 <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d027      	beq.n	8016ff0 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8016fa0:	f107 0308 	add.w	r3, r7, #8
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	f000 face 	bl	8017546 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8016faa:	4603      	mov	r3, r0
 8016fac:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	f000 fad3 	bl	801755c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8016fb6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8016fb8:	69ba      	ldr	r2, [r7, #24]
 8016fba:	4621      	mov	r1, r4
 8016fbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016fbe:	f000 faae 	bl	801751e <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8016fc2:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8016fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fc6:	3304      	adds	r3, #4
 8016fc8:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8016fca:	f107 0308 	add.w	r3, r7, #8
 8016fce:	4618      	mov	r0, r3
 8016fd0:	f000 fab9 	bl	8017546 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	4618      	mov	r0, r3
 8016fdc:	f000 fabe 	bl	801755c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8016fe0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8016fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016fe4:	6a39      	ldr	r1, [r7, #32]
 8016fe6:	4620      	mov	r0, r4
 8016fe8:	f000 fa99 	bl	801751e <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8016fec:	62f8      	str	r0, [r7, #44]	; 0x2c
 8016fee:	e026      	b.n	801703e <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8016ff0:	f107 0308 	add.w	r3, r7, #8
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	f000 faa6 	bl	8017546 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8016ffa:	4603      	mov	r3, r0
 8016ffc:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	4618      	mov	r0, r3
 8017002:	f000 faab 	bl	801755c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8017006:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8017008:	69ba      	ldr	r2, [r7, #24]
 801700a:	4621      	mov	r1, r4
 801700c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801700e:	f000 fab0 	bl	8017572 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8017012:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8017014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017016:	3304      	adds	r3, #4
 8017018:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 801701a:	f107 0308 	add.w	r3, r7, #8
 801701e:	4618      	mov	r0, r3
 8017020:	f000 fa91 	bl	8017546 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8017024:	4603      	mov	r3, r0
 8017026:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	4618      	mov	r0, r3
 801702c:	f000 fa96 	bl	801755c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8017030:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8017032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017034:	6a39      	ldr	r1, [r7, #32]
 8017036:	4620      	mov	r0, r4
 8017038:	f000 fa9b 	bl	8017572 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 801703c:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 801703e:	f7ff ff5a 	bl	8016ef6 <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 8017042:	4603      	mov	r3, r0
 8017044:	f083 0301 	eor.w	r3, r3, #1
 8017048:	b2db      	uxtb	r3, r3
 801704a:	2b00      	cmp	r3, #0
 801704c:	d009      	beq.n	8017062 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	4618      	mov	r0, r3
 8017052:	f000 fa83 	bl	801755c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8017056:	4603      	mov	r3, r0
 8017058:	461a      	mov	r2, r3
 801705a:	6a39      	ldr	r1, [r7, #32]
 801705c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801705e:	f000 faa1 	bl	80175a4 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8017062:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	689a      	ldr	r2, [r3, #8]
 8017068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801706a:	1ad3      	subs	r3, r2, r3
 801706c:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 801706e:	461a      	mov	r2, r3
 8017070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017072:	f7ff ff09 	bl	8016e88 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	69ba      	ldr	r2, [r7, #24]
 801707a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017080:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8017082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017084:	009b      	lsls	r3, r3, #2
 8017086:	69ba      	ldr	r2, [r7, #24]
 8017088:	441a      	add	r2, r3
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	609a      	str	r2, [r3, #8]
    }
 801708e:	bf00      	nop
 8017090:	3730      	adds	r7, #48	; 0x30
 8017092:	46bd      	mov	sp, r7
 8017094:	bdb0      	pop	{r4, r5, r7, pc}
 8017096:	bf00      	nop
 8017098:	0801eb44 	.word	0x0801eb44

0801709c <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
 801709c:	b580      	push	{r7, lr}
 801709e:	b082      	sub	sp, #8
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	6078      	str	r0, [r7, #4]
 80170a4:	6878      	ldr	r0, [r7, #4]
 80170a6:	f000 fa8b 	bl	80175c0 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	4618      	mov	r0, r3
 80170ae:	3708      	adds	r7, #8
 80170b0:	46bd      	mov	sp, r7
 80170b2:	bd80      	pop	{r7, pc}

080170b4 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80170b4:	b480      	push	{r7}
 80170b6:	b083      	sub	sp, #12
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	2200      	movs	r2, #0
 80170c0:	601a      	str	r2, [r3, #0]
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	2200      	movs	r2, #0
 80170c6:	605a      	str	r2, [r3, #4]
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	2200      	movs	r2, #0
 80170cc:	609a      	str	r2, [r3, #8]
	{ }
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	4618      	mov	r0, r3
 80170d2:	370c      	adds	r7, #12
 80170d4:	46bd      	mov	sp, r7
 80170d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170da:	4770      	bx	lr

080170dc <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 80170dc:	b480      	push	{r7}
 80170de:	b083      	sub	sp, #12
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	6078      	str	r0, [r7, #4]
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	4618      	mov	r0, r3
 80170e8:	370c      	adds	r7, #12
 80170ea:	46bd      	mov	sp, r7
 80170ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f0:	4770      	bx	lr

080170f2 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80170f2:	b580      	push	{r7, lr}
 80170f4:	b084      	sub	sp, #16
 80170f6:	af00      	add	r7, sp, #0
 80170f8:	60f8      	str	r0, [r7, #12]
 80170fa:	60b9      	str	r1, [r7, #8]
 80170fc:	607a      	str	r2, [r7, #4]
	if (__p)
 80170fe:	68bb      	ldr	r3, [r7, #8]
 8017100:	2b00      	cmp	r3, #0
 8017102:	d005      	beq.n	8017110 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	687a      	ldr	r2, [r7, #4]
 8017108:	68b9      	ldr	r1, [r7, #8]
 801710a:	4618      	mov	r0, r3
 801710c:	f000 fa63 	bl	80175d6 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>
      }
 8017110:	bf00      	nop
 8017112:	3710      	adds	r7, #16
 8017114:	46bd      	mov	sp, r7
 8017116:	bd80      	pop	{r7, pc}

08017118 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8017118:	b580      	push	{r7, lr}
 801711a:	b084      	sub	sp, #16
 801711c:	af00      	add	r7, sp, #0
 801711e:	60f8      	str	r0, [r7, #12]
 8017120:	60b9      	str	r1, [r7, #8]
 8017122:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8017124:	6878      	ldr	r0, [r7, #4]
 8017126:	f000 fa65 	bl	80175f4 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 801712a:	4603      	mov	r3, r0
 801712c:	461a      	mov	r2, r3
 801712e:	68b9      	ldr	r1, [r7, #8]
 8017130:	68f8      	ldr	r0, [r7, #12]
 8017132:	f000 fa6a 	bl	801760a <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 8017136:	bf00      	nop
 8017138:	3710      	adds	r7, #16
 801713a:	46bd      	mov	sp, r7
 801713c:	bd80      	pop	{r7, pc}

0801713e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801713e:	b580      	push	{r7, lr}
 8017140:	b084      	sub	sp, #16
 8017142:	af00      	add	r7, sp, #0
 8017144:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	1d1a      	adds	r2, r3, #4
 801714a:	f107 030c 	add.w	r3, r7, #12
 801714e:	4611      	mov	r1, r2
 8017150:	4618      	mov	r0, r3
 8017152:	f000 fa73 	bl	801763c <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	4618      	mov	r0, r3
 801715a:	3710      	adds	r7, #16
 801715c:	46bd      	mov	sp, r7
 801715e:	bd80      	pop	{r7, pc}

08017160 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8017160:	b580      	push	{r7, lr}
 8017162:	b082      	sub	sp, #8
 8017164:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8017166:	4618      	mov	r0, r3
 8017168:	f000 f805 	bl	8017176 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 801716c:	4603      	mov	r3, r0
      }
 801716e:	4618      	mov	r0, r3
 8017170:	3708      	adds	r7, #8
 8017172:	46bd      	mov	sp, r7
 8017174:	bd80      	pop	{r7, pc}

08017176 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8017176:	b480      	push	{r7}
 8017178:	b083      	sub	sp, #12
 801717a:	af00      	add	r7, sp, #0
 801717c:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 801717e:	2301      	movs	r3, #1
      }
 8017180:	4618      	mov	r0, r3
 8017182:	370c      	adds	r7, #12
 8017184:	46bd      	mov	sp, r7
 8017186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801718a:	4770      	bx	lr

0801718c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801718c:	b5b0      	push	{r4, r5, r7, lr}
 801718e:	b08c      	sub	sp, #48	; 0x30
 8017190:	af00      	add	r7, sp, #0
 8017192:	60f8      	str	r0, [r7, #12]
 8017194:	60b9      	str	r1, [r7, #8]
 8017196:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8017198:	4a59      	ldr	r2, [pc, #356]	; (8017300 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 801719a:	2101      	movs	r1, #1
 801719c:	68f8      	ldr	r0, [r7, #12]
 801719e:	f000 fa5d 	bl	801765c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>
 80171a2:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	685b      	ldr	r3, [r3, #4]
 80171ae:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80171b0:	68f8      	ldr	r0, [r7, #12]
 80171b2:	f000 fa9a 	bl	80176ea <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>
 80171b6:	4603      	mov	r3, r0
 80171b8:	617b      	str	r3, [r7, #20]
 80171ba:	f107 0214 	add.w	r2, r7, #20
 80171be:	f107 0308 	add.w	r3, r7, #8
 80171c2:	4611      	mov	r1, r2
 80171c4:	4618      	mov	r0, r3
 80171c6:	f000 faa0 	bl	801770a <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80171ca:	4603      	mov	r3, r0
 80171cc:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80171d2:	4618      	mov	r0, r3
 80171d4:	f000 faae 	bl	8017734 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>
 80171d8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80171da:	69bb      	ldr	r3, [r7, #24]
 80171dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 80171de:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80171e0:	69fb      	ldr	r3, [r7, #28]
 80171e2:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 80171e4:	69ba      	ldr	r2, [r7, #24]
 80171e6:	18d5      	adds	r5, r2, r3
 80171e8:	6878      	ldr	r0, [r7, #4]
 80171ea:	f000 fa03 	bl	80175f4 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 80171ee:	4603      	mov	r3, r0
 80171f0:	461a      	mov	r2, r3
 80171f2:	4629      	mov	r1, r5
 80171f4:	4620      	mov	r0, r4
 80171f6:	f7ff ff8f 	bl	8017118 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80171fa:	2300      	movs	r3, #0
 80171fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80171fe:	f7ff ffaf 	bl	8017160 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 8017202:	4603      	mov	r3, r0
 8017204:	2b00      	cmp	r3, #0
 8017206:	d027      	beq.n	8017258 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8017208:	f107 0308 	add.w	r3, r7, #8
 801720c:	4618      	mov	r0, r3
 801720e:	f000 fab9 	bl	8017784 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8017212:	4603      	mov	r3, r0
 8017214:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	4618      	mov	r0, r3
 801721a:	f000 fabe 	bl	801779a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 801721e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8017220:	69ba      	ldr	r2, [r7, #24]
 8017222:	4621      	mov	r1, r4
 8017224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017226:	f000 fa99 	bl	801775c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 801722a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 801722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801722e:	3308      	adds	r3, #8
 8017230:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8017232:	f107 0308 	add.w	r3, r7, #8
 8017236:	4618      	mov	r0, r3
 8017238:	f000 faa4 	bl	8017784 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 801723c:	4603      	mov	r3, r0
 801723e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	4618      	mov	r0, r3
 8017244:	f000 faa9 	bl	801779a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8017248:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801724a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801724c:	6a39      	ldr	r1, [r7, #32]
 801724e:	4620      	mov	r0, r4
 8017250:	f000 fa84 	bl	801775c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8017254:	62f8      	str	r0, [r7, #44]	; 0x2c
 8017256:	e026      	b.n	80172a6 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8017258:	f107 0308 	add.w	r3, r7, #8
 801725c:	4618      	mov	r0, r3
 801725e:	f000 fa91 	bl	8017784 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8017262:	4603      	mov	r3, r0
 8017264:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	4618      	mov	r0, r3
 801726a:	f000 fa96 	bl	801779a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 801726e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8017270:	69ba      	ldr	r2, [r7, #24]
 8017272:	4621      	mov	r1, r4
 8017274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017276:	f000 fa9b 	bl	80177b0 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 801727a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 801727c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801727e:	3308      	adds	r3, #8
 8017280:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8017282:	f107 0308 	add.w	r3, r7, #8
 8017286:	4618      	mov	r0, r3
 8017288:	f000 fa7c 	bl	8017784 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 801728c:	4603      	mov	r3, r0
 801728e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	4618      	mov	r0, r3
 8017294:	f000 fa81 	bl	801779a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8017298:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 801729a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801729c:	6a39      	ldr	r1, [r7, #32]
 801729e:	4620      	mov	r0, r4
 80172a0:	f000 fa86 	bl	80177b0 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 80172a4:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80172a6:	f7ff ff5b 	bl	8017160 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 80172aa:	4603      	mov	r3, r0
 80172ac:	f083 0301 	eor.w	r3, r3, #1
 80172b0:	b2db      	uxtb	r3, r3
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d009      	beq.n	80172ca <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	4618      	mov	r0, r3
 80172ba:	f000 fa6e 	bl	801779a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 80172be:	4603      	mov	r3, r0
 80172c0:	461a      	mov	r2, r3
 80172c2:	6a39      	ldr	r1, [r7, #32]
 80172c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172c6:	f000 fa8c 	bl	80177e2 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 80172ca:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	689a      	ldr	r2, [r3, #8]
 80172d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172d2:	1ad3      	subs	r3, r2, r3
 80172d4:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 80172d6:	461a      	mov	r2, r3
 80172d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80172da:	f7ff ff0a 	bl	80170f2 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	69ba      	ldr	r2, [r7, #24]
 80172e2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80172e8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80172ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172ec:	00db      	lsls	r3, r3, #3
 80172ee:	69ba      	ldr	r2, [r7, #24]
 80172f0:	441a      	add	r2, r3
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	609a      	str	r2, [r3, #8]
    }
 80172f6:	bf00      	nop
 80172f8:	3730      	adds	r7, #48	; 0x30
 80172fa:	46bd      	mov	sp, r7
 80172fc:	bdb0      	pop	{r4, r5, r7, pc}
 80172fe:	bf00      	nop
 8017300:	0801eb44 	.word	0x0801eb44

08017304 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8017304:	b590      	push	{r4, r7, lr}
 8017306:	b085      	sub	sp, #20
 8017308:	af00      	add	r7, sp, #0
 801730a:	6078      	str	r0, [r7, #4]
 801730c:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	685a      	ldr	r2, [r3, #4]
 8017312:	683b      	ldr	r3, [r7, #0]
 8017314:	1ad3      	subs	r3, r2, r3
 8017316:	10db      	asrs	r3, r3, #3
 8017318:	60fb      	str	r3, [r7, #12]
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d00e      	beq.n	801733e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	4618      	mov	r0, r3
 8017328:	f000 fa37 	bl	801779a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 801732c:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 801732e:	461a      	mov	r2, r3
 8017330:	4621      	mov	r1, r4
 8017332:	6838      	ldr	r0, [r7, #0]
 8017334:	f000 fa55 	bl	80177e2 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	683a      	ldr	r2, [r7, #0]
 801733c:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 801733e:	bf00      	nop
 8017340:	3714      	adds	r7, #20
 8017342:	46bd      	mov	sp, r7
 8017344:	bd90      	pop	{r4, r7, pc}

08017346 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8017346:	b590      	push	{r4, r7, lr}
 8017348:	b085      	sub	sp, #20
 801734a:	af00      	add	r7, sp, #0
 801734c:	6078      	str	r0, [r7, #4]
 801734e:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	685a      	ldr	r2, [r3, #4]
 8017354:	683b      	ldr	r3, [r7, #0]
 8017356:	1ad3      	subs	r3, r2, r3
 8017358:	109b      	asrs	r3, r3, #2
 801735a:	60fb      	str	r3, [r7, #12]
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	2b00      	cmp	r3, #0
 8017360:	d00e      	beq.n	8017380 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	4618      	mov	r0, r3
 801736a:	f000 f8f7 	bl	801755c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 801736e:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8017370:	461a      	mov	r2, r3
 8017372:	4621      	mov	r1, r4
 8017374:	6838      	ldr	r0, [r7, #0]
 8017376:	f000 f915 	bl	80175a4 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	683a      	ldr	r2, [r7, #0]
 801737e:	605a      	str	r2, [r3, #4]
      }
 8017380:	bf00      	nop
 8017382:	3714      	adds	r7, #20
 8017384:	46bd      	mov	sp, r7
 8017386:	bd90      	pop	{r4, r7, pc}

08017388 <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8017388:	b480      	push	{r7}
 801738a:	b083      	sub	sp, #12
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	4618      	mov	r0, r3
 8017394:	370c      	adds	r7, #12
 8017396:	46bd      	mov	sp, r7
 8017398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801739c:	4770      	bx	lr

0801739e <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801739e:	b580      	push	{r7, lr}
 80173a0:	b084      	sub	sp, #16
 80173a2:	af00      	add	r7, sp, #0
 80173a4:	60f8      	str	r0, [r7, #12]
 80173a6:	60b9      	str	r1, [r7, #8]
 80173a8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80173aa:	687a      	ldr	r2, [r7, #4]
 80173ac:	68b9      	ldr	r1, [r7, #8]
 80173ae:	68f8      	ldr	r0, [r7, #12]
 80173b0:	f000 fa25 	bl	80177fe <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>
 80173b4:	bf00      	nop
 80173b6:	3710      	adds	r7, #16
 80173b8:	46bd      	mov	sp, r7
 80173ba:	bd80      	pop	{r7, pc}

080173bc <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80173bc:	b480      	push	{r7}
 80173be:	b083      	sub	sp, #12
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	4618      	mov	r0, r3
 80173c8:	370c      	adds	r7, #12
 80173ca:	46bd      	mov	sp, r7
 80173cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d0:	4770      	bx	lr

080173d2 <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80173d2:	b590      	push	{r4, r7, lr}
 80173d4:	b085      	sub	sp, #20
 80173d6:	af00      	add	r7, sp, #0
 80173d8:	60f8      	str	r0, [r7, #12]
 80173da:	60b9      	str	r1, [r7, #8]
 80173dc:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80173de:	6878      	ldr	r0, [r7, #4]
 80173e0:	f7ff ffec 	bl	80173bc <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 80173e4:	4603      	mov	r3, r0
 80173e6:	681c      	ldr	r4, [r3, #0]
 80173e8:	68bb      	ldr	r3, [r7, #8]
 80173ea:	4619      	mov	r1, r3
 80173ec:	2004      	movs	r0, #4
 80173ee:	f7ea f82d 	bl	800144c <_ZnwjPv>
 80173f2:	4603      	mov	r3, r0
 80173f4:	601c      	str	r4, [r3, #0]
 80173f6:	bf00      	nop
 80173f8:	3714      	adds	r7, #20
 80173fa:	46bd      	mov	sp, r7
 80173fc:	bd90      	pop	{r4, r7, pc}

080173fe <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80173fe:	b480      	push	{r7}
 8017400:	b083      	sub	sp, #12
 8017402:	af00      	add	r7, sp, #0
 8017404:	6078      	str	r0, [r7, #4]
 8017406:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8017408:	683b      	ldr	r3, [r7, #0]
 801740a:	681a      	ldr	r2, [r3, #0]
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	601a      	str	r2, [r3, #0]
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	4618      	mov	r0, r3
 8017414:	370c      	adds	r7, #12
 8017416:	46bd      	mov	sp, r7
 8017418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801741c:	4770      	bx	lr

0801741e <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 801741e:	b590      	push	{r4, r7, lr}
 8017420:	b087      	sub	sp, #28
 8017422:	af00      	add	r7, sp, #0
 8017424:	60f8      	str	r0, [r7, #12]
 8017426:	60b9      	str	r1, [r7, #8]
 8017428:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 801742a:	68f8      	ldr	r0, [r7, #12]
 801742c:	f000 f9f7 	bl	801781e <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 8017430:	4604      	mov	r4, r0
 8017432:	68f8      	ldr	r0, [r7, #12]
 8017434:	f7ff fccf 	bl	8016dd6 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8017438:	4603      	mov	r3, r0
 801743a:	1ae2      	subs	r2, r4, r3
 801743c:	68bb      	ldr	r3, [r7, #8]
 801743e:	429a      	cmp	r2, r3
 8017440:	bf34      	ite	cc
 8017442:	2301      	movcc	r3, #1
 8017444:	2300      	movcs	r3, #0
 8017446:	b2db      	uxtb	r3, r3
 8017448:	2b00      	cmp	r3, #0
 801744a:	d002      	beq.n	8017452 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801744c:	6878      	ldr	r0, [r7, #4]
 801744e:	f001 fbd3 	bl	8018bf8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8017452:	68f8      	ldr	r0, [r7, #12]
 8017454:	f7ff fcbf 	bl	8016dd6 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8017458:	4604      	mov	r4, r0
 801745a:	68f8      	ldr	r0, [r7, #12]
 801745c:	f7ff fcbb 	bl	8016dd6 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8017460:	4603      	mov	r3, r0
 8017462:	613b      	str	r3, [r7, #16]
 8017464:	f107 0208 	add.w	r2, r7, #8
 8017468:	f107 0310 	add.w	r3, r7, #16
 801746c:	4611      	mov	r1, r2
 801746e:	4618      	mov	r0, r3
 8017470:	f7eb ff22 	bl	80032b8 <_ZSt3maxIjERKT_S2_S2_>
 8017474:	4603      	mov	r3, r0
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	4423      	add	r3, r4
 801747a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801747c:	68f8      	ldr	r0, [r7, #12]
 801747e:	f7ff fcaa 	bl	8016dd6 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8017482:	4602      	mov	r2, r0
 8017484:	697b      	ldr	r3, [r7, #20]
 8017486:	4293      	cmp	r3, r2
 8017488:	d306      	bcc.n	8017498 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x7a>
 801748a:	68f8      	ldr	r0, [r7, #12]
 801748c:	f000 f9c7 	bl	801781e <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 8017490:	4602      	mov	r2, r0
 8017492:	697b      	ldr	r3, [r7, #20]
 8017494:	4293      	cmp	r3, r2
 8017496:	d904      	bls.n	80174a2 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x84>
 8017498:	68f8      	ldr	r0, [r7, #12]
 801749a:	f000 f9c0 	bl	801781e <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 801749e:	4603      	mov	r3, r0
 80174a0:	e000      	b.n	80174a4 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x86>
 80174a2:	697b      	ldr	r3, [r7, #20]
      }
 80174a4:	4618      	mov	r0, r3
 80174a6:	371c      	adds	r7, #28
 80174a8:	46bd      	mov	sp, r7
 80174aa:	bd90      	pop	{r4, r7, pc}

080174ac <_ZNSt6vectorIPvSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80174ac:	b580      	push	{r7, lr}
 80174ae:	b084      	sub	sp, #16
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80174b4:	687a      	ldr	r2, [r7, #4]
 80174b6:	f107 030c 	add.w	r3, r7, #12
 80174ba:	4611      	mov	r1, r2
 80174bc:	4618      	mov	r0, r3
 80174be:	f7ff ff9e 	bl	80173fe <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	4618      	mov	r0, r3
 80174c6:	3710      	adds	r7, #16
 80174c8:	46bd      	mov	sp, r7
 80174ca:	bd80      	pop	{r7, pc}

080174cc <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80174cc:	b590      	push	{r4, r7, lr}
 80174ce:	b083      	sub	sp, #12
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	6078      	str	r0, [r7, #4]
 80174d4:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80174d6:	6878      	ldr	r0, [r7, #4]
 80174d8:	f000 f835 	bl	8017546 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 80174dc:	4603      	mov	r3, r0
 80174de:	681c      	ldr	r4, [r3, #0]
 80174e0:	6838      	ldr	r0, [r7, #0]
 80174e2:	f000 f830 	bl	8017546 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 80174e6:	4603      	mov	r3, r0
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	1ae3      	subs	r3, r4, r3
 80174ec:	109b      	asrs	r3, r3, #2
 80174ee:	4618      	mov	r0, r3
 80174f0:	370c      	adds	r7, #12
 80174f2:	46bd      	mov	sp, r7
 80174f4:	bd90      	pop	{r4, r7, pc}

080174f6 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80174f6:	b580      	push	{r7, lr}
 80174f8:	b082      	sub	sp, #8
 80174fa:	af00      	add	r7, sp, #0
 80174fc:	6078      	str	r0, [r7, #4]
 80174fe:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017500:	683b      	ldr	r3, [r7, #0]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d006      	beq.n	8017514 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x1e>
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	6839      	ldr	r1, [r7, #0]
 801750a:	4618      	mov	r0, r3
 801750c:	f000 f998 	bl	8017840 <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>
 8017510:	4603      	mov	r3, r0
 8017512:	e000      	b.n	8017516 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x20>
 8017514:	2300      	movs	r3, #0
      }
 8017516:	4618      	mov	r0, r3
 8017518:	3708      	adds	r7, #8
 801751a:	46bd      	mov	sp, r7
 801751c:	bd80      	pop	{r7, pc}

0801751e <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 801751e:	b590      	push	{r4, r7, lr}
 8017520:	b087      	sub	sp, #28
 8017522:	af02      	add	r7, sp, #8
 8017524:	60f8      	str	r0, [r7, #12]
 8017526:	60b9      	str	r1, [r7, #8]
 8017528:	607a      	str	r2, [r7, #4]
 801752a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 801752c:	f88d 4000 	strb.w	r4, [sp]
 8017530:	683b      	ldr	r3, [r7, #0]
 8017532:	687a      	ldr	r2, [r7, #4]
 8017534:	68b9      	ldr	r1, [r7, #8]
 8017536:	68f8      	ldr	r0, [r7, #12]
 8017538:	f000 f991 	bl	801785e <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 801753c:	4603      	mov	r3, r0
      }
 801753e:	4618      	mov	r0, r3
 8017540:	3714      	adds	r7, #20
 8017542:	46bd      	mov	sp, r7
 8017544:	bd90      	pop	{r4, r7, pc}

08017546 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8017546:	b480      	push	{r7}
 8017548:	b083      	sub	sp, #12
 801754a:	af00      	add	r7, sp, #0
 801754c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	4618      	mov	r0, r3
 8017552:	370c      	adds	r7, #12
 8017554:	46bd      	mov	sp, r7
 8017556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801755a:	4770      	bx	lr

0801755c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 801755c:	b480      	push	{r7}
 801755e:	b083      	sub	sp, #12
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	4618      	mov	r0, r3
 8017568:	370c      	adds	r7, #12
 801756a:	46bd      	mov	sp, r7
 801756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017570:	4770      	bx	lr

08017572 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8017572:	b590      	push	{r4, r7, lr}
 8017574:	b085      	sub	sp, #20
 8017576:	af00      	add	r7, sp, #0
 8017578:	60f8      	str	r0, [r7, #12]
 801757a:	60b9      	str	r1, [r7, #8]
 801757c:	607a      	str	r2, [r7, #4]
 801757e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8017580:	68f8      	ldr	r0, [r7, #12]
 8017582:	f000 f97e 	bl	8017882 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 8017586:	4604      	mov	r4, r0
 8017588:	68b8      	ldr	r0, [r7, #8]
 801758a:	f000 f97a 	bl	8017882 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 801758e:	4601      	mov	r1, r0
 8017590:	683b      	ldr	r3, [r7, #0]
 8017592:	687a      	ldr	r2, [r7, #4]
 8017594:	4620      	mov	r0, r4
 8017596:	f000 f983 	bl	80178a0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>
 801759a:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 801759c:	4618      	mov	r0, r3
 801759e:	3714      	adds	r7, #20
 80175a0:	46bd      	mov	sp, r7
 80175a2:	bd90      	pop	{r4, r7, pc}

080175a4 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b084      	sub	sp, #16
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	60f8      	str	r0, [r7, #12]
 80175ac:	60b9      	str	r1, [r7, #8]
 80175ae:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80175b0:	68b9      	ldr	r1, [r7, #8]
 80175b2:	68f8      	ldr	r0, [r7, #12]
 80175b4:	f000 f985 	bl	80178c2 <_ZSt8_DestroyIPPvEvT_S2_>
    }
 80175b8:	bf00      	nop
 80175ba:	3710      	adds	r7, #16
 80175bc:	46bd      	mov	sp, r7
 80175be:	bd80      	pop	{r7, pc}

080175c0 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80175c0:	b480      	push	{r7}
 80175c2:	b083      	sub	sp, #12
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	4618      	mov	r0, r3
 80175cc:	370c      	adds	r7, #12
 80175ce:	46bd      	mov	sp, r7
 80175d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d4:	4770      	bx	lr

080175d6 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80175d6:	b580      	push	{r7, lr}
 80175d8:	b084      	sub	sp, #16
 80175da:	af00      	add	r7, sp, #0
 80175dc:	60f8      	str	r0, [r7, #12]
 80175de:	60b9      	str	r1, [r7, #8]
 80175e0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80175e2:	687a      	ldr	r2, [r7, #4]
 80175e4:	68b9      	ldr	r1, [r7, #8]
 80175e6:	68f8      	ldr	r0, [r7, #12]
 80175e8:	f000 f978 	bl	80178dc <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>
 80175ec:	bf00      	nop
 80175ee:	3710      	adds	r7, #16
 80175f0:	46bd      	mov	sp, r7
 80175f2:	bd80      	pop	{r7, pc}

080175f4 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80175f4:	b480      	push	{r7}
 80175f6:	b083      	sub	sp, #12
 80175f8:	af00      	add	r7, sp, #0
 80175fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	4618      	mov	r0, r3
 8017600:	370c      	adds	r7, #12
 8017602:	46bd      	mov	sp, r7
 8017604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017608:	4770      	bx	lr

0801760a <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801760a:	b590      	push	{r4, r7, lr}
 801760c:	b085      	sub	sp, #20
 801760e:	af00      	add	r7, sp, #0
 8017610:	60f8      	str	r0, [r7, #12]
 8017612:	60b9      	str	r1, [r7, #8]
 8017614:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017616:	6878      	ldr	r0, [r7, #4]
 8017618:	f7ff ffec 	bl	80175f4 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 801761c:	4604      	mov	r4, r0
 801761e:	68bb      	ldr	r3, [r7, #8]
 8017620:	4619      	mov	r1, r3
 8017622:	2008      	movs	r0, #8
 8017624:	f7e9 ff12 	bl	800144c <_ZnwjPv>
 8017628:	4603      	mov	r3, r0
 801762a:	4622      	mov	r2, r4
 801762c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017630:	e883 0003 	stmia.w	r3, {r0, r1}
 8017634:	bf00      	nop
 8017636:	3714      	adds	r7, #20
 8017638:	46bd      	mov	sp, r7
 801763a:	bd90      	pop	{r4, r7, pc}

0801763c <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801763c:	b480      	push	{r7}
 801763e:	b083      	sub	sp, #12
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
 8017644:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8017646:	683b      	ldr	r3, [r7, #0]
 8017648:	681a      	ldr	r2, [r3, #0]
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	601a      	str	r2, [r3, #0]
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	4618      	mov	r0, r3
 8017652:	370c      	adds	r7, #12
 8017654:	46bd      	mov	sp, r7
 8017656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801765a:	4770      	bx	lr

0801765c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 801765c:	b590      	push	{r4, r7, lr}
 801765e:	b087      	sub	sp, #28
 8017660:	af00      	add	r7, sp, #0
 8017662:	60f8      	str	r0, [r7, #12]
 8017664:	60b9      	str	r1, [r7, #8]
 8017666:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8017668:	68f8      	ldr	r0, [r7, #12]
 801766a:	f000 f947 	bl	80178fc <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 801766e:	4604      	mov	r4, r0
 8017670:	68f8      	ldr	r0, [r7, #12]
 8017672:	f7ff fb82 	bl	8016d7a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8017676:	4603      	mov	r3, r0
 8017678:	1ae2      	subs	r2, r4, r3
 801767a:	68bb      	ldr	r3, [r7, #8]
 801767c:	429a      	cmp	r2, r3
 801767e:	bf34      	ite	cc
 8017680:	2301      	movcc	r3, #1
 8017682:	2300      	movcs	r3, #0
 8017684:	b2db      	uxtb	r3, r3
 8017686:	2b00      	cmp	r3, #0
 8017688:	d002      	beq.n	8017690 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801768a:	6878      	ldr	r0, [r7, #4]
 801768c:	f001 fab4 	bl	8018bf8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8017690:	68f8      	ldr	r0, [r7, #12]
 8017692:	f7ff fb72 	bl	8016d7a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8017696:	4604      	mov	r4, r0
 8017698:	68f8      	ldr	r0, [r7, #12]
 801769a:	f7ff fb6e 	bl	8016d7a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801769e:	4603      	mov	r3, r0
 80176a0:	613b      	str	r3, [r7, #16]
 80176a2:	f107 0208 	add.w	r2, r7, #8
 80176a6:	f107 0310 	add.w	r3, r7, #16
 80176aa:	4611      	mov	r1, r2
 80176ac:	4618      	mov	r0, r3
 80176ae:	f7eb fe03 	bl	80032b8 <_ZSt3maxIjERKT_S2_S2_>
 80176b2:	4603      	mov	r3, r0
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	4423      	add	r3, r4
 80176b8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80176ba:	68f8      	ldr	r0, [r7, #12]
 80176bc:	f7ff fb5d 	bl	8016d7a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 80176c0:	4602      	mov	r2, r0
 80176c2:	697b      	ldr	r3, [r7, #20]
 80176c4:	4293      	cmp	r3, r2
 80176c6:	d306      	bcc.n	80176d6 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x7a>
 80176c8:	68f8      	ldr	r0, [r7, #12]
 80176ca:	f000 f917 	bl	80178fc <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 80176ce:	4602      	mov	r2, r0
 80176d0:	697b      	ldr	r3, [r7, #20]
 80176d2:	4293      	cmp	r3, r2
 80176d4:	d904      	bls.n	80176e0 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x84>
 80176d6:	68f8      	ldr	r0, [r7, #12]
 80176d8:	f000 f910 	bl	80178fc <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 80176dc:	4603      	mov	r3, r0
 80176de:	e000      	b.n	80176e2 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x86>
 80176e0:	697b      	ldr	r3, [r7, #20]
      }
 80176e2:	4618      	mov	r0, r3
 80176e4:	371c      	adds	r7, #28
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bd90      	pop	{r4, r7, pc}

080176ea <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80176ea:	b580      	push	{r7, lr}
 80176ec:	b084      	sub	sp, #16
 80176ee:	af00      	add	r7, sp, #0
 80176f0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80176f2:	687a      	ldr	r2, [r7, #4]
 80176f4:	f107 030c 	add.w	r3, r7, #12
 80176f8:	4611      	mov	r1, r2
 80176fa:	4618      	mov	r0, r3
 80176fc:	f7ff ff9e 	bl	801763c <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	4618      	mov	r0, r3
 8017704:	3710      	adds	r7, #16
 8017706:	46bd      	mov	sp, r7
 8017708:	bd80      	pop	{r7, pc}

0801770a <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 801770a:	b590      	push	{r4, r7, lr}
 801770c:	b083      	sub	sp, #12
 801770e:	af00      	add	r7, sp, #0
 8017710:	6078      	str	r0, [r7, #4]
 8017712:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8017714:	6878      	ldr	r0, [r7, #4]
 8017716:	f000 f835 	bl	8017784 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 801771a:	4603      	mov	r3, r0
 801771c:	681c      	ldr	r4, [r3, #0]
 801771e:	6838      	ldr	r0, [r7, #0]
 8017720:	f000 f830 	bl	8017784 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8017724:	4603      	mov	r3, r0
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	1ae3      	subs	r3, r4, r3
 801772a:	10db      	asrs	r3, r3, #3
 801772c:	4618      	mov	r0, r3
 801772e:	370c      	adds	r7, #12
 8017730:	46bd      	mov	sp, r7
 8017732:	bd90      	pop	{r4, r7, pc}

08017734 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8017734:	b580      	push	{r7, lr}
 8017736:	b082      	sub	sp, #8
 8017738:	af00      	add	r7, sp, #0
 801773a:	6078      	str	r0, [r7, #4]
 801773c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801773e:	683b      	ldr	r3, [r7, #0]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d006      	beq.n	8017752 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x1e>
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	6839      	ldr	r1, [r7, #0]
 8017748:	4618      	mov	r0, r3
 801774a:	f000 f8e8 	bl	801791e <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>
 801774e:	4603      	mov	r3, r0
 8017750:	e000      	b.n	8017754 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x20>
 8017752:	2300      	movs	r3, #0
      }
 8017754:	4618      	mov	r0, r3
 8017756:	3708      	adds	r7, #8
 8017758:	46bd      	mov	sp, r7
 801775a:	bd80      	pop	{r7, pc}

0801775c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 801775c:	b590      	push	{r4, r7, lr}
 801775e:	b087      	sub	sp, #28
 8017760:	af02      	add	r7, sp, #8
 8017762:	60f8      	str	r0, [r7, #12]
 8017764:	60b9      	str	r1, [r7, #8]
 8017766:	607a      	str	r2, [r7, #4]
 8017768:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 801776a:	f88d 4000 	strb.w	r4, [sp]
 801776e:	683b      	ldr	r3, [r7, #0]
 8017770:	687a      	ldr	r2, [r7, #4]
 8017772:	68b9      	ldr	r1, [r7, #8]
 8017774:	68f8      	ldr	r0, [r7, #12]
 8017776:	f000 f8e1 	bl	801793c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 801777a:	4603      	mov	r3, r0
      }
 801777c:	4618      	mov	r0, r3
 801777e:	3714      	adds	r7, #20
 8017780:	46bd      	mov	sp, r7
 8017782:	bd90      	pop	{r4, r7, pc}

08017784 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8017784:	b480      	push	{r7}
 8017786:	b083      	sub	sp, #12
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	4618      	mov	r0, r3
 8017790:	370c      	adds	r7, #12
 8017792:	46bd      	mov	sp, r7
 8017794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017798:	4770      	bx	lr

0801779a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 801779a:	b480      	push	{r7}
 801779c:	b083      	sub	sp, #12
 801779e:	af00      	add	r7, sp, #0
 80177a0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	4618      	mov	r0, r3
 80177a6:	370c      	adds	r7, #12
 80177a8:	46bd      	mov	sp, r7
 80177aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ae:	4770      	bx	lr

080177b0 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80177b0:	b590      	push	{r4, r7, lr}
 80177b2:	b085      	sub	sp, #20
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	60f8      	str	r0, [r7, #12]
 80177b8:	60b9      	str	r1, [r7, #8]
 80177ba:	607a      	str	r2, [r7, #4]
 80177bc:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80177be:	68f8      	ldr	r0, [r7, #12]
 80177c0:	f000 f8ce 	bl	8017960 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 80177c4:	4604      	mov	r4, r0
 80177c6:	68b8      	ldr	r0, [r7, #8]
 80177c8:	f000 f8ca 	bl	8017960 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 80177cc:	4601      	mov	r1, r0
 80177ce:	683b      	ldr	r3, [r7, #0]
 80177d0:	687a      	ldr	r2, [r7, #4]
 80177d2:	4620      	mov	r0, r4
 80177d4:	f000 f8d3 	bl	801797e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80177d8:	4603      	mov	r3, r0
    }
 80177da:	4618      	mov	r0, r3
 80177dc:	3714      	adds	r7, #20
 80177de:	46bd      	mov	sp, r7
 80177e0:	bd90      	pop	{r4, r7, pc}

080177e2 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80177e2:	b580      	push	{r7, lr}
 80177e4:	b084      	sub	sp, #16
 80177e6:	af00      	add	r7, sp, #0
 80177e8:	60f8      	str	r0, [r7, #12]
 80177ea:	60b9      	str	r1, [r7, #8]
 80177ec:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80177ee:	68b9      	ldr	r1, [r7, #8]
 80177f0:	68f8      	ldr	r0, [r7, #12]
 80177f2:	f000 f8d5 	bl	80179a0 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>
    }
 80177f6:	bf00      	nop
 80177f8:	3710      	adds	r7, #16
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bd80      	pop	{r7, pc}

080177fe <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80177fe:	b580      	push	{r7, lr}
 8017800:	b084      	sub	sp, #16
 8017802:	af00      	add	r7, sp, #0
 8017804:	60f8      	str	r0, [r7, #12]
 8017806:	60b9      	str	r1, [r7, #8]
 8017808:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	009b      	lsls	r3, r3, #2
 801780e:	4619      	mov	r1, r3
 8017810:	68b8      	ldr	r0, [r7, #8]
 8017812:	f001 f9d7 	bl	8018bc4 <_ZdlPvj>
      }
 8017816:	bf00      	nop
 8017818:	3710      	adds	r7, #16
 801781a:	46bd      	mov	sp, r7
 801781c:	bd80      	pop	{r7, pc}

0801781e <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 801781e:	b580      	push	{r7, lr}
 8017820:	b082      	sub	sp, #8
 8017822:	af00      	add	r7, sp, #0
 8017824:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	4618      	mov	r0, r3
 801782a:	f000 f8e0 	bl	80179ee <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 801782e:	4603      	mov	r3, r0
 8017830:	4618      	mov	r0, r3
 8017832:	f000 f8c2 	bl	80179ba <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>
 8017836:	4603      	mov	r3, r0
 8017838:	4618      	mov	r0, r3
 801783a:	3708      	adds	r7, #8
 801783c:	46bd      	mov	sp, r7
 801783e:	bd80      	pop	{r7, pc}

08017840 <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8017840:	b580      	push	{r7, lr}
 8017842:	b082      	sub	sp, #8
 8017844:	af00      	add	r7, sp, #0
 8017846:	6078      	str	r0, [r7, #4]
 8017848:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801784a:	2200      	movs	r2, #0
 801784c:	6839      	ldr	r1, [r7, #0]
 801784e:	6878      	ldr	r0, [r7, #4]
 8017850:	f000 f8d8 	bl	8017a04 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>
 8017854:	4603      	mov	r3, r0
 8017856:	4618      	mov	r0, r3
 8017858:	3708      	adds	r7, #8
 801785a:	46bd      	mov	sp, r7
 801785c:	bd80      	pop	{r7, pc}

0801785e <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 801785e:	b580      	push	{r7, lr}
 8017860:	b084      	sub	sp, #16
 8017862:	af00      	add	r7, sp, #0
 8017864:	60f8      	str	r0, [r7, #12]
 8017866:	60b9      	str	r1, [r7, #8]
 8017868:	607a      	str	r2, [r7, #4]
 801786a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801786c:	683b      	ldr	r3, [r7, #0]
 801786e:	687a      	ldr	r2, [r7, #4]
 8017870:	68b9      	ldr	r1, [r7, #8]
 8017872:	68f8      	ldr	r0, [r7, #12]
 8017874:	f000 f8e4 	bl	8017a40 <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8017878:	4603      	mov	r3, r0
      }
 801787a:	4618      	mov	r0, r3
 801787c:	3710      	adds	r7, #16
 801787e:	46bd      	mov	sp, r7
 8017880:	bd80      	pop	{r7, pc}

08017882 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8017882:	b580      	push	{r7, lr}
 8017884:	b084      	sub	sp, #16
 8017886:	af00      	add	r7, sp, #0
 8017888:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 801788a:	f107 030c 	add.w	r3, r7, #12
 801788e:	6879      	ldr	r1, [r7, #4]
 8017890:	4618      	mov	r0, r3
 8017892:	f000 f8f2 	bl	8017a7a <_ZNSt13move_iteratorIPPvEC1ES1_>
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	4618      	mov	r0, r3
 801789a:	3710      	adds	r7, #16
 801789c:	46bd      	mov	sp, r7
 801789e:	bd80      	pop	{r7, pc}

080178a0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b084      	sub	sp, #16
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	60f8      	str	r0, [r7, #12]
 80178a8:	60b9      	str	r1, [r7, #8]
 80178aa:	607a      	str	r2, [r7, #4]
 80178ac:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80178ae:	687a      	ldr	r2, [r7, #4]
 80178b0:	68b9      	ldr	r1, [r7, #8]
 80178b2:	68f8      	ldr	r0, [r7, #12]
 80178b4:	f000 f8f3 	bl	8017a9e <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 80178b8:	4603      	mov	r3, r0
 80178ba:	4618      	mov	r0, r3
 80178bc:	3710      	adds	r7, #16
 80178be:	46bd      	mov	sp, r7
 80178c0:	bd80      	pop	{r7, pc}

080178c2 <_ZSt8_DestroyIPPvEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80178c2:	b580      	push	{r7, lr}
 80178c4:	b082      	sub	sp, #8
 80178c6:	af00      	add	r7, sp, #0
 80178c8:	6078      	str	r0, [r7, #4]
 80178ca:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80178cc:	6839      	ldr	r1, [r7, #0]
 80178ce:	6878      	ldr	r0, [r7, #4]
 80178d0:	f000 f8f7 	bl	8017ac2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>
    }
 80178d4:	bf00      	nop
 80178d6:	3708      	adds	r7, #8
 80178d8:	46bd      	mov	sp, r7
 80178da:	bd80      	pop	{r7, pc}

080178dc <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80178dc:	b580      	push	{r7, lr}
 80178de:	b084      	sub	sp, #16
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	60f8      	str	r0, [r7, #12]
 80178e4:	60b9      	str	r1, [r7, #8]
 80178e6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	00db      	lsls	r3, r3, #3
 80178ec:	4619      	mov	r1, r3
 80178ee:	68b8      	ldr	r0, [r7, #8]
 80178f0:	f001 f968 	bl	8018bc4 <_ZdlPvj>
      }
 80178f4:	bf00      	nop
 80178f6:	3710      	adds	r7, #16
 80178f8:	46bd      	mov	sp, r7
 80178fa:	bd80      	pop	{r7, pc}

080178fc <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b082      	sub	sp, #8
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	4618      	mov	r0, r3
 8017908:	f000 f900 	bl	8017b0c <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 801790c:	4603      	mov	r3, r0
 801790e:	4618      	mov	r0, r3
 8017910:	f000 f8e2 	bl	8017ad8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>
 8017914:	4603      	mov	r3, r0
 8017916:	4618      	mov	r0, r3
 8017918:	3708      	adds	r7, #8
 801791a:	46bd      	mov	sp, r7
 801791c:	bd80      	pop	{r7, pc}

0801791e <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 801791e:	b580      	push	{r7, lr}
 8017920:	b082      	sub	sp, #8
 8017922:	af00      	add	r7, sp, #0
 8017924:	6078      	str	r0, [r7, #4]
 8017926:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8017928:	2200      	movs	r2, #0
 801792a:	6839      	ldr	r1, [r7, #0]
 801792c:	6878      	ldr	r0, [r7, #4]
 801792e:	f000 f8f8 	bl	8017b22 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>
 8017932:	4603      	mov	r3, r0
 8017934:	4618      	mov	r0, r3
 8017936:	3708      	adds	r7, #8
 8017938:	46bd      	mov	sp, r7
 801793a:	bd80      	pop	{r7, pc}

0801793c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 801793c:	b580      	push	{r7, lr}
 801793e:	b084      	sub	sp, #16
 8017940:	af00      	add	r7, sp, #0
 8017942:	60f8      	str	r0, [r7, #12]
 8017944:	60b9      	str	r1, [r7, #8]
 8017946:	607a      	str	r2, [r7, #4]
 8017948:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801794a:	683b      	ldr	r3, [r7, #0]
 801794c:	687a      	ldr	r2, [r7, #4]
 801794e:	68b9      	ldr	r1, [r7, #8]
 8017950:	68f8      	ldr	r0, [r7, #12]
 8017952:	f000 f904 	bl	8017b5e <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8017956:	4603      	mov	r3, r0
      }
 8017958:	4618      	mov	r0, r3
 801795a:	3710      	adds	r7, #16
 801795c:	46bd      	mov	sp, r7
 801795e:	bd80      	pop	{r7, pc}

08017960 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8017960:	b580      	push	{r7, lr}
 8017962:	b084      	sub	sp, #16
 8017964:	af00      	add	r7, sp, #0
 8017966:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8017968:	f107 030c 	add.w	r3, r7, #12
 801796c:	6879      	ldr	r1, [r7, #4]
 801796e:	4618      	mov	r0, r3
 8017970:	f000 f912 	bl	8017b98 <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	4618      	mov	r0, r3
 8017978:	3710      	adds	r7, #16
 801797a:	46bd      	mov	sp, r7
 801797c:	bd80      	pop	{r7, pc}

0801797e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 801797e:	b580      	push	{r7, lr}
 8017980:	b084      	sub	sp, #16
 8017982:	af00      	add	r7, sp, #0
 8017984:	60f8      	str	r0, [r7, #12]
 8017986:	60b9      	str	r1, [r7, #8]
 8017988:	607a      	str	r2, [r7, #4]
 801798a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 801798c:	687a      	ldr	r2, [r7, #4]
 801798e:	68b9      	ldr	r1, [r7, #8]
 8017990:	68f8      	ldr	r0, [r7, #12]
 8017992:	f000 f913 	bl	8017bbc <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 8017996:	4603      	mov	r3, r0
 8017998:	4618      	mov	r0, r3
 801799a:	3710      	adds	r7, #16
 801799c:	46bd      	mov	sp, r7
 801799e:	bd80      	pop	{r7, pc}

080179a0 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b082      	sub	sp, #8
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
 80179a8:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80179aa:	6839      	ldr	r1, [r7, #0]
 80179ac:	6878      	ldr	r0, [r7, #4]
 80179ae:	f000 f917 	bl	8017be0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>
    }
 80179b2:	bf00      	nop
 80179b4:	3708      	adds	r7, #8
 80179b6:	46bd      	mov	sp, r7
 80179b8:	bd80      	pop	{r7, pc}

080179ba <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80179ba:	b580      	push	{r7, lr}
 80179bc:	b084      	sub	sp, #16
 80179be:	af00      	add	r7, sp, #0
 80179c0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80179c2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80179c6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80179c8:	6878      	ldr	r0, [r7, #4]
 80179ca:	f000 f914 	bl	8017bf6 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>
 80179ce:	4603      	mov	r3, r0
 80179d0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80179d2:	f107 0208 	add.w	r2, r7, #8
 80179d6:	f107 030c 	add.w	r3, r7, #12
 80179da:	4611      	mov	r1, r2
 80179dc:	4618      	mov	r0, r3
 80179de:	f7eb fefb 	bl	80037d8 <_ZSt3minIjERKT_S2_S2_>
 80179e2:	4603      	mov	r3, r0
 80179e4:	681b      	ldr	r3, [r3, #0]
      }
 80179e6:	4618      	mov	r0, r3
 80179e8:	3710      	adds	r7, #16
 80179ea:	46bd      	mov	sp, r7
 80179ec:	bd80      	pop	{r7, pc}

080179ee <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80179ee:	b480      	push	{r7}
 80179f0:	b083      	sub	sp, #12
 80179f2:	af00      	add	r7, sp, #0
 80179f4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	4618      	mov	r0, r3
 80179fa:	370c      	adds	r7, #12
 80179fc:	46bd      	mov	sp, r7
 80179fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a02:	4770      	bx	lr

08017a04 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b084      	sub	sp, #16
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	60f8      	str	r0, [r7, #12]
 8017a0c:	60b9      	str	r1, [r7, #8]
 8017a0e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8017a10:	68f8      	ldr	r0, [r7, #12]
 8017a12:	f000 f8fc 	bl	8017c0e <_ZNK9__gnu_cxx13new_allocatorIPvE11_M_max_sizeEv>
 8017a16:	4602      	mov	r2, r0
 8017a18:	68bb      	ldr	r3, [r7, #8]
 8017a1a:	4293      	cmp	r3, r2
 8017a1c:	bf8c      	ite	hi
 8017a1e:	2301      	movhi	r3, #1
 8017a20:	2300      	movls	r3, #0
 8017a22:	b2db      	uxtb	r3, r3
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d001      	beq.n	8017a2c <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8017a28:	f001 f8e3 	bl	8018bf2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8017a2c:	68bb      	ldr	r3, [r7, #8]
 8017a2e:	009b      	lsls	r3, r3, #2
 8017a30:	4618      	mov	r0, r3
 8017a32:	f001 f8cb 	bl	8018bcc <_Znwj>
 8017a36:	4603      	mov	r3, r0
      }
 8017a38:	4618      	mov	r0, r3
 8017a3a:	3710      	adds	r7, #16
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd80      	pop	{r7, pc}

08017a40 <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8017a40:	b5b0      	push	{r4, r5, r7, lr}
 8017a42:	b084      	sub	sp, #16
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	60f8      	str	r0, [r7, #12]
 8017a48:	60b9      	str	r1, [r7, #8]
 8017a4a:	607a      	str	r2, [r7, #4]
 8017a4c:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8017a4e:	68f8      	ldr	r0, [r7, #12]
 8017a50:	f000 f8e9 	bl	8017c26 <_ZSt12__niter_baseIPPvET_S2_>
 8017a54:	4604      	mov	r4, r0
 8017a56:	68b8      	ldr	r0, [r7, #8]
 8017a58:	f000 f8e5 	bl	8017c26 <_ZSt12__niter_baseIPPvET_S2_>
 8017a5c:	4605      	mov	r5, r0
 8017a5e:	6878      	ldr	r0, [r7, #4]
 8017a60:	f000 f8e1 	bl	8017c26 <_ZSt12__niter_baseIPPvET_S2_>
 8017a64:	4602      	mov	r2, r0
 8017a66:	683b      	ldr	r3, [r7, #0]
 8017a68:	4629      	mov	r1, r5
 8017a6a:	4620      	mov	r0, r4
 8017a6c:	f000 f8e6 	bl	8017c3c <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8017a70:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8017a72:	4618      	mov	r0, r3
 8017a74:	3710      	adds	r7, #16
 8017a76:	46bd      	mov	sp, r7
 8017a78:	bdb0      	pop	{r4, r5, r7, pc}

08017a7a <_ZNSt13move_iteratorIPPvEC1ES1_>:
      move_iterator(iterator_type __i)
 8017a7a:	b580      	push	{r7, lr}
 8017a7c:	b082      	sub	sp, #8
 8017a7e:	af00      	add	r7, sp, #0
 8017a80:	6078      	str	r0, [r7, #4]
 8017a82:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8017a84:	463b      	mov	r3, r7
 8017a86:	4618      	mov	r0, r3
 8017a88:	f000 f8f6 	bl	8017c78 <_ZSt4moveIRPPvEONSt16remove_referenceIT_E4typeEOS4_>
 8017a8c:	4603      	mov	r3, r0
 8017a8e:	681a      	ldr	r2, [r3, #0]
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	601a      	str	r2, [r3, #0]
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	4618      	mov	r0, r3
 8017a98:	3708      	adds	r7, #8
 8017a9a:	46bd      	mov	sp, r7
 8017a9c:	bd80      	pop	{r7, pc}

08017a9e <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8017a9e:	b580      	push	{r7, lr}
 8017aa0:	b086      	sub	sp, #24
 8017aa2:	af00      	add	r7, sp, #0
 8017aa4:	60f8      	str	r0, [r7, #12]
 8017aa6:	60b9      	str	r1, [r7, #8]
 8017aa8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8017aaa:	2301      	movs	r3, #1
 8017aac:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8017aae:	687a      	ldr	r2, [r7, #4]
 8017ab0:	68b9      	ldr	r1, [r7, #8]
 8017ab2:	68f8      	ldr	r0, [r7, #12]
 8017ab4:	f000 f8eb 	bl	8017c8e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>
 8017ab8:	4603      	mov	r3, r0
    }
 8017aba:	4618      	mov	r0, r3
 8017abc:	3718      	adds	r7, #24
 8017abe:	46bd      	mov	sp, r7
 8017ac0:	bd80      	pop	{r7, pc}

08017ac2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8017ac2:	b480      	push	{r7}
 8017ac4:	b083      	sub	sp, #12
 8017ac6:	af00      	add	r7, sp, #0
 8017ac8:	6078      	str	r0, [r7, #4]
 8017aca:	6039      	str	r1, [r7, #0]
 8017acc:	bf00      	nop
 8017ace:	370c      	adds	r7, #12
 8017ad0:	46bd      	mov	sp, r7
 8017ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad6:	4770      	bx	lr

08017ad8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b084      	sub	sp, #16
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8017ae0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8017ae4:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8017ae6:	6878      	ldr	r0, [r7, #4]
 8017ae8:	f000 f8e1 	bl	8017cae <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>
 8017aec:	4603      	mov	r3, r0
 8017aee:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8017af0:	f107 0208 	add.w	r2, r7, #8
 8017af4:	f107 030c 	add.w	r3, r7, #12
 8017af8:	4611      	mov	r1, r2
 8017afa:	4618      	mov	r0, r3
 8017afc:	f7eb fe6c 	bl	80037d8 <_ZSt3minIjERKT_S2_S2_>
 8017b00:	4603      	mov	r3, r0
 8017b02:	681b      	ldr	r3, [r3, #0]
      }
 8017b04:	4618      	mov	r0, r3
 8017b06:	3710      	adds	r7, #16
 8017b08:	46bd      	mov	sp, r7
 8017b0a:	bd80      	pop	{r7, pc}

08017b0c <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8017b0c:	b480      	push	{r7}
 8017b0e:	b083      	sub	sp, #12
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	4618      	mov	r0, r3
 8017b18:	370c      	adds	r7, #12
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b20:	4770      	bx	lr

08017b22 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8017b22:	b580      	push	{r7, lr}
 8017b24:	b084      	sub	sp, #16
 8017b26:	af00      	add	r7, sp, #0
 8017b28:	60f8      	str	r0, [r7, #12]
 8017b2a:	60b9      	str	r1, [r7, #8]
 8017b2c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8017b2e:	68f8      	ldr	r0, [r7, #12]
 8017b30:	f000 f8c9 	bl	8017cc6 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE11_M_max_sizeEv>
 8017b34:	4602      	mov	r2, r0
 8017b36:	68bb      	ldr	r3, [r7, #8]
 8017b38:	4293      	cmp	r3, r2
 8017b3a:	bf8c      	ite	hi
 8017b3c:	2301      	movhi	r3, #1
 8017b3e:	2300      	movls	r3, #0
 8017b40:	b2db      	uxtb	r3, r3
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d001      	beq.n	8017b4a <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8017b46:	f001 f854 	bl	8018bf2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8017b4a:	68bb      	ldr	r3, [r7, #8]
 8017b4c:	00db      	lsls	r3, r3, #3
 8017b4e:	4618      	mov	r0, r3
 8017b50:	f001 f83c 	bl	8018bcc <_Znwj>
 8017b54:	4603      	mov	r3, r0
      }
 8017b56:	4618      	mov	r0, r3
 8017b58:	3710      	adds	r7, #16
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	bd80      	pop	{r7, pc}

08017b5e <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8017b5e:	b5b0      	push	{r4, r5, r7, lr}
 8017b60:	b084      	sub	sp, #16
 8017b62:	af00      	add	r7, sp, #0
 8017b64:	60f8      	str	r0, [r7, #12]
 8017b66:	60b9      	str	r1, [r7, #8]
 8017b68:	607a      	str	r2, [r7, #4]
 8017b6a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8017b6c:	68f8      	ldr	r0, [r7, #12]
 8017b6e:	f000 f8b6 	bl	8017cde <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017b72:	4604      	mov	r4, r0
 8017b74:	68b8      	ldr	r0, [r7, #8]
 8017b76:	f000 f8b2 	bl	8017cde <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017b7a:	4605      	mov	r5, r0
 8017b7c:	6878      	ldr	r0, [r7, #4]
 8017b7e:	f000 f8ae 	bl	8017cde <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017b82:	4602      	mov	r2, r0
 8017b84:	683b      	ldr	r3, [r7, #0]
 8017b86:	4629      	mov	r1, r5
 8017b88:	4620      	mov	r0, r4
 8017b8a:	f000 f8b3 	bl	8017cf4 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8017b8e:	4603      	mov	r3, r0
    }
 8017b90:	4618      	mov	r0, r3
 8017b92:	3710      	adds	r7, #16
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bdb0      	pop	{r4, r5, r7, pc}

08017b98 <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>:
      move_iterator(iterator_type __i)
 8017b98:	b580      	push	{r7, lr}
 8017b9a:	b082      	sub	sp, #8
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	6078      	str	r0, [r7, #4]
 8017ba0:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8017ba2:	463b      	mov	r3, r7
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	f000 f8c3 	bl	8017d30 <_ZSt4moveIRPN12_GLOBAL__N_116scratch_buffer_tEEONSt16remove_referenceIT_E4typeEOS5_>
 8017baa:	4603      	mov	r3, r0
 8017bac:	681a      	ldr	r2, [r3, #0]
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	601a      	str	r2, [r3, #0]
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	4618      	mov	r0, r3
 8017bb6:	3708      	adds	r7, #8
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	bd80      	pop	{r7, pc}

08017bbc <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	b086      	sub	sp, #24
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	60f8      	str	r0, [r7, #12]
 8017bc4:	60b9      	str	r1, [r7, #8]
 8017bc6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8017bc8:	2301      	movs	r3, #1
 8017bca:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8017bcc:	687a      	ldr	r2, [r7, #4]
 8017bce:	68b9      	ldr	r1, [r7, #8]
 8017bd0:	68f8      	ldr	r0, [r7, #12]
 8017bd2:	f000 f8b8 	bl	8017d46 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>
 8017bd6:	4603      	mov	r3, r0
    }
 8017bd8:	4618      	mov	r0, r3
 8017bda:	3718      	adds	r7, #24
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	bd80      	pop	{r7, pc}

08017be0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>:
 8017be0:	b480      	push	{r7}
 8017be2:	b083      	sub	sp, #12
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	6078      	str	r0, [r7, #4]
 8017be8:	6039      	str	r1, [r7, #0]
 8017bea:	bf00      	nop
 8017bec:	370c      	adds	r7, #12
 8017bee:	46bd      	mov	sp, r7
 8017bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf4:	4770      	bx	lr

08017bf6 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8017bf6:	b580      	push	{r7, lr}
 8017bf8:	b082      	sub	sp, #8
 8017bfa:	af00      	add	r7, sp, #0
 8017bfc:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8017bfe:	6878      	ldr	r0, [r7, #4]
 8017c00:	f000 f8b1 	bl	8017d66 <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 8017c04:	4603      	mov	r3, r0
      }
 8017c06:	4618      	mov	r0, r3
 8017c08:	3708      	adds	r7, #8
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	bd80      	pop	{r7, pc}

08017c0e <_ZNK9__gnu_cxx13new_allocatorIPvE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8017c0e:	b480      	push	{r7}
 8017c10:	b083      	sub	sp, #12
 8017c12:	af00      	add	r7, sp, #0
 8017c14:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8017c16:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	370c      	adds	r7, #12
 8017c1e:	46bd      	mov	sp, r7
 8017c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c24:	4770      	bx	lr

08017c26 <_ZSt12__niter_baseIPPvET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8017c26:	b480      	push	{r7}
 8017c28:	b083      	sub	sp, #12
 8017c2a:	af00      	add	r7, sp, #0
 8017c2c:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	4618      	mov	r0, r3
 8017c32:	370c      	adds	r7, #12
 8017c34:	46bd      	mov	sp, r7
 8017c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c3a:	4770      	bx	lr

08017c3c <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8017c3c:	b580      	push	{r7, lr}
 8017c3e:	b086      	sub	sp, #24
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	60f8      	str	r0, [r7, #12]
 8017c44:	60b9      	str	r1, [r7, #8]
 8017c46:	607a      	str	r2, [r7, #4]
 8017c48:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8017c4a:	68ba      	ldr	r2, [r7, #8]
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	1ad3      	subs	r3, r2, r3
 8017c50:	109b      	asrs	r3, r3, #2
 8017c52:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8017c54:	697b      	ldr	r3, [r7, #20]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	dd06      	ble.n	8017c68 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017c5a:	697b      	ldr	r3, [r7, #20]
 8017c5c:	009b      	lsls	r3, r3, #2
 8017c5e:	461a      	mov	r2, r3
 8017c60:	68f9      	ldr	r1, [r7, #12]
 8017c62:	6878      	ldr	r0, [r7, #4]
 8017c64:	f002 fb72 	bl	801a34c <memmove>
      return __result + __count;
 8017c68:	697b      	ldr	r3, [r7, #20]
 8017c6a:	009b      	lsls	r3, r3, #2
 8017c6c:	687a      	ldr	r2, [r7, #4]
 8017c6e:	4413      	add	r3, r2
    }
 8017c70:	4618      	mov	r0, r3
 8017c72:	3718      	adds	r7, #24
 8017c74:	46bd      	mov	sp, r7
 8017c76:	bd80      	pop	{r7, pc}

08017c78 <_ZSt4moveIRPPvEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8017c78:	b480      	push	{r7}
 8017c7a:	b083      	sub	sp, #12
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	4618      	mov	r0, r3
 8017c84:	370c      	adds	r7, #12
 8017c86:	46bd      	mov	sp, r7
 8017c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c8c:	4770      	bx	lr

08017c8e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8017c8e:	b580      	push	{r7, lr}
 8017c90:	b084      	sub	sp, #16
 8017c92:	af00      	add	r7, sp, #0
 8017c94:	60f8      	str	r0, [r7, #12]
 8017c96:	60b9      	str	r1, [r7, #8]
 8017c98:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8017c9a:	687a      	ldr	r2, [r7, #4]
 8017c9c:	68b9      	ldr	r1, [r7, #8]
 8017c9e:	68f8      	ldr	r0, [r7, #12]
 8017ca0:	f000 f86d 	bl	8017d7e <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 8017ca4:	4603      	mov	r3, r0
 8017ca6:	4618      	mov	r0, r3
 8017ca8:	3710      	adds	r7, #16
 8017caa:	46bd      	mov	sp, r7
 8017cac:	bd80      	pop	{r7, pc}

08017cae <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8017cae:	b580      	push	{r7, lr}
 8017cb0:	b082      	sub	sp, #8
 8017cb2:	af00      	add	r7, sp, #0
 8017cb4:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8017cb6:	6878      	ldr	r0, [r7, #4]
 8017cb8:	f000 f879 	bl	8017dae <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 8017cbc:	4603      	mov	r3, r0
      }
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	3708      	adds	r7, #8
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	bd80      	pop	{r7, pc}

08017cc6 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8017cc6:	b480      	push	{r7}
 8017cc8:	b083      	sub	sp, #12
 8017cca:	af00      	add	r7, sp, #0
 8017ccc:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8017cce:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8017cd2:	4618      	mov	r0, r3
 8017cd4:	370c      	adds	r7, #12
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cdc:	4770      	bx	lr

08017cde <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __niter_base(_Iterator __it)
 8017cde:	b480      	push	{r7}
 8017ce0:	b083      	sub	sp, #12
 8017ce2:	af00      	add	r7, sp, #0
 8017ce4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	4618      	mov	r0, r3
 8017cea:	370c      	adds	r7, #12
 8017cec:	46bd      	mov	sp, r7
 8017cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf2:	4770      	bx	lr

08017cf4 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b086      	sub	sp, #24
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	60f8      	str	r0, [r7, #12]
 8017cfc:	60b9      	str	r1, [r7, #8]
 8017cfe:	607a      	str	r2, [r7, #4]
 8017d00:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8017d02:	68ba      	ldr	r2, [r7, #8]
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	1ad3      	subs	r3, r2, r3
 8017d08:	10db      	asrs	r3, r3, #3
 8017d0a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8017d0c:	697b      	ldr	r3, [r7, #20]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	dd06      	ble.n	8017d20 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017d12:	697b      	ldr	r3, [r7, #20]
 8017d14:	00db      	lsls	r3, r3, #3
 8017d16:	461a      	mov	r2, r3
 8017d18:	68f9      	ldr	r1, [r7, #12]
 8017d1a:	6878      	ldr	r0, [r7, #4]
 8017d1c:	f002 fb16 	bl	801a34c <memmove>
      return __result + __count;
 8017d20:	697b      	ldr	r3, [r7, #20]
 8017d22:	00db      	lsls	r3, r3, #3
 8017d24:	687a      	ldr	r2, [r7, #4]
 8017d26:	4413      	add	r3, r2
    }
 8017d28:	4618      	mov	r0, r3
 8017d2a:	3718      	adds	r7, #24
 8017d2c:	46bd      	mov	sp, r7
 8017d2e:	bd80      	pop	{r7, pc}

08017d30 <_ZSt4moveIRPN12_GLOBAL__N_116scratch_buffer_tEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8017d30:	b480      	push	{r7}
 8017d32:	b083      	sub	sp, #12
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	370c      	adds	r7, #12
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d44:	4770      	bx	lr

08017d46 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8017d46:	b580      	push	{r7, lr}
 8017d48:	b084      	sub	sp, #16
 8017d4a:	af00      	add	r7, sp, #0
 8017d4c:	60f8      	str	r0, [r7, #12]
 8017d4e:	60b9      	str	r1, [r7, #8]
 8017d50:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8017d52:	687a      	ldr	r2, [r7, #4]
 8017d54:	68b9      	ldr	r1, [r7, #8]
 8017d56:	68f8      	ldr	r0, [r7, #12]
 8017d58:	f000 f835 	bl	8017dc6 <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 8017d5c:	4603      	mov	r3, r0
 8017d5e:	4618      	mov	r0, r3
 8017d60:	3710      	adds	r7, #16
 8017d62:	46bd      	mov	sp, r7
 8017d64:	bd80      	pop	{r7, pc}

08017d66 <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8017d66:	b580      	push	{r7, lr}
 8017d68:	b082      	sub	sp, #8
 8017d6a:	af00      	add	r7, sp, #0
 8017d6c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8017d6e:	6878      	ldr	r0, [r7, #4]
 8017d70:	f7ff ff4d 	bl	8017c0e <_ZNK9__gnu_cxx13new_allocatorIPvE11_M_max_sizeEv>
 8017d74:	4603      	mov	r3, r0
 8017d76:	4618      	mov	r0, r3
 8017d78:	3708      	adds	r7, #8
 8017d7a:	46bd      	mov	sp, r7
 8017d7c:	bd80      	pop	{r7, pc}

08017d7e <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8017d7e:	b590      	push	{r4, r7, lr}
 8017d80:	b085      	sub	sp, #20
 8017d82:	af00      	add	r7, sp, #0
 8017d84:	60f8      	str	r0, [r7, #12]
 8017d86:	60b9      	str	r1, [r7, #8]
 8017d88:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8017d8a:	68f8      	ldr	r0, [r7, #12]
 8017d8c:	f000 f833 	bl	8017df6 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8017d90:	4604      	mov	r4, r0
 8017d92:	68b8      	ldr	r0, [r7, #8]
 8017d94:	f000 f82f 	bl	8017df6 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8017d98:	4603      	mov	r3, r0
 8017d9a:	687a      	ldr	r2, [r7, #4]
 8017d9c:	4619      	mov	r1, r3
 8017d9e:	4620      	mov	r0, r4
 8017da0:	f000 f83a 	bl	8017e18 <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>
 8017da4:	4603      	mov	r3, r0
    }
 8017da6:	4618      	mov	r0, r3
 8017da8:	3714      	adds	r7, #20
 8017daa:	46bd      	mov	sp, r7
 8017dac:	bd90      	pop	{r4, r7, pc}

08017dae <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8017dae:	b580      	push	{r7, lr}
 8017db0:	b082      	sub	sp, #8
 8017db2:	af00      	add	r7, sp, #0
 8017db4:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8017db6:	6878      	ldr	r0, [r7, #4]
 8017db8:	f7ff ff85 	bl	8017cc6 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE11_M_max_sizeEv>
 8017dbc:	4603      	mov	r3, r0
 8017dbe:	4618      	mov	r0, r3
 8017dc0:	3708      	adds	r7, #8
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	bd80      	pop	{r7, pc}

08017dc6 <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8017dc6:	b590      	push	{r4, r7, lr}
 8017dc8:	b085      	sub	sp, #20
 8017dca:	af00      	add	r7, sp, #0
 8017dcc:	60f8      	str	r0, [r7, #12]
 8017dce:	60b9      	str	r1, [r7, #8]
 8017dd0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8017dd2:	68f8      	ldr	r0, [r7, #12]
 8017dd4:	f000 f843 	bl	8017e5e <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8017dd8:	4604      	mov	r4, r0
 8017dda:	68b8      	ldr	r0, [r7, #8]
 8017ddc:	f000 f83f 	bl	8017e5e <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8017de0:	4603      	mov	r3, r0
 8017de2:	687a      	ldr	r2, [r7, #4]
 8017de4:	4619      	mov	r1, r3
 8017de6:	4620      	mov	r0, r4
 8017de8:	f000 f84a 	bl	8017e80 <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8017dec:	4603      	mov	r3, r0
    }
 8017dee:	4618      	mov	r0, r3
 8017df0:	3714      	adds	r7, #20
 8017df2:	46bd      	mov	sp, r7
 8017df4:	bd90      	pop	{r4, r7, pc}

08017df6 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8017df6:	b580      	push	{r7, lr}
 8017df8:	b082      	sub	sp, #8
 8017dfa:	af00      	add	r7, sp, #0
 8017dfc:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8017dfe:	1d3b      	adds	r3, r7, #4
 8017e00:	4618      	mov	r0, r3
 8017e02:	f000 f860 	bl	8017ec6 <_ZNKSt13move_iteratorIPPvE4baseEv>
 8017e06:	4603      	mov	r3, r0
 8017e08:	4618      	mov	r0, r3
 8017e0a:	f000 f868 	bl	8017ede <_ZSt12__miter_baseIPPvET_S2_>
 8017e0e:	4603      	mov	r3, r0
 8017e10:	4618      	mov	r0, r3
 8017e12:	3708      	adds	r7, #8
 8017e14:	46bd      	mov	sp, r7
 8017e16:	bd80      	pop	{r7, pc}

08017e18 <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8017e18:	b5b0      	push	{r4, r5, r7, lr}
 8017e1a:	b084      	sub	sp, #16
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	60f8      	str	r0, [r7, #12]
 8017e20:	60b9      	str	r1, [r7, #8]
 8017e22:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8017e24:	68f8      	ldr	r0, [r7, #12]
 8017e26:	f7ff fefe 	bl	8017c26 <_ZSt12__niter_baseIPPvET_S2_>
 8017e2a:	4604      	mov	r4, r0
 8017e2c:	68b8      	ldr	r0, [r7, #8]
 8017e2e:	f7ff fefa 	bl	8017c26 <_ZSt12__niter_baseIPPvET_S2_>
 8017e32:	4605      	mov	r5, r0
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	4618      	mov	r0, r3
 8017e38:	f7ff fef5 	bl	8017c26 <_ZSt12__niter_baseIPPvET_S2_>
 8017e3c:	4603      	mov	r3, r0
 8017e3e:	461a      	mov	r2, r3
 8017e40:	4629      	mov	r1, r5
 8017e42:	4620      	mov	r0, r4
 8017e44:	f000 f856 	bl	8017ef4 <_ZSt14__copy_move_a1ILb1EPPvS1_ET1_T0_S3_S2_>
 8017e48:	4602      	mov	r2, r0
 8017e4a:	1d3b      	adds	r3, r7, #4
 8017e4c:	4611      	mov	r1, r2
 8017e4e:	4618      	mov	r0, r3
 8017e50:	f000 f860 	bl	8017f14 <_ZSt12__niter_wrapIPPvET_RKS2_S2_>
 8017e54:	4603      	mov	r3, r0
    }
 8017e56:	4618      	mov	r0, r3
 8017e58:	3710      	adds	r7, #16
 8017e5a:	46bd      	mov	sp, r7
 8017e5c:	bdb0      	pop	{r4, r5, r7, pc}

08017e5e <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8017e5e:	b580      	push	{r7, lr}
 8017e60:	b082      	sub	sp, #8
 8017e62:	af00      	add	r7, sp, #0
 8017e64:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8017e66:	1d3b      	adds	r3, r7, #4
 8017e68:	4618      	mov	r0, r3
 8017e6a:	f000 f85f 	bl	8017f2c <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>
 8017e6e:	4603      	mov	r3, r0
 8017e70:	4618      	mov	r0, r3
 8017e72:	f000 f867 	bl	8017f44 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017e76:	4603      	mov	r3, r0
 8017e78:	4618      	mov	r0, r3
 8017e7a:	3708      	adds	r7, #8
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	bd80      	pop	{r7, pc}

08017e80 <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8017e80:	b5b0      	push	{r4, r5, r7, lr}
 8017e82:	b084      	sub	sp, #16
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	60f8      	str	r0, [r7, #12]
 8017e88:	60b9      	str	r1, [r7, #8]
 8017e8a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8017e8c:	68f8      	ldr	r0, [r7, #12]
 8017e8e:	f7ff ff26 	bl	8017cde <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017e92:	4604      	mov	r4, r0
 8017e94:	68b8      	ldr	r0, [r7, #8]
 8017e96:	f7ff ff22 	bl	8017cde <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017e9a:	4605      	mov	r5, r0
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	f7ff ff1d 	bl	8017cde <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017ea4:	4603      	mov	r3, r0
 8017ea6:	461a      	mov	r2, r3
 8017ea8:	4629      	mov	r1, r5
 8017eaa:	4620      	mov	r0, r4
 8017eac:	f000 f855 	bl	8017f5a <_ZSt14__copy_move_a1ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8017eb0:	4602      	mov	r2, r0
 8017eb2:	1d3b      	adds	r3, r7, #4
 8017eb4:	4611      	mov	r1, r2
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	f000 f85f 	bl	8017f7a <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>
 8017ebc:	4603      	mov	r3, r0
    }
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	3710      	adds	r7, #16
 8017ec2:	46bd      	mov	sp, r7
 8017ec4:	bdb0      	pop	{r4, r5, r7, pc}

08017ec6 <_ZNKSt13move_iteratorIPPvE4baseEv>:
      base() const
 8017ec6:	b480      	push	{r7}
 8017ec8:	b083      	sub	sp, #12
 8017eca:	af00      	add	r7, sp, #0
 8017ecc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	370c      	adds	r7, #12
 8017ed6:	46bd      	mov	sp, r7
 8017ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017edc:	4770      	bx	lr

08017ede <_ZSt12__miter_baseIPPvET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8017ede:	b480      	push	{r7}
 8017ee0:	b083      	sub	sp, #12
 8017ee2:	af00      	add	r7, sp, #0
 8017ee4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	4618      	mov	r0, r3
 8017eea:	370c      	adds	r7, #12
 8017eec:	46bd      	mov	sp, r7
 8017eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef2:	4770      	bx	lr

08017ef4 <_ZSt14__copy_move_a1ILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8017ef4:	b580      	push	{r7, lr}
 8017ef6:	b084      	sub	sp, #16
 8017ef8:	af00      	add	r7, sp, #0
 8017efa:	60f8      	str	r0, [r7, #12]
 8017efc:	60b9      	str	r1, [r7, #8]
 8017efe:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8017f00:	687a      	ldr	r2, [r7, #4]
 8017f02:	68b9      	ldr	r1, [r7, #8]
 8017f04:	68f8      	ldr	r0, [r7, #12]
 8017f06:	f000 f844 	bl	8017f92 <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>
 8017f0a:	4603      	mov	r3, r0
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	3710      	adds	r7, #16
 8017f10:	46bd      	mov	sp, r7
 8017f12:	bd80      	pop	{r7, pc}

08017f14 <_ZSt12__niter_wrapIPPvET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8017f14:	b480      	push	{r7}
 8017f16:	b083      	sub	sp, #12
 8017f18:	af00      	add	r7, sp, #0
 8017f1a:	6078      	str	r0, [r7, #4]
 8017f1c:	6039      	str	r1, [r7, #0]
    { return __res; }
 8017f1e:	683b      	ldr	r3, [r7, #0]
 8017f20:	4618      	mov	r0, r3
 8017f22:	370c      	adds	r7, #12
 8017f24:	46bd      	mov	sp, r7
 8017f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f2a:	4770      	bx	lr

08017f2c <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>:
      base() const
 8017f2c:	b480      	push	{r7}
 8017f2e:	b083      	sub	sp, #12
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	4618      	mov	r0, r3
 8017f3a:	370c      	adds	r7, #12
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f42:	4770      	bx	lr

08017f44 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __miter_base(_Iterator __it)
 8017f44:	b480      	push	{r7}
 8017f46:	b083      	sub	sp, #12
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	4618      	mov	r0, r3
 8017f50:	370c      	adds	r7, #12
 8017f52:	46bd      	mov	sp, r7
 8017f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f58:	4770      	bx	lr

08017f5a <_ZSt14__copy_move_a1ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8017f5a:	b580      	push	{r7, lr}
 8017f5c:	b084      	sub	sp, #16
 8017f5e:	af00      	add	r7, sp, #0
 8017f60:	60f8      	str	r0, [r7, #12]
 8017f62:	60b9      	str	r1, [r7, #8]
 8017f64:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8017f66:	687a      	ldr	r2, [r7, #4]
 8017f68:	68b9      	ldr	r1, [r7, #8]
 8017f6a:	68f8      	ldr	r0, [r7, #12]
 8017f6c:	f000 f821 	bl	8017fb2 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8017f70:	4603      	mov	r3, r0
 8017f72:	4618      	mov	r0, r3
 8017f74:	3710      	adds	r7, #16
 8017f76:	46bd      	mov	sp, r7
 8017f78:	bd80      	pop	{r7, pc}

08017f7a <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8017f7a:	b480      	push	{r7}
 8017f7c:	b083      	sub	sp, #12
 8017f7e:	af00      	add	r7, sp, #0
 8017f80:	6078      	str	r0, [r7, #4]
 8017f82:	6039      	str	r1, [r7, #0]
    { return __res; }
 8017f84:	683b      	ldr	r3, [r7, #0]
 8017f86:	4618      	mov	r0, r3
 8017f88:	370c      	adds	r7, #12
 8017f8a:	46bd      	mov	sp, r7
 8017f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f90:	4770      	bx	lr

08017f92 <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8017f92:	b580      	push	{r7, lr}
 8017f94:	b084      	sub	sp, #16
 8017f96:	af00      	add	r7, sp, #0
 8017f98:	60f8      	str	r0, [r7, #12]
 8017f9a:	60b9      	str	r1, [r7, #8]
 8017f9c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8017f9e:	687a      	ldr	r2, [r7, #4]
 8017fa0:	68b9      	ldr	r1, [r7, #8]
 8017fa2:	68f8      	ldr	r0, [r7, #12]
 8017fa4:	f000 f815 	bl	8017fd2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>
 8017fa8:	4603      	mov	r3, r0
    }
 8017faa:	4618      	mov	r0, r3
 8017fac:	3710      	adds	r7, #16
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	bd80      	pop	{r7, pc}

08017fb2 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8017fb2:	b580      	push	{r7, lr}
 8017fb4:	b084      	sub	sp, #16
 8017fb6:	af00      	add	r7, sp, #0
 8017fb8:	60f8      	str	r0, [r7, #12]
 8017fba:	60b9      	str	r1, [r7, #8]
 8017fbc:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8017fbe:	687a      	ldr	r2, [r7, #4]
 8017fc0:	68b9      	ldr	r1, [r7, #8]
 8017fc2:	68f8      	ldr	r0, [r7, #12]
 8017fc4:	f000 f822 	bl	801800c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>
 8017fc8:	4603      	mov	r3, r0
    }
 8017fca:	4618      	mov	r0, r3
 8017fcc:	3710      	adds	r7, #16
 8017fce:	46bd      	mov	sp, r7
 8017fd0:	bd80      	pop	{r7, pc}

08017fd2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8017fd2:	b580      	push	{r7, lr}
 8017fd4:	b086      	sub	sp, #24
 8017fd6:	af00      	add	r7, sp, #0
 8017fd8:	60f8      	str	r0, [r7, #12]
 8017fda:	60b9      	str	r1, [r7, #8]
 8017fdc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8017fde:	68ba      	ldr	r2, [r7, #8]
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	1ad3      	subs	r3, r2, r3
 8017fe4:	109b      	asrs	r3, r3, #2
 8017fe6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8017fe8:	697b      	ldr	r3, [r7, #20]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d006      	beq.n	8017ffc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8017fee:	697b      	ldr	r3, [r7, #20]
 8017ff0:	009b      	lsls	r3, r3, #2
 8017ff2:	461a      	mov	r2, r3
 8017ff4:	68f9      	ldr	r1, [r7, #12]
 8017ff6:	6878      	ldr	r0, [r7, #4]
 8017ff8:	f002 f9a8 	bl	801a34c <memmove>
	  return __result + _Num;
 8017ffc:	697b      	ldr	r3, [r7, #20]
 8017ffe:	009b      	lsls	r3, r3, #2
 8018000:	687a      	ldr	r2, [r7, #4]
 8018002:	4413      	add	r3, r2
	}
 8018004:	4618      	mov	r0, r3
 8018006:	3718      	adds	r7, #24
 8018008:	46bd      	mov	sp, r7
 801800a:	bd80      	pop	{r7, pc}

0801800c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801800c:	b580      	push	{r7, lr}
 801800e:	b086      	sub	sp, #24
 8018010:	af00      	add	r7, sp, #0
 8018012:	60f8      	str	r0, [r7, #12]
 8018014:	60b9      	str	r1, [r7, #8]
 8018016:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8018018:	68ba      	ldr	r2, [r7, #8]
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	1ad3      	subs	r3, r2, r3
 801801e:	10db      	asrs	r3, r3, #3
 8018020:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8018022:	697b      	ldr	r3, [r7, #20]
 8018024:	2b00      	cmp	r3, #0
 8018026:	d006      	beq.n	8018036 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8018028:	697b      	ldr	r3, [r7, #20]
 801802a:	00db      	lsls	r3, r3, #3
 801802c:	461a      	mov	r2, r3
 801802e:	68f9      	ldr	r1, [r7, #12]
 8018030:	6878      	ldr	r0, [r7, #4]
 8018032:	f002 f98b 	bl	801a34c <memmove>
	  return __result + _Num;
 8018036:	697b      	ldr	r3, [r7, #20]
 8018038:	00db      	lsls	r3, r3, #3
 801803a:	687a      	ldr	r2, [r7, #4]
 801803c:	4413      	add	r3, r2
	}
 801803e:	4618      	mov	r0, r3
 8018040:	3718      	adds	r7, #24
 8018042:	46bd      	mov	sp, r7
 8018044:	bd80      	pop	{r7, pc}
	...

08018048 <_Z41__static_initialization_and_destruction_0ii>:
 8018048:	b580      	push	{r7, lr}
 801804a:	b082      	sub	sp, #8
 801804c:	af00      	add	r7, sp, #0
 801804e:	6078      	str	r0, [r7, #4]
 8018050:	6039      	str	r1, [r7, #0]
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	2b01      	cmp	r3, #1
 8018056:	d125      	bne.n	80180a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 8018058:	683b      	ldr	r3, [r7, #0]
 801805a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801805e:	4293      	cmp	r3, r2
 8018060:	d120      	bne.n	80180a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension0, 18, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 8018062:	4b19      	ldr	r3, [pc, #100]	; (80180c8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	3330      	adds	r3, #48	; 0x30
};const NodeInfo_t nodeData[] = {
 8018068:	4a18      	ldr	r2, [pc, #96]	; (80180cc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801806a:	6053      	str	r3, [r2, #4]
 801806c:	4b16      	ldr	r3, [pc, #88]	; (80180c8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	4a16      	ldr	r2, [pc, #88]	; (80180cc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018072:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension8, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
 8018076:	4b14      	ldr	r3, [pc, #80]	; (80180c8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	3330      	adds	r3, #48	; 0x30
};const NodeInfo_t nodeData[] = {
 801807c:	4a13      	ldr	r2, [pc, #76]	; (80180cc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801807e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 8018082:	4b11      	ldr	r3, [pc, #68]	; (80180c8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	3310      	adds	r3, #16
};const NodeInfo_t nodeData[] = {
 8018088:	4a10      	ldr	r2, [pc, #64]	; (80180cc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801808a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 801808e:	4b0e      	ldr	r3, [pc, #56]	; (80180c8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	4a0e      	ldr	r2, [pc, #56]	; (80180cc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018094:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
static std::vector<void*> overflow_buffers;
 8018098:	480d      	ldr	r0, [pc, #52]	; (80180d0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801809a:	f7fe fa00 	bl	801649e <_ZNSt6vectorIPvSaIS0_EEC1Ev>
static std::vector<scratch_buffer_t> scratch_buffers;
 801809e:	480d      	ldr	r0, [pc, #52]	; (80180d4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80180a0:	f7fe fa67 	bl	8016572 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d10a      	bne.n	80180c0 <_Z41__static_initialization_and_destruction_0ii+0x78>
 80180aa:	683b      	ldr	r3, [r7, #0]
 80180ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80180b0:	4293      	cmp	r3, r2
 80180b2:	d105      	bne.n	80180c0 <_Z41__static_initialization_and_destruction_0ii+0x78>
 80180b4:	4807      	ldr	r0, [pc, #28]	; (80180d4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80180b6:	f000 f80f 	bl	80180d8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>
static std::vector<void*> overflow_buffers;
 80180ba:	4805      	ldr	r0, [pc, #20]	; (80180d0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80180bc:	f000 f827 	bl	801810e <_ZNSt6vectorIPvSaIS0_EED1Ev>
}
 80180c0:	bf00      	nop
 80180c2:	3708      	adds	r7, #8
 80180c4:	46bd      	mov	sp, r7
 80180c6:	bd80      	pop	{r7, pc}
 80180c8:	20000628 	.word	0x20000628
 80180cc:	200000e4 	.word	0x200000e4
 80180d0:	20000aa0 	.word	0x20000aa0
 80180d4:	20000aac 	.word	0x20000aac

080180d8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80180d8:	b5b0      	push	{r4, r5, r7, lr}
 80180da:	b082      	sub	sp, #8
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	681c      	ldr	r4, [r3, #0]
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	4618      	mov	r0, r3
 80180ec:	f7ff fb55 	bl	801779a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 80180f0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80180f2:	461a      	mov	r2, r3
 80180f4:	4629      	mov	r1, r5
 80180f6:	4620      	mov	r0, r4
 80180f8:	f7ff fb73 	bl	80177e2 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      }
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	4618      	mov	r0, r3
 8018100:	f7fe fdfc 	bl	8016cfc <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	4618      	mov	r0, r3
 8018108:	3708      	adds	r7, #8
 801810a:	46bd      	mov	sp, r7
 801810c:	bdb0      	pop	{r4, r5, r7, pc}

0801810e <_ZNSt6vectorIPvSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 801810e:	b5b0      	push	{r4, r5, r7, lr}
 8018110:	b082      	sub	sp, #8
 8018112:	af00      	add	r7, sp, #0
 8018114:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	681c      	ldr	r4, [r3, #0]
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	4618      	mov	r0, r3
 8018122:	f7ff fa1b 	bl	801755c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8018126:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8018128:	461a      	mov	r2, r3
 801812a:	4629      	mov	r1, r5
 801812c:	4620      	mov	r0, r4
 801812e:	f7ff fa39 	bl	80175a4 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      }
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	4618      	mov	r0, r3
 8018136:	f7fe fd87 	bl	8016c48 <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	4618      	mov	r0, r3
 801813e:	3708      	adds	r7, #8
 8018140:	46bd      	mov	sp, r7
 8018142:	bdb0      	pop	{r4, r5, r7, pc}

08018144 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 8018144:	b580      	push	{r7, lr}
 8018146:	af00      	add	r7, sp, #0
 8018148:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801814c:	2001      	movs	r0, #1
 801814e:	f7ff ff7b 	bl	8018048 <_Z41__static_initialization_and_destruction_0ii>
 8018152:	bd80      	pop	{r7, pc}

08018154 <_GLOBAL__sub_D__Z18trained_model_initPFPvjjE>:
 8018154:	b580      	push	{r7, lr}
 8018156:	af00      	add	r7, sp, #0
 8018158:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801815c:	2000      	movs	r0, #0
 801815e:	f7ff ff73 	bl	8018048 <_Z41__static_initialization_and_destruction_0ii>
 8018162:	bd80      	pop	{r7, pc}

08018164 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018164:	b580      	push	{r7, lr}
 8018166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018168:	2200      	movs	r2, #0
 801816a:	4912      	ldr	r1, [pc, #72]	; (80181b4 <MX_USB_DEVICE_Init+0x50>)
 801816c:	4812      	ldr	r0, [pc, #72]	; (80181b8 <MX_USB_DEVICE_Init+0x54>)
 801816e:	f7f0 fb81 	bl	8008874 <USBD_Init>
 8018172:	4603      	mov	r3, r0
 8018174:	2b00      	cmp	r3, #0
 8018176:	d001      	beq.n	801817c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018178:	f7ea fd0e 	bl	8002b98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801817c:	490f      	ldr	r1, [pc, #60]	; (80181bc <MX_USB_DEVICE_Init+0x58>)
 801817e:	480e      	ldr	r0, [pc, #56]	; (80181b8 <MX_USB_DEVICE_Init+0x54>)
 8018180:	f7f0 fba8 	bl	80088d4 <USBD_RegisterClass>
 8018184:	4603      	mov	r3, r0
 8018186:	2b00      	cmp	r3, #0
 8018188:	d001      	beq.n	801818e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801818a:	f7ea fd05 	bl	8002b98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801818e:	490c      	ldr	r1, [pc, #48]	; (80181c0 <MX_USB_DEVICE_Init+0x5c>)
 8018190:	4809      	ldr	r0, [pc, #36]	; (80181b8 <MX_USB_DEVICE_Init+0x54>)
 8018192:	f7f0 fa99 	bl	80086c8 <USBD_CDC_RegisterInterface>
 8018196:	4603      	mov	r3, r0
 8018198:	2b00      	cmp	r3, #0
 801819a:	d001      	beq.n	80181a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801819c:	f7ea fcfc 	bl	8002b98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80181a0:	4805      	ldr	r0, [pc, #20]	; (80181b8 <MX_USB_DEVICE_Init+0x54>)
 80181a2:	f7f0 fbcd 	bl	8008940 <USBD_Start>
 80181a6:	4603      	mov	r3, r0
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d001      	beq.n	80181b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80181ac:	f7ea fcf4 	bl	8002b98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80181b0:	bf00      	nop
 80181b2:	bd80      	pop	{r7, pc}
 80181b4:	20000200 	.word	0x20000200
 80181b8:	20000ab8 	.word	0x20000ab8
 80181bc:	20000058 	.word	0x20000058
 80181c0:	200001ec 	.word	0x200001ec

080181c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80181c4:	b580      	push	{r7, lr}
 80181c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80181c8:	2200      	movs	r2, #0
 80181ca:	4905      	ldr	r1, [pc, #20]	; (80181e0 <CDC_Init_FS+0x1c>)
 80181cc:	4805      	ldr	r0, [pc, #20]	; (80181e4 <CDC_Init_FS+0x20>)
 80181ce:	f7f0 fa95 	bl	80086fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80181d2:	4905      	ldr	r1, [pc, #20]	; (80181e8 <CDC_Init_FS+0x24>)
 80181d4:	4803      	ldr	r0, [pc, #12]	; (80181e4 <CDC_Init_FS+0x20>)
 80181d6:	f7f0 fab3 	bl	8008740 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80181da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80181dc:	4618      	mov	r0, r3
 80181de:	bd80      	pop	{r7, pc}
 80181e0:	20001594 	.word	0x20001594
 80181e4:	20000ab8 	.word	0x20000ab8
 80181e8:	20000d94 	.word	0x20000d94

080181ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80181ec:	b480      	push	{r7}
 80181ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80181f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80181f2:	4618      	mov	r0, r3
 80181f4:	46bd      	mov	sp, r7
 80181f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181fa:	4770      	bx	lr

080181fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80181fc:	b480      	push	{r7}
 80181fe:	b083      	sub	sp, #12
 8018200:	af00      	add	r7, sp, #0
 8018202:	4603      	mov	r3, r0
 8018204:	6039      	str	r1, [r7, #0]
 8018206:	71fb      	strb	r3, [r7, #7]
 8018208:	4613      	mov	r3, r2
 801820a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801820c:	79fb      	ldrb	r3, [r7, #7]
 801820e:	2b23      	cmp	r3, #35	; 0x23
 8018210:	d84a      	bhi.n	80182a8 <CDC_Control_FS+0xac>
 8018212:	a201      	add	r2, pc, #4	; (adr r2, 8018218 <CDC_Control_FS+0x1c>)
 8018214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018218:	080182a9 	.word	0x080182a9
 801821c:	080182a9 	.word	0x080182a9
 8018220:	080182a9 	.word	0x080182a9
 8018224:	080182a9 	.word	0x080182a9
 8018228:	080182a9 	.word	0x080182a9
 801822c:	080182a9 	.word	0x080182a9
 8018230:	080182a9 	.word	0x080182a9
 8018234:	080182a9 	.word	0x080182a9
 8018238:	080182a9 	.word	0x080182a9
 801823c:	080182a9 	.word	0x080182a9
 8018240:	080182a9 	.word	0x080182a9
 8018244:	080182a9 	.word	0x080182a9
 8018248:	080182a9 	.word	0x080182a9
 801824c:	080182a9 	.word	0x080182a9
 8018250:	080182a9 	.word	0x080182a9
 8018254:	080182a9 	.word	0x080182a9
 8018258:	080182a9 	.word	0x080182a9
 801825c:	080182a9 	.word	0x080182a9
 8018260:	080182a9 	.word	0x080182a9
 8018264:	080182a9 	.word	0x080182a9
 8018268:	080182a9 	.word	0x080182a9
 801826c:	080182a9 	.word	0x080182a9
 8018270:	080182a9 	.word	0x080182a9
 8018274:	080182a9 	.word	0x080182a9
 8018278:	080182a9 	.word	0x080182a9
 801827c:	080182a9 	.word	0x080182a9
 8018280:	080182a9 	.word	0x080182a9
 8018284:	080182a9 	.word	0x080182a9
 8018288:	080182a9 	.word	0x080182a9
 801828c:	080182a9 	.word	0x080182a9
 8018290:	080182a9 	.word	0x080182a9
 8018294:	080182a9 	.word	0x080182a9
 8018298:	080182a9 	.word	0x080182a9
 801829c:	080182a9 	.word	0x080182a9
 80182a0:	080182a9 	.word	0x080182a9
 80182a4:	080182a9 	.word	0x080182a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80182a8:	bf00      	nop
  }

  return (USBD_OK);
 80182aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80182ac:	4618      	mov	r0, r3
 80182ae:	370c      	adds	r7, #12
 80182b0:	46bd      	mov	sp, r7
 80182b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182b6:	4770      	bx	lr

080182b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80182b8:	b580      	push	{r7, lr}
 80182ba:	b084      	sub	sp, #16
 80182bc:	af00      	add	r7, sp, #0
 80182be:	6078      	str	r0, [r7, #4]
 80182c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80182c2:	6879      	ldr	r1, [r7, #4]
 80182c4:	480f      	ldr	r0, [pc, #60]	; (8018304 <CDC_Receive_FS+0x4c>)
 80182c6:	f7f0 fa3b 	bl	8008740 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80182ca:	480e      	ldr	r0, [pc, #56]	; (8018304 <CDC_Receive_FS+0x4c>)
 80182cc:	f7f0 fa9c 	bl	8008808 <USBD_CDC_ReceivePacket>
  memset (recivebuffer, '\0', 64);  // clear the buffer
 80182d0:	2240      	movs	r2, #64	; 0x40
 80182d2:	2100      	movs	r1, #0
 80182d4:	480c      	ldr	r0, [pc, #48]	; (8018308 <CDC_Receive_FS+0x50>)
 80182d6:	f002 f853 	bl	801a380 <memset>
    uint8_t len = (uint8_t)*Len;
 80182da:	683b      	ldr	r3, [r7, #0]
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	73fb      	strb	r3, [r7, #15]
    memcpy(recivebuffer, Buf, len);  // copy the data to the buffer
 80182e0:	7bfb      	ldrb	r3, [r7, #15]
 80182e2:	461a      	mov	r2, r3
 80182e4:	6879      	ldr	r1, [r7, #4]
 80182e6:	4808      	ldr	r0, [pc, #32]	; (8018308 <CDC_Receive_FS+0x50>)
 80182e8:	f002 f822 	bl	801a330 <memcpy>
    memset(Buf, '\0', len);   // clear the Buf also
 80182ec:	7bfb      	ldrb	r3, [r7, #15]
 80182ee:	461a      	mov	r2, r3
 80182f0:	2100      	movs	r1, #0
 80182f2:	6878      	ldr	r0, [r7, #4]
 80182f4:	f002 f844 	bl	801a380 <memset>
  return (USBD_OK);
 80182f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80182fa:	4618      	mov	r0, r3
 80182fc:	3710      	adds	r7, #16
 80182fe:	46bd      	mov	sp, r7
 8018300:	bd80      	pop	{r7, pc}
 8018302:	bf00      	nop
 8018304:	20000ab8 	.word	0x20000ab8
 8018308:	200004fc 	.word	0x200004fc

0801830c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801830c:	b580      	push	{r7, lr}
 801830e:	b084      	sub	sp, #16
 8018310:	af00      	add	r7, sp, #0
 8018312:	6078      	str	r0, [r7, #4]
 8018314:	460b      	mov	r3, r1
 8018316:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018318:	2300      	movs	r3, #0
 801831a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801831c:	4b0d      	ldr	r3, [pc, #52]	; (8018354 <CDC_Transmit_FS+0x48>)
 801831e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018322:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8018324:	68bb      	ldr	r3, [r7, #8]
 8018326:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801832a:	2b00      	cmp	r3, #0
 801832c:	d001      	beq.n	8018332 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801832e:	2301      	movs	r3, #1
 8018330:	e00b      	b.n	801834a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8018332:	887b      	ldrh	r3, [r7, #2]
 8018334:	461a      	mov	r2, r3
 8018336:	6879      	ldr	r1, [r7, #4]
 8018338:	4806      	ldr	r0, [pc, #24]	; (8018354 <CDC_Transmit_FS+0x48>)
 801833a:	f7f0 f9df 	bl	80086fc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801833e:	4805      	ldr	r0, [pc, #20]	; (8018354 <CDC_Transmit_FS+0x48>)
 8018340:	f7f0 fa1c 	bl	800877c <USBD_CDC_TransmitPacket>
 8018344:	4603      	mov	r3, r0
 8018346:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8018348:	7bfb      	ldrb	r3, [r7, #15]
}
 801834a:	4618      	mov	r0, r3
 801834c:	3710      	adds	r7, #16
 801834e:	46bd      	mov	sp, r7
 8018350:	bd80      	pop	{r7, pc}
 8018352:	bf00      	nop
 8018354:	20000ab8 	.word	0x20000ab8

08018358 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018358:	b480      	push	{r7}
 801835a:	b087      	sub	sp, #28
 801835c:	af00      	add	r7, sp, #0
 801835e:	60f8      	str	r0, [r7, #12]
 8018360:	60b9      	str	r1, [r7, #8]
 8018362:	4613      	mov	r3, r2
 8018364:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018366:	2300      	movs	r3, #0
 8018368:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801836a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801836e:	4618      	mov	r0, r3
 8018370:	371c      	adds	r7, #28
 8018372:	46bd      	mov	sp, r7
 8018374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018378:	4770      	bx	lr
	...

0801837c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801837c:	b480      	push	{r7}
 801837e:	b083      	sub	sp, #12
 8018380:	af00      	add	r7, sp, #0
 8018382:	4603      	mov	r3, r0
 8018384:	6039      	str	r1, [r7, #0]
 8018386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018388:	683b      	ldr	r3, [r7, #0]
 801838a:	2212      	movs	r2, #18
 801838c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801838e:	4b03      	ldr	r3, [pc, #12]	; (801839c <USBD_FS_DeviceDescriptor+0x20>)
}
 8018390:	4618      	mov	r0, r3
 8018392:	370c      	adds	r7, #12
 8018394:	46bd      	mov	sp, r7
 8018396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801839a:	4770      	bx	lr
 801839c:	2000021c 	.word	0x2000021c

080183a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80183a0:	b480      	push	{r7}
 80183a2:	b083      	sub	sp, #12
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	4603      	mov	r3, r0
 80183a8:	6039      	str	r1, [r7, #0]
 80183aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80183ac:	683b      	ldr	r3, [r7, #0]
 80183ae:	2204      	movs	r2, #4
 80183b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80183b2:	4b03      	ldr	r3, [pc, #12]	; (80183c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80183b4:	4618      	mov	r0, r3
 80183b6:	370c      	adds	r7, #12
 80183b8:	46bd      	mov	sp, r7
 80183ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183be:	4770      	bx	lr
 80183c0:	20000230 	.word	0x20000230

080183c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	b082      	sub	sp, #8
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	4603      	mov	r3, r0
 80183cc:	6039      	str	r1, [r7, #0]
 80183ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80183d0:	79fb      	ldrb	r3, [r7, #7]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d105      	bne.n	80183e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80183d6:	683a      	ldr	r2, [r7, #0]
 80183d8:	4907      	ldr	r1, [pc, #28]	; (80183f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80183da:	4808      	ldr	r0, [pc, #32]	; (80183fc <USBD_FS_ProductStrDescriptor+0x38>)
 80183dc:	f7f1 fc5c 	bl	8009c98 <USBD_GetString>
 80183e0:	e004      	b.n	80183ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80183e2:	683a      	ldr	r2, [r7, #0]
 80183e4:	4904      	ldr	r1, [pc, #16]	; (80183f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80183e6:	4805      	ldr	r0, [pc, #20]	; (80183fc <USBD_FS_ProductStrDescriptor+0x38>)
 80183e8:	f7f1 fc56 	bl	8009c98 <USBD_GetString>
  }
  return USBD_StrDesc;
 80183ec:	4b02      	ldr	r3, [pc, #8]	; (80183f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80183ee:	4618      	mov	r0, r3
 80183f0:	3708      	adds	r7, #8
 80183f2:	46bd      	mov	sp, r7
 80183f4:	bd80      	pop	{r7, pc}
 80183f6:	bf00      	nop
 80183f8:	20001d94 	.word	0x20001d94
 80183fc:	0801eb60 	.word	0x0801eb60

08018400 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018400:	b580      	push	{r7, lr}
 8018402:	b082      	sub	sp, #8
 8018404:	af00      	add	r7, sp, #0
 8018406:	4603      	mov	r3, r0
 8018408:	6039      	str	r1, [r7, #0]
 801840a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801840c:	683a      	ldr	r2, [r7, #0]
 801840e:	4904      	ldr	r1, [pc, #16]	; (8018420 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018410:	4804      	ldr	r0, [pc, #16]	; (8018424 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018412:	f7f1 fc41 	bl	8009c98 <USBD_GetString>
  return USBD_StrDesc;
 8018416:	4b02      	ldr	r3, [pc, #8]	; (8018420 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018418:	4618      	mov	r0, r3
 801841a:	3708      	adds	r7, #8
 801841c:	46bd      	mov	sp, r7
 801841e:	bd80      	pop	{r7, pc}
 8018420:	20001d94 	.word	0x20001d94
 8018424:	0801eb78 	.word	0x0801eb78

08018428 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018428:	b580      	push	{r7, lr}
 801842a:	b082      	sub	sp, #8
 801842c:	af00      	add	r7, sp, #0
 801842e:	4603      	mov	r3, r0
 8018430:	6039      	str	r1, [r7, #0]
 8018432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018434:	683b      	ldr	r3, [r7, #0]
 8018436:	221a      	movs	r2, #26
 8018438:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801843a:	f000 f843 	bl	80184c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801843e:	4b02      	ldr	r3, [pc, #8]	; (8018448 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018440:	4618      	mov	r0, r3
 8018442:	3708      	adds	r7, #8
 8018444:	46bd      	mov	sp, r7
 8018446:	bd80      	pop	{r7, pc}
 8018448:	20000234 	.word	0x20000234

0801844c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801844c:	b580      	push	{r7, lr}
 801844e:	b082      	sub	sp, #8
 8018450:	af00      	add	r7, sp, #0
 8018452:	4603      	mov	r3, r0
 8018454:	6039      	str	r1, [r7, #0]
 8018456:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018458:	79fb      	ldrb	r3, [r7, #7]
 801845a:	2b00      	cmp	r3, #0
 801845c:	d105      	bne.n	801846a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801845e:	683a      	ldr	r2, [r7, #0]
 8018460:	4907      	ldr	r1, [pc, #28]	; (8018480 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018462:	4808      	ldr	r0, [pc, #32]	; (8018484 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018464:	f7f1 fc18 	bl	8009c98 <USBD_GetString>
 8018468:	e004      	b.n	8018474 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801846a:	683a      	ldr	r2, [r7, #0]
 801846c:	4904      	ldr	r1, [pc, #16]	; (8018480 <USBD_FS_ConfigStrDescriptor+0x34>)
 801846e:	4805      	ldr	r0, [pc, #20]	; (8018484 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018470:	f7f1 fc12 	bl	8009c98 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018474:	4b02      	ldr	r3, [pc, #8]	; (8018480 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018476:	4618      	mov	r0, r3
 8018478:	3708      	adds	r7, #8
 801847a:	46bd      	mov	sp, r7
 801847c:	bd80      	pop	{r7, pc}
 801847e:	bf00      	nop
 8018480:	20001d94 	.word	0x20001d94
 8018484:	0801eb8c 	.word	0x0801eb8c

08018488 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018488:	b580      	push	{r7, lr}
 801848a:	b082      	sub	sp, #8
 801848c:	af00      	add	r7, sp, #0
 801848e:	4603      	mov	r3, r0
 8018490:	6039      	str	r1, [r7, #0]
 8018492:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018494:	79fb      	ldrb	r3, [r7, #7]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d105      	bne.n	80184a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801849a:	683a      	ldr	r2, [r7, #0]
 801849c:	4907      	ldr	r1, [pc, #28]	; (80184bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801849e:	4808      	ldr	r0, [pc, #32]	; (80184c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80184a0:	f7f1 fbfa 	bl	8009c98 <USBD_GetString>
 80184a4:	e004      	b.n	80184b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80184a6:	683a      	ldr	r2, [r7, #0]
 80184a8:	4904      	ldr	r1, [pc, #16]	; (80184bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80184aa:	4805      	ldr	r0, [pc, #20]	; (80184c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80184ac:	f7f1 fbf4 	bl	8009c98 <USBD_GetString>
  }
  return USBD_StrDesc;
 80184b0:	4b02      	ldr	r3, [pc, #8]	; (80184bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80184b2:	4618      	mov	r0, r3
 80184b4:	3708      	adds	r7, #8
 80184b6:	46bd      	mov	sp, r7
 80184b8:	bd80      	pop	{r7, pc}
 80184ba:	bf00      	nop
 80184bc:	20001d94 	.word	0x20001d94
 80184c0:	0801eb98 	.word	0x0801eb98

080184c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	b084      	sub	sp, #16
 80184c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80184ca:	4b0f      	ldr	r3, [pc, #60]	; (8018508 <Get_SerialNum+0x44>)
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80184d0:	4b0e      	ldr	r3, [pc, #56]	; (801850c <Get_SerialNum+0x48>)
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80184d6:	4b0e      	ldr	r3, [pc, #56]	; (8018510 <Get_SerialNum+0x4c>)
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80184dc:	68fa      	ldr	r2, [r7, #12]
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	4413      	add	r3, r2
 80184e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d009      	beq.n	80184fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80184ea:	2208      	movs	r2, #8
 80184ec:	4909      	ldr	r1, [pc, #36]	; (8018514 <Get_SerialNum+0x50>)
 80184ee:	68f8      	ldr	r0, [r7, #12]
 80184f0:	f000 f814 	bl	801851c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80184f4:	2204      	movs	r2, #4
 80184f6:	4908      	ldr	r1, [pc, #32]	; (8018518 <Get_SerialNum+0x54>)
 80184f8:	68b8      	ldr	r0, [r7, #8]
 80184fa:	f000 f80f 	bl	801851c <IntToUnicode>
  }
}
 80184fe:	bf00      	nop
 8018500:	3710      	adds	r7, #16
 8018502:	46bd      	mov	sp, r7
 8018504:	bd80      	pop	{r7, pc}
 8018506:	bf00      	nop
 8018508:	1fff7a10 	.word	0x1fff7a10
 801850c:	1fff7a14 	.word	0x1fff7a14
 8018510:	1fff7a18 	.word	0x1fff7a18
 8018514:	20000236 	.word	0x20000236
 8018518:	20000246 	.word	0x20000246

0801851c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801851c:	b480      	push	{r7}
 801851e:	b087      	sub	sp, #28
 8018520:	af00      	add	r7, sp, #0
 8018522:	60f8      	str	r0, [r7, #12]
 8018524:	60b9      	str	r1, [r7, #8]
 8018526:	4613      	mov	r3, r2
 8018528:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801852a:	2300      	movs	r3, #0
 801852c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801852e:	2300      	movs	r3, #0
 8018530:	75fb      	strb	r3, [r7, #23]
 8018532:	e027      	b.n	8018584 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	0f1b      	lsrs	r3, r3, #28
 8018538:	2b09      	cmp	r3, #9
 801853a:	d80b      	bhi.n	8018554 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	0f1b      	lsrs	r3, r3, #28
 8018540:	b2da      	uxtb	r2, r3
 8018542:	7dfb      	ldrb	r3, [r7, #23]
 8018544:	005b      	lsls	r3, r3, #1
 8018546:	4619      	mov	r1, r3
 8018548:	68bb      	ldr	r3, [r7, #8]
 801854a:	440b      	add	r3, r1
 801854c:	3230      	adds	r2, #48	; 0x30
 801854e:	b2d2      	uxtb	r2, r2
 8018550:	701a      	strb	r2, [r3, #0]
 8018552:	e00a      	b.n	801856a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	0f1b      	lsrs	r3, r3, #28
 8018558:	b2da      	uxtb	r2, r3
 801855a:	7dfb      	ldrb	r3, [r7, #23]
 801855c:	005b      	lsls	r3, r3, #1
 801855e:	4619      	mov	r1, r3
 8018560:	68bb      	ldr	r3, [r7, #8]
 8018562:	440b      	add	r3, r1
 8018564:	3237      	adds	r2, #55	; 0x37
 8018566:	b2d2      	uxtb	r2, r2
 8018568:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	011b      	lsls	r3, r3, #4
 801856e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018570:	7dfb      	ldrb	r3, [r7, #23]
 8018572:	005b      	lsls	r3, r3, #1
 8018574:	3301      	adds	r3, #1
 8018576:	68ba      	ldr	r2, [r7, #8]
 8018578:	4413      	add	r3, r2
 801857a:	2200      	movs	r2, #0
 801857c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801857e:	7dfb      	ldrb	r3, [r7, #23]
 8018580:	3301      	adds	r3, #1
 8018582:	75fb      	strb	r3, [r7, #23]
 8018584:	7dfa      	ldrb	r2, [r7, #23]
 8018586:	79fb      	ldrb	r3, [r7, #7]
 8018588:	429a      	cmp	r2, r3
 801858a:	d3d3      	bcc.n	8018534 <IntToUnicode+0x18>
  }
}
 801858c:	bf00      	nop
 801858e:	bf00      	nop
 8018590:	371c      	adds	r7, #28
 8018592:	46bd      	mov	sp, r7
 8018594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018598:	4770      	bx	lr
	...

0801859c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b08a      	sub	sp, #40	; 0x28
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80185a4:	f107 0314 	add.w	r3, r7, #20
 80185a8:	2200      	movs	r2, #0
 80185aa:	601a      	str	r2, [r3, #0]
 80185ac:	605a      	str	r2, [r3, #4]
 80185ae:	609a      	str	r2, [r3, #8]
 80185b0:	60da      	str	r2, [r3, #12]
 80185b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80185bc:	d13a      	bne.n	8018634 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80185be:	2300      	movs	r3, #0
 80185c0:	613b      	str	r3, [r7, #16]
 80185c2:	4b1e      	ldr	r3, [pc, #120]	; (801863c <HAL_PCD_MspInit+0xa0>)
 80185c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80185c6:	4a1d      	ldr	r2, [pc, #116]	; (801863c <HAL_PCD_MspInit+0xa0>)
 80185c8:	f043 0301 	orr.w	r3, r3, #1
 80185cc:	6313      	str	r3, [r2, #48]	; 0x30
 80185ce:	4b1b      	ldr	r3, [pc, #108]	; (801863c <HAL_PCD_MspInit+0xa0>)
 80185d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80185d2:	f003 0301 	and.w	r3, r3, #1
 80185d6:	613b      	str	r3, [r7, #16]
 80185d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80185da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80185de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80185e0:	2302      	movs	r3, #2
 80185e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80185e4:	2300      	movs	r3, #0
 80185e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80185e8:	2303      	movs	r3, #3
 80185ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80185ec:	230a      	movs	r3, #10
 80185ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80185f0:	f107 0314 	add.w	r3, r7, #20
 80185f4:	4619      	mov	r1, r3
 80185f6:	4812      	ldr	r0, [pc, #72]	; (8018640 <HAL_PCD_MspInit+0xa4>)
 80185f8:	f7eb fce6 	bl	8003fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80185fc:	4b0f      	ldr	r3, [pc, #60]	; (801863c <HAL_PCD_MspInit+0xa0>)
 80185fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018600:	4a0e      	ldr	r2, [pc, #56]	; (801863c <HAL_PCD_MspInit+0xa0>)
 8018602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018606:	6353      	str	r3, [r2, #52]	; 0x34
 8018608:	2300      	movs	r3, #0
 801860a:	60fb      	str	r3, [r7, #12]
 801860c:	4b0b      	ldr	r3, [pc, #44]	; (801863c <HAL_PCD_MspInit+0xa0>)
 801860e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018610:	4a0a      	ldr	r2, [pc, #40]	; (801863c <HAL_PCD_MspInit+0xa0>)
 8018612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018616:	6453      	str	r3, [r2, #68]	; 0x44
 8018618:	4b08      	ldr	r3, [pc, #32]	; (801863c <HAL_PCD_MspInit+0xa0>)
 801861a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801861c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018620:	60fb      	str	r3, [r7, #12]
 8018622:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8018624:	2200      	movs	r2, #0
 8018626:	2100      	movs	r1, #0
 8018628:	2043      	movs	r0, #67	; 0x43
 801862a:	f7eb fc7a 	bl	8003f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801862e:	2043      	movs	r0, #67	; 0x43
 8018630:	f7eb fc93 	bl	8003f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018634:	bf00      	nop
 8018636:	3728      	adds	r7, #40	; 0x28
 8018638:	46bd      	mov	sp, r7
 801863a:	bd80      	pop	{r7, pc}
 801863c:	40023800 	.word	0x40023800
 8018640:	40020000 	.word	0x40020000

08018644 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018644:	b580      	push	{r7, lr}
 8018646:	b082      	sub	sp, #8
 8018648:	af00      	add	r7, sp, #0
 801864a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8018658:	4619      	mov	r1, r3
 801865a:	4610      	mov	r0, r2
 801865c:	f7f0 f9bd 	bl	80089da <USBD_LL_SetupStage>
}
 8018660:	bf00      	nop
 8018662:	3708      	adds	r7, #8
 8018664:	46bd      	mov	sp, r7
 8018666:	bd80      	pop	{r7, pc}

08018668 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018668:	b580      	push	{r7, lr}
 801866a:	b082      	sub	sp, #8
 801866c:	af00      	add	r7, sp, #0
 801866e:	6078      	str	r0, [r7, #4]
 8018670:	460b      	mov	r3, r1
 8018672:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801867a:	78fa      	ldrb	r2, [r7, #3]
 801867c:	6879      	ldr	r1, [r7, #4]
 801867e:	4613      	mov	r3, r2
 8018680:	00db      	lsls	r3, r3, #3
 8018682:	4413      	add	r3, r2
 8018684:	009b      	lsls	r3, r3, #2
 8018686:	440b      	add	r3, r1
 8018688:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801868c:	681a      	ldr	r2, [r3, #0]
 801868e:	78fb      	ldrb	r3, [r7, #3]
 8018690:	4619      	mov	r1, r3
 8018692:	f7f0 f9f7 	bl	8008a84 <USBD_LL_DataOutStage>
}
 8018696:	bf00      	nop
 8018698:	3708      	adds	r7, #8
 801869a:	46bd      	mov	sp, r7
 801869c:	bd80      	pop	{r7, pc}

0801869e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801869e:	b580      	push	{r7, lr}
 80186a0:	b082      	sub	sp, #8
 80186a2:	af00      	add	r7, sp, #0
 80186a4:	6078      	str	r0, [r7, #4]
 80186a6:	460b      	mov	r3, r1
 80186a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80186b0:	78fa      	ldrb	r2, [r7, #3]
 80186b2:	6879      	ldr	r1, [r7, #4]
 80186b4:	4613      	mov	r3, r2
 80186b6:	00db      	lsls	r3, r3, #3
 80186b8:	4413      	add	r3, r2
 80186ba:	009b      	lsls	r3, r3, #2
 80186bc:	440b      	add	r3, r1
 80186be:	334c      	adds	r3, #76	; 0x4c
 80186c0:	681a      	ldr	r2, [r3, #0]
 80186c2:	78fb      	ldrb	r3, [r7, #3]
 80186c4:	4619      	mov	r1, r3
 80186c6:	f7f0 fa90 	bl	8008bea <USBD_LL_DataInStage>
}
 80186ca:	bf00      	nop
 80186cc:	3708      	adds	r7, #8
 80186ce:	46bd      	mov	sp, r7
 80186d0:	bd80      	pop	{r7, pc}

080186d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80186d2:	b580      	push	{r7, lr}
 80186d4:	b082      	sub	sp, #8
 80186d6:	af00      	add	r7, sp, #0
 80186d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80186e0:	4618      	mov	r0, r3
 80186e2:	f7f0 fbc4 	bl	8008e6e <USBD_LL_SOF>
}
 80186e6:	bf00      	nop
 80186e8:	3708      	adds	r7, #8
 80186ea:	46bd      	mov	sp, r7
 80186ec:	bd80      	pop	{r7, pc}

080186ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80186ee:	b580      	push	{r7, lr}
 80186f0:	b084      	sub	sp, #16
 80186f2:	af00      	add	r7, sp, #0
 80186f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80186f6:	2301      	movs	r3, #1
 80186f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	68db      	ldr	r3, [r3, #12]
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d102      	bne.n	8018708 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018702:	2300      	movs	r3, #0
 8018704:	73fb      	strb	r3, [r7, #15]
 8018706:	e008      	b.n	801871a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	68db      	ldr	r3, [r3, #12]
 801870c:	2b02      	cmp	r3, #2
 801870e:	d102      	bne.n	8018716 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018710:	2301      	movs	r3, #1
 8018712:	73fb      	strb	r3, [r7, #15]
 8018714:	e001      	b.n	801871a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018716:	f7ea fa3f 	bl	8002b98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018720:	7bfa      	ldrb	r2, [r7, #15]
 8018722:	4611      	mov	r1, r2
 8018724:	4618      	mov	r0, r3
 8018726:	f7f0 fb64 	bl	8008df2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018730:	4618      	mov	r0, r3
 8018732:	f7f0 fb0c 	bl	8008d4e <USBD_LL_Reset>
}
 8018736:	bf00      	nop
 8018738:	3710      	adds	r7, #16
 801873a:	46bd      	mov	sp, r7
 801873c:	bd80      	pop	{r7, pc}
	...

08018740 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018740:	b580      	push	{r7, lr}
 8018742:	b082      	sub	sp, #8
 8018744:	af00      	add	r7, sp, #0
 8018746:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801874e:	4618      	mov	r0, r3
 8018750:	f7f0 fb5f 	bl	8008e12 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	687a      	ldr	r2, [r7, #4]
 8018760:	6812      	ldr	r2, [r2, #0]
 8018762:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018766:	f043 0301 	orr.w	r3, r3, #1
 801876a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	6a1b      	ldr	r3, [r3, #32]
 8018770:	2b00      	cmp	r3, #0
 8018772:	d005      	beq.n	8018780 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018774:	4b04      	ldr	r3, [pc, #16]	; (8018788 <HAL_PCD_SuspendCallback+0x48>)
 8018776:	691b      	ldr	r3, [r3, #16]
 8018778:	4a03      	ldr	r2, [pc, #12]	; (8018788 <HAL_PCD_SuspendCallback+0x48>)
 801877a:	f043 0306 	orr.w	r3, r3, #6
 801877e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018780:	bf00      	nop
 8018782:	3708      	adds	r7, #8
 8018784:	46bd      	mov	sp, r7
 8018786:	bd80      	pop	{r7, pc}
 8018788:	e000ed00 	.word	0xe000ed00

0801878c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801878c:	b580      	push	{r7, lr}
 801878e:	b082      	sub	sp, #8
 8018790:	af00      	add	r7, sp, #0
 8018792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801879a:	4618      	mov	r0, r3
 801879c:	f7f0 fb4f 	bl	8008e3e <USBD_LL_Resume>
}
 80187a0:	bf00      	nop
 80187a2:	3708      	adds	r7, #8
 80187a4:	46bd      	mov	sp, r7
 80187a6:	bd80      	pop	{r7, pc}

080187a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80187a8:	b580      	push	{r7, lr}
 80187aa:	b082      	sub	sp, #8
 80187ac:	af00      	add	r7, sp, #0
 80187ae:	6078      	str	r0, [r7, #4]
 80187b0:	460b      	mov	r3, r1
 80187b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80187ba:	78fa      	ldrb	r2, [r7, #3]
 80187bc:	4611      	mov	r1, r2
 80187be:	4618      	mov	r0, r3
 80187c0:	f7f0 fba7 	bl	8008f12 <USBD_LL_IsoOUTIncomplete>
}
 80187c4:	bf00      	nop
 80187c6:	3708      	adds	r7, #8
 80187c8:	46bd      	mov	sp, r7
 80187ca:	bd80      	pop	{r7, pc}

080187cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80187cc:	b580      	push	{r7, lr}
 80187ce:	b082      	sub	sp, #8
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	6078      	str	r0, [r7, #4]
 80187d4:	460b      	mov	r3, r1
 80187d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80187de:	78fa      	ldrb	r2, [r7, #3]
 80187e0:	4611      	mov	r1, r2
 80187e2:	4618      	mov	r0, r3
 80187e4:	f7f0 fb63 	bl	8008eae <USBD_LL_IsoINIncomplete>
}
 80187e8:	bf00      	nop
 80187ea:	3708      	adds	r7, #8
 80187ec:	46bd      	mov	sp, r7
 80187ee:	bd80      	pop	{r7, pc}

080187f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80187f0:	b580      	push	{r7, lr}
 80187f2:	b082      	sub	sp, #8
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80187fe:	4618      	mov	r0, r3
 8018800:	f7f0 fbb9 	bl	8008f76 <USBD_LL_DevConnected>
}
 8018804:	bf00      	nop
 8018806:	3708      	adds	r7, #8
 8018808:	46bd      	mov	sp, r7
 801880a:	bd80      	pop	{r7, pc}

0801880c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801880c:	b580      	push	{r7, lr}
 801880e:	b082      	sub	sp, #8
 8018810:	af00      	add	r7, sp, #0
 8018812:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801881a:	4618      	mov	r0, r3
 801881c:	f7f0 fbb6 	bl	8008f8c <USBD_LL_DevDisconnected>
}
 8018820:	bf00      	nop
 8018822:	3708      	adds	r7, #8
 8018824:	46bd      	mov	sp, r7
 8018826:	bd80      	pop	{r7, pc}

08018828 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018828:	b580      	push	{r7, lr}
 801882a:	b082      	sub	sp, #8
 801882c:	af00      	add	r7, sp, #0
 801882e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	781b      	ldrb	r3, [r3, #0]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d13c      	bne.n	80188b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018838:	4a20      	ldr	r2, [pc, #128]	; (80188bc <USBD_LL_Init+0x94>)
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	4a1e      	ldr	r2, [pc, #120]	; (80188bc <USBD_LL_Init+0x94>)
 8018844:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018848:	4b1c      	ldr	r3, [pc, #112]	; (80188bc <USBD_LL_Init+0x94>)
 801884a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801884e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018850:	4b1a      	ldr	r3, [pc, #104]	; (80188bc <USBD_LL_Init+0x94>)
 8018852:	2204      	movs	r2, #4
 8018854:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018856:	4b19      	ldr	r3, [pc, #100]	; (80188bc <USBD_LL_Init+0x94>)
 8018858:	2202      	movs	r2, #2
 801885a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801885c:	4b17      	ldr	r3, [pc, #92]	; (80188bc <USBD_LL_Init+0x94>)
 801885e:	2200      	movs	r2, #0
 8018860:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018862:	4b16      	ldr	r3, [pc, #88]	; (80188bc <USBD_LL_Init+0x94>)
 8018864:	2202      	movs	r2, #2
 8018866:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018868:	4b14      	ldr	r3, [pc, #80]	; (80188bc <USBD_LL_Init+0x94>)
 801886a:	2200      	movs	r2, #0
 801886c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801886e:	4b13      	ldr	r3, [pc, #76]	; (80188bc <USBD_LL_Init+0x94>)
 8018870:	2200      	movs	r2, #0
 8018872:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018874:	4b11      	ldr	r3, [pc, #68]	; (80188bc <USBD_LL_Init+0x94>)
 8018876:	2200      	movs	r2, #0
 8018878:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801887a:	4b10      	ldr	r3, [pc, #64]	; (80188bc <USBD_LL_Init+0x94>)
 801887c:	2200      	movs	r2, #0
 801887e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018880:	4b0e      	ldr	r3, [pc, #56]	; (80188bc <USBD_LL_Init+0x94>)
 8018882:	2200      	movs	r2, #0
 8018884:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8018886:	480d      	ldr	r0, [pc, #52]	; (80188bc <USBD_LL_Init+0x94>)
 8018888:	f7eb fd53 	bl	8004332 <HAL_PCD_Init>
 801888c:	4603      	mov	r3, r0
 801888e:	2b00      	cmp	r3, #0
 8018890:	d001      	beq.n	8018896 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8018892:	f7ea f981 	bl	8002b98 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018896:	2180      	movs	r1, #128	; 0x80
 8018898:	4808      	ldr	r0, [pc, #32]	; (80188bc <USBD_LL_Init+0x94>)
 801889a:	f7ec ffaa 	bl	80057f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801889e:	2240      	movs	r2, #64	; 0x40
 80188a0:	2100      	movs	r1, #0
 80188a2:	4806      	ldr	r0, [pc, #24]	; (80188bc <USBD_LL_Init+0x94>)
 80188a4:	f7ec ff5e 	bl	8005764 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80188a8:	2280      	movs	r2, #128	; 0x80
 80188aa:	2101      	movs	r1, #1
 80188ac:	4803      	ldr	r0, [pc, #12]	; (80188bc <USBD_LL_Init+0x94>)
 80188ae:	f7ec ff59 	bl	8005764 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80188b2:	2300      	movs	r3, #0
}
 80188b4:	4618      	mov	r0, r3
 80188b6:	3708      	adds	r7, #8
 80188b8:	46bd      	mov	sp, r7
 80188ba:	bd80      	pop	{r7, pc}
 80188bc:	20001f94 	.word	0x20001f94

080188c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b084      	sub	sp, #16
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80188c8:	2300      	movs	r3, #0
 80188ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80188cc:	2300      	movs	r3, #0
 80188ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80188d6:	4618      	mov	r0, r3
 80188d8:	f7eb fe48 	bl	800456c <HAL_PCD_Start>
 80188dc:	4603      	mov	r3, r0
 80188de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80188e0:	7bfb      	ldrb	r3, [r7, #15]
 80188e2:	4618      	mov	r0, r3
 80188e4:	f000 f942 	bl	8018b6c <USBD_Get_USB_Status>
 80188e8:	4603      	mov	r3, r0
 80188ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80188ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80188ee:	4618      	mov	r0, r3
 80188f0:	3710      	adds	r7, #16
 80188f2:	46bd      	mov	sp, r7
 80188f4:	bd80      	pop	{r7, pc}

080188f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80188f6:	b580      	push	{r7, lr}
 80188f8:	b084      	sub	sp, #16
 80188fa:	af00      	add	r7, sp, #0
 80188fc:	6078      	str	r0, [r7, #4]
 80188fe:	4608      	mov	r0, r1
 8018900:	4611      	mov	r1, r2
 8018902:	461a      	mov	r2, r3
 8018904:	4603      	mov	r3, r0
 8018906:	70fb      	strb	r3, [r7, #3]
 8018908:	460b      	mov	r3, r1
 801890a:	70bb      	strb	r3, [r7, #2]
 801890c:	4613      	mov	r3, r2
 801890e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018910:	2300      	movs	r3, #0
 8018912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018914:	2300      	movs	r3, #0
 8018916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801891e:	78bb      	ldrb	r3, [r7, #2]
 8018920:	883a      	ldrh	r2, [r7, #0]
 8018922:	78f9      	ldrb	r1, [r7, #3]
 8018924:	f7ec fb19 	bl	8004f5a <HAL_PCD_EP_Open>
 8018928:	4603      	mov	r3, r0
 801892a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801892c:	7bfb      	ldrb	r3, [r7, #15]
 801892e:	4618      	mov	r0, r3
 8018930:	f000 f91c 	bl	8018b6c <USBD_Get_USB_Status>
 8018934:	4603      	mov	r3, r0
 8018936:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018938:	7bbb      	ldrb	r3, [r7, #14]
}
 801893a:	4618      	mov	r0, r3
 801893c:	3710      	adds	r7, #16
 801893e:	46bd      	mov	sp, r7
 8018940:	bd80      	pop	{r7, pc}

08018942 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018942:	b580      	push	{r7, lr}
 8018944:	b084      	sub	sp, #16
 8018946:	af00      	add	r7, sp, #0
 8018948:	6078      	str	r0, [r7, #4]
 801894a:	460b      	mov	r3, r1
 801894c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801894e:	2300      	movs	r3, #0
 8018950:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018952:	2300      	movs	r3, #0
 8018954:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801895c:	78fa      	ldrb	r2, [r7, #3]
 801895e:	4611      	mov	r1, r2
 8018960:	4618      	mov	r0, r3
 8018962:	f7ec fb62 	bl	800502a <HAL_PCD_EP_Close>
 8018966:	4603      	mov	r3, r0
 8018968:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801896a:	7bfb      	ldrb	r3, [r7, #15]
 801896c:	4618      	mov	r0, r3
 801896e:	f000 f8fd 	bl	8018b6c <USBD_Get_USB_Status>
 8018972:	4603      	mov	r3, r0
 8018974:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018976:	7bbb      	ldrb	r3, [r7, #14]
}
 8018978:	4618      	mov	r0, r3
 801897a:	3710      	adds	r7, #16
 801897c:	46bd      	mov	sp, r7
 801897e:	bd80      	pop	{r7, pc}

08018980 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018980:	b580      	push	{r7, lr}
 8018982:	b084      	sub	sp, #16
 8018984:	af00      	add	r7, sp, #0
 8018986:	6078      	str	r0, [r7, #4]
 8018988:	460b      	mov	r3, r1
 801898a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801898c:	2300      	movs	r3, #0
 801898e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018990:	2300      	movs	r3, #0
 8018992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801899a:	78fa      	ldrb	r2, [r7, #3]
 801899c:	4611      	mov	r1, r2
 801899e:	4618      	mov	r0, r3
 80189a0:	f7ec fc3a 	bl	8005218 <HAL_PCD_EP_SetStall>
 80189a4:	4603      	mov	r3, r0
 80189a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80189a8:	7bfb      	ldrb	r3, [r7, #15]
 80189aa:	4618      	mov	r0, r3
 80189ac:	f000 f8de 	bl	8018b6c <USBD_Get_USB_Status>
 80189b0:	4603      	mov	r3, r0
 80189b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80189b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80189b6:	4618      	mov	r0, r3
 80189b8:	3710      	adds	r7, #16
 80189ba:	46bd      	mov	sp, r7
 80189bc:	bd80      	pop	{r7, pc}

080189be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80189be:	b580      	push	{r7, lr}
 80189c0:	b084      	sub	sp, #16
 80189c2:	af00      	add	r7, sp, #0
 80189c4:	6078      	str	r0, [r7, #4]
 80189c6:	460b      	mov	r3, r1
 80189c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80189ca:	2300      	movs	r3, #0
 80189cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80189ce:	2300      	movs	r3, #0
 80189d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80189d8:	78fa      	ldrb	r2, [r7, #3]
 80189da:	4611      	mov	r1, r2
 80189dc:	4618      	mov	r0, r3
 80189de:	f7ec fc7f 	bl	80052e0 <HAL_PCD_EP_ClrStall>
 80189e2:	4603      	mov	r3, r0
 80189e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80189e6:	7bfb      	ldrb	r3, [r7, #15]
 80189e8:	4618      	mov	r0, r3
 80189ea:	f000 f8bf 	bl	8018b6c <USBD_Get_USB_Status>
 80189ee:	4603      	mov	r3, r0
 80189f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80189f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80189f4:	4618      	mov	r0, r3
 80189f6:	3710      	adds	r7, #16
 80189f8:	46bd      	mov	sp, r7
 80189fa:	bd80      	pop	{r7, pc}

080189fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80189fc:	b480      	push	{r7}
 80189fe:	b085      	sub	sp, #20
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
 8018a04:	460b      	mov	r3, r1
 8018a06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018a0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018a10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	da0b      	bge.n	8018a30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018a18:	78fb      	ldrb	r3, [r7, #3]
 8018a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018a1e:	68f9      	ldr	r1, [r7, #12]
 8018a20:	4613      	mov	r3, r2
 8018a22:	00db      	lsls	r3, r3, #3
 8018a24:	4413      	add	r3, r2
 8018a26:	009b      	lsls	r3, r3, #2
 8018a28:	440b      	add	r3, r1
 8018a2a:	333e      	adds	r3, #62	; 0x3e
 8018a2c:	781b      	ldrb	r3, [r3, #0]
 8018a2e:	e00b      	b.n	8018a48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018a30:	78fb      	ldrb	r3, [r7, #3]
 8018a32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018a36:	68f9      	ldr	r1, [r7, #12]
 8018a38:	4613      	mov	r3, r2
 8018a3a:	00db      	lsls	r3, r3, #3
 8018a3c:	4413      	add	r3, r2
 8018a3e:	009b      	lsls	r3, r3, #2
 8018a40:	440b      	add	r3, r1
 8018a42:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8018a46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018a48:	4618      	mov	r0, r3
 8018a4a:	3714      	adds	r7, #20
 8018a4c:	46bd      	mov	sp, r7
 8018a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a52:	4770      	bx	lr

08018a54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018a54:	b580      	push	{r7, lr}
 8018a56:	b084      	sub	sp, #16
 8018a58:	af00      	add	r7, sp, #0
 8018a5a:	6078      	str	r0, [r7, #4]
 8018a5c:	460b      	mov	r3, r1
 8018a5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a60:	2300      	movs	r3, #0
 8018a62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a64:	2300      	movs	r3, #0
 8018a66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018a6e:	78fa      	ldrb	r2, [r7, #3]
 8018a70:	4611      	mov	r1, r2
 8018a72:	4618      	mov	r0, r3
 8018a74:	f7ec fa4c 	bl	8004f10 <HAL_PCD_SetAddress>
 8018a78:	4603      	mov	r3, r0
 8018a7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018a7c:	7bfb      	ldrb	r3, [r7, #15]
 8018a7e:	4618      	mov	r0, r3
 8018a80:	f000 f874 	bl	8018b6c <USBD_Get_USB_Status>
 8018a84:	4603      	mov	r3, r0
 8018a86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018a88:	7bbb      	ldrb	r3, [r7, #14]
}
 8018a8a:	4618      	mov	r0, r3
 8018a8c:	3710      	adds	r7, #16
 8018a8e:	46bd      	mov	sp, r7
 8018a90:	bd80      	pop	{r7, pc}

08018a92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018a92:	b580      	push	{r7, lr}
 8018a94:	b086      	sub	sp, #24
 8018a96:	af00      	add	r7, sp, #0
 8018a98:	60f8      	str	r0, [r7, #12]
 8018a9a:	607a      	str	r2, [r7, #4]
 8018a9c:	603b      	str	r3, [r7, #0]
 8018a9e:	460b      	mov	r3, r1
 8018aa0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018aaa:	68fb      	ldr	r3, [r7, #12]
 8018aac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018ab0:	7af9      	ldrb	r1, [r7, #11]
 8018ab2:	683b      	ldr	r3, [r7, #0]
 8018ab4:	687a      	ldr	r2, [r7, #4]
 8018ab6:	f7ec fb65 	bl	8005184 <HAL_PCD_EP_Transmit>
 8018aba:	4603      	mov	r3, r0
 8018abc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018abe:	7dfb      	ldrb	r3, [r7, #23]
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	f000 f853 	bl	8018b6c <USBD_Get_USB_Status>
 8018ac6:	4603      	mov	r3, r0
 8018ac8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018aca:	7dbb      	ldrb	r3, [r7, #22]
}
 8018acc:	4618      	mov	r0, r3
 8018ace:	3718      	adds	r7, #24
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	bd80      	pop	{r7, pc}

08018ad4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018ad4:	b580      	push	{r7, lr}
 8018ad6:	b086      	sub	sp, #24
 8018ad8:	af00      	add	r7, sp, #0
 8018ada:	60f8      	str	r0, [r7, #12]
 8018adc:	607a      	str	r2, [r7, #4]
 8018ade:	603b      	str	r3, [r7, #0]
 8018ae0:	460b      	mov	r3, r1
 8018ae2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ae4:	2300      	movs	r3, #0
 8018ae6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ae8:	2300      	movs	r3, #0
 8018aea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018af2:	7af9      	ldrb	r1, [r7, #11]
 8018af4:	683b      	ldr	r3, [r7, #0]
 8018af6:	687a      	ldr	r2, [r7, #4]
 8018af8:	f7ec fae1 	bl	80050be <HAL_PCD_EP_Receive>
 8018afc:	4603      	mov	r3, r0
 8018afe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018b00:	7dfb      	ldrb	r3, [r7, #23]
 8018b02:	4618      	mov	r0, r3
 8018b04:	f000 f832 	bl	8018b6c <USBD_Get_USB_Status>
 8018b08:	4603      	mov	r3, r0
 8018b0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018b0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8018b0e:	4618      	mov	r0, r3
 8018b10:	3718      	adds	r7, #24
 8018b12:	46bd      	mov	sp, r7
 8018b14:	bd80      	pop	{r7, pc}

08018b16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018b16:	b580      	push	{r7, lr}
 8018b18:	b082      	sub	sp, #8
 8018b1a:	af00      	add	r7, sp, #0
 8018b1c:	6078      	str	r0, [r7, #4]
 8018b1e:	460b      	mov	r3, r1
 8018b20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018b28:	78fa      	ldrb	r2, [r7, #3]
 8018b2a:	4611      	mov	r1, r2
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	f7ec fb11 	bl	8005154 <HAL_PCD_EP_GetRxCount>
 8018b32:	4603      	mov	r3, r0
}
 8018b34:	4618      	mov	r0, r3
 8018b36:	3708      	adds	r7, #8
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	bd80      	pop	{r7, pc}

08018b3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018b3c:	b480      	push	{r7}
 8018b3e:	b083      	sub	sp, #12
 8018b40:	af00      	add	r7, sp, #0
 8018b42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018b44:	4b03      	ldr	r3, [pc, #12]	; (8018b54 <USBD_static_malloc+0x18>)
}
 8018b46:	4618      	mov	r0, r3
 8018b48:	370c      	adds	r7, #12
 8018b4a:	46bd      	mov	sp, r7
 8018b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b50:	4770      	bx	lr
 8018b52:	bf00      	nop
 8018b54:	200024a0 	.word	0x200024a0

08018b58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018b58:	b480      	push	{r7}
 8018b5a:	b083      	sub	sp, #12
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	6078      	str	r0, [r7, #4]

}
 8018b60:	bf00      	nop
 8018b62:	370c      	adds	r7, #12
 8018b64:	46bd      	mov	sp, r7
 8018b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b6a:	4770      	bx	lr

08018b6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018b6c:	b480      	push	{r7}
 8018b6e:	b085      	sub	sp, #20
 8018b70:	af00      	add	r7, sp, #0
 8018b72:	4603      	mov	r3, r0
 8018b74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b76:	2300      	movs	r3, #0
 8018b78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018b7a:	79fb      	ldrb	r3, [r7, #7]
 8018b7c:	2b03      	cmp	r3, #3
 8018b7e:	d817      	bhi.n	8018bb0 <USBD_Get_USB_Status+0x44>
 8018b80:	a201      	add	r2, pc, #4	; (adr r2, 8018b88 <USBD_Get_USB_Status+0x1c>)
 8018b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b86:	bf00      	nop
 8018b88:	08018b99 	.word	0x08018b99
 8018b8c:	08018b9f 	.word	0x08018b9f
 8018b90:	08018ba5 	.word	0x08018ba5
 8018b94:	08018bab 	.word	0x08018bab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018b98:	2300      	movs	r3, #0
 8018b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8018b9c:	e00b      	b.n	8018bb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018b9e:	2303      	movs	r3, #3
 8018ba0:	73fb      	strb	r3, [r7, #15]
    break;
 8018ba2:	e008      	b.n	8018bb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018ba4:	2301      	movs	r3, #1
 8018ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8018ba8:	e005      	b.n	8018bb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018baa:	2303      	movs	r3, #3
 8018bac:	73fb      	strb	r3, [r7, #15]
    break;
 8018bae:	e002      	b.n	8018bb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018bb0:	2303      	movs	r3, #3
 8018bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8018bb4:	bf00      	nop
  }
  return usb_status;
 8018bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8018bb8:	4618      	mov	r0, r3
 8018bba:	3714      	adds	r7, #20
 8018bbc:	46bd      	mov	sp, r7
 8018bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bc2:	4770      	bx	lr

08018bc4 <_ZdlPvj>:
 8018bc4:	f000 b81b 	b.w	8018bfe <_ZdlPv>

08018bc8 <_ZdaPv>:
 8018bc8:	f000 b819 	b.w	8018bfe <_ZdlPv>

08018bcc <_Znwj>:
 8018bcc:	2801      	cmp	r0, #1
 8018bce:	bf38      	it	cc
 8018bd0:	2001      	movcc	r0, #1
 8018bd2:	b510      	push	{r4, lr}
 8018bd4:	4604      	mov	r4, r0
 8018bd6:	4620      	mov	r0, r4
 8018bd8:	f001 fb9a 	bl	801a310 <malloc>
 8018bdc:	b930      	cbnz	r0, 8018bec <_Znwj+0x20>
 8018bde:	f000 f811 	bl	8018c04 <_ZSt15get_new_handlerv>
 8018be2:	b908      	cbnz	r0, 8018be8 <_Znwj+0x1c>
 8018be4:	f001 fb26 	bl	801a234 <abort>
 8018be8:	4780      	blx	r0
 8018bea:	e7f4      	b.n	8018bd6 <_Znwj+0xa>
 8018bec:	bd10      	pop	{r4, pc}

08018bee <_Znaj>:
 8018bee:	f7ff bfed 	b.w	8018bcc <_Znwj>

08018bf2 <_ZSt17__throw_bad_allocv>:
 8018bf2:	b508      	push	{r3, lr}
 8018bf4:	f001 fb1e 	bl	801a234 <abort>

08018bf8 <_ZSt20__throw_length_errorPKc>:
 8018bf8:	b508      	push	{r3, lr}
 8018bfa:	f001 fb1b 	bl	801a234 <abort>

08018bfe <_ZdlPv>:
 8018bfe:	f001 bb8f 	b.w	801a320 <free>
	...

08018c04 <_ZSt15get_new_handlerv>:
 8018c04:	4b02      	ldr	r3, [pc, #8]	; (8018c10 <_ZSt15get_new_handlerv+0xc>)
 8018c06:	6818      	ldr	r0, [r3, #0]
 8018c08:	f3bf 8f5b 	dmb	ish
 8018c0c:	4770      	bx	lr
 8018c0e:	bf00      	nop
 8018c10:	200026c0 	.word	0x200026c0
 8018c14:	00000000 	.word	0x00000000

08018c18 <floor>:
 8018c18:	ec51 0b10 	vmov	r0, r1, d0
 8018c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c20:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8018c24:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018c28:	2e13      	cmp	r6, #19
 8018c2a:	ee10 5a10 	vmov	r5, s0
 8018c2e:	ee10 8a10 	vmov	r8, s0
 8018c32:	460c      	mov	r4, r1
 8018c34:	dc32      	bgt.n	8018c9c <floor+0x84>
 8018c36:	2e00      	cmp	r6, #0
 8018c38:	da14      	bge.n	8018c64 <floor+0x4c>
 8018c3a:	a333      	add	r3, pc, #204	; (adr r3, 8018d08 <floor+0xf0>)
 8018c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c40:	f7e7 fb2e 	bl	80002a0 <__adddf3>
 8018c44:	2200      	movs	r2, #0
 8018c46:	2300      	movs	r3, #0
 8018c48:	f7e7 ff70 	bl	8000b2c <__aeabi_dcmpgt>
 8018c4c:	b138      	cbz	r0, 8018c5e <floor+0x46>
 8018c4e:	2c00      	cmp	r4, #0
 8018c50:	da57      	bge.n	8018d02 <floor+0xea>
 8018c52:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8018c56:	431d      	orrs	r5, r3
 8018c58:	d001      	beq.n	8018c5e <floor+0x46>
 8018c5a:	4c2d      	ldr	r4, [pc, #180]	; (8018d10 <floor+0xf8>)
 8018c5c:	2500      	movs	r5, #0
 8018c5e:	4621      	mov	r1, r4
 8018c60:	4628      	mov	r0, r5
 8018c62:	e025      	b.n	8018cb0 <floor+0x98>
 8018c64:	4f2b      	ldr	r7, [pc, #172]	; (8018d14 <floor+0xfc>)
 8018c66:	4137      	asrs	r7, r6
 8018c68:	ea01 0307 	and.w	r3, r1, r7
 8018c6c:	4303      	orrs	r3, r0
 8018c6e:	d01f      	beq.n	8018cb0 <floor+0x98>
 8018c70:	a325      	add	r3, pc, #148	; (adr r3, 8018d08 <floor+0xf0>)
 8018c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c76:	f7e7 fb13 	bl	80002a0 <__adddf3>
 8018c7a:	2200      	movs	r2, #0
 8018c7c:	2300      	movs	r3, #0
 8018c7e:	f7e7 ff55 	bl	8000b2c <__aeabi_dcmpgt>
 8018c82:	2800      	cmp	r0, #0
 8018c84:	d0eb      	beq.n	8018c5e <floor+0x46>
 8018c86:	2c00      	cmp	r4, #0
 8018c88:	bfbe      	ittt	lt
 8018c8a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8018c8e:	fa43 f606 	asrlt.w	r6, r3, r6
 8018c92:	19a4      	addlt	r4, r4, r6
 8018c94:	ea24 0407 	bic.w	r4, r4, r7
 8018c98:	2500      	movs	r5, #0
 8018c9a:	e7e0      	b.n	8018c5e <floor+0x46>
 8018c9c:	2e33      	cmp	r6, #51	; 0x33
 8018c9e:	dd0b      	ble.n	8018cb8 <floor+0xa0>
 8018ca0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018ca4:	d104      	bne.n	8018cb0 <floor+0x98>
 8018ca6:	ee10 2a10 	vmov	r2, s0
 8018caa:	460b      	mov	r3, r1
 8018cac:	f7e7 faf8 	bl	80002a0 <__adddf3>
 8018cb0:	ec41 0b10 	vmov	d0, r0, r1
 8018cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cb8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8018cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8018cc0:	fa23 f707 	lsr.w	r7, r3, r7
 8018cc4:	4207      	tst	r7, r0
 8018cc6:	d0f3      	beq.n	8018cb0 <floor+0x98>
 8018cc8:	a30f      	add	r3, pc, #60	; (adr r3, 8018d08 <floor+0xf0>)
 8018cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cce:	f7e7 fae7 	bl	80002a0 <__adddf3>
 8018cd2:	2200      	movs	r2, #0
 8018cd4:	2300      	movs	r3, #0
 8018cd6:	f7e7 ff29 	bl	8000b2c <__aeabi_dcmpgt>
 8018cda:	2800      	cmp	r0, #0
 8018cdc:	d0bf      	beq.n	8018c5e <floor+0x46>
 8018cde:	2c00      	cmp	r4, #0
 8018ce0:	da02      	bge.n	8018ce8 <floor+0xd0>
 8018ce2:	2e14      	cmp	r6, #20
 8018ce4:	d103      	bne.n	8018cee <floor+0xd6>
 8018ce6:	3401      	adds	r4, #1
 8018ce8:	ea25 0507 	bic.w	r5, r5, r7
 8018cec:	e7b7      	b.n	8018c5e <floor+0x46>
 8018cee:	2301      	movs	r3, #1
 8018cf0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018cf4:	fa03 f606 	lsl.w	r6, r3, r6
 8018cf8:	4435      	add	r5, r6
 8018cfa:	4545      	cmp	r5, r8
 8018cfc:	bf38      	it	cc
 8018cfe:	18e4      	addcc	r4, r4, r3
 8018d00:	e7f2      	b.n	8018ce8 <floor+0xd0>
 8018d02:	2500      	movs	r5, #0
 8018d04:	462c      	mov	r4, r5
 8018d06:	e7aa      	b.n	8018c5e <floor+0x46>
 8018d08:	8800759c 	.word	0x8800759c
 8018d0c:	7e37e43c 	.word	0x7e37e43c
 8018d10:	bff00000 	.word	0xbff00000
 8018d14:	000fffff 	.word	0x000fffff

08018d18 <frexp>:
 8018d18:	b570      	push	{r4, r5, r6, lr}
 8018d1a:	2100      	movs	r1, #0
 8018d1c:	ec55 4b10 	vmov	r4, r5, d0
 8018d20:	6001      	str	r1, [r0, #0]
 8018d22:	4916      	ldr	r1, [pc, #88]	; (8018d7c <frexp+0x64>)
 8018d24:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8018d28:	428a      	cmp	r2, r1
 8018d2a:	4606      	mov	r6, r0
 8018d2c:	462b      	mov	r3, r5
 8018d2e:	dc22      	bgt.n	8018d76 <frexp+0x5e>
 8018d30:	ee10 1a10 	vmov	r1, s0
 8018d34:	4311      	orrs	r1, r2
 8018d36:	d01e      	beq.n	8018d76 <frexp+0x5e>
 8018d38:	4911      	ldr	r1, [pc, #68]	; (8018d80 <frexp+0x68>)
 8018d3a:	4029      	ands	r1, r5
 8018d3c:	b969      	cbnz	r1, 8018d5a <frexp+0x42>
 8018d3e:	4b11      	ldr	r3, [pc, #68]	; (8018d84 <frexp+0x6c>)
 8018d40:	2200      	movs	r2, #0
 8018d42:	ee10 0a10 	vmov	r0, s0
 8018d46:	4629      	mov	r1, r5
 8018d48:	f7e7 fc60 	bl	800060c <__aeabi_dmul>
 8018d4c:	460b      	mov	r3, r1
 8018d4e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8018d52:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8018d56:	4604      	mov	r4, r0
 8018d58:	6031      	str	r1, [r6, #0]
 8018d5a:	6831      	ldr	r1, [r6, #0]
 8018d5c:	1512      	asrs	r2, r2, #20
 8018d5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018d62:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8018d66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018d6a:	440a      	add	r2, r1
 8018d6c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8018d70:	6032      	str	r2, [r6, #0]
 8018d72:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8018d76:	ec45 4b10 	vmov	d0, r4, r5
 8018d7a:	bd70      	pop	{r4, r5, r6, pc}
 8018d7c:	7fefffff 	.word	0x7fefffff
 8018d80:	7ff00000 	.word	0x7ff00000
 8018d84:	43500000 	.word	0x43500000

08018d88 <round>:
 8018d88:	ec51 0b10 	vmov	r0, r1, d0
 8018d8c:	b570      	push	{r4, r5, r6, lr}
 8018d8e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8018d92:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8018d96:	2c13      	cmp	r4, #19
 8018d98:	ee10 2a10 	vmov	r2, s0
 8018d9c:	460b      	mov	r3, r1
 8018d9e:	dc19      	bgt.n	8018dd4 <round+0x4c>
 8018da0:	2c00      	cmp	r4, #0
 8018da2:	da09      	bge.n	8018db8 <round+0x30>
 8018da4:	3401      	adds	r4, #1
 8018da6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8018daa:	d103      	bne.n	8018db4 <round+0x2c>
 8018dac:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8018db0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018db4:	2200      	movs	r2, #0
 8018db6:	e028      	b.n	8018e0a <round+0x82>
 8018db8:	4d15      	ldr	r5, [pc, #84]	; (8018e10 <round+0x88>)
 8018dba:	4125      	asrs	r5, r4
 8018dbc:	ea01 0605 	and.w	r6, r1, r5
 8018dc0:	4332      	orrs	r2, r6
 8018dc2:	d00e      	beq.n	8018de2 <round+0x5a>
 8018dc4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018dc8:	fa42 f404 	asr.w	r4, r2, r4
 8018dcc:	4423      	add	r3, r4
 8018dce:	ea23 0305 	bic.w	r3, r3, r5
 8018dd2:	e7ef      	b.n	8018db4 <round+0x2c>
 8018dd4:	2c33      	cmp	r4, #51	; 0x33
 8018dd6:	dd07      	ble.n	8018de8 <round+0x60>
 8018dd8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8018ddc:	d101      	bne.n	8018de2 <round+0x5a>
 8018dde:	f7e7 fa5f 	bl	80002a0 <__adddf3>
 8018de2:	ec41 0b10 	vmov	d0, r0, r1
 8018de6:	bd70      	pop	{r4, r5, r6, pc}
 8018de8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8018dec:	f04f 35ff 	mov.w	r5, #4294967295
 8018df0:	40f5      	lsrs	r5, r6
 8018df2:	4228      	tst	r0, r5
 8018df4:	d0f5      	beq.n	8018de2 <round+0x5a>
 8018df6:	2101      	movs	r1, #1
 8018df8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8018dfc:	fa01 f404 	lsl.w	r4, r1, r4
 8018e00:	1912      	adds	r2, r2, r4
 8018e02:	bf28      	it	cs
 8018e04:	185b      	addcs	r3, r3, r1
 8018e06:	ea22 0205 	bic.w	r2, r2, r5
 8018e0a:	4619      	mov	r1, r3
 8018e0c:	4610      	mov	r0, r2
 8018e0e:	e7e8      	b.n	8018de2 <round+0x5a>
 8018e10:	000fffff 	.word	0x000fffff

08018e14 <roundf>:
 8018e14:	ee10 0a10 	vmov	r0, s0
 8018e18:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8018e1c:	3a7f      	subs	r2, #127	; 0x7f
 8018e1e:	2a16      	cmp	r2, #22
 8018e20:	dc15      	bgt.n	8018e4e <roundf+0x3a>
 8018e22:	2a00      	cmp	r2, #0
 8018e24:	da08      	bge.n	8018e38 <roundf+0x24>
 8018e26:	3201      	adds	r2, #1
 8018e28:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8018e2c:	d101      	bne.n	8018e32 <roundf+0x1e>
 8018e2e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8018e32:	ee00 3a10 	vmov	s0, r3
 8018e36:	4770      	bx	lr
 8018e38:	4907      	ldr	r1, [pc, #28]	; (8018e58 <roundf+0x44>)
 8018e3a:	4111      	asrs	r1, r2
 8018e3c:	4208      	tst	r0, r1
 8018e3e:	d0fa      	beq.n	8018e36 <roundf+0x22>
 8018e40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8018e44:	4113      	asrs	r3, r2
 8018e46:	4403      	add	r3, r0
 8018e48:	ea23 0301 	bic.w	r3, r3, r1
 8018e4c:	e7f1      	b.n	8018e32 <roundf+0x1e>
 8018e4e:	2a80      	cmp	r2, #128	; 0x80
 8018e50:	d1f1      	bne.n	8018e36 <roundf+0x22>
 8018e52:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018e56:	4770      	bx	lr
 8018e58:	007fffff 	.word	0x007fffff

08018e5c <pow>:
 8018e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e5e:	ed2d 8b02 	vpush	{d8}
 8018e62:	eeb0 8a40 	vmov.f32	s16, s0
 8018e66:	eef0 8a60 	vmov.f32	s17, s1
 8018e6a:	ec55 4b11 	vmov	r4, r5, d1
 8018e6e:	f000 f8e7 	bl	8019040 <__ieee754_pow>
 8018e72:	4622      	mov	r2, r4
 8018e74:	462b      	mov	r3, r5
 8018e76:	4620      	mov	r0, r4
 8018e78:	4629      	mov	r1, r5
 8018e7a:	ec57 6b10 	vmov	r6, r7, d0
 8018e7e:	f7e7 fe5f 	bl	8000b40 <__aeabi_dcmpun>
 8018e82:	2800      	cmp	r0, #0
 8018e84:	d13b      	bne.n	8018efe <pow+0xa2>
 8018e86:	ec51 0b18 	vmov	r0, r1, d8
 8018e8a:	2200      	movs	r2, #0
 8018e8c:	2300      	movs	r3, #0
 8018e8e:	f7e7 fe25 	bl	8000adc <__aeabi_dcmpeq>
 8018e92:	b1b8      	cbz	r0, 8018ec4 <pow+0x68>
 8018e94:	2200      	movs	r2, #0
 8018e96:	2300      	movs	r3, #0
 8018e98:	4620      	mov	r0, r4
 8018e9a:	4629      	mov	r1, r5
 8018e9c:	f7e7 fe1e 	bl	8000adc <__aeabi_dcmpeq>
 8018ea0:	2800      	cmp	r0, #0
 8018ea2:	d146      	bne.n	8018f32 <pow+0xd6>
 8018ea4:	ec45 4b10 	vmov	d0, r4, r5
 8018ea8:	f001 f91f 	bl	801a0ea <finite>
 8018eac:	b338      	cbz	r0, 8018efe <pow+0xa2>
 8018eae:	2200      	movs	r2, #0
 8018eb0:	2300      	movs	r3, #0
 8018eb2:	4620      	mov	r0, r4
 8018eb4:	4629      	mov	r1, r5
 8018eb6:	f7e7 fe1b 	bl	8000af0 <__aeabi_dcmplt>
 8018eba:	b300      	cbz	r0, 8018efe <pow+0xa2>
 8018ebc:	f001 f9e8 	bl	801a290 <__errno>
 8018ec0:	2322      	movs	r3, #34	; 0x22
 8018ec2:	e01b      	b.n	8018efc <pow+0xa0>
 8018ec4:	ec47 6b10 	vmov	d0, r6, r7
 8018ec8:	f001 f90f 	bl	801a0ea <finite>
 8018ecc:	b9e0      	cbnz	r0, 8018f08 <pow+0xac>
 8018ece:	eeb0 0a48 	vmov.f32	s0, s16
 8018ed2:	eef0 0a68 	vmov.f32	s1, s17
 8018ed6:	f001 f908 	bl	801a0ea <finite>
 8018eda:	b1a8      	cbz	r0, 8018f08 <pow+0xac>
 8018edc:	ec45 4b10 	vmov	d0, r4, r5
 8018ee0:	f001 f903 	bl	801a0ea <finite>
 8018ee4:	b180      	cbz	r0, 8018f08 <pow+0xac>
 8018ee6:	4632      	mov	r2, r6
 8018ee8:	463b      	mov	r3, r7
 8018eea:	4630      	mov	r0, r6
 8018eec:	4639      	mov	r1, r7
 8018eee:	f7e7 fe27 	bl	8000b40 <__aeabi_dcmpun>
 8018ef2:	2800      	cmp	r0, #0
 8018ef4:	d0e2      	beq.n	8018ebc <pow+0x60>
 8018ef6:	f001 f9cb 	bl	801a290 <__errno>
 8018efa:	2321      	movs	r3, #33	; 0x21
 8018efc:	6003      	str	r3, [r0, #0]
 8018efe:	ecbd 8b02 	vpop	{d8}
 8018f02:	ec47 6b10 	vmov	d0, r6, r7
 8018f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f08:	2200      	movs	r2, #0
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	4630      	mov	r0, r6
 8018f0e:	4639      	mov	r1, r7
 8018f10:	f7e7 fde4 	bl	8000adc <__aeabi_dcmpeq>
 8018f14:	2800      	cmp	r0, #0
 8018f16:	d0f2      	beq.n	8018efe <pow+0xa2>
 8018f18:	eeb0 0a48 	vmov.f32	s0, s16
 8018f1c:	eef0 0a68 	vmov.f32	s1, s17
 8018f20:	f001 f8e3 	bl	801a0ea <finite>
 8018f24:	2800      	cmp	r0, #0
 8018f26:	d0ea      	beq.n	8018efe <pow+0xa2>
 8018f28:	ec45 4b10 	vmov	d0, r4, r5
 8018f2c:	f001 f8dd 	bl	801a0ea <finite>
 8018f30:	e7c3      	b.n	8018eba <pow+0x5e>
 8018f32:	4f01      	ldr	r7, [pc, #4]	; (8018f38 <pow+0xdc>)
 8018f34:	2600      	movs	r6, #0
 8018f36:	e7e2      	b.n	8018efe <pow+0xa2>
 8018f38:	3ff00000 	.word	0x3ff00000

08018f3c <expf>:
 8018f3c:	b508      	push	{r3, lr}
 8018f3e:	ed2d 8b02 	vpush	{d8}
 8018f42:	eef0 8a40 	vmov.f32	s17, s0
 8018f46:	f000 fe5b 	bl	8019c00 <__ieee754_expf>
 8018f4a:	eeb0 8a40 	vmov.f32	s16, s0
 8018f4e:	eeb0 0a68 	vmov.f32	s0, s17
 8018f52:	f001 f95b 	bl	801a20c <finitef>
 8018f56:	b160      	cbz	r0, 8018f72 <expf+0x36>
 8018f58:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8018f98 <expf+0x5c>
 8018f5c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f64:	dd0a      	ble.n	8018f7c <expf+0x40>
 8018f66:	f001 f993 	bl	801a290 <__errno>
 8018f6a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8018f9c <expf+0x60>
 8018f6e:	2322      	movs	r3, #34	; 0x22
 8018f70:	6003      	str	r3, [r0, #0]
 8018f72:	eeb0 0a48 	vmov.f32	s0, s16
 8018f76:	ecbd 8b02 	vpop	{d8}
 8018f7a:	bd08      	pop	{r3, pc}
 8018f7c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8018fa0 <expf+0x64>
 8018f80:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f88:	d5f3      	bpl.n	8018f72 <expf+0x36>
 8018f8a:	f001 f981 	bl	801a290 <__errno>
 8018f8e:	2322      	movs	r3, #34	; 0x22
 8018f90:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8018fa4 <expf+0x68>
 8018f94:	6003      	str	r3, [r0, #0]
 8018f96:	e7ec      	b.n	8018f72 <expf+0x36>
 8018f98:	42b17180 	.word	0x42b17180
 8018f9c:	7f800000 	.word	0x7f800000
 8018fa0:	c2cff1b5 	.word	0xc2cff1b5
 8018fa4:	00000000 	.word	0x00000000

08018fa8 <log10f>:
 8018fa8:	b508      	push	{r3, lr}
 8018faa:	ed2d 8b02 	vpush	{d8}
 8018fae:	eeb0 8a40 	vmov.f32	s16, s0
 8018fb2:	f000 ffe3 	bl	8019f7c <__ieee754_log10f>
 8018fb6:	eeb4 8a48 	vcmp.f32	s16, s16
 8018fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fbe:	d60f      	bvs.n	8018fe0 <log10f+0x38>
 8018fc0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fc8:	d80a      	bhi.n	8018fe0 <log10f+0x38>
 8018fca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fd2:	d108      	bne.n	8018fe6 <log10f+0x3e>
 8018fd4:	f001 f95c 	bl	801a290 <__errno>
 8018fd8:	2322      	movs	r3, #34	; 0x22
 8018fda:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8018ffc <log10f+0x54>
 8018fde:	6003      	str	r3, [r0, #0]
 8018fe0:	ecbd 8b02 	vpop	{d8}
 8018fe4:	bd08      	pop	{r3, pc}
 8018fe6:	f001 f953 	bl	801a290 <__errno>
 8018fea:	ecbd 8b02 	vpop	{d8}
 8018fee:	2321      	movs	r3, #33	; 0x21
 8018ff0:	6003      	str	r3, [r0, #0]
 8018ff2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018ff6:	4802      	ldr	r0, [pc, #8]	; (8019000 <log10f+0x58>)
 8018ff8:	f001 b916 	b.w	801a228 <nanf>
 8018ffc:	ff800000 	.word	0xff800000
 8019000:	080200a3 	.word	0x080200a3

08019004 <sqrtf>:
 8019004:	b508      	push	{r3, lr}
 8019006:	ed2d 8b02 	vpush	{d8}
 801900a:	eeb0 8a40 	vmov.f32	s16, s0
 801900e:	f001 f80d 	bl	801a02c <__ieee754_sqrtf>
 8019012:	eeb4 8a48 	vcmp.f32	s16, s16
 8019016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801901a:	d60c      	bvs.n	8019036 <sqrtf+0x32>
 801901c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801903c <sqrtf+0x38>
 8019020:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8019024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019028:	d505      	bpl.n	8019036 <sqrtf+0x32>
 801902a:	f001 f931 	bl	801a290 <__errno>
 801902e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8019032:	2321      	movs	r3, #33	; 0x21
 8019034:	6003      	str	r3, [r0, #0]
 8019036:	ecbd 8b02 	vpop	{d8}
 801903a:	bd08      	pop	{r3, pc}
 801903c:	00000000 	.word	0x00000000

08019040 <__ieee754_pow>:
 8019040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019044:	ed2d 8b06 	vpush	{d8-d10}
 8019048:	b089      	sub	sp, #36	; 0x24
 801904a:	ed8d 1b00 	vstr	d1, [sp]
 801904e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8019052:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8019056:	ea58 0102 	orrs.w	r1, r8, r2
 801905a:	ec57 6b10 	vmov	r6, r7, d0
 801905e:	d115      	bne.n	801908c <__ieee754_pow+0x4c>
 8019060:	19b3      	adds	r3, r6, r6
 8019062:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8019066:	4152      	adcs	r2, r2
 8019068:	4299      	cmp	r1, r3
 801906a:	4b89      	ldr	r3, [pc, #548]	; (8019290 <__ieee754_pow+0x250>)
 801906c:	4193      	sbcs	r3, r2
 801906e:	f080 84d2 	bcs.w	8019a16 <__ieee754_pow+0x9d6>
 8019072:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019076:	4630      	mov	r0, r6
 8019078:	4639      	mov	r1, r7
 801907a:	f7e7 f911 	bl	80002a0 <__adddf3>
 801907e:	ec41 0b10 	vmov	d0, r0, r1
 8019082:	b009      	add	sp, #36	; 0x24
 8019084:	ecbd 8b06 	vpop	{d8-d10}
 8019088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801908c:	4b81      	ldr	r3, [pc, #516]	; (8019294 <__ieee754_pow+0x254>)
 801908e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8019092:	429c      	cmp	r4, r3
 8019094:	ee10 aa10 	vmov	sl, s0
 8019098:	463d      	mov	r5, r7
 801909a:	dc06      	bgt.n	80190aa <__ieee754_pow+0x6a>
 801909c:	d101      	bne.n	80190a2 <__ieee754_pow+0x62>
 801909e:	2e00      	cmp	r6, #0
 80190a0:	d1e7      	bne.n	8019072 <__ieee754_pow+0x32>
 80190a2:	4598      	cmp	r8, r3
 80190a4:	dc01      	bgt.n	80190aa <__ieee754_pow+0x6a>
 80190a6:	d10f      	bne.n	80190c8 <__ieee754_pow+0x88>
 80190a8:	b172      	cbz	r2, 80190c8 <__ieee754_pow+0x88>
 80190aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80190ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80190b2:	ea55 050a 	orrs.w	r5, r5, sl
 80190b6:	d1dc      	bne.n	8019072 <__ieee754_pow+0x32>
 80190b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80190bc:	18db      	adds	r3, r3, r3
 80190be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80190c2:	4152      	adcs	r2, r2
 80190c4:	429d      	cmp	r5, r3
 80190c6:	e7d0      	b.n	801906a <__ieee754_pow+0x2a>
 80190c8:	2d00      	cmp	r5, #0
 80190ca:	da3b      	bge.n	8019144 <__ieee754_pow+0x104>
 80190cc:	4b72      	ldr	r3, [pc, #456]	; (8019298 <__ieee754_pow+0x258>)
 80190ce:	4598      	cmp	r8, r3
 80190d0:	dc51      	bgt.n	8019176 <__ieee754_pow+0x136>
 80190d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80190d6:	4598      	cmp	r8, r3
 80190d8:	f340 84ac 	ble.w	8019a34 <__ieee754_pow+0x9f4>
 80190dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80190e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80190e4:	2b14      	cmp	r3, #20
 80190e6:	dd0f      	ble.n	8019108 <__ieee754_pow+0xc8>
 80190e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80190ec:	fa22 f103 	lsr.w	r1, r2, r3
 80190f0:	fa01 f303 	lsl.w	r3, r1, r3
 80190f4:	4293      	cmp	r3, r2
 80190f6:	f040 849d 	bne.w	8019a34 <__ieee754_pow+0x9f4>
 80190fa:	f001 0101 	and.w	r1, r1, #1
 80190fe:	f1c1 0302 	rsb	r3, r1, #2
 8019102:	9304      	str	r3, [sp, #16]
 8019104:	b182      	cbz	r2, 8019128 <__ieee754_pow+0xe8>
 8019106:	e05f      	b.n	80191c8 <__ieee754_pow+0x188>
 8019108:	2a00      	cmp	r2, #0
 801910a:	d15b      	bne.n	80191c4 <__ieee754_pow+0x184>
 801910c:	f1c3 0314 	rsb	r3, r3, #20
 8019110:	fa48 f103 	asr.w	r1, r8, r3
 8019114:	fa01 f303 	lsl.w	r3, r1, r3
 8019118:	4543      	cmp	r3, r8
 801911a:	f040 8488 	bne.w	8019a2e <__ieee754_pow+0x9ee>
 801911e:	f001 0101 	and.w	r1, r1, #1
 8019122:	f1c1 0302 	rsb	r3, r1, #2
 8019126:	9304      	str	r3, [sp, #16]
 8019128:	4b5c      	ldr	r3, [pc, #368]	; (801929c <__ieee754_pow+0x25c>)
 801912a:	4598      	cmp	r8, r3
 801912c:	d132      	bne.n	8019194 <__ieee754_pow+0x154>
 801912e:	f1b9 0f00 	cmp.w	r9, #0
 8019132:	f280 8478 	bge.w	8019a26 <__ieee754_pow+0x9e6>
 8019136:	4959      	ldr	r1, [pc, #356]	; (801929c <__ieee754_pow+0x25c>)
 8019138:	4632      	mov	r2, r6
 801913a:	463b      	mov	r3, r7
 801913c:	2000      	movs	r0, #0
 801913e:	f7e7 fb8f 	bl	8000860 <__aeabi_ddiv>
 8019142:	e79c      	b.n	801907e <__ieee754_pow+0x3e>
 8019144:	2300      	movs	r3, #0
 8019146:	9304      	str	r3, [sp, #16]
 8019148:	2a00      	cmp	r2, #0
 801914a:	d13d      	bne.n	80191c8 <__ieee754_pow+0x188>
 801914c:	4b51      	ldr	r3, [pc, #324]	; (8019294 <__ieee754_pow+0x254>)
 801914e:	4598      	cmp	r8, r3
 8019150:	d1ea      	bne.n	8019128 <__ieee754_pow+0xe8>
 8019152:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8019156:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801915a:	ea53 030a 	orrs.w	r3, r3, sl
 801915e:	f000 845a 	beq.w	8019a16 <__ieee754_pow+0x9d6>
 8019162:	4b4f      	ldr	r3, [pc, #316]	; (80192a0 <__ieee754_pow+0x260>)
 8019164:	429c      	cmp	r4, r3
 8019166:	dd08      	ble.n	801917a <__ieee754_pow+0x13a>
 8019168:	f1b9 0f00 	cmp.w	r9, #0
 801916c:	f2c0 8457 	blt.w	8019a1e <__ieee754_pow+0x9de>
 8019170:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019174:	e783      	b.n	801907e <__ieee754_pow+0x3e>
 8019176:	2302      	movs	r3, #2
 8019178:	e7e5      	b.n	8019146 <__ieee754_pow+0x106>
 801917a:	f1b9 0f00 	cmp.w	r9, #0
 801917e:	f04f 0000 	mov.w	r0, #0
 8019182:	f04f 0100 	mov.w	r1, #0
 8019186:	f6bf af7a 	bge.w	801907e <__ieee754_pow+0x3e>
 801918a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801918e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019192:	e774      	b.n	801907e <__ieee754_pow+0x3e>
 8019194:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8019198:	d106      	bne.n	80191a8 <__ieee754_pow+0x168>
 801919a:	4632      	mov	r2, r6
 801919c:	463b      	mov	r3, r7
 801919e:	4630      	mov	r0, r6
 80191a0:	4639      	mov	r1, r7
 80191a2:	f7e7 fa33 	bl	800060c <__aeabi_dmul>
 80191a6:	e76a      	b.n	801907e <__ieee754_pow+0x3e>
 80191a8:	4b3e      	ldr	r3, [pc, #248]	; (80192a4 <__ieee754_pow+0x264>)
 80191aa:	4599      	cmp	r9, r3
 80191ac:	d10c      	bne.n	80191c8 <__ieee754_pow+0x188>
 80191ae:	2d00      	cmp	r5, #0
 80191b0:	db0a      	blt.n	80191c8 <__ieee754_pow+0x188>
 80191b2:	ec47 6b10 	vmov	d0, r6, r7
 80191b6:	b009      	add	sp, #36	; 0x24
 80191b8:	ecbd 8b06 	vpop	{d8-d10}
 80191bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191c0:	f000 bc6c 	b.w	8019a9c <__ieee754_sqrt>
 80191c4:	2300      	movs	r3, #0
 80191c6:	9304      	str	r3, [sp, #16]
 80191c8:	ec47 6b10 	vmov	d0, r6, r7
 80191cc:	f000 ff84 	bl	801a0d8 <fabs>
 80191d0:	ec51 0b10 	vmov	r0, r1, d0
 80191d4:	f1ba 0f00 	cmp.w	sl, #0
 80191d8:	d129      	bne.n	801922e <__ieee754_pow+0x1ee>
 80191da:	b124      	cbz	r4, 80191e6 <__ieee754_pow+0x1a6>
 80191dc:	4b2f      	ldr	r3, [pc, #188]	; (801929c <__ieee754_pow+0x25c>)
 80191de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80191e2:	429a      	cmp	r2, r3
 80191e4:	d123      	bne.n	801922e <__ieee754_pow+0x1ee>
 80191e6:	f1b9 0f00 	cmp.w	r9, #0
 80191ea:	da05      	bge.n	80191f8 <__ieee754_pow+0x1b8>
 80191ec:	4602      	mov	r2, r0
 80191ee:	460b      	mov	r3, r1
 80191f0:	2000      	movs	r0, #0
 80191f2:	492a      	ldr	r1, [pc, #168]	; (801929c <__ieee754_pow+0x25c>)
 80191f4:	f7e7 fb34 	bl	8000860 <__aeabi_ddiv>
 80191f8:	2d00      	cmp	r5, #0
 80191fa:	f6bf af40 	bge.w	801907e <__ieee754_pow+0x3e>
 80191fe:	9b04      	ldr	r3, [sp, #16]
 8019200:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019204:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019208:	4323      	orrs	r3, r4
 801920a:	d108      	bne.n	801921e <__ieee754_pow+0x1de>
 801920c:	4602      	mov	r2, r0
 801920e:	460b      	mov	r3, r1
 8019210:	4610      	mov	r0, r2
 8019212:	4619      	mov	r1, r3
 8019214:	f7e7 f842 	bl	800029c <__aeabi_dsub>
 8019218:	4602      	mov	r2, r0
 801921a:	460b      	mov	r3, r1
 801921c:	e78f      	b.n	801913e <__ieee754_pow+0xfe>
 801921e:	9b04      	ldr	r3, [sp, #16]
 8019220:	2b01      	cmp	r3, #1
 8019222:	f47f af2c 	bne.w	801907e <__ieee754_pow+0x3e>
 8019226:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801922a:	4619      	mov	r1, r3
 801922c:	e727      	b.n	801907e <__ieee754_pow+0x3e>
 801922e:	0feb      	lsrs	r3, r5, #31
 8019230:	3b01      	subs	r3, #1
 8019232:	9306      	str	r3, [sp, #24]
 8019234:	9a06      	ldr	r2, [sp, #24]
 8019236:	9b04      	ldr	r3, [sp, #16]
 8019238:	4313      	orrs	r3, r2
 801923a:	d102      	bne.n	8019242 <__ieee754_pow+0x202>
 801923c:	4632      	mov	r2, r6
 801923e:	463b      	mov	r3, r7
 8019240:	e7e6      	b.n	8019210 <__ieee754_pow+0x1d0>
 8019242:	4b19      	ldr	r3, [pc, #100]	; (80192a8 <__ieee754_pow+0x268>)
 8019244:	4598      	cmp	r8, r3
 8019246:	f340 80fb 	ble.w	8019440 <__ieee754_pow+0x400>
 801924a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801924e:	4598      	cmp	r8, r3
 8019250:	4b13      	ldr	r3, [pc, #76]	; (80192a0 <__ieee754_pow+0x260>)
 8019252:	dd0c      	ble.n	801926e <__ieee754_pow+0x22e>
 8019254:	429c      	cmp	r4, r3
 8019256:	dc0f      	bgt.n	8019278 <__ieee754_pow+0x238>
 8019258:	f1b9 0f00 	cmp.w	r9, #0
 801925c:	da0f      	bge.n	801927e <__ieee754_pow+0x23e>
 801925e:	2000      	movs	r0, #0
 8019260:	b009      	add	sp, #36	; 0x24
 8019262:	ecbd 8b06 	vpop	{d8-d10}
 8019266:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801926a:	f000 bf09 	b.w	801a080 <__math_oflow>
 801926e:	429c      	cmp	r4, r3
 8019270:	dbf2      	blt.n	8019258 <__ieee754_pow+0x218>
 8019272:	4b0a      	ldr	r3, [pc, #40]	; (801929c <__ieee754_pow+0x25c>)
 8019274:	429c      	cmp	r4, r3
 8019276:	dd19      	ble.n	80192ac <__ieee754_pow+0x26c>
 8019278:	f1b9 0f00 	cmp.w	r9, #0
 801927c:	dcef      	bgt.n	801925e <__ieee754_pow+0x21e>
 801927e:	2000      	movs	r0, #0
 8019280:	b009      	add	sp, #36	; 0x24
 8019282:	ecbd 8b06 	vpop	{d8-d10}
 8019286:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801928a:	f000 bef0 	b.w	801a06e <__math_uflow>
 801928e:	bf00      	nop
 8019290:	fff00000 	.word	0xfff00000
 8019294:	7ff00000 	.word	0x7ff00000
 8019298:	433fffff 	.word	0x433fffff
 801929c:	3ff00000 	.word	0x3ff00000
 80192a0:	3fefffff 	.word	0x3fefffff
 80192a4:	3fe00000 	.word	0x3fe00000
 80192a8:	41e00000 	.word	0x41e00000
 80192ac:	4b60      	ldr	r3, [pc, #384]	; (8019430 <__ieee754_pow+0x3f0>)
 80192ae:	2200      	movs	r2, #0
 80192b0:	f7e6 fff4 	bl	800029c <__aeabi_dsub>
 80192b4:	a354      	add	r3, pc, #336	; (adr r3, 8019408 <__ieee754_pow+0x3c8>)
 80192b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192ba:	4604      	mov	r4, r0
 80192bc:	460d      	mov	r5, r1
 80192be:	f7e7 f9a5 	bl	800060c <__aeabi_dmul>
 80192c2:	a353      	add	r3, pc, #332	; (adr r3, 8019410 <__ieee754_pow+0x3d0>)
 80192c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192c8:	4606      	mov	r6, r0
 80192ca:	460f      	mov	r7, r1
 80192cc:	4620      	mov	r0, r4
 80192ce:	4629      	mov	r1, r5
 80192d0:	f7e7 f99c 	bl	800060c <__aeabi_dmul>
 80192d4:	4b57      	ldr	r3, [pc, #348]	; (8019434 <__ieee754_pow+0x3f4>)
 80192d6:	4682      	mov	sl, r0
 80192d8:	468b      	mov	fp, r1
 80192da:	2200      	movs	r2, #0
 80192dc:	4620      	mov	r0, r4
 80192de:	4629      	mov	r1, r5
 80192e0:	f7e7 f994 	bl	800060c <__aeabi_dmul>
 80192e4:	4602      	mov	r2, r0
 80192e6:	460b      	mov	r3, r1
 80192e8:	a14b      	add	r1, pc, #300	; (adr r1, 8019418 <__ieee754_pow+0x3d8>)
 80192ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80192ee:	f7e6 ffd5 	bl	800029c <__aeabi_dsub>
 80192f2:	4622      	mov	r2, r4
 80192f4:	462b      	mov	r3, r5
 80192f6:	f7e7 f989 	bl	800060c <__aeabi_dmul>
 80192fa:	4602      	mov	r2, r0
 80192fc:	460b      	mov	r3, r1
 80192fe:	2000      	movs	r0, #0
 8019300:	494d      	ldr	r1, [pc, #308]	; (8019438 <__ieee754_pow+0x3f8>)
 8019302:	f7e6 ffcb 	bl	800029c <__aeabi_dsub>
 8019306:	4622      	mov	r2, r4
 8019308:	4680      	mov	r8, r0
 801930a:	4689      	mov	r9, r1
 801930c:	462b      	mov	r3, r5
 801930e:	4620      	mov	r0, r4
 8019310:	4629      	mov	r1, r5
 8019312:	f7e7 f97b 	bl	800060c <__aeabi_dmul>
 8019316:	4602      	mov	r2, r0
 8019318:	460b      	mov	r3, r1
 801931a:	4640      	mov	r0, r8
 801931c:	4649      	mov	r1, r9
 801931e:	f7e7 f975 	bl	800060c <__aeabi_dmul>
 8019322:	a33f      	add	r3, pc, #252	; (adr r3, 8019420 <__ieee754_pow+0x3e0>)
 8019324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019328:	f7e7 f970 	bl	800060c <__aeabi_dmul>
 801932c:	4602      	mov	r2, r0
 801932e:	460b      	mov	r3, r1
 8019330:	4650      	mov	r0, sl
 8019332:	4659      	mov	r1, fp
 8019334:	f7e6 ffb2 	bl	800029c <__aeabi_dsub>
 8019338:	4602      	mov	r2, r0
 801933a:	460b      	mov	r3, r1
 801933c:	4680      	mov	r8, r0
 801933e:	4689      	mov	r9, r1
 8019340:	4630      	mov	r0, r6
 8019342:	4639      	mov	r1, r7
 8019344:	f7e6 ffac 	bl	80002a0 <__adddf3>
 8019348:	2000      	movs	r0, #0
 801934a:	4632      	mov	r2, r6
 801934c:	463b      	mov	r3, r7
 801934e:	4604      	mov	r4, r0
 8019350:	460d      	mov	r5, r1
 8019352:	f7e6 ffa3 	bl	800029c <__aeabi_dsub>
 8019356:	4602      	mov	r2, r0
 8019358:	460b      	mov	r3, r1
 801935a:	4640      	mov	r0, r8
 801935c:	4649      	mov	r1, r9
 801935e:	f7e6 ff9d 	bl	800029c <__aeabi_dsub>
 8019362:	9b04      	ldr	r3, [sp, #16]
 8019364:	9a06      	ldr	r2, [sp, #24]
 8019366:	3b01      	subs	r3, #1
 8019368:	4313      	orrs	r3, r2
 801936a:	4682      	mov	sl, r0
 801936c:	468b      	mov	fp, r1
 801936e:	f040 81e7 	bne.w	8019740 <__ieee754_pow+0x700>
 8019372:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8019428 <__ieee754_pow+0x3e8>
 8019376:	eeb0 8a47 	vmov.f32	s16, s14
 801937a:	eef0 8a67 	vmov.f32	s17, s15
 801937e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019382:	2600      	movs	r6, #0
 8019384:	4632      	mov	r2, r6
 8019386:	463b      	mov	r3, r7
 8019388:	e9dd 0100 	ldrd	r0, r1, [sp]
 801938c:	f7e6 ff86 	bl	800029c <__aeabi_dsub>
 8019390:	4622      	mov	r2, r4
 8019392:	462b      	mov	r3, r5
 8019394:	f7e7 f93a 	bl	800060c <__aeabi_dmul>
 8019398:	e9dd 2300 	ldrd	r2, r3, [sp]
 801939c:	4680      	mov	r8, r0
 801939e:	4689      	mov	r9, r1
 80193a0:	4650      	mov	r0, sl
 80193a2:	4659      	mov	r1, fp
 80193a4:	f7e7 f932 	bl	800060c <__aeabi_dmul>
 80193a8:	4602      	mov	r2, r0
 80193aa:	460b      	mov	r3, r1
 80193ac:	4640      	mov	r0, r8
 80193ae:	4649      	mov	r1, r9
 80193b0:	f7e6 ff76 	bl	80002a0 <__adddf3>
 80193b4:	4632      	mov	r2, r6
 80193b6:	463b      	mov	r3, r7
 80193b8:	4680      	mov	r8, r0
 80193ba:	4689      	mov	r9, r1
 80193bc:	4620      	mov	r0, r4
 80193be:	4629      	mov	r1, r5
 80193c0:	f7e7 f924 	bl	800060c <__aeabi_dmul>
 80193c4:	460b      	mov	r3, r1
 80193c6:	4604      	mov	r4, r0
 80193c8:	460d      	mov	r5, r1
 80193ca:	4602      	mov	r2, r0
 80193cc:	4649      	mov	r1, r9
 80193ce:	4640      	mov	r0, r8
 80193d0:	f7e6 ff66 	bl	80002a0 <__adddf3>
 80193d4:	4b19      	ldr	r3, [pc, #100]	; (801943c <__ieee754_pow+0x3fc>)
 80193d6:	4299      	cmp	r1, r3
 80193d8:	ec45 4b19 	vmov	d9, r4, r5
 80193dc:	4606      	mov	r6, r0
 80193de:	460f      	mov	r7, r1
 80193e0:	468b      	mov	fp, r1
 80193e2:	f340 82f1 	ble.w	80199c8 <__ieee754_pow+0x988>
 80193e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80193ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80193ee:	4303      	orrs	r3, r0
 80193f0:	f000 81e4 	beq.w	80197bc <__ieee754_pow+0x77c>
 80193f4:	ec51 0b18 	vmov	r0, r1, d8
 80193f8:	2200      	movs	r2, #0
 80193fa:	2300      	movs	r3, #0
 80193fc:	f7e7 fb78 	bl	8000af0 <__aeabi_dcmplt>
 8019400:	3800      	subs	r0, #0
 8019402:	bf18      	it	ne
 8019404:	2001      	movne	r0, #1
 8019406:	e72b      	b.n	8019260 <__ieee754_pow+0x220>
 8019408:	60000000 	.word	0x60000000
 801940c:	3ff71547 	.word	0x3ff71547
 8019410:	f85ddf44 	.word	0xf85ddf44
 8019414:	3e54ae0b 	.word	0x3e54ae0b
 8019418:	55555555 	.word	0x55555555
 801941c:	3fd55555 	.word	0x3fd55555
 8019420:	652b82fe 	.word	0x652b82fe
 8019424:	3ff71547 	.word	0x3ff71547
 8019428:	00000000 	.word	0x00000000
 801942c:	bff00000 	.word	0xbff00000
 8019430:	3ff00000 	.word	0x3ff00000
 8019434:	3fd00000 	.word	0x3fd00000
 8019438:	3fe00000 	.word	0x3fe00000
 801943c:	408fffff 	.word	0x408fffff
 8019440:	4bd5      	ldr	r3, [pc, #852]	; (8019798 <__ieee754_pow+0x758>)
 8019442:	402b      	ands	r3, r5
 8019444:	2200      	movs	r2, #0
 8019446:	b92b      	cbnz	r3, 8019454 <__ieee754_pow+0x414>
 8019448:	4bd4      	ldr	r3, [pc, #848]	; (801979c <__ieee754_pow+0x75c>)
 801944a:	f7e7 f8df 	bl	800060c <__aeabi_dmul>
 801944e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8019452:	460c      	mov	r4, r1
 8019454:	1523      	asrs	r3, r4, #20
 8019456:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801945a:	4413      	add	r3, r2
 801945c:	9305      	str	r3, [sp, #20]
 801945e:	4bd0      	ldr	r3, [pc, #832]	; (80197a0 <__ieee754_pow+0x760>)
 8019460:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019464:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019468:	429c      	cmp	r4, r3
 801946a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801946e:	dd08      	ble.n	8019482 <__ieee754_pow+0x442>
 8019470:	4bcc      	ldr	r3, [pc, #816]	; (80197a4 <__ieee754_pow+0x764>)
 8019472:	429c      	cmp	r4, r3
 8019474:	f340 8162 	ble.w	801973c <__ieee754_pow+0x6fc>
 8019478:	9b05      	ldr	r3, [sp, #20]
 801947a:	3301      	adds	r3, #1
 801947c:	9305      	str	r3, [sp, #20]
 801947e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8019482:	2400      	movs	r4, #0
 8019484:	00e3      	lsls	r3, r4, #3
 8019486:	9307      	str	r3, [sp, #28]
 8019488:	4bc7      	ldr	r3, [pc, #796]	; (80197a8 <__ieee754_pow+0x768>)
 801948a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801948e:	ed93 7b00 	vldr	d7, [r3]
 8019492:	4629      	mov	r1, r5
 8019494:	ec53 2b17 	vmov	r2, r3, d7
 8019498:	eeb0 9a47 	vmov.f32	s18, s14
 801949c:	eef0 9a67 	vmov.f32	s19, s15
 80194a0:	4682      	mov	sl, r0
 80194a2:	f7e6 fefb 	bl	800029c <__aeabi_dsub>
 80194a6:	4652      	mov	r2, sl
 80194a8:	4606      	mov	r6, r0
 80194aa:	460f      	mov	r7, r1
 80194ac:	462b      	mov	r3, r5
 80194ae:	ec51 0b19 	vmov	r0, r1, d9
 80194b2:	f7e6 fef5 	bl	80002a0 <__adddf3>
 80194b6:	4602      	mov	r2, r0
 80194b8:	460b      	mov	r3, r1
 80194ba:	2000      	movs	r0, #0
 80194bc:	49bb      	ldr	r1, [pc, #748]	; (80197ac <__ieee754_pow+0x76c>)
 80194be:	f7e7 f9cf 	bl	8000860 <__aeabi_ddiv>
 80194c2:	ec41 0b1a 	vmov	d10, r0, r1
 80194c6:	4602      	mov	r2, r0
 80194c8:	460b      	mov	r3, r1
 80194ca:	4630      	mov	r0, r6
 80194cc:	4639      	mov	r1, r7
 80194ce:	f7e7 f89d 	bl	800060c <__aeabi_dmul>
 80194d2:	2300      	movs	r3, #0
 80194d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80194d8:	9302      	str	r3, [sp, #8]
 80194da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80194de:	46ab      	mov	fp, r5
 80194e0:	106d      	asrs	r5, r5, #1
 80194e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80194e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80194ea:	ec41 0b18 	vmov	d8, r0, r1
 80194ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80194f2:	2200      	movs	r2, #0
 80194f4:	4640      	mov	r0, r8
 80194f6:	4649      	mov	r1, r9
 80194f8:	4614      	mov	r4, r2
 80194fa:	461d      	mov	r5, r3
 80194fc:	f7e7 f886 	bl	800060c <__aeabi_dmul>
 8019500:	4602      	mov	r2, r0
 8019502:	460b      	mov	r3, r1
 8019504:	4630      	mov	r0, r6
 8019506:	4639      	mov	r1, r7
 8019508:	f7e6 fec8 	bl	800029c <__aeabi_dsub>
 801950c:	ec53 2b19 	vmov	r2, r3, d9
 8019510:	4606      	mov	r6, r0
 8019512:	460f      	mov	r7, r1
 8019514:	4620      	mov	r0, r4
 8019516:	4629      	mov	r1, r5
 8019518:	f7e6 fec0 	bl	800029c <__aeabi_dsub>
 801951c:	4602      	mov	r2, r0
 801951e:	460b      	mov	r3, r1
 8019520:	4650      	mov	r0, sl
 8019522:	4659      	mov	r1, fp
 8019524:	f7e6 feba 	bl	800029c <__aeabi_dsub>
 8019528:	4642      	mov	r2, r8
 801952a:	464b      	mov	r3, r9
 801952c:	f7e7 f86e 	bl	800060c <__aeabi_dmul>
 8019530:	4602      	mov	r2, r0
 8019532:	460b      	mov	r3, r1
 8019534:	4630      	mov	r0, r6
 8019536:	4639      	mov	r1, r7
 8019538:	f7e6 feb0 	bl	800029c <__aeabi_dsub>
 801953c:	ec53 2b1a 	vmov	r2, r3, d10
 8019540:	f7e7 f864 	bl	800060c <__aeabi_dmul>
 8019544:	ec53 2b18 	vmov	r2, r3, d8
 8019548:	ec41 0b19 	vmov	d9, r0, r1
 801954c:	ec51 0b18 	vmov	r0, r1, d8
 8019550:	f7e7 f85c 	bl	800060c <__aeabi_dmul>
 8019554:	a37c      	add	r3, pc, #496	; (adr r3, 8019748 <__ieee754_pow+0x708>)
 8019556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801955a:	4604      	mov	r4, r0
 801955c:	460d      	mov	r5, r1
 801955e:	f7e7 f855 	bl	800060c <__aeabi_dmul>
 8019562:	a37b      	add	r3, pc, #492	; (adr r3, 8019750 <__ieee754_pow+0x710>)
 8019564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019568:	f7e6 fe9a 	bl	80002a0 <__adddf3>
 801956c:	4622      	mov	r2, r4
 801956e:	462b      	mov	r3, r5
 8019570:	f7e7 f84c 	bl	800060c <__aeabi_dmul>
 8019574:	a378      	add	r3, pc, #480	; (adr r3, 8019758 <__ieee754_pow+0x718>)
 8019576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801957a:	f7e6 fe91 	bl	80002a0 <__adddf3>
 801957e:	4622      	mov	r2, r4
 8019580:	462b      	mov	r3, r5
 8019582:	f7e7 f843 	bl	800060c <__aeabi_dmul>
 8019586:	a376      	add	r3, pc, #472	; (adr r3, 8019760 <__ieee754_pow+0x720>)
 8019588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801958c:	f7e6 fe88 	bl	80002a0 <__adddf3>
 8019590:	4622      	mov	r2, r4
 8019592:	462b      	mov	r3, r5
 8019594:	f7e7 f83a 	bl	800060c <__aeabi_dmul>
 8019598:	a373      	add	r3, pc, #460	; (adr r3, 8019768 <__ieee754_pow+0x728>)
 801959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801959e:	f7e6 fe7f 	bl	80002a0 <__adddf3>
 80195a2:	4622      	mov	r2, r4
 80195a4:	462b      	mov	r3, r5
 80195a6:	f7e7 f831 	bl	800060c <__aeabi_dmul>
 80195aa:	a371      	add	r3, pc, #452	; (adr r3, 8019770 <__ieee754_pow+0x730>)
 80195ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195b0:	f7e6 fe76 	bl	80002a0 <__adddf3>
 80195b4:	4622      	mov	r2, r4
 80195b6:	4606      	mov	r6, r0
 80195b8:	460f      	mov	r7, r1
 80195ba:	462b      	mov	r3, r5
 80195bc:	4620      	mov	r0, r4
 80195be:	4629      	mov	r1, r5
 80195c0:	f7e7 f824 	bl	800060c <__aeabi_dmul>
 80195c4:	4602      	mov	r2, r0
 80195c6:	460b      	mov	r3, r1
 80195c8:	4630      	mov	r0, r6
 80195ca:	4639      	mov	r1, r7
 80195cc:	f7e7 f81e 	bl	800060c <__aeabi_dmul>
 80195d0:	4642      	mov	r2, r8
 80195d2:	4604      	mov	r4, r0
 80195d4:	460d      	mov	r5, r1
 80195d6:	464b      	mov	r3, r9
 80195d8:	ec51 0b18 	vmov	r0, r1, d8
 80195dc:	f7e6 fe60 	bl	80002a0 <__adddf3>
 80195e0:	ec53 2b19 	vmov	r2, r3, d9
 80195e4:	f7e7 f812 	bl	800060c <__aeabi_dmul>
 80195e8:	4622      	mov	r2, r4
 80195ea:	462b      	mov	r3, r5
 80195ec:	f7e6 fe58 	bl	80002a0 <__adddf3>
 80195f0:	4642      	mov	r2, r8
 80195f2:	4682      	mov	sl, r0
 80195f4:	468b      	mov	fp, r1
 80195f6:	464b      	mov	r3, r9
 80195f8:	4640      	mov	r0, r8
 80195fa:	4649      	mov	r1, r9
 80195fc:	f7e7 f806 	bl	800060c <__aeabi_dmul>
 8019600:	4b6b      	ldr	r3, [pc, #428]	; (80197b0 <__ieee754_pow+0x770>)
 8019602:	2200      	movs	r2, #0
 8019604:	4606      	mov	r6, r0
 8019606:	460f      	mov	r7, r1
 8019608:	f7e6 fe4a 	bl	80002a0 <__adddf3>
 801960c:	4652      	mov	r2, sl
 801960e:	465b      	mov	r3, fp
 8019610:	f7e6 fe46 	bl	80002a0 <__adddf3>
 8019614:	2000      	movs	r0, #0
 8019616:	4604      	mov	r4, r0
 8019618:	460d      	mov	r5, r1
 801961a:	4602      	mov	r2, r0
 801961c:	460b      	mov	r3, r1
 801961e:	4640      	mov	r0, r8
 8019620:	4649      	mov	r1, r9
 8019622:	f7e6 fff3 	bl	800060c <__aeabi_dmul>
 8019626:	4b62      	ldr	r3, [pc, #392]	; (80197b0 <__ieee754_pow+0x770>)
 8019628:	4680      	mov	r8, r0
 801962a:	4689      	mov	r9, r1
 801962c:	2200      	movs	r2, #0
 801962e:	4620      	mov	r0, r4
 8019630:	4629      	mov	r1, r5
 8019632:	f7e6 fe33 	bl	800029c <__aeabi_dsub>
 8019636:	4632      	mov	r2, r6
 8019638:	463b      	mov	r3, r7
 801963a:	f7e6 fe2f 	bl	800029c <__aeabi_dsub>
 801963e:	4602      	mov	r2, r0
 8019640:	460b      	mov	r3, r1
 8019642:	4650      	mov	r0, sl
 8019644:	4659      	mov	r1, fp
 8019646:	f7e6 fe29 	bl	800029c <__aeabi_dsub>
 801964a:	ec53 2b18 	vmov	r2, r3, d8
 801964e:	f7e6 ffdd 	bl	800060c <__aeabi_dmul>
 8019652:	4622      	mov	r2, r4
 8019654:	4606      	mov	r6, r0
 8019656:	460f      	mov	r7, r1
 8019658:	462b      	mov	r3, r5
 801965a:	ec51 0b19 	vmov	r0, r1, d9
 801965e:	f7e6 ffd5 	bl	800060c <__aeabi_dmul>
 8019662:	4602      	mov	r2, r0
 8019664:	460b      	mov	r3, r1
 8019666:	4630      	mov	r0, r6
 8019668:	4639      	mov	r1, r7
 801966a:	f7e6 fe19 	bl	80002a0 <__adddf3>
 801966e:	4606      	mov	r6, r0
 8019670:	460f      	mov	r7, r1
 8019672:	4602      	mov	r2, r0
 8019674:	460b      	mov	r3, r1
 8019676:	4640      	mov	r0, r8
 8019678:	4649      	mov	r1, r9
 801967a:	f7e6 fe11 	bl	80002a0 <__adddf3>
 801967e:	a33e      	add	r3, pc, #248	; (adr r3, 8019778 <__ieee754_pow+0x738>)
 8019680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019684:	2000      	movs	r0, #0
 8019686:	4604      	mov	r4, r0
 8019688:	460d      	mov	r5, r1
 801968a:	f7e6 ffbf 	bl	800060c <__aeabi_dmul>
 801968e:	4642      	mov	r2, r8
 8019690:	ec41 0b18 	vmov	d8, r0, r1
 8019694:	464b      	mov	r3, r9
 8019696:	4620      	mov	r0, r4
 8019698:	4629      	mov	r1, r5
 801969a:	f7e6 fdff 	bl	800029c <__aeabi_dsub>
 801969e:	4602      	mov	r2, r0
 80196a0:	460b      	mov	r3, r1
 80196a2:	4630      	mov	r0, r6
 80196a4:	4639      	mov	r1, r7
 80196a6:	f7e6 fdf9 	bl	800029c <__aeabi_dsub>
 80196aa:	a335      	add	r3, pc, #212	; (adr r3, 8019780 <__ieee754_pow+0x740>)
 80196ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196b0:	f7e6 ffac 	bl	800060c <__aeabi_dmul>
 80196b4:	a334      	add	r3, pc, #208	; (adr r3, 8019788 <__ieee754_pow+0x748>)
 80196b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196ba:	4606      	mov	r6, r0
 80196bc:	460f      	mov	r7, r1
 80196be:	4620      	mov	r0, r4
 80196c0:	4629      	mov	r1, r5
 80196c2:	f7e6 ffa3 	bl	800060c <__aeabi_dmul>
 80196c6:	4602      	mov	r2, r0
 80196c8:	460b      	mov	r3, r1
 80196ca:	4630      	mov	r0, r6
 80196cc:	4639      	mov	r1, r7
 80196ce:	f7e6 fde7 	bl	80002a0 <__adddf3>
 80196d2:	9a07      	ldr	r2, [sp, #28]
 80196d4:	4b37      	ldr	r3, [pc, #220]	; (80197b4 <__ieee754_pow+0x774>)
 80196d6:	4413      	add	r3, r2
 80196d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196dc:	f7e6 fde0 	bl	80002a0 <__adddf3>
 80196e0:	4682      	mov	sl, r0
 80196e2:	9805      	ldr	r0, [sp, #20]
 80196e4:	468b      	mov	fp, r1
 80196e6:	f7e6 ff27 	bl	8000538 <__aeabi_i2d>
 80196ea:	9a07      	ldr	r2, [sp, #28]
 80196ec:	4b32      	ldr	r3, [pc, #200]	; (80197b8 <__ieee754_pow+0x778>)
 80196ee:	4413      	add	r3, r2
 80196f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80196f4:	4606      	mov	r6, r0
 80196f6:	460f      	mov	r7, r1
 80196f8:	4652      	mov	r2, sl
 80196fa:	465b      	mov	r3, fp
 80196fc:	ec51 0b18 	vmov	r0, r1, d8
 8019700:	f7e6 fdce 	bl	80002a0 <__adddf3>
 8019704:	4642      	mov	r2, r8
 8019706:	464b      	mov	r3, r9
 8019708:	f7e6 fdca 	bl	80002a0 <__adddf3>
 801970c:	4632      	mov	r2, r6
 801970e:	463b      	mov	r3, r7
 8019710:	f7e6 fdc6 	bl	80002a0 <__adddf3>
 8019714:	2000      	movs	r0, #0
 8019716:	4632      	mov	r2, r6
 8019718:	463b      	mov	r3, r7
 801971a:	4604      	mov	r4, r0
 801971c:	460d      	mov	r5, r1
 801971e:	f7e6 fdbd 	bl	800029c <__aeabi_dsub>
 8019722:	4642      	mov	r2, r8
 8019724:	464b      	mov	r3, r9
 8019726:	f7e6 fdb9 	bl	800029c <__aeabi_dsub>
 801972a:	ec53 2b18 	vmov	r2, r3, d8
 801972e:	f7e6 fdb5 	bl	800029c <__aeabi_dsub>
 8019732:	4602      	mov	r2, r0
 8019734:	460b      	mov	r3, r1
 8019736:	4650      	mov	r0, sl
 8019738:	4659      	mov	r1, fp
 801973a:	e610      	b.n	801935e <__ieee754_pow+0x31e>
 801973c:	2401      	movs	r4, #1
 801973e:	e6a1      	b.n	8019484 <__ieee754_pow+0x444>
 8019740:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8019790 <__ieee754_pow+0x750>
 8019744:	e617      	b.n	8019376 <__ieee754_pow+0x336>
 8019746:	bf00      	nop
 8019748:	4a454eef 	.word	0x4a454eef
 801974c:	3fca7e28 	.word	0x3fca7e28
 8019750:	93c9db65 	.word	0x93c9db65
 8019754:	3fcd864a 	.word	0x3fcd864a
 8019758:	a91d4101 	.word	0xa91d4101
 801975c:	3fd17460 	.word	0x3fd17460
 8019760:	518f264d 	.word	0x518f264d
 8019764:	3fd55555 	.word	0x3fd55555
 8019768:	db6fabff 	.word	0xdb6fabff
 801976c:	3fdb6db6 	.word	0x3fdb6db6
 8019770:	33333303 	.word	0x33333303
 8019774:	3fe33333 	.word	0x3fe33333
 8019778:	e0000000 	.word	0xe0000000
 801977c:	3feec709 	.word	0x3feec709
 8019780:	dc3a03fd 	.word	0xdc3a03fd
 8019784:	3feec709 	.word	0x3feec709
 8019788:	145b01f5 	.word	0x145b01f5
 801978c:	be3e2fe0 	.word	0xbe3e2fe0
 8019790:	00000000 	.word	0x00000000
 8019794:	3ff00000 	.word	0x3ff00000
 8019798:	7ff00000 	.word	0x7ff00000
 801979c:	43400000 	.word	0x43400000
 80197a0:	0003988e 	.word	0x0003988e
 80197a4:	000bb679 	.word	0x000bb679
 80197a8:	08020020 	.word	0x08020020
 80197ac:	3ff00000 	.word	0x3ff00000
 80197b0:	40080000 	.word	0x40080000
 80197b4:	08020040 	.word	0x08020040
 80197b8:	08020030 	.word	0x08020030
 80197bc:	a3b5      	add	r3, pc, #724	; (adr r3, 8019a94 <__ieee754_pow+0xa54>)
 80197be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197c2:	4640      	mov	r0, r8
 80197c4:	4649      	mov	r1, r9
 80197c6:	f7e6 fd6b 	bl	80002a0 <__adddf3>
 80197ca:	4622      	mov	r2, r4
 80197cc:	ec41 0b1a 	vmov	d10, r0, r1
 80197d0:	462b      	mov	r3, r5
 80197d2:	4630      	mov	r0, r6
 80197d4:	4639      	mov	r1, r7
 80197d6:	f7e6 fd61 	bl	800029c <__aeabi_dsub>
 80197da:	4602      	mov	r2, r0
 80197dc:	460b      	mov	r3, r1
 80197de:	ec51 0b1a 	vmov	r0, r1, d10
 80197e2:	f7e7 f9a3 	bl	8000b2c <__aeabi_dcmpgt>
 80197e6:	2800      	cmp	r0, #0
 80197e8:	f47f ae04 	bne.w	80193f4 <__ieee754_pow+0x3b4>
 80197ec:	4aa4      	ldr	r2, [pc, #656]	; (8019a80 <__ieee754_pow+0xa40>)
 80197ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80197f2:	4293      	cmp	r3, r2
 80197f4:	f340 8108 	ble.w	8019a08 <__ieee754_pow+0x9c8>
 80197f8:	151b      	asrs	r3, r3, #20
 80197fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80197fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8019802:	fa4a f303 	asr.w	r3, sl, r3
 8019806:	445b      	add	r3, fp
 8019808:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801980c:	4e9d      	ldr	r6, [pc, #628]	; (8019a84 <__ieee754_pow+0xa44>)
 801980e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8019812:	4116      	asrs	r6, r2
 8019814:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8019818:	2000      	movs	r0, #0
 801981a:	ea23 0106 	bic.w	r1, r3, r6
 801981e:	f1c2 0214 	rsb	r2, r2, #20
 8019822:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8019826:	fa4a fa02 	asr.w	sl, sl, r2
 801982a:	f1bb 0f00 	cmp.w	fp, #0
 801982e:	4602      	mov	r2, r0
 8019830:	460b      	mov	r3, r1
 8019832:	4620      	mov	r0, r4
 8019834:	4629      	mov	r1, r5
 8019836:	bfb8      	it	lt
 8019838:	f1ca 0a00 	rsblt	sl, sl, #0
 801983c:	f7e6 fd2e 	bl	800029c <__aeabi_dsub>
 8019840:	ec41 0b19 	vmov	d9, r0, r1
 8019844:	4642      	mov	r2, r8
 8019846:	464b      	mov	r3, r9
 8019848:	ec51 0b19 	vmov	r0, r1, d9
 801984c:	f7e6 fd28 	bl	80002a0 <__adddf3>
 8019850:	a37b      	add	r3, pc, #492	; (adr r3, 8019a40 <__ieee754_pow+0xa00>)
 8019852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019856:	2000      	movs	r0, #0
 8019858:	4604      	mov	r4, r0
 801985a:	460d      	mov	r5, r1
 801985c:	f7e6 fed6 	bl	800060c <__aeabi_dmul>
 8019860:	ec53 2b19 	vmov	r2, r3, d9
 8019864:	4606      	mov	r6, r0
 8019866:	460f      	mov	r7, r1
 8019868:	4620      	mov	r0, r4
 801986a:	4629      	mov	r1, r5
 801986c:	f7e6 fd16 	bl	800029c <__aeabi_dsub>
 8019870:	4602      	mov	r2, r0
 8019872:	460b      	mov	r3, r1
 8019874:	4640      	mov	r0, r8
 8019876:	4649      	mov	r1, r9
 8019878:	f7e6 fd10 	bl	800029c <__aeabi_dsub>
 801987c:	a372      	add	r3, pc, #456	; (adr r3, 8019a48 <__ieee754_pow+0xa08>)
 801987e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019882:	f7e6 fec3 	bl	800060c <__aeabi_dmul>
 8019886:	a372      	add	r3, pc, #456	; (adr r3, 8019a50 <__ieee754_pow+0xa10>)
 8019888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801988c:	4680      	mov	r8, r0
 801988e:	4689      	mov	r9, r1
 8019890:	4620      	mov	r0, r4
 8019892:	4629      	mov	r1, r5
 8019894:	f7e6 feba 	bl	800060c <__aeabi_dmul>
 8019898:	4602      	mov	r2, r0
 801989a:	460b      	mov	r3, r1
 801989c:	4640      	mov	r0, r8
 801989e:	4649      	mov	r1, r9
 80198a0:	f7e6 fcfe 	bl	80002a0 <__adddf3>
 80198a4:	4604      	mov	r4, r0
 80198a6:	460d      	mov	r5, r1
 80198a8:	4602      	mov	r2, r0
 80198aa:	460b      	mov	r3, r1
 80198ac:	4630      	mov	r0, r6
 80198ae:	4639      	mov	r1, r7
 80198b0:	f7e6 fcf6 	bl	80002a0 <__adddf3>
 80198b4:	4632      	mov	r2, r6
 80198b6:	463b      	mov	r3, r7
 80198b8:	4680      	mov	r8, r0
 80198ba:	4689      	mov	r9, r1
 80198bc:	f7e6 fcee 	bl	800029c <__aeabi_dsub>
 80198c0:	4602      	mov	r2, r0
 80198c2:	460b      	mov	r3, r1
 80198c4:	4620      	mov	r0, r4
 80198c6:	4629      	mov	r1, r5
 80198c8:	f7e6 fce8 	bl	800029c <__aeabi_dsub>
 80198cc:	4642      	mov	r2, r8
 80198ce:	4606      	mov	r6, r0
 80198d0:	460f      	mov	r7, r1
 80198d2:	464b      	mov	r3, r9
 80198d4:	4640      	mov	r0, r8
 80198d6:	4649      	mov	r1, r9
 80198d8:	f7e6 fe98 	bl	800060c <__aeabi_dmul>
 80198dc:	a35e      	add	r3, pc, #376	; (adr r3, 8019a58 <__ieee754_pow+0xa18>)
 80198de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198e2:	4604      	mov	r4, r0
 80198e4:	460d      	mov	r5, r1
 80198e6:	f7e6 fe91 	bl	800060c <__aeabi_dmul>
 80198ea:	a35d      	add	r3, pc, #372	; (adr r3, 8019a60 <__ieee754_pow+0xa20>)
 80198ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198f0:	f7e6 fcd4 	bl	800029c <__aeabi_dsub>
 80198f4:	4622      	mov	r2, r4
 80198f6:	462b      	mov	r3, r5
 80198f8:	f7e6 fe88 	bl	800060c <__aeabi_dmul>
 80198fc:	a35a      	add	r3, pc, #360	; (adr r3, 8019a68 <__ieee754_pow+0xa28>)
 80198fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019902:	f7e6 fccd 	bl	80002a0 <__adddf3>
 8019906:	4622      	mov	r2, r4
 8019908:	462b      	mov	r3, r5
 801990a:	f7e6 fe7f 	bl	800060c <__aeabi_dmul>
 801990e:	a358      	add	r3, pc, #352	; (adr r3, 8019a70 <__ieee754_pow+0xa30>)
 8019910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019914:	f7e6 fcc2 	bl	800029c <__aeabi_dsub>
 8019918:	4622      	mov	r2, r4
 801991a:	462b      	mov	r3, r5
 801991c:	f7e6 fe76 	bl	800060c <__aeabi_dmul>
 8019920:	a355      	add	r3, pc, #340	; (adr r3, 8019a78 <__ieee754_pow+0xa38>)
 8019922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019926:	f7e6 fcbb 	bl	80002a0 <__adddf3>
 801992a:	4622      	mov	r2, r4
 801992c:	462b      	mov	r3, r5
 801992e:	f7e6 fe6d 	bl	800060c <__aeabi_dmul>
 8019932:	4602      	mov	r2, r0
 8019934:	460b      	mov	r3, r1
 8019936:	4640      	mov	r0, r8
 8019938:	4649      	mov	r1, r9
 801993a:	f7e6 fcaf 	bl	800029c <__aeabi_dsub>
 801993e:	4604      	mov	r4, r0
 8019940:	460d      	mov	r5, r1
 8019942:	4602      	mov	r2, r0
 8019944:	460b      	mov	r3, r1
 8019946:	4640      	mov	r0, r8
 8019948:	4649      	mov	r1, r9
 801994a:	f7e6 fe5f 	bl	800060c <__aeabi_dmul>
 801994e:	2200      	movs	r2, #0
 8019950:	ec41 0b19 	vmov	d9, r0, r1
 8019954:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019958:	4620      	mov	r0, r4
 801995a:	4629      	mov	r1, r5
 801995c:	f7e6 fc9e 	bl	800029c <__aeabi_dsub>
 8019960:	4602      	mov	r2, r0
 8019962:	460b      	mov	r3, r1
 8019964:	ec51 0b19 	vmov	r0, r1, d9
 8019968:	f7e6 ff7a 	bl	8000860 <__aeabi_ddiv>
 801996c:	4632      	mov	r2, r6
 801996e:	4604      	mov	r4, r0
 8019970:	460d      	mov	r5, r1
 8019972:	463b      	mov	r3, r7
 8019974:	4640      	mov	r0, r8
 8019976:	4649      	mov	r1, r9
 8019978:	f7e6 fe48 	bl	800060c <__aeabi_dmul>
 801997c:	4632      	mov	r2, r6
 801997e:	463b      	mov	r3, r7
 8019980:	f7e6 fc8e 	bl	80002a0 <__adddf3>
 8019984:	4602      	mov	r2, r0
 8019986:	460b      	mov	r3, r1
 8019988:	4620      	mov	r0, r4
 801998a:	4629      	mov	r1, r5
 801998c:	f7e6 fc86 	bl	800029c <__aeabi_dsub>
 8019990:	4642      	mov	r2, r8
 8019992:	464b      	mov	r3, r9
 8019994:	f7e6 fc82 	bl	800029c <__aeabi_dsub>
 8019998:	460b      	mov	r3, r1
 801999a:	4602      	mov	r2, r0
 801999c:	493a      	ldr	r1, [pc, #232]	; (8019a88 <__ieee754_pow+0xa48>)
 801999e:	2000      	movs	r0, #0
 80199a0:	f7e6 fc7c 	bl	800029c <__aeabi_dsub>
 80199a4:	ec41 0b10 	vmov	d0, r0, r1
 80199a8:	ee10 3a90 	vmov	r3, s1
 80199ac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80199b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80199b4:	da2b      	bge.n	8019a0e <__ieee754_pow+0x9ce>
 80199b6:	4650      	mov	r0, sl
 80199b8:	f000 fba2 	bl	801a100 <scalbn>
 80199bc:	ec51 0b10 	vmov	r0, r1, d0
 80199c0:	ec53 2b18 	vmov	r2, r3, d8
 80199c4:	f7ff bbed 	b.w	80191a2 <__ieee754_pow+0x162>
 80199c8:	4b30      	ldr	r3, [pc, #192]	; (8019a8c <__ieee754_pow+0xa4c>)
 80199ca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80199ce:	429e      	cmp	r6, r3
 80199d0:	f77f af0c 	ble.w	80197ec <__ieee754_pow+0x7ac>
 80199d4:	4b2e      	ldr	r3, [pc, #184]	; (8019a90 <__ieee754_pow+0xa50>)
 80199d6:	440b      	add	r3, r1
 80199d8:	4303      	orrs	r3, r0
 80199da:	d009      	beq.n	80199f0 <__ieee754_pow+0x9b0>
 80199dc:	ec51 0b18 	vmov	r0, r1, d8
 80199e0:	2200      	movs	r2, #0
 80199e2:	2300      	movs	r3, #0
 80199e4:	f7e7 f884 	bl	8000af0 <__aeabi_dcmplt>
 80199e8:	3800      	subs	r0, #0
 80199ea:	bf18      	it	ne
 80199ec:	2001      	movne	r0, #1
 80199ee:	e447      	b.n	8019280 <__ieee754_pow+0x240>
 80199f0:	4622      	mov	r2, r4
 80199f2:	462b      	mov	r3, r5
 80199f4:	f7e6 fc52 	bl	800029c <__aeabi_dsub>
 80199f8:	4642      	mov	r2, r8
 80199fa:	464b      	mov	r3, r9
 80199fc:	f7e7 f88c 	bl	8000b18 <__aeabi_dcmpge>
 8019a00:	2800      	cmp	r0, #0
 8019a02:	f43f aef3 	beq.w	80197ec <__ieee754_pow+0x7ac>
 8019a06:	e7e9      	b.n	80199dc <__ieee754_pow+0x99c>
 8019a08:	f04f 0a00 	mov.w	sl, #0
 8019a0c:	e71a      	b.n	8019844 <__ieee754_pow+0x804>
 8019a0e:	ec51 0b10 	vmov	r0, r1, d0
 8019a12:	4619      	mov	r1, r3
 8019a14:	e7d4      	b.n	80199c0 <__ieee754_pow+0x980>
 8019a16:	491c      	ldr	r1, [pc, #112]	; (8019a88 <__ieee754_pow+0xa48>)
 8019a18:	2000      	movs	r0, #0
 8019a1a:	f7ff bb30 	b.w	801907e <__ieee754_pow+0x3e>
 8019a1e:	2000      	movs	r0, #0
 8019a20:	2100      	movs	r1, #0
 8019a22:	f7ff bb2c 	b.w	801907e <__ieee754_pow+0x3e>
 8019a26:	4630      	mov	r0, r6
 8019a28:	4639      	mov	r1, r7
 8019a2a:	f7ff bb28 	b.w	801907e <__ieee754_pow+0x3e>
 8019a2e:	9204      	str	r2, [sp, #16]
 8019a30:	f7ff bb7a 	b.w	8019128 <__ieee754_pow+0xe8>
 8019a34:	2300      	movs	r3, #0
 8019a36:	f7ff bb64 	b.w	8019102 <__ieee754_pow+0xc2>
 8019a3a:	bf00      	nop
 8019a3c:	f3af 8000 	nop.w
 8019a40:	00000000 	.word	0x00000000
 8019a44:	3fe62e43 	.word	0x3fe62e43
 8019a48:	fefa39ef 	.word	0xfefa39ef
 8019a4c:	3fe62e42 	.word	0x3fe62e42
 8019a50:	0ca86c39 	.word	0x0ca86c39
 8019a54:	be205c61 	.word	0xbe205c61
 8019a58:	72bea4d0 	.word	0x72bea4d0
 8019a5c:	3e663769 	.word	0x3e663769
 8019a60:	c5d26bf1 	.word	0xc5d26bf1
 8019a64:	3ebbbd41 	.word	0x3ebbbd41
 8019a68:	af25de2c 	.word	0xaf25de2c
 8019a6c:	3f11566a 	.word	0x3f11566a
 8019a70:	16bebd93 	.word	0x16bebd93
 8019a74:	3f66c16c 	.word	0x3f66c16c
 8019a78:	5555553e 	.word	0x5555553e
 8019a7c:	3fc55555 	.word	0x3fc55555
 8019a80:	3fe00000 	.word	0x3fe00000
 8019a84:	000fffff 	.word	0x000fffff
 8019a88:	3ff00000 	.word	0x3ff00000
 8019a8c:	4090cbff 	.word	0x4090cbff
 8019a90:	3f6f3400 	.word	0x3f6f3400
 8019a94:	652b82fe 	.word	0x652b82fe
 8019a98:	3c971547 	.word	0x3c971547

08019a9c <__ieee754_sqrt>:
 8019a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019aa0:	ec55 4b10 	vmov	r4, r5, d0
 8019aa4:	4e55      	ldr	r6, [pc, #340]	; (8019bfc <__ieee754_sqrt+0x160>)
 8019aa6:	43ae      	bics	r6, r5
 8019aa8:	ee10 0a10 	vmov	r0, s0
 8019aac:	ee10 3a10 	vmov	r3, s0
 8019ab0:	462a      	mov	r2, r5
 8019ab2:	4629      	mov	r1, r5
 8019ab4:	d110      	bne.n	8019ad8 <__ieee754_sqrt+0x3c>
 8019ab6:	ee10 2a10 	vmov	r2, s0
 8019aba:	462b      	mov	r3, r5
 8019abc:	f7e6 fda6 	bl	800060c <__aeabi_dmul>
 8019ac0:	4602      	mov	r2, r0
 8019ac2:	460b      	mov	r3, r1
 8019ac4:	4620      	mov	r0, r4
 8019ac6:	4629      	mov	r1, r5
 8019ac8:	f7e6 fbea 	bl	80002a0 <__adddf3>
 8019acc:	4604      	mov	r4, r0
 8019ace:	460d      	mov	r5, r1
 8019ad0:	ec45 4b10 	vmov	d0, r4, r5
 8019ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ad8:	2d00      	cmp	r5, #0
 8019ada:	dc10      	bgt.n	8019afe <__ieee754_sqrt+0x62>
 8019adc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019ae0:	4330      	orrs	r0, r6
 8019ae2:	d0f5      	beq.n	8019ad0 <__ieee754_sqrt+0x34>
 8019ae4:	b15d      	cbz	r5, 8019afe <__ieee754_sqrt+0x62>
 8019ae6:	ee10 2a10 	vmov	r2, s0
 8019aea:	462b      	mov	r3, r5
 8019aec:	ee10 0a10 	vmov	r0, s0
 8019af0:	f7e6 fbd4 	bl	800029c <__aeabi_dsub>
 8019af4:	4602      	mov	r2, r0
 8019af6:	460b      	mov	r3, r1
 8019af8:	f7e6 feb2 	bl	8000860 <__aeabi_ddiv>
 8019afc:	e7e6      	b.n	8019acc <__ieee754_sqrt+0x30>
 8019afe:	1512      	asrs	r2, r2, #20
 8019b00:	d074      	beq.n	8019bec <__ieee754_sqrt+0x150>
 8019b02:	07d4      	lsls	r4, r2, #31
 8019b04:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019b08:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8019b0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019b10:	bf5e      	ittt	pl
 8019b12:	0fda      	lsrpl	r2, r3, #31
 8019b14:	005b      	lslpl	r3, r3, #1
 8019b16:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8019b1a:	2400      	movs	r4, #0
 8019b1c:	0fda      	lsrs	r2, r3, #31
 8019b1e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8019b22:	107f      	asrs	r7, r7, #1
 8019b24:	005b      	lsls	r3, r3, #1
 8019b26:	2516      	movs	r5, #22
 8019b28:	4620      	mov	r0, r4
 8019b2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8019b2e:	1886      	adds	r6, r0, r2
 8019b30:	428e      	cmp	r6, r1
 8019b32:	bfde      	ittt	le
 8019b34:	1b89      	suble	r1, r1, r6
 8019b36:	18b0      	addle	r0, r6, r2
 8019b38:	18a4      	addle	r4, r4, r2
 8019b3a:	0049      	lsls	r1, r1, #1
 8019b3c:	3d01      	subs	r5, #1
 8019b3e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8019b42:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8019b46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019b4a:	d1f0      	bne.n	8019b2e <__ieee754_sqrt+0x92>
 8019b4c:	462a      	mov	r2, r5
 8019b4e:	f04f 0e20 	mov.w	lr, #32
 8019b52:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019b56:	4281      	cmp	r1, r0
 8019b58:	eb06 0c05 	add.w	ip, r6, r5
 8019b5c:	dc02      	bgt.n	8019b64 <__ieee754_sqrt+0xc8>
 8019b5e:	d113      	bne.n	8019b88 <__ieee754_sqrt+0xec>
 8019b60:	459c      	cmp	ip, r3
 8019b62:	d811      	bhi.n	8019b88 <__ieee754_sqrt+0xec>
 8019b64:	f1bc 0f00 	cmp.w	ip, #0
 8019b68:	eb0c 0506 	add.w	r5, ip, r6
 8019b6c:	da43      	bge.n	8019bf6 <__ieee754_sqrt+0x15a>
 8019b6e:	2d00      	cmp	r5, #0
 8019b70:	db41      	blt.n	8019bf6 <__ieee754_sqrt+0x15a>
 8019b72:	f100 0801 	add.w	r8, r0, #1
 8019b76:	1a09      	subs	r1, r1, r0
 8019b78:	459c      	cmp	ip, r3
 8019b7a:	bf88      	it	hi
 8019b7c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8019b80:	eba3 030c 	sub.w	r3, r3, ip
 8019b84:	4432      	add	r2, r6
 8019b86:	4640      	mov	r0, r8
 8019b88:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8019b8c:	f1be 0e01 	subs.w	lr, lr, #1
 8019b90:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8019b94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019b98:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019b9c:	d1db      	bne.n	8019b56 <__ieee754_sqrt+0xba>
 8019b9e:	430b      	orrs	r3, r1
 8019ba0:	d006      	beq.n	8019bb0 <__ieee754_sqrt+0x114>
 8019ba2:	1c50      	adds	r0, r2, #1
 8019ba4:	bf13      	iteet	ne
 8019ba6:	3201      	addne	r2, #1
 8019ba8:	3401      	addeq	r4, #1
 8019baa:	4672      	moveq	r2, lr
 8019bac:	f022 0201 	bicne.w	r2, r2, #1
 8019bb0:	1063      	asrs	r3, r4, #1
 8019bb2:	0852      	lsrs	r2, r2, #1
 8019bb4:	07e1      	lsls	r1, r4, #31
 8019bb6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8019bba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8019bbe:	bf48      	it	mi
 8019bc0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8019bc4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8019bc8:	4614      	mov	r4, r2
 8019bca:	e781      	b.n	8019ad0 <__ieee754_sqrt+0x34>
 8019bcc:	0ad9      	lsrs	r1, r3, #11
 8019bce:	3815      	subs	r0, #21
 8019bd0:	055b      	lsls	r3, r3, #21
 8019bd2:	2900      	cmp	r1, #0
 8019bd4:	d0fa      	beq.n	8019bcc <__ieee754_sqrt+0x130>
 8019bd6:	02cd      	lsls	r5, r1, #11
 8019bd8:	d50a      	bpl.n	8019bf0 <__ieee754_sqrt+0x154>
 8019bda:	f1c2 0420 	rsb	r4, r2, #32
 8019bde:	fa23 f404 	lsr.w	r4, r3, r4
 8019be2:	1e55      	subs	r5, r2, #1
 8019be4:	4093      	lsls	r3, r2
 8019be6:	4321      	orrs	r1, r4
 8019be8:	1b42      	subs	r2, r0, r5
 8019bea:	e78a      	b.n	8019b02 <__ieee754_sqrt+0x66>
 8019bec:	4610      	mov	r0, r2
 8019bee:	e7f0      	b.n	8019bd2 <__ieee754_sqrt+0x136>
 8019bf0:	0049      	lsls	r1, r1, #1
 8019bf2:	3201      	adds	r2, #1
 8019bf4:	e7ef      	b.n	8019bd6 <__ieee754_sqrt+0x13a>
 8019bf6:	4680      	mov	r8, r0
 8019bf8:	e7bd      	b.n	8019b76 <__ieee754_sqrt+0xda>
 8019bfa:	bf00      	nop
 8019bfc:	7ff00000 	.word	0x7ff00000

08019c00 <__ieee754_expf>:
 8019c00:	ee10 2a10 	vmov	r2, s0
 8019c04:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8019c08:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019c0c:	d902      	bls.n	8019c14 <__ieee754_expf+0x14>
 8019c0e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019c12:	4770      	bx	lr
 8019c14:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8019c18:	d106      	bne.n	8019c28 <__ieee754_expf+0x28>
 8019c1a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8019d54 <__ieee754_expf+0x154>
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	bf18      	it	ne
 8019c22:	eeb0 0a67 	vmovne.f32	s0, s15
 8019c26:	4770      	bx	lr
 8019c28:	484b      	ldr	r0, [pc, #300]	; (8019d58 <__ieee754_expf+0x158>)
 8019c2a:	4282      	cmp	r2, r0
 8019c2c:	dd02      	ble.n	8019c34 <__ieee754_expf+0x34>
 8019c2e:	2000      	movs	r0, #0
 8019c30:	f000 ba4c 	b.w	801a0cc <__math_oflowf>
 8019c34:	2a00      	cmp	r2, #0
 8019c36:	da05      	bge.n	8019c44 <__ieee754_expf+0x44>
 8019c38:	4a48      	ldr	r2, [pc, #288]	; (8019d5c <__ieee754_expf+0x15c>)
 8019c3a:	4291      	cmp	r1, r2
 8019c3c:	d902      	bls.n	8019c44 <__ieee754_expf+0x44>
 8019c3e:	2000      	movs	r0, #0
 8019c40:	f000 ba3e 	b.w	801a0c0 <__math_uflowf>
 8019c44:	4a46      	ldr	r2, [pc, #280]	; (8019d60 <__ieee754_expf+0x160>)
 8019c46:	4291      	cmp	r1, r2
 8019c48:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8019c4c:	d952      	bls.n	8019cf4 <__ieee754_expf+0xf4>
 8019c4e:	4a45      	ldr	r2, [pc, #276]	; (8019d64 <__ieee754_expf+0x164>)
 8019c50:	4291      	cmp	r1, r2
 8019c52:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8019c56:	d834      	bhi.n	8019cc2 <__ieee754_expf+0xc2>
 8019c58:	4943      	ldr	r1, [pc, #268]	; (8019d68 <__ieee754_expf+0x168>)
 8019c5a:	4411      	add	r1, r2
 8019c5c:	ed91 7a00 	vldr	s14, [r1]
 8019c60:	4942      	ldr	r1, [pc, #264]	; (8019d6c <__ieee754_expf+0x16c>)
 8019c62:	440a      	add	r2, r1
 8019c64:	edd2 7a00 	vldr	s15, [r2]
 8019c68:	ee30 7a47 	vsub.f32	s14, s0, s14
 8019c6c:	f1c3 0201 	rsb	r2, r3, #1
 8019c70:	1ad2      	subs	r2, r2, r3
 8019c72:	ee37 0a67 	vsub.f32	s0, s14, s15
 8019c76:	ee20 6a00 	vmul.f32	s12, s0, s0
 8019c7a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8019d70 <__ieee754_expf+0x170>
 8019c7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8019d74 <__ieee754_expf+0x174>
 8019c82:	eee6 6a05 	vfma.f32	s13, s12, s10
 8019c86:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8019d78 <__ieee754_expf+0x178>
 8019c8a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8019c8e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8019d7c <__ieee754_expf+0x17c>
 8019c92:	eee5 6a06 	vfma.f32	s13, s10, s12
 8019c96:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8019d80 <__ieee754_expf+0x180>
 8019c9a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8019c9e:	eef0 6a40 	vmov.f32	s13, s0
 8019ca2:	eee5 6a46 	vfms.f32	s13, s10, s12
 8019ca6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8019caa:	ee20 5a26 	vmul.f32	s10, s0, s13
 8019cae:	bb92      	cbnz	r2, 8019d16 <__ieee754_expf+0x116>
 8019cb0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8019cb4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8019cb8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019cbc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8019cc0:	4770      	bx	lr
 8019cc2:	4b30      	ldr	r3, [pc, #192]	; (8019d84 <__ieee754_expf+0x184>)
 8019cc4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8019d88 <__ieee754_expf+0x188>
 8019cc8:	eddf 6a30 	vldr	s13, [pc, #192]	; 8019d8c <__ieee754_expf+0x18c>
 8019ccc:	4413      	add	r3, r2
 8019cce:	edd3 7a00 	vldr	s15, [r3]
 8019cd2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019cd6:	eeb0 7a40 	vmov.f32	s14, s0
 8019cda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019cde:	ee17 2a90 	vmov	r2, s15
 8019ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019ce6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8019cea:	eddf 6a29 	vldr	s13, [pc, #164]	; 8019d90 <__ieee754_expf+0x190>
 8019cee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019cf2:	e7be      	b.n	8019c72 <__ieee754_expf+0x72>
 8019cf4:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8019cf8:	d20b      	bcs.n	8019d12 <__ieee754_expf+0x112>
 8019cfa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8019d94 <__ieee754_expf+0x194>
 8019cfe:	ee70 6a26 	vadd.f32	s13, s0, s13
 8019d02:	eef4 6ae5 	vcmpe.f32	s13, s11
 8019d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d0a:	dd02      	ble.n	8019d12 <__ieee754_expf+0x112>
 8019d0c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8019d10:	4770      	bx	lr
 8019d12:	2200      	movs	r2, #0
 8019d14:	e7af      	b.n	8019c76 <__ieee754_expf+0x76>
 8019d16:	ee76 6a66 	vsub.f32	s13, s12, s13
 8019d1a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8019d1e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8019d22:	bfb8      	it	lt
 8019d24:	3264      	addlt	r2, #100	; 0x64
 8019d26:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019d2a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019d2e:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8019d32:	ee17 3a90 	vmov	r3, s15
 8019d36:	bfab      	itete	ge
 8019d38:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8019d3c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8019d40:	ee00 3a10 	vmovge	s0, r3
 8019d44:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8019d98 <__ieee754_expf+0x198>
 8019d48:	bfbc      	itt	lt
 8019d4a:	ee00 3a10 	vmovlt	s0, r3
 8019d4e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8019d52:	4770      	bx	lr
 8019d54:	00000000 	.word	0x00000000
 8019d58:	42b17217 	.word	0x42b17217
 8019d5c:	42cff1b5 	.word	0x42cff1b5
 8019d60:	3eb17218 	.word	0x3eb17218
 8019d64:	3f851591 	.word	0x3f851591
 8019d68:	08020058 	.word	0x08020058
 8019d6c:	08020060 	.word	0x08020060
 8019d70:	3331bb4c 	.word	0x3331bb4c
 8019d74:	b5ddea0e 	.word	0xb5ddea0e
 8019d78:	388ab355 	.word	0x388ab355
 8019d7c:	bb360b61 	.word	0xbb360b61
 8019d80:	3e2aaaab 	.word	0x3e2aaaab
 8019d84:	08020050 	.word	0x08020050
 8019d88:	3fb8aa3b 	.word	0x3fb8aa3b
 8019d8c:	3f317180 	.word	0x3f317180
 8019d90:	3717f7d1 	.word	0x3717f7d1
 8019d94:	7149f2ca 	.word	0x7149f2ca
 8019d98:	0d800000 	.word	0x0d800000

08019d9c <__ieee754_logf>:
 8019d9c:	ee10 3a10 	vmov	r3, s0
 8019da0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8019da4:	d106      	bne.n	8019db4 <__ieee754_logf+0x18>
 8019da6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8019f3c <__ieee754_logf+0x1a0>
 8019daa:	eddf 7a65 	vldr	s15, [pc, #404]	; 8019f40 <__ieee754_logf+0x1a4>
 8019dae:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8019db2:	4770      	bx	lr
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	da02      	bge.n	8019dbe <__ieee754_logf+0x22>
 8019db8:	ee30 7a40 	vsub.f32	s14, s0, s0
 8019dbc:	e7f5      	b.n	8019daa <__ieee754_logf+0xe>
 8019dbe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019dc2:	db02      	blt.n	8019dca <__ieee754_logf+0x2e>
 8019dc4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019dc8:	4770      	bx	lr
 8019dca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019dce:	bfb8      	it	lt
 8019dd0:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8019f44 <__ieee754_logf+0x1a8>
 8019dd4:	485c      	ldr	r0, [pc, #368]	; (8019f48 <__ieee754_logf+0x1ac>)
 8019dd6:	bfbe      	ittt	lt
 8019dd8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8019ddc:	f06f 0118 	mvnlt.w	r1, #24
 8019de0:	ee17 3a90 	vmovlt	r3, s15
 8019de4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8019de8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8019dec:	4418      	add	r0, r3
 8019dee:	bfa8      	it	ge
 8019df0:	2100      	movge	r1, #0
 8019df2:	3a7f      	subs	r2, #127	; 0x7f
 8019df4:	440a      	add	r2, r1
 8019df6:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8019dfa:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8019dfe:	4319      	orrs	r1, r3
 8019e00:	ee00 1a10 	vmov	s0, r1
 8019e04:	4951      	ldr	r1, [pc, #324]	; (8019f4c <__ieee754_logf+0x1b0>)
 8019e06:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8019e0a:	f103 000f 	add.w	r0, r3, #15
 8019e0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019e12:	4001      	ands	r1, r0
 8019e14:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019e18:	bb89      	cbnz	r1, 8019e7e <__ieee754_logf+0xe2>
 8019e1a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8019e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e22:	d10f      	bne.n	8019e44 <__ieee754_logf+0xa8>
 8019e24:	2a00      	cmp	r2, #0
 8019e26:	f000 8085 	beq.w	8019f34 <__ieee754_logf+0x198>
 8019e2a:	ee07 2a90 	vmov	s15, r2
 8019e2e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8019f50 <__ieee754_logf+0x1b4>
 8019e32:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8019f54 <__ieee754_logf+0x1b8>
 8019e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e3a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019e3e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8019e42:	4770      	bx	lr
 8019e44:	eddf 6a44 	vldr	s13, [pc, #272]	; 8019f58 <__ieee754_logf+0x1bc>
 8019e48:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019e4c:	eee0 7a66 	vfms.f32	s15, s0, s13
 8019e50:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019e54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019e58:	b912      	cbnz	r2, 8019e60 <__ieee754_logf+0xc4>
 8019e5a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019e5e:	4770      	bx	lr
 8019e60:	ee07 2a90 	vmov	s15, r2
 8019e64:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8019f50 <__ieee754_logf+0x1b4>
 8019e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e6c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8019e70:	ee37 0a40 	vsub.f32	s0, s14, s0
 8019e74:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8019f54 <__ieee754_logf+0x1b8>
 8019e78:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8019e7c:	4770      	bx	lr
 8019e7e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8019e82:	ee70 7a27 	vadd.f32	s15, s0, s15
 8019e86:	eddf 5a35 	vldr	s11, [pc, #212]	; 8019f5c <__ieee754_logf+0x1c0>
 8019e8a:	eddf 4a35 	vldr	s9, [pc, #212]	; 8019f60 <__ieee754_logf+0x1c4>
 8019e8e:	4935      	ldr	r1, [pc, #212]	; (8019f64 <__ieee754_logf+0x1c8>)
 8019e90:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8019e94:	4419      	add	r1, r3
 8019e96:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8019e9a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8019e9e:	430b      	orrs	r3, r1
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	ee07 2a90 	vmov	s15, r2
 8019ea6:	ee26 5a06 	vmul.f32	s10, s12, s12
 8019eaa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019eae:	ee25 7a05 	vmul.f32	s14, s10, s10
 8019eb2:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8019f68 <__ieee754_logf+0x1cc>
 8019eb6:	eee7 7a25 	vfma.f32	s15, s14, s11
 8019eba:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8019f6c <__ieee754_logf+0x1d0>
 8019ebe:	eee7 5a87 	vfma.f32	s11, s15, s14
 8019ec2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8019f70 <__ieee754_logf+0x1d4>
 8019ec6:	eee7 7a24 	vfma.f32	s15, s14, s9
 8019eca:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8019f74 <__ieee754_logf+0x1d8>
 8019ece:	eee7 4a87 	vfma.f32	s9, s15, s14
 8019ed2:	eddf 7a29 	vldr	s15, [pc, #164]	; 8019f78 <__ieee754_logf+0x1dc>
 8019ed6:	eee4 7a87 	vfma.f32	s15, s9, s14
 8019eda:	ee67 7a85 	vmul.f32	s15, s15, s10
 8019ede:	eee5 7a87 	vfma.f32	s15, s11, s14
 8019ee2:	dd1c      	ble.n	8019f1e <__ieee754_logf+0x182>
 8019ee4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019ee8:	ee20 7a07 	vmul.f32	s14, s0, s14
 8019eec:	ee27 7a00 	vmul.f32	s14, s14, s0
 8019ef0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019ef4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019ef8:	b922      	cbnz	r2, 8019f04 <__ieee754_logf+0x168>
 8019efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019efe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019f02:	4770      	bx	lr
 8019f04:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8019f50 <__ieee754_logf+0x1b4>
 8019f08:	eee6 7a86 	vfma.f32	s15, s13, s12
 8019f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019f10:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019f14:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8019f54 <__ieee754_logf+0x1b8>
 8019f18:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8019f1c:	4770      	bx	lr
 8019f1e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019f22:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019f26:	2a00      	cmp	r2, #0
 8019f28:	d0e9      	beq.n	8019efe <__ieee754_logf+0x162>
 8019f2a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8019f50 <__ieee754_logf+0x1b4>
 8019f2e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8019f32:	e7ed      	b.n	8019f10 <__ieee754_logf+0x174>
 8019f34:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8019f40 <__ieee754_logf+0x1a4>
 8019f38:	4770      	bx	lr
 8019f3a:	bf00      	nop
 8019f3c:	cc000000 	.word	0xcc000000
 8019f40:	00000000 	.word	0x00000000
 8019f44:	4c000000 	.word	0x4c000000
 8019f48:	004afb20 	.word	0x004afb20
 8019f4c:	007ffff0 	.word	0x007ffff0
 8019f50:	3717f7d1 	.word	0x3717f7d1
 8019f54:	3f317180 	.word	0x3f317180
 8019f58:	3eaaaaab 	.word	0x3eaaaaab
 8019f5c:	3e1cd04f 	.word	0x3e1cd04f
 8019f60:	3e178897 	.word	0x3e178897
 8019f64:	ffcf5c30 	.word	0xffcf5c30
 8019f68:	3e638e29 	.word	0x3e638e29
 8019f6c:	3ecccccd 	.word	0x3ecccccd
 8019f70:	3e3a3325 	.word	0x3e3a3325
 8019f74:	3e924925 	.word	0x3e924925
 8019f78:	3f2aaaab 	.word	0x3f2aaaab

08019f7c <__ieee754_log10f>:
 8019f7c:	b508      	push	{r3, lr}
 8019f7e:	ee10 2a10 	vmov	r2, s0
 8019f82:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8019f86:	ed2d 8b02 	vpush	{d8}
 8019f8a:	d108      	bne.n	8019f9e <__ieee754_log10f+0x22>
 8019f8c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801a014 <__ieee754_log10f+0x98>
 8019f90:	eddf 7a21 	vldr	s15, [pc, #132]	; 801a018 <__ieee754_log10f+0x9c>
 8019f94:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8019f98:	ecbd 8b02 	vpop	{d8}
 8019f9c:	bd08      	pop	{r3, pc}
 8019f9e:	2a00      	cmp	r2, #0
 8019fa0:	da02      	bge.n	8019fa8 <__ieee754_log10f+0x2c>
 8019fa2:	ee30 7a40 	vsub.f32	s14, s0, s0
 8019fa6:	e7f3      	b.n	8019f90 <__ieee754_log10f+0x14>
 8019fa8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8019fac:	db02      	blt.n	8019fb4 <__ieee754_log10f+0x38>
 8019fae:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019fb2:	e7f1      	b.n	8019f98 <__ieee754_log10f+0x1c>
 8019fb4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8019fb8:	bfbf      	itttt	lt
 8019fba:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 801a01c <__ieee754_log10f+0xa0>
 8019fbe:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8019fc2:	f06f 0118 	mvnlt.w	r1, #24
 8019fc6:	ee17 2a90 	vmovlt	r2, s15
 8019fca:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8019fce:	bfa8      	it	ge
 8019fd0:	2100      	movge	r1, #0
 8019fd2:	3b7f      	subs	r3, #127	; 0x7f
 8019fd4:	440b      	add	r3, r1
 8019fd6:	0fd9      	lsrs	r1, r3, #31
 8019fd8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8019fdc:	ee07 3a90 	vmov	s15, r3
 8019fe0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8019fe4:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8019fe8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8019fec:	ee00 3a10 	vmov	s0, r3
 8019ff0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8019ff4:	f7ff fed2 	bl	8019d9c <__ieee754_logf>
 8019ff8:	eddf 7a09 	vldr	s15, [pc, #36]	; 801a020 <__ieee754_log10f+0xa4>
 8019ffc:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a000:	eddf 7a08 	vldr	s15, [pc, #32]	; 801a024 <__ieee754_log10f+0xa8>
 801a004:	eea8 0a27 	vfma.f32	s0, s16, s15
 801a008:	eddf 7a07 	vldr	s15, [pc, #28]	; 801a028 <__ieee754_log10f+0xac>
 801a00c:	eea8 0a27 	vfma.f32	s0, s16, s15
 801a010:	e7c2      	b.n	8019f98 <__ieee754_log10f+0x1c>
 801a012:	bf00      	nop
 801a014:	cc000000 	.word	0xcc000000
 801a018:	00000000 	.word	0x00000000
 801a01c:	4c000000 	.word	0x4c000000
 801a020:	3ede5bd9 	.word	0x3ede5bd9
 801a024:	355427db 	.word	0x355427db
 801a028:	3e9a2080 	.word	0x3e9a2080

0801a02c <__ieee754_sqrtf>:
 801a02c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a030:	4770      	bx	lr

0801a032 <with_errno>:
 801a032:	b570      	push	{r4, r5, r6, lr}
 801a034:	4604      	mov	r4, r0
 801a036:	460d      	mov	r5, r1
 801a038:	4616      	mov	r6, r2
 801a03a:	f000 f929 	bl	801a290 <__errno>
 801a03e:	4629      	mov	r1, r5
 801a040:	6006      	str	r6, [r0, #0]
 801a042:	4620      	mov	r0, r4
 801a044:	bd70      	pop	{r4, r5, r6, pc}

0801a046 <xflow>:
 801a046:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a048:	4614      	mov	r4, r2
 801a04a:	461d      	mov	r5, r3
 801a04c:	b108      	cbz	r0, 801a052 <xflow+0xc>
 801a04e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a052:	e9cd 2300 	strd	r2, r3, [sp]
 801a056:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a05a:	4620      	mov	r0, r4
 801a05c:	4629      	mov	r1, r5
 801a05e:	f7e6 fad5 	bl	800060c <__aeabi_dmul>
 801a062:	2222      	movs	r2, #34	; 0x22
 801a064:	b003      	add	sp, #12
 801a066:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a06a:	f7ff bfe2 	b.w	801a032 <with_errno>

0801a06e <__math_uflow>:
 801a06e:	b508      	push	{r3, lr}
 801a070:	2200      	movs	r2, #0
 801a072:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801a076:	f7ff ffe6 	bl	801a046 <xflow>
 801a07a:	ec41 0b10 	vmov	d0, r0, r1
 801a07e:	bd08      	pop	{r3, pc}

0801a080 <__math_oflow>:
 801a080:	b508      	push	{r3, lr}
 801a082:	2200      	movs	r2, #0
 801a084:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801a088:	f7ff ffdd 	bl	801a046 <xflow>
 801a08c:	ec41 0b10 	vmov	d0, r0, r1
 801a090:	bd08      	pop	{r3, pc}

0801a092 <with_errnof>:
 801a092:	b513      	push	{r0, r1, r4, lr}
 801a094:	4604      	mov	r4, r0
 801a096:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a09a:	f000 f8f9 	bl	801a290 <__errno>
 801a09e:	ed9d 0a01 	vldr	s0, [sp, #4]
 801a0a2:	6004      	str	r4, [r0, #0]
 801a0a4:	b002      	add	sp, #8
 801a0a6:	bd10      	pop	{r4, pc}

0801a0a8 <xflowf>:
 801a0a8:	b130      	cbz	r0, 801a0b8 <xflowf+0x10>
 801a0aa:	eef1 7a40 	vneg.f32	s15, s0
 801a0ae:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a0b2:	2022      	movs	r0, #34	; 0x22
 801a0b4:	f7ff bfed 	b.w	801a092 <with_errnof>
 801a0b8:	eef0 7a40 	vmov.f32	s15, s0
 801a0bc:	e7f7      	b.n	801a0ae <xflowf+0x6>
	...

0801a0c0 <__math_uflowf>:
 801a0c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a0c8 <__math_uflowf+0x8>
 801a0c4:	f7ff bff0 	b.w	801a0a8 <xflowf>
 801a0c8:	10000000 	.word	0x10000000

0801a0cc <__math_oflowf>:
 801a0cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a0d4 <__math_oflowf+0x8>
 801a0d0:	f7ff bfea 	b.w	801a0a8 <xflowf>
 801a0d4:	70000000 	.word	0x70000000

0801a0d8 <fabs>:
 801a0d8:	ec51 0b10 	vmov	r0, r1, d0
 801a0dc:	ee10 2a10 	vmov	r2, s0
 801a0e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a0e4:	ec43 2b10 	vmov	d0, r2, r3
 801a0e8:	4770      	bx	lr

0801a0ea <finite>:
 801a0ea:	b082      	sub	sp, #8
 801a0ec:	ed8d 0b00 	vstr	d0, [sp]
 801a0f0:	9801      	ldr	r0, [sp, #4]
 801a0f2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a0f6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a0fa:	0fc0      	lsrs	r0, r0, #31
 801a0fc:	b002      	add	sp, #8
 801a0fe:	4770      	bx	lr

0801a100 <scalbn>:
 801a100:	b570      	push	{r4, r5, r6, lr}
 801a102:	ec55 4b10 	vmov	r4, r5, d0
 801a106:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801a10a:	4606      	mov	r6, r0
 801a10c:	462b      	mov	r3, r5
 801a10e:	b99a      	cbnz	r2, 801a138 <scalbn+0x38>
 801a110:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a114:	4323      	orrs	r3, r4
 801a116:	d036      	beq.n	801a186 <scalbn+0x86>
 801a118:	4b39      	ldr	r3, [pc, #228]	; (801a200 <scalbn+0x100>)
 801a11a:	4629      	mov	r1, r5
 801a11c:	ee10 0a10 	vmov	r0, s0
 801a120:	2200      	movs	r2, #0
 801a122:	f7e6 fa73 	bl	800060c <__aeabi_dmul>
 801a126:	4b37      	ldr	r3, [pc, #220]	; (801a204 <scalbn+0x104>)
 801a128:	429e      	cmp	r6, r3
 801a12a:	4604      	mov	r4, r0
 801a12c:	460d      	mov	r5, r1
 801a12e:	da10      	bge.n	801a152 <scalbn+0x52>
 801a130:	a32b      	add	r3, pc, #172	; (adr r3, 801a1e0 <scalbn+0xe0>)
 801a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a136:	e03a      	b.n	801a1ae <scalbn+0xae>
 801a138:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801a13c:	428a      	cmp	r2, r1
 801a13e:	d10c      	bne.n	801a15a <scalbn+0x5a>
 801a140:	ee10 2a10 	vmov	r2, s0
 801a144:	4620      	mov	r0, r4
 801a146:	4629      	mov	r1, r5
 801a148:	f7e6 f8aa 	bl	80002a0 <__adddf3>
 801a14c:	4604      	mov	r4, r0
 801a14e:	460d      	mov	r5, r1
 801a150:	e019      	b.n	801a186 <scalbn+0x86>
 801a152:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a156:	460b      	mov	r3, r1
 801a158:	3a36      	subs	r2, #54	; 0x36
 801a15a:	4432      	add	r2, r6
 801a15c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a160:	428a      	cmp	r2, r1
 801a162:	dd08      	ble.n	801a176 <scalbn+0x76>
 801a164:	2d00      	cmp	r5, #0
 801a166:	a120      	add	r1, pc, #128	; (adr r1, 801a1e8 <scalbn+0xe8>)
 801a168:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a16c:	da1c      	bge.n	801a1a8 <scalbn+0xa8>
 801a16e:	a120      	add	r1, pc, #128	; (adr r1, 801a1f0 <scalbn+0xf0>)
 801a170:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a174:	e018      	b.n	801a1a8 <scalbn+0xa8>
 801a176:	2a00      	cmp	r2, #0
 801a178:	dd08      	ble.n	801a18c <scalbn+0x8c>
 801a17a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a17e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a182:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a186:	ec45 4b10 	vmov	d0, r4, r5
 801a18a:	bd70      	pop	{r4, r5, r6, pc}
 801a18c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a190:	da19      	bge.n	801a1c6 <scalbn+0xc6>
 801a192:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a196:	429e      	cmp	r6, r3
 801a198:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801a19c:	dd0a      	ble.n	801a1b4 <scalbn+0xb4>
 801a19e:	a112      	add	r1, pc, #72	; (adr r1, 801a1e8 <scalbn+0xe8>)
 801a1a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	d1e2      	bne.n	801a16e <scalbn+0x6e>
 801a1a8:	a30f      	add	r3, pc, #60	; (adr r3, 801a1e8 <scalbn+0xe8>)
 801a1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ae:	f7e6 fa2d 	bl	800060c <__aeabi_dmul>
 801a1b2:	e7cb      	b.n	801a14c <scalbn+0x4c>
 801a1b4:	a10a      	add	r1, pc, #40	; (adr r1, 801a1e0 <scalbn+0xe0>)
 801a1b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	d0b8      	beq.n	801a130 <scalbn+0x30>
 801a1be:	a10e      	add	r1, pc, #56	; (adr r1, 801a1f8 <scalbn+0xf8>)
 801a1c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a1c4:	e7b4      	b.n	801a130 <scalbn+0x30>
 801a1c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a1ca:	3236      	adds	r2, #54	; 0x36
 801a1cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a1d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a1d4:	4620      	mov	r0, r4
 801a1d6:	4b0c      	ldr	r3, [pc, #48]	; (801a208 <scalbn+0x108>)
 801a1d8:	2200      	movs	r2, #0
 801a1da:	e7e8      	b.n	801a1ae <scalbn+0xae>
 801a1dc:	f3af 8000 	nop.w
 801a1e0:	c2f8f359 	.word	0xc2f8f359
 801a1e4:	01a56e1f 	.word	0x01a56e1f
 801a1e8:	8800759c 	.word	0x8800759c
 801a1ec:	7e37e43c 	.word	0x7e37e43c
 801a1f0:	8800759c 	.word	0x8800759c
 801a1f4:	fe37e43c 	.word	0xfe37e43c
 801a1f8:	c2f8f359 	.word	0xc2f8f359
 801a1fc:	81a56e1f 	.word	0x81a56e1f
 801a200:	43500000 	.word	0x43500000
 801a204:	ffff3cb0 	.word	0xffff3cb0
 801a208:	3c900000 	.word	0x3c900000

0801a20c <finitef>:
 801a20c:	b082      	sub	sp, #8
 801a20e:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a212:	9801      	ldr	r0, [sp, #4]
 801a214:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a218:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801a21c:	bfac      	ite	ge
 801a21e:	2000      	movge	r0, #0
 801a220:	2001      	movlt	r0, #1
 801a222:	b002      	add	sp, #8
 801a224:	4770      	bx	lr
	...

0801a228 <nanf>:
 801a228:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a230 <nanf+0x8>
 801a22c:	4770      	bx	lr
 801a22e:	bf00      	nop
 801a230:	7fc00000 	.word	0x7fc00000

0801a234 <abort>:
 801a234:	b508      	push	{r3, lr}
 801a236:	2006      	movs	r0, #6
 801a238:	f001 f82a 	bl	801b290 <raise>
 801a23c:	2001      	movs	r0, #1
 801a23e:	f7e9 fc15 	bl	8003a6c <_exit>
	...

0801a244 <__assert_func>:
 801a244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a246:	4614      	mov	r4, r2
 801a248:	461a      	mov	r2, r3
 801a24a:	4b09      	ldr	r3, [pc, #36]	; (801a270 <__assert_func+0x2c>)
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	4605      	mov	r5, r0
 801a250:	68d8      	ldr	r0, [r3, #12]
 801a252:	b14c      	cbz	r4, 801a268 <__assert_func+0x24>
 801a254:	4b07      	ldr	r3, [pc, #28]	; (801a274 <__assert_func+0x30>)
 801a256:	9100      	str	r1, [sp, #0]
 801a258:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a25c:	4906      	ldr	r1, [pc, #24]	; (801a278 <__assert_func+0x34>)
 801a25e:	462b      	mov	r3, r5
 801a260:	f000 f81c 	bl	801a29c <fiprintf>
 801a264:	f7ff ffe6 	bl	801a234 <abort>
 801a268:	4b04      	ldr	r3, [pc, #16]	; (801a27c <__assert_func+0x38>)
 801a26a:	461c      	mov	r4, r3
 801a26c:	e7f3      	b.n	801a256 <__assert_func+0x12>
 801a26e:	bf00      	nop
 801a270:	20000250 	.word	0x20000250
 801a274:	08020068 	.word	0x08020068
 801a278:	08020075 	.word	0x08020075
 801a27c:	080200a3 	.word	0x080200a3

0801a280 <calloc>:
 801a280:	4b02      	ldr	r3, [pc, #8]	; (801a28c <calloc+0xc>)
 801a282:	460a      	mov	r2, r1
 801a284:	4601      	mov	r1, r0
 801a286:	6818      	ldr	r0, [r3, #0]
 801a288:	f000 b882 	b.w	801a390 <_calloc_r>
 801a28c:	20000250 	.word	0x20000250

0801a290 <__errno>:
 801a290:	4b01      	ldr	r3, [pc, #4]	; (801a298 <__errno+0x8>)
 801a292:	6818      	ldr	r0, [r3, #0]
 801a294:	4770      	bx	lr
 801a296:	bf00      	nop
 801a298:	20000250 	.word	0x20000250

0801a29c <fiprintf>:
 801a29c:	b40e      	push	{r1, r2, r3}
 801a29e:	b503      	push	{r0, r1, lr}
 801a2a0:	4601      	mov	r1, r0
 801a2a2:	ab03      	add	r3, sp, #12
 801a2a4:	4805      	ldr	r0, [pc, #20]	; (801a2bc <fiprintf+0x20>)
 801a2a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2aa:	6800      	ldr	r0, [r0, #0]
 801a2ac:	9301      	str	r3, [sp, #4]
 801a2ae:	f000 f98f 	bl	801a5d0 <_vfiprintf_r>
 801a2b2:	b002      	add	sp, #8
 801a2b4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a2b8:	b003      	add	sp, #12
 801a2ba:	4770      	bx	lr
 801a2bc:	20000250 	.word	0x20000250

0801a2c0 <__libc_init_array>:
 801a2c0:	b570      	push	{r4, r5, r6, lr}
 801a2c2:	4d0d      	ldr	r5, [pc, #52]	; (801a2f8 <__libc_init_array+0x38>)
 801a2c4:	4c0d      	ldr	r4, [pc, #52]	; (801a2fc <__libc_init_array+0x3c>)
 801a2c6:	1b64      	subs	r4, r4, r5
 801a2c8:	10a4      	asrs	r4, r4, #2
 801a2ca:	2600      	movs	r6, #0
 801a2cc:	42a6      	cmp	r6, r4
 801a2ce:	d109      	bne.n	801a2e4 <__libc_init_array+0x24>
 801a2d0:	4d0b      	ldr	r5, [pc, #44]	; (801a300 <__libc_init_array+0x40>)
 801a2d2:	4c0c      	ldr	r4, [pc, #48]	; (801a304 <__libc_init_array+0x44>)
 801a2d4:	f002 ff60 	bl	801d198 <_init>
 801a2d8:	1b64      	subs	r4, r4, r5
 801a2da:	10a4      	asrs	r4, r4, #2
 801a2dc:	2600      	movs	r6, #0
 801a2de:	42a6      	cmp	r6, r4
 801a2e0:	d105      	bne.n	801a2ee <__libc_init_array+0x2e>
 801a2e2:	bd70      	pop	{r4, r5, r6, pc}
 801a2e4:	f855 3b04 	ldr.w	r3, [r5], #4
 801a2e8:	4798      	blx	r3
 801a2ea:	3601      	adds	r6, #1
 801a2ec:	e7ee      	b.n	801a2cc <__libc_init_array+0xc>
 801a2ee:	f855 3b04 	ldr.w	r3, [r5], #4
 801a2f2:	4798      	blx	r3
 801a2f4:	3601      	adds	r6, #1
 801a2f6:	e7f2      	b.n	801a2de <__libc_init_array+0x1e>
 801a2f8:	0802044c 	.word	0x0802044c
 801a2fc:	0802044c 	.word	0x0802044c
 801a300:	0802044c 	.word	0x0802044c
 801a304:	08020454 	.word	0x08020454

0801a308 <__retarget_lock_init_recursive>:
 801a308:	4770      	bx	lr

0801a30a <__retarget_lock_acquire_recursive>:
 801a30a:	4770      	bx	lr

0801a30c <__retarget_lock_release_recursive>:
 801a30c:	4770      	bx	lr
	...

0801a310 <malloc>:
 801a310:	4b02      	ldr	r3, [pc, #8]	; (801a31c <malloc+0xc>)
 801a312:	4601      	mov	r1, r0
 801a314:	6818      	ldr	r0, [r3, #0]
 801a316:	f000 b8bd 	b.w	801a494 <_malloc_r>
 801a31a:	bf00      	nop
 801a31c:	20000250 	.word	0x20000250

0801a320 <free>:
 801a320:	4b02      	ldr	r3, [pc, #8]	; (801a32c <free+0xc>)
 801a322:	4601      	mov	r1, r0
 801a324:	6818      	ldr	r0, [r3, #0]
 801a326:	f000 b849 	b.w	801a3bc <_free_r>
 801a32a:	bf00      	nop
 801a32c:	20000250 	.word	0x20000250

0801a330 <memcpy>:
 801a330:	440a      	add	r2, r1
 801a332:	4291      	cmp	r1, r2
 801a334:	f100 33ff 	add.w	r3, r0, #4294967295
 801a338:	d100      	bne.n	801a33c <memcpy+0xc>
 801a33a:	4770      	bx	lr
 801a33c:	b510      	push	{r4, lr}
 801a33e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a342:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a346:	4291      	cmp	r1, r2
 801a348:	d1f9      	bne.n	801a33e <memcpy+0xe>
 801a34a:	bd10      	pop	{r4, pc}

0801a34c <memmove>:
 801a34c:	4288      	cmp	r0, r1
 801a34e:	b510      	push	{r4, lr}
 801a350:	eb01 0402 	add.w	r4, r1, r2
 801a354:	d902      	bls.n	801a35c <memmove+0x10>
 801a356:	4284      	cmp	r4, r0
 801a358:	4623      	mov	r3, r4
 801a35a:	d807      	bhi.n	801a36c <memmove+0x20>
 801a35c:	1e43      	subs	r3, r0, #1
 801a35e:	42a1      	cmp	r1, r4
 801a360:	d008      	beq.n	801a374 <memmove+0x28>
 801a362:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a366:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a36a:	e7f8      	b.n	801a35e <memmove+0x12>
 801a36c:	4402      	add	r2, r0
 801a36e:	4601      	mov	r1, r0
 801a370:	428a      	cmp	r2, r1
 801a372:	d100      	bne.n	801a376 <memmove+0x2a>
 801a374:	bd10      	pop	{r4, pc}
 801a376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a37a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a37e:	e7f7      	b.n	801a370 <memmove+0x24>

0801a380 <memset>:
 801a380:	4402      	add	r2, r0
 801a382:	4603      	mov	r3, r0
 801a384:	4293      	cmp	r3, r2
 801a386:	d100      	bne.n	801a38a <memset+0xa>
 801a388:	4770      	bx	lr
 801a38a:	f803 1b01 	strb.w	r1, [r3], #1
 801a38e:	e7f9      	b.n	801a384 <memset+0x4>

0801a390 <_calloc_r>:
 801a390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a392:	fba1 2402 	umull	r2, r4, r1, r2
 801a396:	b94c      	cbnz	r4, 801a3ac <_calloc_r+0x1c>
 801a398:	4611      	mov	r1, r2
 801a39a:	9201      	str	r2, [sp, #4]
 801a39c:	f000 f87a 	bl	801a494 <_malloc_r>
 801a3a0:	9a01      	ldr	r2, [sp, #4]
 801a3a2:	4605      	mov	r5, r0
 801a3a4:	b930      	cbnz	r0, 801a3b4 <_calloc_r+0x24>
 801a3a6:	4628      	mov	r0, r5
 801a3a8:	b003      	add	sp, #12
 801a3aa:	bd30      	pop	{r4, r5, pc}
 801a3ac:	220c      	movs	r2, #12
 801a3ae:	6002      	str	r2, [r0, #0]
 801a3b0:	2500      	movs	r5, #0
 801a3b2:	e7f8      	b.n	801a3a6 <_calloc_r+0x16>
 801a3b4:	4621      	mov	r1, r4
 801a3b6:	f7ff ffe3 	bl	801a380 <memset>
 801a3ba:	e7f4      	b.n	801a3a6 <_calloc_r+0x16>

0801a3bc <_free_r>:
 801a3bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a3be:	2900      	cmp	r1, #0
 801a3c0:	d044      	beq.n	801a44c <_free_r+0x90>
 801a3c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a3c6:	9001      	str	r0, [sp, #4]
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	f1a1 0404 	sub.w	r4, r1, #4
 801a3ce:	bfb8      	it	lt
 801a3d0:	18e4      	addlt	r4, r4, r3
 801a3d2:	f002 f907 	bl	801c5e4 <__malloc_lock>
 801a3d6:	4a1e      	ldr	r2, [pc, #120]	; (801a450 <_free_r+0x94>)
 801a3d8:	9801      	ldr	r0, [sp, #4]
 801a3da:	6813      	ldr	r3, [r2, #0]
 801a3dc:	b933      	cbnz	r3, 801a3ec <_free_r+0x30>
 801a3de:	6063      	str	r3, [r4, #4]
 801a3e0:	6014      	str	r4, [r2, #0]
 801a3e2:	b003      	add	sp, #12
 801a3e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a3e8:	f002 b902 	b.w	801c5f0 <__malloc_unlock>
 801a3ec:	42a3      	cmp	r3, r4
 801a3ee:	d908      	bls.n	801a402 <_free_r+0x46>
 801a3f0:	6825      	ldr	r5, [r4, #0]
 801a3f2:	1961      	adds	r1, r4, r5
 801a3f4:	428b      	cmp	r3, r1
 801a3f6:	bf01      	itttt	eq
 801a3f8:	6819      	ldreq	r1, [r3, #0]
 801a3fa:	685b      	ldreq	r3, [r3, #4]
 801a3fc:	1949      	addeq	r1, r1, r5
 801a3fe:	6021      	streq	r1, [r4, #0]
 801a400:	e7ed      	b.n	801a3de <_free_r+0x22>
 801a402:	461a      	mov	r2, r3
 801a404:	685b      	ldr	r3, [r3, #4]
 801a406:	b10b      	cbz	r3, 801a40c <_free_r+0x50>
 801a408:	42a3      	cmp	r3, r4
 801a40a:	d9fa      	bls.n	801a402 <_free_r+0x46>
 801a40c:	6811      	ldr	r1, [r2, #0]
 801a40e:	1855      	adds	r5, r2, r1
 801a410:	42a5      	cmp	r5, r4
 801a412:	d10b      	bne.n	801a42c <_free_r+0x70>
 801a414:	6824      	ldr	r4, [r4, #0]
 801a416:	4421      	add	r1, r4
 801a418:	1854      	adds	r4, r2, r1
 801a41a:	42a3      	cmp	r3, r4
 801a41c:	6011      	str	r1, [r2, #0]
 801a41e:	d1e0      	bne.n	801a3e2 <_free_r+0x26>
 801a420:	681c      	ldr	r4, [r3, #0]
 801a422:	685b      	ldr	r3, [r3, #4]
 801a424:	6053      	str	r3, [r2, #4]
 801a426:	4421      	add	r1, r4
 801a428:	6011      	str	r1, [r2, #0]
 801a42a:	e7da      	b.n	801a3e2 <_free_r+0x26>
 801a42c:	d902      	bls.n	801a434 <_free_r+0x78>
 801a42e:	230c      	movs	r3, #12
 801a430:	6003      	str	r3, [r0, #0]
 801a432:	e7d6      	b.n	801a3e2 <_free_r+0x26>
 801a434:	6825      	ldr	r5, [r4, #0]
 801a436:	1961      	adds	r1, r4, r5
 801a438:	428b      	cmp	r3, r1
 801a43a:	bf04      	itt	eq
 801a43c:	6819      	ldreq	r1, [r3, #0]
 801a43e:	685b      	ldreq	r3, [r3, #4]
 801a440:	6063      	str	r3, [r4, #4]
 801a442:	bf04      	itt	eq
 801a444:	1949      	addeq	r1, r1, r5
 801a446:	6021      	streq	r1, [r4, #0]
 801a448:	6054      	str	r4, [r2, #4]
 801a44a:	e7ca      	b.n	801a3e2 <_free_r+0x26>
 801a44c:	b003      	add	sp, #12
 801a44e:	bd30      	pop	{r4, r5, pc}
 801a450:	200026c8 	.word	0x200026c8

0801a454 <sbrk_aligned>:
 801a454:	b570      	push	{r4, r5, r6, lr}
 801a456:	4e0e      	ldr	r6, [pc, #56]	; (801a490 <sbrk_aligned+0x3c>)
 801a458:	460c      	mov	r4, r1
 801a45a:	6831      	ldr	r1, [r6, #0]
 801a45c:	4605      	mov	r5, r0
 801a45e:	b911      	cbnz	r1, 801a466 <sbrk_aligned+0x12>
 801a460:	f000 fede 	bl	801b220 <_sbrk_r>
 801a464:	6030      	str	r0, [r6, #0]
 801a466:	4621      	mov	r1, r4
 801a468:	4628      	mov	r0, r5
 801a46a:	f000 fed9 	bl	801b220 <_sbrk_r>
 801a46e:	1c43      	adds	r3, r0, #1
 801a470:	d00a      	beq.n	801a488 <sbrk_aligned+0x34>
 801a472:	1cc4      	adds	r4, r0, #3
 801a474:	f024 0403 	bic.w	r4, r4, #3
 801a478:	42a0      	cmp	r0, r4
 801a47a:	d007      	beq.n	801a48c <sbrk_aligned+0x38>
 801a47c:	1a21      	subs	r1, r4, r0
 801a47e:	4628      	mov	r0, r5
 801a480:	f000 fece 	bl	801b220 <_sbrk_r>
 801a484:	3001      	adds	r0, #1
 801a486:	d101      	bne.n	801a48c <sbrk_aligned+0x38>
 801a488:	f04f 34ff 	mov.w	r4, #4294967295
 801a48c:	4620      	mov	r0, r4
 801a48e:	bd70      	pop	{r4, r5, r6, pc}
 801a490:	200026cc 	.word	0x200026cc

0801a494 <_malloc_r>:
 801a494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a498:	1ccd      	adds	r5, r1, #3
 801a49a:	f025 0503 	bic.w	r5, r5, #3
 801a49e:	3508      	adds	r5, #8
 801a4a0:	2d0c      	cmp	r5, #12
 801a4a2:	bf38      	it	cc
 801a4a4:	250c      	movcc	r5, #12
 801a4a6:	2d00      	cmp	r5, #0
 801a4a8:	4607      	mov	r7, r0
 801a4aa:	db01      	blt.n	801a4b0 <_malloc_r+0x1c>
 801a4ac:	42a9      	cmp	r1, r5
 801a4ae:	d905      	bls.n	801a4bc <_malloc_r+0x28>
 801a4b0:	230c      	movs	r3, #12
 801a4b2:	603b      	str	r3, [r7, #0]
 801a4b4:	2600      	movs	r6, #0
 801a4b6:	4630      	mov	r0, r6
 801a4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4bc:	4e2e      	ldr	r6, [pc, #184]	; (801a578 <_malloc_r+0xe4>)
 801a4be:	f002 f891 	bl	801c5e4 <__malloc_lock>
 801a4c2:	6833      	ldr	r3, [r6, #0]
 801a4c4:	461c      	mov	r4, r3
 801a4c6:	bb34      	cbnz	r4, 801a516 <_malloc_r+0x82>
 801a4c8:	4629      	mov	r1, r5
 801a4ca:	4638      	mov	r0, r7
 801a4cc:	f7ff ffc2 	bl	801a454 <sbrk_aligned>
 801a4d0:	1c43      	adds	r3, r0, #1
 801a4d2:	4604      	mov	r4, r0
 801a4d4:	d14d      	bne.n	801a572 <_malloc_r+0xde>
 801a4d6:	6834      	ldr	r4, [r6, #0]
 801a4d8:	4626      	mov	r6, r4
 801a4da:	2e00      	cmp	r6, #0
 801a4dc:	d140      	bne.n	801a560 <_malloc_r+0xcc>
 801a4de:	6823      	ldr	r3, [r4, #0]
 801a4e0:	4631      	mov	r1, r6
 801a4e2:	4638      	mov	r0, r7
 801a4e4:	eb04 0803 	add.w	r8, r4, r3
 801a4e8:	f000 fe9a 	bl	801b220 <_sbrk_r>
 801a4ec:	4580      	cmp	r8, r0
 801a4ee:	d13a      	bne.n	801a566 <_malloc_r+0xd2>
 801a4f0:	6821      	ldr	r1, [r4, #0]
 801a4f2:	3503      	adds	r5, #3
 801a4f4:	1a6d      	subs	r5, r5, r1
 801a4f6:	f025 0503 	bic.w	r5, r5, #3
 801a4fa:	3508      	adds	r5, #8
 801a4fc:	2d0c      	cmp	r5, #12
 801a4fe:	bf38      	it	cc
 801a500:	250c      	movcc	r5, #12
 801a502:	4629      	mov	r1, r5
 801a504:	4638      	mov	r0, r7
 801a506:	f7ff ffa5 	bl	801a454 <sbrk_aligned>
 801a50a:	3001      	adds	r0, #1
 801a50c:	d02b      	beq.n	801a566 <_malloc_r+0xd2>
 801a50e:	6823      	ldr	r3, [r4, #0]
 801a510:	442b      	add	r3, r5
 801a512:	6023      	str	r3, [r4, #0]
 801a514:	e00e      	b.n	801a534 <_malloc_r+0xa0>
 801a516:	6822      	ldr	r2, [r4, #0]
 801a518:	1b52      	subs	r2, r2, r5
 801a51a:	d41e      	bmi.n	801a55a <_malloc_r+0xc6>
 801a51c:	2a0b      	cmp	r2, #11
 801a51e:	d916      	bls.n	801a54e <_malloc_r+0xba>
 801a520:	1961      	adds	r1, r4, r5
 801a522:	42a3      	cmp	r3, r4
 801a524:	6025      	str	r5, [r4, #0]
 801a526:	bf18      	it	ne
 801a528:	6059      	strne	r1, [r3, #4]
 801a52a:	6863      	ldr	r3, [r4, #4]
 801a52c:	bf08      	it	eq
 801a52e:	6031      	streq	r1, [r6, #0]
 801a530:	5162      	str	r2, [r4, r5]
 801a532:	604b      	str	r3, [r1, #4]
 801a534:	4638      	mov	r0, r7
 801a536:	f104 060b 	add.w	r6, r4, #11
 801a53a:	f002 f859 	bl	801c5f0 <__malloc_unlock>
 801a53e:	f026 0607 	bic.w	r6, r6, #7
 801a542:	1d23      	adds	r3, r4, #4
 801a544:	1af2      	subs	r2, r6, r3
 801a546:	d0b6      	beq.n	801a4b6 <_malloc_r+0x22>
 801a548:	1b9b      	subs	r3, r3, r6
 801a54a:	50a3      	str	r3, [r4, r2]
 801a54c:	e7b3      	b.n	801a4b6 <_malloc_r+0x22>
 801a54e:	6862      	ldr	r2, [r4, #4]
 801a550:	42a3      	cmp	r3, r4
 801a552:	bf0c      	ite	eq
 801a554:	6032      	streq	r2, [r6, #0]
 801a556:	605a      	strne	r2, [r3, #4]
 801a558:	e7ec      	b.n	801a534 <_malloc_r+0xa0>
 801a55a:	4623      	mov	r3, r4
 801a55c:	6864      	ldr	r4, [r4, #4]
 801a55e:	e7b2      	b.n	801a4c6 <_malloc_r+0x32>
 801a560:	4634      	mov	r4, r6
 801a562:	6876      	ldr	r6, [r6, #4]
 801a564:	e7b9      	b.n	801a4da <_malloc_r+0x46>
 801a566:	230c      	movs	r3, #12
 801a568:	603b      	str	r3, [r7, #0]
 801a56a:	4638      	mov	r0, r7
 801a56c:	f002 f840 	bl	801c5f0 <__malloc_unlock>
 801a570:	e7a1      	b.n	801a4b6 <_malloc_r+0x22>
 801a572:	6025      	str	r5, [r4, #0]
 801a574:	e7de      	b.n	801a534 <_malloc_r+0xa0>
 801a576:	bf00      	nop
 801a578:	200026c8 	.word	0x200026c8

0801a57c <__sfputc_r>:
 801a57c:	6893      	ldr	r3, [r2, #8]
 801a57e:	3b01      	subs	r3, #1
 801a580:	2b00      	cmp	r3, #0
 801a582:	b410      	push	{r4}
 801a584:	6093      	str	r3, [r2, #8]
 801a586:	da08      	bge.n	801a59a <__sfputc_r+0x1e>
 801a588:	6994      	ldr	r4, [r2, #24]
 801a58a:	42a3      	cmp	r3, r4
 801a58c:	db01      	blt.n	801a592 <__sfputc_r+0x16>
 801a58e:	290a      	cmp	r1, #10
 801a590:	d103      	bne.n	801a59a <__sfputc_r+0x1e>
 801a592:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a596:	f000 beb7 	b.w	801b308 <__swbuf_r>
 801a59a:	6813      	ldr	r3, [r2, #0]
 801a59c:	1c58      	adds	r0, r3, #1
 801a59e:	6010      	str	r0, [r2, #0]
 801a5a0:	7019      	strb	r1, [r3, #0]
 801a5a2:	4608      	mov	r0, r1
 801a5a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a5a8:	4770      	bx	lr

0801a5aa <__sfputs_r>:
 801a5aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5ac:	4606      	mov	r6, r0
 801a5ae:	460f      	mov	r7, r1
 801a5b0:	4614      	mov	r4, r2
 801a5b2:	18d5      	adds	r5, r2, r3
 801a5b4:	42ac      	cmp	r4, r5
 801a5b6:	d101      	bne.n	801a5bc <__sfputs_r+0x12>
 801a5b8:	2000      	movs	r0, #0
 801a5ba:	e007      	b.n	801a5cc <__sfputs_r+0x22>
 801a5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a5c0:	463a      	mov	r2, r7
 801a5c2:	4630      	mov	r0, r6
 801a5c4:	f7ff ffda 	bl	801a57c <__sfputc_r>
 801a5c8:	1c43      	adds	r3, r0, #1
 801a5ca:	d1f3      	bne.n	801a5b4 <__sfputs_r+0xa>
 801a5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a5d0 <_vfiprintf_r>:
 801a5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5d4:	460d      	mov	r5, r1
 801a5d6:	b09d      	sub	sp, #116	; 0x74
 801a5d8:	4614      	mov	r4, r2
 801a5da:	4698      	mov	r8, r3
 801a5dc:	4606      	mov	r6, r0
 801a5de:	b118      	cbz	r0, 801a5e8 <_vfiprintf_r+0x18>
 801a5e0:	6983      	ldr	r3, [r0, #24]
 801a5e2:	b90b      	cbnz	r3, 801a5e8 <_vfiprintf_r+0x18>
 801a5e4:	f001 fee4 	bl	801c3b0 <__sinit>
 801a5e8:	4b89      	ldr	r3, [pc, #548]	; (801a810 <_vfiprintf_r+0x240>)
 801a5ea:	429d      	cmp	r5, r3
 801a5ec:	d11b      	bne.n	801a626 <_vfiprintf_r+0x56>
 801a5ee:	6875      	ldr	r5, [r6, #4]
 801a5f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a5f2:	07d9      	lsls	r1, r3, #31
 801a5f4:	d405      	bmi.n	801a602 <_vfiprintf_r+0x32>
 801a5f6:	89ab      	ldrh	r3, [r5, #12]
 801a5f8:	059a      	lsls	r2, r3, #22
 801a5fa:	d402      	bmi.n	801a602 <_vfiprintf_r+0x32>
 801a5fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a5fe:	f7ff fe84 	bl	801a30a <__retarget_lock_acquire_recursive>
 801a602:	89ab      	ldrh	r3, [r5, #12]
 801a604:	071b      	lsls	r3, r3, #28
 801a606:	d501      	bpl.n	801a60c <_vfiprintf_r+0x3c>
 801a608:	692b      	ldr	r3, [r5, #16]
 801a60a:	b9eb      	cbnz	r3, 801a648 <_vfiprintf_r+0x78>
 801a60c:	4629      	mov	r1, r5
 801a60e:	4630      	mov	r0, r6
 801a610:	f000 fecc 	bl	801b3ac <__swsetup_r>
 801a614:	b1c0      	cbz	r0, 801a648 <_vfiprintf_r+0x78>
 801a616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a618:	07dc      	lsls	r4, r3, #31
 801a61a:	d50e      	bpl.n	801a63a <_vfiprintf_r+0x6a>
 801a61c:	f04f 30ff 	mov.w	r0, #4294967295
 801a620:	b01d      	add	sp, #116	; 0x74
 801a622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a626:	4b7b      	ldr	r3, [pc, #492]	; (801a814 <_vfiprintf_r+0x244>)
 801a628:	429d      	cmp	r5, r3
 801a62a:	d101      	bne.n	801a630 <_vfiprintf_r+0x60>
 801a62c:	68b5      	ldr	r5, [r6, #8]
 801a62e:	e7df      	b.n	801a5f0 <_vfiprintf_r+0x20>
 801a630:	4b79      	ldr	r3, [pc, #484]	; (801a818 <_vfiprintf_r+0x248>)
 801a632:	429d      	cmp	r5, r3
 801a634:	bf08      	it	eq
 801a636:	68f5      	ldreq	r5, [r6, #12]
 801a638:	e7da      	b.n	801a5f0 <_vfiprintf_r+0x20>
 801a63a:	89ab      	ldrh	r3, [r5, #12]
 801a63c:	0598      	lsls	r0, r3, #22
 801a63e:	d4ed      	bmi.n	801a61c <_vfiprintf_r+0x4c>
 801a640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a642:	f7ff fe63 	bl	801a30c <__retarget_lock_release_recursive>
 801a646:	e7e9      	b.n	801a61c <_vfiprintf_r+0x4c>
 801a648:	2300      	movs	r3, #0
 801a64a:	9309      	str	r3, [sp, #36]	; 0x24
 801a64c:	2320      	movs	r3, #32
 801a64e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a652:	f8cd 800c 	str.w	r8, [sp, #12]
 801a656:	2330      	movs	r3, #48	; 0x30
 801a658:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a81c <_vfiprintf_r+0x24c>
 801a65c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a660:	f04f 0901 	mov.w	r9, #1
 801a664:	4623      	mov	r3, r4
 801a666:	469a      	mov	sl, r3
 801a668:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a66c:	b10a      	cbz	r2, 801a672 <_vfiprintf_r+0xa2>
 801a66e:	2a25      	cmp	r2, #37	; 0x25
 801a670:	d1f9      	bne.n	801a666 <_vfiprintf_r+0x96>
 801a672:	ebba 0b04 	subs.w	fp, sl, r4
 801a676:	d00b      	beq.n	801a690 <_vfiprintf_r+0xc0>
 801a678:	465b      	mov	r3, fp
 801a67a:	4622      	mov	r2, r4
 801a67c:	4629      	mov	r1, r5
 801a67e:	4630      	mov	r0, r6
 801a680:	f7ff ff93 	bl	801a5aa <__sfputs_r>
 801a684:	3001      	adds	r0, #1
 801a686:	f000 80aa 	beq.w	801a7de <_vfiprintf_r+0x20e>
 801a68a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a68c:	445a      	add	r2, fp
 801a68e:	9209      	str	r2, [sp, #36]	; 0x24
 801a690:	f89a 3000 	ldrb.w	r3, [sl]
 801a694:	2b00      	cmp	r3, #0
 801a696:	f000 80a2 	beq.w	801a7de <_vfiprintf_r+0x20e>
 801a69a:	2300      	movs	r3, #0
 801a69c:	f04f 32ff 	mov.w	r2, #4294967295
 801a6a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a6a4:	f10a 0a01 	add.w	sl, sl, #1
 801a6a8:	9304      	str	r3, [sp, #16]
 801a6aa:	9307      	str	r3, [sp, #28]
 801a6ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a6b0:	931a      	str	r3, [sp, #104]	; 0x68
 801a6b2:	4654      	mov	r4, sl
 801a6b4:	2205      	movs	r2, #5
 801a6b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a6ba:	4858      	ldr	r0, [pc, #352]	; (801a81c <_vfiprintf_r+0x24c>)
 801a6bc:	f7e5 fd88 	bl	80001d0 <memchr>
 801a6c0:	9a04      	ldr	r2, [sp, #16]
 801a6c2:	b9d8      	cbnz	r0, 801a6fc <_vfiprintf_r+0x12c>
 801a6c4:	06d1      	lsls	r1, r2, #27
 801a6c6:	bf44      	itt	mi
 801a6c8:	2320      	movmi	r3, #32
 801a6ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a6ce:	0713      	lsls	r3, r2, #28
 801a6d0:	bf44      	itt	mi
 801a6d2:	232b      	movmi	r3, #43	; 0x2b
 801a6d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a6d8:	f89a 3000 	ldrb.w	r3, [sl]
 801a6dc:	2b2a      	cmp	r3, #42	; 0x2a
 801a6de:	d015      	beq.n	801a70c <_vfiprintf_r+0x13c>
 801a6e0:	9a07      	ldr	r2, [sp, #28]
 801a6e2:	4654      	mov	r4, sl
 801a6e4:	2000      	movs	r0, #0
 801a6e6:	f04f 0c0a 	mov.w	ip, #10
 801a6ea:	4621      	mov	r1, r4
 801a6ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a6f0:	3b30      	subs	r3, #48	; 0x30
 801a6f2:	2b09      	cmp	r3, #9
 801a6f4:	d94e      	bls.n	801a794 <_vfiprintf_r+0x1c4>
 801a6f6:	b1b0      	cbz	r0, 801a726 <_vfiprintf_r+0x156>
 801a6f8:	9207      	str	r2, [sp, #28]
 801a6fa:	e014      	b.n	801a726 <_vfiprintf_r+0x156>
 801a6fc:	eba0 0308 	sub.w	r3, r0, r8
 801a700:	fa09 f303 	lsl.w	r3, r9, r3
 801a704:	4313      	orrs	r3, r2
 801a706:	9304      	str	r3, [sp, #16]
 801a708:	46a2      	mov	sl, r4
 801a70a:	e7d2      	b.n	801a6b2 <_vfiprintf_r+0xe2>
 801a70c:	9b03      	ldr	r3, [sp, #12]
 801a70e:	1d19      	adds	r1, r3, #4
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	9103      	str	r1, [sp, #12]
 801a714:	2b00      	cmp	r3, #0
 801a716:	bfbb      	ittet	lt
 801a718:	425b      	neglt	r3, r3
 801a71a:	f042 0202 	orrlt.w	r2, r2, #2
 801a71e:	9307      	strge	r3, [sp, #28]
 801a720:	9307      	strlt	r3, [sp, #28]
 801a722:	bfb8      	it	lt
 801a724:	9204      	strlt	r2, [sp, #16]
 801a726:	7823      	ldrb	r3, [r4, #0]
 801a728:	2b2e      	cmp	r3, #46	; 0x2e
 801a72a:	d10c      	bne.n	801a746 <_vfiprintf_r+0x176>
 801a72c:	7863      	ldrb	r3, [r4, #1]
 801a72e:	2b2a      	cmp	r3, #42	; 0x2a
 801a730:	d135      	bne.n	801a79e <_vfiprintf_r+0x1ce>
 801a732:	9b03      	ldr	r3, [sp, #12]
 801a734:	1d1a      	adds	r2, r3, #4
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	9203      	str	r2, [sp, #12]
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	bfb8      	it	lt
 801a73e:	f04f 33ff 	movlt.w	r3, #4294967295
 801a742:	3402      	adds	r4, #2
 801a744:	9305      	str	r3, [sp, #20]
 801a746:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a82c <_vfiprintf_r+0x25c>
 801a74a:	7821      	ldrb	r1, [r4, #0]
 801a74c:	2203      	movs	r2, #3
 801a74e:	4650      	mov	r0, sl
 801a750:	f7e5 fd3e 	bl	80001d0 <memchr>
 801a754:	b140      	cbz	r0, 801a768 <_vfiprintf_r+0x198>
 801a756:	2340      	movs	r3, #64	; 0x40
 801a758:	eba0 000a 	sub.w	r0, r0, sl
 801a75c:	fa03 f000 	lsl.w	r0, r3, r0
 801a760:	9b04      	ldr	r3, [sp, #16]
 801a762:	4303      	orrs	r3, r0
 801a764:	3401      	adds	r4, #1
 801a766:	9304      	str	r3, [sp, #16]
 801a768:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a76c:	482c      	ldr	r0, [pc, #176]	; (801a820 <_vfiprintf_r+0x250>)
 801a76e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a772:	2206      	movs	r2, #6
 801a774:	f7e5 fd2c 	bl	80001d0 <memchr>
 801a778:	2800      	cmp	r0, #0
 801a77a:	d03f      	beq.n	801a7fc <_vfiprintf_r+0x22c>
 801a77c:	4b29      	ldr	r3, [pc, #164]	; (801a824 <_vfiprintf_r+0x254>)
 801a77e:	bb1b      	cbnz	r3, 801a7c8 <_vfiprintf_r+0x1f8>
 801a780:	9b03      	ldr	r3, [sp, #12]
 801a782:	3307      	adds	r3, #7
 801a784:	f023 0307 	bic.w	r3, r3, #7
 801a788:	3308      	adds	r3, #8
 801a78a:	9303      	str	r3, [sp, #12]
 801a78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a78e:	443b      	add	r3, r7
 801a790:	9309      	str	r3, [sp, #36]	; 0x24
 801a792:	e767      	b.n	801a664 <_vfiprintf_r+0x94>
 801a794:	fb0c 3202 	mla	r2, ip, r2, r3
 801a798:	460c      	mov	r4, r1
 801a79a:	2001      	movs	r0, #1
 801a79c:	e7a5      	b.n	801a6ea <_vfiprintf_r+0x11a>
 801a79e:	2300      	movs	r3, #0
 801a7a0:	3401      	adds	r4, #1
 801a7a2:	9305      	str	r3, [sp, #20]
 801a7a4:	4619      	mov	r1, r3
 801a7a6:	f04f 0c0a 	mov.w	ip, #10
 801a7aa:	4620      	mov	r0, r4
 801a7ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a7b0:	3a30      	subs	r2, #48	; 0x30
 801a7b2:	2a09      	cmp	r2, #9
 801a7b4:	d903      	bls.n	801a7be <_vfiprintf_r+0x1ee>
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d0c5      	beq.n	801a746 <_vfiprintf_r+0x176>
 801a7ba:	9105      	str	r1, [sp, #20]
 801a7bc:	e7c3      	b.n	801a746 <_vfiprintf_r+0x176>
 801a7be:	fb0c 2101 	mla	r1, ip, r1, r2
 801a7c2:	4604      	mov	r4, r0
 801a7c4:	2301      	movs	r3, #1
 801a7c6:	e7f0      	b.n	801a7aa <_vfiprintf_r+0x1da>
 801a7c8:	ab03      	add	r3, sp, #12
 801a7ca:	9300      	str	r3, [sp, #0]
 801a7cc:	462a      	mov	r2, r5
 801a7ce:	4b16      	ldr	r3, [pc, #88]	; (801a828 <_vfiprintf_r+0x258>)
 801a7d0:	a904      	add	r1, sp, #16
 801a7d2:	4630      	mov	r0, r6
 801a7d4:	f000 f8cc 	bl	801a970 <_printf_float>
 801a7d8:	4607      	mov	r7, r0
 801a7da:	1c78      	adds	r0, r7, #1
 801a7dc:	d1d6      	bne.n	801a78c <_vfiprintf_r+0x1bc>
 801a7de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a7e0:	07d9      	lsls	r1, r3, #31
 801a7e2:	d405      	bmi.n	801a7f0 <_vfiprintf_r+0x220>
 801a7e4:	89ab      	ldrh	r3, [r5, #12]
 801a7e6:	059a      	lsls	r2, r3, #22
 801a7e8:	d402      	bmi.n	801a7f0 <_vfiprintf_r+0x220>
 801a7ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a7ec:	f7ff fd8e 	bl	801a30c <__retarget_lock_release_recursive>
 801a7f0:	89ab      	ldrh	r3, [r5, #12]
 801a7f2:	065b      	lsls	r3, r3, #25
 801a7f4:	f53f af12 	bmi.w	801a61c <_vfiprintf_r+0x4c>
 801a7f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a7fa:	e711      	b.n	801a620 <_vfiprintf_r+0x50>
 801a7fc:	ab03      	add	r3, sp, #12
 801a7fe:	9300      	str	r3, [sp, #0]
 801a800:	462a      	mov	r2, r5
 801a802:	4b09      	ldr	r3, [pc, #36]	; (801a828 <_vfiprintf_r+0x258>)
 801a804:	a904      	add	r1, sp, #16
 801a806:	4630      	mov	r0, r6
 801a808:	f000 fb56 	bl	801aeb8 <_printf_i>
 801a80c:	e7e4      	b.n	801a7d8 <_vfiprintf_r+0x208>
 801a80e:	bf00      	nop
 801a810:	080202a0 	.word	0x080202a0
 801a814:	080202c0 	.word	0x080202c0
 801a818:	08020280 	.word	0x08020280
 801a81c:	080200a8 	.word	0x080200a8
 801a820:	080200b2 	.word	0x080200b2
 801a824:	0801a971 	.word	0x0801a971
 801a828:	0801a5ab 	.word	0x0801a5ab
 801a82c:	080200ae 	.word	0x080200ae

0801a830 <__cvt>:
 801a830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a834:	ec55 4b10 	vmov	r4, r5, d0
 801a838:	2d00      	cmp	r5, #0
 801a83a:	460e      	mov	r6, r1
 801a83c:	4619      	mov	r1, r3
 801a83e:	462b      	mov	r3, r5
 801a840:	bfbb      	ittet	lt
 801a842:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a846:	461d      	movlt	r5, r3
 801a848:	2300      	movge	r3, #0
 801a84a:	232d      	movlt	r3, #45	; 0x2d
 801a84c:	700b      	strb	r3, [r1, #0]
 801a84e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a850:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a854:	4691      	mov	r9, r2
 801a856:	f023 0820 	bic.w	r8, r3, #32
 801a85a:	bfbc      	itt	lt
 801a85c:	4622      	movlt	r2, r4
 801a85e:	4614      	movlt	r4, r2
 801a860:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a864:	d005      	beq.n	801a872 <__cvt+0x42>
 801a866:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a86a:	d100      	bne.n	801a86e <__cvt+0x3e>
 801a86c:	3601      	adds	r6, #1
 801a86e:	2102      	movs	r1, #2
 801a870:	e000      	b.n	801a874 <__cvt+0x44>
 801a872:	2103      	movs	r1, #3
 801a874:	ab03      	add	r3, sp, #12
 801a876:	9301      	str	r3, [sp, #4]
 801a878:	ab02      	add	r3, sp, #8
 801a87a:	9300      	str	r3, [sp, #0]
 801a87c:	ec45 4b10 	vmov	d0, r4, r5
 801a880:	4653      	mov	r3, sl
 801a882:	4632      	mov	r2, r6
 801a884:	f000 fe8c 	bl	801b5a0 <_dtoa_r>
 801a888:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a88c:	4607      	mov	r7, r0
 801a88e:	d102      	bne.n	801a896 <__cvt+0x66>
 801a890:	f019 0f01 	tst.w	r9, #1
 801a894:	d022      	beq.n	801a8dc <__cvt+0xac>
 801a896:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a89a:	eb07 0906 	add.w	r9, r7, r6
 801a89e:	d110      	bne.n	801a8c2 <__cvt+0x92>
 801a8a0:	783b      	ldrb	r3, [r7, #0]
 801a8a2:	2b30      	cmp	r3, #48	; 0x30
 801a8a4:	d10a      	bne.n	801a8bc <__cvt+0x8c>
 801a8a6:	2200      	movs	r2, #0
 801a8a8:	2300      	movs	r3, #0
 801a8aa:	4620      	mov	r0, r4
 801a8ac:	4629      	mov	r1, r5
 801a8ae:	f7e6 f915 	bl	8000adc <__aeabi_dcmpeq>
 801a8b2:	b918      	cbnz	r0, 801a8bc <__cvt+0x8c>
 801a8b4:	f1c6 0601 	rsb	r6, r6, #1
 801a8b8:	f8ca 6000 	str.w	r6, [sl]
 801a8bc:	f8da 3000 	ldr.w	r3, [sl]
 801a8c0:	4499      	add	r9, r3
 801a8c2:	2200      	movs	r2, #0
 801a8c4:	2300      	movs	r3, #0
 801a8c6:	4620      	mov	r0, r4
 801a8c8:	4629      	mov	r1, r5
 801a8ca:	f7e6 f907 	bl	8000adc <__aeabi_dcmpeq>
 801a8ce:	b108      	cbz	r0, 801a8d4 <__cvt+0xa4>
 801a8d0:	f8cd 900c 	str.w	r9, [sp, #12]
 801a8d4:	2230      	movs	r2, #48	; 0x30
 801a8d6:	9b03      	ldr	r3, [sp, #12]
 801a8d8:	454b      	cmp	r3, r9
 801a8da:	d307      	bcc.n	801a8ec <__cvt+0xbc>
 801a8dc:	9b03      	ldr	r3, [sp, #12]
 801a8de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a8e0:	1bdb      	subs	r3, r3, r7
 801a8e2:	4638      	mov	r0, r7
 801a8e4:	6013      	str	r3, [r2, #0]
 801a8e6:	b004      	add	sp, #16
 801a8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8ec:	1c59      	adds	r1, r3, #1
 801a8ee:	9103      	str	r1, [sp, #12]
 801a8f0:	701a      	strb	r2, [r3, #0]
 801a8f2:	e7f0      	b.n	801a8d6 <__cvt+0xa6>

0801a8f4 <__exponent>:
 801a8f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a8f6:	4603      	mov	r3, r0
 801a8f8:	2900      	cmp	r1, #0
 801a8fa:	bfb8      	it	lt
 801a8fc:	4249      	neglt	r1, r1
 801a8fe:	f803 2b02 	strb.w	r2, [r3], #2
 801a902:	bfb4      	ite	lt
 801a904:	222d      	movlt	r2, #45	; 0x2d
 801a906:	222b      	movge	r2, #43	; 0x2b
 801a908:	2909      	cmp	r1, #9
 801a90a:	7042      	strb	r2, [r0, #1]
 801a90c:	dd2a      	ble.n	801a964 <__exponent+0x70>
 801a90e:	f10d 0407 	add.w	r4, sp, #7
 801a912:	46a4      	mov	ip, r4
 801a914:	270a      	movs	r7, #10
 801a916:	46a6      	mov	lr, r4
 801a918:	460a      	mov	r2, r1
 801a91a:	fb91 f6f7 	sdiv	r6, r1, r7
 801a91e:	fb07 1516 	mls	r5, r7, r6, r1
 801a922:	3530      	adds	r5, #48	; 0x30
 801a924:	2a63      	cmp	r2, #99	; 0x63
 801a926:	f104 34ff 	add.w	r4, r4, #4294967295
 801a92a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801a92e:	4631      	mov	r1, r6
 801a930:	dcf1      	bgt.n	801a916 <__exponent+0x22>
 801a932:	3130      	adds	r1, #48	; 0x30
 801a934:	f1ae 0502 	sub.w	r5, lr, #2
 801a938:	f804 1c01 	strb.w	r1, [r4, #-1]
 801a93c:	1c44      	adds	r4, r0, #1
 801a93e:	4629      	mov	r1, r5
 801a940:	4561      	cmp	r1, ip
 801a942:	d30a      	bcc.n	801a95a <__exponent+0x66>
 801a944:	f10d 0209 	add.w	r2, sp, #9
 801a948:	eba2 020e 	sub.w	r2, r2, lr
 801a94c:	4565      	cmp	r5, ip
 801a94e:	bf88      	it	hi
 801a950:	2200      	movhi	r2, #0
 801a952:	4413      	add	r3, r2
 801a954:	1a18      	subs	r0, r3, r0
 801a956:	b003      	add	sp, #12
 801a958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a95a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a95e:	f804 2f01 	strb.w	r2, [r4, #1]!
 801a962:	e7ed      	b.n	801a940 <__exponent+0x4c>
 801a964:	2330      	movs	r3, #48	; 0x30
 801a966:	3130      	adds	r1, #48	; 0x30
 801a968:	7083      	strb	r3, [r0, #2]
 801a96a:	70c1      	strb	r1, [r0, #3]
 801a96c:	1d03      	adds	r3, r0, #4
 801a96e:	e7f1      	b.n	801a954 <__exponent+0x60>

0801a970 <_printf_float>:
 801a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a974:	ed2d 8b02 	vpush	{d8}
 801a978:	b08d      	sub	sp, #52	; 0x34
 801a97a:	460c      	mov	r4, r1
 801a97c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a980:	4616      	mov	r6, r2
 801a982:	461f      	mov	r7, r3
 801a984:	4605      	mov	r5, r0
 801a986:	f001 fdb1 	bl	801c4ec <_localeconv_r>
 801a98a:	f8d0 a000 	ldr.w	sl, [r0]
 801a98e:	4650      	mov	r0, sl
 801a990:	f7e5 fc78 	bl	8000284 <strlen>
 801a994:	2300      	movs	r3, #0
 801a996:	930a      	str	r3, [sp, #40]	; 0x28
 801a998:	6823      	ldr	r3, [r4, #0]
 801a99a:	9305      	str	r3, [sp, #20]
 801a99c:	f8d8 3000 	ldr.w	r3, [r8]
 801a9a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a9a4:	3307      	adds	r3, #7
 801a9a6:	f023 0307 	bic.w	r3, r3, #7
 801a9aa:	f103 0208 	add.w	r2, r3, #8
 801a9ae:	f8c8 2000 	str.w	r2, [r8]
 801a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801a9ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801a9be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a9c2:	9307      	str	r3, [sp, #28]
 801a9c4:	f8cd 8018 	str.w	r8, [sp, #24]
 801a9c8:	ee08 0a10 	vmov	s16, r0
 801a9cc:	4b9f      	ldr	r3, [pc, #636]	; (801ac4c <_printf_float+0x2dc>)
 801a9ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a9d2:	f04f 32ff 	mov.w	r2, #4294967295
 801a9d6:	f7e6 f8b3 	bl	8000b40 <__aeabi_dcmpun>
 801a9da:	bb88      	cbnz	r0, 801aa40 <_printf_float+0xd0>
 801a9dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a9e0:	4b9a      	ldr	r3, [pc, #616]	; (801ac4c <_printf_float+0x2dc>)
 801a9e2:	f04f 32ff 	mov.w	r2, #4294967295
 801a9e6:	f7e6 f88d 	bl	8000b04 <__aeabi_dcmple>
 801a9ea:	bb48      	cbnz	r0, 801aa40 <_printf_float+0xd0>
 801a9ec:	2200      	movs	r2, #0
 801a9ee:	2300      	movs	r3, #0
 801a9f0:	4640      	mov	r0, r8
 801a9f2:	4649      	mov	r1, r9
 801a9f4:	f7e6 f87c 	bl	8000af0 <__aeabi_dcmplt>
 801a9f8:	b110      	cbz	r0, 801aa00 <_printf_float+0x90>
 801a9fa:	232d      	movs	r3, #45	; 0x2d
 801a9fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aa00:	4b93      	ldr	r3, [pc, #588]	; (801ac50 <_printf_float+0x2e0>)
 801aa02:	4894      	ldr	r0, [pc, #592]	; (801ac54 <_printf_float+0x2e4>)
 801aa04:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801aa08:	bf94      	ite	ls
 801aa0a:	4698      	movls	r8, r3
 801aa0c:	4680      	movhi	r8, r0
 801aa0e:	2303      	movs	r3, #3
 801aa10:	6123      	str	r3, [r4, #16]
 801aa12:	9b05      	ldr	r3, [sp, #20]
 801aa14:	f023 0204 	bic.w	r2, r3, #4
 801aa18:	6022      	str	r2, [r4, #0]
 801aa1a:	f04f 0900 	mov.w	r9, #0
 801aa1e:	9700      	str	r7, [sp, #0]
 801aa20:	4633      	mov	r3, r6
 801aa22:	aa0b      	add	r2, sp, #44	; 0x2c
 801aa24:	4621      	mov	r1, r4
 801aa26:	4628      	mov	r0, r5
 801aa28:	f000 f9d8 	bl	801addc <_printf_common>
 801aa2c:	3001      	adds	r0, #1
 801aa2e:	f040 8090 	bne.w	801ab52 <_printf_float+0x1e2>
 801aa32:	f04f 30ff 	mov.w	r0, #4294967295
 801aa36:	b00d      	add	sp, #52	; 0x34
 801aa38:	ecbd 8b02 	vpop	{d8}
 801aa3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa40:	4642      	mov	r2, r8
 801aa42:	464b      	mov	r3, r9
 801aa44:	4640      	mov	r0, r8
 801aa46:	4649      	mov	r1, r9
 801aa48:	f7e6 f87a 	bl	8000b40 <__aeabi_dcmpun>
 801aa4c:	b140      	cbz	r0, 801aa60 <_printf_float+0xf0>
 801aa4e:	464b      	mov	r3, r9
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	bfbc      	itt	lt
 801aa54:	232d      	movlt	r3, #45	; 0x2d
 801aa56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801aa5a:	487f      	ldr	r0, [pc, #508]	; (801ac58 <_printf_float+0x2e8>)
 801aa5c:	4b7f      	ldr	r3, [pc, #508]	; (801ac5c <_printf_float+0x2ec>)
 801aa5e:	e7d1      	b.n	801aa04 <_printf_float+0x94>
 801aa60:	6863      	ldr	r3, [r4, #4]
 801aa62:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801aa66:	9206      	str	r2, [sp, #24]
 801aa68:	1c5a      	adds	r2, r3, #1
 801aa6a:	d13f      	bne.n	801aaec <_printf_float+0x17c>
 801aa6c:	2306      	movs	r3, #6
 801aa6e:	6063      	str	r3, [r4, #4]
 801aa70:	9b05      	ldr	r3, [sp, #20]
 801aa72:	6861      	ldr	r1, [r4, #4]
 801aa74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801aa78:	2300      	movs	r3, #0
 801aa7a:	9303      	str	r3, [sp, #12]
 801aa7c:	ab0a      	add	r3, sp, #40	; 0x28
 801aa7e:	e9cd b301 	strd	fp, r3, [sp, #4]
 801aa82:	ab09      	add	r3, sp, #36	; 0x24
 801aa84:	ec49 8b10 	vmov	d0, r8, r9
 801aa88:	9300      	str	r3, [sp, #0]
 801aa8a:	6022      	str	r2, [r4, #0]
 801aa8c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801aa90:	4628      	mov	r0, r5
 801aa92:	f7ff fecd 	bl	801a830 <__cvt>
 801aa96:	9b06      	ldr	r3, [sp, #24]
 801aa98:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aa9a:	2b47      	cmp	r3, #71	; 0x47
 801aa9c:	4680      	mov	r8, r0
 801aa9e:	d108      	bne.n	801aab2 <_printf_float+0x142>
 801aaa0:	1cc8      	adds	r0, r1, #3
 801aaa2:	db02      	blt.n	801aaaa <_printf_float+0x13a>
 801aaa4:	6863      	ldr	r3, [r4, #4]
 801aaa6:	4299      	cmp	r1, r3
 801aaa8:	dd41      	ble.n	801ab2e <_printf_float+0x1be>
 801aaaa:	f1ab 0b02 	sub.w	fp, fp, #2
 801aaae:	fa5f fb8b 	uxtb.w	fp, fp
 801aab2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801aab6:	d820      	bhi.n	801aafa <_printf_float+0x18a>
 801aab8:	3901      	subs	r1, #1
 801aaba:	465a      	mov	r2, fp
 801aabc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801aac0:	9109      	str	r1, [sp, #36]	; 0x24
 801aac2:	f7ff ff17 	bl	801a8f4 <__exponent>
 801aac6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aac8:	1813      	adds	r3, r2, r0
 801aaca:	2a01      	cmp	r2, #1
 801aacc:	4681      	mov	r9, r0
 801aace:	6123      	str	r3, [r4, #16]
 801aad0:	dc02      	bgt.n	801aad8 <_printf_float+0x168>
 801aad2:	6822      	ldr	r2, [r4, #0]
 801aad4:	07d2      	lsls	r2, r2, #31
 801aad6:	d501      	bpl.n	801aadc <_printf_float+0x16c>
 801aad8:	3301      	adds	r3, #1
 801aada:	6123      	str	r3, [r4, #16]
 801aadc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	d09c      	beq.n	801aa1e <_printf_float+0xae>
 801aae4:	232d      	movs	r3, #45	; 0x2d
 801aae6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aaea:	e798      	b.n	801aa1e <_printf_float+0xae>
 801aaec:	9a06      	ldr	r2, [sp, #24]
 801aaee:	2a47      	cmp	r2, #71	; 0x47
 801aaf0:	d1be      	bne.n	801aa70 <_printf_float+0x100>
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d1bc      	bne.n	801aa70 <_printf_float+0x100>
 801aaf6:	2301      	movs	r3, #1
 801aaf8:	e7b9      	b.n	801aa6e <_printf_float+0xfe>
 801aafa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801aafe:	d118      	bne.n	801ab32 <_printf_float+0x1c2>
 801ab00:	2900      	cmp	r1, #0
 801ab02:	6863      	ldr	r3, [r4, #4]
 801ab04:	dd0b      	ble.n	801ab1e <_printf_float+0x1ae>
 801ab06:	6121      	str	r1, [r4, #16]
 801ab08:	b913      	cbnz	r3, 801ab10 <_printf_float+0x1a0>
 801ab0a:	6822      	ldr	r2, [r4, #0]
 801ab0c:	07d0      	lsls	r0, r2, #31
 801ab0e:	d502      	bpl.n	801ab16 <_printf_float+0x1a6>
 801ab10:	3301      	adds	r3, #1
 801ab12:	440b      	add	r3, r1
 801ab14:	6123      	str	r3, [r4, #16]
 801ab16:	65a1      	str	r1, [r4, #88]	; 0x58
 801ab18:	f04f 0900 	mov.w	r9, #0
 801ab1c:	e7de      	b.n	801aadc <_printf_float+0x16c>
 801ab1e:	b913      	cbnz	r3, 801ab26 <_printf_float+0x1b6>
 801ab20:	6822      	ldr	r2, [r4, #0]
 801ab22:	07d2      	lsls	r2, r2, #31
 801ab24:	d501      	bpl.n	801ab2a <_printf_float+0x1ba>
 801ab26:	3302      	adds	r3, #2
 801ab28:	e7f4      	b.n	801ab14 <_printf_float+0x1a4>
 801ab2a:	2301      	movs	r3, #1
 801ab2c:	e7f2      	b.n	801ab14 <_printf_float+0x1a4>
 801ab2e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801ab32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab34:	4299      	cmp	r1, r3
 801ab36:	db05      	blt.n	801ab44 <_printf_float+0x1d4>
 801ab38:	6823      	ldr	r3, [r4, #0]
 801ab3a:	6121      	str	r1, [r4, #16]
 801ab3c:	07d8      	lsls	r0, r3, #31
 801ab3e:	d5ea      	bpl.n	801ab16 <_printf_float+0x1a6>
 801ab40:	1c4b      	adds	r3, r1, #1
 801ab42:	e7e7      	b.n	801ab14 <_printf_float+0x1a4>
 801ab44:	2900      	cmp	r1, #0
 801ab46:	bfd4      	ite	le
 801ab48:	f1c1 0202 	rsble	r2, r1, #2
 801ab4c:	2201      	movgt	r2, #1
 801ab4e:	4413      	add	r3, r2
 801ab50:	e7e0      	b.n	801ab14 <_printf_float+0x1a4>
 801ab52:	6823      	ldr	r3, [r4, #0]
 801ab54:	055a      	lsls	r2, r3, #21
 801ab56:	d407      	bmi.n	801ab68 <_printf_float+0x1f8>
 801ab58:	6923      	ldr	r3, [r4, #16]
 801ab5a:	4642      	mov	r2, r8
 801ab5c:	4631      	mov	r1, r6
 801ab5e:	4628      	mov	r0, r5
 801ab60:	47b8      	blx	r7
 801ab62:	3001      	adds	r0, #1
 801ab64:	d12c      	bne.n	801abc0 <_printf_float+0x250>
 801ab66:	e764      	b.n	801aa32 <_printf_float+0xc2>
 801ab68:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ab6c:	f240 80e0 	bls.w	801ad30 <_printf_float+0x3c0>
 801ab70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ab74:	2200      	movs	r2, #0
 801ab76:	2300      	movs	r3, #0
 801ab78:	f7e5 ffb0 	bl	8000adc <__aeabi_dcmpeq>
 801ab7c:	2800      	cmp	r0, #0
 801ab7e:	d034      	beq.n	801abea <_printf_float+0x27a>
 801ab80:	4a37      	ldr	r2, [pc, #220]	; (801ac60 <_printf_float+0x2f0>)
 801ab82:	2301      	movs	r3, #1
 801ab84:	4631      	mov	r1, r6
 801ab86:	4628      	mov	r0, r5
 801ab88:	47b8      	blx	r7
 801ab8a:	3001      	adds	r0, #1
 801ab8c:	f43f af51 	beq.w	801aa32 <_printf_float+0xc2>
 801ab90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ab94:	429a      	cmp	r2, r3
 801ab96:	db02      	blt.n	801ab9e <_printf_float+0x22e>
 801ab98:	6823      	ldr	r3, [r4, #0]
 801ab9a:	07d8      	lsls	r0, r3, #31
 801ab9c:	d510      	bpl.n	801abc0 <_printf_float+0x250>
 801ab9e:	ee18 3a10 	vmov	r3, s16
 801aba2:	4652      	mov	r2, sl
 801aba4:	4631      	mov	r1, r6
 801aba6:	4628      	mov	r0, r5
 801aba8:	47b8      	blx	r7
 801abaa:	3001      	adds	r0, #1
 801abac:	f43f af41 	beq.w	801aa32 <_printf_float+0xc2>
 801abb0:	f04f 0800 	mov.w	r8, #0
 801abb4:	f104 091a 	add.w	r9, r4, #26
 801abb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801abba:	3b01      	subs	r3, #1
 801abbc:	4543      	cmp	r3, r8
 801abbe:	dc09      	bgt.n	801abd4 <_printf_float+0x264>
 801abc0:	6823      	ldr	r3, [r4, #0]
 801abc2:	079b      	lsls	r3, r3, #30
 801abc4:	f100 8105 	bmi.w	801add2 <_printf_float+0x462>
 801abc8:	68e0      	ldr	r0, [r4, #12]
 801abca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801abcc:	4298      	cmp	r0, r3
 801abce:	bfb8      	it	lt
 801abd0:	4618      	movlt	r0, r3
 801abd2:	e730      	b.n	801aa36 <_printf_float+0xc6>
 801abd4:	2301      	movs	r3, #1
 801abd6:	464a      	mov	r2, r9
 801abd8:	4631      	mov	r1, r6
 801abda:	4628      	mov	r0, r5
 801abdc:	47b8      	blx	r7
 801abde:	3001      	adds	r0, #1
 801abe0:	f43f af27 	beq.w	801aa32 <_printf_float+0xc2>
 801abe4:	f108 0801 	add.w	r8, r8, #1
 801abe8:	e7e6      	b.n	801abb8 <_printf_float+0x248>
 801abea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abec:	2b00      	cmp	r3, #0
 801abee:	dc39      	bgt.n	801ac64 <_printf_float+0x2f4>
 801abf0:	4a1b      	ldr	r2, [pc, #108]	; (801ac60 <_printf_float+0x2f0>)
 801abf2:	2301      	movs	r3, #1
 801abf4:	4631      	mov	r1, r6
 801abf6:	4628      	mov	r0, r5
 801abf8:	47b8      	blx	r7
 801abfa:	3001      	adds	r0, #1
 801abfc:	f43f af19 	beq.w	801aa32 <_printf_float+0xc2>
 801ac00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ac04:	4313      	orrs	r3, r2
 801ac06:	d102      	bne.n	801ac0e <_printf_float+0x29e>
 801ac08:	6823      	ldr	r3, [r4, #0]
 801ac0a:	07d9      	lsls	r1, r3, #31
 801ac0c:	d5d8      	bpl.n	801abc0 <_printf_float+0x250>
 801ac0e:	ee18 3a10 	vmov	r3, s16
 801ac12:	4652      	mov	r2, sl
 801ac14:	4631      	mov	r1, r6
 801ac16:	4628      	mov	r0, r5
 801ac18:	47b8      	blx	r7
 801ac1a:	3001      	adds	r0, #1
 801ac1c:	f43f af09 	beq.w	801aa32 <_printf_float+0xc2>
 801ac20:	f04f 0900 	mov.w	r9, #0
 801ac24:	f104 0a1a 	add.w	sl, r4, #26
 801ac28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac2a:	425b      	negs	r3, r3
 801ac2c:	454b      	cmp	r3, r9
 801ac2e:	dc01      	bgt.n	801ac34 <_printf_float+0x2c4>
 801ac30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac32:	e792      	b.n	801ab5a <_printf_float+0x1ea>
 801ac34:	2301      	movs	r3, #1
 801ac36:	4652      	mov	r2, sl
 801ac38:	4631      	mov	r1, r6
 801ac3a:	4628      	mov	r0, r5
 801ac3c:	47b8      	blx	r7
 801ac3e:	3001      	adds	r0, #1
 801ac40:	f43f aef7 	beq.w	801aa32 <_printf_float+0xc2>
 801ac44:	f109 0901 	add.w	r9, r9, #1
 801ac48:	e7ee      	b.n	801ac28 <_printf_float+0x2b8>
 801ac4a:	bf00      	nop
 801ac4c:	7fefffff 	.word	0x7fefffff
 801ac50:	080200b9 	.word	0x080200b9
 801ac54:	080200bd 	.word	0x080200bd
 801ac58:	080200c5 	.word	0x080200c5
 801ac5c:	080200c1 	.word	0x080200c1
 801ac60:	080200c9 	.word	0x080200c9
 801ac64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ac66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ac68:	429a      	cmp	r2, r3
 801ac6a:	bfa8      	it	ge
 801ac6c:	461a      	movge	r2, r3
 801ac6e:	2a00      	cmp	r2, #0
 801ac70:	4691      	mov	r9, r2
 801ac72:	dc37      	bgt.n	801ace4 <_printf_float+0x374>
 801ac74:	f04f 0b00 	mov.w	fp, #0
 801ac78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ac7c:	f104 021a 	add.w	r2, r4, #26
 801ac80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ac82:	9305      	str	r3, [sp, #20]
 801ac84:	eba3 0309 	sub.w	r3, r3, r9
 801ac88:	455b      	cmp	r3, fp
 801ac8a:	dc33      	bgt.n	801acf4 <_printf_float+0x384>
 801ac8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ac90:	429a      	cmp	r2, r3
 801ac92:	db3b      	blt.n	801ad0c <_printf_float+0x39c>
 801ac94:	6823      	ldr	r3, [r4, #0]
 801ac96:	07da      	lsls	r2, r3, #31
 801ac98:	d438      	bmi.n	801ad0c <_printf_float+0x39c>
 801ac9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac9c:	9a05      	ldr	r2, [sp, #20]
 801ac9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aca0:	1a9a      	subs	r2, r3, r2
 801aca2:	eba3 0901 	sub.w	r9, r3, r1
 801aca6:	4591      	cmp	r9, r2
 801aca8:	bfa8      	it	ge
 801acaa:	4691      	movge	r9, r2
 801acac:	f1b9 0f00 	cmp.w	r9, #0
 801acb0:	dc35      	bgt.n	801ad1e <_printf_float+0x3ae>
 801acb2:	f04f 0800 	mov.w	r8, #0
 801acb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801acba:	f104 0a1a 	add.w	sl, r4, #26
 801acbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801acc2:	1a9b      	subs	r3, r3, r2
 801acc4:	eba3 0309 	sub.w	r3, r3, r9
 801acc8:	4543      	cmp	r3, r8
 801acca:	f77f af79 	ble.w	801abc0 <_printf_float+0x250>
 801acce:	2301      	movs	r3, #1
 801acd0:	4652      	mov	r2, sl
 801acd2:	4631      	mov	r1, r6
 801acd4:	4628      	mov	r0, r5
 801acd6:	47b8      	blx	r7
 801acd8:	3001      	adds	r0, #1
 801acda:	f43f aeaa 	beq.w	801aa32 <_printf_float+0xc2>
 801acde:	f108 0801 	add.w	r8, r8, #1
 801ace2:	e7ec      	b.n	801acbe <_printf_float+0x34e>
 801ace4:	4613      	mov	r3, r2
 801ace6:	4631      	mov	r1, r6
 801ace8:	4642      	mov	r2, r8
 801acea:	4628      	mov	r0, r5
 801acec:	47b8      	blx	r7
 801acee:	3001      	adds	r0, #1
 801acf0:	d1c0      	bne.n	801ac74 <_printf_float+0x304>
 801acf2:	e69e      	b.n	801aa32 <_printf_float+0xc2>
 801acf4:	2301      	movs	r3, #1
 801acf6:	4631      	mov	r1, r6
 801acf8:	4628      	mov	r0, r5
 801acfa:	9205      	str	r2, [sp, #20]
 801acfc:	47b8      	blx	r7
 801acfe:	3001      	adds	r0, #1
 801ad00:	f43f ae97 	beq.w	801aa32 <_printf_float+0xc2>
 801ad04:	9a05      	ldr	r2, [sp, #20]
 801ad06:	f10b 0b01 	add.w	fp, fp, #1
 801ad0a:	e7b9      	b.n	801ac80 <_printf_float+0x310>
 801ad0c:	ee18 3a10 	vmov	r3, s16
 801ad10:	4652      	mov	r2, sl
 801ad12:	4631      	mov	r1, r6
 801ad14:	4628      	mov	r0, r5
 801ad16:	47b8      	blx	r7
 801ad18:	3001      	adds	r0, #1
 801ad1a:	d1be      	bne.n	801ac9a <_printf_float+0x32a>
 801ad1c:	e689      	b.n	801aa32 <_printf_float+0xc2>
 801ad1e:	9a05      	ldr	r2, [sp, #20]
 801ad20:	464b      	mov	r3, r9
 801ad22:	4442      	add	r2, r8
 801ad24:	4631      	mov	r1, r6
 801ad26:	4628      	mov	r0, r5
 801ad28:	47b8      	blx	r7
 801ad2a:	3001      	adds	r0, #1
 801ad2c:	d1c1      	bne.n	801acb2 <_printf_float+0x342>
 801ad2e:	e680      	b.n	801aa32 <_printf_float+0xc2>
 801ad30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad32:	2a01      	cmp	r2, #1
 801ad34:	dc01      	bgt.n	801ad3a <_printf_float+0x3ca>
 801ad36:	07db      	lsls	r3, r3, #31
 801ad38:	d538      	bpl.n	801adac <_printf_float+0x43c>
 801ad3a:	2301      	movs	r3, #1
 801ad3c:	4642      	mov	r2, r8
 801ad3e:	4631      	mov	r1, r6
 801ad40:	4628      	mov	r0, r5
 801ad42:	47b8      	blx	r7
 801ad44:	3001      	adds	r0, #1
 801ad46:	f43f ae74 	beq.w	801aa32 <_printf_float+0xc2>
 801ad4a:	ee18 3a10 	vmov	r3, s16
 801ad4e:	4652      	mov	r2, sl
 801ad50:	4631      	mov	r1, r6
 801ad52:	4628      	mov	r0, r5
 801ad54:	47b8      	blx	r7
 801ad56:	3001      	adds	r0, #1
 801ad58:	f43f ae6b 	beq.w	801aa32 <_printf_float+0xc2>
 801ad5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ad60:	2200      	movs	r2, #0
 801ad62:	2300      	movs	r3, #0
 801ad64:	f7e5 feba 	bl	8000adc <__aeabi_dcmpeq>
 801ad68:	b9d8      	cbnz	r0, 801ada2 <_printf_float+0x432>
 801ad6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad6c:	f108 0201 	add.w	r2, r8, #1
 801ad70:	3b01      	subs	r3, #1
 801ad72:	4631      	mov	r1, r6
 801ad74:	4628      	mov	r0, r5
 801ad76:	47b8      	blx	r7
 801ad78:	3001      	adds	r0, #1
 801ad7a:	d10e      	bne.n	801ad9a <_printf_float+0x42a>
 801ad7c:	e659      	b.n	801aa32 <_printf_float+0xc2>
 801ad7e:	2301      	movs	r3, #1
 801ad80:	4652      	mov	r2, sl
 801ad82:	4631      	mov	r1, r6
 801ad84:	4628      	mov	r0, r5
 801ad86:	47b8      	blx	r7
 801ad88:	3001      	adds	r0, #1
 801ad8a:	f43f ae52 	beq.w	801aa32 <_printf_float+0xc2>
 801ad8e:	f108 0801 	add.w	r8, r8, #1
 801ad92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad94:	3b01      	subs	r3, #1
 801ad96:	4543      	cmp	r3, r8
 801ad98:	dcf1      	bgt.n	801ad7e <_printf_float+0x40e>
 801ad9a:	464b      	mov	r3, r9
 801ad9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ada0:	e6dc      	b.n	801ab5c <_printf_float+0x1ec>
 801ada2:	f04f 0800 	mov.w	r8, #0
 801ada6:	f104 0a1a 	add.w	sl, r4, #26
 801adaa:	e7f2      	b.n	801ad92 <_printf_float+0x422>
 801adac:	2301      	movs	r3, #1
 801adae:	4642      	mov	r2, r8
 801adb0:	e7df      	b.n	801ad72 <_printf_float+0x402>
 801adb2:	2301      	movs	r3, #1
 801adb4:	464a      	mov	r2, r9
 801adb6:	4631      	mov	r1, r6
 801adb8:	4628      	mov	r0, r5
 801adba:	47b8      	blx	r7
 801adbc:	3001      	adds	r0, #1
 801adbe:	f43f ae38 	beq.w	801aa32 <_printf_float+0xc2>
 801adc2:	f108 0801 	add.w	r8, r8, #1
 801adc6:	68e3      	ldr	r3, [r4, #12]
 801adc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801adca:	1a5b      	subs	r3, r3, r1
 801adcc:	4543      	cmp	r3, r8
 801adce:	dcf0      	bgt.n	801adb2 <_printf_float+0x442>
 801add0:	e6fa      	b.n	801abc8 <_printf_float+0x258>
 801add2:	f04f 0800 	mov.w	r8, #0
 801add6:	f104 0919 	add.w	r9, r4, #25
 801adda:	e7f4      	b.n	801adc6 <_printf_float+0x456>

0801addc <_printf_common>:
 801addc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ade0:	4616      	mov	r6, r2
 801ade2:	4699      	mov	r9, r3
 801ade4:	688a      	ldr	r2, [r1, #8]
 801ade6:	690b      	ldr	r3, [r1, #16]
 801ade8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801adec:	4293      	cmp	r3, r2
 801adee:	bfb8      	it	lt
 801adf0:	4613      	movlt	r3, r2
 801adf2:	6033      	str	r3, [r6, #0]
 801adf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801adf8:	4607      	mov	r7, r0
 801adfa:	460c      	mov	r4, r1
 801adfc:	b10a      	cbz	r2, 801ae02 <_printf_common+0x26>
 801adfe:	3301      	adds	r3, #1
 801ae00:	6033      	str	r3, [r6, #0]
 801ae02:	6823      	ldr	r3, [r4, #0]
 801ae04:	0699      	lsls	r1, r3, #26
 801ae06:	bf42      	ittt	mi
 801ae08:	6833      	ldrmi	r3, [r6, #0]
 801ae0a:	3302      	addmi	r3, #2
 801ae0c:	6033      	strmi	r3, [r6, #0]
 801ae0e:	6825      	ldr	r5, [r4, #0]
 801ae10:	f015 0506 	ands.w	r5, r5, #6
 801ae14:	d106      	bne.n	801ae24 <_printf_common+0x48>
 801ae16:	f104 0a19 	add.w	sl, r4, #25
 801ae1a:	68e3      	ldr	r3, [r4, #12]
 801ae1c:	6832      	ldr	r2, [r6, #0]
 801ae1e:	1a9b      	subs	r3, r3, r2
 801ae20:	42ab      	cmp	r3, r5
 801ae22:	dc26      	bgt.n	801ae72 <_printf_common+0x96>
 801ae24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ae28:	1e13      	subs	r3, r2, #0
 801ae2a:	6822      	ldr	r2, [r4, #0]
 801ae2c:	bf18      	it	ne
 801ae2e:	2301      	movne	r3, #1
 801ae30:	0692      	lsls	r2, r2, #26
 801ae32:	d42b      	bmi.n	801ae8c <_printf_common+0xb0>
 801ae34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ae38:	4649      	mov	r1, r9
 801ae3a:	4638      	mov	r0, r7
 801ae3c:	47c0      	blx	r8
 801ae3e:	3001      	adds	r0, #1
 801ae40:	d01e      	beq.n	801ae80 <_printf_common+0xa4>
 801ae42:	6823      	ldr	r3, [r4, #0]
 801ae44:	68e5      	ldr	r5, [r4, #12]
 801ae46:	6832      	ldr	r2, [r6, #0]
 801ae48:	f003 0306 	and.w	r3, r3, #6
 801ae4c:	2b04      	cmp	r3, #4
 801ae4e:	bf08      	it	eq
 801ae50:	1aad      	subeq	r5, r5, r2
 801ae52:	68a3      	ldr	r3, [r4, #8]
 801ae54:	6922      	ldr	r2, [r4, #16]
 801ae56:	bf0c      	ite	eq
 801ae58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ae5c:	2500      	movne	r5, #0
 801ae5e:	4293      	cmp	r3, r2
 801ae60:	bfc4      	itt	gt
 801ae62:	1a9b      	subgt	r3, r3, r2
 801ae64:	18ed      	addgt	r5, r5, r3
 801ae66:	2600      	movs	r6, #0
 801ae68:	341a      	adds	r4, #26
 801ae6a:	42b5      	cmp	r5, r6
 801ae6c:	d11a      	bne.n	801aea4 <_printf_common+0xc8>
 801ae6e:	2000      	movs	r0, #0
 801ae70:	e008      	b.n	801ae84 <_printf_common+0xa8>
 801ae72:	2301      	movs	r3, #1
 801ae74:	4652      	mov	r2, sl
 801ae76:	4649      	mov	r1, r9
 801ae78:	4638      	mov	r0, r7
 801ae7a:	47c0      	blx	r8
 801ae7c:	3001      	adds	r0, #1
 801ae7e:	d103      	bne.n	801ae88 <_printf_common+0xac>
 801ae80:	f04f 30ff 	mov.w	r0, #4294967295
 801ae84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae88:	3501      	adds	r5, #1
 801ae8a:	e7c6      	b.n	801ae1a <_printf_common+0x3e>
 801ae8c:	18e1      	adds	r1, r4, r3
 801ae8e:	1c5a      	adds	r2, r3, #1
 801ae90:	2030      	movs	r0, #48	; 0x30
 801ae92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ae96:	4422      	add	r2, r4
 801ae98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ae9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801aea0:	3302      	adds	r3, #2
 801aea2:	e7c7      	b.n	801ae34 <_printf_common+0x58>
 801aea4:	2301      	movs	r3, #1
 801aea6:	4622      	mov	r2, r4
 801aea8:	4649      	mov	r1, r9
 801aeaa:	4638      	mov	r0, r7
 801aeac:	47c0      	blx	r8
 801aeae:	3001      	adds	r0, #1
 801aeb0:	d0e6      	beq.n	801ae80 <_printf_common+0xa4>
 801aeb2:	3601      	adds	r6, #1
 801aeb4:	e7d9      	b.n	801ae6a <_printf_common+0x8e>
	...

0801aeb8 <_printf_i>:
 801aeb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aebc:	7e0f      	ldrb	r7, [r1, #24]
 801aebe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801aec0:	2f78      	cmp	r7, #120	; 0x78
 801aec2:	4691      	mov	r9, r2
 801aec4:	4680      	mov	r8, r0
 801aec6:	460c      	mov	r4, r1
 801aec8:	469a      	mov	sl, r3
 801aeca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801aece:	d807      	bhi.n	801aee0 <_printf_i+0x28>
 801aed0:	2f62      	cmp	r7, #98	; 0x62
 801aed2:	d80a      	bhi.n	801aeea <_printf_i+0x32>
 801aed4:	2f00      	cmp	r7, #0
 801aed6:	f000 80d8 	beq.w	801b08a <_printf_i+0x1d2>
 801aeda:	2f58      	cmp	r7, #88	; 0x58
 801aedc:	f000 80a3 	beq.w	801b026 <_printf_i+0x16e>
 801aee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aee4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801aee8:	e03a      	b.n	801af60 <_printf_i+0xa8>
 801aeea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801aeee:	2b15      	cmp	r3, #21
 801aef0:	d8f6      	bhi.n	801aee0 <_printf_i+0x28>
 801aef2:	a101      	add	r1, pc, #4	; (adr r1, 801aef8 <_printf_i+0x40>)
 801aef4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aef8:	0801af51 	.word	0x0801af51
 801aefc:	0801af65 	.word	0x0801af65
 801af00:	0801aee1 	.word	0x0801aee1
 801af04:	0801aee1 	.word	0x0801aee1
 801af08:	0801aee1 	.word	0x0801aee1
 801af0c:	0801aee1 	.word	0x0801aee1
 801af10:	0801af65 	.word	0x0801af65
 801af14:	0801aee1 	.word	0x0801aee1
 801af18:	0801aee1 	.word	0x0801aee1
 801af1c:	0801aee1 	.word	0x0801aee1
 801af20:	0801aee1 	.word	0x0801aee1
 801af24:	0801b071 	.word	0x0801b071
 801af28:	0801af95 	.word	0x0801af95
 801af2c:	0801b053 	.word	0x0801b053
 801af30:	0801aee1 	.word	0x0801aee1
 801af34:	0801aee1 	.word	0x0801aee1
 801af38:	0801b093 	.word	0x0801b093
 801af3c:	0801aee1 	.word	0x0801aee1
 801af40:	0801af95 	.word	0x0801af95
 801af44:	0801aee1 	.word	0x0801aee1
 801af48:	0801aee1 	.word	0x0801aee1
 801af4c:	0801b05b 	.word	0x0801b05b
 801af50:	682b      	ldr	r3, [r5, #0]
 801af52:	1d1a      	adds	r2, r3, #4
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	602a      	str	r2, [r5, #0]
 801af58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801af5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801af60:	2301      	movs	r3, #1
 801af62:	e0a3      	b.n	801b0ac <_printf_i+0x1f4>
 801af64:	6820      	ldr	r0, [r4, #0]
 801af66:	6829      	ldr	r1, [r5, #0]
 801af68:	0606      	lsls	r6, r0, #24
 801af6a:	f101 0304 	add.w	r3, r1, #4
 801af6e:	d50a      	bpl.n	801af86 <_printf_i+0xce>
 801af70:	680e      	ldr	r6, [r1, #0]
 801af72:	602b      	str	r3, [r5, #0]
 801af74:	2e00      	cmp	r6, #0
 801af76:	da03      	bge.n	801af80 <_printf_i+0xc8>
 801af78:	232d      	movs	r3, #45	; 0x2d
 801af7a:	4276      	negs	r6, r6
 801af7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af80:	485e      	ldr	r0, [pc, #376]	; (801b0fc <_printf_i+0x244>)
 801af82:	230a      	movs	r3, #10
 801af84:	e019      	b.n	801afba <_printf_i+0x102>
 801af86:	680e      	ldr	r6, [r1, #0]
 801af88:	602b      	str	r3, [r5, #0]
 801af8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801af8e:	bf18      	it	ne
 801af90:	b236      	sxthne	r6, r6
 801af92:	e7ef      	b.n	801af74 <_printf_i+0xbc>
 801af94:	682b      	ldr	r3, [r5, #0]
 801af96:	6820      	ldr	r0, [r4, #0]
 801af98:	1d19      	adds	r1, r3, #4
 801af9a:	6029      	str	r1, [r5, #0]
 801af9c:	0601      	lsls	r1, r0, #24
 801af9e:	d501      	bpl.n	801afa4 <_printf_i+0xec>
 801afa0:	681e      	ldr	r6, [r3, #0]
 801afa2:	e002      	b.n	801afaa <_printf_i+0xf2>
 801afa4:	0646      	lsls	r6, r0, #25
 801afa6:	d5fb      	bpl.n	801afa0 <_printf_i+0xe8>
 801afa8:	881e      	ldrh	r6, [r3, #0]
 801afaa:	4854      	ldr	r0, [pc, #336]	; (801b0fc <_printf_i+0x244>)
 801afac:	2f6f      	cmp	r7, #111	; 0x6f
 801afae:	bf0c      	ite	eq
 801afb0:	2308      	moveq	r3, #8
 801afb2:	230a      	movne	r3, #10
 801afb4:	2100      	movs	r1, #0
 801afb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801afba:	6865      	ldr	r5, [r4, #4]
 801afbc:	60a5      	str	r5, [r4, #8]
 801afbe:	2d00      	cmp	r5, #0
 801afc0:	bfa2      	ittt	ge
 801afc2:	6821      	ldrge	r1, [r4, #0]
 801afc4:	f021 0104 	bicge.w	r1, r1, #4
 801afc8:	6021      	strge	r1, [r4, #0]
 801afca:	b90e      	cbnz	r6, 801afd0 <_printf_i+0x118>
 801afcc:	2d00      	cmp	r5, #0
 801afce:	d04d      	beq.n	801b06c <_printf_i+0x1b4>
 801afd0:	4615      	mov	r5, r2
 801afd2:	fbb6 f1f3 	udiv	r1, r6, r3
 801afd6:	fb03 6711 	mls	r7, r3, r1, r6
 801afda:	5dc7      	ldrb	r7, [r0, r7]
 801afdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801afe0:	4637      	mov	r7, r6
 801afe2:	42bb      	cmp	r3, r7
 801afe4:	460e      	mov	r6, r1
 801afe6:	d9f4      	bls.n	801afd2 <_printf_i+0x11a>
 801afe8:	2b08      	cmp	r3, #8
 801afea:	d10b      	bne.n	801b004 <_printf_i+0x14c>
 801afec:	6823      	ldr	r3, [r4, #0]
 801afee:	07de      	lsls	r6, r3, #31
 801aff0:	d508      	bpl.n	801b004 <_printf_i+0x14c>
 801aff2:	6923      	ldr	r3, [r4, #16]
 801aff4:	6861      	ldr	r1, [r4, #4]
 801aff6:	4299      	cmp	r1, r3
 801aff8:	bfde      	ittt	le
 801affa:	2330      	movle	r3, #48	; 0x30
 801affc:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b000:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b004:	1b52      	subs	r2, r2, r5
 801b006:	6122      	str	r2, [r4, #16]
 801b008:	f8cd a000 	str.w	sl, [sp]
 801b00c:	464b      	mov	r3, r9
 801b00e:	aa03      	add	r2, sp, #12
 801b010:	4621      	mov	r1, r4
 801b012:	4640      	mov	r0, r8
 801b014:	f7ff fee2 	bl	801addc <_printf_common>
 801b018:	3001      	adds	r0, #1
 801b01a:	d14c      	bne.n	801b0b6 <_printf_i+0x1fe>
 801b01c:	f04f 30ff 	mov.w	r0, #4294967295
 801b020:	b004      	add	sp, #16
 801b022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b026:	4835      	ldr	r0, [pc, #212]	; (801b0fc <_printf_i+0x244>)
 801b028:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b02c:	6829      	ldr	r1, [r5, #0]
 801b02e:	6823      	ldr	r3, [r4, #0]
 801b030:	f851 6b04 	ldr.w	r6, [r1], #4
 801b034:	6029      	str	r1, [r5, #0]
 801b036:	061d      	lsls	r5, r3, #24
 801b038:	d514      	bpl.n	801b064 <_printf_i+0x1ac>
 801b03a:	07df      	lsls	r7, r3, #31
 801b03c:	bf44      	itt	mi
 801b03e:	f043 0320 	orrmi.w	r3, r3, #32
 801b042:	6023      	strmi	r3, [r4, #0]
 801b044:	b91e      	cbnz	r6, 801b04e <_printf_i+0x196>
 801b046:	6823      	ldr	r3, [r4, #0]
 801b048:	f023 0320 	bic.w	r3, r3, #32
 801b04c:	6023      	str	r3, [r4, #0]
 801b04e:	2310      	movs	r3, #16
 801b050:	e7b0      	b.n	801afb4 <_printf_i+0xfc>
 801b052:	6823      	ldr	r3, [r4, #0]
 801b054:	f043 0320 	orr.w	r3, r3, #32
 801b058:	6023      	str	r3, [r4, #0]
 801b05a:	2378      	movs	r3, #120	; 0x78
 801b05c:	4828      	ldr	r0, [pc, #160]	; (801b100 <_printf_i+0x248>)
 801b05e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b062:	e7e3      	b.n	801b02c <_printf_i+0x174>
 801b064:	0659      	lsls	r1, r3, #25
 801b066:	bf48      	it	mi
 801b068:	b2b6      	uxthmi	r6, r6
 801b06a:	e7e6      	b.n	801b03a <_printf_i+0x182>
 801b06c:	4615      	mov	r5, r2
 801b06e:	e7bb      	b.n	801afe8 <_printf_i+0x130>
 801b070:	682b      	ldr	r3, [r5, #0]
 801b072:	6826      	ldr	r6, [r4, #0]
 801b074:	6961      	ldr	r1, [r4, #20]
 801b076:	1d18      	adds	r0, r3, #4
 801b078:	6028      	str	r0, [r5, #0]
 801b07a:	0635      	lsls	r5, r6, #24
 801b07c:	681b      	ldr	r3, [r3, #0]
 801b07e:	d501      	bpl.n	801b084 <_printf_i+0x1cc>
 801b080:	6019      	str	r1, [r3, #0]
 801b082:	e002      	b.n	801b08a <_printf_i+0x1d2>
 801b084:	0670      	lsls	r0, r6, #25
 801b086:	d5fb      	bpl.n	801b080 <_printf_i+0x1c8>
 801b088:	8019      	strh	r1, [r3, #0]
 801b08a:	2300      	movs	r3, #0
 801b08c:	6123      	str	r3, [r4, #16]
 801b08e:	4615      	mov	r5, r2
 801b090:	e7ba      	b.n	801b008 <_printf_i+0x150>
 801b092:	682b      	ldr	r3, [r5, #0]
 801b094:	1d1a      	adds	r2, r3, #4
 801b096:	602a      	str	r2, [r5, #0]
 801b098:	681d      	ldr	r5, [r3, #0]
 801b09a:	6862      	ldr	r2, [r4, #4]
 801b09c:	2100      	movs	r1, #0
 801b09e:	4628      	mov	r0, r5
 801b0a0:	f7e5 f896 	bl	80001d0 <memchr>
 801b0a4:	b108      	cbz	r0, 801b0aa <_printf_i+0x1f2>
 801b0a6:	1b40      	subs	r0, r0, r5
 801b0a8:	6060      	str	r0, [r4, #4]
 801b0aa:	6863      	ldr	r3, [r4, #4]
 801b0ac:	6123      	str	r3, [r4, #16]
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b0b4:	e7a8      	b.n	801b008 <_printf_i+0x150>
 801b0b6:	6923      	ldr	r3, [r4, #16]
 801b0b8:	462a      	mov	r2, r5
 801b0ba:	4649      	mov	r1, r9
 801b0bc:	4640      	mov	r0, r8
 801b0be:	47d0      	blx	sl
 801b0c0:	3001      	adds	r0, #1
 801b0c2:	d0ab      	beq.n	801b01c <_printf_i+0x164>
 801b0c4:	6823      	ldr	r3, [r4, #0]
 801b0c6:	079b      	lsls	r3, r3, #30
 801b0c8:	d413      	bmi.n	801b0f2 <_printf_i+0x23a>
 801b0ca:	68e0      	ldr	r0, [r4, #12]
 801b0cc:	9b03      	ldr	r3, [sp, #12]
 801b0ce:	4298      	cmp	r0, r3
 801b0d0:	bfb8      	it	lt
 801b0d2:	4618      	movlt	r0, r3
 801b0d4:	e7a4      	b.n	801b020 <_printf_i+0x168>
 801b0d6:	2301      	movs	r3, #1
 801b0d8:	4632      	mov	r2, r6
 801b0da:	4649      	mov	r1, r9
 801b0dc:	4640      	mov	r0, r8
 801b0de:	47d0      	blx	sl
 801b0e0:	3001      	adds	r0, #1
 801b0e2:	d09b      	beq.n	801b01c <_printf_i+0x164>
 801b0e4:	3501      	adds	r5, #1
 801b0e6:	68e3      	ldr	r3, [r4, #12]
 801b0e8:	9903      	ldr	r1, [sp, #12]
 801b0ea:	1a5b      	subs	r3, r3, r1
 801b0ec:	42ab      	cmp	r3, r5
 801b0ee:	dcf2      	bgt.n	801b0d6 <_printf_i+0x21e>
 801b0f0:	e7eb      	b.n	801b0ca <_printf_i+0x212>
 801b0f2:	2500      	movs	r5, #0
 801b0f4:	f104 0619 	add.w	r6, r4, #25
 801b0f8:	e7f5      	b.n	801b0e6 <_printf_i+0x22e>
 801b0fa:	bf00      	nop
 801b0fc:	080200cb 	.word	0x080200cb
 801b100:	080200dc 	.word	0x080200dc

0801b104 <iprintf>:
 801b104:	b40f      	push	{r0, r1, r2, r3}
 801b106:	4b0a      	ldr	r3, [pc, #40]	; (801b130 <iprintf+0x2c>)
 801b108:	b513      	push	{r0, r1, r4, lr}
 801b10a:	681c      	ldr	r4, [r3, #0]
 801b10c:	b124      	cbz	r4, 801b118 <iprintf+0x14>
 801b10e:	69a3      	ldr	r3, [r4, #24]
 801b110:	b913      	cbnz	r3, 801b118 <iprintf+0x14>
 801b112:	4620      	mov	r0, r4
 801b114:	f001 f94c 	bl	801c3b0 <__sinit>
 801b118:	ab05      	add	r3, sp, #20
 801b11a:	9a04      	ldr	r2, [sp, #16]
 801b11c:	68a1      	ldr	r1, [r4, #8]
 801b11e:	9301      	str	r3, [sp, #4]
 801b120:	4620      	mov	r0, r4
 801b122:	f7ff fa55 	bl	801a5d0 <_vfiprintf_r>
 801b126:	b002      	add	sp, #8
 801b128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b12c:	b004      	add	sp, #16
 801b12e:	4770      	bx	lr
 801b130:	20000250 	.word	0x20000250

0801b134 <_puts_r>:
 801b134:	b570      	push	{r4, r5, r6, lr}
 801b136:	460e      	mov	r6, r1
 801b138:	4605      	mov	r5, r0
 801b13a:	b118      	cbz	r0, 801b144 <_puts_r+0x10>
 801b13c:	6983      	ldr	r3, [r0, #24]
 801b13e:	b90b      	cbnz	r3, 801b144 <_puts_r+0x10>
 801b140:	f001 f936 	bl	801c3b0 <__sinit>
 801b144:	69ab      	ldr	r3, [r5, #24]
 801b146:	68ac      	ldr	r4, [r5, #8]
 801b148:	b913      	cbnz	r3, 801b150 <_puts_r+0x1c>
 801b14a:	4628      	mov	r0, r5
 801b14c:	f001 f930 	bl	801c3b0 <__sinit>
 801b150:	4b2c      	ldr	r3, [pc, #176]	; (801b204 <_puts_r+0xd0>)
 801b152:	429c      	cmp	r4, r3
 801b154:	d120      	bne.n	801b198 <_puts_r+0x64>
 801b156:	686c      	ldr	r4, [r5, #4]
 801b158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b15a:	07db      	lsls	r3, r3, #31
 801b15c:	d405      	bmi.n	801b16a <_puts_r+0x36>
 801b15e:	89a3      	ldrh	r3, [r4, #12]
 801b160:	0598      	lsls	r0, r3, #22
 801b162:	d402      	bmi.n	801b16a <_puts_r+0x36>
 801b164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b166:	f7ff f8d0 	bl	801a30a <__retarget_lock_acquire_recursive>
 801b16a:	89a3      	ldrh	r3, [r4, #12]
 801b16c:	0719      	lsls	r1, r3, #28
 801b16e:	d51d      	bpl.n	801b1ac <_puts_r+0x78>
 801b170:	6923      	ldr	r3, [r4, #16]
 801b172:	b1db      	cbz	r3, 801b1ac <_puts_r+0x78>
 801b174:	3e01      	subs	r6, #1
 801b176:	68a3      	ldr	r3, [r4, #8]
 801b178:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b17c:	3b01      	subs	r3, #1
 801b17e:	60a3      	str	r3, [r4, #8]
 801b180:	bb39      	cbnz	r1, 801b1d2 <_puts_r+0x9e>
 801b182:	2b00      	cmp	r3, #0
 801b184:	da38      	bge.n	801b1f8 <_puts_r+0xc4>
 801b186:	4622      	mov	r2, r4
 801b188:	210a      	movs	r1, #10
 801b18a:	4628      	mov	r0, r5
 801b18c:	f000 f8bc 	bl	801b308 <__swbuf_r>
 801b190:	3001      	adds	r0, #1
 801b192:	d011      	beq.n	801b1b8 <_puts_r+0x84>
 801b194:	250a      	movs	r5, #10
 801b196:	e011      	b.n	801b1bc <_puts_r+0x88>
 801b198:	4b1b      	ldr	r3, [pc, #108]	; (801b208 <_puts_r+0xd4>)
 801b19a:	429c      	cmp	r4, r3
 801b19c:	d101      	bne.n	801b1a2 <_puts_r+0x6e>
 801b19e:	68ac      	ldr	r4, [r5, #8]
 801b1a0:	e7da      	b.n	801b158 <_puts_r+0x24>
 801b1a2:	4b1a      	ldr	r3, [pc, #104]	; (801b20c <_puts_r+0xd8>)
 801b1a4:	429c      	cmp	r4, r3
 801b1a6:	bf08      	it	eq
 801b1a8:	68ec      	ldreq	r4, [r5, #12]
 801b1aa:	e7d5      	b.n	801b158 <_puts_r+0x24>
 801b1ac:	4621      	mov	r1, r4
 801b1ae:	4628      	mov	r0, r5
 801b1b0:	f000 f8fc 	bl	801b3ac <__swsetup_r>
 801b1b4:	2800      	cmp	r0, #0
 801b1b6:	d0dd      	beq.n	801b174 <_puts_r+0x40>
 801b1b8:	f04f 35ff 	mov.w	r5, #4294967295
 801b1bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b1be:	07da      	lsls	r2, r3, #31
 801b1c0:	d405      	bmi.n	801b1ce <_puts_r+0x9a>
 801b1c2:	89a3      	ldrh	r3, [r4, #12]
 801b1c4:	059b      	lsls	r3, r3, #22
 801b1c6:	d402      	bmi.n	801b1ce <_puts_r+0x9a>
 801b1c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1ca:	f7ff f89f 	bl	801a30c <__retarget_lock_release_recursive>
 801b1ce:	4628      	mov	r0, r5
 801b1d0:	bd70      	pop	{r4, r5, r6, pc}
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	da04      	bge.n	801b1e0 <_puts_r+0xac>
 801b1d6:	69a2      	ldr	r2, [r4, #24]
 801b1d8:	429a      	cmp	r2, r3
 801b1da:	dc06      	bgt.n	801b1ea <_puts_r+0xb6>
 801b1dc:	290a      	cmp	r1, #10
 801b1de:	d004      	beq.n	801b1ea <_puts_r+0xb6>
 801b1e0:	6823      	ldr	r3, [r4, #0]
 801b1e2:	1c5a      	adds	r2, r3, #1
 801b1e4:	6022      	str	r2, [r4, #0]
 801b1e6:	7019      	strb	r1, [r3, #0]
 801b1e8:	e7c5      	b.n	801b176 <_puts_r+0x42>
 801b1ea:	4622      	mov	r2, r4
 801b1ec:	4628      	mov	r0, r5
 801b1ee:	f000 f88b 	bl	801b308 <__swbuf_r>
 801b1f2:	3001      	adds	r0, #1
 801b1f4:	d1bf      	bne.n	801b176 <_puts_r+0x42>
 801b1f6:	e7df      	b.n	801b1b8 <_puts_r+0x84>
 801b1f8:	6823      	ldr	r3, [r4, #0]
 801b1fa:	250a      	movs	r5, #10
 801b1fc:	1c5a      	adds	r2, r3, #1
 801b1fe:	6022      	str	r2, [r4, #0]
 801b200:	701d      	strb	r5, [r3, #0]
 801b202:	e7db      	b.n	801b1bc <_puts_r+0x88>
 801b204:	080202a0 	.word	0x080202a0
 801b208:	080202c0 	.word	0x080202c0
 801b20c:	08020280 	.word	0x08020280

0801b210 <puts>:
 801b210:	4b02      	ldr	r3, [pc, #8]	; (801b21c <puts+0xc>)
 801b212:	4601      	mov	r1, r0
 801b214:	6818      	ldr	r0, [r3, #0]
 801b216:	f7ff bf8d 	b.w	801b134 <_puts_r>
 801b21a:	bf00      	nop
 801b21c:	20000250 	.word	0x20000250

0801b220 <_sbrk_r>:
 801b220:	b538      	push	{r3, r4, r5, lr}
 801b222:	4d06      	ldr	r5, [pc, #24]	; (801b23c <_sbrk_r+0x1c>)
 801b224:	2300      	movs	r3, #0
 801b226:	4604      	mov	r4, r0
 801b228:	4608      	mov	r0, r1
 801b22a:	602b      	str	r3, [r5, #0]
 801b22c:	f7e8 fc96 	bl	8003b5c <_sbrk>
 801b230:	1c43      	adds	r3, r0, #1
 801b232:	d102      	bne.n	801b23a <_sbrk_r+0x1a>
 801b234:	682b      	ldr	r3, [r5, #0]
 801b236:	b103      	cbz	r3, 801b23a <_sbrk_r+0x1a>
 801b238:	6023      	str	r3, [r4, #0]
 801b23a:	bd38      	pop	{r3, r4, r5, pc}
 801b23c:	200026d0 	.word	0x200026d0

0801b240 <_raise_r>:
 801b240:	291f      	cmp	r1, #31
 801b242:	b538      	push	{r3, r4, r5, lr}
 801b244:	4604      	mov	r4, r0
 801b246:	460d      	mov	r5, r1
 801b248:	d904      	bls.n	801b254 <_raise_r+0x14>
 801b24a:	2316      	movs	r3, #22
 801b24c:	6003      	str	r3, [r0, #0]
 801b24e:	f04f 30ff 	mov.w	r0, #4294967295
 801b252:	bd38      	pop	{r3, r4, r5, pc}
 801b254:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b256:	b112      	cbz	r2, 801b25e <_raise_r+0x1e>
 801b258:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b25c:	b94b      	cbnz	r3, 801b272 <_raise_r+0x32>
 801b25e:	4620      	mov	r0, r4
 801b260:	f000 f830 	bl	801b2c4 <_getpid_r>
 801b264:	462a      	mov	r2, r5
 801b266:	4601      	mov	r1, r0
 801b268:	4620      	mov	r0, r4
 801b26a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b26e:	f000 b817 	b.w	801b2a0 <_kill_r>
 801b272:	2b01      	cmp	r3, #1
 801b274:	d00a      	beq.n	801b28c <_raise_r+0x4c>
 801b276:	1c59      	adds	r1, r3, #1
 801b278:	d103      	bne.n	801b282 <_raise_r+0x42>
 801b27a:	2316      	movs	r3, #22
 801b27c:	6003      	str	r3, [r0, #0]
 801b27e:	2001      	movs	r0, #1
 801b280:	e7e7      	b.n	801b252 <_raise_r+0x12>
 801b282:	2400      	movs	r4, #0
 801b284:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b288:	4628      	mov	r0, r5
 801b28a:	4798      	blx	r3
 801b28c:	2000      	movs	r0, #0
 801b28e:	e7e0      	b.n	801b252 <_raise_r+0x12>

0801b290 <raise>:
 801b290:	4b02      	ldr	r3, [pc, #8]	; (801b29c <raise+0xc>)
 801b292:	4601      	mov	r1, r0
 801b294:	6818      	ldr	r0, [r3, #0]
 801b296:	f7ff bfd3 	b.w	801b240 <_raise_r>
 801b29a:	bf00      	nop
 801b29c:	20000250 	.word	0x20000250

0801b2a0 <_kill_r>:
 801b2a0:	b538      	push	{r3, r4, r5, lr}
 801b2a2:	4d07      	ldr	r5, [pc, #28]	; (801b2c0 <_kill_r+0x20>)
 801b2a4:	2300      	movs	r3, #0
 801b2a6:	4604      	mov	r4, r0
 801b2a8:	4608      	mov	r0, r1
 801b2aa:	4611      	mov	r1, r2
 801b2ac:	602b      	str	r3, [r5, #0]
 801b2ae:	f7e8 fbcd 	bl	8003a4c <_kill>
 801b2b2:	1c43      	adds	r3, r0, #1
 801b2b4:	d102      	bne.n	801b2bc <_kill_r+0x1c>
 801b2b6:	682b      	ldr	r3, [r5, #0]
 801b2b8:	b103      	cbz	r3, 801b2bc <_kill_r+0x1c>
 801b2ba:	6023      	str	r3, [r4, #0]
 801b2bc:	bd38      	pop	{r3, r4, r5, pc}
 801b2be:	bf00      	nop
 801b2c0:	200026d0 	.word	0x200026d0

0801b2c4 <_getpid_r>:
 801b2c4:	f7e8 bbba 	b.w	8003a3c <_getpid>

0801b2c8 <_vsiprintf_r>:
 801b2c8:	b500      	push	{lr}
 801b2ca:	b09b      	sub	sp, #108	; 0x6c
 801b2cc:	9100      	str	r1, [sp, #0]
 801b2ce:	9104      	str	r1, [sp, #16]
 801b2d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b2d4:	9105      	str	r1, [sp, #20]
 801b2d6:	9102      	str	r1, [sp, #8]
 801b2d8:	4905      	ldr	r1, [pc, #20]	; (801b2f0 <_vsiprintf_r+0x28>)
 801b2da:	9103      	str	r1, [sp, #12]
 801b2dc:	4669      	mov	r1, sp
 801b2de:	f001 fd9b 	bl	801ce18 <_svfiprintf_r>
 801b2e2:	9b00      	ldr	r3, [sp, #0]
 801b2e4:	2200      	movs	r2, #0
 801b2e6:	701a      	strb	r2, [r3, #0]
 801b2e8:	b01b      	add	sp, #108	; 0x6c
 801b2ea:	f85d fb04 	ldr.w	pc, [sp], #4
 801b2ee:	bf00      	nop
 801b2f0:	ffff0208 	.word	0xffff0208

0801b2f4 <vsiprintf>:
 801b2f4:	4613      	mov	r3, r2
 801b2f6:	460a      	mov	r2, r1
 801b2f8:	4601      	mov	r1, r0
 801b2fa:	4802      	ldr	r0, [pc, #8]	; (801b304 <vsiprintf+0x10>)
 801b2fc:	6800      	ldr	r0, [r0, #0]
 801b2fe:	f7ff bfe3 	b.w	801b2c8 <_vsiprintf_r>
 801b302:	bf00      	nop
 801b304:	20000250 	.word	0x20000250

0801b308 <__swbuf_r>:
 801b308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b30a:	460e      	mov	r6, r1
 801b30c:	4614      	mov	r4, r2
 801b30e:	4605      	mov	r5, r0
 801b310:	b118      	cbz	r0, 801b31a <__swbuf_r+0x12>
 801b312:	6983      	ldr	r3, [r0, #24]
 801b314:	b90b      	cbnz	r3, 801b31a <__swbuf_r+0x12>
 801b316:	f001 f84b 	bl	801c3b0 <__sinit>
 801b31a:	4b21      	ldr	r3, [pc, #132]	; (801b3a0 <__swbuf_r+0x98>)
 801b31c:	429c      	cmp	r4, r3
 801b31e:	d12b      	bne.n	801b378 <__swbuf_r+0x70>
 801b320:	686c      	ldr	r4, [r5, #4]
 801b322:	69a3      	ldr	r3, [r4, #24]
 801b324:	60a3      	str	r3, [r4, #8]
 801b326:	89a3      	ldrh	r3, [r4, #12]
 801b328:	071a      	lsls	r2, r3, #28
 801b32a:	d52f      	bpl.n	801b38c <__swbuf_r+0x84>
 801b32c:	6923      	ldr	r3, [r4, #16]
 801b32e:	b36b      	cbz	r3, 801b38c <__swbuf_r+0x84>
 801b330:	6923      	ldr	r3, [r4, #16]
 801b332:	6820      	ldr	r0, [r4, #0]
 801b334:	1ac0      	subs	r0, r0, r3
 801b336:	6963      	ldr	r3, [r4, #20]
 801b338:	b2f6      	uxtb	r6, r6
 801b33a:	4283      	cmp	r3, r0
 801b33c:	4637      	mov	r7, r6
 801b33e:	dc04      	bgt.n	801b34a <__swbuf_r+0x42>
 801b340:	4621      	mov	r1, r4
 801b342:	4628      	mov	r0, r5
 801b344:	f000 ffa0 	bl	801c288 <_fflush_r>
 801b348:	bb30      	cbnz	r0, 801b398 <__swbuf_r+0x90>
 801b34a:	68a3      	ldr	r3, [r4, #8]
 801b34c:	3b01      	subs	r3, #1
 801b34e:	60a3      	str	r3, [r4, #8]
 801b350:	6823      	ldr	r3, [r4, #0]
 801b352:	1c5a      	adds	r2, r3, #1
 801b354:	6022      	str	r2, [r4, #0]
 801b356:	701e      	strb	r6, [r3, #0]
 801b358:	6963      	ldr	r3, [r4, #20]
 801b35a:	3001      	adds	r0, #1
 801b35c:	4283      	cmp	r3, r0
 801b35e:	d004      	beq.n	801b36a <__swbuf_r+0x62>
 801b360:	89a3      	ldrh	r3, [r4, #12]
 801b362:	07db      	lsls	r3, r3, #31
 801b364:	d506      	bpl.n	801b374 <__swbuf_r+0x6c>
 801b366:	2e0a      	cmp	r6, #10
 801b368:	d104      	bne.n	801b374 <__swbuf_r+0x6c>
 801b36a:	4621      	mov	r1, r4
 801b36c:	4628      	mov	r0, r5
 801b36e:	f000 ff8b 	bl	801c288 <_fflush_r>
 801b372:	b988      	cbnz	r0, 801b398 <__swbuf_r+0x90>
 801b374:	4638      	mov	r0, r7
 801b376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b378:	4b0a      	ldr	r3, [pc, #40]	; (801b3a4 <__swbuf_r+0x9c>)
 801b37a:	429c      	cmp	r4, r3
 801b37c:	d101      	bne.n	801b382 <__swbuf_r+0x7a>
 801b37e:	68ac      	ldr	r4, [r5, #8]
 801b380:	e7cf      	b.n	801b322 <__swbuf_r+0x1a>
 801b382:	4b09      	ldr	r3, [pc, #36]	; (801b3a8 <__swbuf_r+0xa0>)
 801b384:	429c      	cmp	r4, r3
 801b386:	bf08      	it	eq
 801b388:	68ec      	ldreq	r4, [r5, #12]
 801b38a:	e7ca      	b.n	801b322 <__swbuf_r+0x1a>
 801b38c:	4621      	mov	r1, r4
 801b38e:	4628      	mov	r0, r5
 801b390:	f000 f80c 	bl	801b3ac <__swsetup_r>
 801b394:	2800      	cmp	r0, #0
 801b396:	d0cb      	beq.n	801b330 <__swbuf_r+0x28>
 801b398:	f04f 37ff 	mov.w	r7, #4294967295
 801b39c:	e7ea      	b.n	801b374 <__swbuf_r+0x6c>
 801b39e:	bf00      	nop
 801b3a0:	080202a0 	.word	0x080202a0
 801b3a4:	080202c0 	.word	0x080202c0
 801b3a8:	08020280 	.word	0x08020280

0801b3ac <__swsetup_r>:
 801b3ac:	4b32      	ldr	r3, [pc, #200]	; (801b478 <__swsetup_r+0xcc>)
 801b3ae:	b570      	push	{r4, r5, r6, lr}
 801b3b0:	681d      	ldr	r5, [r3, #0]
 801b3b2:	4606      	mov	r6, r0
 801b3b4:	460c      	mov	r4, r1
 801b3b6:	b125      	cbz	r5, 801b3c2 <__swsetup_r+0x16>
 801b3b8:	69ab      	ldr	r3, [r5, #24]
 801b3ba:	b913      	cbnz	r3, 801b3c2 <__swsetup_r+0x16>
 801b3bc:	4628      	mov	r0, r5
 801b3be:	f000 fff7 	bl	801c3b0 <__sinit>
 801b3c2:	4b2e      	ldr	r3, [pc, #184]	; (801b47c <__swsetup_r+0xd0>)
 801b3c4:	429c      	cmp	r4, r3
 801b3c6:	d10f      	bne.n	801b3e8 <__swsetup_r+0x3c>
 801b3c8:	686c      	ldr	r4, [r5, #4]
 801b3ca:	89a3      	ldrh	r3, [r4, #12]
 801b3cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b3d0:	0719      	lsls	r1, r3, #28
 801b3d2:	d42c      	bmi.n	801b42e <__swsetup_r+0x82>
 801b3d4:	06dd      	lsls	r5, r3, #27
 801b3d6:	d411      	bmi.n	801b3fc <__swsetup_r+0x50>
 801b3d8:	2309      	movs	r3, #9
 801b3da:	6033      	str	r3, [r6, #0]
 801b3dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b3e0:	81a3      	strh	r3, [r4, #12]
 801b3e2:	f04f 30ff 	mov.w	r0, #4294967295
 801b3e6:	e03e      	b.n	801b466 <__swsetup_r+0xba>
 801b3e8:	4b25      	ldr	r3, [pc, #148]	; (801b480 <__swsetup_r+0xd4>)
 801b3ea:	429c      	cmp	r4, r3
 801b3ec:	d101      	bne.n	801b3f2 <__swsetup_r+0x46>
 801b3ee:	68ac      	ldr	r4, [r5, #8]
 801b3f0:	e7eb      	b.n	801b3ca <__swsetup_r+0x1e>
 801b3f2:	4b24      	ldr	r3, [pc, #144]	; (801b484 <__swsetup_r+0xd8>)
 801b3f4:	429c      	cmp	r4, r3
 801b3f6:	bf08      	it	eq
 801b3f8:	68ec      	ldreq	r4, [r5, #12]
 801b3fa:	e7e6      	b.n	801b3ca <__swsetup_r+0x1e>
 801b3fc:	0758      	lsls	r0, r3, #29
 801b3fe:	d512      	bpl.n	801b426 <__swsetup_r+0x7a>
 801b400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b402:	b141      	cbz	r1, 801b416 <__swsetup_r+0x6a>
 801b404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b408:	4299      	cmp	r1, r3
 801b40a:	d002      	beq.n	801b412 <__swsetup_r+0x66>
 801b40c:	4630      	mov	r0, r6
 801b40e:	f7fe ffd5 	bl	801a3bc <_free_r>
 801b412:	2300      	movs	r3, #0
 801b414:	6363      	str	r3, [r4, #52]	; 0x34
 801b416:	89a3      	ldrh	r3, [r4, #12]
 801b418:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b41c:	81a3      	strh	r3, [r4, #12]
 801b41e:	2300      	movs	r3, #0
 801b420:	6063      	str	r3, [r4, #4]
 801b422:	6923      	ldr	r3, [r4, #16]
 801b424:	6023      	str	r3, [r4, #0]
 801b426:	89a3      	ldrh	r3, [r4, #12]
 801b428:	f043 0308 	orr.w	r3, r3, #8
 801b42c:	81a3      	strh	r3, [r4, #12]
 801b42e:	6923      	ldr	r3, [r4, #16]
 801b430:	b94b      	cbnz	r3, 801b446 <__swsetup_r+0x9a>
 801b432:	89a3      	ldrh	r3, [r4, #12]
 801b434:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b43c:	d003      	beq.n	801b446 <__swsetup_r+0x9a>
 801b43e:	4621      	mov	r1, r4
 801b440:	4630      	mov	r0, r6
 801b442:	f001 f87d 	bl	801c540 <__smakebuf_r>
 801b446:	89a0      	ldrh	r0, [r4, #12]
 801b448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b44c:	f010 0301 	ands.w	r3, r0, #1
 801b450:	d00a      	beq.n	801b468 <__swsetup_r+0xbc>
 801b452:	2300      	movs	r3, #0
 801b454:	60a3      	str	r3, [r4, #8]
 801b456:	6963      	ldr	r3, [r4, #20]
 801b458:	425b      	negs	r3, r3
 801b45a:	61a3      	str	r3, [r4, #24]
 801b45c:	6923      	ldr	r3, [r4, #16]
 801b45e:	b943      	cbnz	r3, 801b472 <__swsetup_r+0xc6>
 801b460:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b464:	d1ba      	bne.n	801b3dc <__swsetup_r+0x30>
 801b466:	bd70      	pop	{r4, r5, r6, pc}
 801b468:	0781      	lsls	r1, r0, #30
 801b46a:	bf58      	it	pl
 801b46c:	6963      	ldrpl	r3, [r4, #20]
 801b46e:	60a3      	str	r3, [r4, #8]
 801b470:	e7f4      	b.n	801b45c <__swsetup_r+0xb0>
 801b472:	2000      	movs	r0, #0
 801b474:	e7f7      	b.n	801b466 <__swsetup_r+0xba>
 801b476:	bf00      	nop
 801b478:	20000250 	.word	0x20000250
 801b47c:	080202a0 	.word	0x080202a0
 801b480:	080202c0 	.word	0x080202c0
 801b484:	08020280 	.word	0x08020280

0801b488 <quorem>:
 801b488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b48c:	6903      	ldr	r3, [r0, #16]
 801b48e:	690c      	ldr	r4, [r1, #16]
 801b490:	42a3      	cmp	r3, r4
 801b492:	4607      	mov	r7, r0
 801b494:	f2c0 8081 	blt.w	801b59a <quorem+0x112>
 801b498:	3c01      	subs	r4, #1
 801b49a:	f101 0814 	add.w	r8, r1, #20
 801b49e:	f100 0514 	add.w	r5, r0, #20
 801b4a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b4a6:	9301      	str	r3, [sp, #4]
 801b4a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b4ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b4b0:	3301      	adds	r3, #1
 801b4b2:	429a      	cmp	r2, r3
 801b4b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b4b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b4bc:	fbb2 f6f3 	udiv	r6, r2, r3
 801b4c0:	d331      	bcc.n	801b526 <quorem+0x9e>
 801b4c2:	f04f 0e00 	mov.w	lr, #0
 801b4c6:	4640      	mov	r0, r8
 801b4c8:	46ac      	mov	ip, r5
 801b4ca:	46f2      	mov	sl, lr
 801b4cc:	f850 2b04 	ldr.w	r2, [r0], #4
 801b4d0:	b293      	uxth	r3, r2
 801b4d2:	fb06 e303 	mla	r3, r6, r3, lr
 801b4d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b4da:	b29b      	uxth	r3, r3
 801b4dc:	ebaa 0303 	sub.w	r3, sl, r3
 801b4e0:	f8dc a000 	ldr.w	sl, [ip]
 801b4e4:	0c12      	lsrs	r2, r2, #16
 801b4e6:	fa13 f38a 	uxtah	r3, r3, sl
 801b4ea:	fb06 e202 	mla	r2, r6, r2, lr
 801b4ee:	9300      	str	r3, [sp, #0]
 801b4f0:	9b00      	ldr	r3, [sp, #0]
 801b4f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b4f6:	b292      	uxth	r2, r2
 801b4f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b4fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b500:	f8bd 3000 	ldrh.w	r3, [sp]
 801b504:	4581      	cmp	r9, r0
 801b506:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b50a:	f84c 3b04 	str.w	r3, [ip], #4
 801b50e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b512:	d2db      	bcs.n	801b4cc <quorem+0x44>
 801b514:	f855 300b 	ldr.w	r3, [r5, fp]
 801b518:	b92b      	cbnz	r3, 801b526 <quorem+0x9e>
 801b51a:	9b01      	ldr	r3, [sp, #4]
 801b51c:	3b04      	subs	r3, #4
 801b51e:	429d      	cmp	r5, r3
 801b520:	461a      	mov	r2, r3
 801b522:	d32e      	bcc.n	801b582 <quorem+0xfa>
 801b524:	613c      	str	r4, [r7, #16]
 801b526:	4638      	mov	r0, r7
 801b528:	f001 faea 	bl	801cb00 <__mcmp>
 801b52c:	2800      	cmp	r0, #0
 801b52e:	db24      	blt.n	801b57a <quorem+0xf2>
 801b530:	3601      	adds	r6, #1
 801b532:	4628      	mov	r0, r5
 801b534:	f04f 0c00 	mov.w	ip, #0
 801b538:	f858 2b04 	ldr.w	r2, [r8], #4
 801b53c:	f8d0 e000 	ldr.w	lr, [r0]
 801b540:	b293      	uxth	r3, r2
 801b542:	ebac 0303 	sub.w	r3, ip, r3
 801b546:	0c12      	lsrs	r2, r2, #16
 801b548:	fa13 f38e 	uxtah	r3, r3, lr
 801b54c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b550:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b554:	b29b      	uxth	r3, r3
 801b556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b55a:	45c1      	cmp	r9, r8
 801b55c:	f840 3b04 	str.w	r3, [r0], #4
 801b560:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b564:	d2e8      	bcs.n	801b538 <quorem+0xb0>
 801b566:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b56a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b56e:	b922      	cbnz	r2, 801b57a <quorem+0xf2>
 801b570:	3b04      	subs	r3, #4
 801b572:	429d      	cmp	r5, r3
 801b574:	461a      	mov	r2, r3
 801b576:	d30a      	bcc.n	801b58e <quorem+0x106>
 801b578:	613c      	str	r4, [r7, #16]
 801b57a:	4630      	mov	r0, r6
 801b57c:	b003      	add	sp, #12
 801b57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b582:	6812      	ldr	r2, [r2, #0]
 801b584:	3b04      	subs	r3, #4
 801b586:	2a00      	cmp	r2, #0
 801b588:	d1cc      	bne.n	801b524 <quorem+0x9c>
 801b58a:	3c01      	subs	r4, #1
 801b58c:	e7c7      	b.n	801b51e <quorem+0x96>
 801b58e:	6812      	ldr	r2, [r2, #0]
 801b590:	3b04      	subs	r3, #4
 801b592:	2a00      	cmp	r2, #0
 801b594:	d1f0      	bne.n	801b578 <quorem+0xf0>
 801b596:	3c01      	subs	r4, #1
 801b598:	e7eb      	b.n	801b572 <quorem+0xea>
 801b59a:	2000      	movs	r0, #0
 801b59c:	e7ee      	b.n	801b57c <quorem+0xf4>
	...

0801b5a0 <_dtoa_r>:
 801b5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5a4:	ed2d 8b04 	vpush	{d8-d9}
 801b5a8:	ec57 6b10 	vmov	r6, r7, d0
 801b5ac:	b093      	sub	sp, #76	; 0x4c
 801b5ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b5b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b5b4:	9106      	str	r1, [sp, #24]
 801b5b6:	ee10 aa10 	vmov	sl, s0
 801b5ba:	4604      	mov	r4, r0
 801b5bc:	9209      	str	r2, [sp, #36]	; 0x24
 801b5be:	930c      	str	r3, [sp, #48]	; 0x30
 801b5c0:	46bb      	mov	fp, r7
 801b5c2:	b975      	cbnz	r5, 801b5e2 <_dtoa_r+0x42>
 801b5c4:	2010      	movs	r0, #16
 801b5c6:	f7fe fea3 	bl	801a310 <malloc>
 801b5ca:	4602      	mov	r2, r0
 801b5cc:	6260      	str	r0, [r4, #36]	; 0x24
 801b5ce:	b920      	cbnz	r0, 801b5da <_dtoa_r+0x3a>
 801b5d0:	4ba7      	ldr	r3, [pc, #668]	; (801b870 <_dtoa_r+0x2d0>)
 801b5d2:	21ea      	movs	r1, #234	; 0xea
 801b5d4:	48a7      	ldr	r0, [pc, #668]	; (801b874 <_dtoa_r+0x2d4>)
 801b5d6:	f7fe fe35 	bl	801a244 <__assert_func>
 801b5da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b5de:	6005      	str	r5, [r0, #0]
 801b5e0:	60c5      	str	r5, [r0, #12]
 801b5e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b5e4:	6819      	ldr	r1, [r3, #0]
 801b5e6:	b151      	cbz	r1, 801b5fe <_dtoa_r+0x5e>
 801b5e8:	685a      	ldr	r2, [r3, #4]
 801b5ea:	604a      	str	r2, [r1, #4]
 801b5ec:	2301      	movs	r3, #1
 801b5ee:	4093      	lsls	r3, r2
 801b5f0:	608b      	str	r3, [r1, #8]
 801b5f2:	4620      	mov	r0, r4
 801b5f4:	f001 f842 	bl	801c67c <_Bfree>
 801b5f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b5fa:	2200      	movs	r2, #0
 801b5fc:	601a      	str	r2, [r3, #0]
 801b5fe:	1e3b      	subs	r3, r7, #0
 801b600:	bfaa      	itet	ge
 801b602:	2300      	movge	r3, #0
 801b604:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801b608:	f8c8 3000 	strge.w	r3, [r8]
 801b60c:	4b9a      	ldr	r3, [pc, #616]	; (801b878 <_dtoa_r+0x2d8>)
 801b60e:	bfbc      	itt	lt
 801b610:	2201      	movlt	r2, #1
 801b612:	f8c8 2000 	strlt.w	r2, [r8]
 801b616:	ea33 030b 	bics.w	r3, r3, fp
 801b61a:	d11b      	bne.n	801b654 <_dtoa_r+0xb4>
 801b61c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b61e:	f242 730f 	movw	r3, #9999	; 0x270f
 801b622:	6013      	str	r3, [r2, #0]
 801b624:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b628:	4333      	orrs	r3, r6
 801b62a:	f000 8592 	beq.w	801c152 <_dtoa_r+0xbb2>
 801b62e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b630:	b963      	cbnz	r3, 801b64c <_dtoa_r+0xac>
 801b632:	4b92      	ldr	r3, [pc, #584]	; (801b87c <_dtoa_r+0x2dc>)
 801b634:	e022      	b.n	801b67c <_dtoa_r+0xdc>
 801b636:	4b92      	ldr	r3, [pc, #584]	; (801b880 <_dtoa_r+0x2e0>)
 801b638:	9301      	str	r3, [sp, #4]
 801b63a:	3308      	adds	r3, #8
 801b63c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b63e:	6013      	str	r3, [r2, #0]
 801b640:	9801      	ldr	r0, [sp, #4]
 801b642:	b013      	add	sp, #76	; 0x4c
 801b644:	ecbd 8b04 	vpop	{d8-d9}
 801b648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b64c:	4b8b      	ldr	r3, [pc, #556]	; (801b87c <_dtoa_r+0x2dc>)
 801b64e:	9301      	str	r3, [sp, #4]
 801b650:	3303      	adds	r3, #3
 801b652:	e7f3      	b.n	801b63c <_dtoa_r+0x9c>
 801b654:	2200      	movs	r2, #0
 801b656:	2300      	movs	r3, #0
 801b658:	4650      	mov	r0, sl
 801b65a:	4659      	mov	r1, fp
 801b65c:	f7e5 fa3e 	bl	8000adc <__aeabi_dcmpeq>
 801b660:	ec4b ab19 	vmov	d9, sl, fp
 801b664:	4680      	mov	r8, r0
 801b666:	b158      	cbz	r0, 801b680 <_dtoa_r+0xe0>
 801b668:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b66a:	2301      	movs	r3, #1
 801b66c:	6013      	str	r3, [r2, #0]
 801b66e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b670:	2b00      	cmp	r3, #0
 801b672:	f000 856b 	beq.w	801c14c <_dtoa_r+0xbac>
 801b676:	4883      	ldr	r0, [pc, #524]	; (801b884 <_dtoa_r+0x2e4>)
 801b678:	6018      	str	r0, [r3, #0]
 801b67a:	1e43      	subs	r3, r0, #1
 801b67c:	9301      	str	r3, [sp, #4]
 801b67e:	e7df      	b.n	801b640 <_dtoa_r+0xa0>
 801b680:	ec4b ab10 	vmov	d0, sl, fp
 801b684:	aa10      	add	r2, sp, #64	; 0x40
 801b686:	a911      	add	r1, sp, #68	; 0x44
 801b688:	4620      	mov	r0, r4
 801b68a:	f001 fadf 	bl	801cc4c <__d2b>
 801b68e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801b692:	ee08 0a10 	vmov	s16, r0
 801b696:	2d00      	cmp	r5, #0
 801b698:	f000 8084 	beq.w	801b7a4 <_dtoa_r+0x204>
 801b69c:	ee19 3a90 	vmov	r3, s19
 801b6a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b6a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b6a8:	4656      	mov	r6, sl
 801b6aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b6ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b6b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801b6b6:	4b74      	ldr	r3, [pc, #464]	; (801b888 <_dtoa_r+0x2e8>)
 801b6b8:	2200      	movs	r2, #0
 801b6ba:	4630      	mov	r0, r6
 801b6bc:	4639      	mov	r1, r7
 801b6be:	f7e4 fded 	bl	800029c <__aeabi_dsub>
 801b6c2:	a365      	add	r3, pc, #404	; (adr r3, 801b858 <_dtoa_r+0x2b8>)
 801b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6c8:	f7e4 ffa0 	bl	800060c <__aeabi_dmul>
 801b6cc:	a364      	add	r3, pc, #400	; (adr r3, 801b860 <_dtoa_r+0x2c0>)
 801b6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6d2:	f7e4 fde5 	bl	80002a0 <__adddf3>
 801b6d6:	4606      	mov	r6, r0
 801b6d8:	4628      	mov	r0, r5
 801b6da:	460f      	mov	r7, r1
 801b6dc:	f7e4 ff2c 	bl	8000538 <__aeabi_i2d>
 801b6e0:	a361      	add	r3, pc, #388	; (adr r3, 801b868 <_dtoa_r+0x2c8>)
 801b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6e6:	f7e4 ff91 	bl	800060c <__aeabi_dmul>
 801b6ea:	4602      	mov	r2, r0
 801b6ec:	460b      	mov	r3, r1
 801b6ee:	4630      	mov	r0, r6
 801b6f0:	4639      	mov	r1, r7
 801b6f2:	f7e4 fdd5 	bl	80002a0 <__adddf3>
 801b6f6:	4606      	mov	r6, r0
 801b6f8:	460f      	mov	r7, r1
 801b6fa:	f7e5 fa37 	bl	8000b6c <__aeabi_d2iz>
 801b6fe:	2200      	movs	r2, #0
 801b700:	9000      	str	r0, [sp, #0]
 801b702:	2300      	movs	r3, #0
 801b704:	4630      	mov	r0, r6
 801b706:	4639      	mov	r1, r7
 801b708:	f7e5 f9f2 	bl	8000af0 <__aeabi_dcmplt>
 801b70c:	b150      	cbz	r0, 801b724 <_dtoa_r+0x184>
 801b70e:	9800      	ldr	r0, [sp, #0]
 801b710:	f7e4 ff12 	bl	8000538 <__aeabi_i2d>
 801b714:	4632      	mov	r2, r6
 801b716:	463b      	mov	r3, r7
 801b718:	f7e5 f9e0 	bl	8000adc <__aeabi_dcmpeq>
 801b71c:	b910      	cbnz	r0, 801b724 <_dtoa_r+0x184>
 801b71e:	9b00      	ldr	r3, [sp, #0]
 801b720:	3b01      	subs	r3, #1
 801b722:	9300      	str	r3, [sp, #0]
 801b724:	9b00      	ldr	r3, [sp, #0]
 801b726:	2b16      	cmp	r3, #22
 801b728:	d85a      	bhi.n	801b7e0 <_dtoa_r+0x240>
 801b72a:	9a00      	ldr	r2, [sp, #0]
 801b72c:	4b57      	ldr	r3, [pc, #348]	; (801b88c <_dtoa_r+0x2ec>)
 801b72e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b732:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b736:	ec51 0b19 	vmov	r0, r1, d9
 801b73a:	f7e5 f9d9 	bl	8000af0 <__aeabi_dcmplt>
 801b73e:	2800      	cmp	r0, #0
 801b740:	d050      	beq.n	801b7e4 <_dtoa_r+0x244>
 801b742:	9b00      	ldr	r3, [sp, #0]
 801b744:	3b01      	subs	r3, #1
 801b746:	9300      	str	r3, [sp, #0]
 801b748:	2300      	movs	r3, #0
 801b74a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b74c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b74e:	1b5d      	subs	r5, r3, r5
 801b750:	1e6b      	subs	r3, r5, #1
 801b752:	9305      	str	r3, [sp, #20]
 801b754:	bf45      	ittet	mi
 801b756:	f1c5 0301 	rsbmi	r3, r5, #1
 801b75a:	9304      	strmi	r3, [sp, #16]
 801b75c:	2300      	movpl	r3, #0
 801b75e:	2300      	movmi	r3, #0
 801b760:	bf4c      	ite	mi
 801b762:	9305      	strmi	r3, [sp, #20]
 801b764:	9304      	strpl	r3, [sp, #16]
 801b766:	9b00      	ldr	r3, [sp, #0]
 801b768:	2b00      	cmp	r3, #0
 801b76a:	db3d      	blt.n	801b7e8 <_dtoa_r+0x248>
 801b76c:	9b05      	ldr	r3, [sp, #20]
 801b76e:	9a00      	ldr	r2, [sp, #0]
 801b770:	920a      	str	r2, [sp, #40]	; 0x28
 801b772:	4413      	add	r3, r2
 801b774:	9305      	str	r3, [sp, #20]
 801b776:	2300      	movs	r3, #0
 801b778:	9307      	str	r3, [sp, #28]
 801b77a:	9b06      	ldr	r3, [sp, #24]
 801b77c:	2b09      	cmp	r3, #9
 801b77e:	f200 8089 	bhi.w	801b894 <_dtoa_r+0x2f4>
 801b782:	2b05      	cmp	r3, #5
 801b784:	bfc4      	itt	gt
 801b786:	3b04      	subgt	r3, #4
 801b788:	9306      	strgt	r3, [sp, #24]
 801b78a:	9b06      	ldr	r3, [sp, #24]
 801b78c:	f1a3 0302 	sub.w	r3, r3, #2
 801b790:	bfcc      	ite	gt
 801b792:	2500      	movgt	r5, #0
 801b794:	2501      	movle	r5, #1
 801b796:	2b03      	cmp	r3, #3
 801b798:	f200 8087 	bhi.w	801b8aa <_dtoa_r+0x30a>
 801b79c:	e8df f003 	tbb	[pc, r3]
 801b7a0:	59383a2d 	.word	0x59383a2d
 801b7a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801b7a8:	441d      	add	r5, r3
 801b7aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b7ae:	2b20      	cmp	r3, #32
 801b7b0:	bfc1      	itttt	gt
 801b7b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b7b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b7ba:	fa0b f303 	lslgt.w	r3, fp, r3
 801b7be:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b7c2:	bfda      	itte	le
 801b7c4:	f1c3 0320 	rsble	r3, r3, #32
 801b7c8:	fa06 f003 	lslle.w	r0, r6, r3
 801b7cc:	4318      	orrgt	r0, r3
 801b7ce:	f7e4 fea3 	bl	8000518 <__aeabi_ui2d>
 801b7d2:	2301      	movs	r3, #1
 801b7d4:	4606      	mov	r6, r0
 801b7d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b7da:	3d01      	subs	r5, #1
 801b7dc:	930e      	str	r3, [sp, #56]	; 0x38
 801b7de:	e76a      	b.n	801b6b6 <_dtoa_r+0x116>
 801b7e0:	2301      	movs	r3, #1
 801b7e2:	e7b2      	b.n	801b74a <_dtoa_r+0x1aa>
 801b7e4:	900b      	str	r0, [sp, #44]	; 0x2c
 801b7e6:	e7b1      	b.n	801b74c <_dtoa_r+0x1ac>
 801b7e8:	9b04      	ldr	r3, [sp, #16]
 801b7ea:	9a00      	ldr	r2, [sp, #0]
 801b7ec:	1a9b      	subs	r3, r3, r2
 801b7ee:	9304      	str	r3, [sp, #16]
 801b7f0:	4253      	negs	r3, r2
 801b7f2:	9307      	str	r3, [sp, #28]
 801b7f4:	2300      	movs	r3, #0
 801b7f6:	930a      	str	r3, [sp, #40]	; 0x28
 801b7f8:	e7bf      	b.n	801b77a <_dtoa_r+0x1da>
 801b7fa:	2300      	movs	r3, #0
 801b7fc:	9308      	str	r3, [sp, #32]
 801b7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b800:	2b00      	cmp	r3, #0
 801b802:	dc55      	bgt.n	801b8b0 <_dtoa_r+0x310>
 801b804:	2301      	movs	r3, #1
 801b806:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b80a:	461a      	mov	r2, r3
 801b80c:	9209      	str	r2, [sp, #36]	; 0x24
 801b80e:	e00c      	b.n	801b82a <_dtoa_r+0x28a>
 801b810:	2301      	movs	r3, #1
 801b812:	e7f3      	b.n	801b7fc <_dtoa_r+0x25c>
 801b814:	2300      	movs	r3, #0
 801b816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b818:	9308      	str	r3, [sp, #32]
 801b81a:	9b00      	ldr	r3, [sp, #0]
 801b81c:	4413      	add	r3, r2
 801b81e:	9302      	str	r3, [sp, #8]
 801b820:	3301      	adds	r3, #1
 801b822:	2b01      	cmp	r3, #1
 801b824:	9303      	str	r3, [sp, #12]
 801b826:	bfb8      	it	lt
 801b828:	2301      	movlt	r3, #1
 801b82a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b82c:	2200      	movs	r2, #0
 801b82e:	6042      	str	r2, [r0, #4]
 801b830:	2204      	movs	r2, #4
 801b832:	f102 0614 	add.w	r6, r2, #20
 801b836:	429e      	cmp	r6, r3
 801b838:	6841      	ldr	r1, [r0, #4]
 801b83a:	d93d      	bls.n	801b8b8 <_dtoa_r+0x318>
 801b83c:	4620      	mov	r0, r4
 801b83e:	f000 fedd 	bl	801c5fc <_Balloc>
 801b842:	9001      	str	r0, [sp, #4]
 801b844:	2800      	cmp	r0, #0
 801b846:	d13b      	bne.n	801b8c0 <_dtoa_r+0x320>
 801b848:	4b11      	ldr	r3, [pc, #68]	; (801b890 <_dtoa_r+0x2f0>)
 801b84a:	4602      	mov	r2, r0
 801b84c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b850:	e6c0      	b.n	801b5d4 <_dtoa_r+0x34>
 801b852:	2301      	movs	r3, #1
 801b854:	e7df      	b.n	801b816 <_dtoa_r+0x276>
 801b856:	bf00      	nop
 801b858:	636f4361 	.word	0x636f4361
 801b85c:	3fd287a7 	.word	0x3fd287a7
 801b860:	8b60c8b3 	.word	0x8b60c8b3
 801b864:	3fc68a28 	.word	0x3fc68a28
 801b868:	509f79fb 	.word	0x509f79fb
 801b86c:	3fd34413 	.word	0x3fd34413
 801b870:	080201fb 	.word	0x080201fb
 801b874:	08020212 	.word	0x08020212
 801b878:	7ff00000 	.word	0x7ff00000
 801b87c:	080201f7 	.word	0x080201f7
 801b880:	080201ee 	.word	0x080201ee
 801b884:	080200ca 	.word	0x080200ca
 801b888:	3ff80000 	.word	0x3ff80000
 801b88c:	08020370 	.word	0x08020370
 801b890:	0802026d 	.word	0x0802026d
 801b894:	2501      	movs	r5, #1
 801b896:	2300      	movs	r3, #0
 801b898:	9306      	str	r3, [sp, #24]
 801b89a:	9508      	str	r5, [sp, #32]
 801b89c:	f04f 33ff 	mov.w	r3, #4294967295
 801b8a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b8a4:	2200      	movs	r2, #0
 801b8a6:	2312      	movs	r3, #18
 801b8a8:	e7b0      	b.n	801b80c <_dtoa_r+0x26c>
 801b8aa:	2301      	movs	r3, #1
 801b8ac:	9308      	str	r3, [sp, #32]
 801b8ae:	e7f5      	b.n	801b89c <_dtoa_r+0x2fc>
 801b8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b8b6:	e7b8      	b.n	801b82a <_dtoa_r+0x28a>
 801b8b8:	3101      	adds	r1, #1
 801b8ba:	6041      	str	r1, [r0, #4]
 801b8bc:	0052      	lsls	r2, r2, #1
 801b8be:	e7b8      	b.n	801b832 <_dtoa_r+0x292>
 801b8c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b8c2:	9a01      	ldr	r2, [sp, #4]
 801b8c4:	601a      	str	r2, [r3, #0]
 801b8c6:	9b03      	ldr	r3, [sp, #12]
 801b8c8:	2b0e      	cmp	r3, #14
 801b8ca:	f200 809d 	bhi.w	801ba08 <_dtoa_r+0x468>
 801b8ce:	2d00      	cmp	r5, #0
 801b8d0:	f000 809a 	beq.w	801ba08 <_dtoa_r+0x468>
 801b8d4:	9b00      	ldr	r3, [sp, #0]
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	dd32      	ble.n	801b940 <_dtoa_r+0x3a0>
 801b8da:	4ab7      	ldr	r2, [pc, #732]	; (801bbb8 <_dtoa_r+0x618>)
 801b8dc:	f003 030f 	and.w	r3, r3, #15
 801b8e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b8e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b8e8:	9b00      	ldr	r3, [sp, #0]
 801b8ea:	05d8      	lsls	r0, r3, #23
 801b8ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 801b8f0:	d516      	bpl.n	801b920 <_dtoa_r+0x380>
 801b8f2:	4bb2      	ldr	r3, [pc, #712]	; (801bbbc <_dtoa_r+0x61c>)
 801b8f4:	ec51 0b19 	vmov	r0, r1, d9
 801b8f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b8fc:	f7e4 ffb0 	bl	8000860 <__aeabi_ddiv>
 801b900:	f007 070f 	and.w	r7, r7, #15
 801b904:	4682      	mov	sl, r0
 801b906:	468b      	mov	fp, r1
 801b908:	2503      	movs	r5, #3
 801b90a:	4eac      	ldr	r6, [pc, #688]	; (801bbbc <_dtoa_r+0x61c>)
 801b90c:	b957      	cbnz	r7, 801b924 <_dtoa_r+0x384>
 801b90e:	4642      	mov	r2, r8
 801b910:	464b      	mov	r3, r9
 801b912:	4650      	mov	r0, sl
 801b914:	4659      	mov	r1, fp
 801b916:	f7e4 ffa3 	bl	8000860 <__aeabi_ddiv>
 801b91a:	4682      	mov	sl, r0
 801b91c:	468b      	mov	fp, r1
 801b91e:	e028      	b.n	801b972 <_dtoa_r+0x3d2>
 801b920:	2502      	movs	r5, #2
 801b922:	e7f2      	b.n	801b90a <_dtoa_r+0x36a>
 801b924:	07f9      	lsls	r1, r7, #31
 801b926:	d508      	bpl.n	801b93a <_dtoa_r+0x39a>
 801b928:	4640      	mov	r0, r8
 801b92a:	4649      	mov	r1, r9
 801b92c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b930:	f7e4 fe6c 	bl	800060c <__aeabi_dmul>
 801b934:	3501      	adds	r5, #1
 801b936:	4680      	mov	r8, r0
 801b938:	4689      	mov	r9, r1
 801b93a:	107f      	asrs	r7, r7, #1
 801b93c:	3608      	adds	r6, #8
 801b93e:	e7e5      	b.n	801b90c <_dtoa_r+0x36c>
 801b940:	f000 809b 	beq.w	801ba7a <_dtoa_r+0x4da>
 801b944:	9b00      	ldr	r3, [sp, #0]
 801b946:	4f9d      	ldr	r7, [pc, #628]	; (801bbbc <_dtoa_r+0x61c>)
 801b948:	425e      	negs	r6, r3
 801b94a:	4b9b      	ldr	r3, [pc, #620]	; (801bbb8 <_dtoa_r+0x618>)
 801b94c:	f006 020f 	and.w	r2, r6, #15
 801b950:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b958:	ec51 0b19 	vmov	r0, r1, d9
 801b95c:	f7e4 fe56 	bl	800060c <__aeabi_dmul>
 801b960:	1136      	asrs	r6, r6, #4
 801b962:	4682      	mov	sl, r0
 801b964:	468b      	mov	fp, r1
 801b966:	2300      	movs	r3, #0
 801b968:	2502      	movs	r5, #2
 801b96a:	2e00      	cmp	r6, #0
 801b96c:	d17a      	bne.n	801ba64 <_dtoa_r+0x4c4>
 801b96e:	2b00      	cmp	r3, #0
 801b970:	d1d3      	bne.n	801b91a <_dtoa_r+0x37a>
 801b972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b974:	2b00      	cmp	r3, #0
 801b976:	f000 8082 	beq.w	801ba7e <_dtoa_r+0x4de>
 801b97a:	4b91      	ldr	r3, [pc, #580]	; (801bbc0 <_dtoa_r+0x620>)
 801b97c:	2200      	movs	r2, #0
 801b97e:	4650      	mov	r0, sl
 801b980:	4659      	mov	r1, fp
 801b982:	f7e5 f8b5 	bl	8000af0 <__aeabi_dcmplt>
 801b986:	2800      	cmp	r0, #0
 801b988:	d079      	beq.n	801ba7e <_dtoa_r+0x4de>
 801b98a:	9b03      	ldr	r3, [sp, #12]
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	d076      	beq.n	801ba7e <_dtoa_r+0x4de>
 801b990:	9b02      	ldr	r3, [sp, #8]
 801b992:	2b00      	cmp	r3, #0
 801b994:	dd36      	ble.n	801ba04 <_dtoa_r+0x464>
 801b996:	9b00      	ldr	r3, [sp, #0]
 801b998:	4650      	mov	r0, sl
 801b99a:	4659      	mov	r1, fp
 801b99c:	1e5f      	subs	r7, r3, #1
 801b99e:	2200      	movs	r2, #0
 801b9a0:	4b88      	ldr	r3, [pc, #544]	; (801bbc4 <_dtoa_r+0x624>)
 801b9a2:	f7e4 fe33 	bl	800060c <__aeabi_dmul>
 801b9a6:	9e02      	ldr	r6, [sp, #8]
 801b9a8:	4682      	mov	sl, r0
 801b9aa:	468b      	mov	fp, r1
 801b9ac:	3501      	adds	r5, #1
 801b9ae:	4628      	mov	r0, r5
 801b9b0:	f7e4 fdc2 	bl	8000538 <__aeabi_i2d>
 801b9b4:	4652      	mov	r2, sl
 801b9b6:	465b      	mov	r3, fp
 801b9b8:	f7e4 fe28 	bl	800060c <__aeabi_dmul>
 801b9bc:	4b82      	ldr	r3, [pc, #520]	; (801bbc8 <_dtoa_r+0x628>)
 801b9be:	2200      	movs	r2, #0
 801b9c0:	f7e4 fc6e 	bl	80002a0 <__adddf3>
 801b9c4:	46d0      	mov	r8, sl
 801b9c6:	46d9      	mov	r9, fp
 801b9c8:	4682      	mov	sl, r0
 801b9ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801b9ce:	2e00      	cmp	r6, #0
 801b9d0:	d158      	bne.n	801ba84 <_dtoa_r+0x4e4>
 801b9d2:	4b7e      	ldr	r3, [pc, #504]	; (801bbcc <_dtoa_r+0x62c>)
 801b9d4:	2200      	movs	r2, #0
 801b9d6:	4640      	mov	r0, r8
 801b9d8:	4649      	mov	r1, r9
 801b9da:	f7e4 fc5f 	bl	800029c <__aeabi_dsub>
 801b9de:	4652      	mov	r2, sl
 801b9e0:	465b      	mov	r3, fp
 801b9e2:	4680      	mov	r8, r0
 801b9e4:	4689      	mov	r9, r1
 801b9e6:	f7e5 f8a1 	bl	8000b2c <__aeabi_dcmpgt>
 801b9ea:	2800      	cmp	r0, #0
 801b9ec:	f040 8295 	bne.w	801bf1a <_dtoa_r+0x97a>
 801b9f0:	4652      	mov	r2, sl
 801b9f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b9f6:	4640      	mov	r0, r8
 801b9f8:	4649      	mov	r1, r9
 801b9fa:	f7e5 f879 	bl	8000af0 <__aeabi_dcmplt>
 801b9fe:	2800      	cmp	r0, #0
 801ba00:	f040 8289 	bne.w	801bf16 <_dtoa_r+0x976>
 801ba04:	ec5b ab19 	vmov	sl, fp, d9
 801ba08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	f2c0 8148 	blt.w	801bca0 <_dtoa_r+0x700>
 801ba10:	9a00      	ldr	r2, [sp, #0]
 801ba12:	2a0e      	cmp	r2, #14
 801ba14:	f300 8144 	bgt.w	801bca0 <_dtoa_r+0x700>
 801ba18:	4b67      	ldr	r3, [pc, #412]	; (801bbb8 <_dtoa_r+0x618>)
 801ba1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ba1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ba22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	f280 80d5 	bge.w	801bbd4 <_dtoa_r+0x634>
 801ba2a:	9b03      	ldr	r3, [sp, #12]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	f300 80d1 	bgt.w	801bbd4 <_dtoa_r+0x634>
 801ba32:	f040 826f 	bne.w	801bf14 <_dtoa_r+0x974>
 801ba36:	4b65      	ldr	r3, [pc, #404]	; (801bbcc <_dtoa_r+0x62c>)
 801ba38:	2200      	movs	r2, #0
 801ba3a:	4640      	mov	r0, r8
 801ba3c:	4649      	mov	r1, r9
 801ba3e:	f7e4 fde5 	bl	800060c <__aeabi_dmul>
 801ba42:	4652      	mov	r2, sl
 801ba44:	465b      	mov	r3, fp
 801ba46:	f7e5 f867 	bl	8000b18 <__aeabi_dcmpge>
 801ba4a:	9e03      	ldr	r6, [sp, #12]
 801ba4c:	4637      	mov	r7, r6
 801ba4e:	2800      	cmp	r0, #0
 801ba50:	f040 8245 	bne.w	801bede <_dtoa_r+0x93e>
 801ba54:	9d01      	ldr	r5, [sp, #4]
 801ba56:	2331      	movs	r3, #49	; 0x31
 801ba58:	f805 3b01 	strb.w	r3, [r5], #1
 801ba5c:	9b00      	ldr	r3, [sp, #0]
 801ba5e:	3301      	adds	r3, #1
 801ba60:	9300      	str	r3, [sp, #0]
 801ba62:	e240      	b.n	801bee6 <_dtoa_r+0x946>
 801ba64:	07f2      	lsls	r2, r6, #31
 801ba66:	d505      	bpl.n	801ba74 <_dtoa_r+0x4d4>
 801ba68:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ba6c:	f7e4 fdce 	bl	800060c <__aeabi_dmul>
 801ba70:	3501      	adds	r5, #1
 801ba72:	2301      	movs	r3, #1
 801ba74:	1076      	asrs	r6, r6, #1
 801ba76:	3708      	adds	r7, #8
 801ba78:	e777      	b.n	801b96a <_dtoa_r+0x3ca>
 801ba7a:	2502      	movs	r5, #2
 801ba7c:	e779      	b.n	801b972 <_dtoa_r+0x3d2>
 801ba7e:	9f00      	ldr	r7, [sp, #0]
 801ba80:	9e03      	ldr	r6, [sp, #12]
 801ba82:	e794      	b.n	801b9ae <_dtoa_r+0x40e>
 801ba84:	9901      	ldr	r1, [sp, #4]
 801ba86:	4b4c      	ldr	r3, [pc, #304]	; (801bbb8 <_dtoa_r+0x618>)
 801ba88:	4431      	add	r1, r6
 801ba8a:	910d      	str	r1, [sp, #52]	; 0x34
 801ba8c:	9908      	ldr	r1, [sp, #32]
 801ba8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801ba92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ba96:	2900      	cmp	r1, #0
 801ba98:	d043      	beq.n	801bb22 <_dtoa_r+0x582>
 801ba9a:	494d      	ldr	r1, [pc, #308]	; (801bbd0 <_dtoa_r+0x630>)
 801ba9c:	2000      	movs	r0, #0
 801ba9e:	f7e4 fedf 	bl	8000860 <__aeabi_ddiv>
 801baa2:	4652      	mov	r2, sl
 801baa4:	465b      	mov	r3, fp
 801baa6:	f7e4 fbf9 	bl	800029c <__aeabi_dsub>
 801baaa:	9d01      	ldr	r5, [sp, #4]
 801baac:	4682      	mov	sl, r0
 801baae:	468b      	mov	fp, r1
 801bab0:	4649      	mov	r1, r9
 801bab2:	4640      	mov	r0, r8
 801bab4:	f7e5 f85a 	bl	8000b6c <__aeabi_d2iz>
 801bab8:	4606      	mov	r6, r0
 801baba:	f7e4 fd3d 	bl	8000538 <__aeabi_i2d>
 801babe:	4602      	mov	r2, r0
 801bac0:	460b      	mov	r3, r1
 801bac2:	4640      	mov	r0, r8
 801bac4:	4649      	mov	r1, r9
 801bac6:	f7e4 fbe9 	bl	800029c <__aeabi_dsub>
 801baca:	3630      	adds	r6, #48	; 0x30
 801bacc:	f805 6b01 	strb.w	r6, [r5], #1
 801bad0:	4652      	mov	r2, sl
 801bad2:	465b      	mov	r3, fp
 801bad4:	4680      	mov	r8, r0
 801bad6:	4689      	mov	r9, r1
 801bad8:	f7e5 f80a 	bl	8000af0 <__aeabi_dcmplt>
 801badc:	2800      	cmp	r0, #0
 801bade:	d163      	bne.n	801bba8 <_dtoa_r+0x608>
 801bae0:	4642      	mov	r2, r8
 801bae2:	464b      	mov	r3, r9
 801bae4:	4936      	ldr	r1, [pc, #216]	; (801bbc0 <_dtoa_r+0x620>)
 801bae6:	2000      	movs	r0, #0
 801bae8:	f7e4 fbd8 	bl	800029c <__aeabi_dsub>
 801baec:	4652      	mov	r2, sl
 801baee:	465b      	mov	r3, fp
 801baf0:	f7e4 fffe 	bl	8000af0 <__aeabi_dcmplt>
 801baf4:	2800      	cmp	r0, #0
 801baf6:	f040 80b5 	bne.w	801bc64 <_dtoa_r+0x6c4>
 801bafa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bafc:	429d      	cmp	r5, r3
 801bafe:	d081      	beq.n	801ba04 <_dtoa_r+0x464>
 801bb00:	4b30      	ldr	r3, [pc, #192]	; (801bbc4 <_dtoa_r+0x624>)
 801bb02:	2200      	movs	r2, #0
 801bb04:	4650      	mov	r0, sl
 801bb06:	4659      	mov	r1, fp
 801bb08:	f7e4 fd80 	bl	800060c <__aeabi_dmul>
 801bb0c:	4b2d      	ldr	r3, [pc, #180]	; (801bbc4 <_dtoa_r+0x624>)
 801bb0e:	4682      	mov	sl, r0
 801bb10:	468b      	mov	fp, r1
 801bb12:	4640      	mov	r0, r8
 801bb14:	4649      	mov	r1, r9
 801bb16:	2200      	movs	r2, #0
 801bb18:	f7e4 fd78 	bl	800060c <__aeabi_dmul>
 801bb1c:	4680      	mov	r8, r0
 801bb1e:	4689      	mov	r9, r1
 801bb20:	e7c6      	b.n	801bab0 <_dtoa_r+0x510>
 801bb22:	4650      	mov	r0, sl
 801bb24:	4659      	mov	r1, fp
 801bb26:	f7e4 fd71 	bl	800060c <__aeabi_dmul>
 801bb2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb2c:	9d01      	ldr	r5, [sp, #4]
 801bb2e:	930f      	str	r3, [sp, #60]	; 0x3c
 801bb30:	4682      	mov	sl, r0
 801bb32:	468b      	mov	fp, r1
 801bb34:	4649      	mov	r1, r9
 801bb36:	4640      	mov	r0, r8
 801bb38:	f7e5 f818 	bl	8000b6c <__aeabi_d2iz>
 801bb3c:	4606      	mov	r6, r0
 801bb3e:	f7e4 fcfb 	bl	8000538 <__aeabi_i2d>
 801bb42:	3630      	adds	r6, #48	; 0x30
 801bb44:	4602      	mov	r2, r0
 801bb46:	460b      	mov	r3, r1
 801bb48:	4640      	mov	r0, r8
 801bb4a:	4649      	mov	r1, r9
 801bb4c:	f7e4 fba6 	bl	800029c <__aeabi_dsub>
 801bb50:	f805 6b01 	strb.w	r6, [r5], #1
 801bb54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb56:	429d      	cmp	r5, r3
 801bb58:	4680      	mov	r8, r0
 801bb5a:	4689      	mov	r9, r1
 801bb5c:	f04f 0200 	mov.w	r2, #0
 801bb60:	d124      	bne.n	801bbac <_dtoa_r+0x60c>
 801bb62:	4b1b      	ldr	r3, [pc, #108]	; (801bbd0 <_dtoa_r+0x630>)
 801bb64:	4650      	mov	r0, sl
 801bb66:	4659      	mov	r1, fp
 801bb68:	f7e4 fb9a 	bl	80002a0 <__adddf3>
 801bb6c:	4602      	mov	r2, r0
 801bb6e:	460b      	mov	r3, r1
 801bb70:	4640      	mov	r0, r8
 801bb72:	4649      	mov	r1, r9
 801bb74:	f7e4 ffda 	bl	8000b2c <__aeabi_dcmpgt>
 801bb78:	2800      	cmp	r0, #0
 801bb7a:	d173      	bne.n	801bc64 <_dtoa_r+0x6c4>
 801bb7c:	4652      	mov	r2, sl
 801bb7e:	465b      	mov	r3, fp
 801bb80:	4913      	ldr	r1, [pc, #76]	; (801bbd0 <_dtoa_r+0x630>)
 801bb82:	2000      	movs	r0, #0
 801bb84:	f7e4 fb8a 	bl	800029c <__aeabi_dsub>
 801bb88:	4602      	mov	r2, r0
 801bb8a:	460b      	mov	r3, r1
 801bb8c:	4640      	mov	r0, r8
 801bb8e:	4649      	mov	r1, r9
 801bb90:	f7e4 ffae 	bl	8000af0 <__aeabi_dcmplt>
 801bb94:	2800      	cmp	r0, #0
 801bb96:	f43f af35 	beq.w	801ba04 <_dtoa_r+0x464>
 801bb9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801bb9c:	1e6b      	subs	r3, r5, #1
 801bb9e:	930f      	str	r3, [sp, #60]	; 0x3c
 801bba0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bba4:	2b30      	cmp	r3, #48	; 0x30
 801bba6:	d0f8      	beq.n	801bb9a <_dtoa_r+0x5fa>
 801bba8:	9700      	str	r7, [sp, #0]
 801bbaa:	e049      	b.n	801bc40 <_dtoa_r+0x6a0>
 801bbac:	4b05      	ldr	r3, [pc, #20]	; (801bbc4 <_dtoa_r+0x624>)
 801bbae:	f7e4 fd2d 	bl	800060c <__aeabi_dmul>
 801bbb2:	4680      	mov	r8, r0
 801bbb4:	4689      	mov	r9, r1
 801bbb6:	e7bd      	b.n	801bb34 <_dtoa_r+0x594>
 801bbb8:	08020370 	.word	0x08020370
 801bbbc:	08020348 	.word	0x08020348
 801bbc0:	3ff00000 	.word	0x3ff00000
 801bbc4:	40240000 	.word	0x40240000
 801bbc8:	401c0000 	.word	0x401c0000
 801bbcc:	40140000 	.word	0x40140000
 801bbd0:	3fe00000 	.word	0x3fe00000
 801bbd4:	9d01      	ldr	r5, [sp, #4]
 801bbd6:	4656      	mov	r6, sl
 801bbd8:	465f      	mov	r7, fp
 801bbda:	4642      	mov	r2, r8
 801bbdc:	464b      	mov	r3, r9
 801bbde:	4630      	mov	r0, r6
 801bbe0:	4639      	mov	r1, r7
 801bbe2:	f7e4 fe3d 	bl	8000860 <__aeabi_ddiv>
 801bbe6:	f7e4 ffc1 	bl	8000b6c <__aeabi_d2iz>
 801bbea:	4682      	mov	sl, r0
 801bbec:	f7e4 fca4 	bl	8000538 <__aeabi_i2d>
 801bbf0:	4642      	mov	r2, r8
 801bbf2:	464b      	mov	r3, r9
 801bbf4:	f7e4 fd0a 	bl	800060c <__aeabi_dmul>
 801bbf8:	4602      	mov	r2, r0
 801bbfa:	460b      	mov	r3, r1
 801bbfc:	4630      	mov	r0, r6
 801bbfe:	4639      	mov	r1, r7
 801bc00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801bc04:	f7e4 fb4a 	bl	800029c <__aeabi_dsub>
 801bc08:	f805 6b01 	strb.w	r6, [r5], #1
 801bc0c:	9e01      	ldr	r6, [sp, #4]
 801bc0e:	9f03      	ldr	r7, [sp, #12]
 801bc10:	1bae      	subs	r6, r5, r6
 801bc12:	42b7      	cmp	r7, r6
 801bc14:	4602      	mov	r2, r0
 801bc16:	460b      	mov	r3, r1
 801bc18:	d135      	bne.n	801bc86 <_dtoa_r+0x6e6>
 801bc1a:	f7e4 fb41 	bl	80002a0 <__adddf3>
 801bc1e:	4642      	mov	r2, r8
 801bc20:	464b      	mov	r3, r9
 801bc22:	4606      	mov	r6, r0
 801bc24:	460f      	mov	r7, r1
 801bc26:	f7e4 ff81 	bl	8000b2c <__aeabi_dcmpgt>
 801bc2a:	b9d0      	cbnz	r0, 801bc62 <_dtoa_r+0x6c2>
 801bc2c:	4642      	mov	r2, r8
 801bc2e:	464b      	mov	r3, r9
 801bc30:	4630      	mov	r0, r6
 801bc32:	4639      	mov	r1, r7
 801bc34:	f7e4 ff52 	bl	8000adc <__aeabi_dcmpeq>
 801bc38:	b110      	cbz	r0, 801bc40 <_dtoa_r+0x6a0>
 801bc3a:	f01a 0f01 	tst.w	sl, #1
 801bc3e:	d110      	bne.n	801bc62 <_dtoa_r+0x6c2>
 801bc40:	4620      	mov	r0, r4
 801bc42:	ee18 1a10 	vmov	r1, s16
 801bc46:	f000 fd19 	bl	801c67c <_Bfree>
 801bc4a:	2300      	movs	r3, #0
 801bc4c:	9800      	ldr	r0, [sp, #0]
 801bc4e:	702b      	strb	r3, [r5, #0]
 801bc50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bc52:	3001      	adds	r0, #1
 801bc54:	6018      	str	r0, [r3, #0]
 801bc56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	f43f acf1 	beq.w	801b640 <_dtoa_r+0xa0>
 801bc5e:	601d      	str	r5, [r3, #0]
 801bc60:	e4ee      	b.n	801b640 <_dtoa_r+0xa0>
 801bc62:	9f00      	ldr	r7, [sp, #0]
 801bc64:	462b      	mov	r3, r5
 801bc66:	461d      	mov	r5, r3
 801bc68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bc6c:	2a39      	cmp	r2, #57	; 0x39
 801bc6e:	d106      	bne.n	801bc7e <_dtoa_r+0x6de>
 801bc70:	9a01      	ldr	r2, [sp, #4]
 801bc72:	429a      	cmp	r2, r3
 801bc74:	d1f7      	bne.n	801bc66 <_dtoa_r+0x6c6>
 801bc76:	9901      	ldr	r1, [sp, #4]
 801bc78:	2230      	movs	r2, #48	; 0x30
 801bc7a:	3701      	adds	r7, #1
 801bc7c:	700a      	strb	r2, [r1, #0]
 801bc7e:	781a      	ldrb	r2, [r3, #0]
 801bc80:	3201      	adds	r2, #1
 801bc82:	701a      	strb	r2, [r3, #0]
 801bc84:	e790      	b.n	801bba8 <_dtoa_r+0x608>
 801bc86:	4ba6      	ldr	r3, [pc, #664]	; (801bf20 <_dtoa_r+0x980>)
 801bc88:	2200      	movs	r2, #0
 801bc8a:	f7e4 fcbf 	bl	800060c <__aeabi_dmul>
 801bc8e:	2200      	movs	r2, #0
 801bc90:	2300      	movs	r3, #0
 801bc92:	4606      	mov	r6, r0
 801bc94:	460f      	mov	r7, r1
 801bc96:	f7e4 ff21 	bl	8000adc <__aeabi_dcmpeq>
 801bc9a:	2800      	cmp	r0, #0
 801bc9c:	d09d      	beq.n	801bbda <_dtoa_r+0x63a>
 801bc9e:	e7cf      	b.n	801bc40 <_dtoa_r+0x6a0>
 801bca0:	9a08      	ldr	r2, [sp, #32]
 801bca2:	2a00      	cmp	r2, #0
 801bca4:	f000 80d7 	beq.w	801be56 <_dtoa_r+0x8b6>
 801bca8:	9a06      	ldr	r2, [sp, #24]
 801bcaa:	2a01      	cmp	r2, #1
 801bcac:	f300 80ba 	bgt.w	801be24 <_dtoa_r+0x884>
 801bcb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bcb2:	2a00      	cmp	r2, #0
 801bcb4:	f000 80b2 	beq.w	801be1c <_dtoa_r+0x87c>
 801bcb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801bcbc:	9e07      	ldr	r6, [sp, #28]
 801bcbe:	9d04      	ldr	r5, [sp, #16]
 801bcc0:	9a04      	ldr	r2, [sp, #16]
 801bcc2:	441a      	add	r2, r3
 801bcc4:	9204      	str	r2, [sp, #16]
 801bcc6:	9a05      	ldr	r2, [sp, #20]
 801bcc8:	2101      	movs	r1, #1
 801bcca:	441a      	add	r2, r3
 801bccc:	4620      	mov	r0, r4
 801bcce:	9205      	str	r2, [sp, #20]
 801bcd0:	f000 fd8c 	bl	801c7ec <__i2b>
 801bcd4:	4607      	mov	r7, r0
 801bcd6:	2d00      	cmp	r5, #0
 801bcd8:	dd0c      	ble.n	801bcf4 <_dtoa_r+0x754>
 801bcda:	9b05      	ldr	r3, [sp, #20]
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	dd09      	ble.n	801bcf4 <_dtoa_r+0x754>
 801bce0:	42ab      	cmp	r3, r5
 801bce2:	9a04      	ldr	r2, [sp, #16]
 801bce4:	bfa8      	it	ge
 801bce6:	462b      	movge	r3, r5
 801bce8:	1ad2      	subs	r2, r2, r3
 801bcea:	9204      	str	r2, [sp, #16]
 801bcec:	9a05      	ldr	r2, [sp, #20]
 801bcee:	1aed      	subs	r5, r5, r3
 801bcf0:	1ad3      	subs	r3, r2, r3
 801bcf2:	9305      	str	r3, [sp, #20]
 801bcf4:	9b07      	ldr	r3, [sp, #28]
 801bcf6:	b31b      	cbz	r3, 801bd40 <_dtoa_r+0x7a0>
 801bcf8:	9b08      	ldr	r3, [sp, #32]
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	f000 80af 	beq.w	801be5e <_dtoa_r+0x8be>
 801bd00:	2e00      	cmp	r6, #0
 801bd02:	dd13      	ble.n	801bd2c <_dtoa_r+0x78c>
 801bd04:	4639      	mov	r1, r7
 801bd06:	4632      	mov	r2, r6
 801bd08:	4620      	mov	r0, r4
 801bd0a:	f000 fe2f 	bl	801c96c <__pow5mult>
 801bd0e:	ee18 2a10 	vmov	r2, s16
 801bd12:	4601      	mov	r1, r0
 801bd14:	4607      	mov	r7, r0
 801bd16:	4620      	mov	r0, r4
 801bd18:	f000 fd7e 	bl	801c818 <__multiply>
 801bd1c:	ee18 1a10 	vmov	r1, s16
 801bd20:	4680      	mov	r8, r0
 801bd22:	4620      	mov	r0, r4
 801bd24:	f000 fcaa 	bl	801c67c <_Bfree>
 801bd28:	ee08 8a10 	vmov	s16, r8
 801bd2c:	9b07      	ldr	r3, [sp, #28]
 801bd2e:	1b9a      	subs	r2, r3, r6
 801bd30:	d006      	beq.n	801bd40 <_dtoa_r+0x7a0>
 801bd32:	ee18 1a10 	vmov	r1, s16
 801bd36:	4620      	mov	r0, r4
 801bd38:	f000 fe18 	bl	801c96c <__pow5mult>
 801bd3c:	ee08 0a10 	vmov	s16, r0
 801bd40:	2101      	movs	r1, #1
 801bd42:	4620      	mov	r0, r4
 801bd44:	f000 fd52 	bl	801c7ec <__i2b>
 801bd48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	4606      	mov	r6, r0
 801bd4e:	f340 8088 	ble.w	801be62 <_dtoa_r+0x8c2>
 801bd52:	461a      	mov	r2, r3
 801bd54:	4601      	mov	r1, r0
 801bd56:	4620      	mov	r0, r4
 801bd58:	f000 fe08 	bl	801c96c <__pow5mult>
 801bd5c:	9b06      	ldr	r3, [sp, #24]
 801bd5e:	2b01      	cmp	r3, #1
 801bd60:	4606      	mov	r6, r0
 801bd62:	f340 8081 	ble.w	801be68 <_dtoa_r+0x8c8>
 801bd66:	f04f 0800 	mov.w	r8, #0
 801bd6a:	6933      	ldr	r3, [r6, #16]
 801bd6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801bd70:	6918      	ldr	r0, [r3, #16]
 801bd72:	f000 fceb 	bl	801c74c <__hi0bits>
 801bd76:	f1c0 0020 	rsb	r0, r0, #32
 801bd7a:	9b05      	ldr	r3, [sp, #20]
 801bd7c:	4418      	add	r0, r3
 801bd7e:	f010 001f 	ands.w	r0, r0, #31
 801bd82:	f000 8092 	beq.w	801beaa <_dtoa_r+0x90a>
 801bd86:	f1c0 0320 	rsb	r3, r0, #32
 801bd8a:	2b04      	cmp	r3, #4
 801bd8c:	f340 808a 	ble.w	801bea4 <_dtoa_r+0x904>
 801bd90:	f1c0 001c 	rsb	r0, r0, #28
 801bd94:	9b04      	ldr	r3, [sp, #16]
 801bd96:	4403      	add	r3, r0
 801bd98:	9304      	str	r3, [sp, #16]
 801bd9a:	9b05      	ldr	r3, [sp, #20]
 801bd9c:	4403      	add	r3, r0
 801bd9e:	4405      	add	r5, r0
 801bda0:	9305      	str	r3, [sp, #20]
 801bda2:	9b04      	ldr	r3, [sp, #16]
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	dd07      	ble.n	801bdb8 <_dtoa_r+0x818>
 801bda8:	ee18 1a10 	vmov	r1, s16
 801bdac:	461a      	mov	r2, r3
 801bdae:	4620      	mov	r0, r4
 801bdb0:	f000 fe36 	bl	801ca20 <__lshift>
 801bdb4:	ee08 0a10 	vmov	s16, r0
 801bdb8:	9b05      	ldr	r3, [sp, #20]
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	dd05      	ble.n	801bdca <_dtoa_r+0x82a>
 801bdbe:	4631      	mov	r1, r6
 801bdc0:	461a      	mov	r2, r3
 801bdc2:	4620      	mov	r0, r4
 801bdc4:	f000 fe2c 	bl	801ca20 <__lshift>
 801bdc8:	4606      	mov	r6, r0
 801bdca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	d06e      	beq.n	801beae <_dtoa_r+0x90e>
 801bdd0:	ee18 0a10 	vmov	r0, s16
 801bdd4:	4631      	mov	r1, r6
 801bdd6:	f000 fe93 	bl	801cb00 <__mcmp>
 801bdda:	2800      	cmp	r0, #0
 801bddc:	da67      	bge.n	801beae <_dtoa_r+0x90e>
 801bdde:	9b00      	ldr	r3, [sp, #0]
 801bde0:	3b01      	subs	r3, #1
 801bde2:	ee18 1a10 	vmov	r1, s16
 801bde6:	9300      	str	r3, [sp, #0]
 801bde8:	220a      	movs	r2, #10
 801bdea:	2300      	movs	r3, #0
 801bdec:	4620      	mov	r0, r4
 801bdee:	f000 fc67 	bl	801c6c0 <__multadd>
 801bdf2:	9b08      	ldr	r3, [sp, #32]
 801bdf4:	ee08 0a10 	vmov	s16, r0
 801bdf8:	2b00      	cmp	r3, #0
 801bdfa:	f000 81b1 	beq.w	801c160 <_dtoa_r+0xbc0>
 801bdfe:	2300      	movs	r3, #0
 801be00:	4639      	mov	r1, r7
 801be02:	220a      	movs	r2, #10
 801be04:	4620      	mov	r0, r4
 801be06:	f000 fc5b 	bl	801c6c0 <__multadd>
 801be0a:	9b02      	ldr	r3, [sp, #8]
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	4607      	mov	r7, r0
 801be10:	f300 808e 	bgt.w	801bf30 <_dtoa_r+0x990>
 801be14:	9b06      	ldr	r3, [sp, #24]
 801be16:	2b02      	cmp	r3, #2
 801be18:	dc51      	bgt.n	801bebe <_dtoa_r+0x91e>
 801be1a:	e089      	b.n	801bf30 <_dtoa_r+0x990>
 801be1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801be22:	e74b      	b.n	801bcbc <_dtoa_r+0x71c>
 801be24:	9b03      	ldr	r3, [sp, #12]
 801be26:	1e5e      	subs	r6, r3, #1
 801be28:	9b07      	ldr	r3, [sp, #28]
 801be2a:	42b3      	cmp	r3, r6
 801be2c:	bfbf      	itttt	lt
 801be2e:	9b07      	ldrlt	r3, [sp, #28]
 801be30:	9607      	strlt	r6, [sp, #28]
 801be32:	1af2      	sublt	r2, r6, r3
 801be34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801be36:	bfb6      	itet	lt
 801be38:	189b      	addlt	r3, r3, r2
 801be3a:	1b9e      	subge	r6, r3, r6
 801be3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801be3e:	9b03      	ldr	r3, [sp, #12]
 801be40:	bfb8      	it	lt
 801be42:	2600      	movlt	r6, #0
 801be44:	2b00      	cmp	r3, #0
 801be46:	bfb7      	itett	lt
 801be48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801be4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801be50:	1a9d      	sublt	r5, r3, r2
 801be52:	2300      	movlt	r3, #0
 801be54:	e734      	b.n	801bcc0 <_dtoa_r+0x720>
 801be56:	9e07      	ldr	r6, [sp, #28]
 801be58:	9d04      	ldr	r5, [sp, #16]
 801be5a:	9f08      	ldr	r7, [sp, #32]
 801be5c:	e73b      	b.n	801bcd6 <_dtoa_r+0x736>
 801be5e:	9a07      	ldr	r2, [sp, #28]
 801be60:	e767      	b.n	801bd32 <_dtoa_r+0x792>
 801be62:	9b06      	ldr	r3, [sp, #24]
 801be64:	2b01      	cmp	r3, #1
 801be66:	dc18      	bgt.n	801be9a <_dtoa_r+0x8fa>
 801be68:	f1ba 0f00 	cmp.w	sl, #0
 801be6c:	d115      	bne.n	801be9a <_dtoa_r+0x8fa>
 801be6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801be72:	b993      	cbnz	r3, 801be9a <_dtoa_r+0x8fa>
 801be74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801be78:	0d1b      	lsrs	r3, r3, #20
 801be7a:	051b      	lsls	r3, r3, #20
 801be7c:	b183      	cbz	r3, 801bea0 <_dtoa_r+0x900>
 801be7e:	9b04      	ldr	r3, [sp, #16]
 801be80:	3301      	adds	r3, #1
 801be82:	9304      	str	r3, [sp, #16]
 801be84:	9b05      	ldr	r3, [sp, #20]
 801be86:	3301      	adds	r3, #1
 801be88:	9305      	str	r3, [sp, #20]
 801be8a:	f04f 0801 	mov.w	r8, #1
 801be8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801be90:	2b00      	cmp	r3, #0
 801be92:	f47f af6a 	bne.w	801bd6a <_dtoa_r+0x7ca>
 801be96:	2001      	movs	r0, #1
 801be98:	e76f      	b.n	801bd7a <_dtoa_r+0x7da>
 801be9a:	f04f 0800 	mov.w	r8, #0
 801be9e:	e7f6      	b.n	801be8e <_dtoa_r+0x8ee>
 801bea0:	4698      	mov	r8, r3
 801bea2:	e7f4      	b.n	801be8e <_dtoa_r+0x8ee>
 801bea4:	f43f af7d 	beq.w	801bda2 <_dtoa_r+0x802>
 801bea8:	4618      	mov	r0, r3
 801beaa:	301c      	adds	r0, #28
 801beac:	e772      	b.n	801bd94 <_dtoa_r+0x7f4>
 801beae:	9b03      	ldr	r3, [sp, #12]
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	dc37      	bgt.n	801bf24 <_dtoa_r+0x984>
 801beb4:	9b06      	ldr	r3, [sp, #24]
 801beb6:	2b02      	cmp	r3, #2
 801beb8:	dd34      	ble.n	801bf24 <_dtoa_r+0x984>
 801beba:	9b03      	ldr	r3, [sp, #12]
 801bebc:	9302      	str	r3, [sp, #8]
 801bebe:	9b02      	ldr	r3, [sp, #8]
 801bec0:	b96b      	cbnz	r3, 801bede <_dtoa_r+0x93e>
 801bec2:	4631      	mov	r1, r6
 801bec4:	2205      	movs	r2, #5
 801bec6:	4620      	mov	r0, r4
 801bec8:	f000 fbfa 	bl	801c6c0 <__multadd>
 801becc:	4601      	mov	r1, r0
 801bece:	4606      	mov	r6, r0
 801bed0:	ee18 0a10 	vmov	r0, s16
 801bed4:	f000 fe14 	bl	801cb00 <__mcmp>
 801bed8:	2800      	cmp	r0, #0
 801beda:	f73f adbb 	bgt.w	801ba54 <_dtoa_r+0x4b4>
 801bede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bee0:	9d01      	ldr	r5, [sp, #4]
 801bee2:	43db      	mvns	r3, r3
 801bee4:	9300      	str	r3, [sp, #0]
 801bee6:	f04f 0800 	mov.w	r8, #0
 801beea:	4631      	mov	r1, r6
 801beec:	4620      	mov	r0, r4
 801beee:	f000 fbc5 	bl	801c67c <_Bfree>
 801bef2:	2f00      	cmp	r7, #0
 801bef4:	f43f aea4 	beq.w	801bc40 <_dtoa_r+0x6a0>
 801bef8:	f1b8 0f00 	cmp.w	r8, #0
 801befc:	d005      	beq.n	801bf0a <_dtoa_r+0x96a>
 801befe:	45b8      	cmp	r8, r7
 801bf00:	d003      	beq.n	801bf0a <_dtoa_r+0x96a>
 801bf02:	4641      	mov	r1, r8
 801bf04:	4620      	mov	r0, r4
 801bf06:	f000 fbb9 	bl	801c67c <_Bfree>
 801bf0a:	4639      	mov	r1, r7
 801bf0c:	4620      	mov	r0, r4
 801bf0e:	f000 fbb5 	bl	801c67c <_Bfree>
 801bf12:	e695      	b.n	801bc40 <_dtoa_r+0x6a0>
 801bf14:	2600      	movs	r6, #0
 801bf16:	4637      	mov	r7, r6
 801bf18:	e7e1      	b.n	801bede <_dtoa_r+0x93e>
 801bf1a:	9700      	str	r7, [sp, #0]
 801bf1c:	4637      	mov	r7, r6
 801bf1e:	e599      	b.n	801ba54 <_dtoa_r+0x4b4>
 801bf20:	40240000 	.word	0x40240000
 801bf24:	9b08      	ldr	r3, [sp, #32]
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	f000 80ca 	beq.w	801c0c0 <_dtoa_r+0xb20>
 801bf2c:	9b03      	ldr	r3, [sp, #12]
 801bf2e:	9302      	str	r3, [sp, #8]
 801bf30:	2d00      	cmp	r5, #0
 801bf32:	dd05      	ble.n	801bf40 <_dtoa_r+0x9a0>
 801bf34:	4639      	mov	r1, r7
 801bf36:	462a      	mov	r2, r5
 801bf38:	4620      	mov	r0, r4
 801bf3a:	f000 fd71 	bl	801ca20 <__lshift>
 801bf3e:	4607      	mov	r7, r0
 801bf40:	f1b8 0f00 	cmp.w	r8, #0
 801bf44:	d05b      	beq.n	801bffe <_dtoa_r+0xa5e>
 801bf46:	6879      	ldr	r1, [r7, #4]
 801bf48:	4620      	mov	r0, r4
 801bf4a:	f000 fb57 	bl	801c5fc <_Balloc>
 801bf4e:	4605      	mov	r5, r0
 801bf50:	b928      	cbnz	r0, 801bf5e <_dtoa_r+0x9be>
 801bf52:	4b87      	ldr	r3, [pc, #540]	; (801c170 <_dtoa_r+0xbd0>)
 801bf54:	4602      	mov	r2, r0
 801bf56:	f240 21ea 	movw	r1, #746	; 0x2ea
 801bf5a:	f7ff bb3b 	b.w	801b5d4 <_dtoa_r+0x34>
 801bf5e:	693a      	ldr	r2, [r7, #16]
 801bf60:	3202      	adds	r2, #2
 801bf62:	0092      	lsls	r2, r2, #2
 801bf64:	f107 010c 	add.w	r1, r7, #12
 801bf68:	300c      	adds	r0, #12
 801bf6a:	f7fe f9e1 	bl	801a330 <memcpy>
 801bf6e:	2201      	movs	r2, #1
 801bf70:	4629      	mov	r1, r5
 801bf72:	4620      	mov	r0, r4
 801bf74:	f000 fd54 	bl	801ca20 <__lshift>
 801bf78:	9b01      	ldr	r3, [sp, #4]
 801bf7a:	f103 0901 	add.w	r9, r3, #1
 801bf7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801bf82:	4413      	add	r3, r2
 801bf84:	9305      	str	r3, [sp, #20]
 801bf86:	f00a 0301 	and.w	r3, sl, #1
 801bf8a:	46b8      	mov	r8, r7
 801bf8c:	9304      	str	r3, [sp, #16]
 801bf8e:	4607      	mov	r7, r0
 801bf90:	4631      	mov	r1, r6
 801bf92:	ee18 0a10 	vmov	r0, s16
 801bf96:	f7ff fa77 	bl	801b488 <quorem>
 801bf9a:	4641      	mov	r1, r8
 801bf9c:	9002      	str	r0, [sp, #8]
 801bf9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801bfa2:	ee18 0a10 	vmov	r0, s16
 801bfa6:	f000 fdab 	bl	801cb00 <__mcmp>
 801bfaa:	463a      	mov	r2, r7
 801bfac:	9003      	str	r0, [sp, #12]
 801bfae:	4631      	mov	r1, r6
 801bfb0:	4620      	mov	r0, r4
 801bfb2:	f000 fdc1 	bl	801cb38 <__mdiff>
 801bfb6:	68c2      	ldr	r2, [r0, #12]
 801bfb8:	f109 3bff 	add.w	fp, r9, #4294967295
 801bfbc:	4605      	mov	r5, r0
 801bfbe:	bb02      	cbnz	r2, 801c002 <_dtoa_r+0xa62>
 801bfc0:	4601      	mov	r1, r0
 801bfc2:	ee18 0a10 	vmov	r0, s16
 801bfc6:	f000 fd9b 	bl	801cb00 <__mcmp>
 801bfca:	4602      	mov	r2, r0
 801bfcc:	4629      	mov	r1, r5
 801bfce:	4620      	mov	r0, r4
 801bfd0:	9207      	str	r2, [sp, #28]
 801bfd2:	f000 fb53 	bl	801c67c <_Bfree>
 801bfd6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801bfda:	ea43 0102 	orr.w	r1, r3, r2
 801bfde:	9b04      	ldr	r3, [sp, #16]
 801bfe0:	430b      	orrs	r3, r1
 801bfe2:	464d      	mov	r5, r9
 801bfe4:	d10f      	bne.n	801c006 <_dtoa_r+0xa66>
 801bfe6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801bfea:	d02a      	beq.n	801c042 <_dtoa_r+0xaa2>
 801bfec:	9b03      	ldr	r3, [sp, #12]
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	dd02      	ble.n	801bff8 <_dtoa_r+0xa58>
 801bff2:	9b02      	ldr	r3, [sp, #8]
 801bff4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801bff8:	f88b a000 	strb.w	sl, [fp]
 801bffc:	e775      	b.n	801beea <_dtoa_r+0x94a>
 801bffe:	4638      	mov	r0, r7
 801c000:	e7ba      	b.n	801bf78 <_dtoa_r+0x9d8>
 801c002:	2201      	movs	r2, #1
 801c004:	e7e2      	b.n	801bfcc <_dtoa_r+0xa2c>
 801c006:	9b03      	ldr	r3, [sp, #12]
 801c008:	2b00      	cmp	r3, #0
 801c00a:	db04      	blt.n	801c016 <_dtoa_r+0xa76>
 801c00c:	9906      	ldr	r1, [sp, #24]
 801c00e:	430b      	orrs	r3, r1
 801c010:	9904      	ldr	r1, [sp, #16]
 801c012:	430b      	orrs	r3, r1
 801c014:	d122      	bne.n	801c05c <_dtoa_r+0xabc>
 801c016:	2a00      	cmp	r2, #0
 801c018:	ddee      	ble.n	801bff8 <_dtoa_r+0xa58>
 801c01a:	ee18 1a10 	vmov	r1, s16
 801c01e:	2201      	movs	r2, #1
 801c020:	4620      	mov	r0, r4
 801c022:	f000 fcfd 	bl	801ca20 <__lshift>
 801c026:	4631      	mov	r1, r6
 801c028:	ee08 0a10 	vmov	s16, r0
 801c02c:	f000 fd68 	bl	801cb00 <__mcmp>
 801c030:	2800      	cmp	r0, #0
 801c032:	dc03      	bgt.n	801c03c <_dtoa_r+0xa9c>
 801c034:	d1e0      	bne.n	801bff8 <_dtoa_r+0xa58>
 801c036:	f01a 0f01 	tst.w	sl, #1
 801c03a:	d0dd      	beq.n	801bff8 <_dtoa_r+0xa58>
 801c03c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c040:	d1d7      	bne.n	801bff2 <_dtoa_r+0xa52>
 801c042:	2339      	movs	r3, #57	; 0x39
 801c044:	f88b 3000 	strb.w	r3, [fp]
 801c048:	462b      	mov	r3, r5
 801c04a:	461d      	mov	r5, r3
 801c04c:	3b01      	subs	r3, #1
 801c04e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c052:	2a39      	cmp	r2, #57	; 0x39
 801c054:	d071      	beq.n	801c13a <_dtoa_r+0xb9a>
 801c056:	3201      	adds	r2, #1
 801c058:	701a      	strb	r2, [r3, #0]
 801c05a:	e746      	b.n	801beea <_dtoa_r+0x94a>
 801c05c:	2a00      	cmp	r2, #0
 801c05e:	dd07      	ble.n	801c070 <_dtoa_r+0xad0>
 801c060:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c064:	d0ed      	beq.n	801c042 <_dtoa_r+0xaa2>
 801c066:	f10a 0301 	add.w	r3, sl, #1
 801c06a:	f88b 3000 	strb.w	r3, [fp]
 801c06e:	e73c      	b.n	801beea <_dtoa_r+0x94a>
 801c070:	9b05      	ldr	r3, [sp, #20]
 801c072:	f809 ac01 	strb.w	sl, [r9, #-1]
 801c076:	4599      	cmp	r9, r3
 801c078:	d047      	beq.n	801c10a <_dtoa_r+0xb6a>
 801c07a:	ee18 1a10 	vmov	r1, s16
 801c07e:	2300      	movs	r3, #0
 801c080:	220a      	movs	r2, #10
 801c082:	4620      	mov	r0, r4
 801c084:	f000 fb1c 	bl	801c6c0 <__multadd>
 801c088:	45b8      	cmp	r8, r7
 801c08a:	ee08 0a10 	vmov	s16, r0
 801c08e:	f04f 0300 	mov.w	r3, #0
 801c092:	f04f 020a 	mov.w	r2, #10
 801c096:	4641      	mov	r1, r8
 801c098:	4620      	mov	r0, r4
 801c09a:	d106      	bne.n	801c0aa <_dtoa_r+0xb0a>
 801c09c:	f000 fb10 	bl	801c6c0 <__multadd>
 801c0a0:	4680      	mov	r8, r0
 801c0a2:	4607      	mov	r7, r0
 801c0a4:	f109 0901 	add.w	r9, r9, #1
 801c0a8:	e772      	b.n	801bf90 <_dtoa_r+0x9f0>
 801c0aa:	f000 fb09 	bl	801c6c0 <__multadd>
 801c0ae:	4639      	mov	r1, r7
 801c0b0:	4680      	mov	r8, r0
 801c0b2:	2300      	movs	r3, #0
 801c0b4:	220a      	movs	r2, #10
 801c0b6:	4620      	mov	r0, r4
 801c0b8:	f000 fb02 	bl	801c6c0 <__multadd>
 801c0bc:	4607      	mov	r7, r0
 801c0be:	e7f1      	b.n	801c0a4 <_dtoa_r+0xb04>
 801c0c0:	9b03      	ldr	r3, [sp, #12]
 801c0c2:	9302      	str	r3, [sp, #8]
 801c0c4:	9d01      	ldr	r5, [sp, #4]
 801c0c6:	ee18 0a10 	vmov	r0, s16
 801c0ca:	4631      	mov	r1, r6
 801c0cc:	f7ff f9dc 	bl	801b488 <quorem>
 801c0d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c0d4:	9b01      	ldr	r3, [sp, #4]
 801c0d6:	f805 ab01 	strb.w	sl, [r5], #1
 801c0da:	1aea      	subs	r2, r5, r3
 801c0dc:	9b02      	ldr	r3, [sp, #8]
 801c0de:	4293      	cmp	r3, r2
 801c0e0:	dd09      	ble.n	801c0f6 <_dtoa_r+0xb56>
 801c0e2:	ee18 1a10 	vmov	r1, s16
 801c0e6:	2300      	movs	r3, #0
 801c0e8:	220a      	movs	r2, #10
 801c0ea:	4620      	mov	r0, r4
 801c0ec:	f000 fae8 	bl	801c6c0 <__multadd>
 801c0f0:	ee08 0a10 	vmov	s16, r0
 801c0f4:	e7e7      	b.n	801c0c6 <_dtoa_r+0xb26>
 801c0f6:	9b02      	ldr	r3, [sp, #8]
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	bfc8      	it	gt
 801c0fc:	461d      	movgt	r5, r3
 801c0fe:	9b01      	ldr	r3, [sp, #4]
 801c100:	bfd8      	it	le
 801c102:	2501      	movle	r5, #1
 801c104:	441d      	add	r5, r3
 801c106:	f04f 0800 	mov.w	r8, #0
 801c10a:	ee18 1a10 	vmov	r1, s16
 801c10e:	2201      	movs	r2, #1
 801c110:	4620      	mov	r0, r4
 801c112:	f000 fc85 	bl	801ca20 <__lshift>
 801c116:	4631      	mov	r1, r6
 801c118:	ee08 0a10 	vmov	s16, r0
 801c11c:	f000 fcf0 	bl	801cb00 <__mcmp>
 801c120:	2800      	cmp	r0, #0
 801c122:	dc91      	bgt.n	801c048 <_dtoa_r+0xaa8>
 801c124:	d102      	bne.n	801c12c <_dtoa_r+0xb8c>
 801c126:	f01a 0f01 	tst.w	sl, #1
 801c12a:	d18d      	bne.n	801c048 <_dtoa_r+0xaa8>
 801c12c:	462b      	mov	r3, r5
 801c12e:	461d      	mov	r5, r3
 801c130:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c134:	2a30      	cmp	r2, #48	; 0x30
 801c136:	d0fa      	beq.n	801c12e <_dtoa_r+0xb8e>
 801c138:	e6d7      	b.n	801beea <_dtoa_r+0x94a>
 801c13a:	9a01      	ldr	r2, [sp, #4]
 801c13c:	429a      	cmp	r2, r3
 801c13e:	d184      	bne.n	801c04a <_dtoa_r+0xaaa>
 801c140:	9b00      	ldr	r3, [sp, #0]
 801c142:	3301      	adds	r3, #1
 801c144:	9300      	str	r3, [sp, #0]
 801c146:	2331      	movs	r3, #49	; 0x31
 801c148:	7013      	strb	r3, [r2, #0]
 801c14a:	e6ce      	b.n	801beea <_dtoa_r+0x94a>
 801c14c:	4b09      	ldr	r3, [pc, #36]	; (801c174 <_dtoa_r+0xbd4>)
 801c14e:	f7ff ba95 	b.w	801b67c <_dtoa_r+0xdc>
 801c152:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c154:	2b00      	cmp	r3, #0
 801c156:	f47f aa6e 	bne.w	801b636 <_dtoa_r+0x96>
 801c15a:	4b07      	ldr	r3, [pc, #28]	; (801c178 <_dtoa_r+0xbd8>)
 801c15c:	f7ff ba8e 	b.w	801b67c <_dtoa_r+0xdc>
 801c160:	9b02      	ldr	r3, [sp, #8]
 801c162:	2b00      	cmp	r3, #0
 801c164:	dcae      	bgt.n	801c0c4 <_dtoa_r+0xb24>
 801c166:	9b06      	ldr	r3, [sp, #24]
 801c168:	2b02      	cmp	r3, #2
 801c16a:	f73f aea8 	bgt.w	801bebe <_dtoa_r+0x91e>
 801c16e:	e7a9      	b.n	801c0c4 <_dtoa_r+0xb24>
 801c170:	0802026d 	.word	0x0802026d
 801c174:	080200c9 	.word	0x080200c9
 801c178:	080201ee 	.word	0x080201ee

0801c17c <__sflush_r>:
 801c17c:	898a      	ldrh	r2, [r1, #12]
 801c17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c182:	4605      	mov	r5, r0
 801c184:	0710      	lsls	r0, r2, #28
 801c186:	460c      	mov	r4, r1
 801c188:	d458      	bmi.n	801c23c <__sflush_r+0xc0>
 801c18a:	684b      	ldr	r3, [r1, #4]
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	dc05      	bgt.n	801c19c <__sflush_r+0x20>
 801c190:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c192:	2b00      	cmp	r3, #0
 801c194:	dc02      	bgt.n	801c19c <__sflush_r+0x20>
 801c196:	2000      	movs	r0, #0
 801c198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c19c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c19e:	2e00      	cmp	r6, #0
 801c1a0:	d0f9      	beq.n	801c196 <__sflush_r+0x1a>
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c1a8:	682f      	ldr	r7, [r5, #0]
 801c1aa:	602b      	str	r3, [r5, #0]
 801c1ac:	d032      	beq.n	801c214 <__sflush_r+0x98>
 801c1ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c1b0:	89a3      	ldrh	r3, [r4, #12]
 801c1b2:	075a      	lsls	r2, r3, #29
 801c1b4:	d505      	bpl.n	801c1c2 <__sflush_r+0x46>
 801c1b6:	6863      	ldr	r3, [r4, #4]
 801c1b8:	1ac0      	subs	r0, r0, r3
 801c1ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c1bc:	b10b      	cbz	r3, 801c1c2 <__sflush_r+0x46>
 801c1be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c1c0:	1ac0      	subs	r0, r0, r3
 801c1c2:	2300      	movs	r3, #0
 801c1c4:	4602      	mov	r2, r0
 801c1c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c1c8:	6a21      	ldr	r1, [r4, #32]
 801c1ca:	4628      	mov	r0, r5
 801c1cc:	47b0      	blx	r6
 801c1ce:	1c43      	adds	r3, r0, #1
 801c1d0:	89a3      	ldrh	r3, [r4, #12]
 801c1d2:	d106      	bne.n	801c1e2 <__sflush_r+0x66>
 801c1d4:	6829      	ldr	r1, [r5, #0]
 801c1d6:	291d      	cmp	r1, #29
 801c1d8:	d82c      	bhi.n	801c234 <__sflush_r+0xb8>
 801c1da:	4a2a      	ldr	r2, [pc, #168]	; (801c284 <__sflush_r+0x108>)
 801c1dc:	40ca      	lsrs	r2, r1
 801c1de:	07d6      	lsls	r6, r2, #31
 801c1e0:	d528      	bpl.n	801c234 <__sflush_r+0xb8>
 801c1e2:	2200      	movs	r2, #0
 801c1e4:	6062      	str	r2, [r4, #4]
 801c1e6:	04d9      	lsls	r1, r3, #19
 801c1e8:	6922      	ldr	r2, [r4, #16]
 801c1ea:	6022      	str	r2, [r4, #0]
 801c1ec:	d504      	bpl.n	801c1f8 <__sflush_r+0x7c>
 801c1ee:	1c42      	adds	r2, r0, #1
 801c1f0:	d101      	bne.n	801c1f6 <__sflush_r+0x7a>
 801c1f2:	682b      	ldr	r3, [r5, #0]
 801c1f4:	b903      	cbnz	r3, 801c1f8 <__sflush_r+0x7c>
 801c1f6:	6560      	str	r0, [r4, #84]	; 0x54
 801c1f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c1fa:	602f      	str	r7, [r5, #0]
 801c1fc:	2900      	cmp	r1, #0
 801c1fe:	d0ca      	beq.n	801c196 <__sflush_r+0x1a>
 801c200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c204:	4299      	cmp	r1, r3
 801c206:	d002      	beq.n	801c20e <__sflush_r+0x92>
 801c208:	4628      	mov	r0, r5
 801c20a:	f7fe f8d7 	bl	801a3bc <_free_r>
 801c20e:	2000      	movs	r0, #0
 801c210:	6360      	str	r0, [r4, #52]	; 0x34
 801c212:	e7c1      	b.n	801c198 <__sflush_r+0x1c>
 801c214:	6a21      	ldr	r1, [r4, #32]
 801c216:	2301      	movs	r3, #1
 801c218:	4628      	mov	r0, r5
 801c21a:	47b0      	blx	r6
 801c21c:	1c41      	adds	r1, r0, #1
 801c21e:	d1c7      	bne.n	801c1b0 <__sflush_r+0x34>
 801c220:	682b      	ldr	r3, [r5, #0]
 801c222:	2b00      	cmp	r3, #0
 801c224:	d0c4      	beq.n	801c1b0 <__sflush_r+0x34>
 801c226:	2b1d      	cmp	r3, #29
 801c228:	d001      	beq.n	801c22e <__sflush_r+0xb2>
 801c22a:	2b16      	cmp	r3, #22
 801c22c:	d101      	bne.n	801c232 <__sflush_r+0xb6>
 801c22e:	602f      	str	r7, [r5, #0]
 801c230:	e7b1      	b.n	801c196 <__sflush_r+0x1a>
 801c232:	89a3      	ldrh	r3, [r4, #12]
 801c234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c238:	81a3      	strh	r3, [r4, #12]
 801c23a:	e7ad      	b.n	801c198 <__sflush_r+0x1c>
 801c23c:	690f      	ldr	r7, [r1, #16]
 801c23e:	2f00      	cmp	r7, #0
 801c240:	d0a9      	beq.n	801c196 <__sflush_r+0x1a>
 801c242:	0793      	lsls	r3, r2, #30
 801c244:	680e      	ldr	r6, [r1, #0]
 801c246:	bf08      	it	eq
 801c248:	694b      	ldreq	r3, [r1, #20]
 801c24a:	600f      	str	r7, [r1, #0]
 801c24c:	bf18      	it	ne
 801c24e:	2300      	movne	r3, #0
 801c250:	eba6 0807 	sub.w	r8, r6, r7
 801c254:	608b      	str	r3, [r1, #8]
 801c256:	f1b8 0f00 	cmp.w	r8, #0
 801c25a:	dd9c      	ble.n	801c196 <__sflush_r+0x1a>
 801c25c:	6a21      	ldr	r1, [r4, #32]
 801c25e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c260:	4643      	mov	r3, r8
 801c262:	463a      	mov	r2, r7
 801c264:	4628      	mov	r0, r5
 801c266:	47b0      	blx	r6
 801c268:	2800      	cmp	r0, #0
 801c26a:	dc06      	bgt.n	801c27a <__sflush_r+0xfe>
 801c26c:	89a3      	ldrh	r3, [r4, #12]
 801c26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c272:	81a3      	strh	r3, [r4, #12]
 801c274:	f04f 30ff 	mov.w	r0, #4294967295
 801c278:	e78e      	b.n	801c198 <__sflush_r+0x1c>
 801c27a:	4407      	add	r7, r0
 801c27c:	eba8 0800 	sub.w	r8, r8, r0
 801c280:	e7e9      	b.n	801c256 <__sflush_r+0xda>
 801c282:	bf00      	nop
 801c284:	20400001 	.word	0x20400001

0801c288 <_fflush_r>:
 801c288:	b538      	push	{r3, r4, r5, lr}
 801c28a:	690b      	ldr	r3, [r1, #16]
 801c28c:	4605      	mov	r5, r0
 801c28e:	460c      	mov	r4, r1
 801c290:	b913      	cbnz	r3, 801c298 <_fflush_r+0x10>
 801c292:	2500      	movs	r5, #0
 801c294:	4628      	mov	r0, r5
 801c296:	bd38      	pop	{r3, r4, r5, pc}
 801c298:	b118      	cbz	r0, 801c2a2 <_fflush_r+0x1a>
 801c29a:	6983      	ldr	r3, [r0, #24]
 801c29c:	b90b      	cbnz	r3, 801c2a2 <_fflush_r+0x1a>
 801c29e:	f000 f887 	bl	801c3b0 <__sinit>
 801c2a2:	4b14      	ldr	r3, [pc, #80]	; (801c2f4 <_fflush_r+0x6c>)
 801c2a4:	429c      	cmp	r4, r3
 801c2a6:	d11b      	bne.n	801c2e0 <_fflush_r+0x58>
 801c2a8:	686c      	ldr	r4, [r5, #4]
 801c2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	d0ef      	beq.n	801c292 <_fflush_r+0xa>
 801c2b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c2b4:	07d0      	lsls	r0, r2, #31
 801c2b6:	d404      	bmi.n	801c2c2 <_fflush_r+0x3a>
 801c2b8:	0599      	lsls	r1, r3, #22
 801c2ba:	d402      	bmi.n	801c2c2 <_fflush_r+0x3a>
 801c2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c2be:	f7fe f824 	bl	801a30a <__retarget_lock_acquire_recursive>
 801c2c2:	4628      	mov	r0, r5
 801c2c4:	4621      	mov	r1, r4
 801c2c6:	f7ff ff59 	bl	801c17c <__sflush_r>
 801c2ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c2cc:	07da      	lsls	r2, r3, #31
 801c2ce:	4605      	mov	r5, r0
 801c2d0:	d4e0      	bmi.n	801c294 <_fflush_r+0xc>
 801c2d2:	89a3      	ldrh	r3, [r4, #12]
 801c2d4:	059b      	lsls	r3, r3, #22
 801c2d6:	d4dd      	bmi.n	801c294 <_fflush_r+0xc>
 801c2d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c2da:	f7fe f817 	bl	801a30c <__retarget_lock_release_recursive>
 801c2de:	e7d9      	b.n	801c294 <_fflush_r+0xc>
 801c2e0:	4b05      	ldr	r3, [pc, #20]	; (801c2f8 <_fflush_r+0x70>)
 801c2e2:	429c      	cmp	r4, r3
 801c2e4:	d101      	bne.n	801c2ea <_fflush_r+0x62>
 801c2e6:	68ac      	ldr	r4, [r5, #8]
 801c2e8:	e7df      	b.n	801c2aa <_fflush_r+0x22>
 801c2ea:	4b04      	ldr	r3, [pc, #16]	; (801c2fc <_fflush_r+0x74>)
 801c2ec:	429c      	cmp	r4, r3
 801c2ee:	bf08      	it	eq
 801c2f0:	68ec      	ldreq	r4, [r5, #12]
 801c2f2:	e7da      	b.n	801c2aa <_fflush_r+0x22>
 801c2f4:	080202a0 	.word	0x080202a0
 801c2f8:	080202c0 	.word	0x080202c0
 801c2fc:	08020280 	.word	0x08020280

0801c300 <std>:
 801c300:	2300      	movs	r3, #0
 801c302:	b510      	push	{r4, lr}
 801c304:	4604      	mov	r4, r0
 801c306:	e9c0 3300 	strd	r3, r3, [r0]
 801c30a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c30e:	6083      	str	r3, [r0, #8]
 801c310:	8181      	strh	r1, [r0, #12]
 801c312:	6643      	str	r3, [r0, #100]	; 0x64
 801c314:	81c2      	strh	r2, [r0, #14]
 801c316:	6183      	str	r3, [r0, #24]
 801c318:	4619      	mov	r1, r3
 801c31a:	2208      	movs	r2, #8
 801c31c:	305c      	adds	r0, #92	; 0x5c
 801c31e:	f7fe f82f 	bl	801a380 <memset>
 801c322:	4b05      	ldr	r3, [pc, #20]	; (801c338 <std+0x38>)
 801c324:	6263      	str	r3, [r4, #36]	; 0x24
 801c326:	4b05      	ldr	r3, [pc, #20]	; (801c33c <std+0x3c>)
 801c328:	62a3      	str	r3, [r4, #40]	; 0x28
 801c32a:	4b05      	ldr	r3, [pc, #20]	; (801c340 <std+0x40>)
 801c32c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c32e:	4b05      	ldr	r3, [pc, #20]	; (801c344 <std+0x44>)
 801c330:	6224      	str	r4, [r4, #32]
 801c332:	6323      	str	r3, [r4, #48]	; 0x30
 801c334:	bd10      	pop	{r4, pc}
 801c336:	bf00      	nop
 801c338:	0801d019 	.word	0x0801d019
 801c33c:	0801d03b 	.word	0x0801d03b
 801c340:	0801d073 	.word	0x0801d073
 801c344:	0801d097 	.word	0x0801d097

0801c348 <_cleanup_r>:
 801c348:	4901      	ldr	r1, [pc, #4]	; (801c350 <_cleanup_r+0x8>)
 801c34a:	f000 b8af 	b.w	801c4ac <_fwalk_reent>
 801c34e:	bf00      	nop
 801c350:	0801c289 	.word	0x0801c289

0801c354 <__sfmoreglue>:
 801c354:	b570      	push	{r4, r5, r6, lr}
 801c356:	2268      	movs	r2, #104	; 0x68
 801c358:	1e4d      	subs	r5, r1, #1
 801c35a:	4355      	muls	r5, r2
 801c35c:	460e      	mov	r6, r1
 801c35e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c362:	f7fe f897 	bl	801a494 <_malloc_r>
 801c366:	4604      	mov	r4, r0
 801c368:	b140      	cbz	r0, 801c37c <__sfmoreglue+0x28>
 801c36a:	2100      	movs	r1, #0
 801c36c:	e9c0 1600 	strd	r1, r6, [r0]
 801c370:	300c      	adds	r0, #12
 801c372:	60a0      	str	r0, [r4, #8]
 801c374:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c378:	f7fe f802 	bl	801a380 <memset>
 801c37c:	4620      	mov	r0, r4
 801c37e:	bd70      	pop	{r4, r5, r6, pc}

0801c380 <__sfp_lock_acquire>:
 801c380:	4801      	ldr	r0, [pc, #4]	; (801c388 <__sfp_lock_acquire+0x8>)
 801c382:	f7fd bfc2 	b.w	801a30a <__retarget_lock_acquire_recursive>
 801c386:	bf00      	nop
 801c388:	200026c5 	.word	0x200026c5

0801c38c <__sfp_lock_release>:
 801c38c:	4801      	ldr	r0, [pc, #4]	; (801c394 <__sfp_lock_release+0x8>)
 801c38e:	f7fd bfbd 	b.w	801a30c <__retarget_lock_release_recursive>
 801c392:	bf00      	nop
 801c394:	200026c5 	.word	0x200026c5

0801c398 <__sinit_lock_acquire>:
 801c398:	4801      	ldr	r0, [pc, #4]	; (801c3a0 <__sinit_lock_acquire+0x8>)
 801c39a:	f7fd bfb6 	b.w	801a30a <__retarget_lock_acquire_recursive>
 801c39e:	bf00      	nop
 801c3a0:	200026c6 	.word	0x200026c6

0801c3a4 <__sinit_lock_release>:
 801c3a4:	4801      	ldr	r0, [pc, #4]	; (801c3ac <__sinit_lock_release+0x8>)
 801c3a6:	f7fd bfb1 	b.w	801a30c <__retarget_lock_release_recursive>
 801c3aa:	bf00      	nop
 801c3ac:	200026c6 	.word	0x200026c6

0801c3b0 <__sinit>:
 801c3b0:	b510      	push	{r4, lr}
 801c3b2:	4604      	mov	r4, r0
 801c3b4:	f7ff fff0 	bl	801c398 <__sinit_lock_acquire>
 801c3b8:	69a3      	ldr	r3, [r4, #24]
 801c3ba:	b11b      	cbz	r3, 801c3c4 <__sinit+0x14>
 801c3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c3c0:	f7ff bff0 	b.w	801c3a4 <__sinit_lock_release>
 801c3c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c3c8:	6523      	str	r3, [r4, #80]	; 0x50
 801c3ca:	4b13      	ldr	r3, [pc, #76]	; (801c418 <__sinit+0x68>)
 801c3cc:	4a13      	ldr	r2, [pc, #76]	; (801c41c <__sinit+0x6c>)
 801c3ce:	681b      	ldr	r3, [r3, #0]
 801c3d0:	62a2      	str	r2, [r4, #40]	; 0x28
 801c3d2:	42a3      	cmp	r3, r4
 801c3d4:	bf04      	itt	eq
 801c3d6:	2301      	moveq	r3, #1
 801c3d8:	61a3      	streq	r3, [r4, #24]
 801c3da:	4620      	mov	r0, r4
 801c3dc:	f000 f820 	bl	801c420 <__sfp>
 801c3e0:	6060      	str	r0, [r4, #4]
 801c3e2:	4620      	mov	r0, r4
 801c3e4:	f000 f81c 	bl	801c420 <__sfp>
 801c3e8:	60a0      	str	r0, [r4, #8]
 801c3ea:	4620      	mov	r0, r4
 801c3ec:	f000 f818 	bl	801c420 <__sfp>
 801c3f0:	2200      	movs	r2, #0
 801c3f2:	60e0      	str	r0, [r4, #12]
 801c3f4:	2104      	movs	r1, #4
 801c3f6:	6860      	ldr	r0, [r4, #4]
 801c3f8:	f7ff ff82 	bl	801c300 <std>
 801c3fc:	68a0      	ldr	r0, [r4, #8]
 801c3fe:	2201      	movs	r2, #1
 801c400:	2109      	movs	r1, #9
 801c402:	f7ff ff7d 	bl	801c300 <std>
 801c406:	68e0      	ldr	r0, [r4, #12]
 801c408:	2202      	movs	r2, #2
 801c40a:	2112      	movs	r1, #18
 801c40c:	f7ff ff78 	bl	801c300 <std>
 801c410:	2301      	movs	r3, #1
 801c412:	61a3      	str	r3, [r4, #24]
 801c414:	e7d2      	b.n	801c3bc <__sinit+0xc>
 801c416:	bf00      	nop
 801c418:	080200a4 	.word	0x080200a4
 801c41c:	0801c349 	.word	0x0801c349

0801c420 <__sfp>:
 801c420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c422:	4607      	mov	r7, r0
 801c424:	f7ff ffac 	bl	801c380 <__sfp_lock_acquire>
 801c428:	4b1e      	ldr	r3, [pc, #120]	; (801c4a4 <__sfp+0x84>)
 801c42a:	681e      	ldr	r6, [r3, #0]
 801c42c:	69b3      	ldr	r3, [r6, #24]
 801c42e:	b913      	cbnz	r3, 801c436 <__sfp+0x16>
 801c430:	4630      	mov	r0, r6
 801c432:	f7ff ffbd 	bl	801c3b0 <__sinit>
 801c436:	3648      	adds	r6, #72	; 0x48
 801c438:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c43c:	3b01      	subs	r3, #1
 801c43e:	d503      	bpl.n	801c448 <__sfp+0x28>
 801c440:	6833      	ldr	r3, [r6, #0]
 801c442:	b30b      	cbz	r3, 801c488 <__sfp+0x68>
 801c444:	6836      	ldr	r6, [r6, #0]
 801c446:	e7f7      	b.n	801c438 <__sfp+0x18>
 801c448:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c44c:	b9d5      	cbnz	r5, 801c484 <__sfp+0x64>
 801c44e:	4b16      	ldr	r3, [pc, #88]	; (801c4a8 <__sfp+0x88>)
 801c450:	60e3      	str	r3, [r4, #12]
 801c452:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c456:	6665      	str	r5, [r4, #100]	; 0x64
 801c458:	f7fd ff56 	bl	801a308 <__retarget_lock_init_recursive>
 801c45c:	f7ff ff96 	bl	801c38c <__sfp_lock_release>
 801c460:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c464:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c468:	6025      	str	r5, [r4, #0]
 801c46a:	61a5      	str	r5, [r4, #24]
 801c46c:	2208      	movs	r2, #8
 801c46e:	4629      	mov	r1, r5
 801c470:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c474:	f7fd ff84 	bl	801a380 <memset>
 801c478:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c47c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c480:	4620      	mov	r0, r4
 801c482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c484:	3468      	adds	r4, #104	; 0x68
 801c486:	e7d9      	b.n	801c43c <__sfp+0x1c>
 801c488:	2104      	movs	r1, #4
 801c48a:	4638      	mov	r0, r7
 801c48c:	f7ff ff62 	bl	801c354 <__sfmoreglue>
 801c490:	4604      	mov	r4, r0
 801c492:	6030      	str	r0, [r6, #0]
 801c494:	2800      	cmp	r0, #0
 801c496:	d1d5      	bne.n	801c444 <__sfp+0x24>
 801c498:	f7ff ff78 	bl	801c38c <__sfp_lock_release>
 801c49c:	230c      	movs	r3, #12
 801c49e:	603b      	str	r3, [r7, #0]
 801c4a0:	e7ee      	b.n	801c480 <__sfp+0x60>
 801c4a2:	bf00      	nop
 801c4a4:	080200a4 	.word	0x080200a4
 801c4a8:	ffff0001 	.word	0xffff0001

0801c4ac <_fwalk_reent>:
 801c4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c4b0:	4606      	mov	r6, r0
 801c4b2:	4688      	mov	r8, r1
 801c4b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c4b8:	2700      	movs	r7, #0
 801c4ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c4be:	f1b9 0901 	subs.w	r9, r9, #1
 801c4c2:	d505      	bpl.n	801c4d0 <_fwalk_reent+0x24>
 801c4c4:	6824      	ldr	r4, [r4, #0]
 801c4c6:	2c00      	cmp	r4, #0
 801c4c8:	d1f7      	bne.n	801c4ba <_fwalk_reent+0xe>
 801c4ca:	4638      	mov	r0, r7
 801c4cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c4d0:	89ab      	ldrh	r3, [r5, #12]
 801c4d2:	2b01      	cmp	r3, #1
 801c4d4:	d907      	bls.n	801c4e6 <_fwalk_reent+0x3a>
 801c4d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c4da:	3301      	adds	r3, #1
 801c4dc:	d003      	beq.n	801c4e6 <_fwalk_reent+0x3a>
 801c4de:	4629      	mov	r1, r5
 801c4e0:	4630      	mov	r0, r6
 801c4e2:	47c0      	blx	r8
 801c4e4:	4307      	orrs	r7, r0
 801c4e6:	3568      	adds	r5, #104	; 0x68
 801c4e8:	e7e9      	b.n	801c4be <_fwalk_reent+0x12>
	...

0801c4ec <_localeconv_r>:
 801c4ec:	4800      	ldr	r0, [pc, #0]	; (801c4f0 <_localeconv_r+0x4>)
 801c4ee:	4770      	bx	lr
 801c4f0:	200003a4 	.word	0x200003a4

0801c4f4 <__swhatbuf_r>:
 801c4f4:	b570      	push	{r4, r5, r6, lr}
 801c4f6:	460e      	mov	r6, r1
 801c4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4fc:	2900      	cmp	r1, #0
 801c4fe:	b096      	sub	sp, #88	; 0x58
 801c500:	4614      	mov	r4, r2
 801c502:	461d      	mov	r5, r3
 801c504:	da08      	bge.n	801c518 <__swhatbuf_r+0x24>
 801c506:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c50a:	2200      	movs	r2, #0
 801c50c:	602a      	str	r2, [r5, #0]
 801c50e:	061a      	lsls	r2, r3, #24
 801c510:	d410      	bmi.n	801c534 <__swhatbuf_r+0x40>
 801c512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c516:	e00e      	b.n	801c536 <__swhatbuf_r+0x42>
 801c518:	466a      	mov	r2, sp
 801c51a:	f000 fdef 	bl	801d0fc <_fstat_r>
 801c51e:	2800      	cmp	r0, #0
 801c520:	dbf1      	blt.n	801c506 <__swhatbuf_r+0x12>
 801c522:	9a01      	ldr	r2, [sp, #4]
 801c524:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c528:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c52c:	425a      	negs	r2, r3
 801c52e:	415a      	adcs	r2, r3
 801c530:	602a      	str	r2, [r5, #0]
 801c532:	e7ee      	b.n	801c512 <__swhatbuf_r+0x1e>
 801c534:	2340      	movs	r3, #64	; 0x40
 801c536:	2000      	movs	r0, #0
 801c538:	6023      	str	r3, [r4, #0]
 801c53a:	b016      	add	sp, #88	; 0x58
 801c53c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c540 <__smakebuf_r>:
 801c540:	898b      	ldrh	r3, [r1, #12]
 801c542:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c544:	079d      	lsls	r5, r3, #30
 801c546:	4606      	mov	r6, r0
 801c548:	460c      	mov	r4, r1
 801c54a:	d507      	bpl.n	801c55c <__smakebuf_r+0x1c>
 801c54c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c550:	6023      	str	r3, [r4, #0]
 801c552:	6123      	str	r3, [r4, #16]
 801c554:	2301      	movs	r3, #1
 801c556:	6163      	str	r3, [r4, #20]
 801c558:	b002      	add	sp, #8
 801c55a:	bd70      	pop	{r4, r5, r6, pc}
 801c55c:	ab01      	add	r3, sp, #4
 801c55e:	466a      	mov	r2, sp
 801c560:	f7ff ffc8 	bl	801c4f4 <__swhatbuf_r>
 801c564:	9900      	ldr	r1, [sp, #0]
 801c566:	4605      	mov	r5, r0
 801c568:	4630      	mov	r0, r6
 801c56a:	f7fd ff93 	bl	801a494 <_malloc_r>
 801c56e:	b948      	cbnz	r0, 801c584 <__smakebuf_r+0x44>
 801c570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c574:	059a      	lsls	r2, r3, #22
 801c576:	d4ef      	bmi.n	801c558 <__smakebuf_r+0x18>
 801c578:	f023 0303 	bic.w	r3, r3, #3
 801c57c:	f043 0302 	orr.w	r3, r3, #2
 801c580:	81a3      	strh	r3, [r4, #12]
 801c582:	e7e3      	b.n	801c54c <__smakebuf_r+0xc>
 801c584:	4b0d      	ldr	r3, [pc, #52]	; (801c5bc <__smakebuf_r+0x7c>)
 801c586:	62b3      	str	r3, [r6, #40]	; 0x28
 801c588:	89a3      	ldrh	r3, [r4, #12]
 801c58a:	6020      	str	r0, [r4, #0]
 801c58c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c590:	81a3      	strh	r3, [r4, #12]
 801c592:	9b00      	ldr	r3, [sp, #0]
 801c594:	6163      	str	r3, [r4, #20]
 801c596:	9b01      	ldr	r3, [sp, #4]
 801c598:	6120      	str	r0, [r4, #16]
 801c59a:	b15b      	cbz	r3, 801c5b4 <__smakebuf_r+0x74>
 801c59c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c5a0:	4630      	mov	r0, r6
 801c5a2:	f000 fdbd 	bl	801d120 <_isatty_r>
 801c5a6:	b128      	cbz	r0, 801c5b4 <__smakebuf_r+0x74>
 801c5a8:	89a3      	ldrh	r3, [r4, #12]
 801c5aa:	f023 0303 	bic.w	r3, r3, #3
 801c5ae:	f043 0301 	orr.w	r3, r3, #1
 801c5b2:	81a3      	strh	r3, [r4, #12]
 801c5b4:	89a0      	ldrh	r0, [r4, #12]
 801c5b6:	4305      	orrs	r5, r0
 801c5b8:	81a5      	strh	r5, [r4, #12]
 801c5ba:	e7cd      	b.n	801c558 <__smakebuf_r+0x18>
 801c5bc:	0801c349 	.word	0x0801c349

0801c5c0 <__ascii_mbtowc>:
 801c5c0:	b082      	sub	sp, #8
 801c5c2:	b901      	cbnz	r1, 801c5c6 <__ascii_mbtowc+0x6>
 801c5c4:	a901      	add	r1, sp, #4
 801c5c6:	b142      	cbz	r2, 801c5da <__ascii_mbtowc+0x1a>
 801c5c8:	b14b      	cbz	r3, 801c5de <__ascii_mbtowc+0x1e>
 801c5ca:	7813      	ldrb	r3, [r2, #0]
 801c5cc:	600b      	str	r3, [r1, #0]
 801c5ce:	7812      	ldrb	r2, [r2, #0]
 801c5d0:	1e10      	subs	r0, r2, #0
 801c5d2:	bf18      	it	ne
 801c5d4:	2001      	movne	r0, #1
 801c5d6:	b002      	add	sp, #8
 801c5d8:	4770      	bx	lr
 801c5da:	4610      	mov	r0, r2
 801c5dc:	e7fb      	b.n	801c5d6 <__ascii_mbtowc+0x16>
 801c5de:	f06f 0001 	mvn.w	r0, #1
 801c5e2:	e7f8      	b.n	801c5d6 <__ascii_mbtowc+0x16>

0801c5e4 <__malloc_lock>:
 801c5e4:	4801      	ldr	r0, [pc, #4]	; (801c5ec <__malloc_lock+0x8>)
 801c5e6:	f7fd be90 	b.w	801a30a <__retarget_lock_acquire_recursive>
 801c5ea:	bf00      	nop
 801c5ec:	200026c4 	.word	0x200026c4

0801c5f0 <__malloc_unlock>:
 801c5f0:	4801      	ldr	r0, [pc, #4]	; (801c5f8 <__malloc_unlock+0x8>)
 801c5f2:	f7fd be8b 	b.w	801a30c <__retarget_lock_release_recursive>
 801c5f6:	bf00      	nop
 801c5f8:	200026c4 	.word	0x200026c4

0801c5fc <_Balloc>:
 801c5fc:	b570      	push	{r4, r5, r6, lr}
 801c5fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c600:	4604      	mov	r4, r0
 801c602:	460d      	mov	r5, r1
 801c604:	b976      	cbnz	r6, 801c624 <_Balloc+0x28>
 801c606:	2010      	movs	r0, #16
 801c608:	f7fd fe82 	bl	801a310 <malloc>
 801c60c:	4602      	mov	r2, r0
 801c60e:	6260      	str	r0, [r4, #36]	; 0x24
 801c610:	b920      	cbnz	r0, 801c61c <_Balloc+0x20>
 801c612:	4b18      	ldr	r3, [pc, #96]	; (801c674 <_Balloc+0x78>)
 801c614:	4818      	ldr	r0, [pc, #96]	; (801c678 <_Balloc+0x7c>)
 801c616:	2166      	movs	r1, #102	; 0x66
 801c618:	f7fd fe14 	bl	801a244 <__assert_func>
 801c61c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c620:	6006      	str	r6, [r0, #0]
 801c622:	60c6      	str	r6, [r0, #12]
 801c624:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c626:	68f3      	ldr	r3, [r6, #12]
 801c628:	b183      	cbz	r3, 801c64c <_Balloc+0x50>
 801c62a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c62c:	68db      	ldr	r3, [r3, #12]
 801c62e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c632:	b9b8      	cbnz	r0, 801c664 <_Balloc+0x68>
 801c634:	2101      	movs	r1, #1
 801c636:	fa01 f605 	lsl.w	r6, r1, r5
 801c63a:	1d72      	adds	r2, r6, #5
 801c63c:	0092      	lsls	r2, r2, #2
 801c63e:	4620      	mov	r0, r4
 801c640:	f7fd fea6 	bl	801a390 <_calloc_r>
 801c644:	b160      	cbz	r0, 801c660 <_Balloc+0x64>
 801c646:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c64a:	e00e      	b.n	801c66a <_Balloc+0x6e>
 801c64c:	2221      	movs	r2, #33	; 0x21
 801c64e:	2104      	movs	r1, #4
 801c650:	4620      	mov	r0, r4
 801c652:	f7fd fe9d 	bl	801a390 <_calloc_r>
 801c656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c658:	60f0      	str	r0, [r6, #12]
 801c65a:	68db      	ldr	r3, [r3, #12]
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	d1e4      	bne.n	801c62a <_Balloc+0x2e>
 801c660:	2000      	movs	r0, #0
 801c662:	bd70      	pop	{r4, r5, r6, pc}
 801c664:	6802      	ldr	r2, [r0, #0]
 801c666:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c66a:	2300      	movs	r3, #0
 801c66c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c670:	e7f7      	b.n	801c662 <_Balloc+0x66>
 801c672:	bf00      	nop
 801c674:	080201fb 	.word	0x080201fb
 801c678:	080202ea 	.word	0x080202ea

0801c67c <_Bfree>:
 801c67c:	b570      	push	{r4, r5, r6, lr}
 801c67e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c680:	4605      	mov	r5, r0
 801c682:	460c      	mov	r4, r1
 801c684:	b976      	cbnz	r6, 801c6a4 <_Bfree+0x28>
 801c686:	2010      	movs	r0, #16
 801c688:	f7fd fe42 	bl	801a310 <malloc>
 801c68c:	4602      	mov	r2, r0
 801c68e:	6268      	str	r0, [r5, #36]	; 0x24
 801c690:	b920      	cbnz	r0, 801c69c <_Bfree+0x20>
 801c692:	4b09      	ldr	r3, [pc, #36]	; (801c6b8 <_Bfree+0x3c>)
 801c694:	4809      	ldr	r0, [pc, #36]	; (801c6bc <_Bfree+0x40>)
 801c696:	218a      	movs	r1, #138	; 0x8a
 801c698:	f7fd fdd4 	bl	801a244 <__assert_func>
 801c69c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c6a0:	6006      	str	r6, [r0, #0]
 801c6a2:	60c6      	str	r6, [r0, #12]
 801c6a4:	b13c      	cbz	r4, 801c6b6 <_Bfree+0x3a>
 801c6a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c6a8:	6862      	ldr	r2, [r4, #4]
 801c6aa:	68db      	ldr	r3, [r3, #12]
 801c6ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c6b0:	6021      	str	r1, [r4, #0]
 801c6b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c6b6:	bd70      	pop	{r4, r5, r6, pc}
 801c6b8:	080201fb 	.word	0x080201fb
 801c6bc:	080202ea 	.word	0x080202ea

0801c6c0 <__multadd>:
 801c6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c6c4:	690d      	ldr	r5, [r1, #16]
 801c6c6:	4607      	mov	r7, r0
 801c6c8:	460c      	mov	r4, r1
 801c6ca:	461e      	mov	r6, r3
 801c6cc:	f101 0c14 	add.w	ip, r1, #20
 801c6d0:	2000      	movs	r0, #0
 801c6d2:	f8dc 3000 	ldr.w	r3, [ip]
 801c6d6:	b299      	uxth	r1, r3
 801c6d8:	fb02 6101 	mla	r1, r2, r1, r6
 801c6dc:	0c1e      	lsrs	r6, r3, #16
 801c6de:	0c0b      	lsrs	r3, r1, #16
 801c6e0:	fb02 3306 	mla	r3, r2, r6, r3
 801c6e4:	b289      	uxth	r1, r1
 801c6e6:	3001      	adds	r0, #1
 801c6e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c6ec:	4285      	cmp	r5, r0
 801c6ee:	f84c 1b04 	str.w	r1, [ip], #4
 801c6f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c6f6:	dcec      	bgt.n	801c6d2 <__multadd+0x12>
 801c6f8:	b30e      	cbz	r6, 801c73e <__multadd+0x7e>
 801c6fa:	68a3      	ldr	r3, [r4, #8]
 801c6fc:	42ab      	cmp	r3, r5
 801c6fe:	dc19      	bgt.n	801c734 <__multadd+0x74>
 801c700:	6861      	ldr	r1, [r4, #4]
 801c702:	4638      	mov	r0, r7
 801c704:	3101      	adds	r1, #1
 801c706:	f7ff ff79 	bl	801c5fc <_Balloc>
 801c70a:	4680      	mov	r8, r0
 801c70c:	b928      	cbnz	r0, 801c71a <__multadd+0x5a>
 801c70e:	4602      	mov	r2, r0
 801c710:	4b0c      	ldr	r3, [pc, #48]	; (801c744 <__multadd+0x84>)
 801c712:	480d      	ldr	r0, [pc, #52]	; (801c748 <__multadd+0x88>)
 801c714:	21b5      	movs	r1, #181	; 0xb5
 801c716:	f7fd fd95 	bl	801a244 <__assert_func>
 801c71a:	6922      	ldr	r2, [r4, #16]
 801c71c:	3202      	adds	r2, #2
 801c71e:	f104 010c 	add.w	r1, r4, #12
 801c722:	0092      	lsls	r2, r2, #2
 801c724:	300c      	adds	r0, #12
 801c726:	f7fd fe03 	bl	801a330 <memcpy>
 801c72a:	4621      	mov	r1, r4
 801c72c:	4638      	mov	r0, r7
 801c72e:	f7ff ffa5 	bl	801c67c <_Bfree>
 801c732:	4644      	mov	r4, r8
 801c734:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c738:	3501      	adds	r5, #1
 801c73a:	615e      	str	r6, [r3, #20]
 801c73c:	6125      	str	r5, [r4, #16]
 801c73e:	4620      	mov	r0, r4
 801c740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c744:	0802026d 	.word	0x0802026d
 801c748:	080202ea 	.word	0x080202ea

0801c74c <__hi0bits>:
 801c74c:	0c03      	lsrs	r3, r0, #16
 801c74e:	041b      	lsls	r3, r3, #16
 801c750:	b9d3      	cbnz	r3, 801c788 <__hi0bits+0x3c>
 801c752:	0400      	lsls	r0, r0, #16
 801c754:	2310      	movs	r3, #16
 801c756:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c75a:	bf04      	itt	eq
 801c75c:	0200      	lsleq	r0, r0, #8
 801c75e:	3308      	addeq	r3, #8
 801c760:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c764:	bf04      	itt	eq
 801c766:	0100      	lsleq	r0, r0, #4
 801c768:	3304      	addeq	r3, #4
 801c76a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c76e:	bf04      	itt	eq
 801c770:	0080      	lsleq	r0, r0, #2
 801c772:	3302      	addeq	r3, #2
 801c774:	2800      	cmp	r0, #0
 801c776:	db05      	blt.n	801c784 <__hi0bits+0x38>
 801c778:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c77c:	f103 0301 	add.w	r3, r3, #1
 801c780:	bf08      	it	eq
 801c782:	2320      	moveq	r3, #32
 801c784:	4618      	mov	r0, r3
 801c786:	4770      	bx	lr
 801c788:	2300      	movs	r3, #0
 801c78a:	e7e4      	b.n	801c756 <__hi0bits+0xa>

0801c78c <__lo0bits>:
 801c78c:	6803      	ldr	r3, [r0, #0]
 801c78e:	f013 0207 	ands.w	r2, r3, #7
 801c792:	4601      	mov	r1, r0
 801c794:	d00b      	beq.n	801c7ae <__lo0bits+0x22>
 801c796:	07da      	lsls	r2, r3, #31
 801c798:	d423      	bmi.n	801c7e2 <__lo0bits+0x56>
 801c79a:	0798      	lsls	r0, r3, #30
 801c79c:	bf49      	itett	mi
 801c79e:	085b      	lsrmi	r3, r3, #1
 801c7a0:	089b      	lsrpl	r3, r3, #2
 801c7a2:	2001      	movmi	r0, #1
 801c7a4:	600b      	strmi	r3, [r1, #0]
 801c7a6:	bf5c      	itt	pl
 801c7a8:	600b      	strpl	r3, [r1, #0]
 801c7aa:	2002      	movpl	r0, #2
 801c7ac:	4770      	bx	lr
 801c7ae:	b298      	uxth	r0, r3
 801c7b0:	b9a8      	cbnz	r0, 801c7de <__lo0bits+0x52>
 801c7b2:	0c1b      	lsrs	r3, r3, #16
 801c7b4:	2010      	movs	r0, #16
 801c7b6:	b2da      	uxtb	r2, r3
 801c7b8:	b90a      	cbnz	r2, 801c7be <__lo0bits+0x32>
 801c7ba:	3008      	adds	r0, #8
 801c7bc:	0a1b      	lsrs	r3, r3, #8
 801c7be:	071a      	lsls	r2, r3, #28
 801c7c0:	bf04      	itt	eq
 801c7c2:	091b      	lsreq	r3, r3, #4
 801c7c4:	3004      	addeq	r0, #4
 801c7c6:	079a      	lsls	r2, r3, #30
 801c7c8:	bf04      	itt	eq
 801c7ca:	089b      	lsreq	r3, r3, #2
 801c7cc:	3002      	addeq	r0, #2
 801c7ce:	07da      	lsls	r2, r3, #31
 801c7d0:	d403      	bmi.n	801c7da <__lo0bits+0x4e>
 801c7d2:	085b      	lsrs	r3, r3, #1
 801c7d4:	f100 0001 	add.w	r0, r0, #1
 801c7d8:	d005      	beq.n	801c7e6 <__lo0bits+0x5a>
 801c7da:	600b      	str	r3, [r1, #0]
 801c7dc:	4770      	bx	lr
 801c7de:	4610      	mov	r0, r2
 801c7e0:	e7e9      	b.n	801c7b6 <__lo0bits+0x2a>
 801c7e2:	2000      	movs	r0, #0
 801c7e4:	4770      	bx	lr
 801c7e6:	2020      	movs	r0, #32
 801c7e8:	4770      	bx	lr
	...

0801c7ec <__i2b>:
 801c7ec:	b510      	push	{r4, lr}
 801c7ee:	460c      	mov	r4, r1
 801c7f0:	2101      	movs	r1, #1
 801c7f2:	f7ff ff03 	bl	801c5fc <_Balloc>
 801c7f6:	4602      	mov	r2, r0
 801c7f8:	b928      	cbnz	r0, 801c806 <__i2b+0x1a>
 801c7fa:	4b05      	ldr	r3, [pc, #20]	; (801c810 <__i2b+0x24>)
 801c7fc:	4805      	ldr	r0, [pc, #20]	; (801c814 <__i2b+0x28>)
 801c7fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801c802:	f7fd fd1f 	bl	801a244 <__assert_func>
 801c806:	2301      	movs	r3, #1
 801c808:	6144      	str	r4, [r0, #20]
 801c80a:	6103      	str	r3, [r0, #16]
 801c80c:	bd10      	pop	{r4, pc}
 801c80e:	bf00      	nop
 801c810:	0802026d 	.word	0x0802026d
 801c814:	080202ea 	.word	0x080202ea

0801c818 <__multiply>:
 801c818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c81c:	4691      	mov	r9, r2
 801c81e:	690a      	ldr	r2, [r1, #16]
 801c820:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c824:	429a      	cmp	r2, r3
 801c826:	bfb8      	it	lt
 801c828:	460b      	movlt	r3, r1
 801c82a:	460c      	mov	r4, r1
 801c82c:	bfbc      	itt	lt
 801c82e:	464c      	movlt	r4, r9
 801c830:	4699      	movlt	r9, r3
 801c832:	6927      	ldr	r7, [r4, #16]
 801c834:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c838:	68a3      	ldr	r3, [r4, #8]
 801c83a:	6861      	ldr	r1, [r4, #4]
 801c83c:	eb07 060a 	add.w	r6, r7, sl
 801c840:	42b3      	cmp	r3, r6
 801c842:	b085      	sub	sp, #20
 801c844:	bfb8      	it	lt
 801c846:	3101      	addlt	r1, #1
 801c848:	f7ff fed8 	bl	801c5fc <_Balloc>
 801c84c:	b930      	cbnz	r0, 801c85c <__multiply+0x44>
 801c84e:	4602      	mov	r2, r0
 801c850:	4b44      	ldr	r3, [pc, #272]	; (801c964 <__multiply+0x14c>)
 801c852:	4845      	ldr	r0, [pc, #276]	; (801c968 <__multiply+0x150>)
 801c854:	f240 115d 	movw	r1, #349	; 0x15d
 801c858:	f7fd fcf4 	bl	801a244 <__assert_func>
 801c85c:	f100 0514 	add.w	r5, r0, #20
 801c860:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c864:	462b      	mov	r3, r5
 801c866:	2200      	movs	r2, #0
 801c868:	4543      	cmp	r3, r8
 801c86a:	d321      	bcc.n	801c8b0 <__multiply+0x98>
 801c86c:	f104 0314 	add.w	r3, r4, #20
 801c870:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c874:	f109 0314 	add.w	r3, r9, #20
 801c878:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c87c:	9202      	str	r2, [sp, #8]
 801c87e:	1b3a      	subs	r2, r7, r4
 801c880:	3a15      	subs	r2, #21
 801c882:	f022 0203 	bic.w	r2, r2, #3
 801c886:	3204      	adds	r2, #4
 801c888:	f104 0115 	add.w	r1, r4, #21
 801c88c:	428f      	cmp	r7, r1
 801c88e:	bf38      	it	cc
 801c890:	2204      	movcc	r2, #4
 801c892:	9201      	str	r2, [sp, #4]
 801c894:	9a02      	ldr	r2, [sp, #8]
 801c896:	9303      	str	r3, [sp, #12]
 801c898:	429a      	cmp	r2, r3
 801c89a:	d80c      	bhi.n	801c8b6 <__multiply+0x9e>
 801c89c:	2e00      	cmp	r6, #0
 801c89e:	dd03      	ble.n	801c8a8 <__multiply+0x90>
 801c8a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	d05a      	beq.n	801c95e <__multiply+0x146>
 801c8a8:	6106      	str	r6, [r0, #16]
 801c8aa:	b005      	add	sp, #20
 801c8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8b0:	f843 2b04 	str.w	r2, [r3], #4
 801c8b4:	e7d8      	b.n	801c868 <__multiply+0x50>
 801c8b6:	f8b3 a000 	ldrh.w	sl, [r3]
 801c8ba:	f1ba 0f00 	cmp.w	sl, #0
 801c8be:	d024      	beq.n	801c90a <__multiply+0xf2>
 801c8c0:	f104 0e14 	add.w	lr, r4, #20
 801c8c4:	46a9      	mov	r9, r5
 801c8c6:	f04f 0c00 	mov.w	ip, #0
 801c8ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c8ce:	f8d9 1000 	ldr.w	r1, [r9]
 801c8d2:	fa1f fb82 	uxth.w	fp, r2
 801c8d6:	b289      	uxth	r1, r1
 801c8d8:	fb0a 110b 	mla	r1, sl, fp, r1
 801c8dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c8e0:	f8d9 2000 	ldr.w	r2, [r9]
 801c8e4:	4461      	add	r1, ip
 801c8e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c8ea:	fb0a c20b 	mla	r2, sl, fp, ip
 801c8ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c8f2:	b289      	uxth	r1, r1
 801c8f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c8f8:	4577      	cmp	r7, lr
 801c8fa:	f849 1b04 	str.w	r1, [r9], #4
 801c8fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c902:	d8e2      	bhi.n	801c8ca <__multiply+0xb2>
 801c904:	9a01      	ldr	r2, [sp, #4]
 801c906:	f845 c002 	str.w	ip, [r5, r2]
 801c90a:	9a03      	ldr	r2, [sp, #12]
 801c90c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c910:	3304      	adds	r3, #4
 801c912:	f1b9 0f00 	cmp.w	r9, #0
 801c916:	d020      	beq.n	801c95a <__multiply+0x142>
 801c918:	6829      	ldr	r1, [r5, #0]
 801c91a:	f104 0c14 	add.w	ip, r4, #20
 801c91e:	46ae      	mov	lr, r5
 801c920:	f04f 0a00 	mov.w	sl, #0
 801c924:	f8bc b000 	ldrh.w	fp, [ip]
 801c928:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c92c:	fb09 220b 	mla	r2, r9, fp, r2
 801c930:	4492      	add	sl, r2
 801c932:	b289      	uxth	r1, r1
 801c934:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801c938:	f84e 1b04 	str.w	r1, [lr], #4
 801c93c:	f85c 2b04 	ldr.w	r2, [ip], #4
 801c940:	f8be 1000 	ldrh.w	r1, [lr]
 801c944:	0c12      	lsrs	r2, r2, #16
 801c946:	fb09 1102 	mla	r1, r9, r2, r1
 801c94a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801c94e:	4567      	cmp	r7, ip
 801c950:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c954:	d8e6      	bhi.n	801c924 <__multiply+0x10c>
 801c956:	9a01      	ldr	r2, [sp, #4]
 801c958:	50a9      	str	r1, [r5, r2]
 801c95a:	3504      	adds	r5, #4
 801c95c:	e79a      	b.n	801c894 <__multiply+0x7c>
 801c95e:	3e01      	subs	r6, #1
 801c960:	e79c      	b.n	801c89c <__multiply+0x84>
 801c962:	bf00      	nop
 801c964:	0802026d 	.word	0x0802026d
 801c968:	080202ea 	.word	0x080202ea

0801c96c <__pow5mult>:
 801c96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c970:	4615      	mov	r5, r2
 801c972:	f012 0203 	ands.w	r2, r2, #3
 801c976:	4606      	mov	r6, r0
 801c978:	460f      	mov	r7, r1
 801c97a:	d007      	beq.n	801c98c <__pow5mult+0x20>
 801c97c:	4c25      	ldr	r4, [pc, #148]	; (801ca14 <__pow5mult+0xa8>)
 801c97e:	3a01      	subs	r2, #1
 801c980:	2300      	movs	r3, #0
 801c982:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c986:	f7ff fe9b 	bl	801c6c0 <__multadd>
 801c98a:	4607      	mov	r7, r0
 801c98c:	10ad      	asrs	r5, r5, #2
 801c98e:	d03d      	beq.n	801ca0c <__pow5mult+0xa0>
 801c990:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801c992:	b97c      	cbnz	r4, 801c9b4 <__pow5mult+0x48>
 801c994:	2010      	movs	r0, #16
 801c996:	f7fd fcbb 	bl	801a310 <malloc>
 801c99a:	4602      	mov	r2, r0
 801c99c:	6270      	str	r0, [r6, #36]	; 0x24
 801c99e:	b928      	cbnz	r0, 801c9ac <__pow5mult+0x40>
 801c9a0:	4b1d      	ldr	r3, [pc, #116]	; (801ca18 <__pow5mult+0xac>)
 801c9a2:	481e      	ldr	r0, [pc, #120]	; (801ca1c <__pow5mult+0xb0>)
 801c9a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801c9a8:	f7fd fc4c 	bl	801a244 <__assert_func>
 801c9ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c9b0:	6004      	str	r4, [r0, #0]
 801c9b2:	60c4      	str	r4, [r0, #12]
 801c9b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801c9b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c9bc:	b94c      	cbnz	r4, 801c9d2 <__pow5mult+0x66>
 801c9be:	f240 2171 	movw	r1, #625	; 0x271
 801c9c2:	4630      	mov	r0, r6
 801c9c4:	f7ff ff12 	bl	801c7ec <__i2b>
 801c9c8:	2300      	movs	r3, #0
 801c9ca:	f8c8 0008 	str.w	r0, [r8, #8]
 801c9ce:	4604      	mov	r4, r0
 801c9d0:	6003      	str	r3, [r0, #0]
 801c9d2:	f04f 0900 	mov.w	r9, #0
 801c9d6:	07eb      	lsls	r3, r5, #31
 801c9d8:	d50a      	bpl.n	801c9f0 <__pow5mult+0x84>
 801c9da:	4639      	mov	r1, r7
 801c9dc:	4622      	mov	r2, r4
 801c9de:	4630      	mov	r0, r6
 801c9e0:	f7ff ff1a 	bl	801c818 <__multiply>
 801c9e4:	4639      	mov	r1, r7
 801c9e6:	4680      	mov	r8, r0
 801c9e8:	4630      	mov	r0, r6
 801c9ea:	f7ff fe47 	bl	801c67c <_Bfree>
 801c9ee:	4647      	mov	r7, r8
 801c9f0:	106d      	asrs	r5, r5, #1
 801c9f2:	d00b      	beq.n	801ca0c <__pow5mult+0xa0>
 801c9f4:	6820      	ldr	r0, [r4, #0]
 801c9f6:	b938      	cbnz	r0, 801ca08 <__pow5mult+0x9c>
 801c9f8:	4622      	mov	r2, r4
 801c9fa:	4621      	mov	r1, r4
 801c9fc:	4630      	mov	r0, r6
 801c9fe:	f7ff ff0b 	bl	801c818 <__multiply>
 801ca02:	6020      	str	r0, [r4, #0]
 801ca04:	f8c0 9000 	str.w	r9, [r0]
 801ca08:	4604      	mov	r4, r0
 801ca0a:	e7e4      	b.n	801c9d6 <__pow5mult+0x6a>
 801ca0c:	4638      	mov	r0, r7
 801ca0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ca12:	bf00      	nop
 801ca14:	08020438 	.word	0x08020438
 801ca18:	080201fb 	.word	0x080201fb
 801ca1c:	080202ea 	.word	0x080202ea

0801ca20 <__lshift>:
 801ca20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ca24:	460c      	mov	r4, r1
 801ca26:	6849      	ldr	r1, [r1, #4]
 801ca28:	6923      	ldr	r3, [r4, #16]
 801ca2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ca2e:	68a3      	ldr	r3, [r4, #8]
 801ca30:	4607      	mov	r7, r0
 801ca32:	4691      	mov	r9, r2
 801ca34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ca38:	f108 0601 	add.w	r6, r8, #1
 801ca3c:	42b3      	cmp	r3, r6
 801ca3e:	db0b      	blt.n	801ca58 <__lshift+0x38>
 801ca40:	4638      	mov	r0, r7
 801ca42:	f7ff fddb 	bl	801c5fc <_Balloc>
 801ca46:	4605      	mov	r5, r0
 801ca48:	b948      	cbnz	r0, 801ca5e <__lshift+0x3e>
 801ca4a:	4602      	mov	r2, r0
 801ca4c:	4b2a      	ldr	r3, [pc, #168]	; (801caf8 <__lshift+0xd8>)
 801ca4e:	482b      	ldr	r0, [pc, #172]	; (801cafc <__lshift+0xdc>)
 801ca50:	f240 11d9 	movw	r1, #473	; 0x1d9
 801ca54:	f7fd fbf6 	bl	801a244 <__assert_func>
 801ca58:	3101      	adds	r1, #1
 801ca5a:	005b      	lsls	r3, r3, #1
 801ca5c:	e7ee      	b.n	801ca3c <__lshift+0x1c>
 801ca5e:	2300      	movs	r3, #0
 801ca60:	f100 0114 	add.w	r1, r0, #20
 801ca64:	f100 0210 	add.w	r2, r0, #16
 801ca68:	4618      	mov	r0, r3
 801ca6a:	4553      	cmp	r3, sl
 801ca6c:	db37      	blt.n	801cade <__lshift+0xbe>
 801ca6e:	6920      	ldr	r0, [r4, #16]
 801ca70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ca74:	f104 0314 	add.w	r3, r4, #20
 801ca78:	f019 091f 	ands.w	r9, r9, #31
 801ca7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ca80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801ca84:	d02f      	beq.n	801cae6 <__lshift+0xc6>
 801ca86:	f1c9 0e20 	rsb	lr, r9, #32
 801ca8a:	468a      	mov	sl, r1
 801ca8c:	f04f 0c00 	mov.w	ip, #0
 801ca90:	681a      	ldr	r2, [r3, #0]
 801ca92:	fa02 f209 	lsl.w	r2, r2, r9
 801ca96:	ea42 020c 	orr.w	r2, r2, ip
 801ca9a:	f84a 2b04 	str.w	r2, [sl], #4
 801ca9e:	f853 2b04 	ldr.w	r2, [r3], #4
 801caa2:	4298      	cmp	r0, r3
 801caa4:	fa22 fc0e 	lsr.w	ip, r2, lr
 801caa8:	d8f2      	bhi.n	801ca90 <__lshift+0x70>
 801caaa:	1b03      	subs	r3, r0, r4
 801caac:	3b15      	subs	r3, #21
 801caae:	f023 0303 	bic.w	r3, r3, #3
 801cab2:	3304      	adds	r3, #4
 801cab4:	f104 0215 	add.w	r2, r4, #21
 801cab8:	4290      	cmp	r0, r2
 801caba:	bf38      	it	cc
 801cabc:	2304      	movcc	r3, #4
 801cabe:	f841 c003 	str.w	ip, [r1, r3]
 801cac2:	f1bc 0f00 	cmp.w	ip, #0
 801cac6:	d001      	beq.n	801cacc <__lshift+0xac>
 801cac8:	f108 0602 	add.w	r6, r8, #2
 801cacc:	3e01      	subs	r6, #1
 801cace:	4638      	mov	r0, r7
 801cad0:	612e      	str	r6, [r5, #16]
 801cad2:	4621      	mov	r1, r4
 801cad4:	f7ff fdd2 	bl	801c67c <_Bfree>
 801cad8:	4628      	mov	r0, r5
 801cada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cade:	f842 0f04 	str.w	r0, [r2, #4]!
 801cae2:	3301      	adds	r3, #1
 801cae4:	e7c1      	b.n	801ca6a <__lshift+0x4a>
 801cae6:	3904      	subs	r1, #4
 801cae8:	f853 2b04 	ldr.w	r2, [r3], #4
 801caec:	f841 2f04 	str.w	r2, [r1, #4]!
 801caf0:	4298      	cmp	r0, r3
 801caf2:	d8f9      	bhi.n	801cae8 <__lshift+0xc8>
 801caf4:	e7ea      	b.n	801cacc <__lshift+0xac>
 801caf6:	bf00      	nop
 801caf8:	0802026d 	.word	0x0802026d
 801cafc:	080202ea 	.word	0x080202ea

0801cb00 <__mcmp>:
 801cb00:	b530      	push	{r4, r5, lr}
 801cb02:	6902      	ldr	r2, [r0, #16]
 801cb04:	690c      	ldr	r4, [r1, #16]
 801cb06:	1b12      	subs	r2, r2, r4
 801cb08:	d10e      	bne.n	801cb28 <__mcmp+0x28>
 801cb0a:	f100 0314 	add.w	r3, r0, #20
 801cb0e:	3114      	adds	r1, #20
 801cb10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801cb14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801cb18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801cb1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801cb20:	42a5      	cmp	r5, r4
 801cb22:	d003      	beq.n	801cb2c <__mcmp+0x2c>
 801cb24:	d305      	bcc.n	801cb32 <__mcmp+0x32>
 801cb26:	2201      	movs	r2, #1
 801cb28:	4610      	mov	r0, r2
 801cb2a:	bd30      	pop	{r4, r5, pc}
 801cb2c:	4283      	cmp	r3, r0
 801cb2e:	d3f3      	bcc.n	801cb18 <__mcmp+0x18>
 801cb30:	e7fa      	b.n	801cb28 <__mcmp+0x28>
 801cb32:	f04f 32ff 	mov.w	r2, #4294967295
 801cb36:	e7f7      	b.n	801cb28 <__mcmp+0x28>

0801cb38 <__mdiff>:
 801cb38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb3c:	460c      	mov	r4, r1
 801cb3e:	4606      	mov	r6, r0
 801cb40:	4611      	mov	r1, r2
 801cb42:	4620      	mov	r0, r4
 801cb44:	4690      	mov	r8, r2
 801cb46:	f7ff ffdb 	bl	801cb00 <__mcmp>
 801cb4a:	1e05      	subs	r5, r0, #0
 801cb4c:	d110      	bne.n	801cb70 <__mdiff+0x38>
 801cb4e:	4629      	mov	r1, r5
 801cb50:	4630      	mov	r0, r6
 801cb52:	f7ff fd53 	bl	801c5fc <_Balloc>
 801cb56:	b930      	cbnz	r0, 801cb66 <__mdiff+0x2e>
 801cb58:	4b3a      	ldr	r3, [pc, #232]	; (801cc44 <__mdiff+0x10c>)
 801cb5a:	4602      	mov	r2, r0
 801cb5c:	f240 2132 	movw	r1, #562	; 0x232
 801cb60:	4839      	ldr	r0, [pc, #228]	; (801cc48 <__mdiff+0x110>)
 801cb62:	f7fd fb6f 	bl	801a244 <__assert_func>
 801cb66:	2301      	movs	r3, #1
 801cb68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cb6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb70:	bfa4      	itt	ge
 801cb72:	4643      	movge	r3, r8
 801cb74:	46a0      	movge	r8, r4
 801cb76:	4630      	mov	r0, r6
 801cb78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801cb7c:	bfa6      	itte	ge
 801cb7e:	461c      	movge	r4, r3
 801cb80:	2500      	movge	r5, #0
 801cb82:	2501      	movlt	r5, #1
 801cb84:	f7ff fd3a 	bl	801c5fc <_Balloc>
 801cb88:	b920      	cbnz	r0, 801cb94 <__mdiff+0x5c>
 801cb8a:	4b2e      	ldr	r3, [pc, #184]	; (801cc44 <__mdiff+0x10c>)
 801cb8c:	4602      	mov	r2, r0
 801cb8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 801cb92:	e7e5      	b.n	801cb60 <__mdiff+0x28>
 801cb94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801cb98:	6926      	ldr	r6, [r4, #16]
 801cb9a:	60c5      	str	r5, [r0, #12]
 801cb9c:	f104 0914 	add.w	r9, r4, #20
 801cba0:	f108 0514 	add.w	r5, r8, #20
 801cba4:	f100 0e14 	add.w	lr, r0, #20
 801cba8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801cbac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801cbb0:	f108 0210 	add.w	r2, r8, #16
 801cbb4:	46f2      	mov	sl, lr
 801cbb6:	2100      	movs	r1, #0
 801cbb8:	f859 3b04 	ldr.w	r3, [r9], #4
 801cbbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801cbc0:	fa1f f883 	uxth.w	r8, r3
 801cbc4:	fa11 f18b 	uxtah	r1, r1, fp
 801cbc8:	0c1b      	lsrs	r3, r3, #16
 801cbca:	eba1 0808 	sub.w	r8, r1, r8
 801cbce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801cbd2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801cbd6:	fa1f f888 	uxth.w	r8, r8
 801cbda:	1419      	asrs	r1, r3, #16
 801cbdc:	454e      	cmp	r6, r9
 801cbde:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801cbe2:	f84a 3b04 	str.w	r3, [sl], #4
 801cbe6:	d8e7      	bhi.n	801cbb8 <__mdiff+0x80>
 801cbe8:	1b33      	subs	r3, r6, r4
 801cbea:	3b15      	subs	r3, #21
 801cbec:	f023 0303 	bic.w	r3, r3, #3
 801cbf0:	3304      	adds	r3, #4
 801cbf2:	3415      	adds	r4, #21
 801cbf4:	42a6      	cmp	r6, r4
 801cbf6:	bf38      	it	cc
 801cbf8:	2304      	movcc	r3, #4
 801cbfa:	441d      	add	r5, r3
 801cbfc:	4473      	add	r3, lr
 801cbfe:	469e      	mov	lr, r3
 801cc00:	462e      	mov	r6, r5
 801cc02:	4566      	cmp	r6, ip
 801cc04:	d30e      	bcc.n	801cc24 <__mdiff+0xec>
 801cc06:	f10c 0203 	add.w	r2, ip, #3
 801cc0a:	1b52      	subs	r2, r2, r5
 801cc0c:	f022 0203 	bic.w	r2, r2, #3
 801cc10:	3d03      	subs	r5, #3
 801cc12:	45ac      	cmp	ip, r5
 801cc14:	bf38      	it	cc
 801cc16:	2200      	movcc	r2, #0
 801cc18:	441a      	add	r2, r3
 801cc1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801cc1e:	b17b      	cbz	r3, 801cc40 <__mdiff+0x108>
 801cc20:	6107      	str	r7, [r0, #16]
 801cc22:	e7a3      	b.n	801cb6c <__mdiff+0x34>
 801cc24:	f856 8b04 	ldr.w	r8, [r6], #4
 801cc28:	fa11 f288 	uxtah	r2, r1, r8
 801cc2c:	1414      	asrs	r4, r2, #16
 801cc2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801cc32:	b292      	uxth	r2, r2
 801cc34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801cc38:	f84e 2b04 	str.w	r2, [lr], #4
 801cc3c:	1421      	asrs	r1, r4, #16
 801cc3e:	e7e0      	b.n	801cc02 <__mdiff+0xca>
 801cc40:	3f01      	subs	r7, #1
 801cc42:	e7ea      	b.n	801cc1a <__mdiff+0xe2>
 801cc44:	0802026d 	.word	0x0802026d
 801cc48:	080202ea 	.word	0x080202ea

0801cc4c <__d2b>:
 801cc4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cc50:	4689      	mov	r9, r1
 801cc52:	2101      	movs	r1, #1
 801cc54:	ec57 6b10 	vmov	r6, r7, d0
 801cc58:	4690      	mov	r8, r2
 801cc5a:	f7ff fccf 	bl	801c5fc <_Balloc>
 801cc5e:	4604      	mov	r4, r0
 801cc60:	b930      	cbnz	r0, 801cc70 <__d2b+0x24>
 801cc62:	4602      	mov	r2, r0
 801cc64:	4b25      	ldr	r3, [pc, #148]	; (801ccfc <__d2b+0xb0>)
 801cc66:	4826      	ldr	r0, [pc, #152]	; (801cd00 <__d2b+0xb4>)
 801cc68:	f240 310a 	movw	r1, #778	; 0x30a
 801cc6c:	f7fd faea 	bl	801a244 <__assert_func>
 801cc70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801cc74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cc78:	bb35      	cbnz	r5, 801ccc8 <__d2b+0x7c>
 801cc7a:	2e00      	cmp	r6, #0
 801cc7c:	9301      	str	r3, [sp, #4]
 801cc7e:	d028      	beq.n	801ccd2 <__d2b+0x86>
 801cc80:	4668      	mov	r0, sp
 801cc82:	9600      	str	r6, [sp, #0]
 801cc84:	f7ff fd82 	bl	801c78c <__lo0bits>
 801cc88:	9900      	ldr	r1, [sp, #0]
 801cc8a:	b300      	cbz	r0, 801ccce <__d2b+0x82>
 801cc8c:	9a01      	ldr	r2, [sp, #4]
 801cc8e:	f1c0 0320 	rsb	r3, r0, #32
 801cc92:	fa02 f303 	lsl.w	r3, r2, r3
 801cc96:	430b      	orrs	r3, r1
 801cc98:	40c2      	lsrs	r2, r0
 801cc9a:	6163      	str	r3, [r4, #20]
 801cc9c:	9201      	str	r2, [sp, #4]
 801cc9e:	9b01      	ldr	r3, [sp, #4]
 801cca0:	61a3      	str	r3, [r4, #24]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	bf14      	ite	ne
 801cca6:	2202      	movne	r2, #2
 801cca8:	2201      	moveq	r2, #1
 801ccaa:	6122      	str	r2, [r4, #16]
 801ccac:	b1d5      	cbz	r5, 801cce4 <__d2b+0x98>
 801ccae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801ccb2:	4405      	add	r5, r0
 801ccb4:	f8c9 5000 	str.w	r5, [r9]
 801ccb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801ccbc:	f8c8 0000 	str.w	r0, [r8]
 801ccc0:	4620      	mov	r0, r4
 801ccc2:	b003      	add	sp, #12
 801ccc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ccc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cccc:	e7d5      	b.n	801cc7a <__d2b+0x2e>
 801ccce:	6161      	str	r1, [r4, #20]
 801ccd0:	e7e5      	b.n	801cc9e <__d2b+0x52>
 801ccd2:	a801      	add	r0, sp, #4
 801ccd4:	f7ff fd5a 	bl	801c78c <__lo0bits>
 801ccd8:	9b01      	ldr	r3, [sp, #4]
 801ccda:	6163      	str	r3, [r4, #20]
 801ccdc:	2201      	movs	r2, #1
 801ccde:	6122      	str	r2, [r4, #16]
 801cce0:	3020      	adds	r0, #32
 801cce2:	e7e3      	b.n	801ccac <__d2b+0x60>
 801cce4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801cce8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801ccec:	f8c9 0000 	str.w	r0, [r9]
 801ccf0:	6918      	ldr	r0, [r3, #16]
 801ccf2:	f7ff fd2b 	bl	801c74c <__hi0bits>
 801ccf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ccfa:	e7df      	b.n	801ccbc <__d2b+0x70>
 801ccfc:	0802026d 	.word	0x0802026d
 801cd00:	080202ea 	.word	0x080202ea

0801cd04 <_realloc_r>:
 801cd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd08:	4680      	mov	r8, r0
 801cd0a:	4614      	mov	r4, r2
 801cd0c:	460e      	mov	r6, r1
 801cd0e:	b921      	cbnz	r1, 801cd1a <_realloc_r+0x16>
 801cd10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cd14:	4611      	mov	r1, r2
 801cd16:	f7fd bbbd 	b.w	801a494 <_malloc_r>
 801cd1a:	b92a      	cbnz	r2, 801cd28 <_realloc_r+0x24>
 801cd1c:	f7fd fb4e 	bl	801a3bc <_free_r>
 801cd20:	4625      	mov	r5, r4
 801cd22:	4628      	mov	r0, r5
 801cd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd28:	f000 fa1c 	bl	801d164 <_malloc_usable_size_r>
 801cd2c:	4284      	cmp	r4, r0
 801cd2e:	4607      	mov	r7, r0
 801cd30:	d802      	bhi.n	801cd38 <_realloc_r+0x34>
 801cd32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801cd36:	d812      	bhi.n	801cd5e <_realloc_r+0x5a>
 801cd38:	4621      	mov	r1, r4
 801cd3a:	4640      	mov	r0, r8
 801cd3c:	f7fd fbaa 	bl	801a494 <_malloc_r>
 801cd40:	4605      	mov	r5, r0
 801cd42:	2800      	cmp	r0, #0
 801cd44:	d0ed      	beq.n	801cd22 <_realloc_r+0x1e>
 801cd46:	42bc      	cmp	r4, r7
 801cd48:	4622      	mov	r2, r4
 801cd4a:	4631      	mov	r1, r6
 801cd4c:	bf28      	it	cs
 801cd4e:	463a      	movcs	r2, r7
 801cd50:	f7fd faee 	bl	801a330 <memcpy>
 801cd54:	4631      	mov	r1, r6
 801cd56:	4640      	mov	r0, r8
 801cd58:	f7fd fb30 	bl	801a3bc <_free_r>
 801cd5c:	e7e1      	b.n	801cd22 <_realloc_r+0x1e>
 801cd5e:	4635      	mov	r5, r6
 801cd60:	e7df      	b.n	801cd22 <_realloc_r+0x1e>

0801cd62 <__ssputs_r>:
 801cd62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd66:	688e      	ldr	r6, [r1, #8]
 801cd68:	429e      	cmp	r6, r3
 801cd6a:	4682      	mov	sl, r0
 801cd6c:	460c      	mov	r4, r1
 801cd6e:	4690      	mov	r8, r2
 801cd70:	461f      	mov	r7, r3
 801cd72:	d838      	bhi.n	801cde6 <__ssputs_r+0x84>
 801cd74:	898a      	ldrh	r2, [r1, #12]
 801cd76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cd7a:	d032      	beq.n	801cde2 <__ssputs_r+0x80>
 801cd7c:	6825      	ldr	r5, [r4, #0]
 801cd7e:	6909      	ldr	r1, [r1, #16]
 801cd80:	eba5 0901 	sub.w	r9, r5, r1
 801cd84:	6965      	ldr	r5, [r4, #20]
 801cd86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cd8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cd8e:	3301      	adds	r3, #1
 801cd90:	444b      	add	r3, r9
 801cd92:	106d      	asrs	r5, r5, #1
 801cd94:	429d      	cmp	r5, r3
 801cd96:	bf38      	it	cc
 801cd98:	461d      	movcc	r5, r3
 801cd9a:	0553      	lsls	r3, r2, #21
 801cd9c:	d531      	bpl.n	801ce02 <__ssputs_r+0xa0>
 801cd9e:	4629      	mov	r1, r5
 801cda0:	f7fd fb78 	bl	801a494 <_malloc_r>
 801cda4:	4606      	mov	r6, r0
 801cda6:	b950      	cbnz	r0, 801cdbe <__ssputs_r+0x5c>
 801cda8:	230c      	movs	r3, #12
 801cdaa:	f8ca 3000 	str.w	r3, [sl]
 801cdae:	89a3      	ldrh	r3, [r4, #12]
 801cdb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cdb4:	81a3      	strh	r3, [r4, #12]
 801cdb6:	f04f 30ff 	mov.w	r0, #4294967295
 801cdba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cdbe:	6921      	ldr	r1, [r4, #16]
 801cdc0:	464a      	mov	r2, r9
 801cdc2:	f7fd fab5 	bl	801a330 <memcpy>
 801cdc6:	89a3      	ldrh	r3, [r4, #12]
 801cdc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801cdcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cdd0:	81a3      	strh	r3, [r4, #12]
 801cdd2:	6126      	str	r6, [r4, #16]
 801cdd4:	6165      	str	r5, [r4, #20]
 801cdd6:	444e      	add	r6, r9
 801cdd8:	eba5 0509 	sub.w	r5, r5, r9
 801cddc:	6026      	str	r6, [r4, #0]
 801cdde:	60a5      	str	r5, [r4, #8]
 801cde0:	463e      	mov	r6, r7
 801cde2:	42be      	cmp	r6, r7
 801cde4:	d900      	bls.n	801cde8 <__ssputs_r+0x86>
 801cde6:	463e      	mov	r6, r7
 801cde8:	6820      	ldr	r0, [r4, #0]
 801cdea:	4632      	mov	r2, r6
 801cdec:	4641      	mov	r1, r8
 801cdee:	f7fd faad 	bl	801a34c <memmove>
 801cdf2:	68a3      	ldr	r3, [r4, #8]
 801cdf4:	1b9b      	subs	r3, r3, r6
 801cdf6:	60a3      	str	r3, [r4, #8]
 801cdf8:	6823      	ldr	r3, [r4, #0]
 801cdfa:	4433      	add	r3, r6
 801cdfc:	6023      	str	r3, [r4, #0]
 801cdfe:	2000      	movs	r0, #0
 801ce00:	e7db      	b.n	801cdba <__ssputs_r+0x58>
 801ce02:	462a      	mov	r2, r5
 801ce04:	f7ff ff7e 	bl	801cd04 <_realloc_r>
 801ce08:	4606      	mov	r6, r0
 801ce0a:	2800      	cmp	r0, #0
 801ce0c:	d1e1      	bne.n	801cdd2 <__ssputs_r+0x70>
 801ce0e:	6921      	ldr	r1, [r4, #16]
 801ce10:	4650      	mov	r0, sl
 801ce12:	f7fd fad3 	bl	801a3bc <_free_r>
 801ce16:	e7c7      	b.n	801cda8 <__ssputs_r+0x46>

0801ce18 <_svfiprintf_r>:
 801ce18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce1c:	4698      	mov	r8, r3
 801ce1e:	898b      	ldrh	r3, [r1, #12]
 801ce20:	061b      	lsls	r3, r3, #24
 801ce22:	b09d      	sub	sp, #116	; 0x74
 801ce24:	4607      	mov	r7, r0
 801ce26:	460d      	mov	r5, r1
 801ce28:	4614      	mov	r4, r2
 801ce2a:	d50e      	bpl.n	801ce4a <_svfiprintf_r+0x32>
 801ce2c:	690b      	ldr	r3, [r1, #16]
 801ce2e:	b963      	cbnz	r3, 801ce4a <_svfiprintf_r+0x32>
 801ce30:	2140      	movs	r1, #64	; 0x40
 801ce32:	f7fd fb2f 	bl	801a494 <_malloc_r>
 801ce36:	6028      	str	r0, [r5, #0]
 801ce38:	6128      	str	r0, [r5, #16]
 801ce3a:	b920      	cbnz	r0, 801ce46 <_svfiprintf_r+0x2e>
 801ce3c:	230c      	movs	r3, #12
 801ce3e:	603b      	str	r3, [r7, #0]
 801ce40:	f04f 30ff 	mov.w	r0, #4294967295
 801ce44:	e0d1      	b.n	801cfea <_svfiprintf_r+0x1d2>
 801ce46:	2340      	movs	r3, #64	; 0x40
 801ce48:	616b      	str	r3, [r5, #20]
 801ce4a:	2300      	movs	r3, #0
 801ce4c:	9309      	str	r3, [sp, #36]	; 0x24
 801ce4e:	2320      	movs	r3, #32
 801ce50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ce54:	f8cd 800c 	str.w	r8, [sp, #12]
 801ce58:	2330      	movs	r3, #48	; 0x30
 801ce5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d004 <_svfiprintf_r+0x1ec>
 801ce5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ce62:	f04f 0901 	mov.w	r9, #1
 801ce66:	4623      	mov	r3, r4
 801ce68:	469a      	mov	sl, r3
 801ce6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ce6e:	b10a      	cbz	r2, 801ce74 <_svfiprintf_r+0x5c>
 801ce70:	2a25      	cmp	r2, #37	; 0x25
 801ce72:	d1f9      	bne.n	801ce68 <_svfiprintf_r+0x50>
 801ce74:	ebba 0b04 	subs.w	fp, sl, r4
 801ce78:	d00b      	beq.n	801ce92 <_svfiprintf_r+0x7a>
 801ce7a:	465b      	mov	r3, fp
 801ce7c:	4622      	mov	r2, r4
 801ce7e:	4629      	mov	r1, r5
 801ce80:	4638      	mov	r0, r7
 801ce82:	f7ff ff6e 	bl	801cd62 <__ssputs_r>
 801ce86:	3001      	adds	r0, #1
 801ce88:	f000 80aa 	beq.w	801cfe0 <_svfiprintf_r+0x1c8>
 801ce8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ce8e:	445a      	add	r2, fp
 801ce90:	9209      	str	r2, [sp, #36]	; 0x24
 801ce92:	f89a 3000 	ldrb.w	r3, [sl]
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	f000 80a2 	beq.w	801cfe0 <_svfiprintf_r+0x1c8>
 801ce9c:	2300      	movs	r3, #0
 801ce9e:	f04f 32ff 	mov.w	r2, #4294967295
 801cea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cea6:	f10a 0a01 	add.w	sl, sl, #1
 801ceaa:	9304      	str	r3, [sp, #16]
 801ceac:	9307      	str	r3, [sp, #28]
 801ceae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ceb2:	931a      	str	r3, [sp, #104]	; 0x68
 801ceb4:	4654      	mov	r4, sl
 801ceb6:	2205      	movs	r2, #5
 801ceb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cebc:	4851      	ldr	r0, [pc, #324]	; (801d004 <_svfiprintf_r+0x1ec>)
 801cebe:	f7e3 f987 	bl	80001d0 <memchr>
 801cec2:	9a04      	ldr	r2, [sp, #16]
 801cec4:	b9d8      	cbnz	r0, 801cefe <_svfiprintf_r+0xe6>
 801cec6:	06d0      	lsls	r0, r2, #27
 801cec8:	bf44      	itt	mi
 801ceca:	2320      	movmi	r3, #32
 801cecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ced0:	0711      	lsls	r1, r2, #28
 801ced2:	bf44      	itt	mi
 801ced4:	232b      	movmi	r3, #43	; 0x2b
 801ced6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ceda:	f89a 3000 	ldrb.w	r3, [sl]
 801cede:	2b2a      	cmp	r3, #42	; 0x2a
 801cee0:	d015      	beq.n	801cf0e <_svfiprintf_r+0xf6>
 801cee2:	9a07      	ldr	r2, [sp, #28]
 801cee4:	4654      	mov	r4, sl
 801cee6:	2000      	movs	r0, #0
 801cee8:	f04f 0c0a 	mov.w	ip, #10
 801ceec:	4621      	mov	r1, r4
 801ceee:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cef2:	3b30      	subs	r3, #48	; 0x30
 801cef4:	2b09      	cmp	r3, #9
 801cef6:	d94e      	bls.n	801cf96 <_svfiprintf_r+0x17e>
 801cef8:	b1b0      	cbz	r0, 801cf28 <_svfiprintf_r+0x110>
 801cefa:	9207      	str	r2, [sp, #28]
 801cefc:	e014      	b.n	801cf28 <_svfiprintf_r+0x110>
 801cefe:	eba0 0308 	sub.w	r3, r0, r8
 801cf02:	fa09 f303 	lsl.w	r3, r9, r3
 801cf06:	4313      	orrs	r3, r2
 801cf08:	9304      	str	r3, [sp, #16]
 801cf0a:	46a2      	mov	sl, r4
 801cf0c:	e7d2      	b.n	801ceb4 <_svfiprintf_r+0x9c>
 801cf0e:	9b03      	ldr	r3, [sp, #12]
 801cf10:	1d19      	adds	r1, r3, #4
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	9103      	str	r1, [sp, #12]
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	bfbb      	ittet	lt
 801cf1a:	425b      	neglt	r3, r3
 801cf1c:	f042 0202 	orrlt.w	r2, r2, #2
 801cf20:	9307      	strge	r3, [sp, #28]
 801cf22:	9307      	strlt	r3, [sp, #28]
 801cf24:	bfb8      	it	lt
 801cf26:	9204      	strlt	r2, [sp, #16]
 801cf28:	7823      	ldrb	r3, [r4, #0]
 801cf2a:	2b2e      	cmp	r3, #46	; 0x2e
 801cf2c:	d10c      	bne.n	801cf48 <_svfiprintf_r+0x130>
 801cf2e:	7863      	ldrb	r3, [r4, #1]
 801cf30:	2b2a      	cmp	r3, #42	; 0x2a
 801cf32:	d135      	bne.n	801cfa0 <_svfiprintf_r+0x188>
 801cf34:	9b03      	ldr	r3, [sp, #12]
 801cf36:	1d1a      	adds	r2, r3, #4
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	9203      	str	r2, [sp, #12]
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	bfb8      	it	lt
 801cf40:	f04f 33ff 	movlt.w	r3, #4294967295
 801cf44:	3402      	adds	r4, #2
 801cf46:	9305      	str	r3, [sp, #20]
 801cf48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d014 <_svfiprintf_r+0x1fc>
 801cf4c:	7821      	ldrb	r1, [r4, #0]
 801cf4e:	2203      	movs	r2, #3
 801cf50:	4650      	mov	r0, sl
 801cf52:	f7e3 f93d 	bl	80001d0 <memchr>
 801cf56:	b140      	cbz	r0, 801cf6a <_svfiprintf_r+0x152>
 801cf58:	2340      	movs	r3, #64	; 0x40
 801cf5a:	eba0 000a 	sub.w	r0, r0, sl
 801cf5e:	fa03 f000 	lsl.w	r0, r3, r0
 801cf62:	9b04      	ldr	r3, [sp, #16]
 801cf64:	4303      	orrs	r3, r0
 801cf66:	3401      	adds	r4, #1
 801cf68:	9304      	str	r3, [sp, #16]
 801cf6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf6e:	4826      	ldr	r0, [pc, #152]	; (801d008 <_svfiprintf_r+0x1f0>)
 801cf70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cf74:	2206      	movs	r2, #6
 801cf76:	f7e3 f92b 	bl	80001d0 <memchr>
 801cf7a:	2800      	cmp	r0, #0
 801cf7c:	d038      	beq.n	801cff0 <_svfiprintf_r+0x1d8>
 801cf7e:	4b23      	ldr	r3, [pc, #140]	; (801d00c <_svfiprintf_r+0x1f4>)
 801cf80:	bb1b      	cbnz	r3, 801cfca <_svfiprintf_r+0x1b2>
 801cf82:	9b03      	ldr	r3, [sp, #12]
 801cf84:	3307      	adds	r3, #7
 801cf86:	f023 0307 	bic.w	r3, r3, #7
 801cf8a:	3308      	adds	r3, #8
 801cf8c:	9303      	str	r3, [sp, #12]
 801cf8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf90:	4433      	add	r3, r6
 801cf92:	9309      	str	r3, [sp, #36]	; 0x24
 801cf94:	e767      	b.n	801ce66 <_svfiprintf_r+0x4e>
 801cf96:	fb0c 3202 	mla	r2, ip, r2, r3
 801cf9a:	460c      	mov	r4, r1
 801cf9c:	2001      	movs	r0, #1
 801cf9e:	e7a5      	b.n	801ceec <_svfiprintf_r+0xd4>
 801cfa0:	2300      	movs	r3, #0
 801cfa2:	3401      	adds	r4, #1
 801cfa4:	9305      	str	r3, [sp, #20]
 801cfa6:	4619      	mov	r1, r3
 801cfa8:	f04f 0c0a 	mov.w	ip, #10
 801cfac:	4620      	mov	r0, r4
 801cfae:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cfb2:	3a30      	subs	r2, #48	; 0x30
 801cfb4:	2a09      	cmp	r2, #9
 801cfb6:	d903      	bls.n	801cfc0 <_svfiprintf_r+0x1a8>
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	d0c5      	beq.n	801cf48 <_svfiprintf_r+0x130>
 801cfbc:	9105      	str	r1, [sp, #20]
 801cfbe:	e7c3      	b.n	801cf48 <_svfiprintf_r+0x130>
 801cfc0:	fb0c 2101 	mla	r1, ip, r1, r2
 801cfc4:	4604      	mov	r4, r0
 801cfc6:	2301      	movs	r3, #1
 801cfc8:	e7f0      	b.n	801cfac <_svfiprintf_r+0x194>
 801cfca:	ab03      	add	r3, sp, #12
 801cfcc:	9300      	str	r3, [sp, #0]
 801cfce:	462a      	mov	r2, r5
 801cfd0:	4b0f      	ldr	r3, [pc, #60]	; (801d010 <_svfiprintf_r+0x1f8>)
 801cfd2:	a904      	add	r1, sp, #16
 801cfd4:	4638      	mov	r0, r7
 801cfd6:	f7fd fccb 	bl	801a970 <_printf_float>
 801cfda:	1c42      	adds	r2, r0, #1
 801cfdc:	4606      	mov	r6, r0
 801cfde:	d1d6      	bne.n	801cf8e <_svfiprintf_r+0x176>
 801cfe0:	89ab      	ldrh	r3, [r5, #12]
 801cfe2:	065b      	lsls	r3, r3, #25
 801cfe4:	f53f af2c 	bmi.w	801ce40 <_svfiprintf_r+0x28>
 801cfe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cfea:	b01d      	add	sp, #116	; 0x74
 801cfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cff0:	ab03      	add	r3, sp, #12
 801cff2:	9300      	str	r3, [sp, #0]
 801cff4:	462a      	mov	r2, r5
 801cff6:	4b06      	ldr	r3, [pc, #24]	; (801d010 <_svfiprintf_r+0x1f8>)
 801cff8:	a904      	add	r1, sp, #16
 801cffa:	4638      	mov	r0, r7
 801cffc:	f7fd ff5c 	bl	801aeb8 <_printf_i>
 801d000:	e7eb      	b.n	801cfda <_svfiprintf_r+0x1c2>
 801d002:	bf00      	nop
 801d004:	080200a8 	.word	0x080200a8
 801d008:	080200b2 	.word	0x080200b2
 801d00c:	0801a971 	.word	0x0801a971
 801d010:	0801cd63 	.word	0x0801cd63
 801d014:	080200ae 	.word	0x080200ae

0801d018 <__sread>:
 801d018:	b510      	push	{r4, lr}
 801d01a:	460c      	mov	r4, r1
 801d01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d020:	f000 f8a8 	bl	801d174 <_read_r>
 801d024:	2800      	cmp	r0, #0
 801d026:	bfab      	itete	ge
 801d028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d02a:	89a3      	ldrhlt	r3, [r4, #12]
 801d02c:	181b      	addge	r3, r3, r0
 801d02e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d032:	bfac      	ite	ge
 801d034:	6563      	strge	r3, [r4, #84]	; 0x54
 801d036:	81a3      	strhlt	r3, [r4, #12]
 801d038:	bd10      	pop	{r4, pc}

0801d03a <__swrite>:
 801d03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d03e:	461f      	mov	r7, r3
 801d040:	898b      	ldrh	r3, [r1, #12]
 801d042:	05db      	lsls	r3, r3, #23
 801d044:	4605      	mov	r5, r0
 801d046:	460c      	mov	r4, r1
 801d048:	4616      	mov	r6, r2
 801d04a:	d505      	bpl.n	801d058 <__swrite+0x1e>
 801d04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d050:	2302      	movs	r3, #2
 801d052:	2200      	movs	r2, #0
 801d054:	f000 f874 	bl	801d140 <_lseek_r>
 801d058:	89a3      	ldrh	r3, [r4, #12]
 801d05a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d05e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d062:	81a3      	strh	r3, [r4, #12]
 801d064:	4632      	mov	r2, r6
 801d066:	463b      	mov	r3, r7
 801d068:	4628      	mov	r0, r5
 801d06a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d06e:	f000 b823 	b.w	801d0b8 <_write_r>

0801d072 <__sseek>:
 801d072:	b510      	push	{r4, lr}
 801d074:	460c      	mov	r4, r1
 801d076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d07a:	f000 f861 	bl	801d140 <_lseek_r>
 801d07e:	1c43      	adds	r3, r0, #1
 801d080:	89a3      	ldrh	r3, [r4, #12]
 801d082:	bf15      	itete	ne
 801d084:	6560      	strne	r0, [r4, #84]	; 0x54
 801d086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d08a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d08e:	81a3      	strheq	r3, [r4, #12]
 801d090:	bf18      	it	ne
 801d092:	81a3      	strhne	r3, [r4, #12]
 801d094:	bd10      	pop	{r4, pc}

0801d096 <__sclose>:
 801d096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d09a:	f000 b81f 	b.w	801d0dc <_close_r>

0801d09e <__ascii_wctomb>:
 801d09e:	b149      	cbz	r1, 801d0b4 <__ascii_wctomb+0x16>
 801d0a0:	2aff      	cmp	r2, #255	; 0xff
 801d0a2:	bf85      	ittet	hi
 801d0a4:	238a      	movhi	r3, #138	; 0x8a
 801d0a6:	6003      	strhi	r3, [r0, #0]
 801d0a8:	700a      	strbls	r2, [r1, #0]
 801d0aa:	f04f 30ff 	movhi.w	r0, #4294967295
 801d0ae:	bf98      	it	ls
 801d0b0:	2001      	movls	r0, #1
 801d0b2:	4770      	bx	lr
 801d0b4:	4608      	mov	r0, r1
 801d0b6:	4770      	bx	lr

0801d0b8 <_write_r>:
 801d0b8:	b538      	push	{r3, r4, r5, lr}
 801d0ba:	4d07      	ldr	r5, [pc, #28]	; (801d0d8 <_write_r+0x20>)
 801d0bc:	4604      	mov	r4, r0
 801d0be:	4608      	mov	r0, r1
 801d0c0:	4611      	mov	r1, r2
 801d0c2:	2200      	movs	r2, #0
 801d0c4:	602a      	str	r2, [r5, #0]
 801d0c6:	461a      	mov	r2, r3
 801d0c8:	f7e6 fcf7 	bl	8003aba <_write>
 801d0cc:	1c43      	adds	r3, r0, #1
 801d0ce:	d102      	bne.n	801d0d6 <_write_r+0x1e>
 801d0d0:	682b      	ldr	r3, [r5, #0]
 801d0d2:	b103      	cbz	r3, 801d0d6 <_write_r+0x1e>
 801d0d4:	6023      	str	r3, [r4, #0]
 801d0d6:	bd38      	pop	{r3, r4, r5, pc}
 801d0d8:	200026d0 	.word	0x200026d0

0801d0dc <_close_r>:
 801d0dc:	b538      	push	{r3, r4, r5, lr}
 801d0de:	4d06      	ldr	r5, [pc, #24]	; (801d0f8 <_close_r+0x1c>)
 801d0e0:	2300      	movs	r3, #0
 801d0e2:	4604      	mov	r4, r0
 801d0e4:	4608      	mov	r0, r1
 801d0e6:	602b      	str	r3, [r5, #0]
 801d0e8:	f7e6 fd03 	bl	8003af2 <_close>
 801d0ec:	1c43      	adds	r3, r0, #1
 801d0ee:	d102      	bne.n	801d0f6 <_close_r+0x1a>
 801d0f0:	682b      	ldr	r3, [r5, #0]
 801d0f2:	b103      	cbz	r3, 801d0f6 <_close_r+0x1a>
 801d0f4:	6023      	str	r3, [r4, #0]
 801d0f6:	bd38      	pop	{r3, r4, r5, pc}
 801d0f8:	200026d0 	.word	0x200026d0

0801d0fc <_fstat_r>:
 801d0fc:	b538      	push	{r3, r4, r5, lr}
 801d0fe:	4d07      	ldr	r5, [pc, #28]	; (801d11c <_fstat_r+0x20>)
 801d100:	2300      	movs	r3, #0
 801d102:	4604      	mov	r4, r0
 801d104:	4608      	mov	r0, r1
 801d106:	4611      	mov	r1, r2
 801d108:	602b      	str	r3, [r5, #0]
 801d10a:	f7e6 fcfe 	bl	8003b0a <_fstat>
 801d10e:	1c43      	adds	r3, r0, #1
 801d110:	d102      	bne.n	801d118 <_fstat_r+0x1c>
 801d112:	682b      	ldr	r3, [r5, #0]
 801d114:	b103      	cbz	r3, 801d118 <_fstat_r+0x1c>
 801d116:	6023      	str	r3, [r4, #0]
 801d118:	bd38      	pop	{r3, r4, r5, pc}
 801d11a:	bf00      	nop
 801d11c:	200026d0 	.word	0x200026d0

0801d120 <_isatty_r>:
 801d120:	b538      	push	{r3, r4, r5, lr}
 801d122:	4d06      	ldr	r5, [pc, #24]	; (801d13c <_isatty_r+0x1c>)
 801d124:	2300      	movs	r3, #0
 801d126:	4604      	mov	r4, r0
 801d128:	4608      	mov	r0, r1
 801d12a:	602b      	str	r3, [r5, #0]
 801d12c:	f7e6 fcfd 	bl	8003b2a <_isatty>
 801d130:	1c43      	adds	r3, r0, #1
 801d132:	d102      	bne.n	801d13a <_isatty_r+0x1a>
 801d134:	682b      	ldr	r3, [r5, #0]
 801d136:	b103      	cbz	r3, 801d13a <_isatty_r+0x1a>
 801d138:	6023      	str	r3, [r4, #0]
 801d13a:	bd38      	pop	{r3, r4, r5, pc}
 801d13c:	200026d0 	.word	0x200026d0

0801d140 <_lseek_r>:
 801d140:	b538      	push	{r3, r4, r5, lr}
 801d142:	4d07      	ldr	r5, [pc, #28]	; (801d160 <_lseek_r+0x20>)
 801d144:	4604      	mov	r4, r0
 801d146:	4608      	mov	r0, r1
 801d148:	4611      	mov	r1, r2
 801d14a:	2200      	movs	r2, #0
 801d14c:	602a      	str	r2, [r5, #0]
 801d14e:	461a      	mov	r2, r3
 801d150:	f7e6 fcf6 	bl	8003b40 <_lseek>
 801d154:	1c43      	adds	r3, r0, #1
 801d156:	d102      	bne.n	801d15e <_lseek_r+0x1e>
 801d158:	682b      	ldr	r3, [r5, #0]
 801d15a:	b103      	cbz	r3, 801d15e <_lseek_r+0x1e>
 801d15c:	6023      	str	r3, [r4, #0]
 801d15e:	bd38      	pop	{r3, r4, r5, pc}
 801d160:	200026d0 	.word	0x200026d0

0801d164 <_malloc_usable_size_r>:
 801d164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d168:	1f18      	subs	r0, r3, #4
 801d16a:	2b00      	cmp	r3, #0
 801d16c:	bfbc      	itt	lt
 801d16e:	580b      	ldrlt	r3, [r1, r0]
 801d170:	18c0      	addlt	r0, r0, r3
 801d172:	4770      	bx	lr

0801d174 <_read_r>:
 801d174:	b538      	push	{r3, r4, r5, lr}
 801d176:	4d07      	ldr	r5, [pc, #28]	; (801d194 <_read_r+0x20>)
 801d178:	4604      	mov	r4, r0
 801d17a:	4608      	mov	r0, r1
 801d17c:	4611      	mov	r1, r2
 801d17e:	2200      	movs	r2, #0
 801d180:	602a      	str	r2, [r5, #0]
 801d182:	461a      	mov	r2, r3
 801d184:	f7e6 fc7c 	bl	8003a80 <_read>
 801d188:	1c43      	adds	r3, r0, #1
 801d18a:	d102      	bne.n	801d192 <_read_r+0x1e>
 801d18c:	682b      	ldr	r3, [r5, #0]
 801d18e:	b103      	cbz	r3, 801d192 <_read_r+0x1e>
 801d190:	6023      	str	r3, [r4, #0]
 801d192:	bd38      	pop	{r3, r4, r5, pc}
 801d194:	200026d0 	.word	0x200026d0

0801d198 <_init>:
 801d198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d19a:	bf00      	nop
 801d19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d19e:	bc08      	pop	{r3}
 801d1a0:	469e      	mov	lr, r3
 801d1a2:	4770      	bx	lr

0801d1a4 <_fini>:
 801d1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1a6:	bf00      	nop
 801d1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d1aa:	bc08      	pop	{r3}
 801d1ac:	469e      	mov	lr, r3
 801d1ae:	4770      	bx	lr
